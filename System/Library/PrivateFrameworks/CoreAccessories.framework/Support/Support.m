void sub_100006C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  id *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

id acc_policies_shouldHideAccessoryWithModelNumber(uint64_t a1)
{
  v2 = +[ACCUserDefaults sharedDefaults];
  unsigned int v3 = [v2 BOOLForKey:@"ShowHiddenAccessories"];

  if (v3)
  {
    id v4 = 0;
  }
  else
  {
    if (acc_policies_shouldHideAccessoryWithModelNumber_onceToken != -1) {
      dispatch_once(&acc_policies_shouldHideAccessoryWithModelNumber_onceToken, &__block_literal_global);
    }
    id v4 = [(id)acc_policies_shouldHideAccessoryWithModelNumber_hiddenModelNumbers containsObject:a1];
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v5 = "NO";
    if (v4) {
      v6 = "YES";
    }
    else {
      v6 = "NO";
    }
    if (v3) {
      v5 = "YES";
    }
    int v8 = 136315394;
    v9 = v6;
    __int16 v10 = 2080;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "shouldHideAccessory: %s, showHiddenAccessories: %s", (uint8_t *)&v8, 0x16u);
  }
  return v4;
}

void __acc_policies_shouldHideAccessoryWithModelNumber_block_invoke(id a1)
{
  v1 = (void *)acc_policies_shouldHideAccessoryWithModelNumber_hiddenModelNumbers;
  acc_policies_shouldHideAccessoryWithModelNumber_hiddenModelNumbers = (uint64_t)&off_100223218;
}

BOOL acc_policies_endpointRequiresUserAuthorization(uint64_t a1)
{
  return !a1 || !*(void *)a1 || *(_DWORD *)(*(void *)a1 + 8) != 2;
}

id acc_policies_shouldOverrideNameOnAccessoryWithModelNumber(uint64_t a1)
{
  if (acc_policies_shouldOverrideNameOnAccessoryWithModelNumber_onceToken != -1) {
    dispatch_once(&acc_policies_shouldOverrideNameOnAccessoryWithModelNumber_onceToken, &__block_literal_global_74);
  }
  id v2 = [(id)acc_policies_shouldOverrideNameOnAccessoryWithModelNumber_hiddenModelNumbers containsObject:a1];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    unsigned int v3 = "NO";
    if (v2) {
      unsigned int v3 = "YES";
    }
    int v5 = 136315138;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "shouldOverrideName: %s", (uint8_t *)&v5, 0xCu);
  }
  return v2;
}

void __acc_policies_shouldOverrideNameOnAccessoryWithModelNumber_block_invoke(id a1)
{
  v1 = (void *)acc_policies_shouldOverrideNameOnAccessoryWithModelNumber_hiddenModelNumbers;
  acc_policies_shouldOverrideNameOnAccessoryWithModelNumber_hiddenModelNumbers = (uint64_t)&off_100223230;
}

BOOL acc_policies_isTransportSupervised(unsigned int a1, int a2)
{
  BOOL v2 = ((1 << a1) & 0x1C3) != 0 && a2 == 1;
  return a1 <= 8 && v2;
}

uint64_t acc_policies_shouldResetLightningBusWhenTransportIsNoLongerRestricted(unsigned int a1, int a2)
{
  if ((a2 - 3) < 0xFFFFFFFE) {
    return (a1 < 9) & (0x1C3u >> a1);
  }
  else {
    return 0;
  }
}

BOOL acc_policies_endpointRequiresChargingCurrentLimit(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5, _WORD *a6)
{
  v85[0] = @"nameMatch";
  v85[1] = @"modelContain";
  v86[0] = @"IntelliLink";
  v86[1] = @"1.0";
  v85[2] = @"overrideCurrentLimit";
  v86[2] = &off_100223320;
  v6 = +[NSDictionary dictionaryWithObjects:v86 forKeys:v85 count:3];
  v87[0] = v6;
  v83[0] = @"nameMatch";
  v83[1] = @"modelContain";
  v84[0] = @"MyLink";
  v84[1] = @"1.0";
  v83[2] = @"overrideCurrentLimit";
  v84[2] = &off_100223320;
  v7 = +[NSDictionary dictionaryWithObjects:v84 forKeys:v83 count:3];
  v87[1] = v7;
  v81[0] = @"nameMatch";
  v81[1] = @"manufacturerMatch";
  v82[0] = @"iPL24Z";
  v82[1] = @"SDI Technologies";
  v81[2] = @"overrideCurrentLimit";
  v82[2] = &off_100223320;
  int v8 = +[NSDictionary dictionaryWithObjects:v82 forKeys:v81 count:3];
  v87[2] = v8;
  v79[0] = @"modelMatch";
  v79[1] = @"manufacturerMatch";
  v80[0] = @"MIB2";
  v80[1] = @"HARMAN";
  v79[2] = @"overrideCurrentLimit";
  v80[2] = &off_100223338;
  v9 = +[NSDictionary dictionaryWithObjects:v80 forKeys:v79 count:3];
  v87[3] = v9;
  v77[0] = @"modelMatch";
  v77[1] = @"manufacturerMatch";
  v78[0] = @"Range Rover Velar";
  v78[1] = @"Land Rover";
  v77[2] = @"overrideCurrentLimit";
  v78[2] = &off_100223320;
  __int16 v10 = +[NSDictionary dictionaryWithObjects:v78 forKeys:v77 count:3];
  v87[4] = v10;
  v75[0] = @"modelMatch";
  v75[1] = @"manufacturerMatch";
  v76[0] = @"Jaguar I-PACE";
  v76[1] = @"Jaguar";
  v75[2] = @"overrideCurrentLimit";
  v76[2] = &off_100223320;
  v11 = +[NSDictionary dictionaryWithObjects:v76 forKeys:v75 count:3];
  v87[5] = v11;
  v12 = +[NSArray arrayWithObjects:v87 count:6];

  unsigned __int16 v13 = (unsigned __int16)acc_userDefaultsIapd_copyIntegerForKey(@"ChargingPowerOverride");
  unsigned int v14 = acc_userDefaultsIapd_copyIntegerForKey(@"ChargingPowerBehavior");
  int v15 = acc_userDefaultsIapd_copyIntegerForKey(@"ChargingPowerBehavior");
  if (v15 <= 0) {
    int v16 = a5;
  }
  else {
    int v16 = v15;
  }
  if (v14 - 3 < 6)
  {
    int v17 = 10 * v14 - 5;
    unsigned int v18 = a4;
LABEL_7:
    int v19 = 1;
    goto LABEL_8;
  }
  int v17 = 45;
  unsigned int v18 = a4;
  if (v14 != 1) {
    goto LABEL_7;
  }
  int v19 = 0;
LABEL_8:
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67110656;
    int v62 = a2;
    __int16 v63 = 1024;
    int v64 = a3;
    __int16 v65 = 1024;
    unsigned int v66 = v19;
    __int16 v67 = 1024;
    unsigned int v68 = v13;
    __int16 v69 = 1024;
    unsigned int v70 = v18;
    __int16 v71 = 1024;
    unsigned int v72 = v14;
    __int16 v73 = 1024;
    int v74 = v17;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "RequiresChargingCurrentLimit: isApple=%d deviceType=%d checkChargingCurrentLimit=%d chargingCurrentLimit=%d inLimit=%d behavior=%d batteryThreshold=%d", buf, 0x2Cu);
  }
  if (!v19) {
    goto LABEL_66;
  }
  v55 = 0;
  unsigned int v20 = v13;
  BOOL v21 = v13 < v18 && v13 != 0;
  if (a1 && !v21)
  {
    v22 = *(CFTypeRef **)(a1 + 64);
    if (v22)
    {
      if (*v22) {
        v55 = (void *)CFRetain(*v22);
      }
      else {
        v55 = 0;
      }
      v23 = *(const void **)(*(void *)(a1 + 64) + 16);
      if (v23) {
        v54 = (void *)CFRetain(v23);
      }
      else {
        v54 = 0;
      }
      v24 = *(const void **)(*(void *)(a1 + 64) + 8);
      if (v24) {
        v53 = (void *)CFRetain(v24);
      }
      else {
        v53 = 0;
      }
      if (v55 && v54)
      {
        int v45 = v17;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        id obj = v12;
        id v25 = [obj countByEnumeratingWithState:&v56 objects:v60 count:16];
        if (v25)
        {
          id v26 = v25;
          LODWORD(v44) = v13;
          HIDWORD(v44) = v16;
          uint64_t v27 = *(void *)v57;
          while (2)
          {
            for (i = 0; i != v26; i = (char *)i + 1)
            {
              if (*(void *)v57 != v27) {
                objc_enumerationMutation(obj);
              }
              v29 = *(void **)(*((void *)&v56 + 1) + 8 * i);
              v30 = objc_msgSend(v29, "objectForKey:", @"nameMatch", v44);
              v31 = [v29 objectForKey:@"nameContain"];
              BOOL v32 = _matchOrContainString(v55, v30, v31);

              v33 = [v29 objectForKey:@"modelMatch"];
              v34 = [v29 objectForKey:@"modelContain"];
              BOOL v35 = _matchOrContainString(v54, v33, v34);

              v36 = [v29 objectForKey:@"manufacturerMatch"];
              v37 = [v29 objectForKey:@"manufacturerContain"];
              BOOL v38 = _matchOrContainString(v53, v36, v37);

              if (v32 && v35 && v38)
              {
                v39 = [v29 objectForKey:@"overrideCurrentLimit"];
                unsigned int v20 = (unsigned __int16)[v39 intValue];

                unsigned int v18 = a4;
                int v16 = HIDWORD(v44);
                goto LABEL_40;
              }
            }
            id v26 = [obj countByEnumeratingWithState:&v56 objects:v60 count:16];
            if (v26) {
              continue;
            }
            break;
          }
          unsigned int v18 = a4;
          unsigned int v20 = v44;
          int v16 = HIDWORD(v44);
        }
LABEL_40:

        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67110400;
          int v62 = a2;
          __int16 v63 = 1024;
          int v64 = a3;
          __int16 v65 = 1024;
          unsigned int v66 = v20;
          __int16 v67 = 1024;
          unsigned int v68 = v18;
          __int16 v69 = 1024;
          unsigned int v70 = v16;
          __int16 v71 = 1024;
          unsigned int v72 = v45;
          _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "RequiresChargingCurrentLimit: isApple=%d deviceType=%d chargingCurrentLimit=%d inLimit=%d battery=%d threshold=%d", buf, 0x26u);
        }
        if (a3 != 3 && v16 >= v45 && (a2 & 1) == 0 && (v18 > 0x5DC || v20 >= 0x5DD) && v20 - 1501 < 0xFFFFFA24) {
          unsigned int v20 = 1500;
        }
        if (v20) {
          BOOL v40 = v20 >= v18;
        }
        else {
          BOOL v40 = 1;
        }
        BOOL v21 = !v40;
        goto LABEL_55;
      }
LABEL_67:
      BOOL v21 = 0;
      BOOL v41 = a6 != 0;
      goto LABEL_58;
    }
LABEL_66:
    v54 = 0;
    v55 = 0;
    v53 = 0;
    goto LABEL_67;
  }
  v53 = 0;
  v54 = 0;
LABEL_55:
  BOOL v41 = a6 != 0;
  if (a6 && v21)
  {
    *a6 = v20;
    BOOL v41 = 1;
    BOOL v21 = 1;
  }
LABEL_58:
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    if (v41) {
      int v42 = (unsigned __int16)*a6;
    }
    else {
      int v42 = -1;
    }
    *(_DWORD *)buf = 67110656;
    int v62 = a2;
    __int16 v63 = 1024;
    int v64 = a3;
    __int16 v65 = 1024;
    unsigned int v66 = a5;
    __int16 v67 = 1024;
    unsigned int v68 = v16;
    __int16 v69 = 1024;
    unsigned int v70 = v18;
    __int16 v71 = 1024;
    unsigned int v72 = v42;
    __int16 v73 = 1024;
    int v74 = v21;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "RequiresChargingCurrentLimit: isApple=%d, deviceType=%d, batt=%d(%d), %d->%d, return %d", buf, 0x2Cu);
  }

  return v21;
}

BOOL _matchOrContainString(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  unint64_t v6 = a2;
  unint64_t v7 = a3;
  int v8 = (void *)v7;
  BOOL v9 = (v6 | v7) == 0;
  if (v5)
  {
    if (v6)
    {
      id v10 = [v5 isEqualToString:v6];
LABEL_6:
      BOOL v9 = (BOOL)v10;
      goto LABEL_7;
    }
    if (v7)
    {
      id v10 = [v5 containsString:v7];
      goto LABEL_6;
    }
  }
LABEL_7:

  return v9;
}

BOOL acc_policies_shouldFailAuthOnOOBPairingFailure(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 24) == 9;
  }
  return result;
}

id acc_policies_allowACCAuthProtocolOnAllTransport()
{
  v0 = +[ACCUserDefaults sharedDefaults];
  id v1 = [v0 BOOLForKey:@"AllowACCAuthProtocolOnAllTransport"];

  return v1;
}

uint64_t acc_policies_allowACCAuthProtocolOnTransport(int a1)
{
  BOOL v2 = +[ACCUserDefaults sharedDefaults];
  unsigned __int8 v3 = [v2 BOOLForKey:@"EnableACCAuthProtocolOnNFC"];

  id v4 = +[ACCUserDefaults sharedDefaults];
  unsigned int v5 = [v4 BOOLForKey:@"DisableACCAuthProtocolOnInductive"];

  unint64_t v6 = +[ACCUserDefaults sharedDefaults];
  unsigned int v7 = [v6 BOOLForKey:@"AllowACCAuthProtocolOnAllTransport"];

  if (a1 == 13 && (v3 & 1) != 0) {
    return 1;
  }
  int v9 = v5 ^ 1;
  if (a1 != 12) {
    int v9 = 0;
  }
  return v9 | v7;
}

BOOL acc_policies_allowAudioProductCertsOnTransport(int a1)
{
  return (a1 & 0xFFFFFFFE) == 2;
}

CFDataRef acc_policies_nfcTagUseKeys(const __CFData *result)
{
  if (result)
  {
    CFDataRef v1 = result;
    result = (const __CFData *)CFDataGetLength(result);
    if (result) {
      return (const __CFData *)(*CFDataGetBytePtr(v1) - 87 < 2);
    }
  }
  return result;
}

void platform_connectionInfo_configStreamCategoryListReady(uint64_t a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 9;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unint64_t v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    unint64_t v6 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412546;
    uint64_t v9 = a2;
    __int16 v10 = 2112;
    uint64_t v11 = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "connectionInfo configStreamCategoryListReady: %@ - %@", (uint8_t *)&v8, 0x16u);
  }

  if (a1)
  {
    if (a2)
    {
      unsigned int v7 = +[ACCConnectionInfoServer sharedServer];
      [v7 configStreamCategoryListReady:a1 connection:a2 client:0];
    }
  }
}

id logObjectForModule()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 9;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    BOOL v1 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v1) {
      logObjectForModule_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
    }
    id v10 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  else
  {
    id v10 = *(id *)(gLogObjects + 64);
  }

  return v10;
}

void platform_connectionInfo_configStreamCategoriesResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (gLogObjects) {
    BOOL v10 = gNumLogObjects < 9;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    v12 = &_os_log_default;
    id v11 = &_os_log_default;
  }
  else
  {
    v12 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v14 = 138413058;
    uint64_t v15 = a1;
    __int16 v16 = 2112;
    uint64_t v17 = a3;
    __int16 v18 = 2112;
    uint64_t v19 = a2;
    __int16 v20 = 2112;
    uint64_t v21 = a4;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "connectionInfo configStreamCategoriesResponse: %@: %@ - %@, categories: %@", (uint8_t *)&v14, 0x2Au);
  }

  if (a2 && a1)
  {
    if (a3)
    {
      unsigned __int16 v13 = +[ACCConnectionInfoServer sharedServer];
      [v13 configStreamCategoriesResponse:a4 forEndpoint:a2 connection:a3 client:a1 success:a5];
    }
  }
}

void platform_connectionInfo_configStreamPropertyResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (gLogObjects) {
    BOOL v14 = gNumLogObjects < 9;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v16 = &_os_log_default;
    id v15 = &_os_log_default;
  }
  else
  {
    __int16 v16 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138413570;
    uint64_t v20 = a1;
    __int16 v21 = 2112;
    uint64_t v22 = a3;
    __int16 v23 = 2112;
    uint64_t v24 = a2;
    __int16 v25 = 1024;
    int v26 = a4;
    __int16 v27 = 1024;
    int v28 = a5;
    __int16 v29 = 2112;
    uint64_t v30 = a6;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "connectionInfo configStreamPropertyResponse: %@: %@ - %@, categoryID: %u, propertyID: %u, value: %@", buf, 0x36u);
  }

  if (a2)
  {
    if (a3)
    {
      uint64_t v17 = +[ACCConnectionInfoServer sharedServer];
      LOBYTE(v18) = a7;
      [v17 configStreamPropertyResponse:a5 forCategory:a4 forEndpoint:a2 connection:a3 client:a1 value:a6 success:v18];
    }
  }
}

BOOL platform_connectionInfo_checkConfigStreamCategoryListReady(const void *a1, uint64_t a2)
{
  BOOL v4 = 0;
  if (!a1 || !a2) {
    goto LABEL_7;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  if (EndpointWithUUID)
  {
    uint64_t v6 = EndpointWithUUID;
    if (*((_DWORD *)EndpointWithUUID + 7) == 11)
    {
      uint64_t v7 = EndpointWithUUID[7];
      if (v7)
      {
        BOOL v4 = *(unsigned __int8 *)(v7 + 16) != 0;
        goto LABEL_7;
      }
      v12 = logObjectForModule();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 138412546;
        *(void *)uint64_t v18 = a2;
        *(_WORD *)&v18[8] = 2112;
        *(void *)&v18[10] = a1;
        unsigned __int16 v13 = "No protocol specific endpoint! %@ - %@";
        goto LABEL_24;
      }
    }
    else
    {
      v12 = logObjectForModule();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = *((_DWORD *)v6 + 7);
        int v17 = 67109634;
        *(_DWORD *)uint64_t v18 = v14;
        *(_WORD *)&v18[4] = 2112;
        *(void *)&v18[6] = a2;
        *(_WORD *)&v18[14] = 2112;
        *(void *)&v18[16] = a1;
        unsigned __int16 v13 = "Invalid endpoint protocol! %d, %@ - %@";
        id v15 = v12;
        uint32_t v16 = 28;
LABEL_25:
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v17, v16);
      }
    }
  }
  else
  {
    v12 = logObjectForModule();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138412546;
      *(void *)uint64_t v18 = a2;
      *(_WORD *)&v18[8] = 2112;
      *(void *)&v18[10] = a1;
      unsigned __int16 v13 = "Invalid endpointUUID! %@ - %@";
LABEL_24:
      id v15 = v12;
      uint32_t v16 = 22;
      goto LABEL_25;
    }
  }

  BOOL v4 = 0;
LABEL_7:
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 9;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v10 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  else
  {
    BOOL v10 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v17 = 138412802;
    *(void *)uint64_t v18 = a2;
    *(_WORD *)&v18[8] = 2112;
    *(void *)&v18[10] = a1;
    *(_WORD *)&v18[18] = 1024;
    *(_DWORD *)&v18[20] = v4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "connectionInfo checkConfigStreamCategoryListReady: %@ - %@, isReady %d", (uint8_t *)&v17, 0x1Cu);
  }

  return v4;
}

void platform_connectionInfo_configStreamGetCategories(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = 0;
  if (a2 && a3)
  {
    if (_categoriesAvailableForEndpoint(a3))
    {
      uint64_t v6 = (const void **)malloc_type_calloc(1uLL, 0x18uLL, 0x1060040AF9A0123uLL);
      void *v6 = CFRetain(a1);
      v6[2] = 0;
      if (accFeatureHandlers_invokeHandler(a3, 60, (uint64_t)v6)) {
        return;
      }
    }
    else
    {
      BOOL v10 = logObjectForModule();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 138412546;
        uint64_t v12 = a2;
        __int16 v13 = 2112;
        int v14 = a3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CategoryList not available yet! %@ - %@", (uint8_t *)&v11, 0x16u);
      }

      uint64_t v6 = 0;
    }
  }
  if (gLogObjects) {
    BOOL v7 = gNumLogObjects < 9;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v9 = &_os_log_default;
    id v8 = &_os_log_default;
  }
  else
  {
    id v9 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412802;
    uint64_t v12 = a2;
    __int16 v13 = 2112;
    int v14 = a3;
    __int16 v15 = 1024;
    int v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "connectionInfo configStreamPropertyRequest: %@ - %@, success %d", (uint8_t *)&v11, 0x1Cu);
  }

  platform_connectionInfo_configStreamCategoriesResponse((uint64_t)a1, (uint64_t)a3, a2, 0, 0);
  platform_configStream_deleteParams(v6);
}

uint64_t _categoriesAvailableForEndpoint(void *a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = ___categoriesAvailableForEndpoint_block_invoke;
  v3[3] = &unk_1002158A0;
  v3[4] = &v4;
  v3[5] = a1;
  acc_manager_protectedEndpointCall(a1, 0, 0, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10000846C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void platform_configStream_deleteParams(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    uint64_t v3 = a1[2];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

void platform_connectionInfo_configStreamPropertyRequest(const void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  BOOL v10 = 0;
  if (a2 && a3)
  {
    if (_categoriesAvailableForEndpoint(a3))
    {
      BOOL v10 = malloc_type_calloc(1uLL, 0x18uLL, 0x1060040AF9A0123uLL);
      *(void *)BOOL v10 = CFRetain(a1);
      v10[4] = a4;
      *((unsigned char *)v10 + 10) = a5;
      *((void *)v10 + 2) = 0;
      if (accFeatureHandlers_invokeHandler(a3, 62, (uint64_t)v10)) {
        return;
      }
    }
    else
    {
      int v14 = logObjectForModule();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 138412546;
        uint64_t v16 = a2;
        __int16 v17 = 2112;
        uint64_t v18 = a3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CategoryList not available yet! %@ - %@", (uint8_t *)&v15, 0x16u);
      }

      BOOL v10 = 0;
    }
  }
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects < 9;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v13 = &_os_log_default;
    id v12 = &_os_log_default;
  }
  else
  {
    __int16 v13 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v15 = 138413314;
    uint64_t v16 = a2;
    __int16 v17 = 2112;
    uint64_t v18 = a3;
    __int16 v19 = 1024;
    int v20 = 0;
    __int16 v21 = 1024;
    int v22 = a4;
    __int16 v23 = 1024;
    int v24 = a5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "connectionInfo configStreamPropertyRequest: %@ - %@, success %d, categoryID 0x%x, propertyID %u", (uint8_t *)&v15, 0x28u);
  }

  platform_connectionInfo_configStreamPropertyResponse((uint64_t)a1, (uint64_t)a3, a2, a4, a5, 0, 0);
  platform_configStream_deleteParams((const void **)v10);
}

void platform_connectionInfo_configStreamPropertySetValue(const void *a1, uint64_t a2, void *a3, __int16 a4, char a5, const void *a6)
{
  uint64_t v6 = 0;
  if (!a2 || !a3) {
    goto LABEL_8;
  }
  if ((_categoriesAvailableForEndpoint(a3) & 1) == 0)
  {
    int v14 = logObjectForModule();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412546;
      uint64_t v16 = a2;
      __int16 v17 = 2112;
      uint64_t v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CategoryList not available yet! %@ - %@", (uint8_t *)&v15, 0x16u);
    }

    uint64_t v6 = 0;
    goto LABEL_8;
  }
  uint64_t v6 = malloc_type_calloc(1uLL, 0x18uLL, 0x1060040AF9A0123uLL);
  *(void *)uint64_t v6 = CFRetain(a1);
  v6[4] = a4;
  *((unsigned char *)v6 + 10) = a5;
  CFTypeRef v13 = a6 ? CFRetain(a6) : 0;
  *((void *)v6 + 2) = v13;
  if ((accFeatureHandlers_invokeHandler(a3, 63, (uint64_t)v6) & 1) == 0) {
LABEL_8:
  }
    platform_configStream_deleteParams((const void **)v6);
}

uint64_t ___categoriesAvailableForEndpoint_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 28) == 11 && (uint64_t v4 = *(void *)(a2 + 56)) != 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(v4 + 16);
  }
  else
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 9;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      char v7 = &_os_log_default;
      id v6 = &_os_log_default;
    }
    else
    {
      char v7 = *(id *)(gLogObjects + 64);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(a2 + 28);
      uint64_t v9 = *(void *)(a1 + 40);
      v11[0] = 67109378;
      v11[1] = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Unexpected protocol %{coreacc:ACCEndpoint_Protocol_t}d for %@ !", (uint8_t *)v11, 0x12u);
    }
  }
  return 1;
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

uint64_t acc_manager_protectedConnectionCall(void *a1, int a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a4;
  uint64_t v9 = v8;
  if (v7)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAA00;
    uint64_t v13 = a3;
    id v14 = objc_retainBlock(v8);
    uint64_t v10 = acc_manager_callbackForConnection(v7, (void (*)(uint64_t, uint64_t))_handleConnectionCallback, (uint64_t)&v13, a2);
    id v11 = v14;
    id v14 = 0;
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_100008AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t _handleConnectionCallback(uint64_t a1, void *a2)
{
  if (a2 && (uint64_t v3 = a2[1]) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, a1, *a2);
  }
  else {
    return 0;
  }
}

uint64_t acc_manager_protectedEndpointCall(void *a1, int a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a4;
  uint64_t v9 = v8;
  if (v7)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAA00;
    uint64_t v13 = a3;
    id v14 = objc_retainBlock(v8);
    uint64_t v10 = acc_manager_callbackForEndpoint(v7, (void (*)(uint64_t, uint64_t))_handleEndpointCallback, (uint64_t)&v13, a2);
    id v11 = v14;
    id v14 = 0;
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_100008B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t _handleEndpointCallback(uint64_t a1, void *a2)
{
  if (a2 && (uint64_t v3 = a2[1]) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, a1, *a2);
  }
  else {
    return 0;
  }
}

void OUTLINED_FUNCTION_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

id _getUSBCameraKitHubPluginInstance()
{
  BOOL v0 = +[ACCPlatformPluginManager sharedManager];
  uint64_t v1 = [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformUSBCameraKitHubPluginProtocol fallbackToTransportPlugins:1];

  return v1;
}

void sub_10000CA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000CC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000CEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _getSleepAssertionPluginInstance()
{
  BOOL v0 = +[ACCPlatformPluginManager sharedManager];
  uint64_t v1 = [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformSleepAssertionPluginProtocol fallbackToTransportPlugins:0];

  if (!v1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v4 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    else
    {
      uint64_t v4 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _getSleepAssertionPluginInstance_cold_1();
    }
  }

  return v1;
}

id _getACPowerPluginInstance()
{
  BOOL v0 = +[ACCPlatformPluginManager sharedManager];
  uint64_t v1 = [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformIOKitPowerPluginProtocol fallbackToTransportPlugins:0];

  if (!v1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v4 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    else
    {
      uint64_t v4 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _getACPowerPluginInstance_cold_1();
    }
  }

  return v1;
}

uint64_t _shouldAllowSleepAssertions(int a1)
{
  if (a1 != 3) {
    return 1;
  }
  uint64_t v1 = 0;
  uint64_t v2 = MGGetProductType();
  if (v2 > 2619317133)
  {
    if (v2 == 2619317134) {
      return v1;
    }
    uint64_t v3 = 3241053352;
  }
  else
  {
    if (v2 == 555503454) {
      return v1;
    }
    uint64_t v3 = 2487868872;
  }
  if (v2 != v3) {
    return 1;
  }
  return v1;
}

uint64_t platform_sleepAssertion_connectionTypeAllowsAssertion(int a1)
{
  if ((platform_systemInfo_isATV() & 1) == 0
    && (a1 - 1) < 6
    && ((0x2Du >> (a1 - 1)) & 1) != 0)
  {
    unsigned int v2 = 1;
  }
  else
  {
    unsigned int v2 = platform_systemInfo_isWatch();
  }
  int shouldAllowSleepAssertions = _shouldAllowSleepAssertions(a1);
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 14;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    id v6 = *(id *)(gLogObjects + 104);
  }
  uint64_t v7 = v2 & shouldAllowSleepAssertions;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109376;
    v9[1] = a1;
    __int16 v10 = 1024;
    int v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[#SleepAssertions] connectionType: %{coreacc:ACCConnection_Type_t}d allows sleep assertion %d", (uint8_t *)v9, 0xEu);
  }

  return v7;
}

uint64_t platform_sleepAssertion_connectionTypeRequiresAssertion(int a1)
{
  unsigned int v2 = platform_systemInfo_isATV();
  if ((a1 - 5) < 0xFFFFFFFE || v2) {
    unsigned int v3 = platform_systemInfo_isWatch();
  }
  else {
    unsigned int v3 = 1;
  }
  int shouldAllowSleepAssertions = _shouldAllowSleepAssertions(a1);
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 14;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v7 = &_os_log_default;
    id v6 = &_os_log_default;
  }
  else
  {
    uint64_t v7 = *(id *)(gLogObjects + 104);
  }
  uint64_t v8 = v3 & shouldAllowSleepAssertions;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v10[0] = 67109376;
    v10[1] = a1;
    __int16 v11 = 1024;
    int v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[#SleepAssertions] connectionType: %{coreacc:ACCConnection_Type_t}d requires sleep assertion %d", (uint8_t *)v10, 0xEu);
  }

  return v8;
}

BOOL platform_sleepAssertion_endpointProtocolAllowsAssertion(int a1)
{
  return a1 != 2;
}

void platform_sleepAssertion_create(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    uint64_t v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#SleepAssertions] Creating sleep assertion for UUID %@...", (uint8_t *)&v6, 0xCu);
  }

  BOOL v5 = +[ACCPlatformSleepAssertionManager sharedManager];
  [v5 addSleepAssertionForUUID:a1];
}

void platform_sleepAssertion_destroy(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    uint64_t v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#SleepAssertions] Removing sleep assertion for UUID %@...", (uint8_t *)&v6, 0xCu);
  }

  BOOL v5 = +[ACCPlatformSleepAssertionManager sharedManager];
  [v5 removeSleepAssertionForUUID:a1];
}

void platform_sleepAssertion_createEA()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 7;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v1 = &_os_log_default;
  }
  else
  {
    BOOL v2 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[#SleepAssertions] Creating EA sleep assertion...", v4, 2u);
  }

  id v3 = _getSleepAssertionPluginInstance();
  [v3 createEASleepAssertion];
}

void platform_sleepAssertion_destroyEA()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 7;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v1 = &_os_log_default;
  }
  else
  {
    BOOL v2 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[#SleepAssertions] Removing EA sleep assertion...", v4, 2u);
  }

  id v3 = _getSleepAssertionPluginInstance();
  [v3 removeEASleepAssertion];
}

void platform_sleepAssertion_createForApplePencil()
{
  _getSleepAssertionPluginInstance();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  [v0 createApplePencilSleepAssertion];
}

void platform_sleepAssertion_destroyForApplePencil()
{
  _getSleepAssertionPluginInstance();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  [v0 removeApplePencilSleepAssertion];
}

void platform_sleepAssertion_createForMFi4()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 7;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v1 = &_os_log_default;
  }
  else
  {
    BOOL v2 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[#SleepAssertions] acc_platform_sleep_assertions: platform_sleepAssertion_createForMFi4: MFi4 sleep assertion taken", v4, 2u);
  }

  id v3 = _getSleepAssertionPluginInstance();
  [v3 createMFi4SleepAssertion];
}

void OUTLINED_FUNCTION_2_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t acc_properties_setProperty(__CFDictionary *a1, const void *a2, CFNullRef a3)
{
  if (a1) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = !v3;
  if (!v3)
  {
    if (!a3) {
      a3 = kCFNull;
    }
    CFDictionarySetValue(a1, a2, a3);
  }
  return v4;
}

BOOL acc_properties_setProperties(void *context, CFDictionaryRef theDict)
{
  if (context && theDict) {
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)CFDictionaryApplierFunction_setValueInMutableDictionary, context);
  }
  return context != 0;
}

BOOL acc_properties_removeProperty(CFMutableDictionaryRef theDict, const void *a2)
{
  if (theDict) {
    CFDictionaryRemoveValue(theDict, a2);
  }
  return theDict != 0;
}

BOOL acc_properties_containsProperty(CFDictionaryRef theDict, const void *a2)
{
  BOOL result = 0;
  if (theDict)
  {
    if (a2) {
      return CFDictionaryContainsKey(theDict, a2) != 0;
    }
  }
  return result;
}

const void *acc_properties_copyProperty(const __CFDictionary *a1, const void *a2)
{
  BOOL v2 = 0;
  if (a1)
  {
    if (a2)
    {
      Value = CFDictionaryGetValue(a1, a2);
      BOOL v2 = Value;
      if (Value) {
        CFRetain(Value);
      }
    }
  }
  return v2;
}

CFDictionaryRef acc_properties_copyProperties(const __CFDictionary *theDict)
{
  if (theDict) {
    return CFDictionaryCreateCopy(kCFAllocatorDefault, theDict);
  }
  return theDict;
}

uint64_t acc_nvmInfo_init(_DWORD *a1)
{
  *a1 = 0;
  return 1;
}

uint64_t acc_nvmInfo_setPairingStatus(_DWORD *a1, int a2)
{
  *a1 = a2;
  return 1;
}

uint64_t acc_nvmInfo_getPairingStatus(unsigned int *a1)
{
  uint64_t v2 = gLogObjects;
  int v3 = gNumLogObjects;
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 9;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    BOOL v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      acc_nvmInfo_getPairingStatus_cold_1(v2, v3);
    }
  }
  else
  {
    BOOL v5 = *(NSObject **)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *a1;
    v8[0] = 67109120;
    v8[1] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "acc_nvmInfo_getPairingStatus: %d", (uint8_t *)v8, 8u);
  }
  return *a1;
}

unsigned char *_createFeature(unsigned char *result)
{
  if (result)
  {
    BOOL result = malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
    if (result) {
      *BOOL result = 1;
    }
  }
  return result;
}

uint64_t _destroyFeature(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      free(v2);
      *a1 = 0;
    }
  }
  return 0;
}

BOOL _parseIdentificationParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  if (a1)
  {
    uint64_t v4 = a1;
    int ParamID = iAP2MsgGetParamID((uint64_t)a3);
    if (gLogObjects && gNumLogObjects >= 52)
    {
      int v6 = *(NSObject **)(gLogObjects + 408);
    }
    else
    {
      int v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v77) = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "parsing identification paramID 0x%X", buf, 8u);
    }
    if (ParamID != 38) {
      return 0;
    }
    int v75 = -1;
    if (a2)
    {
      if (a3)
      {
        if (iAP2MsgGetParamID((uint64_t)a3) == 38)
        {
          unsigned int v70 = (pthread_mutex_t **)v4;
          uint64_t v7 = a2;
          unsigned int MsgID = iAP2MsgGetMsgID(a2);
          __int16 v67 = iAP2MsgGetParamID((uint64_t)a3);
          CFSetRef theSet = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
          unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
          if (FirstParam)
          {
            NextParam = (unsigned __int16 *)FirstParam;
            CFBooleanRef value = 0;
            CFBooleanRef v73 = 0;
            CFBooleanRef v10 = 0;
            CFStringRef v11 = 0;
            CFStringRef v12 = 0;
            CFStringRef v13 = 0;
            CFStringRef v14 = 0;
            CFStringRef v15 = 0;
            while (1)
            {
              switch(iAP2MsgGetParamID((uint64_t)NextParam))
              {
                case 0u:
                  DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)&v75);
                  if (v75)
                  {
                    v52 = logObjectForModule_0();
                    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_11();
                    }
                    goto LABEL_193;
                  }
                  if (!v15)
                  {
                    CFStringRef v15 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
                    break;
                  }
                  CFSetRef v33 = theSet;
                  if (gLogObjects && gNumLogObjects >= 52)
                  {
                    v39 = *(NSObject **)(gLogObjects + 408);
                    BOOL v40 = v70;
                  }
                  else
                  {
                    v39 = &_os_log_default;
                    BOOL v40 = v70;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }
                  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
                    _parseIdentificationParams_cold_9(v67, MsgID, v39);
                  }
                  unsigned int v37 = 5;
                  uint64_t v4 = (uint64_t)v40;
                  goto LABEL_157;
                case 1u:
                  __int16 v17 = iAP2MsgGetDataAsString(NextParam, (BOOL *)&v75);
                  if (v75)
                  {
                    v53 = logObjectForModule_0();
                    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_14();
                    }
                    goto LABEL_193;
                  }
                  if (v14)
                  {
                    if (gLogObjects && gNumLogObjects >= 52)
                    {
                      BOOL v41 = *(NSObject **)(gLogObjects + 408);
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                    }
                    else
                    {
                      BOOL v41 = &_os_log_default;
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }
                    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_12();
                    }
                    goto LABEL_155;
                  }
                  CFStringRef v14 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v17, 0x8000100u);
                  break;
                case 2u:
                  uint64_t v18 = iAP2MsgGetDataAsString(NextParam, (BOOL *)&v75);
                  if (v75)
                  {
                    v54 = logObjectForModule_0();
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_17();
                    }
                    goto LABEL_193;
                  }
                  if (v13)
                  {
                    if (gLogObjects && gNumLogObjects >= 52)
                    {
                      v43 = *(NSObject **)(gLogObjects + 408);
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                    }
                    else
                    {
                      v43 = &_os_log_default;
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }
                    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_15();
                    }
                    goto LABEL_155;
                  }
                  CFStringRef v13 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v18, 0x8000100u);
                  break;
                case 3u:
                  __int16 v19 = iAP2MsgGetDataAsString(NextParam, (BOOL *)&v75);
                  if (v75)
                  {
                    v55 = logObjectForModule_0();
                    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_20();
                    }
                    goto LABEL_193;
                  }
                  if (v12)
                  {
                    if (gLogObjects && gNumLogObjects >= 52)
                    {
                      uint64_t v44 = *(NSObject **)(gLogObjects + 408);
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                    }
                    else
                    {
                      uint64_t v44 = &_os_log_default;
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }
                    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_18();
                    }
                    goto LABEL_155;
                  }
                  CFStringRef v12 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v19, 0x8000100u);
                  break;
                case 4u:
                  *(_DWORD *)buf = -1431655766;
                  *(_DWORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v75);
                  if (v75)
                  {
                    long long v56 = logObjectForModule_0();
                    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_23();
                    }
                    goto LABEL_193;
                  }
                  CFStringRef v69 = v15;
                  CFStringRef v20 = v14;
                  CFStringRef v21 = v13;
                  CFStringRef v22 = v12;
                  CFStringRef v23 = v11;
                  CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, buf);
                  if (CFSetContainsValue(theSet, v24))
                  {
                    CFStringRef v66 = v23;
                    if (gLogObjects && gNumLogObjects >= 52)
                    {
                      int v45 = *(NSObject **)(gLogObjects + 408);
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                    }
                    else
                    {
                      int v45 = &_os_log_default;
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }
                    CFStringRef v12 = v22;
                    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_21();
                    }
                    CFStringRef v13 = v21;
                    if (v24) {
                      CFRetain(v24);
                    }
                    unsigned int v37 = 5;
                    CFStringRef v14 = v20;
                    CFStringRef v15 = v69;
                    CFStringRef v11 = v66;
                    goto LABEL_156;
                  }
                  CFSetSetValue(theSet, v24);
                  if (v24) {
                    CFRetain(v24);
                  }
                  CFStringRef v11 = v23;
                  CFStringRef v12 = v22;
                  CFStringRef v13 = v21;
                  CFStringRef v14 = v20;
                  CFStringRef v15 = v69;
                  uint64_t v7 = a2;
                  break;
                case 5u:
                  __int16 v25 = iAP2MsgGetDataAsString(NextParam, (BOOL *)&v75);
                  if (v75)
                  {
                    long long v57 = logObjectForModule_0();
                    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_26();
                    }
                    goto LABEL_193;
                  }
                  if (v11)
                  {
                    if (gLogObjects && gNumLogObjects >= 52)
                    {
                      v46 = *(NSObject **)(gLogObjects + 408);
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                    }
                    else
                    {
                      v46 = &_os_log_default;
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_24();
                    }
                    goto LABEL_155;
                  }
                  CFStringRef v11 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v25, 0x8000100u);
                  break;
                case 6u:
                  BOOL DataAsBool = iAP2MsgGetDataAsBool(NextParam, (BOOL *)&v75);
                  if (v75)
                  {
                    long long v58 = logObjectForModule_0();
                    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_29();
                    }
                    goto LABEL_193;
                  }
                  if (v10)
                  {
                    if (gLogObjects && gNumLogObjects >= 52)
                    {
                      v47 = *(NSObject **)(gLogObjects + 408);
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                    }
                    else
                    {
                      v47 = &_os_log_default;
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }
                    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_27();
                    }
                    goto LABEL_155;
                  }
                  if (DataAsBool) {
                    CFBooleanRef v10 = kCFBooleanTrue;
                  }
                  else {
                    CFBooleanRef v10 = kCFBooleanFalse;
                  }
                  break;
                case 7u:
                  BOOL v27 = iAP2MsgGetDataAsBool(NextParam, (BOOL *)&v75);
                  if (v75)
                  {
                    long long v59 = logObjectForModule_0();
                    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_32();
                    }
                    goto LABEL_193;
                  }
                  if (value)
                  {
                    if (gLogObjects && gNumLogObjects >= 52)
                    {
                      v48 = *(NSObject **)(gLogObjects + 408);
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                    }
                    else
                    {
                      v48 = &_os_log_default;
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }
                    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_30();
                    }
                    goto LABEL_155;
                  }
                  CFBooleanRef v28 = kCFBooleanTrue;
                  if (!v27) {
                    CFBooleanRef v28 = kCFBooleanFalse;
                  }
                  CFBooleanRef value = v28;
                  break;
                case 8u:
                  BOOL v29 = iAP2MsgGetDataAsBool(NextParam, (BOOL *)&v75);
                  if (v75)
                  {
                    v60 = logObjectForModule_0();
                    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_35();
                    }
LABEL_193:
                    unsigned int v37 = 10;
                    uint64_t v4 = (uint64_t)v70;
                    CFSetRef v33 = theSet;
                    if (v15) {
                      goto LABEL_157;
                    }
                    goto LABEL_158;
                  }
                  if (v73)
                  {
                    if (gLogObjects && gNumLogObjects >= 52)
                    {
                      v49 = *(NSObject **)(gLogObjects + 408);
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                    }
                    else
                    {
                      v49 = &_os_log_default;
                      int v42 = v70;
                      CFSetRef v33 = theSet;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }
                    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
                      _parseIdentificationParams_cold_33();
                    }
LABEL_155:
                    unsigned int v37 = 5;
LABEL_156:
                    uint64_t v4 = (uint64_t)v42;
                    if (v15) {
                      goto LABEL_157;
                    }
                    goto LABEL_158;
                  }
                  CFBooleanRef v30 = kCFBooleanTrue;
                  if (!v29) {
                    CFBooleanRef v30 = kCFBooleanFalse;
                  }
                  CFBooleanRef v73 = v30;
                  break;
                default:
                  break;
              }
              NextParam = iAP2MsgGetNextParam(v7, a3, NextParam);
              if (!NextParam) {
                goto LABEL_54;
              }
            }
          }
          CFStringRef v15 = 0;
          CFStringRef v14 = 0;
          CFStringRef v13 = 0;
          CFStringRef v12 = 0;
          CFStringRef v11 = 0;
          CFBooleanRef v10 = 0;
          CFBooleanRef value = 0;
          CFBooleanRef v73 = 0;
LABEL_54:
          CFBooleanRef v31 = v10;
          if (gLogObjects && gNumLogObjects >= 52)
          {
            BOOL v32 = *(NSObject **)(gLogObjects + 408);
            CFSetRef v33 = theSet;
          }
          else
          {
            BOOL v32 = &_os_log_default;
            CFSetRef v33 = theSet;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138414338;
            CFStringRef v77 = v15;
            __int16 v78 = 2112;
            CFStringRef v79 = v14;
            __int16 v80 = 2112;
            CFStringRef v81 = v13;
            __int16 v82 = 2112;
            CFStringRef v83 = v12;
            __int16 v84 = 2112;
            CFSetRef v85 = v33;
            __int16 v86 = 2112;
            CFStringRef v87 = v11;
            __int16 v88 = 2112;
            CFBooleanRef v89 = v10;
            __int16 v90 = 2112;
            CFBooleanRef v91 = value;
            __int16 v92 = 2112;
            CFBooleanRef v93 = v73;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "VehicleDigitalCarKeyInfo group: identifier: %@, manufacturer: %@, brand: %@, ppid: %@, supportedTechnologies: %@, provisioningTemplate: %@, pairingAvailable: %@, onlineActivated: %@, ownershipPresent: %@", buf, 0x5Cu);
          }
          CFIndex Count = CFSetGetCount(v33);
          if (v15 && v14 && v13 && v12 && Count >= 1 && v11 && v10)
          {
            uint64_t v4 = (uint64_t)v70;
            if (iap2_feature_getFeature((uint64_t)v70, 0x1Bu)
              || (iap2_features_createFeature((uint64_t)v70, 0x1Bu), iap2_feature_getFeature((uint64_t)v70, 0x1Bu)))
            {
              BOOL v35 = *v70;
              if (*v70)
              {
                Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                CFDictionarySetValue(Mutable, kCFACCProperties_Endpoint_DigitalCarKey_VehicleIdentifier, v15);
                CFDictionarySetValue(Mutable, kCFACCProperties_Endpoint_DigitalCarKey_CCCManufacturer, v14);
                CFDictionarySetValue(Mutable, kCFACCProperties_Endpoint_DigitalCarKey_CCCBrand, v13);
                CFDictionarySetValue(Mutable, kCFACCProperties_Endpoint_DigitalCarKey_ProductPlanUID, v12);
                if (v33) {
                  CFDictionarySetValue(Mutable, kCFACCProperties_Endpoint_DigitalCarKey_SupportedRadioTechnologies, v33);
                }
                CFDictionarySetValue(Mutable, kCFACCProperties_Endpoint_DigitalCarKey_ProvisioningTemplate, v11);
                CFDictionarySetValue(Mutable, kCFACCProperties_Endpoint_DigitalCarKey_OwnerKeyPairingAvailable, v31);
                if (value) {
                  CFDictionarySetValue(Mutable, kCFACCProperties_Endpoint_DigitalCarKey_OnlineServicesActivated, value);
                }
                if (v73) {
                  CFDictionarySetValue(Mutable, kCFACCProperties_Endpoint_DigitalCarKey_ProofOfOwnershipPresent, v73);
                }
                acc_endpoint_setProperty(v35, kCFACCProperties_Endpoint_DigitalCarKey_Group, Mutable);
                CFRelease(Mutable);
                unsigned int v37 = 0;
              }
              else
              {
                __int16 v65 = logObjectForModule_0();
                if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
                  _parseIdentificationParams_cold_5();
                }
                unsigned int v37 = 10;
              }
              uint64_t v4 = (uint64_t)v70;
            }
            else
            {
              int v64 = logObjectForModule_0();
              if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
                _parseIdentificationParams_cold_4();
              }
              unsigned int v37 = 10;
            }
            goto LABEL_157;
          }
          if (gLogObjects && gNumLogObjects >= 52)
          {
            BOOL v38 = *(NSObject **)(gLogObjects + 408);
          }
          else
          {
            BOOL v38 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            _parseIdentificationParams_cold_6(v67, MsgID, v38);
          }
          unsigned int v37 = 2;
          uint64_t v4 = (uint64_t)v70;
          if (v15) {
LABEL_157:
          }
            CFRelease(v15);
LABEL_158:
          if (v14) {
            CFRelease(v14);
          }
          if (v13) {
            CFRelease(v13);
          }
          if (v12) {
            CFRelease(v12);
          }
          if (v33) {
            CFRelease(v33);
          }
          if (v11) {
            CFRelease(v11);
          }
          if (!v37) {
            return 1;
          }
          goto LABEL_169;
        }
        __int16 v63 = logObjectForModule_0();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
          _parseIdentificationParams_cold_36();
        }
      }
      else
      {
        int v62 = logObjectForModule_0();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
          _parseIdentificationParams_cold_3();
        }
      }
    }
    else
    {
      v61 = logObjectForModule_0();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParams_cold_2();
      }
    }
    unsigned int v37 = 10;
LABEL_169:
    iap2_identification_addRejectParam(v4, 38, v37);
    return 0;
  }
  v51 = logObjectForModule_0();
  BOOL result = os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _parseIdentificationParams_cold_1();
    return 0;
  }
  return result;
}

void *logObjectForModule_0()
{
  if (gLogObjects && gNumLogObjects >= 52) {
    return *(void **)(gLogObjects + 408);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x14u);
}

void OUTLINED_FUNCTION_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t iap2_accAuthentication_certificate(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0);
  if (!result) {
    return result;
  }
  BOOL v5 = (_DWORD *)result;
  if (*(_DWORD *)result)
  {
    v39 = logObjectForModule_1(24);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    if (*v5 == 2) {
      __int16 v88 = "passed";
    }
    else {
      __int16 v88 = "failed";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)v98 = v88;
    int v42 = "Authentication already %s, ignoring message!";
    goto LABEL_81;
  }
  int v96 = 0;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (!FirstParam)
  {
    if (!acc_userDefaults_BOOLForKey(@"ForceAuthTimeout"))
    {
LABEL_74:
      if (gLogObjects && gNumLogObjects >= 25)
      {
        BOOL v40 = *(NSObject **)(gLogObjects + 192);
      }
      else
      {
        BOOL v40 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        iap2_accAuthentication_certificate_cold_2(v40, v43, v44, v45, v46, v47, v48, v49);
      }
      BytePtr = 0;
      CFIndex Length = 0;
      BOOL v52 = 0;
      goto LABEL_173;
    }
    goto LABEL_71;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  CFBooleanRef v89 = v5;
  uint64_t v90 = a1;
  unsigned int v92 = 0;
  CFDataRef cf = 0;
  CFDataRef v93 = 0;
  do
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    if (ParamID == 2)
    {
      ParamValueData = (const UInt8 *)iAP2MsgGetParamValueData((uint64_t)NextParam);
      unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
      unsigned int v15 = ParamValueLen;
      if (ParamValueData && ParamValueLen && !v96)
      {
        CFDataRef cf = CFDataCreate(kCFAllocatorDefault, ParamValueData, ParamValueLen);
        goto LABEL_63;
      }
      uint64_t v29 = gLogObjects;
      int v30 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 25)
      {
        CFBooleanRef v31 = *(NSObject **)(gLogObjects + 192);
      }
      else
      {
        CFBooleanRef v31 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)v98 = v29;
          *(_WORD *)&v98[8] = 1024;
          *(_DWORD *)v99 = v30;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          CFBooleanRef v31 = &_os_log_default;
        }
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218496;
        *(void *)v98 = (unsigned __int16)ParamValueData;
        *(_WORD *)&v98[8] = 1024;
        *(_DWORD *)v99 = v15;
        *(_WORD *)&v99[4] = 1024;
        *(_DWORD *)&v99[6] = v96;
        v34 = v31;
        BOOL v35 = "Cert param malformed pAccIntermediateCertData:%04lX, accIntermediateCertLen:%04X, paramError:%02X\n";
LABEL_56:
        uint32_t v36 = 24;
LABEL_62:
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v35, buf, v36);
      }
    }
    else
    {
      int v9 = ParamID;
      if (ParamID == 1)
      {
        unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v96);
        unsigned int v17 = DataAsU8;
        uint64_t v18 = gLogObjects;
        int v19 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v20 = gNumLogObjects <= 24;
        }
        else {
          BOOL v20 = 1;
        }
        int v21 = !v20;
        if (DataAsU8 > 1 || v96)
        {
          if (v21)
          {
            BOOL v32 = *(NSObject **)(gLogObjects + 192);
          }
          else
          {
            BOOL v32 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)v98 = v18;
              *(_WORD *)&v98[8] = 1024;
              *(_DWORD *)v99 = v19;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              BOOL v32 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v98 = v17;
            *(_WORD *)&v98[4] = 1024;
            *(_DWORD *)&v98[6] = v96;
            v34 = v32;
            BOOL v35 = "Got invalid auth type %d, paramError:%02X";
            goto LABEL_61;
          }
        }
        else
        {
          if (v21)
          {
            CFStringRef v22 = *(NSObject **)(gLogObjects + 192);
          }
          else
          {
            CFStringRef v22 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)v98 = v18;
              *(_WORD *)&v98[8] = 1024;
              *(_DWORD *)v99 = v19;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              CFStringRef v22 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v98 = v17;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Got valid auth type %d", buf, 8u);
          }
          unsigned int v92 = v17;
        }
      }
      else if (ParamID)
      {
        uint64_t v23 = gLogObjects;
        int v24 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 25)
        {
          __int16 v25 = *(NSObject **)(gLogObjects + 192);
        }
        else
        {
          __int16 v25 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)v98 = v23;
            *(_WORD *)&v98[8] = 1024;
            *(_DWORD *)v99 = v24;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            __int16 v25 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v98 = v9;
          *(_WORD *)&v98[4] = 1024;
          *(_DWORD *)&v98[6] = MsgID;
          v34 = v25;
          BOOL v35 = "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param";
LABEL_61:
          uint32_t v36 = 14;
          goto LABEL_62;
        }
      }
      else
      {
        CFBooleanRef v10 = (const UInt8 *)iAP2MsgGetParamValueData((uint64_t)NextParam);
        unsigned int v11 = iAP2MsgGetParamValueLen(NextParam);
        unsigned int v12 = v11;
        if (v10 && v11 && !v96)
        {
          CFDataRef v93 = CFDataCreate(0, v10, v11);
          goto LABEL_63;
        }
        uint64_t v26 = gLogObjects;
        int v27 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 25)
        {
          CFBooleanRef v28 = *(NSObject **)(gLogObjects + 192);
        }
        else
        {
          CFBooleanRef v28 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)v98 = v26;
            *(_WORD *)&v98[8] = 1024;
            *(_DWORD *)v99 = v27;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            CFBooleanRef v28 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218496;
          *(void *)v98 = (unsigned __int16)v10;
          *(_WORD *)&v98[8] = 1024;
          *(_DWORD *)v99 = v12;
          *(_WORD *)&v99[4] = 1024;
          *(_DWORD *)&v99[6] = v96;
          v34 = v28;
          BOOL v35 = "Cert param malformed pAccCertData:%04lX, accCertLen:%04X, paramError:%02X\n";
          goto LABEL_56;
        }
      }
    }
LABEL_63:
    NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
  }
  while (NextParam);
  CFDataRef v37 = v93;
  if (acc_userDefaults_BOOLForKey(@"ForceAuthTimeout"))
  {
LABEL_71:
    if (gLogObjects && gNumLogObjects >= 25)
    {
      v39 = *(NSObject **)(gLogObjects + 192);
    }
    else
    {
      v39 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    uint64_t v41 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 138412290;
    *(void *)v98 = v41;
    int v42 = "ForceAuthTimeout: %@ ignore incoming auth messages, allow timeout to occur, if any";
LABEL_81:
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v42, buf, 0xCu);
    return 1;
  }
  if (!v93) {
    goto LABEL_74;
  }
  if (v92)
  {
    if (gLogObjects && gNumLogObjects >= 25)
    {
      BOOL v38 = *(NSObject **)(gLogObjects + 192);
    }
    else
    {
      BOOL v38 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Have BAA certificate ... try to verify the chain", buf, 2u);
    }
    if (cf)
    {
      BOOL v53 = platform_auth_verifyBAACertificateChain(v93, cf);
      if (gLogObjects && gNumLogObjects >= 25)
      {
        v54 = *(NSObject **)(gLogObjects + 192);
      }
      else
      {
        v54 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v98 = v53;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "After verifying BAA cert chain, bCertValid = %d", buf, 8u);
        if (!v53) {
          goto LABEL_102;
        }
LABEL_104:
        if (gLogObjects && gNumLogObjects >= 25)
        {
          v55 = *(NSObject **)(gLogObjects + 192);
        }
        else
        {
          v55 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v98 = 1;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Not checking serial number revocation list for authType %d", buf, 8u);
        }
LABEL_112:
        CertificateSerialNumber = (const void *)platform_auth_createCertificateSerialNumber(v93);
        CFStringRef SerialNumberStringFromData = (const __CFString *)platform_auth_createSerialNumberStringFromData();
        long long v58 = v89;
        CFStringRef v59 = (const __CFString *)*((void *)v89 + 6);
        if (v59)
        {
          if (SerialNumberStringFromData)
          {
            CFComparisonResult v60 = CFStringCompare(v59, SerialNumberStringFromData, 1uLL);
            if (v60)
            {
              CFComparisonResult v61 = v60;
              if (gLogObjects && gNumLogObjects >= 25)
              {
                int v62 = *(NSObject **)(gLogObjects + 192);
              }
              else
              {
                int v62 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              {
                CStringPtr = CFStringGetCStringPtr(*((CFStringRef *)v89 + 6), 0x8000100u);
                __int16 v65 = CFStringGetCStringPtr(SerialNumberStringFromData, 0x8000100u);
                *(_DWORD *)buf = 136315906;
                *(void *)v98 = "iap2_accAuthentication_certificate";
                *(_WORD *)&v98[8] = 2080;
                *(void *)v99 = CStringPtr;
                *(_WORD *)&v99[8] = 2080;
                v100 = v65;
                __int16 v101 = 2048;
                CFComparisonResult v102 = v61;
                _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "%s Auth cert serial number data string mismatch: AuthSerNum:[%s] != CertSerNum:[%s], serNumCompareStatus:%02lX", buf, 0x2Au);
              }
              if (gLogObjects && gNumLogObjects >= 25)
              {
                CFStringRef v66 = *(NSObject **)(gLogObjects + 192);
              }
              else
              {
                CFStringRef v66 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Continuing with iAP2 authentication of the accessory after mismatch serial number, because accessory may authenticate differently over iAP2", buf, 2u);
              }
              long long v58 = v89;
              if (*(void *)a1)
              {
                if (**(void **)a1)
                {
                  uint64_t Feature = iap2_feature_getFeature(a1, 0);
                  if (Feature)
                  {
                    uint64_t v68 = Feature;
                    if (gLogObjects && gNumLogObjects >= 25)
                    {
                      CFStringRef v69 = *(NSObject **)(gLogObjects + 192);
                    }
                    else
                    {
                      CFStringRef v69 = &_os_log_default;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }
                    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v70 = *(void *)(v90 + 8);
                      *(_DWORD *)buf = 138412290;
                      *(void *)v98 = v70;
                      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "Clearing auth state for iAP2 Endpoint %@", buf, 0xCu);
                    }
                    *(_DWORD *)uint64_t v68 = 0;
                    __int16 v71 = *(const void **)(v68 + 16);
                    long long v58 = v89;
                    if (v71)
                    {
                      CFRelease(v71);
                      *(void *)(v68 + 16) = 0;
                    }
                    unsigned int v72 = *(const void **)(v68 + 24);
                    if (v72)
                    {
                      CFRelease(v72);
                      *(void *)(v68 + 24) = 0;
                    }
                    CFBooleanRef v73 = *(const void **)(v68 + 48);
                    if (v73)
                    {
                      CFRelease(v73);
                      *(void *)(v68 + 48) = 0;
                    }
                    int v74 = *(const void **)(v68 + 56);
                    if (v74)
                    {
                      CFRelease(v74);
                      *(void *)(v68 + 56) = 0;
                    }
                    int v75 = *(const void **)(v68 + 40);
                    if (v75)
                    {
                      CFRelease(v75);
                      *(void *)(v68 + 40) = 0;
                    }
                    platform_auth_deallocAuthCertCaps();
                    *(void *)(v68 + 64) = 0;
                  }
                }
              }
            }
            goto LABEL_153;
          }
          if (gLogObjects && gNumLogObjects >= 25)
          {
            __int16 v63 = *(NSObject **)(gLogObjects + 192);
          }
          else
          {
            __int16 v63 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
            iap2_accAuthentication_certificate_cold_4(v63, v80, v81, v82, v83, v84, v85, v86);
          }
          BOOL v53 = 0;
          BytePtr = 0;
          CFIndex Length = 0;
        }
        else
        {
LABEL_153:
          uint64_t RandomNonce = platform_auth_createRandomNonce();
          if (RandomNonce)
          {
            CFDataRef v77 = (const __CFData *)RandomNonce;
            *((void *)v58 + 2) = CFRetain(v93);
            __int16 v78 = (const void *)*((void *)v58 + 3);
            a1 = v90;
            if (v78)
            {
              CFRelease(v78);
              *((void *)v58 + 3) = 0;
            }
            *((void *)v58 + 3) = CFRetain(CertificateSerialNumber);
            CFStringRef v79 = (const void *)*((void *)v58 + 6);
            if (v79)
            {
              CFRelease(v79);
              *((void *)v58 + 6) = 0;
            }
            *((void *)v58 + 6) = CFRetain(SerialNumberStringFromData);
            *((void *)v58 + 7) = v77;
            v58[8] = v92;
            if (cf)
            {
              *((void *)v58 + 5) = CFRetain(cf);
              CFRelease(cf);
            }
            BytePtr = CFDataGetBytePtr(v77);
            CFIndex Length = CFDataGetLength(v77);
            BOOL v53 = 1;
          }
          else
          {
            BytePtr = 0;
            CFIndex Length = 0;
            BOOL v53 = 1;
            a1 = v90;
          }
        }
        if (CertificateSerialNumber) {
          CFRelease(CertificateSerialNumber);
        }
        if (SerialNumberStringFromData) {
          CFRelease(SerialNumberStringFromData);
        }
        CFDataRef v37 = v93;
      }
      else
      {
        if (v53) {
          goto LABEL_104;
        }
        BytePtr = 0;
        CFIndex Length = 0;
      }
    }
    else
    {
LABEL_102:
      BytePtr = 0;
      CFIndex Length = 0;
      BOOL v53 = 0;
    }
  }
  else
  {
    if ((platform_auth_verifyPublicCertificate() & 1) == 0) {
      goto LABEL_102;
    }
    if (platform_auth_verifyCertificateSerialNumber()) {
      goto LABEL_112;
    }
    BytePtr = 0;
    CFIndex Length = 0;
    BOOL v53 = 0;
  }
  CFRelease(v37);
  BOOL v52 = v53;
LABEL_173:
  CFStringRef v87 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = __iap2_accAuthentication_certificate_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  BOOL v95 = v52;
  block[4] = a1;
  block[5] = BytePtr;
  block[6] = Length;
  dispatch_async(v87, block);
  return 1;
}

void *logObjectForModule_1(int a1)
{
  if (gLogObjects) {
    BOOL v1 = gNumLogObjects <= a1;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1) {
    return *(void **)(gLogObjects + 8 * a1);
  }
  uint64_t v2 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v2;
}

void __iap2_accAuthentication_certificate_block_invoke(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 0x40000000;
  v1[2] = __iap2_accAuthentication_certificate_block_invoke_2;
  v1[3] = &__block_descriptor_tmp;
  char v4 = *(unsigned char *)(a1 + 56);
  long long v2 = *(_OWORD *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 48);
  iap2_sessionControl_authorizationHook_authentication((unsigned int *)v2, (uint64_t)v1);
}

void __iap2_accAuthentication_certificate_block_invoke_2(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 56);
    if (*(unsigned char *)(a1 + 56) && *(void *)(a1 + 40) && *(void *)(a1 + 48))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = v4 + 120;
      iAP2MsgInit(v4 + 120, 43522, *(void *)(v4 + 192), 0xFFFF, 0, 0);
      iAP2MsgAddDataParam(v5, 0, 0, *(const void **)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
      int v6 = *(uint64_t **)(a1 + 32);
      iap2_sessionControl_sendOutgoingMessage(v6, v5);
    }
    else
    {
      if (gLogObjects) {
        BOOL v7 = gNumLogObjects < 25;
      }
      else {
        BOOL v7 = 1;
      }
      if (v7)
      {
        uint64_t v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        uint64_t v8 = *(NSObject **)(gLogObjects + 192);
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        __iap2_accAuthentication_certificate_block_invoke_2_cold_1(v3, a1, v8);
      }
      _authCompleted(*(uint64_t **)(a1 + 32), 0);
    }
  }
}

void _authCompleted(uint64_t *a1, int a2)
{
  if (a1)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 25;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 192);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "bAuthPassed=%d", (uint8_t *)v10, 8u);
    }
    iAP2MsgInit((uint64_t)(a1 + 15), 43524, a1[24], 0xFFFF, 0, 0);
    if (a2)
    {
      uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0);
      *(CFAbsoluteTime *)(Feature + 88) = CFAbsoluteTimeGetCurrent();
      iAP2MsgSetMsgID((uint64_t)(a1 + 15), 43525);
      if (iap2_identification_isIdentificationAccepted((uint64_t)a1))
      {
        if (iap2_identification_isIdentifiedForCarPlay((uint64_t)a1)) {
          iAP2_carPlaySendAllConnectionEvents((uint64_t)a1);
        }
      }
      iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
      _setAuthState((uint64_t **)a1, 2);
    }
    else
    {
      iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
      _setAuthState((uint64_t **)a1, 1);
      AccessoryNotSupportedCF = (void *)acc_userNotifications_createAccessoryNotSupportedCF();
      CFStringRef Identifier = acc_userNotifications_createIdentifier(@"auth-failed", a1[1]);
      ACCUNSetIdentifier(AccessoryNotSupportedCF, (uint64_t)Identifier);
      if (Identifier) {
        CFRelease(Identifier);
      }
      if (*a1)
      {
        if (*(void *)*a1)
        {
          uint64_t v9 = a1[2];
          if (v9) {
            ACCUNSetGroupIdentifier(AccessoryNotSupportedCF, v9);
          }
        }
      }
      ACCUNManagerPresentNotification(AccessoryNotSupportedCF, 0);
      if (AccessoryNotSupportedCF) {
        CFRelease(AccessoryNotSupportedCF);
      }
    }
  }
}

uint64_t iap2_accAuthentication_challengeResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature((uint64_t)a1, 0);
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  if (*(_DWORD *)result)
  {
    CFBooleanRef v31 = logObjectForModule_1(24);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    if (*(_DWORD *)v5 == 2) {
      BOOL v32 = "passed";
    }
    else {
      BOOL v32 = "failed";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)BOOL v35 = v32;
    uint64_t v29 = "Authentication already %s, ignoring message!";
    int v30 = v31;
    goto LABEL_48;
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (!FirstParam)
  {
    if (!acc_userDefaults_BOOLForKey(@"ForceAuthTimeout")) {
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  BOOL v7 = (unsigned __int16 *)FirstParam;
  CFSetRef v33 = a1;
  do
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)v7);
    if (ParamID)
    {
      int v9 = ParamID;
      uint64_t v10 = gLogObjects;
      int v11 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v12 = gNumLogObjects < 25;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12)
      {
        unsigned int v17 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)BOOL v35 = v10;
          *(_WORD *)&v35[8] = 1024;
          int v36 = v11;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      else
      {
        unsigned int v17 = *(NSObject **)(gLogObjects + 192);
      }
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_28;
      }
      int MsgID = iAP2MsgGetMsgID(a2);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)BOOL v35 = v9;
      *(_WORD *)&v35[4] = 1024;
      *(_DWORD *)&v35[6] = MsgID;
      int v19 = v17;
      BOOL v20 = "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param";
      uint32_t v21 = 14;
LABEL_27:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
LABEL_28:
      CFDataRef v16 = 0;
      goto LABEL_29;
    }
    ParamValueData = (const UInt8 *)iAP2MsgGetParamValueData((uint64_t)v7);
    unsigned int ParamValueLen = iAP2MsgGetParamValueLen(v7);
    int v15 = ParamValueLen;
    if (!ParamValueData || !ParamValueLen)
    {
      uint64_t v22 = gLogObjects;
      int v23 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 25)
      {
        int v24 = *(NSObject **)(gLogObjects + 192);
      }
      else
      {
        int v24 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)BOOL v35 = v22;
          *(_WORD *)&v35[8] = 1024;
          int v36 = v23;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        CFDataRef v16 = 0;
        goto LABEL_29;
      }
      *(_DWORD *)buf = 134218496;
      *(void *)BOOL v35 = (unsigned __int16)ParamValueData;
      *(_WORD *)&v35[8] = 1024;
      int v36 = v15;
      __int16 v37 = 1024;
      int v38 = 0;
      int v19 = v24;
      BOOL v20 = "Cert param malformed pAccSignData:%04lX, accSignLen:%04X, paramError:%02X\n";
      uint32_t v21 = 24;
      goto LABEL_27;
    }
    CFDataRef v16 = CFDataCreate(0, ParamValueData, ParamValueLen);
LABEL_29:
    NextParam = iAP2MsgGetNextParam(a2, 0, v7);
    if (!NextParam) {
      break;
    }
    BOOL v7 = NextParam;
  }
  while (!v16);
  a1 = v33;
  if (acc_userDefaults_BOOLForKey(@"ForceAuthTimeout"))
  {
LABEL_39:
    if (gLogObjects && gNumLogObjects >= 25)
    {
      int v27 = *(NSObject **)(gLogObjects + 192);
    }
    else
    {
      int v27 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    uint64_t v28 = a1[1];
    *(_DWORD *)buf = 138412290;
    *(void *)BOOL v35 = v28;
    uint64_t v29 = "ForceAuthTimeout: %@ ignore incoming auth messages, allow timeout to occur, if any";
    int v30 = v27;
LABEL_48:
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, 0xCu);
    return 1;
  }
  if (!v16)
  {
LABEL_42:
    int v26 = 0;
    goto LABEL_43;
  }
  int v26 = platform_auth_verifyNonceSignature(*(void *)(v5 + 16), *(void *)(v5 + 56), (uint64_t)v16);
  if (v26) {
    *(void *)(v5 + 64) = platform_auth_createCapsFromAuthCert();
  }
  CFRelease(v16);
LABEL_43:
  _authCompleted(a1, v26);
  return 1;
}

uint64_t iap2_accAuthentication_certSerial(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0);
  if (!result) {
    return result;
  }
  uint64_t v5 = (_DWORD *)result;
  if (!*(unsigned char *)(result + 72)) {
    return 0;
  }
  if (*(_DWORD *)result)
  {
    int v42 = logObjectForModule_1(24);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      if (*v5 == 2) {
        uint64_t v43 = "passed";
      }
      else {
        uint64_t v43 = "failed";
      }
      *(_DWORD *)buf = 136315138;
      *(void *)uint64_t v48 = v43;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Authentication already %s, ignoring message!", buf, 0xCu);
    }
    return 1;
  }
  uint64_t v44 = (void *)result;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (!FirstParam) {
    goto LABEL_42;
  }
  BOOL v7 = (unsigned __int16 *)FirstParam;
  uint64_t v45 = a1;
  do
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)v7);
    if (ParamID)
    {
      int v9 = ParamID;
      uint64_t v10 = gLogObjects;
      int v11 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v12 = gNumLogObjects < 25;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12)
      {
        unsigned int v17 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v48 = v10;
          *(_WORD *)&v48[8] = 1024;
          int v49 = v11;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      else
      {
        unsigned int v17 = *(NSObject **)(gLogObjects + 192);
      }
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_29;
      }
      int MsgID = iAP2MsgGetMsgID(a2);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)uint64_t v48 = v9;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = MsgID;
      int v19 = v17;
      BOOL v20 = "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param";
      uint32_t v21 = 14;
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
LABEL_29:
      CFDataRef v16 = 0;
      goto LABEL_30;
    }
    ParamValueData = (const UInt8 *)iAP2MsgGetParamValueData((uint64_t)v7);
    unsigned int ParamValueLen = iAP2MsgGetParamValueLen(v7);
    int v15 = ParamValueLen;
    if (!ParamValueData || !ParamValueLen)
    {
      uint64_t v22 = gLogObjects;
      int v23 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 25)
      {
        int v24 = *(NSObject **)(gLogObjects + 192);
      }
      else
      {
        int v24 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v48 = v22;
          *(_WORD *)&v48[8] = 1024;
          int v49 = v23;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        CFDataRef v16 = 0;
        goto LABEL_30;
      }
      *(_DWORD *)buf = 134218496;
      *(void *)uint64_t v48 = (unsigned __int16)ParamValueData;
      *(_WORD *)&v48[8] = 1024;
      int v49 = v15;
      __int16 v50 = 1024;
      int v51 = 0;
      int v19 = v24;
      BOOL v20 = "Cert serial number param malformed pAccSerNumData:%04lX, accSerNumLen:%04X, paramError:%02X\n";
      uint32_t v21 = 24;
      goto LABEL_28;
    }
    CFDataRef v16 = CFDataCreate(0, ParamValueData, ParamValueLen);
LABEL_30:
    NextParam = iAP2MsgGetNextParam(a2, 0, v7);
    if (!NextParam) {
      break;
    }
    BOOL v7 = NextParam;
  }
  while (!v16);
  if (v16)
  {
    CFIndex Length = CFDataGetLength(v16);
    if ((unint64_t)(Length - 1) >= 0x10)
    {
      uint64_t v39 = Length;
      if (gLogObjects && gNumLogObjects >= 25)
      {
        BOOL v40 = *(NSObject **)(gLogObjects + 192);
      }
      else
      {
        BOOL v40 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        iap2_accAuthentication_certSerial_cold_3(v39, v40);
      }
      uint64_t CertDataFromSerialNumber = 0;
    }
    else
    {
      CFStringRef SerialNumberStringFromData = (const void *)platform_auth_createSerialNumberStringFromData();
      uint64_t CertDataFromSerialNumber = platform_auth_createCertDataFromSerialNumber(v44[1], SerialNumberStringFromData);
      if (SerialNumberStringFromData)
      {
        uint64_t v29 = (const void *)v44[3];
        if (v29)
        {
          CFRelease(v29);
          v44[3] = 0;
        }
        v44[3] = CFRetain(v16);
        int v30 = (const void *)v44[6];
        if (v30)
        {
          CFRelease(v30);
          v44[6] = 0;
        }
        v44[6] = CFRetain(SerialNumberStringFromData);
        CFRelease(v16);
LABEL_58:
        CFRelease(SerialNumberStringFromData);
        uint64_t v41 = *(NSObject **)(v45 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000;
        block[2] = __iap2_accAuthentication_certSerial_block_invoke;
        block[3] = &__block_descriptor_tmp_5;
        block[4] = v45;
        block[5] = CertDataFromSerialNumber;
        dispatch_async(v41, block);
        return 0;
      }
    }
    CFStringRef SerialNumberStringFromData = v16;
    goto LABEL_58;
  }
LABEL_42:
  if (gLogObjects && gNumLogObjects >= 25)
  {
    CFBooleanRef v31 = *(NSObject **)(gLogObjects + 192);
  }
  else
  {
    CFBooleanRef v31 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  uint64_t result = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
  if (result)
  {
    iap2_accAuthentication_certSerial_cold_1(v31, v32, v33, v34, v35, v36, v37, v38);
    return 0;
  }
  return result;
}

void __iap2_accAuthentication_certSerial_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFDataRef v2 = *(const __CFData **)(a1 + 40);
  uint64_t v4 = v3 + 120;
  if (v2)
  {
    BytePtr = CFDataGetBytePtr(v2);
    unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a1 + 40));
    iAP2MsgInit(v4, 43521, *(void *)(*(void *)(a1 + 32) + 192), 0xFFFF, 0, 0);
    iAP2MsgAddDataParam(v4, 0, 0, BytePtr, Length);
    iap2_accAuthentication_certificate(*(void *)(a1 + 32), v4);
    BOOL v7 = *(const void **)(a1 + 40);
    CFRelease(v7);
  }
  else
  {
    iAP2MsgInit(v3 + 120, 43520, *(void *)(v3 + 192), 0xFFFF, 0, 0);
    uint64_t v8 = *(uint64_t **)(a1 + 32);
    iap2_sessionControl_sendOutgoingMessage(v8, v4);
  }
}

unsigned int *iap2_accAuthentication_getState(unsigned int *result)
{
  if (result)
  {
    uint64_t result = (unsigned int *)iap2_feature_getFeature((uint64_t)result, 0);
    if (result) {
      return (unsigned int *)*result;
    }
  }
  return result;
}

CFTypeRef iap2_accAuthentication_copyCertificate(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0);
  if (!Feature) {
    return 0;
  }
  CFDataRef v2 = *(const void **)(Feature + 16);
  if (!v2) {
    return 0;
  }

  return CFRetain(v2);
}

CFTypeRef iap2_accAuthentication_copyCertificateSerial(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0);
  if (!Feature) {
    return 0;
  }
  if (*(void *)(Feature + 24))
  {
    CFDataRef v2 = *(const void **)(Feature + 24);
    return CFRetain(v2);
  }
  uint64_t v4 = *(void *)(Feature + 16);
  if (!v4) {
    return 0;
  }

  return (CFTypeRef)platform_auth_createCertificateSerialNumber(v4);
}

CFTypeRef iap2_accAuthentication_copyCertificateSerialString(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t Feature = (void *)iap2_feature_getFeature(a1, 0);
  if (!Feature) {
    return 0;
  }
  if (Feature[6])
  {
    CFDataRef v2 = (const void *)Feature[6];
    return CFRetain(v2);
  }
  if (!Feature[3])
  {
    uint64_t v4 = Feature[2];
    if (v4)
    {
      CertificateSerialNumber = (const void *)platform_auth_createCertificateSerialNumber(v4);
      uint64_t SerialNumberStringFromData = platform_auth_createSerialNumberStringFromData();
      if (CertificateSerialNumber) {
        CFRelease(CertificateSerialNumber);
      }
      return (CFTypeRef)SerialNumberStringFromData;
    }
    return 0;
  }

  return (CFTypeRef)platform_auth_createSerialNumberStringFromData();
}

_DWORD *_createFeature_0(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (_createFeature_onceToken != -1) {
    dispatch_once(&_createFeature_onceToken, &__block_literal_global_0);
  }
  BOOL v1 = malloc_type_calloc(1uLL, 0x60uLL, 0x10E004064C94EADuLL);
  CFDataRef v2 = v1;
  if (v1)
  {
    _DWORD *v1 = 0;
    uint64_t CertificateCache = platform_auth_createCertificateCache(@"com.apple.accessoryd.iap2d");
    *((void *)v2 + 2) = 0;
    *((void *)v2 + 3) = 0;
    *((void *)v2 + 1) = CertificateCache;
    v2[8] = 0;
    *(_OWORD *)(v2 + 10) = 0u;
    *(_OWORD *)(v2 + 14) = 0u;
    *((unsigned char *)v2 + 72) = gbAuthCertAlwaysCached;
    *((void *)v2 + 10) = 0;
    *((void *)v2 + 11) = 0;
  }
  return v2;
}

uint64_t _destroyFeature_0(uint64_t result)
{
  if (result)
  {
    BOOL v1 = (void **)result;
    uint64_t v2 = *(void *)result;
    if (*(void *)result)
    {
      platform_auth_deallocCertificateCache();
      platform_auth_deallocAuthCertCaps();
      *(void *)(v2 + 64) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      uint64_t v3 = *(const void **)(v2 + 16);
      if (v3)
      {
        CFRelease(v3);
        *(void *)(v2 + 16) = 0;
      }
      uint64_t v4 = *(const void **)(v2 + 40);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(v2 + 40) = 0;
      }
      uint64_t v5 = *(const void **)(v2 + 24);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(v2 + 24) = 0;
      }
      int v6 = *(const void **)(v2 + 48);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 48) = 0;
      }
      BOOL v7 = *(const void **)(v2 + 56);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(v2 + 56) = 0;
      }
      if (*v1)
      {
        free(*v1);
        _DWORD *v1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _startFeatureFromDevice(uint64_t **a1)
{
  uint64_t v2 = **a1;
  unsigned int Version = iap2_sessionControl_getVersion((unsigned __int8 *)a1);
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 25;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(gLogObjects + 192);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v17) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Starting Accessory Authentication...", (uint8_t *)&v17, 2u);
  }
  _setAuthState(a1, 0);
  kdebug_trace();
  LODWORD(v6) = 0;
  if (Version != 2)
  {
    LODWORD(v6) = 0;
    if (acc_connection_isAuthenticated(v2, 0))
    {
      uint64_t AuthInfo = acc_connection_getAuthInfo(v2);
      uint64_t v6 = AuthInfo;
      if (AuthInfo)
      {
        CFDataRef v8 = acc_authInfo_copyCertCapabilities(AuthInfo);
        CFStringRef v9 = acc_authInfo_copyCertSerialString(v6);
        BOOL isCTAAllowed = acc_authInfo_isCTAAllowed(v6);
        if (v8) {
          BOOL v11 = v9 == 0;
        }
        else {
          BOOL v11 = 1;
        }
        LODWORD(v6) = !v11 && isCTAAllowed;
        if (v8) {
          CFRelease(v8);
        }
        if (v9) {
          CFRelease(v9);
        }
      }
    }
  }
  if (acc_userDefaults_BOOLForKey(@"AuthenticationOverride"))
  {
    if (gLogObjects && gNumLogObjects >= 14)
    {
      BOOL v12 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      BOOL v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 136315138;
      uint64_t v18 = "_startFeatureFromDevice";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s: skip iAP2 authentication due to property", (uint8_t *)&v17, 0xCu);
    }
    goto LABEL_38;
  }
  if (v6)
  {
LABEL_38:
    _authCompleted((uint64_t *)a1, 1);
    return 1;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0);
  *(CFAbsoluteTime *)(Feature + 80) = CFAbsoluteTimeGetCurrent();
  if (!*(unsigned char *)(Feature + 72))
  {
    int isIdentifiedForIncomingMessageID = iap2_identification_isIdentifiedForIncomingMessageID((uint64_t)a1, 43526);
    if (Version < 2 || !isIdentifiedForIncomingMessageID)
    {
      uint64_t v15 = (uint64_t)(a1 + 15);
      iAP2MsgInit((uint64_t)(a1 + 15), 43520, (uint64_t)a1[24], 0xFFFF, 0, 0);
      goto LABEL_33;
    }
    *(unsigned char *)(Feature + 72) = 1;
  }
  uint64_t v15 = (uint64_t)(a1 + 15);
  iAP2MsgInit((uint64_t)(a1 + 15), 43520, (uint64_t)a1[24], 0xFFFF, 0, 0);
  iAP2MsgAddVoidParam((uint64_t)(a1 + 15), 0, 0);
LABEL_33:
  iap2_sessionControl_sendOutgoingMessage((uint64_t *)a1, v15);
  return 1;
}

uint64_t _checkIdentificationInfo(uint64_t a1)
{
  char v2 = 0;
  return iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgAccAuthenticationList, 7u, &v2);
}

void ___createFeature_block_invoke(id a1)
{
  gbIsInternalBuild = platform_auth_isInternalBuild();
  gbIsDesenseBuild = platform_auth_isDesenseBuild();
  int isDevelopmentHW = platform_auth_isDevelopmentHW();
  gbIsDevelopmentHW = isDevelopmentHW;
  if (isDevelopmentHW && gbIsInternalBuild | gbIsDesenseBuild) {
    gbAuthCertAlwaysCached = CFPreferencesGetAppBooleanValue(@"AuthCertAlwaysCached", @"com.apple.accessoryd", 0) != 0;
  }
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 25;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    uint64_t v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(gLogObjects + 192);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109632;
    v4[1] = gbIsInternalBuild;
    __int16 v5 = 1024;
    int v6 = gbIsDesenseBuild;
    __int16 v7 = 1024;
    int v8 = gbIsDevelopmentHW;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "gbIsInternalBuild:%d, gbIsDesenseBuild:%d, gbIsDevelopmentHW:%d", (uint8_t *)v4, 0x14u);
  }
}

void _setAuthState(uint64_t **a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        uint64_t Feature = (_DWORD *)iap2_feature_getFeature((uint64_t)a1, 0);
        if (Feature)
        {
          __int16 v7 = Feature;
          *uint64_t Feature = a2;
          if (gLogObjects && gNumLogObjects >= 25)
          {
            int v8 = *(NSObject **)(gLogObjects + 192);
          }
          else
          {
            int v8 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            CFStringRef v9 = a1[1];
            v16[0] = 67109378;
            v16[1] = a2;
            __int16 v17 = 2112;
            uint64_t v18 = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Authentication state changed: %{coreacc:iAP2Feature_AccAuthentication_State_t}d for endpoint: %@", (uint8_t *)v16, 0x12u);
          }
          if (a2 == 2 || !acc_connection_isAuthenticated(v4, 0))
          {
            if (!acc_connection_isAuthenticated(v4, 0))
            {
              if (a2 == 1)
              {
                int v15 = 1;
                kdebug_trace();
                platform_auth_removeCertDataEntryFromCache();
              }
              else if (a2 == 2)
              {
                kdebug_trace();
                if (*((unsigned char *)v7 + 72)) {
                  platform_auth_addCertDataEntryToCache(*((void *)v7 + 1), *((void *)v7 + 2));
                }
                acc_connection_setAuthCertData(v4, *((const void **)v7 + 2));
                int v15 = 2;
              }
              else
              {
                int v15 = 0;
              }
              acc_connection_setAuthStatus(v4, 1, v15);
            }
          }
          else
          {
            uint64_t AuthInfo = acc_connection_getAuthInfo(v4);
            if (AuthInfo)
            {
              uint64_t v11 = AuthInfo;
              BOOL v12 = (const void *)*((void *)v7 + 2);
              if (v12)
              {
                CFRelease(v12);
                *((void *)v7 + 2) = 0;
              }
              *((void *)v7 + 2) = oobPairing_endpoint_copyCachedOOBPairingInfo(v11);
              CFStringRef v13 = (const void *)*((void *)v7 + 3);
              if (v13)
              {
                CFRelease(v13);
                *((void *)v7 + 3) = 0;
              }
              *((void *)v7 + 3) = oobPairing_endpoint_copyCachedOOBPairingData(v11);
              CFStringRef v14 = (const void *)*((void *)v7 + 6);
              if (v14)
              {
                CFRelease(v14);
                *((void *)v7 + 6) = 0;
              }
              *((void *)v7 + 6) = acc_authInfo_copyCertSerialString(v11);
            }
          }
          iap2_sessionControl_accAuthenticationStateChanged((const __CFSet *)a1, a2);
        }
      }
    }
  }
}

void OUTLINED_FUNCTION_2_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_2_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t iap2_destinationSharing_StartDestinationInformation(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a1 || !a2) {
    return result;
  }
  if (iAP2MsgGetMsgID(a2) != 4314) {
    return 0;
  }
  uint64_t v24 = a1;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    char v7 = 0;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      if (ParamID)
      {
        int v9 = ParamID;
        uint64_t v10 = gLogObjects;
        int v11 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 45)
        {
          BOOL v12 = *(NSObject **)(gLogObjects + 352);
        }
        else
        {
          BOOL v12 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)int v26 = v10;
            *(_WORD *)&v26[8] = 1024;
            int v27 = v11;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            BOOL v12 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)int v26 = v9;
          *(_WORD *)&v26[4] = 1024;
          *(_DWORD *)&v26[6] = MsgID;
          _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
        }
      }
      else
      {
        if (!iAP2MsgIsDataVoid(NextParam))
        {
          uint32_t v21 = logObjectForModule_1(44);
          uint64_t result = os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG);
          if (!result) {
            return result;
          }
          iap2_destinationSharing_StartDestinationInformation_cold_4(a2);
          return 0;
        }
        if (v7)
        {
          uint64_t v22 = logObjectForModule_1(44);
          uint64_t result = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
          if (!result) {
            return result;
          }
          iap2_destinationSharing_StartDestinationInformation_cold_3(a2);
          return 0;
        }
        char v7 = 1;
      }
      NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      if (!NextParam) {
        goto LABEL_20;
      }
    }
  }
  char v7 = 0;
LABEL_20:
  if (gLogObjects && gNumLogObjects >= 45)
  {
    CFStringRef v14 = *(NSObject **)(gLogObjects + 352);
    uint64_t v15 = v24;
  }
  else
  {
    CFStringRef v14 = &_os_log_default;
    uint64_t v15 = v24;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *(void *)(v15 + 8);
    *(_DWORD *)buf = 138412290;
    *(void *)int v26 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "iAP2DestinationSharing StartDestinationInformation: %@", buf, 0xCu);
  }
  uint64_t result = iap2_feature_getFeature(v15, 0x17u);
  if (!result) {
    return result;
  }
  uint64_t v17 = result;
  if (!*(unsigned char *)result || *(unsigned char *)(result + 1))
  {
    uint64_t v18 = logObjectForModule_1(44);
    BOOL v23 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v23) {
      return result;
    }
    *(_WORD *)buf = 0;
    BOOL v20 = "Already started destination sharing!";
LABEL_39:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v20, buf, 2u);
    return 0;
  }
  *(unsigned char *)(result + 2) = v7 & 1;
  if (platform_destinationSharing_startDestinationInformation(*(void *)(v15 + 8), v7 & 1))
  {
    uint64_t result = 1;
    *(unsigned char *)(v17 + 1) = 1;
    return result;
  }
  if (gLogObjects && gNumLogObjects >= 45)
  {
    uint64_t v18 = *(NSObject **)(gLogObjects + 352);
  }
  else
  {
    uint64_t v18 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v19)
  {
    *(_WORD *)buf = 0;
    BOOL v20 = "platform_destinationSharing_startDestinationInformation failed!";
    goto LABEL_39;
  }
  return result;
}

uint64_t iap2_destinationSharing_StopDestinationInformation(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (iAP2MsgGetMsgID(a2) != 4316) {
      return 0;
    }
    uint64_t v16 = a1;
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        uint64_t v8 = gLogObjects;
        int v9 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 45)
        {
          uint64_t v10 = *(NSObject **)(gLogObjects + 352);
        }
        else
        {
          uint64_t v10 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v18 = v8;
            __int16 v19 = 1024;
            int v20 = v9;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            uint64_t v10 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v18) = ParamID;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      }
      while (NextParam);
    }
    uint64_t result = iap2_feature_getFeature(v16, 0x17u);
    if (result)
    {
      uint64_t v11 = result;
      if (*(unsigned char *)(result + 1))
      {
        if (platform_destinationSharing_stopDestinationInformation(*(void *)(v16 + 8)))
        {
          *(unsigned char *)(v11 + 1) = 0;
          return 1;
        }
        if (gLogObjects && gNumLogObjects >= 45)
        {
          BOOL v12 = *(NSObject **)(gLogObjects + 352);
        }
        else
        {
          BOOL v12 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        BOOL v15 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v15)
        {
          *(_WORD *)buf = 0;
          CFStringRef v14 = "platform_destinationSharing_stopDestinationInformation failed!";
          goto LABEL_32;
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 45)
        {
          BOOL v12 = *(NSObject **)(gLogObjects + 352);
        }
        else
        {
          BOOL v12 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v13)
        {
          *(_WORD *)buf = 0;
          CFStringRef v14 = "Destination sharing already inactive!";
LABEL_32:
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
          return 0;
        }
      }
    }
  }
  return result;
}

id iap2_destinationSharing_DestinationInformationStatus(uint64_t a1, uint64_t a2)
{
  id v2 = 0;
  if (a1 && a2)
  {
    if (iAP2MsgGetMsgID(a2) == 4317)
    {
      unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
      if (FirstParam)
      {
        int v6 = (unsigned __int16 *)FirstParam;
        char v27 = 0;
        Mutable = 0;
        CFStringRef v26 = 0;
        do
        {
          int ParamID = iAP2MsgGetParamID((uint64_t)v6);
          int v28 = -1431655766;
          if (ParamID == 2)
          {
            if (!Mutable) {
              Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
            }
            unint64_t v11 = iAP2MsgGetFirstParam(a2, v6);
            if (v11)
            {
              NextParam = (unsigned __int16 *)v11;
              while (1)
              {
                int v13 = iAP2MsgGetParamID((uint64_t)NextParam);
                uint64_t v14 = gLogObjects;
                int v15 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 45)
                {
                  uint64_t v16 = *(NSObject **)(gLogObjects + 352);
                }
                else
                {
                  uint64_t v16 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134218240;
                    uint64_t v30 = v14;
                    __int16 v31 = 1024;
                    int v32 = v15;
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                    uint64_t v16 = &_os_log_default;
                  }
                }
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 67109120;
                  LODWORD(v30) = v13;
                  _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "msgSubParamID: %d", buf, 8u);
                }
                if (!iAP2MsgIsDataVoid(NextParam)) {
                  break;
                }
                if ((v13 - 2) <= 2) {
                  CFArrayAppendValue(Mutable, *(const void **)*(&off_100215BD8 + (__int16)(v13 - 2)));
                }
                NextParam = iAP2MsgGetNextParam(a2, v6, NextParam);
                if (!NextParam) {
                  goto LABEL_37;
                }
              }
              if (gLogObjects && gNumLogObjects >= 45)
              {
                uint64_t v24 = *(NSObject **)(gLogObjects + 352);
              }
              else
              {
                uint64_t v24 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
                iap2_destinationSharing_DestinationInformationStatus_cold_1(v13, a2, v24);
              }
              return 0;
            }
          }
          else
          {
            int v9 = ParamID;
            if (ParamID == 1)
            {
              uint64_t v17 = gLogObjects;
              int v18 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 45)
              {
                __int16 v19 = *(NSObject **)(gLogObjects + 352);
              }
              else
              {
                __int16 v19 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v30 = v17;
                  __int16 v31 = 1024;
                  int v32 = v18;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  __int16 v19 = &_os_log_default;
                }
              }
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "accessory returned a failure param!", buf, 2u);
              }
              char v27 = 1;
            }
            else if (ParamID)
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v9, MsgID);
            }
            else
            {
              DataAsString = iAP2MsgGetDataAsString(v6, (BOOL *)&v28);
              if (v28)
              {
                int v25 = iAP2MsgGetMsgID(a2);
                printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, v25);
                return 0;
              }
              if (DataAsString) {
                CFStringRef v26 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
              }
            }
          }
LABEL_37:
          int v6 = iAP2MsgGetNextParam(a2, 0, v6);
        }
        while (v6);
        CFStringRef v21 = v26;
        char v22 = v27;
        if (v26) {
          goto LABEL_42;
        }
      }
      else
      {
        char v22 = 0;
        Mutable = 0;
      }
      CFStringRef v21 = CFStringCreateWithCString(kCFAllocatorDefault, "", 0x8000100u);
LABEL_42:
      id v2 = platform_destinationSharing_destinationInformationStatus(*(void *)(a1 + 8), (uint64_t)v21, (v22 & 1) == 0, (uint64_t)Mutable);
      if (v21) {
        CFRelease(v21);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t iap2_destinationSharing_DestinationInformationUpdateHandler(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result = 0;
  if (!a1) {
    return result;
  }
  CFDictionaryRef v4 = a2;
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0x17u);
  if (!result) {
    return result;
  }
  if (!*(unsigned char *)(result + 1))
  {
    if (gLogObjects && gNumLogObjects >= 45)
    {
      uint64_t v8 = *(NSObject **)(gLogObjects + 352);
    }
    else
    {
      uint64_t v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v9)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Destination sharing inactive, can't send destination information!", buf, 2u);
      return 0;
    }
    return result;
  }
  uint64_t v86 = result;
  CFStringRef v87 = (uint64_t *)a1;
  uint64_t v5 = a1 + 120;
  iAP2MsgInit(a1 + 120, 4315, *(void *)(a1 + 192), 0xFFFF, 0, 0);
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v4, kCFACCDestinationSharing_IdentifierKey);
  if (Value && !iAP2MsgAddCFStringParam(a1 + 120, 0, 0, Value))
  {
    if (gLogObjects && gNumLogObjects >= 45)
    {
      char v7 = *(NSObject **)(gLogObjects + 352);
    }
    else
    {
      char v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "failed to add destination sharing Identifier", buf, 2u);
    }
  }
  CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(v4, kCFACCDestinationSharingParameter_DisplayName);
  if (v10 && !iAP2MsgAddCFStringParam(v5, 0, 1, v10))
  {
    if (gLogObjects && gNumLogObjects >= 45)
    {
      unint64_t v11 = *(NSObject **)(gLogObjects + 352);
    }
    else
    {
      unint64_t v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "failed to add destination sharing Display Name", buf, 2u);
    }
  }
  CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(v4, kCFACCDestinationSharingParameter_Address);
  CFDictionaryRef theDict = v4;
  if (v12)
  {
    CFArrayRef v13 = v12;
    CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
    CFIndex Count = CFArrayGetCount(v13);
    if (gLogObjects && gNumLogObjects >= 45)
    {
      uint64_t v16 = *(NSObject **)(gLogObjects + 352);
    }
    else
    {
      uint64_t v16 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      iap2_destinationSharing_DestinationInformationUpdateHandler_cold_19();
    }
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, i);
        if (ValueAtIndex) {
          CFStringAppend(Mutable, ValueAtIndex);
        }
        CFStringAppendCString(Mutable, "\n", 0x8000100u);
      }
    }
    if (gLogObjects && gNumLogObjects >= 45)
    {
      __int16 v19 = *(NSObject **)(gLogObjects + 352);
      uint64_t v5 = a1 + 120;
      CFDictionaryRef v4 = theDict;
    }
    else
    {
      __int16 v19 = &_os_log_default;
      uint64_t v5 = a1 + 120;
      CFDictionaryRef v4 = theDict;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      iap2_destinationSharing_DestinationInformationUpdateHandler_cold_17();
    }
    if (!iAP2MsgAddCFStringParam(v5, 0, 3, Mutable))
    {
      if (gLogObjects && gNumLogObjects >= 45)
      {
        int v20 = *(NSObject **)(gLogObjects + 352);
      }
      else
      {
        int v20 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "failed to add destination sharing Address String", buf, 2u);
      }
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(v4, kCFACCDestinationSharingParameter_CenterCoordinate);
  if (v21)
  {
    CFArrayRef v22 = v21;
    CFIndex v23 = CFArrayGetCount(v21);
    if (v23 == 2) {
      goto LABEL_70;
    }
    uint64_t v24 = v23;
    if (gLogObjects && gNumLogObjects >= 45)
    {
      int v25 = *(NSObject **)(gLogObjects + 352);
    }
    else
    {
      int v25 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      double v92 = *(double *)&v24;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "center coordinates count is not 2, it's %ld", buf, 0xCu);
    }
    CFDictionaryRef v4 = theDict;
    if (v24 >= 2)
    {
LABEL_70:
      CFStringRef v26 = iAP2MsgAddGroupParam(v5, 2);
      CFNumberRef v27 = (const __CFNumber *)CFArrayGetValueAtIndex(v22, 0);
      CFNumberRef v28 = (const __CFNumber *)CFArrayGetValueAtIndex(v22, 1);
      double v89 = 0.0;
      double valuePtr = 0.0;
      if (CFNumberGetValue(v27, kCFNumberDoubleType, &valuePtr))
      {
        if (valuePtr > 90.0 || valuePtr < -90.0)
        {
          if (gLogObjects && gNumLogObjects >= 45)
          {
            uint64_t v29 = *(NSObject **)(gLogObjects + 352);
          }
          else
          {
            uint64_t v29 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          CFDictionaryRef v4 = theDict;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            double v92 = valuePtr;
            __int16 v31 = "unsupported dLatitude value %f";
            int v32 = v29;
            uint32_t v33 = 12;
            goto LABEL_87;
          }
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 45)
        {
          uint64_t v30 = *(NSObject **)(gLogObjects + 352);
        }
        else
        {
          uint64_t v30 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        CFDictionaryRef v4 = theDict;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          __int16 v31 = "failed to get latitude";
          int v32 = v30;
          uint32_t v33 = 2;
LABEL_87:
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v31, buf, v33);
        }
      }
      if (CFNumberGetValue(v28, kCFNumberDoubleType, &v89))
      {
        if (v89 <= 180.0 && v89 >= -180.0) {
          goto LABEL_106;
        }
        if (gLogObjects && gNumLogObjects >= 45)
        {
          uint64_t v34 = *(NSObject **)(gLogObjects + 352);
        }
        else
        {
          uint64_t v34 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_106;
        }
        *(_DWORD *)buf = 134217984;
        double v92 = v89;
        uint64_t v36 = "unsupported dLongitude value %f";
        uint64_t v37 = v34;
        uint32_t v38 = 12;
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 45)
        {
          uint64_t v35 = *(NSObject **)(gLogObjects + 352);
        }
        else
        {
          uint64_t v35 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_106;
        }
        *(_WORD *)buf = 0;
        uint64_t v36 = "failed to get longitude";
        uint64_t v37 = v35;
        uint32_t v38 = 2;
      }
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, v36, buf, v38);
LABEL_106:
      if (gLogObjects && gNumLogObjects >= 45)
      {
        uint64_t v39 = *(NSObject **)(gLogObjects + 352);
      }
      else
      {
        uint64_t v39 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
        iap2_destinationSharing_DestinationInformationUpdateHandler_cold_9(&valuePtr, &v89, v39);
      }
      unsigned int v40 = vcvtd_n_s64_f64(v89, 0x16uLL);
      iAP2MsgAddI32Param(v5, (uint64_t)v26, 0, vcvtd_n_s64_f64(valuePtr, 0x16uLL));
      iAP2MsgAddI32Param(v5, (uint64_t)v26, 1, v40);
    }
  }
  CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v4, kCFACCDestinationSharingParameter_CoordinateThreshold);
  if (v41 && !iAP2MsgAddCFU32Param(v5, 0, 5, v41))
  {
    if (gLogObjects && gNumLogObjects >= 45)
    {
      int v42 = *(NSObject **)(gLogObjects + 352);
    }
    else
    {
      int v42 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "failed to add destination sharing Coordinate Threshold", buf, 2u);
    }
  }
  CFArrayRef v43 = (const __CFArray *)CFDictionaryGetValue(v4, kCFACCDestinationSharingParameter_EntryPoints);
  if (v43)
  {
    CFArrayRef v44 = v43;
    CFIndex v45 = CFArrayGetCount(v43);
    if (gLogObjects && gNumLogObjects >= 45)
    {
      uint64_t v46 = *(NSObject **)(gLogObjects + 352);
    }
    else
    {
      uint64_t v46 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
      iap2_destinationSharing_DestinationInformationUpdateHandler_cold_6();
    }
    if (v45 >= 1)
    {
      for (CFIndex j = 0; v45 != j; ++j)
      {
        CFArrayRef v48 = (const __CFArray *)CFArrayGetValueAtIndex(v44, j);
        CFIndex v49 = CFArrayGetCount(v48);
        if (v49 < 2)
        {
          CFIndex v57 = v49;
          uint64_t v58 = gLogObjects;
          int v59 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 45)
          {
            CFComparisonResult v60 = *(NSObject **)(gLogObjects + 352);
          }
          else
          {
            CFComparisonResult v60 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              double v92 = *(double *)&v58;
              __int16 v93 = 1024;
              LODWORD(v94) = v59;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              CFComparisonResult v60 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            double v92 = *(double *)&v57;
            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "entry point count is unexpected: not 2, it's %ld", buf, 0xCu);
          }
          continue;
        }
        uint64_t v50 = v5;
        int v51 = iAP2MsgAddGroupParam(v5, 4);
        CFNumberRef v52 = (const __CFNumber *)CFArrayGetValueAtIndex(v48, 0);
        CFNumberRef v53 = (const __CFNumber *)CFArrayGetValueAtIndex(v48, 1);
        double v89 = 0.0;
        double valuePtr = 0.0;
        if (CFNumberGetValue(v52, kCFNumberDoubleType, &valuePtr))
        {
          if (valuePtr > 90.0 || valuePtr < -90.0)
          {
            uint64_t v54 = gLogObjects;
            int v55 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 45)
            {
              long long v56 = *(NSObject **)(gLogObjects + 352);
            }
            else
            {
              long long v56 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                double v92 = *(double *)&v54;
                __int16 v93 = 1024;
                LODWORD(v94) = v55;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                long long v56 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              double v92 = valuePtr;
              int v64 = v56;
              __int16 v65 = "unsupported dEntryPointsLatitude value %f";
              uint32_t v66 = 12;
              goto LABEL_158;
            }
          }
        }
        else
        {
          uint64_t v61 = gLogObjects;
          int v62 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 45)
          {
            __int16 v63 = *(NSObject **)(gLogObjects + 352);
          }
          else
          {
            __int16 v63 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              double v92 = *(double *)&v61;
              __int16 v93 = 1024;
              LODWORD(v94) = v62;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              __int16 v63 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            int v64 = v63;
            __int16 v65 = "failed to get entry points latitude";
            uint32_t v66 = 2;
LABEL_158:
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, v65, buf, v66);
          }
        }
        if (CFNumberGetValue(v53, kCFNumberDoubleType, &v89))
        {
          if (v89 <= 180.0 && v89 >= -180.0) {
            goto LABEL_177;
          }
          uint64_t v67 = gLogObjects;
          int v68 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 45)
          {
            CFStringRef v69 = *(NSObject **)(gLogObjects + 352);
          }
          else
          {
            CFStringRef v69 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              double v92 = *(double *)&v67;
              __int16 v93 = 1024;
              LODWORD(v94) = v68;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              CFStringRef v69 = &_os_log_default;
            }
          }
          if (!os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_177;
          }
          *(_DWORD *)buf = 134217984;
          double v92 = v89;
          CFBooleanRef v73 = v69;
          int v74 = "unsupported dEntryPointsLongitude value %f";
          uint32_t v75 = 12;
        }
        else
        {
          uint64_t v70 = gLogObjects;
          int v71 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 45)
          {
            unsigned int v72 = *(NSObject **)(gLogObjects + 352);
          }
          else
          {
            unsigned int v72 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              double v92 = *(double *)&v70;
              __int16 v93 = 1024;
              LODWORD(v94) = v71;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              unsigned int v72 = &_os_log_default;
            }
          }
          if (!os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_177;
          }
          *(_WORD *)buf = 0;
          CFBooleanRef v73 = v72;
          int v74 = "failed to get entry points longitude";
          uint32_t v75 = 2;
        }
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, v74, buf, v75);
LABEL_177:
        uint64_t v76 = gLogObjects;
        int v77 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 45)
        {
          __int16 v78 = *(NSObject **)(gLogObjects + 352);
        }
        else
        {
          __int16 v78 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            double v92 = *(double *)&v76;
            __int16 v93 = 1024;
            LODWORD(v94) = v77;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            __int16 v78 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218240;
          double v92 = valuePtr;
          __int16 v93 = 2048;
          double v94 = v89;
          _os_log_debug_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "entryPointsLatitude = %f, entryPointsLongitude = %f", buf, 0x16u);
        }
        unsigned int v79 = vcvtd_n_s64_f64(v89, 0x16uLL);
        uint64_t v5 = v50;
        iAP2MsgAddI32Param(v50, (uint64_t)v51, 0, vcvtd_n_s64_f64(valuePtr, 0x16uLL));
        iAP2MsgAddI32Param(v50, (uint64_t)v51, 1, v79);
      }
    }
  }
  CFStringRef v80 = (const __CFString *)CFDictionaryGetValue(theDict, kCFACCDestinationSharingParameter_Locale);
  if (v80)
  {
    CFStringRef v81 = v80;
    if (gLogObjects && gNumLogObjects >= 45)
    {
      uint64_t v82 = *(NSObject **)(gLogObjects + 352);
    }
    else
    {
      uint64_t v82 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG)) {
      iap2_destinationSharing_DestinationInformationUpdateHandler_cold_4();
    }
    if (!iAP2MsgAddCFStringParam(v5, 0, 6, v81))
    {
      if (gLogObjects && gNumLogObjects >= 45)
      {
        uint64_t v83 = *(NSObject **)(gLogObjects + 352);
      }
      else
      {
        uint64_t v83 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "failed to add destination sharing Locale", buf, 2u);
      }
    }
  }
  if (*(unsigned char *)(v86 + 2))
  {
    CFStringRef v84 = (const __CFString *)CFDictionaryGetValue(theDict, kCFACCDestinationSharingParameter_SourceName);
    if (v84)
    {
      if (!iAP2MsgAddCFStringParam(v5, 0, 7, v84))
      {
        if (gLogObjects && gNumLogObjects >= 45)
        {
          uint64_t v85 = *(NSObject **)(gLogObjects + 352);
        }
        else
        {
          uint64_t v85 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "failed to add destination sharing Source Name", buf, 2u);
        }
      }
    }
  }
  return iap2_sessionControl_sendOutgoingMessage(v87, v5);
}

unsigned char *_createFeature_1(unsigned char *result)
{
  if (result)
  {
    uint64_t result = malloc_type_calloc(1uLL, 3uLL, 0x100004033FC2DF1uLL);
    if (result)
    {
      *(_WORD *)uint64_t result = 0;
      result[2] = 0;
    }
  }
  return result;
}

uint64_t _destroyFeature_1(void **a1)
{
  if (a1)
  {
    id v2 = *a1;
    if (v2)
    {
      free(v2);
      *a1 = 0;
    }
  }
  return 0;
}

uint64_t _checkIdentificationInfo_0(uint64_t a1)
{
  unsigned __int8 v7 = -86;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_kMsgDestinationSharingList, 4u, &v7);
  if (!v2)
  {
    int v3 = v7;
    if (v7)
    {
      iap2_features_createFeature(a1, 0x17u);
      iap2_identification_setIdentifiedForFeature(a1, 0x17u);
    }
    uint64_t Feature = (unsigned char *)iap2_feature_getFeature(a1, 0x17u);
    if (Feature)
    {
      *uint64_t Feature = v3;
      Feature[1] = 0;
    }
    if (v3)
    {
      if (gLogObjects && gNumLogObjects >= 39)
      {
        uint64_t v5 = *(NSObject **)(gLogObjects + 304);
      }
      else
      {
        uint64_t v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        _checkIdentificationInfo_cold_1(v5);
      }
    }
  }
  return v2;
}

void OUTLINED_FUNCTION_4_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xEu);
}

void OUTLINED_FUNCTION_5_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_1000160DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void iAP2LinkRunLoopSignal(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  if (a2)
  {
    iAP2LinkRunLoopRunOnce(a1, a2, a3);
  }
  else
  {
    void block[7] = v3;
    block[8] = v4;
    uint64_t v5 = *(NSObject **)(*(void *)(a1 + 16) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = __iAP2LinkRunLoopSignal_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = a1;
    block[5] = 0;
    void block[6] = a3;
    dispatch_async(v5, block);
  }
}

uint64_t __iAP2LinkRunLoopSignal_block_invoke(uint64_t a1)
{
  return iAP2LinkRunLoopRunOnce(*(void *)(a1 + 32), *(uint64_t **)(a1 + 40), *(unsigned char **)(a1 + 48));
}

uint64_t iAP2LinkRunLoopSetEventMaskBit(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 16) + 92) |= a2;
  return result;
}

uint64_t iAP2LinkRunLoopGetResetEventMask(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t result = *(unsigned int *)(v1 + 92);
  *(_DWORD *)(v1 + 92) = 0;
  return result;
}

uint64_t iAP2LinkDataReadyCB(uint64_t a1, unsigned __int16 *a2, unsigned __int16 a3, uint64_t a4, int a5)
{
  unint64_t v7 = *(void *)(*(void *)(a1 + 176) + 16);
  SessionInfo = iAP2LinkGetSessionInfo((unsigned __int8 *)a1, a5);
  if (!SessionInfo) {
    return 0;
  }
  uint64_t v9 = (uint64_t)SessionInfo;
  if (gLogObjects) {
    BOOL v10 = gNumLogObjects < 20;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFArrayRef v12 = &_os_log_default;
    id v11 = &_os_log_default;
  }
  else
  {
    CFArrayRef v12 = *(id *)(gLogObjects + 152);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Processing session data...", buf, 2u);
  }

  uint64_t v13 = iap2_sessionRouter_processSessionData(v7, v9, a2, a3);
  if (gLogObjects && gNumLogObjects >= 20)
  {
    uint64_t v14 = *(id *)(gLogObjects + 152);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v14 = &_os_log_default;
    id v15 = &_os_log_default;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Finished processing session data!", v17, 2u);
  }

  return v13;
}

uint64_t iAP2LinkSendPacketCB(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v3 = *(void *)(result + 176);
      if (v3)
      {
        uint64_t v4 = *(uint64_t **)(v3 + 16);
        if (v4)
        {
          Buffer = (const UInt8 *)iAP2PacketGenerateBuffer(a2);
          unsigned int v6 = *(unsigned __int16 *)(a2 + 54);
          acc_platform_packetLogging_logiAP2Packet(v4, a2, 0);
          return iap2_endpoint_sendOutgoingData(v4, Buffer, v6);
        }
      }
    }
  }
  return result;
}

void iAP2LinkConnectedCB(uint64_t a1, int a2)
{
}

void iAP2LinkSendDetectCB(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v8 = *(void *)(a1 + 176);
    if (v8)
    {
      uint64_t v9 = *(uint64_t **)(v8 + 16);
      if (v9)
      {
        if (a2)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            BOOL v10 = *(id *)(gLogObjects + 152);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            BOOL v10 = &_os_log_default;
            id v11 = &_os_log_default;
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v12) = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "-------------------------------------------------------\n  BadParameter or RequestIdentify response to DETECT:  \n    must be iAP1 only device!                          \n-------------------------------------------------------", (uint8_t *)&v12, 2u);
          }
        }
        else
        {
          acc_platform_packetLogging_logEvent(*v9, "DETECT", (uint64_t)"Send DETECT packet", a4, a5, a6, a7, a8, v12);
          iap2_endpoint_sendOutgoingData(v9, kIap2PacketDetectData, (unsigned __int16)kIap2PacketDetectDataLen);
        }
      }
    }
  }
}

_WORD *oobPairing_endpoint_create(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = malloc_type_calloc(1uLL, 0x28uLL, 0x1060040975FC6C2uLL);
    uint64_t v3 = v2;
    if (v2)
    {
      *(void *)uint64_t v2 = a1;
      v2[8] = 514;
      *((unsigned char *)v2 + 18) = 0;
      *((void *)v2 + 4) = 0;
      *(void *)bytes = CFHash(*(CFTypeRef *)(a1 + 16));
      *((void *)v3 + 1) = CFDataCreate(kCFAllocatorDefault, bytes, 8);
      platform_blePairing_incrementUserCount();
    }
  }
  else
  {
    uint64_t v5 = logObjectForModule_1(10);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      oobPairing_endpoint_create_cold_1(v5);
    }
    return 0;
  }
  return v3;
}

uint64_t oobPairing_endpoint_publish(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = *(void *)result;
    if (result)
    {
      BOOL isPublished = acc_endpoint_isPublished(result);
      if (acc_endpoint_getProtocol(*(void *)v2) == 8)
      {
        _oobPairing_endpoint_init(*(void *)v2);
        CFMutableStringRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1, &kCFTypeArrayCallBacks);
        unsigned int v6 = Mutable;
        if (*(void *)v2) {
          unint64_t v7 = *(const void **)(*(void *)v2 + 16);
        }
        else {
          unint64_t v7 = 0;
        }
        CFArrayAppendValue(Mutable, v7);
        uint64_t v8 = acc_accInfo_copyAccessoryInfoDictionary(a2);
        MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, (CFDictionaryRef)v8);
        CFDataRef v10 = _oobPairing_copySupportedTypes((const UInt8 *)(v2 + 16), 2);
        if (v10) {
          CFDictionaryAddValue(MutableCopy, @"SupportedTypes", v10);
        }
        int valuePtr = *(unsigned __int8 *)(v2 + 18);
        CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
        CFDictionaryAddValue(MutableCopy, @"Supports2Way", v11);
        if (gLogObjects && gNumLogObjects >= 11)
        {
          uint64_t v12 = *(NSObject **)(gLogObjects + 80);
        }
        else
        {
          uint64_t v12 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = *(unsigned __int8 *)(v2 + 16);
          int v14 = *(unsigned __int8 *)(v2 + 17);
          *(_DWORD *)buf = 67110146;
          BOOL v21 = isPublished;
          __int16 v22 = 1024;
          int v23 = v13;
          __int16 v24 = 1024;
          int v25 = v14;
          __int16 v26 = 2112;
          CFDataRef v27 = v10;
          __int16 v28 = 2112;
          uint64_t v29 = MutableCopy;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "oobPairing publish: wasPublished = %d, supportedTypes { %d, %d } = %@, accInfoDict = %@", buf, 0x28u);
        }
        uint64_t v15 = *(void *)v2;
        if (isPublished)
        {
          if (v15) {
            uint64_t v16 = *(void *)(v15 + 16);
          }
          else {
            uint64_t v16 = 0;
          }
          int v18 = (uint64_t *)(v2 + 8);
          platform_blePairing_accessoryDetached(v16, *(void *)(v2 + 8));
          if (*(void *)v2) {
            uint64_t v17 = *(void *)(*(void *)v2 + 16);
          }
          else {
            uint64_t v17 = 0;
          }
        }
        else
        {
          if (v15) {
            uint64_t v17 = *(void *)(v15 + 16);
          }
          else {
            uint64_t v17 = 0;
          }
          int v18 = (uint64_t *)(v2 + 8);
        }
        platform_blePairing_accessoryAttached(v17, *v18, (uint64_t)MutableCopy, (uint64_t)v10);
        if (v8) {
          CFRelease(v8);
        }
        if (v10) {
          CFRelease(v10);
        }
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        if (v6) {
          CFRelease(v6);
        }
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

CFNumberRef _oobPairing_endpoint_init(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), @"SupportedTypes");
  if (Value)
  {
    CFDataRef v4 = Value;
    if (CFDataGetLength(Value) <= 1)
    {
      *(_WORD *)(v2 + 16) = 514;
      BytePtr = CFDataGetBytePtr(v4);
      size_t Length = CFDataGetLength(v4);
      memcpy((void *)(v2 + 16), BytePtr, Length);
    }
  }
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), @"Supports2Way");
  if (result)
  {
    int valuePtr = 0;
    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
    *(unsigned char *)(v2 + 18) = valuePtr != 0;
  }
  return result;
}

CFDataRef _oobPairing_copySupportedTypes(const UInt8 *a1, CFIndex capacity)
{
  CFDataRef Copy = 0;
  if (a1)
  {
    CFIndex v3 = capacity;
    if (capacity)
    {
      CFDataRef v4 = a1;
      CFMutableStringRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, capacity);
      do
      {
        if (*v4 <= 1u) {
          CFDataAppendBytes(Mutable, v4, 1);
        }
        ++v4;
        --v3;
      }
      while (v3);
      if (Mutable && CFDataGetLength(Mutable) >= 1) {
        CFDataRef Copy = CFDataCreateCopy(kCFAllocatorDefault, Mutable);
      }
      else {
        CFDataRef Copy = 0;
      }
      CFRelease(Mutable);
    }
  }
  return Copy;
}

BOOL oobPairing_endpoint_destroy(uint64_t *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *a1;
  BOOL v3 = v2 != 0;
  if (v2)
  {
    if (*(void *)v2)
    {
      int Protocol = acc_endpoint_getProtocol(*(void *)v2);
      uint64_t v2 = *a1;
      if (Protocol == 8)
      {
        if (v2)
        {
          uint64_t v5 = *(void *)v2;
          if (*(void *)v2) {
            uint64_t v5 = *(void *)(v5 + 16);
          }
        }
        else
        {
          uint64_t v5 = 0;
        }
        platform_blePairing_accessoryDetached(v5, *(void *)(v2 + 8));
        uint64_t v2 = *a1;
      }
    }
    if (*(void *)(v2 + 32))
    {
      CFRelease(*(CFTypeRef *)(v2 + 32));
      *(void *)(*a1 + 32) = 0;
      uint64_t v2 = *a1;
    }
    if (!*(void *)(v2 + 8) || (CFRelease(*(CFTypeRef *)(v2 + 8)), *(void *)(*a1 + 8) = 0, (uint64_t v2 = *a1) != 0))
    {
      free((void *)v2);
      *a1 = 0;
    }
  }
  platform_blePairing_decrementUserCount();
  return v3;
}

BOOL oobPairing_endpoint_processIncomingData(uint64_t a1, CFDataRef theData)
{
  BOOL result = 0;
  if (a1)
  {
    if (theData)
    {
      BytePtr = CFDataGetBytePtr(theData);
      unint64_t Length = CFDataGetLength(theData);
      BOOL result = 0;
      if (BytePtr)
      {
        CFIndex v7 = Length - 4;
        if (Length >= 4)
        {
          unsigned int v8 = *((unsigned __int16 *)BytePtr + 1);
          int v9 = *(unsigned __int16 *)BytePtr;
          int v10 = *((_WORD *)BytePtr + 1);
          if (gLogObjects && gNumLogObjects >= 11)
          {
            CFNumberRef v11 = *(NSObject **)(gLogObjects + 80);
          }
          else
          {
            CFNumberRef v11 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            int v12 = *(unsigned __int8 *)(a1 + 16);
            int v13 = *(unsigned __int8 *)(a1 + 17);
            *(_DWORD *)buf = 67110402;
            int v32 = v9;
            __int16 v33 = 1024;
            *(_DWORD *)uint64_t v34 = v10;
            *(_WORD *)&v34[4] = 1024;
            *(_DWORD *)&v34[6] = v8 >> 15;
            __int16 v35 = 1024;
            int v36 = v12;
            __int16 v37 = 1024;
            int v38 = v13;
            __int16 v39 = 2112;
            CFDataRef v40 = theData;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "IncomingOOBPairingInfo/Data: messageID %d, pairingType %d, supports2way %d, supportedTypes[%d %d], dataIn %@", buf, 0x2Au);
          }
          if (*(unsigned __int8 *)(a1 + 16) != v8
            && *(unsigned __int8 *)(a1 + 17) != v8)
          {
            return 0;
          }
          int v14 = BytePtr + 4;
          if (v9 == 5)
          {
            CFDataRef v17 = CFDataCreate(kCFAllocatorDefault, v14, v7);
            if (gLogObjects && gNumLogObjects >= 11)
            {
              int v18 = *(NSObject **)(gLogObjects + 80);
            }
            else
            {
              int v18 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109378;
              int v32 = v10;
              __int16 v33 = 2112;
              *(void *)uint64_t v34 = v17;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "IncomingOOBPairingData: pairingType %d, payload %@", buf, 0x12u);
            }
            __int16 v22 = *(const void **)(a1 + 32);
            if (v22)
            {
              CFRelease(v22);
              *(void *)(a1 + 32) = 0;
            }
            *(void *)(a1 + 32) = CFDataCreateCopy(kCFAllocatorDefault, v17);
            if (*(void *)a1) {
              uint64_t v23 = *(void *)(*(void *)a1 + 16);
            }
            else {
              uint64_t v23 = 0;
            }
            uint64_t v26 = *(void *)(a1 + 8);
            int v27 = oobPairing_bleToOobPairingType(v10);
            platform_blePairing_accessoryPairingCFData(v23, v26, v27, (uint64_t)v17);
            if (v17) {
              CFRelease(v17);
            }
            if (*(void *)a1) {
              uint64_t v28 = *(void *)(*(void *)a1 + 16);
            }
            else {
              uint64_t v28 = 0;
            }
            platform_blePairing_finishedNegotiation(v28, *(void *)(a1 + 8));
            if (gLogObjects && gNumLogObjects >= 14)
            {
              uint64_t v29 = *(NSObject **)(gLogObjects + 104);
            }
            else
            {
              uint64_t v29 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
              oobPairing_endpoint_processIncomingData_cold_4(v29);
            }
            acc_manager_checkForWirelessCTA();
            return 1;
          }
          if (v9 == 4)
          {
            values = CFDataCreate(kCFAllocatorDefault, v14, v7);
            CFArrayRef v15 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
            if (gLogObjects && gNumLogObjects >= 11)
            {
              uint64_t v16 = *(NSObject **)(gLogObjects + 80);
            }
            else
            {
              uint64_t v16 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109378;
              int v32 = v10;
              __int16 v33 = 2112;
              *(void *)uint64_t v34 = values;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "IncomingOOBPairingInfo: pairingType %d, payload %@", buf, 0x12u);
            }
            int v20 = *(const void **)(a1 + 24);
            if (v20)
            {
              CFRelease(v20);
              *(void *)(a1 + 24) = 0;
            }
            *(void *)(a1 + 24) = CFDataCreateCopy(kCFAllocatorDefault, (CFDataRef)values);
            acc_connection_setProperty(**(void **)a1, kCFACCProperties_Connection_AWC_OOBPairingInfo, (const __CFNull *)values);
            if (*(void *)a1) {
              uint64_t v21 = *(void *)(*(void *)a1 + 16);
            }
            else {
              uint64_t v21 = 0;
            }
            uint64_t v24 = *(void *)(a1 + 8);
            int v25 = oobPairing_bleToOobPairingType(v10);
            platform_blePairing_accessoryPairingInfo(v21, v24, v25, (uint64_t)v15);
            if (values)
            {
              CFRelease(values);
              values = 0;
            }
            if (v15) {
              CFRelease(v15);
            }
            return 1;
          }
          if (gLogObjects && gNumLogObjects >= 11)
          {
            __int16 v19 = *(NSObject **)(gLogObjects + 80);
          }
          else
          {
            __int16 v19 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          BOOL result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
          if (result)
          {
            oobPairing_endpoint_processIncomingData_cold_1(v9, v19);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

BOOL oobPairing_endpoint_sendOutgoingData(uint64_t a1, unsigned int a2, int a3, const UInt8 *a4, unsigned int a5)
{
  if (a1)
  {
    uint64_t v10 = *(void *)a1;
    if (gLogObjects) {
      BOOL v11 = gNumLogObjects < 11;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      int v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      int v12 = *(NSObject **)(gLogObjects + 80);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (v10) {
        CFStringRef v13 = *(const __CFString **)(v10 + 16);
      }
      else {
        CFStringRef v13 = @"nil";
      }
      *(_DWORD *)buf = 138413314;
      CFStringRef v25 = v13;
      __int16 v26 = 1024;
      unsigned int v27 = a2;
      __int16 v28 = 1024;
      int v29 = a3;
      __int16 v30 = 1024;
      unsigned int v31 = a5;
      __int16 v32 = 1024;
      BOOL v33 = a2 < 2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "oobPairing_endpoint_sendOutgoingData: endpointUUID %@, messageID %d, pairingType %d, dataOutLen %d, startOrStopType %d", buf, 0x24u);
    }
    BOOL v15 = a2 < 2 || a4 != 0;
    if (a2 <= 3
      && v15
      && (a2 > 1
       || *(unsigned __int8 *)(a1 + 16) == a3
       || *(unsigned __int8 *)(a1 + 17) == a3))
    {
      *(_WORD *)bytes = a2;
      CFIndex v16 = a5;
      CFMutableStringRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, a5 + 4);
      CFDataAppendBytes(Mutable, bytes, 2);
      *(_WORD *)bytes = a3;
      CFDataAppendBytes(Mutable, bytes, 2);
      if (a4) {
        CFDataAppendBytes(Mutable, a4, v16);
      }
      char v18 = acc_endpoint_sendOutgoingData(*(void *)a1, Mutable);
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v18) {
        return 1;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  BOOL result = acc_policies_shouldFailAuthOnOOBPairingFailure(v10);
  if (result)
  {
    if (gLogObjects) {
      BOOL v20 = gNumLogObjects < 11;
    }
    else {
      BOOL v20 = 1;
    }
    if (v20)
    {
      uint64_t v21 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v21 = *(NSObject **)(gLogObjects + 80);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = *(_DWORD *)(*(void *)a1 + 24);
      *(_DWORD *)buf = 67109120;
      LODWORD(v25) = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Failed sendOutgoingData for OOBPairing for transportTpe %{coreacc:ACCEndpoint_TransportType_t}d, fail auth", buf, 8u);
    }
    acc_connection_setAuthStatus(**(void **)a1, 2, 1);
    return 0;
  }
  return result;
}

CFDataRef oobPairing_endpoint_copyCachedOOBPairingInfo(uint64_t a1)
{
  if (a1 && (CFDataRef v1 = *(const __CFData **)(a1 + 24)) != 0) {
    return CFDataCreateCopy(kCFAllocatorDefault, v1);
  }
  else {
    return 0;
  }
}

CFDataRef oobPairing_endpoint_copyCachedOOBPairingData(uint64_t a1)
{
  if (a1 && (CFDataRef v1 = *(const __CFData **)(a1 + 32)) != 0) {
    return CFDataCreateCopy(kCFAllocatorDefault, v1);
  }
  else {
    return 0;
  }
}

uint64_t accFeatureHandlers_invokeHandler(const void *a1, int a2, uint64_t a3)
{
  if (a1)
  {
    CFDataRef v4 = a1;
    int v6 = -1431655766;
    int v5 = a2;
    uint64_t v7 = a3;
    unint64_t v8 = 0xAAAAAAAAAAAAAA00;
    LODWORD(result) = acc_manager_callbackForEndpoint(a1, (void (*)(uint64_t, uint64_t))_invokeFeatureHandlerIterator, (uint64_t)&v4, 0);
  }
  else
  {
    CFDataRef v4 = 0;
    int v6 = -1431655766;
    int v5 = a2;
    uint64_t v7 = a3;
    unint64_t v8 = 0xAAAAAAAAAAAAAA00;
    LODWORD(result) = acc_manager_iterateAllEndpoints((unsigned int (*)(void, uint64_t))_invokeFeatureHandlerIterator, (uint64_t)&v4, 0);
  }
  if ((_BYTE)v8) {
    return result;
  }
  else {
    return 0;
  }
}

BOOL _invokeFeatureHandlerIterator(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a2)
  {
    if (a1 && ((int v5 = *(_DWORD *)(a1 + 28), v5 != 15) ? (v6 = v5 == 4) : (v6 = 1), v6))
    {
      char v7 = _invokeFeatureHandler(a1, *(_DWORD *)(a2 + 8), *(void *)(a2 + 16));
      if ((v7 & 1) == 0)
      {
        if (gLogObjects && gNumLogObjects >= 15)
        {
          unint64_t v8 = *(NSObject **)(gLogObjects + 112);
        }
        else
        {
          unint64_t v8 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          int v23 = *(_DWORD *)(a2 + 8);
          int v24 = *(_DWORD *)(a1 + 28);
          uint64_t v25 = *(void *)(a1 + 16);
          int v26 = 67109634;
          int v27 = v23;
          __int16 v28 = 1024;
          int v29 = v24;
          __int16 v30 = 2112;
          uint64_t v31 = v25;
          _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "invokeHandler returned false (handlerType: %d) for %{coreacc:ACCEndpoint_Protocol_t}d endpoint %@!", (uint8_t *)&v26, 0x18u);
        }
      }
      if (*(unsigned char *)(a2 + 24)) {
        char v22 = v7;
      }
      else {
        char v22 = 0;
      }
      *(unsigned char *)(a2 + 24) = v22;
    }
    else
    {
      if (gLogObjects) {
        BOOL v11 = gNumLogObjects < 15;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {
        char v18 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        char v18 = *(NSObject **)(gLogObjects + 112);
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
        _invokeFeatureHandlerIterator_cold_1(a2, a1, v18);
      }
    }
    return 1;
  }
  if (CFStringCompare(*(CFStringRef *)a2, *(CFStringRef *)(a1 + 16), 0))
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 15;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      int v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      int v12 = *(NSObject **)(gLogObjects + 112);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = *(_DWORD *)(a2 + 8);
      int v14 = *(_DWORD *)(a1 + 28);
      uint64_t v15 = *(void *)(a1 + 16);
      CFStringRef v16 = *(CFStringRef *)a2;
      int v26 = 67109890;
      int v27 = v13;
      __int16 v28 = 1024;
      int v29 = v14;
      __int16 v30 = 2112;
      uint64_t v31 = v15;
      __int16 v32 = 2112;
      CFStringRef v33 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Skipping invokeHandler (handlerType: %d) for %{coreacc:ACCEndpoint_Protocol_t}d endpoint %@ != %@ !!!", (uint8_t *)&v26, 0x22u);
    }
    return 1;
  }
  char v9 = _invokeFeatureHandler(a1, *(_DWORD *)(a2 + 8), *(void *)(a2 + 16));
  *(unsigned char *)(a2 + 24) = v9;
  if (v9) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 15)
  {
    CFDataRef v17 = *(NSObject **)(gLogObjects + 112);
  }
  else
  {
    CFDataRef v17 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  BOOL result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v19 = *(_DWORD *)(a2 + 8);
    int v20 = *(_DWORD *)(a1 + 28);
    uint64_t v21 = *(void *)(a1 + 16);
    int v26 = 67109634;
    int v27 = v19;
    __int16 v28 = 1024;
    int v29 = v20;
    __int16 v30 = 2112;
    uint64_t v31 = v21;
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "invokeHandler returned false (handlerType: %d) for %{coreacc:ACCEndpoint_Protocol_t}d endpoint %@!", (uint8_t *)&v26, 0x18u);
    return 0;
  }
  return result;
}

uint64_t _invokeFeatureHandler(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v27 = 0;
  __int16 v28 = &v27;
  uint64_t v29 = 0x2000000000;
  char v30 = 0;
  if (!a1) {
    goto LABEL_14;
  }
  int v5 = *(_DWORD *)(a1 + 28) - 4;
  if (v5 > 0xB) {
    goto LABEL_12;
  }
  if (((0x89Fu >> v5) & 1) == 0) {
    goto LABEL_12;
  }
  BOOL v6 = (unsigned __int16 *)*(&off_100215E50 + v5);
  if (*v6 > a2) {
    goto LABEL_12;
  }
  unsigned int v7 = *(_DWORD *)*(&off_100215EB0 + v5) - 1;
  if (v6[8 * v7] < a2) {
    goto LABEL_12;
  }
  unsigned int v8 = 0;
  while (1)
  {
    uint64_t v9 = (v8 + v7) >> 1;
    unsigned int v10 = v6[8 * v9];
    if (v10 <= a2) {
      break;
    }
    unsigned int v7 = v9 - 1;
LABEL_11:
    if (v8 > v7) {
      goto LABEL_12;
    }
  }
  if (v10 < a2)
  {
    unsigned int v8 = v9 + 1;
    goto LABEL_11;
  }
  CFStringRef v16 = *(uint64_t (**)(void, uint64_t))&v6[8 * v9 + 4];
  if (!v16)
  {
LABEL_12:
    char v30 = 1;
    BOOL v11 = logObjectForModule_2();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *(_DWORD *)(a1 + 28);
      uint64_t v15 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 67109634;
      unsigned int v32 = a2;
      __int16 v33 = 1024;
      int v34 = v14;
      __int16 v35 = 2112;
      uint64_t v36 = v15;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "handlerType %d not found for %{coreacc:ACCEndpoint_Protocol_t}d! (endpoint %@)", buf, 0x18u);
    }
    goto LABEL_14;
  }
  switch(*(_DWORD *)(a1 + 28))
  {
    case 4:
      uint64_t v18 = *(void *)(a1 + 56);
      if (v18)
      {
        uint64_t v19 = *(void *)(v18 + 32);
        if (v19)
        {
          if (!*(unsigned char *)(v19 + 44))
          {
            int v20 = *(NSObject **)(v18 + 24);
            v26[0] = _NSConcreteStackBlock;
            v26[1] = 0x40000000;
            v26[2] = ___invokeFeatureHandler_block_invoke;
            v26[3] = &unk_100215DE0;
            v26[4] = &v27;
            v26[5] = v16;
            v26[6] = v18;
            v26[7] = a3;
            uint64_t v21 = v26;
            goto LABEL_28;
          }
        }
      }
      break;
    case 5:
    case 6:
    case 7:
    case 8:
      char v17 = v16(*(void *)(a1 + 56), a3);
      *((unsigned char *)v28 + 24) = v17;
      break;
    case 0xB:
      uint64_t v22 = *(void *)(a1 + 56);
      if (v22)
      {
        int v20 = *(NSObject **)(v22 + 8);
        if (v20)
        {
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 0x40000000;
          v25[2] = ___invokeFeatureHandler_block_invoke_2;
          v25[3] = &unk_100215E08;
          v25[4] = &v27;
          v25[5] = v16;
          v25[6] = a1;
          v25[7] = a3;
          uint64_t v21 = v25;
          goto LABEL_28;
        }
      }
      break;
    case 0xF:
      uint64_t v23 = *(void *)(a1 + 56);
      if (v23)
      {
        int v20 = *(NSObject **)(v23 + 24);
        if (v20)
        {
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 0x40000000;
          v24[2] = ___invokeFeatureHandler_block_invoke_3;
          v24[3] = &unk_100215E30;
          v24[4] = &v27;
          v24[5] = v16;
          v24[6] = a1;
          v24[7] = a3;
          uint64_t v21 = v24;
LABEL_28:
          dispatch_sync(v20, v21);
        }
      }
      break;
    default:
      break;
  }
LABEL_14:
  uint64_t v12 = *((unsigned __int8 *)v28 + 24);
  _Block_object_dispose(&v27, 8);
  return v12;
}

void *logObjectForModule_2()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 15;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    return *(void **)(gLogObjects + 112);
  }
  CFDataRef v1 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v1;
}

uint64_t ___invokeFeatureHandler_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(a1 + 40))(*(void *)(a1 + 48), *(void *)(a1 + 56));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___invokeFeatureHandler_block_invoke_2(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(a1 + 40))(*(void *)(*(void *)(a1 + 48) + 56), *(void *)(a1 + 56));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___invokeFeatureHandler_block_invoke_3(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(a1 + 40))(*(void *)(*(void *)(a1 + 48) + 56), *(void *)(a1 + 56));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t mfi4Auth_protocol_messageHandler_receiveIncomingData(uint64_t a1, const void *a2)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "mfi4Auth_protocol_messageHandler_receiveIncomingData", buf, 2u);
  }
  uint64_t v54 = 0;
  unsigned __int8 v53 = 0;
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      BOOL v6 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      BOOL v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_messageHandler_receiveIncomingData_cold_7(v6, v18, v19, v20, v21, v22, v23, v24);
    }
    goto LABEL_27;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v5 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      int v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_messageHandler_receiveIncomingData_cold_17(v5, v11, v12, v13, v14, v15, v16, v17);
    }
LABEL_27:
    uint64_t v25 = 0;
    goto LABEL_28;
  }
  if (!a2)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      __int16 v37 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      __int16 v37 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_messageHandler_receiveIncomingData_cold_9();
    }
    goto LABEL_27;
  }
  CFRetain(a2);
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v51[0] = v7;
  v51[1] = v7;
  v51[2] = v7;
  v51[3] = v7;
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = *(unsigned __int16 *)(a1 + 200);
  uint64_t v9 = mfi4Auth_util_parseMessage(*(void *)(a1 + 8), (uint64_t)v51, (CFDataRef)a2, *(_WORD *)(a1 + 200));
  if (v9)
  {
    uint64_t v10 = v9;
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v38 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      int v38 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v56) = v8;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "mfi4Auth_protocol_messageHandler_receiveIncomingData: Found no message starting with: %x", buf, 8u);
    }
    uint64_t v39 = mfi4Auth_util_parseMessage(*(void *)(a1 + 8), (uint64_t)v51, (CFDataRef)a2, 0);
    if (!v39)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        CFArrayRef v43 = *(NSObject **)(gLogObjects + 440);
      }
      else
      {
        CFArrayRef v43 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_messageHandler_receiveIncomingData_cold_11(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      goto LABEL_27;
    }
    uint64_t v10 = v39;
    uint64_t v8 = 0;
  }
  if (mfi4Auth_util_packetLoggingEncryptedData()) {
    mfi4Auth_util_packetLogging(*(const void **)a1, v8, v10, 1, 1);
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    CFDataRef v40 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    CFDataRef v40 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "mfi4Auth_protocol_messageHandler_receiveIncomingData: Found message", buf, 2u);
  }
  if ((mfi4Auth_protocol_decryptIncomingData(a1, v8, v10) & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v42 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      int v42 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_messageHandler_receiveIncomingData_cold_13();
    }
    goto LABEL_27;
  }
  int v41 = 1;
  mfi4Auth_util_packetLogging(*(const void **)a1, v8, v10, 1, 0);
  if ((mfi4Auth_protocol_processIncomingMessage(a1, v8, v10, (uint64_t *)&v54) & 1) == 0) {
    int v41 = mfi4Auth_protocol_processIncomingMessageExtra(a1, v8, v10, (uint64_t *)&v54, &v53);
  }
  if (v41 && v54) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = mfi4Auth_protocol_processIncomingMessageRelay(a1, v8, v10, (uint64_t *)&v54, &v53);
  }
LABEL_28:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v26 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    int v26 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v56) = v25;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "receiveIncomingData: processIncomingData returned:%d", buf, 8u);
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v27 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    uint64_t v27 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v56) = v54 != 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "receiveIncomingData: outMessage:(%d)", buf, 8u);
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    __int16 v28 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    __int16 v28 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v56) = v53;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "receiveIncomingData: keepOpen:%d", buf, 8u);
  }
  if (v54) {
    int v29 = v25;
  }
  else {
    int v29 = 0;
  }
  if (v29 == 1)
  {
    EndpointWithUUID = (uint64_t *)acc_manager_getEndpointWithUUID(*(const void **)a1);
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v31 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      uint64_t v31 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v56 = (uint64_t)EndpointWithUUID;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "receiveIncomingData: pEndpoint:%p", buf, 0xCu);
    }
    if (EndpointWithUUID)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        unsigned int v32 = *(NSObject **)(gLogObjects + 440);
      }
      else
      {
        unsigned int v32 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        int v33 = *((_DWORD *)EndpointWithUUID + 7);
        *(_DWORD *)buf = 67109120;
        LODWORD(v56) = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "receiveIncomingData: protocol type:%d", buf, 8u);
      }
      uint64_t v34 = EndpointWithUUID[7];
      if (gLogObjects && gNumLogObjects >= 56)
      {
        __int16 v35 = *(NSObject **)(gLogObjects + 440);
      }
      else
      {
        __int16 v35 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v56 = v34;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "receiveIncomingData: pProtocolEndpoint:%p", buf, 0xCu);
      }
      mfi4Auth_endpoint_sendOutgoingData(v34, (uint64_t)v54);
    }
    if (v54)
    {
      free(v54);
      uint64_t v54 = 0;
    }
  }
  else
  {
    mfi4Auth_protocol_handleAuthSessionClose(a1, v53);
  }
  if (a2) {
    CFRelease(a2);
  }
  return v25;
}

uint64_t mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v5 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      int v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler_cold_1();
    }
    return 0;
  }
  if (!a3)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      BOOL v6 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      BOOL v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler_cold_3();
    }
    return 0;
  }
  if (a2 >= 3)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      long long v7 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      long long v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler_cold_5(a2, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }

  return mfi4Auth_protocol_setSecureTunnelDataReceiveTypeHandler(a1, a2, a3);
}

void mfi4Auth_protocol_messageHandler_handleOutgoingSecureTunnelDataForClient(uint64_t a1, uint64_t a2, const __CFData *a3)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    BOOL v6 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    BOOL v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v39 = 136315906;
    CFDataRef v40 = "mfi4Auth_protocol_messageHandler_handleOutgoingSecureTunnelDataForClient";
    __int16 v41 = 1024;
    BOOL v42 = a1 != 0;
    __int16 v43 = 1024;
    int v44 = a2;
    __int16 v45 = 2112;
    CFDataRef v46 = a3;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s: authSession(%d), secureTunnelType %d, dataOut %@", (uint8_t *)&v39, 0x22u);
    if (a1)
    {
LABEL_8:
      if (*(unsigned char *)(a1 + 30))
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          long long v7 = *(NSObject **)(gLogObjects + 440);
        }
        else
        {
          long long v7 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_messageHandler_handleOutgoingSecureTunnelDataForClient_cold_9(v7, v8, v9, v10, v11, v12, v13, v14);
        }
      }
      else if (a3)
      {
        if (a2 >= 3)
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v16 = *(NSObject **)(gLogObjects + 440);
          }
          else
          {
            uint64_t v16 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler_cold_5(a2, v16, v26, v27, v28, v29, v30, v31);
          }
        }
        else if ((a2 - 1) > 1u)
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v25 = *(NSObject **)(gLogObjects + 440);
          }
          else
          {
            uint64_t v25 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_messageHandler_handleOutgoingSecureTunnelDataForClient_cold_5(v25, v32, v33, v34, v35, v36, v37, v38);
          }
        }
        else
        {
          mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient(a1, a2, a3);
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v15 = *(NSObject **)(gLogObjects + 440);
        }
        else
        {
          uint64_t v15 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler_cold_3();
        }
      }
      return;
    }
  }
  else if (a1)
  {
    goto LABEL_8;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v17 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    uint64_t v17 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_protocol_messageHandler_handleOutgoingSecureTunnelDataForClient_cold_1(v17, v18, v19, v20, v21, v22, v23, v24);
  }
}

void OUTLINED_FUNCTION_5_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

BOOL mfi4Auth_endpoint_setAccessoryUserName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  char v15 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      BOOL v6 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      BOOL v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_setAccessoryUserName", buf, 2u);
    }
    long long v7 = *(NSObject **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 0x40000000;
    _DWORD v10[2] = __mfi4Auth_endpoint_setAccessoryUserName_block_invoke;
    v10[3] = &unk_100215F18;
    v10[6] = a1;
    v10[7] = a2;
    v10[4] = a3;
    v10[5] = &v12;
    dispatch_sync(v7, v10);
    BOOL v8 = *((unsigned char *)v13 + 24) != 0;
  }
  else
  {
    BOOL v8 = 0;
  }
  _Block_object_dispose(&v12, 8);
  return v8;
}

void *logObjectForModule_3()
{
  if (gLogObjects && gNumLogObjects >= 56) {
    return *(void **)(gLogObjects + 440);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void __mfi4Auth_endpoint_setAccessoryUserName_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanTrue);
    }
    mfi4Auth_protocol_convertUserAccessoryInfoToAction(*(void *)(*(void *)(a1 + 48) + 8), *(CFStringRef *)(a1 + 56));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 32) = 8;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 64) = _Block_copy(*(const void **)(a1 + 32));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    uint64_t v2 = logObjectForModule_3();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_setAccessoryUserName_block_invoke_cold_1();
    }
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

BOOL _mfi4Auth_endpoint_waitSessionClosed(uint64_t *a1)
{
  if (acc_endpoint_getTransportType(*a1) != 13) {
    return 1;
  }
  uint64_t v2 = (const void *)kCFACCProperties_Endpoint_NFC_RequestSessionOpen;
  BOOL v3 = acc_endpoint_copyProperty((pthread_mutex_t *)*a1, kCFACCProperties_Endpoint_NFC_RequestSessionOpen);
  if (v3)
  {
    BOOL v4 = v3;
    unsigned int v5 = 0;
    BOOL v6 = (const void *)kCFACCProperties_Endpoint_NFC_SessionOpen;
    while (1)
    {
      CFTypeID v7 = CFGetTypeID(v4);
      if (v7 != CFBooleanGetTypeID())
      {
        uint64_t v16 = logObjectForModule_3();
        BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        _mfi4Auth_endpoint_waitSessionClosed_cold_5();
        return 0;
      }
      if (v4 != (pthread_mutex_t *)kCFBooleanFalse)
      {
        uint64_t v17 = logObjectForModule_3();
        BOOL result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        _mfi4Auth_endpoint_waitSessionClosed_cold_4();
        return 0;
      }
      BOOL v8 = acc_endpoint_copyProperty((pthread_mutex_t *)*a1, v6);
      if (!v8)
      {
        uint64_t v18 = logObjectForModule_3();
        BOOL result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        _mfi4Auth_endpoint_waitSessionClosed_cold_2();
        return 0;
      }
      CFBooleanRef v9 = (const __CFBoolean *)v8;
      CFTypeID v10 = CFGetTypeID(v8);
      if (v10 != CFBooleanGetTypeID()) {
        break;
      }
      BOOL result = 1;
      if (v9 != kCFBooleanTrue || v5 > 4) {
        return result;
      }
      uint64_t v12 = gLogObjects;
      int v13 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v14 = *(NSObject **)(gLogObjects + 440);
      }
      else
      {
        uint64_t v14 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v21 = v12;
          __int16 v22 = 1024;
          int v23 = v13;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          uint64_t v14 = &_os_log_default;
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v21) = 20;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "waitSessionClosed: wait %d ms", buf, 8u);
      }
      usleep(0x4E20u);
      ++v5;
      BOOL v4 = acc_endpoint_copyProperty((pthread_mutex_t *)*a1, v2);
      if (!v4) {
        goto LABEL_21;
      }
    }
    uint64_t v19 = logObjectForModule_3();
    BOOL result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _mfi4Auth_endpoint_waitSessionClosed_cold_3();
    return 0;
  }
LABEL_21:
  char v15 = logObjectForModule_3();
  BOOL result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _mfi4Auth_endpoint_waitSessionClosed_cold_1();
    return 0;
  }
  return result;
}

BOOL mfi4Auth_endpoint_getAccessoryUserName(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  char v13 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      BOOL v4 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      BOOL v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_getAccessoryUserName", buf, 2u);
    }
    unsigned int v5 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __mfi4Auth_endpoint_getAccessoryUserName_block_invoke;
    block[3] = &unk_100215F40;
    block[5] = &v10;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
    BOOL v6 = *((unsigned char *)v11 + 24) != 0;
  }
  else
  {
    BOOL v6 = 0;
  }
  _Block_object_dispose(&v10, 8);
  return v6;
}

void __mfi4Auth_endpoint_getAccessoryUserName_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanTrue);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 36) = 9;
    uint64_t v2 = malloc_type_malloc(0x12uLL, 0x1000040BDFB0063uLL);
    uint64_t v3 = 0;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = v2;
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v5 = *(void *)(v4 + 40);
    do
    {
      *(_WORD *)(v5 + 2 * v3) = v3 + 21250;
      ++v3;
    }
    while (v3 != 9);
    *(_DWORD *)(v4 + 32) = 9;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 64) = _Block_copy(*(const void **)(a1 + 32));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    BOOL v6 = logObjectForModule_3();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_getAccessoryUserName_block_invoke_cold_1();
    }
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

BOOL mfi4Auth_endpoint_provisionPairing(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  char v13 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v4 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      uint64_t v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_provisionPairing", buf, 2u);
    }
    uint64_t v5 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __mfi4Auth_endpoint_provisionPairing_block_invoke;
    block[3] = &unk_100215F68;
    block[5] = &v10;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
    BOOL v6 = *((unsigned char *)v11 + 24) != 0;
  }
  else
  {
    BOOL v6 = 0;
  }
  _Block_object_dispose(&v10, 8);
  return v6;
}

void __mfi4Auth_endpoint_provisionPairing_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanTrue);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 32) = 4;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 64) = _Block_copy(*(const void **)(a1 + 32));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    uint64_t v2 = logObjectForModule_3();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_provisionPairing_block_invoke_cold_1();
    }
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

uint64_t mfi4Auth_endpoint_erasePairing(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v4 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      uint64_t v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_erasePairing", buf, 2u);
    }
    uint64_t v5 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __mfi4Auth_endpoint_erasePairing_block_invoke;
    block[3] = &unk_100215F90;
    block[5] = &v11;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
  }
  else
  {
    BOOL v8 = logObjectForModule_3();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_erasePairing: !pProtocolEndpoint", buf, 2u);
    }
  }
  uint64_t v6 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v6;
}

void __mfi4Auth_endpoint_erasePairing_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanTrue);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 32) = 5;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 64) = _Block_copy(*(const void **)(a1 + 32));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    uint64_t v2 = logObjectForModule_3();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_erasePairing_block_invoke_cold_1();
    }
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

uint64_t mfi4Auth_endpoint_setPublicNvmKeyValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  BOOL v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  uint64_t v3 = *(NSObject **)(a1 + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = __mfi4Auth_endpoint_setPublicNvmKeyValues_block_invoke;
  v6[3] = &unk_100215FB8;
  v6[6] = a1;
  v6[7] = a2;
  v6[4] = a3;
  v6[5] = &v7;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t __mfi4Auth_endpoint_setPublicNvmKeyValues_block_invoke(uint64_t a1)
{
  uint64_t result = _mfi4Auth_endpoint_setNvmKeyValues(*(void *)(a1 + 48), *(const __CFDictionary **)(a1 + 56), *(const void **)(a1 + 32), 1);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v3();
  }
  return result;
}

BOOL _mfi4Auth_endpoint_setNvmKeyValues(BOOL result, const __CFDictionary *a2, const void *a3, int a4)
{
  if (!result) {
    return result;
  }
  uint64_t v7 = result;
  if (_mfi4Auth_endpoint_waitSessionClosed((uint64_t *)result))
  {
    unsigned __int8 Count = CFDictionaryGetCount(a2);
    uint64_t v9 = Count;
    char v10 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
    uint64_t v11 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    uint64_t result = 0;
    if (!v10) {
      return result;
    }
    if (!v11) {
      return result;
    }
    CFDictionaryGetKeysAndValues(a2, v10, v11);
    uint64_t v12 = (unsigned __int16 *)malloc_type_calloc(Count, 2uLL, 0x1000040BDFB0063uLL);
    uint64_t v13 = malloc_type_calloc(Count, 8uLL, 0x10040436913F5uLL);
    char v14 = malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
    uint64_t result = 0;
    unsigned __int8 v53 = v12;
    if (!v12 || !v13 || !v14) {
      return result;
    }
    unsigned __int8 v49 = Count;
    uint64_t v50 = a3;
    int v51 = v14;
    unint64_t v52 = v13;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      char v15 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      char v15 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_setNvmKeyValues", buf, 2u);
    }
    if (!Count)
    {
      int v43 = 0;
LABEL_58:
      uint64_t v44 = *(void *)(v7 + 8);
      *(_DWORD *)(v44 + 32) = 6;
      *(_DWORD *)(v44 + 36) = v43;
      *(void *)(v44 + 40) = v53;
      *(void *)(v44 + 48) = v52;
      *(void *)(v44 + 56) = v51;
      *(void *)(*(void *)(v7 + 8) + 64) = _Block_copy(v50);
      if (acc_endpoint_getTransportType(*(void *)v7) == 13) {
        acc_endpoint_setProperty(*(pthread_mutex_t **)v7, kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanTrue);
      }
      return 1;
    }
    uint64_t v48 = v7;
    uint64_t v17 = v51;
    uint64_t v16 = (UInt8 **)v13;
    uint64_t v18 = v53;
    while (1)
    {
      unsigned __int16 valuePtr = 0;
      CFTypeID v19 = CFGetTypeID(*v10);
      CFTypeID TypeID = CFStringGetTypeID();
      CFStringRef v21 = (const __CFString *)*v10;
      if (v19 == TypeID)
      {
        unsigned __int16 valuePtr = CFStringGetIntValue(v21);
      }
      else
      {
        CFTypeID v22 = CFGetTypeID(v21);
        if (v22 != CFNumberGetTypeID())
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            __int16 v45 = *(NSObject **)(gLogObjects + 440);
          }
          else
          {
            __int16 v45 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            CFDataRef v46 = "mfi4Auth_endpoint_setNvmKeyValues: bad key type";
LABEL_74:
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, v46, buf, 2u);
          }
          return 0;
        }
        CFNumberGetValue((CFNumberRef)*v10, kCFNumberSInt16Type, &valuePtr);
      }
      uint64_t v23 = gLogObjects;
      int v24 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v25 = *(NSObject **)(gLogObjects + 440);
      }
      else
      {
        uint64_t v25 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&buf[12] = 1024;
          int v56 = v24;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = a4;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = valuePtr;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_setNvmKeyValues: public:%d, 0x%x", buf, 0xEu);
      }
      if (a4)
      {
        if (valuePtr - 21328 < 0xFFFFFFB1) {
          return 0;
        }
      }
      else if (valuePtr - 21504 < 0xFFFFFF50)
      {
        return 0;
      }
      *uint64_t v18 = valuePtr;
      CFTypeID v26 = CFGetTypeID(*v11);
      if (v26 == CFStringGetTypeID())
      {
        uint64_t v27 = gLogObjects;
        int v28 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v29 = *(NSObject **)(gLogObjects + 440);
        }
        else
        {
          uint64_t v29 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v27;
            *(_WORD *)&buf[12] = 1024;
            int v56 = v28;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_setNvmKeyValues: string value", buf, 2u);
        }
        CFIndex Length = CFStringGetLength((CFStringRef)*v11);
        CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
        *(void *)buf = 0;
        int v39 = (UInt8 *)malloc_type_calloc(MaximumSizeForEncoding + 1, 1uLL, 0x5223911CuLL);
        *uint64_t v16 = v39;
        v57.location = 0;
        v57.length = Length;
        CFStringGetBytes((CFStringRef)*v11, v57, 0x8000100u, 0, 0, v39, MaximumSizeForEncoding, (CFIndex *)buf);
        *uint64_t v17 = *(_DWORD *)buf + 1;
      }
      else
      {
        CFTypeID v30 = CFGetTypeID(*v11);
        CFTypeID v31 = CFDataGetTypeID();
        uint64_t v32 = gLogObjects;
        int v33 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v34 = gNumLogObjects <= 55;
        }
        else {
          BOOL v34 = 1;
        }
        int v35 = !v34;
        if (v30 != v31)
        {
          if (v35)
          {
            __int16 v45 = *(NSObject **)(gLogObjects + 440);
          }
          else
          {
            __int16 v45 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            CFDataRef v46 = "mfi4Auth_endpoint_setNvmKeyValues: bad value type";
            goto LABEL_74;
          }
          return 0;
        }
        if (v35)
        {
          uint64_t v36 = *(NSObject **)(gLogObjects + 440);
        }
        else
        {
          uint64_t v36 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v32;
            *(_WORD *)&buf[12] = 1024;
            int v56 = v33;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_setNvmKeyValues: data value", buf, 2u);
        }
        size_t v40 = (int)CFDataGetLength((CFDataRef)*v11);
        __int16 v41 = (UInt8 *)malloc_type_calloc(v40, 1uLL, 0xB1116A01uLL);
        *uint64_t v16 = v41;
        BytePtr = CFDataGetBytePtr((CFDataRef)*v11);
        memcpy(v41, BytePtr, v40);
        *uint64_t v17 = v40;
      }
      ++v18;
      ++v16;
      ++v17;
      ++v11;
      ++v10;
      if (!--v9)
      {
        int v43 = v49;
        uint64_t v7 = v48;
        goto LABEL_58;
      }
    }
  }
  uint64_t v47 = logObjectForModule_3();
  uint64_t result = os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _mfi4Auth_endpoint_setNvmKeyValues_cold_4();
    return 0;
  }
  return result;
}

uint64_t mfi4Auth_endpoint_getPublicNvmKeyValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  BOOL v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  if (a1)
  {
    uint64_t v3 = *(NSObject **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    v6[2] = __mfi4Auth_endpoint_getPublicNvmKeyValues_block_invoke;
    v6[3] = &unk_100215FE0;
    v6[6] = a1;
    v6[7] = a2;
    v6[4] = a3;
    v6[5] = &v7;
    dispatch_sync(v3, v6);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(a3 + 16))(a3, 0, 0);
  }
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void __mfi4Auth_endpoint_getPublicNvmKeyValues_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    unsigned __int8 Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
    uint64_t v3 = Count;
    uint64_t v4 = malloc_type_calloc(Count, 2uLL, 0x1000040BDFB0063uLL);
    if (v4)
    {
      uint64_t v5 = v4;
      if (Count)
      {
        int v14 = Count;
        CFIndex v6 = 0;
        while (1)
        {
          unsigned __int16 valuePtr = -21846;
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v6);
          CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &valuePtr);
          uint64_t v8 = gLogObjects;
          int v9 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            char v10 = *(NSObject **)(gLogObjects + 440);
          }
          else
          {
            char v10 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)uint64_t v17 = v8;
              *(_WORD *)&v17[8] = 1024;
              v18[0] = v9;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              char v10 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)uint64_t v17 = v6;
            *(_WORD *)&v17[4] = 1024;
            *(_DWORD *)&v17[6] = v14;
            LOWORD(v18[0]) = 1024;
            *(_DWORD *)((char *)v18 + 2) = valuePtr;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_getPublicNvmKeyValues: [%d / %d] 0x%x", buf, 0x14u);
          }
          if (valuePtr - 21249 >= 0x4F) {
            break;
          }
          v5[v6++] = valuePtr;
          if (v3 == v6)
          {
            int v11 = v14;
            goto LABEL_16;
          }
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
        free(v5);
      }
      else
      {
        int v11 = 0;
LABEL_16:
        uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
        *(_DWORD *)(v12 + 32) = 7;
        *(_DWORD *)(v12 + 36) = v11;
        *(void *)(v12 + 40) = v5;
        *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 64) = _Block_copy(*(const void **)(a1 + 32));
        if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
          acc_endpoint_setProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanTrue);
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      }
    }
    else
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    uint64_t v13 = logObjectForModule_3();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_getPublicNvmKeyValues_block_invoke_cold_1();
    }
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

BOOL mfi4Auth_endpoint_getPrivateNvmKeyValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  if (a1)
  {
    uint64_t v3 = *(NSObject **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    v6[2] = __mfi4Auth_endpoint_getPrivateNvmKeyValues_block_invoke;
    v6[3] = &unk_100216008;
    v6[6] = a1;
    v6[7] = a2;
    v6[4] = a3;
    v6[5] = &v7;
    dispatch_sync(v3, v6);
    BOOL v4 = *((unsigned char *)v8 + 24) != 0;
  }
  else
  {
    BOOL v4 = 0;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

void __mfi4Auth_endpoint_getPrivateNvmKeyValues_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    unsigned __int8 Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
    uint64_t v3 = malloc_type_calloc(Count, 2uLL, 0x1000040BDFB0063uLL);
    if (!v3)
    {
LABEL_15:
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      goto LABEL_12;
    }
    BOOL v4 = v3;
    if (Count)
    {
      CFIndex v5 = 0;
      while (1)
      {
        unsigned __int16 valuePtr = -21846;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v5);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &valuePtr);
        if (valuePtr - 21328 > 0xAF) {
          goto LABEL_15;
        }
        v4[v5++] = valuePtr;
        if (Count == v5)
        {
          int v7 = Count;
          goto LABEL_9;
        }
      }
    }
    int v7 = 0;
LABEL_9:
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    *(_DWORD *)(v8 + 32) = 7;
    *(_DWORD *)(v8 + 36) = v7;
    *(void *)(v8 + 40) = v4;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 64) = _Block_copy(*(const void **)(a1 + 32));
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanTrue);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    uint64_t v9 = logObjectForModule_3();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_getPrivateNvmKeyValues_block_invoke_cold_1();
    }
  }
LABEL_12:
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

uint64_t mfi4Auth_endpoint_setPrivateNvmKeyValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  uint64_t v3 = *(NSObject **)(a1 + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = __mfi4Auth_endpoint_setPrivateNvmKeyValues_block_invoke;
  v6[3] = &unk_100216030;
  v6[6] = a1;
  v6[7] = a2;
  v6[4] = a3;
  v6[5] = &v7;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t __mfi4Auth_endpoint_setPrivateNvmKeyValues_block_invoke(uint64_t a1)
{
  uint64_t result = _mfi4Auth_endpoint_setNvmKeyValues(*(void *)(a1 + 48), *(const __CFDictionary **)(a1 + 56), *(const void **)(a1 + 32), 0);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v3();
  }
  return result;
}

uint64_t mfi4Auth_endpoint_beginVendorKeyErase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v4 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      uint64_t v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_beginVendorKeyErase", buf, 2u);
    }
    CFIndex v5 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __mfi4Auth_endpoint_beginVendorKeyErase_block_invoke;
    block[3] = &unk_100216058;
    block[5] = &v11;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
  }
  else
  {
    uint64_t v8 = logObjectForModule_3();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_beginVendorKeyErase: !pProtocolEndpoint", buf, 2u);
    }
  }
  uint64_t v6 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v6;
}

void __mfi4Auth_endpoint_beginVendorKeyErase_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanTrue);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 32) = 10;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 64) = _Block_copy(*(const void **)(a1 + 32));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    uint64_t v2 = logObjectForModule_3();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_beginVendorKeyErase_block_invoke_cold_1();
    }
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

uint64_t mfi4Auth_endpoint_continueVendorKeyErase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  char v19 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v9 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      uint64_t v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_continueVendorKeyErase", buf, 2u);
    }
    char v10 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __mfi4Auth_endpoint_continueVendorKeyErase_block_invoke;
    block[3] = &unk_100216080;
    block[4] = a5;
    block[5] = &v16;
    void block[6] = a1;
    void block[7] = a2;
    block[8] = a3;
    dispatch_sync(v10, block);
  }
  else
  {
    uint64_t v13 = logObjectForModule_3();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_continueVendorKeyErase: !pProtocolEndpoint", buf, 2u);
    }
  }
  uint64_t v11 = *((unsigned __int8 *)v17 + 24);
  _Block_object_dispose(&v16, 8);
  return v11;
}

void __mfi4Auth_endpoint_continueVendorKeyErase_block_invoke(uint64_t a1)
{
  if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) != 13) {
    goto LABEL_6;
  }
  uint64_t v2 = acc_endpoint_copyProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_SessionOpen);
  if (!v2)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    CFIndex v5 = logObjectForModule_3();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    __int16 v10 = 0;
    uint64_t v6 = "continueVendorKeyErase: !propertyValue";
    uint64_t v7 = (uint8_t *)&v10;
    goto LABEL_16;
  }
  CFBooleanRef v3 = (const __CFBoolean *)v2;
  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 != CFBooleanGetTypeID())
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    CFIndex v5 = logObjectForModule_3();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    __int16 v9 = 0;
    uint64_t v6 = "continueVendorKeyErase: !CFBooleanGetTypeID";
    uint64_t v7 = (uint8_t *)&v9;
    goto LABEL_16;
  }
  if (v3 == kCFBooleanTrue)
  {
    dispatch_source_set_timer(*(dispatch_source_t *)(*(void *)(a1 + 48) + 32), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
LABEL_6:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 32) = 11;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 64) = _Block_copy(*(const void **)(a1 + 32));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = _mfi4Auth_endpoint_requestNvmErasePublicKey(*(void *)(a1 + 48), 0x5200u, *(const __CFData **)(a1 + 56), *(const __CFData **)(a1 + 64));
    goto LABEL_7;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  CFIndex v5 = logObjectForModule_3();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v8 = 0;
    uint64_t v6 = "continueVendorKeyErase: !kCFBooleanTrue";
    uint64_t v7 = (uint8_t *)&v8;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
  }
LABEL_7:
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
  }
}

uint64_t _mfi4Auth_endpoint_requestNvmErasePublicKey(uint64_t a1, unsigned int a2, const __CFData *a3, const __CFData *a4)
{
  uint64_t v4 = a1;
  CFStringRef v21 = 0;
  if (!a1)
  {
    uint64_t v16 = logObjectForModule_3();
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      return v4;
    }
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "!pProtocolEndpoint", v20, 2u);
    goto LABEL_16;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    __int16 v8 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    __int16 v8 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "endpoint_requestNvmErasePublicKey", buf, 2u);
  }
  uint64_t v9 = *(void *)v4;
  if (!*(void *)v4 || (__int16 v10 = *(const void **)(v9 + 16)) == 0)
  {
    uint64_t v12 = logObjectForModule_3();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_endpoint_requestNvmErasePublicKey_cold_1();
    }
LABEL_16:
    __int16 v10 = 0;
    goto LABEL_17;
  }
  CFRetain(*(CFTypeRef *)(v9 + 16));
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v11 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    uint64_t v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "endpoint_requestNvmErasePublicKey: block", v18, 2u);
  }
  if (mfi4Auth_protocol_requestNvmErasePublicKey(*(void *)(v4 + 8), a3, a4, a2, (uint64_t *)&v21))
  {
    uint64_t v17 = logObjectForModule_3();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_endpoint_requestNvmErasePublicKey_cold_3();
    }
  }
  else
  {
    EndpointWithUUID = acc_manager_getEndpointWithUUID(v10);
    if (EndpointWithUUID && EndpointWithUUID[7] == 14 && *((void *)EndpointWithUUID + 7))
    {
      mfi4Auth_endpoint_sendOutgoingData(v4, (uint64_t)v21);
      uint64_t v4 = 1;
      goto LABEL_27;
    }
    char v15 = logObjectForModule_3();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_endpoint_requestNvmErasePublicKey_cold_2();
    }
  }
LABEL_17:
  uint64_t v4 = 0;
LABEL_27:
  if (v21)
  {
    free(v21);
    CFStringRef v21 = 0;
  }
  if (v10) {
    CFRelease(v10);
  }
  return v4;
}

uint64_t mfi4Auth_endpoint_cancelVendorKeyErase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v4 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      uint64_t v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_cancelVendorKeyErase", buf, 2u);
    }
    CFIndex v5 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __mfi4Auth_endpoint_cancelVendorKeyErase_block_invoke;
    block[3] = &unk_1002160A8;
    block[5] = &v11;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
  }
  else
  {
    __int16 v8 = logObjectForModule_3();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_cancelVendorKeyErase: !pProtocolEndpoint", buf, 2u);
    }
  }
  uint64_t v6 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v6;
}

uint64_t __mfi4Auth_endpoint_cancelVendorKeyErase_block_invoke(uint64_t a1)
{
  if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) != 13) {
    goto LABEL_9;
  }
  uint64_t v2 = acc_endpoint_copyProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_SessionOpen);
  if (v2)
  {
    CFBooleanRef v3 = (CFBooleanRef)v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFBooleanGetTypeID() && v3 == kCFBooleanTrue)
    {
      dispatch_source_set_timer(*(dispatch_source_t *)(*(void *)(a1 + 48) + 32), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      acc_endpoint_setProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanFalse);
LABEL_9:
      char v6 = 1;
      goto LABEL_10;
    }
  }
  char v6 = 0;
LABEL_10:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
  }
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v7();
}

uint64_t mfi4Auth_endpoint_beginUserKeyErase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      CFTypeID v4 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      CFTypeID v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_beginUserKeyErase", buf, 2u);
    }
    CFIndex v5 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __mfi4Auth_endpoint_beginUserKeyErase_block_invoke;
    block[3] = &unk_1002160D0;
    block[5] = &v11;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
  }
  else
  {
    __int16 v8 = logObjectForModule_3();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_beginUserKeyErase: !pProtocolEndpoint", buf, 2u);
    }
  }
  uint64_t v6 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v6;
}

void __mfi4Auth_endpoint_beginUserKeyErase_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanTrue);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 32) = 12;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 64) = _Block_copy(*(const void **)(a1 + 32));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    uint64_t v2 = logObjectForModule_3();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_beginUserKeyErase_block_invoke_cold_1();
    }
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

uint64_t mfi4Auth_endpoint_continueUserKeyErase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  char v19 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v9 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      uint64_t v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_continueUserKeyErase", buf, 2u);
    }
    __int16 v10 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __mfi4Auth_endpoint_continueUserKeyErase_block_invoke;
    block[3] = &unk_1002160F8;
    block[4] = a5;
    block[5] = &v16;
    void block[6] = a1;
    void block[7] = a2;
    block[8] = a3;
    dispatch_sync(v10, block);
  }
  else
  {
    uint64_t v13 = logObjectForModule_3();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_continueUserKeyErase: !pProtocolEndpoint", buf, 2u);
    }
  }
  uint64_t v11 = *((unsigned __int8 *)v17 + 24);
  _Block_object_dispose(&v16, 8);
  return v11;
}

void __mfi4Auth_endpoint_continueUserKeyErase_block_invoke(uint64_t a1)
{
  if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) != 13) {
    goto LABEL_6;
  }
  uint64_t v2 = acc_endpoint_copyProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_SessionOpen);
  if (!v2)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    CFIndex v5 = logObjectForModule_3();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    __int16 v10 = 0;
    uint64_t v6 = "mfi4Auth_endpoint_continueUserKeyErase: !propertyValue";
    uint64_t v7 = (uint8_t *)&v10;
    goto LABEL_16;
  }
  CFBooleanRef v3 = (const __CFBoolean *)v2;
  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 != CFBooleanGetTypeID())
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    CFIndex v5 = logObjectForModule_3();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    __int16 v9 = 0;
    uint64_t v6 = "mfi4Auth_endpoint_continueUserKeyErase: !CFBooleanGetTypeID";
    uint64_t v7 = (uint8_t *)&v9;
    goto LABEL_16;
  }
  if (v3 == kCFBooleanTrue)
  {
    dispatch_source_set_timer(*(dispatch_source_t *)(*(void *)(a1 + 48) + 32), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
LABEL_6:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 32) = 13;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 64) = _Block_copy(*(const void **)(a1 + 32));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = _mfi4Auth_endpoint_requestNvmErasePublicKey(*(void *)(a1 + 48), 0x5300u, *(const __CFData **)(a1 + 56), *(const __CFData **)(a1 + 64));
    goto LABEL_7;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  CFIndex v5 = logObjectForModule_3();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v8 = 0;
    uint64_t v6 = "mfi4Auth_endpoint_continueUserKeyErase: !kCFBooleanTrue";
    uint64_t v7 = (uint8_t *)&v8;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
  }
LABEL_7:
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
  }
}

uint64_t mfi4Auth_endpoint_cancelUserKeyErase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      CFTypeID v4 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      CFTypeID v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_cancelUserKeyErase", buf, 2u);
    }
    CFIndex v5 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __mfi4Auth_endpoint_cancelUserKeyErase_block_invoke;
    block[3] = &unk_100216120;
    block[5] = &v11;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
  }
  else
  {
    __int16 v8 = logObjectForModule_3();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_cancelUserKeyErase: !pProtocolEndpoint", buf, 2u);
    }
  }
  uint64_t v6 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v6;
}

uint64_t __mfi4Auth_endpoint_cancelUserKeyErase_block_invoke(uint64_t a1)
{
  if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) != 13) {
    goto LABEL_9;
  }
  uint64_t v2 = acc_endpoint_copyProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_SessionOpen);
  if (v2)
  {
    CFBooleanRef v3 = (CFBooleanRef)v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFBooleanGetTypeID() && v3 == kCFBooleanTrue)
    {
      dispatch_source_set_timer(*(dispatch_source_t *)(*(void *)(a1 + 48) + 32), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      acc_endpoint_setProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanFalse);
LABEL_9:
      char v6 = 1;
      goto LABEL_10;
    }
  }
  char v6 = 0;
LABEL_10:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
  }
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v7();
}

uint64_t mfi4Auth_endpoint_copyUserPrivateKey(uint64_t a1, uint64_t a2)
{
  CFErrorRef error = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4)
  {
    uint64_t v12 = logObjectForModule_3();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v18 = 646;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "copyUserPrivateKey: error:%d", buf, 8u);
    }
LABEL_11:
    __int16 v9 = CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    char v6 = 0;
LABEL_15:
    CFDataRef v7 = 0;
    uint64_t v8 = 0;
    CFErrorRef error = v9;
    goto LABEL_5;
  }
  CFIndex v5 = (__SecKey *)mfi4Auth_protocol_nvm_copyUserPublicKeyForSerialNumber(*(void *)(*(void *)(v4 + 712) + 80));
  if (!v5)
  {
    uint64_t v12 = logObjectForModule_3();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v18 = 650;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  char v6 = v5;
  CFDataRef v7 = SecKeyCopyExternalRepresentation(v5, &error);
  if (!v7)
  {
    uint64_t v13 = logObjectForModule_3();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v18 = 654;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "copyUserPrivateKey: error:%d", buf, 8u);
    }
    __int16 v9 = CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1, 0);
    goto LABEL_15;
  }
  uint64_t v8 = 1;
  __int16 v9 = error;
LABEL_5:
  __int16 v10 = *(NSObject **)(a1 + 16);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 0x40000000;
  v14[2] = __mfi4Auth_endpoint_copyUserPrivateKey_block_invoke;
  v14[3] = &unk_100216148;
  char v15 = v8;
  v14[6] = v7;
  v14[7] = v9;
  v14[4] = a2;
  v14[5] = v6;
  dispatch_async(v10, v14);
  return v8;
}

uint64_t __mfi4Auth_endpoint_copyUserPrivateKey_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 64);
    BOOL v4 = *(void *)(a1 + 40) != 0;
    BOOL v5 = *(void *)(a1 + 48) != 0;
    BOOL v6 = *(void *)(a1 + 56) != 0;
    v8[0] = 67109888;
    v8[1] = v3;
    __int16 v9 = 1024;
    BOOL v10 = v4;
    __int16 v11 = 1024;
    BOOL v12 = v5;
    __int16 v13 = 1024;
    BOOL v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "copyUserPrivateKey: success:%d, key:%d, keyData:%d error:%d", (uint8_t *)v8, 0x1Au);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id acc_userDefaults_BOOLForKey(uint64_t a1)
{
  uint64_t v2 = +[ACCUserDefaults sharedDefaults];
  id v3 = [v2 BOOLForKey:a1];

  return v3;
}

id acc_userDefaults_copyIntegerForKey(uint64_t a1)
{
  uint64_t v2 = +[ACCUserDefaults sharedDefaults];
  id v3 = [v2 integerForKey:a1];

  return v3;
}

id acc_userDefaultsIapd_copyIntegerForKey(uint64_t a1)
{
  uint64_t v2 = +[ACCUserDefaults sharedDefaultsIapd];
  id v3 = [v2 integerForKey:a1];

  return v3;
}

id acc_userDefaultsLogging_BOOLForKey(uint64_t a1)
{
  uint64_t v2 = +[ACCUserDefaults sharedDefaultsLogging];
  id v3 = [v2 BOOLForKey:a1];

  return v3;
}

uint64_t iAP2PacketParseBuffer(char *a1, int a2, uint64_t a3, unsigned int a4, unsigned char *a5, _DWORD *a6, _DWORD *a7, int a8)
{
  uint64_t v16 = *(void *)a3;
  unsigned int v17 = iAP2LinkCurPckHdrSize(*(void *)a3);
  BOOL ChecksumType = iAP2LinkGetChecksumType(v16);
  if (a5) {
    *a5 = 0;
  }
  if (!a1 || !a2) {
    return 0;
  }
  unsigned int v76 = a4;
  unsigned int v77 = v17;
  char v19 = *(unsigned char **)(a3 + 64);
  LODWORD(v20) = 0;
  *((void *)&v20 + 1) = 0;
  DWORD1(v20) = a2;
  CFStringRef v21 = &a1[a2];
  int v78 = a8;
  while (1)
  {
    unsigned int v22 = *(unsigned __int16 *)(a3 + 61);
    if ((v22 & 0xFE) > 0x11) {
      return v20;
    }
    switch(*(_WORD *)(a3 + 61))
    {
      case 0u:
        *(_DWORD *)(a3 + 52) = 0;
        *(_WORD *)(a3 + 56) = 0;
        *(_DWORD *)(a3 + 44) = 0;
        int v23 = *a1;
        if (v23 == 85)
        {
          if (a7)
          {
            ++*a7;
            int v72 = *(_DWORD *)(a3 + 44);
          }
          else
          {
            int v72 = 0;
          }
          *char v19 = 0;
          v19[1] = *a1;
          *(_DWORD *)(a3 + 44) = v72 + 2;
          *(unsigned char *)(a3 + 61) = 13;
          goto LABEL_95;
        }
        if (v23 != 255) {
          goto LABEL_95;
        }
        *char v19 = -1;
        int v24 = 1;
        *(unsigned char *)(a3 + 61) = 1;
        goto LABEL_94;
      case 1u:
        int v25 = *a1;
        if (a8 == 1 || v25 != 90)
        {
          if (v25 == 255) {
            goto LABEL_95;
          }
          if (v25 != 85)
          {
            *(_WORD *)(a3 + 61) = v22 & 0xFF00;
            goto LABEL_95;
          }
          if (a7)
          {
            ++*a7;
            char v65 = *a1;
          }
          else
          {
            char v65 = 85;
          }
          v19[1] = v65;
          char v31 = 13;
        }
        else
        {
          if (a7)
          {
            ++*a7;
            char v26 = *a1;
          }
          else
          {
            char v26 = 90;
          }
          v19[1] = v26;
          char v31 = 2;
        }
        goto LABEL_92;
      case 2u:
        v19[2] = *a1;
        __int16 v27 = *a1++;
        *(_WORD *)(a3 + 54) = v27 << 8;
        char v28 = 3;
        goto LABEL_49;
      case 3u:
        v19[3] = *a1;
        unsigned __int16 v29 = *(_WORD *)(a3 + 54) + *a1;
        BOOL v30 = v29 <= v76 || v76 == 0;
        *(_WORD *)(a3 + 54) = v29;
        if (v30 && v77 <= v29)
        {
          char v31 = 4;
          goto LABEL_92;
        }
        long long v84 = v20;
        __iAP2PacketResetPacket((void *)a3);
        long long v20 = v84;
        goto LABEL_95;
      case 4u:
        char v32 = *a1++;
        v19[4] = v32;
        char v28 = 5;
        goto LABEL_49;
      case 5u:
        char v33 = *a1++;
        v19[5] = v33;
        char v28 = 6;
        goto LABEL_49;
      case 6u:
        char v34 = *a1++;
        v19[6] = v34;
        char v28 = 7;
        goto LABEL_49;
      case 7u:
        char v35 = *a1++;
        v19[7] = v35;
        char v28 = 8;
        goto LABEL_49;
      case 8u:
        int v37 = *a1++;
        int v36 = v37;
        long long v79 = v20;
        iAP2PacketSetHdrChecksum(a3, ChecksumType, v37);
        *((void *)&v20 + 1) = *((void *)&v79 + 1);
        __int16 v38 = *(unsigned __int8 *)(a3 + 62);
        *(unsigned char *)(a3 + 61) = 9;
        ++*(_DWORD *)(a3 + 44);
        *(int32x2_t *)&long long v20 = vadd_s32(*(int32x2_t *)&v79, (int32x2_t)0xFFFFFFFF00000001);
        if (ChecksumType) {
          goto LABEL_97;
        }
        long long v80 = v20;
        *(_WORD *)(a3 + 61) = (v38 << 8) | 0xA;
        if (iAP2PacketCalcChecksum(*(unsigned __int8 **)(a3 + 64), 8u, 0) != v36)
        {
LABEL_29:
          iAP2PacketGetChecksum((unsigned __int16 *)(*(void *)(a3 + 64) + 8), (*(unsigned __int16 *)(a3 + 61) >> 12) & 3);
          if (a6) {
            ++*a6;
          }
LABEL_53:
          int v59 = (void *)a3;
          goto LABEL_54;
        }
LABEL_32:
        *(_WORD *)(a3 + 52) = 0;
        if (*(unsigned __int16 *)(a3 + 54) == v77)
        {
          char v42 = 18;
LABEL_70:
          *(unsigned char *)(a3 + 61) = v42;
        }
        goto LABEL_71;
      case 9u:
        long long v81 = v20;
        iAP2PacketGetChecksum((unsigned __int16 *)(*(void *)(a3 + 64) + 8), (v22 >> 12) & 3);
        char v39 = *a1++;
        iAP2PacketSetHdrChecksum(a3, ChecksumType, v39);
        *(unsigned char *)(a3 + 61) = 10;
        ++*(_DWORD *)(a3 + 44);
        *((void *)&v40 + 1) = *((void *)&v81 + 1);
        *(int32x2_t *)&long long v40 = vadd_s32(*(int32x2_t *)&v81, (int32x2_t)0xFFFFFFFF00000001);
        long long v80 = v40;
        int v41 = iAP2PacketCalcChecksum(*(unsigned __int8 **)(a3 + 64), 8u, ChecksumType);
        if (v41 == iAP2PacketGetChecksum((unsigned __int16 *)(*(void *)(a3 + 64) + 8), (*(unsigned __int16 *)(a3 + 61) >> 12) & 3))goto LABEL_32; {
        goto LABEL_29;
        }
      case 0xAu:
        long long v80 = v20;
        int PayloadLen = iAP2PacketGetPayloadLen(a3);
        int v44 = *(unsigned __int16 *)(a3 + 52);
        unsigned int v45 = PayloadLen - v44;
        if (PayloadLen == v44)
        {
          unsigned __int16 v46 = PayloadLen;
        }
        else
        {
          if (DWORD1(v80) >= v45) {
            size_t v66 = v45;
          }
          else {
            size_t v66 = DWORD1(v80);
          }
          memcpy((void *)(*(void *)(a3 + 72) + *(unsigned __int16 *)(a3 + 52)), a1, v66);
          unsigned __int16 v46 = *(_WORD *)(a3 + 52) + v66;
          *(_WORD *)(a3 + 52) = v46;
          *(_DWORD *)(a3 + 44) += v66;
          a1 += v66;
          int32x2_t v67 = vdup_n_s32(v66);
          LODWORD(v68) = v66;
          a8 = v78;
          LODWORD(v68) = vadd_s32(*(int32x2_t *)&v80, *(int32x2_t *)&v68).u32[0];
          DWORD1(v68) = vsub_s32(*(int32x2_t *)&v80, v67).i32[1];
          long long v80 = v68;
        }
        if (iAP2PacketGetPayloadLen(a3) != v46) {
          goto LABEL_71;
        }
        char v42 = 11;
        goto LABEL_70;
      case 0xBu:
        __int16 v47 = *a1++;
        long long v82 = v20;
        iAP2PacketSetPayloadChecksum(a3, v47);
        *((void *)&v20 + 1) = *((void *)&v82 + 1);
        *(unsigned char *)(a3 + 61) = 12;
        ++*(_DWORD *)(a3 + 44);
        *(int32x2_t *)&long long v20 = vadd_s32(*(int32x2_t *)&v82, (int32x2_t)0xFFFFFFFF00000001);
        if (ChecksumType) {
          goto LABEL_97;
        }
        long long v80 = v20;
        uint64_t v48 = *(unsigned __int8 **)(a3 + 72);
        unsigned int v49 = iAP2PacketGetPayloadLen(a3);
        uint64_t v50 = v48;
        int v51 = 0;
LABEL_39:
        int v56 = iAP2PacketCalcChecksum(v50, v49, v51);
        if (v56 == iAP2PacketGetChecksum((unsigned __int16 *)(*(void *)(a3 + 72) + *(unsigned __int16 *)(a3 + 52)), (*(unsigned __int16 *)(a3 + 61) >> 12) & 3))
        {
          *(unsigned char *)(a3 + 61) = 18;
        }
        else
        {
          if (a6) {
            ++*a6;
          }
          __iAP2PacketResetPacket((void *)a3);
        }
        a8 = v78;
        goto LABEL_71;
      case 0xCu:
        long long v83 = v20;
        __int16 Checksum = iAP2PacketGetChecksum((unsigned __int16 *)(*(void *)(a3 + 72) + *(unsigned __int16 *)(a3 + 52)), (v22 >> 12) & 3);
        __int16 v53 = *a1++;
        iAP2PacketSetPayloadChecksum(a3, v53 | (Checksum << 8));
        ++*(_DWORD *)(a3 + 44);
        *((void *)&v54 + 1) = *((void *)&v83 + 1);
        *(int32x2_t *)&long long v54 = vadd_s32(*(int32x2_t *)&v83, (int32x2_t)0xFFFFFFFF00000001);
        long long v80 = v54;
        int v55 = *(unsigned __int8 **)(a3 + 72);
        unsigned int v49 = iAP2PacketGetPayloadLen(a3);
        uint64_t v50 = v55;
        int v51 = ChecksumType;
        goto LABEL_39;
      case 0xDu:
        *(unsigned char *)(*(void *)(a3 + 64) + *(unsigned int *)(a3 + 44)) = *a1;
        int v57 = *a1;
        if (a8 != 2)
        {
          if (*a1) {
            goto LABEL_73;
          }
          char v31 = 14;
LABEL_92:
          *(unsigned char *)(a3 + 61) = v31;
          goto LABEL_93;
        }
        if (v57 == 2 || v57 == 4)
        {
LABEL_73:
          *(unsigned char *)(a3 + 61) = 16;
          *(_WORD *)(a3 + 54) = *a1 + 4;
          goto LABEL_93;
        }
        int v59 = (void *)a3;
        long long v80 = v20;
LABEL_54:
        __iAP2PacketResetPacket(v59);
LABEL_71:
        long long v20 = v80;
        goto LABEL_97;
      case 0xEu:
        *(unsigned char *)(*(void *)(a3 + 64) + *(unsigned int *)(a3 + 44)) = *a1;
        __int16 v60 = *a1++;
        *(_WORD *)(a3 + 54) = v60;
        char v28 = 15;
        goto LABEL_49;
      case 0xFu:
        *(unsigned char *)(*(void *)(a3 + 64) + *(unsigned int *)(a3 + 44)) = *a1;
        __int16 v61 = *(_WORD *)(a3 + 54);
        *(_WORD *)(a3 + 54) = v61 << 8;
        unsigned __int8 v62 = *a1++;
        *(_WORD *)(a3 + 54) = (v62 | (unsigned __int16)(v61 << 8)) + 6;
        char v28 = 16;
LABEL_49:
        *(unsigned char *)(a3 + 61) = v28;
        ++*(_DWORD *)(a3 + 44);
        goto LABEL_96;
      case 0x10u:
        char v63 = *a1++;
        *(unsigned char *)(*(void *)(a3 + 64) + *(unsigned int *)(a3 + 44)) = v63;
        int v64 = *(_DWORD *)(a3 + 44);
        *(_DWORD *)(a3 + 44) = v64 + 1;
        *(int32x2_t *)&long long v20 = vadd_s32(*(int32x2_t *)&v20, (int32x2_t)0xFFFFFFFF00000001);
        if (v64 == *(unsigned __int16 *)(a3 + 54) - 2) {
          *(unsigned char *)(a3 + 61) = 17;
        }
        goto LABEL_97;
      case 0x11u:
        long long v80 = v20;
        *(unsigned char *)(*(void *)(a3 + 64) + *(unsigned int *)(a3 + 44)) = *a1;
        if (iAP2PacketCalcChecksum((unsigned __int8 *)(*(void *)(a3 + 64) + 2), *(unsigned __int16 *)(a3 + 54) - 2, 0))goto LABEL_53; {
        __int16 v69 = *(_WORD *)(a3 + 61) | 0x400;
        }
        *(_WORD *)(a3 + 61) = v69;
        if (iAP2PacketCheckDetect(a3))
        {
          __int16 v70 = v69 & 0xFF00;
          __int16 v71 = 19;
        }
        else
        {
          if (!iAP2PacketCheckDetectNACK(a3))
          {
            if (iAP2PacketCheckRequestIdentify(a3))
            {
              __int16 v73 = v69 & 0xFF00;
              __int16 v74 = 21;
              goto LABEL_102;
            }
            if (v78 == 2)
            {
              __iAP2PacketResetPacket((void *)a3);
            }
            else
            {
              __int16 v73 = v69 & 0xFF00;
              __int16 v74 = 22;
LABEL_102:
              *(_WORD *)(a3 + 61) = v73 | v74;
            }
            a8 = v78;
            long long v20 = v80;
            goto LABEL_93;
          }
          __int16 v70 = v69 & 0xFF00;
          __int16 v71 = 20;
        }
        *(_WORD *)(a3 + 61) = v70 | v71;
        a8 = v78;
        long long v20 = v80;
        if (a5) {
          *a5 = 1;
        }
LABEL_93:
        int v24 = *(_DWORD *)(a3 + 44) + 1;
LABEL_94:
        *(_DWORD *)(a3 + 44) = v24;
LABEL_95:
        ++a1;
LABEL_96:
        *(int32x2_t *)&long long v20 = vadd_s32(*(int32x2_t *)&v20, (int32x2_t)0xFFFFFFFF00000001);
LABEL_97:
        if (a1 >= v21) {
          return v20;
        }
        break;
      default:
        goto LABEL_97;
    }
  }
}

BOOL __iAP2PacketResetPacket(void *a1)
{
  uint64_t v2 = *a1;
  id v3 = (void (*)(void))a1[4];
  if (v3 && a1[1]) {
    v3(*a1);
  }
  *(void *)((char *)a1 + 50) = 0;
  *(void *)((char *)a1 + 44) = 0;
  *(_WORD *)((char *)a1 + 61) = *((unsigned __int8 *)a1 + 62) << 8;
  BOOL v4 = (void *)a1[8];
  unsigned int v5 = iAP2LinkCurPckHdrSize(v2);
  bzero(v4, v5);
  a1[1] = 0;
  a1[2] = 0;
  __int16 v6 = *(_WORD *)((char *)a1 + 61);
  a1[4] = 0;
  *(_WORD *)((char *)a1 + 61) = v6 & 0xF6FF;
  *((unsigned char *)a1 + 58) = 0;
  BOOL result = iAP2LinkGetChecksumType(v2);
  *(_WORD *)((char *)a1 + 61) = *(_WORD *)((unsigned char *)a1 + 61) & 0xCBFF | ((result & 3) << 12);
  return result;
}

void iAP2PacketSetHdrChecksum(uint64_t a1, int a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 64);
  if (a2 == 1)
  {
    *(_WORD *)(v3 + 8) = __rev16(a3);
    __int16 v7 = *(_WORD *)(a1 + 61);
    if ((v7 & 0x3000) == 0) {
      ++*(void *)(a1 + 72);
    }
    __int16 v6 = v7 & 0xCFFF | 0x1000;
    goto LABEL_9;
  }
  if (!a2)
  {
    *(unsigned char *)(v3 + 8) = a3;
    __int16 v5 = *(_WORD *)(a1 + 61);
    if ((v5 & 0x3000) == 0x1000) {
      --*(void *)(a1 + 72);
    }
    __int16 v6 = v5 & 0xCFFF;
LABEL_9:
    *(_WORD *)(a1 + 61) = v6;
    return;
  }
  if (_iAP2LogEnableMask)
  {
    if (gLogObjects) {
      BOOL v8 = gNumLogObjects < 20;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      __int16 v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      __int16 v9 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315650;
      __int16 v11 = "iAP2PacketSetHdrChecksum";
      __int16 v12 = 1024;
      int v13 = 2102;
      __int16 v14 = 1024;
      int v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Unknown checksumType(%d)!", (uint8_t *)&v10, 0x18u);
    }
  }
}

uint64_t iAP2PacketCalcChecksum(unsigned __int8 *a1, unsigned int a2, int a3)
{
  unsigned int v3 = a2;
  BOOL v4 = a1;
  if (a1 && a2)
  {
    if (!a3)
    {
      char v14 = 0;
      uint64_t v15 = a2;
      do
      {
        char v16 = *v4++;
        v14 += v16;
        --v15;
      }
      while (v15);
      LOWORD(v12) = -v14;
      return (unsigned __int16)v12;
    }
    if (a3 == 1)
    {
      LOWORD(v6) = 255;
      LOWORD(v7) = 255;
      do
      {
        if (v3 >= 0x14) {
          int v8 = 20;
        }
        else {
          int v8 = v3;
        }
        if (v8)
        {
          int v9 = v8;
          int v10 = v4;
          do
          {
            --v9;
            __int16 v11 = *v10++;
            LOWORD(v7) = v7 + v11;
            LOWORD(v6) = v7 + v6;
          }
          while ((_WORD)v9);
          v4 += (unsigned __int16)(v8 - 1) + 1;
        }
        unsigned int v7 = BYTE1(v7) + v7;
        int v6 = BYTE1(v6) + v6;
        v3 -= v8;
      }
      while (v3);
      return (unsigned __int16)-((257 * v6) & 0x3FF00 | ((v7 >> 8) + v7));
    }
    if (_iAP2LogEnableMask)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        unsigned int v17 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        unsigned int v17 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      BOOL v23 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      LOWORD(v12) = 0;
      if (v23)
      {
        int v25 = 136315650;
        char v26 = "iAP2PacketCalcChecksum";
        __int16 v27 = 1024;
        int v28 = 2020;
        __int16 v29 = 1024;
        int v30 = a3;
        long long v20 = "ERROR: %s:%d Unknown checksumType(%d)!";
        CFStringRef v21 = v17;
        uint32_t v22 = 24;
        goto LABEL_36;
      }
      return (unsigned __int16)v12;
    }
LABEL_37:
    LOWORD(v12) = 0;
    return (unsigned __int16)v12;
  }
  if ((_iAP2LogEnableMask & 1) == 0) {
    goto LABEL_37;
  }
  if (gLogObjects) {
    BOOL v13 = gNumLogObjects < 20;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    int v18 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    int v18 = *(NSObject **)(gLogObjects + 152);
  }
  BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  LOWORD(v12) = 0;
  if (v19)
  {
    int v25 = 136315906;
    char v26 = "iAP2PacketCalcChecksum";
    __int16 v27 = 1024;
    int v28 = 2028;
    __int16 v29 = 1024;
    int v30 = (unsigned __int16)v4;
    __int16 v31 = 1024;
    unsigned int v32 = v3;
    long long v20 = "ERROR: %s:%d NULL buffer(%hx) pointer or nothing to copy (len=%u)!";
    CFStringRef v21 = v18;
    uint32_t v22 = 30;
LABEL_36:
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v25, v22);
    goto LABEL_37;
  }
  return (unsigned __int16)v12;
}

uint64_t iAP2PacketGetHdrChecksum(uint64_t a1)
{
  return iAP2PacketGetChecksum((unsigned __int16 *)(*(void *)(a1 + 64) + 8), (*(unsigned __int16 *)(a1 + 61) >> 12) & 3);
}

uint64_t iAP2PacketGetPayloadLen(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  int v3 = iAP2LinkCurPckHdrSize(*(void *)a1);
  int v4 = iAP2LinkCurPckChksumSize(v2);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 54);
  BOOL v6 = v5 >= v4 + v3;
  unsigned int v7 = v5 - (v4 + v3);
  if (v7 == 0 || !v6) {
    LOWORD(v7) = 0;
  }
  return (unsigned __int16)v7;
}

void iAP2PacketSetPayloadChecksum(uint64_t a1, __int16 a2)
{
  int v3 = (_WORD *)(*(void *)(a1 + 72) + *(unsigned __int16 *)(a1 + 52));
  int v4 = (*(unsigned __int16 *)(a1 + 61) >> 12) & 3;
  if (v4 == 1)
  {
    *int v3 = __rev16(a2);
    goto LABEL_5;
  }
  if (!v4)
  {
    *(unsigned char *)int v3 = a2;
LABEL_5:
    *(_WORD *)(a1 + 56) = a2;
    return;
  }
  if (_iAP2LogEnableMask)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 20;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      BOOL v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v6 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = (*(unsigned __int16 *)(a1 + 61) >> 12) & 3;
      int v8 = 136315650;
      int v9 = "iAP2PacketSetPayloadChecksum";
      __int16 v10 = 1024;
      int v11 = 2175;
      __int16 v12 = 1024;
      int v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Unknown checksumType(%d)!", (uint8_t *)&v8, 0x18u);
    }
  }
}

uint64_t iAP2PacketGetPayloadChecksum(uint64_t a1)
{
  return iAP2PacketGetChecksum((unsigned __int16 *)(*(void *)(a1 + 72) + *(unsigned __int16 *)(a1 + 52)), (*(unsigned __int16 *)(a1 + 61) >> 12) & 3);
}

BOOL iAP2PacketCheckDetect(uint64_t a1)
{
  CFDataRef v1 = *(unsigned char **)(a1 + 64);
  uint64_t v2 = v1 + 1;
  unsigned __int8 v3 = *v1 + 1;
  if (v3 >= 2u) {
    uint64_t v2 = *(unsigned char **)(a1 + 64);
  }
  if (*v2 != 85) {
    return 0;
  }
  uint64_t v4 = 1;
  if (v3 < 2u) {
    uint64_t v4 = 2;
  }
  if (v1[v4] != 2) {
    return 0;
  }
  BOOL v5 = &v1[v3 < 2u];
  if (v5[2]) {
    return 0;
  }
  uint64_t v6 = 3;
  if ((*v1 + 1) < 2u) {
    uint64_t v6 = 4;
  }
  return v1[v6] == 238 && v5[4] == 16;
}

BOOL iAP2PacketCheckDetectNACK(uint64_t a1)
{
  CFDataRef v1 = *(unsigned __int8 **)(a1 + 64);
  unsigned __int8 v3 = v1 + 1;
  int v2 = *v1;
  if (v2 != 255) {
    unsigned __int8 v3 = *(unsigned char **)(a1 + 64);
  }
  if (*v3 != 85) {
    return 0;
  }
  uint64_t v4 = 1;
  if (v2 == 255) {
    uint64_t v4 = 2;
  }
  if (v1[v4] != 4) {
    return 0;
  }
  uint64_t v5 = 2;
  if (v2 == 255) {
    uint64_t v5 = 3;
  }
  if (v1[v5]) {
    return 0;
  }
  uint64_t v6 = 3;
  if (v2 == 255) {
    uint64_t v6 = 4;
  }
  if (v1[v6] != 2) {
    return 0;
  }
  uint64_t v7 = 4;
  if (v2 == 255) {
    uint64_t v7 = 5;
  }
  if (v1[v7] != 4) {
    return 0;
  }
  uint64_t v8 = 5;
  if (v2 == 255) {
    uint64_t v8 = 6;
  }
  if (v1[v8] != 238) {
    return 0;
  }
  BOOL v9 = v2 == 255;
  uint64_t v10 = 6;
  if (v9) {
    uint64_t v10 = 7;
  }
  return v1[v10] == 8;
}

BOOL iAP2PacketCheckRequestIdentify(uint64_t a1)
{
  CFDataRef v1 = *(unsigned __int8 **)(a1 + 64);
  unsigned __int8 v3 = v1 + 1;
  int v2 = *v1;
  if (v2 != 255) {
    unsigned __int8 v3 = *(unsigned char **)(a1 + 64);
  }
  if (*v3 != 85) {
    return 0;
  }
  uint64_t v4 = 1;
  if (v2 == 255) {
    uint64_t v4 = 2;
  }
  if (v1[v4] != 2) {
    return 0;
  }
  uint64_t v5 = 2;
  if (v2 == 255) {
    uint64_t v5 = 3;
  }
  if (v1[v5]) {
    return 0;
  }
  uint64_t v6 = 3;
  if (v2 == 255) {
    uint64_t v6 = 4;
  }
  if (v1[v6]) {
    return 0;
  }
  BOOL v8 = v2 == 255;
  uint64_t v9 = 4;
  if (v8) {
    uint64_t v9 = 5;
  }
  return v1[v9] == 254;
}

BOOL iAP2PacketIsComplete(BOOL result)
{
  if (result) {
    return (*(_WORD *)(result + 61) & 0xFEu) > 0x11;
  }
  return result;
}

BOOL iAP2PacketIsACKOnly(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)(a1 + 64) + 4) & 0xF0) != 0x40) {
    return 0;
  }
  int v1 = *(unsigned __int16 *)(a1 + 54);
  return v1 == iAP2LinkCurPckHdrSize(*(void *)a1);
}

BOOL iAP2PacketIsDataPacket(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)(a1 + 64) + 4) & 0xF0) != 0x40) {
    return 0;
  }
  unsigned int v1 = *(unsigned __int16 *)(a1 + 54);
  return v1 > iAP2LinkCurPckHdrSize(*(void *)a1);
}

uint64_t iAP2PacketIsEAK(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 64) + 4) >> 5) & 1;
}

unsigned char *iAP2PacketCreateEmptySendPacket(uint64_t a1, unsigned int *a2)
{
  int v2 = 0;
  if (a1 && a2)
  {
    unsigned int MaxPayloadSize = iAP2LinkGetMaxPayloadSize(a1, 0);
    unsigned int v6 = *a2;
    if (!*a2 || v6 >= MaxPayloadSize)
    {
      if (v6 > MaxPayloadSize) {
        *a2 = MaxPayloadSize;
      }
      unsigned int v6 = MaxPayloadSize;
    }
    uint64_t v7 = iAP2BuffPoolGet(*(unsigned __int8 **)(a1 + 248), v6);
    int v2 = v7;
    if (v7)
    {
      __int16 v8 = *(_WORD *)(v7 + 61);
      *(_WORD *)(v7 + 59) = 511;
      v7[63] = 0;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
      *(void *)uint64_t v7 = a1;
      *(_WORD *)(v7 + 61) = v8 & 0xF5FF | 0x200;
      *((void *)v7 + 4) = 0;
      __iAP2PacketResetPacket(v7);
    }
  }
  return v2;
}

unsigned char *iAP2PacketCreateEmptyRecvPacket(uint64_t a1)
{
  int v2 = *(unsigned __int8 **)(a1 + 240);
  unsigned int MaxRecvPayloadSize = iAP2LinkGetMaxRecvPayloadSize(a1, 0);
  uint64_t v4 = iAP2BuffPoolGet(v2, MaxRecvPayloadSize);
  uint64_t v5 = v4;
  if (v4)
  {
    __int16 v6 = *(_WORD *)(v4 + 61);
    *(_WORD *)(v4 + 59) = 511;
    v4[63] = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)uint64_t v4 = a1;
    *(_WORD *)(v4 + 61) = v6 & 0xF5FF;
    *((void *)v4 + 4) = 0;
    __iAP2PacketResetPacket(v4);
  }
  return v5;
}

uint64_t iAP2PacketCreate(uint64_t a1, char a2, char a3, char a4, const void *a5, int a6, char a7, int a8)
{
  LODWORD(__n) = a6;
  __int16 v16 = iAP2LinkCurPckHdrSize(a1);
  if (a6)
  {
    __int16 v17 = iAP2LinkCurPckChksumSize(a1);
    if (a8)
    {
LABEL_3:
      EmptySendPacket = iAP2PacketCreateEmptySendPacket(a1, (unsigned int *)&__n);
      goto LABEL_6;
    }
  }
  else
  {
    __int16 v17 = 0;
    if (a8) {
      goto LABEL_3;
    }
  }
  EmptySendPacket = iAP2PacketCreateEmptyRecvPacket(a1);
LABEL_6:
  uint64_t v19 = (uint64_t)EmptySendPacket;
  if (EmptySendPacket)
  {
    uint64_t v20 = *((void *)EmptySendPacket + 8);
    __int16 v21 = v17 + v16 + __n;
    *((_WORD *)EmptySendPacket + 27) = v21;
    *(_WORD *)uint64_t v20 = 23295;
    *(unsigned char *)(v20 + 2) = HIBYTE(v21);
    *(unsigned char *)(v20 + 3) = v21;
    *(unsigned char *)(v20 + 4) = a2;
    *(unsigned char *)(v20 + 5) = a3;
    *(unsigned char *)(v20 + 6) = a4;
    *(unsigned char *)(v20 + 7) = a7;
    BOOL ChecksumType = iAP2LinkGetChecksumType(a1);
    iAP2PacketSetHdrChecksum(v19, ChecksumType, 0);
    if (a8) {
      __int16 v23 = 512;
    }
    else {
      __int16 v23 = 0;
    }
    *(_WORD *)(v19 + 61) = *(_WORD *)(v19 + 61) & 0xFDFF | v23;
    *(unsigned char *)(v19 + 63) = 0;
    *(_DWORD *)(v19 + 44) = *(unsigned __int16 *)(v19 + 54);
    if (a5 && __n) {
      memcpy(*(void **)(v19 + 72), a5, __n);
    }
    *(_WORD *)(v19 + 52) = iAP2PacketGetPayloadLen(v19);
    *(_DWORD *)(v19 + 56) = -16777216;
    __int16 v24 = *(_WORD *)(v19 + 61) & 0xF600 | 0x12;
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;
    *(_WORD *)(v19 + 61) = v24;
  }
  return v19;
}

uint64_t iAP2PacketRetain(uint64_t result)
{
  if (result) {
    ++*(unsigned char *)(result + 60);
  }
  return result;
}

uint64_t *iAP2PacketRelease(uint64_t *a1)
{
  unsigned int v1 = a1;
  if (a1)
  {
    if (!*((unsigned char *)a1 + 60)) {
      iAP2PacketRelease_cold_1();
    }
    char v2 = *((unsigned char *)a1 + 60) - 1;
    *((unsigned char *)a1 + 60) = v2;
    if (!v2)
    {
      uint64_t v3 = a1[1];
      uint64_t v4 = (void (*)(uint64_t, uint64_t))a1[2];
      uint64_t v5 = (void (*)(uint64_t, uint64_t))a1[4];
      uint64_t v6 = *a1;
      int v7 = (v4 != 0) & (*(unsigned __int16 *)((char *)a1 + 61) >> 11);
      if (v7 == 1)
      {
        a1[4] = 0;
        a1[1] = 0;
      }
      __iAP2PacketResetPacket(a1);
      if (*((unsigned __int8 *)v1 + 59) != 255)
      {
        MainTimer = (unsigned int *)iAP2LinkGetMainTimer(*v1);
        iAP2TimeCancelTimer(MainTimer, *((unsigned char *)v1 + 59));
        *((unsigned char *)v1 + 59) = -1;
      }
      uint64_t v9 = 248;
      if ((*(_WORD *)((unsigned char *)v1 + 61) & 0x200) == 0) {
        uint64_t v9 = 240;
      }
      iAP2BuffPoolReturn(*(unsigned __int8 **)(v6 + v9), (void **)v1);
      if (!v7) {
        return 0;
      }
      v4(v6, v3);
      unsigned int v1 = 0;
      if (v5 && v3)
      {
        v5(v6, v3);
        return 0;
      }
    }
  }
  return v1;
}

uint64_t iAP2PacketSetCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a1)
  {
    *(void *)(a1 + 16) = a2;
    *(void *)(a1 + 32) = a3;
    if (a4) {
      __int16 v4 = 2048;
    }
    else {
      __int16 v4 = 0;
    }
    *(_WORD *)(a1 + 61) = *(_WORD *)(a1 + 61) & 0xF7FF | v4;
  }
  return 0;
}

uint64_t iAP2PacketSetCallbackOnSentToTransport(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 24) = a2;
  }
  return result;
}

uint64_t iAP2PacketCreateACKPacket(uint64_t a1, char a2, char a3, const void *a4, int a5, char a6)
{
  return iAP2PacketCreate(a1, 64, a2, a3, a4, a5, a6, 1);
}

uint64_t iAP2PacketCreateSYNPacket(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v8 = v1;
  memset(v27, 170, sizeof(v27));
  char v9 = *(unsigned char *)(v3 + 1);
  __int16 v10 = *(_WORD *)(v3 + 4);
  __int16 v11 = *(_WORD *)(v3 + 6);
  __int16 v12 = *(_WORD *)(v3 + 8);
  __int16 v13 = *(_WORD *)(v3 + 2);
  size_t v14 = *(unsigned __int8 *)(v3 + 24);
  unsigned int v15 = *(unsigned __int8 *)(v3 + 10);
  v25[0] = *(unsigned char *)v3;
  v25[1] = v9;
  v25[2] = HIBYTE(v10);
  v25[3] = v10;
  v25[4] = HIBYTE(v11);
  v25[5] = v11;
  v25[6] = HIBYTE(v12);
  v25[7] = v12;
  __int16 v26 = v13;
  if (!v25[0])
  {
    uint64_t v16 = 0;
    goto LABEL_5;
  }
  if (v25[0] == 1)
  {
    uint64_t v16 = 10;
LABEL_5:
    unsigned __int8 v17 = 10;
    goto LABEL_10;
  }
  v27[0] = v14;
  if (v14)
  {
    memcpy(&v27[1], (const void *)(v3 + 25), v14);
    unsigned __int8 v17 = v14 + 12;
  }
  else
  {
    unsigned __int8 v17 = 12;
  }
  v25[(v14 + 11)] = v15;
  uint64_t v16 = (v14 + 12);
LABEL_10:
  if (v15 >= 5) {
    uint64_t v18 = 5;
  }
  else {
    uint64_t v18 = v15;
  }
  if (v18)
  {
    char v19 = 3 * v18;
    uint64_t v20 = (unsigned char *)(v3 + 33);
    __int16 v21 = &v25[v16 + 2];
    do
    {
      *(v21 - 2) = *(v20 - 3);
      *(v21 - 1) = *(v20 - 2) | ((*v20 != 0) << 7);
      *__int16 v21 = *(v20 - 1);
      v21 += 3;
      v20 += 4;
      --v18;
    }
    while (v18);
    v17 += v19;
  }
  if (v5)
  {
    char v22 = *v5;
    char v23 = -64;
  }
  else
  {
    char v22 = 0;
    char v23 = 0x80;
  }
  return iAP2PacketCreate(v8, v23, v7, v22, v25, v17, 0, 1);
}

uint64_t iAP2PacketCreateEAKPacket(uint64_t a1, char a2, char a3, const void *a4, int a5)
{
  return iAP2PacketCreate(a1, 96, a2, a3, a4, a5, 0, 1);
}

uint64_t iAP2PacketCreateRSTPacket(uint64_t a1, char a2)
{
  return iAP2PacketCreate(a1, 16, a2, 0, 0, 0, 0, 1);
}

uint64_t iAP2PacketCreateSUSPacket(uint64_t a1, char a2)
{
  return iAP2PacketCreate(a1, 8, a2, 0, 0, 0, 0, 1);
}

uint64_t iAP2PacketGenerateBuffer(uint64_t a1)
{
  if (a1)
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 54);
    uint64_t v3 = *(void *)(a1 + 64);
    BOOL ChecksumType = iAP2LinkGetChecksumType(*(void *)a1);
    *(_WORD *)uint64_t v3 = 23295;
    *(unsigned char *)(v3 + 2) = BYTE1(v2);
    *(unsigned char *)(v3 + 3) = v2;
    unsigned int v5 = *(_DWORD *)(a1 + 44);
    if (v5 != *(unsigned __int16 *)(a1 + 54)) {
      iAP2PacketGenerateBuffer_cold_2();
    }
    if (v5 >= v2)
    {
      int v6 = ChecksumType;
      char v7 = *(unsigned __int8 **)(a1 + 72);
      unsigned int PayloadLen = iAP2PacketGetPayloadLen(a1);
      char v9 = iAP2PacketCalcChecksum(*(unsigned __int8 **)(a1 + 64), 8u, v6);
      iAP2PacketSetHdrChecksum(a1, v6, v9);
      if (v7)
      {
        if (PayloadLen)
        {
          __int16 v10 = iAP2PacketCalcChecksum(v7, PayloadLen, v6);
          *(_WORD *)(a1 + 52) = PayloadLen;
          iAP2PacketSetPayloadChecksum(a1, v10);
        }
      }
    }
    return *(void *)(a1 + 64);
  }
  else
  {
    if (_iAP2LogEnableMask)
    {
      if (gLogObjects) {
        BOOL v12 = gNumLogObjects < 20;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12)
      {
        __int16 v13 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        __int16 v13 = *(NSObject **)(gLogObjects + 152);
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 136315394;
        unsigned int v15 = "iAP2PacketGenerateBuffer";
        __int16 v16 = 1024;
        int v17 = 1678;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d NULL packet pointer!", (uint8_t *)&v14, 0x12u);
      }
    }
    return 0;
  }
}

BOOL iAP2PacketParseSYNData(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  if (a2 >= 0xA)
  {
    LODWORD(v3) = *a1;
    *(unsigned char *)a3 = v3;
    *(unsigned char *)(a3 + 1) = a1[1];
    __int16 v4 = a1[2];
    *(_WORD *)(a3 + 4) = v4 << 8;
    *(_WORD *)(a3 + 4) = a1[3] | (unsigned __int16)(v4 << 8);
    __int16 v5 = a1[4];
    *(_WORD *)(a3 + 6) = v5 << 8;
    *(_WORD *)(a3 + 6) = a1[5] | (unsigned __int16)(v5 << 8);
    __int16 v6 = a1[6];
    *(_WORD *)(a3 + 8) = v6 << 8;
    *(_WORD *)(a3 + 8) = a1[7] | (unsigned __int16)(v6 << 8);
    *(unsigned char *)(a3 + 2) = a1[8];
    *(unsigned char *)(a3 + 3) = a1[9];
    if (v3)
    {
      if (v3 == 1)
      {
        LODWORD(v3) = (a2 - 10) / 3;
        *(unsigned char *)(a3 + 24) = 0;
        unsigned int v7 = 10;
      }
      else
      {
        if (a1[10] >= 5u) {
          uint64_t v8 = 5;
        }
        else {
          uint64_t v8 = a1[10];
        }
        *(unsigned char *)(a3 + 24) = v8;
        if (v8)
        {
          char v9 = (char *)(a1 + 11);
          __int16 v10 = (unsigned char *)(a3 + 25);
          uint64_t v11 = v8;
          do
          {
            char v12 = *v9++;
            *v10++ = v12;
            --v11;
          }
          while (v11);
        }
        LOBYTE(v3) = a1[v8 + 11];
        unsigned int v7 = (v8 + 12);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    if (v3 >= 5u) {
      unint64_t v3 = 5;
    }
    else {
      unint64_t v3 = v3;
    }
    *(void *)(a3 + 37) = 0;
    *(void *)(a3 + 30) = 0;
    if (v3)
    {
      LOBYTE(v13) = v7 + 3;
      if (v7 + 3 <= a2)
      {
        int v14 = (unsigned char *)(a3 + 33);
        unint64_t v15 = 1;
        do
        {
          __int16 v16 = &a1[v7];
          unsigned int v17 = v16[1];
          *(v14 - 3) = *v16;
          *(v14 - 1) = v16[2];
          *(v14 - 2) = v17 & 0x7F;
          *int v14 = v17 >> 7;
          if (v15 >= v3) {
            break;
          }
          unsigned int v7 = v13;
          unsigned int v13 = v13 + 3;
          v14 += 4;
          ++v15;
        }
        while (v13 <= a2);
      }
    }
    *(unsigned char *)(a3 + 10) = v3;
  }
  return a2 > 9;
}

unsigned char *iAP2PacketGetMissingSeqFromEAK(void *a1, unsigned int a2, _DWORD *a3)
{
  LODWORD(v4) = 0;
  __int16 v5 = 0;
  if (a1 && a3)
  {
    uint64_t v8 = *a1;
    char v9 = (void **)iAP2BuffPoolGet(*(unsigned __int8 **)(*a1 + 256), 2 * a2);
    __int16 v10 = v9;
    uint64_t v11 = (char *)v9 + 2 * a2;
    int v12 = *(unsigned __int8 *)(a1[8] + 6);
    if (a2)
    {
      unsigned int v13 = (char *)v9;
      int v14 = *(unsigned __int8 *)(a1[8] + 6);
      do
      {
        *(_WORD *)unsigned int v13 = ++v14;
        v13 += 2;
      }
      while (v13 < v11);
    }
    unint64_t v15 = (unsigned char *)a1[9];
    int PayloadLen = iAP2PacketGetPayloadLen((uint64_t)a1);
    unsigned __int8 v17 = 0;
    if (PayloadLen)
    {
      unsigned int v18 = a2;
      char v19 = &v15[PayloadLen];
      do
      {
        int v20 = *v15 - v12;
        if (v20 && a2 >= v20)
        {
          unsigned int v21 = (*v15 - v12);
          if (v21 > v17) {
            unsigned __int8 v17 = *v15 - v12;
          }
          v18 -= *((__int16 *)v10 + v21 - 1) != -1;
          *((_WORD *)v10 + v21 - 1) = -1;
        }
        ++v15;
      }
      while (v15 < v19);
    }
    else
    {
      unsigned int v18 = a2;
    }
    unsigned int v22 = v18 - a2;
    uint64_t v4 = v22 + v17;
    if (v22 + v17 && (char v23 = iAP2BuffPoolGet(*(unsigned __int8 **)(v8 + 256), v22 + v17)) != 0)
    {
      __int16 v5 = v23;
      if (a2)
      {
        __int16 v24 = (char *)v10 + 2;
        int v25 = 1;
        __int16 v26 = v23;
        do
        {
          int v27 = *((unsigned __int16 *)v24 - 1);
          if (v27 != 0xFFFF)
          {
            unsigned int v28 = v25++;
            if (v28 <= v17) {
              *v26++ = v27;
            }
          }
          if (v24 >= v11) {
            break;
          }
          v24 += 2;
        }
        while (v26 < &v23[v4]);
      }
    }
    else
    {
      if (_iAP2LogEnableMask)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          __int16 v29 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          __int16 v29 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          int v31 = 136315650;
          unsigned int v32 = "/Library/Caches/com.apple.xbs/Sources/CoreAccessories/PublicShared/iAP2/iAP2LinkLayer/iAP2Link/iAP2Packet.c";
          __int16 v33 = 1024;
          int v34 = 1925;
          __int16 v35 = 1024;
          int v36 = v4;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Unable to get buffer for recv'd packet list! resultLen=%d\n", (uint8_t *)&v31, 0x18u);
        }
      }
      __int16 v5 = 0;
      LODWORD(v4) = 0;
    }
    iAP2BuffPoolReturn(*(unsigned __int8 **)(v8 + 256), v10);
  }
  if (a3) {
    *a3 = v4;
  }
  return v5;
}

uint64_t iAP2PacketCalcSeqGap(char a1, char a2)
{
  return (a2 - a1);
}

uint64_t iAP2PacketGetChecksum(unsigned __int16 *a1, int a2)
{
  if (a2 == 1) {
    return bswap32(*a1) >> 16;
  }
  if (!a2) {
    return *(unsigned __int8 *)a1;
  }
  if ((_iAP2LogEnableMask & 1) == 0) {
    return 0;
  }
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 20;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    __int16 v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    __int16 v5 = *(NSObject **)(gLogObjects + 152);
  }
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v6)
  {
    int v7 = 136315650;
    uint64_t v8 = "iAP2PacketGetChecksum";
    __int16 v9 = 1024;
    int v10 = 2247;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Unknown checksumType(%d)!", (uint8_t *)&v7, 0x18u);
    return 0;
  }
  return result;
}

BOOL iAP2PacketIsSeqACKd(char a1, char a2, unsigned int a3)
{
  return a3 >= (a2 - a1);
}

BOOL iAP2PacketRequireACK(uint64_t *a1)
{
  uint64_t v1 = a1[8];
  int v2 = *(unsigned __int8 *)(*a1 + 190);
  int v3 = *(unsigned __int8 *)(v1 + 5);
  unsigned int v4 = *((unsigned __int16 *)a1 + 27);
  BOOL result = 0;
  if (v4 > iAP2LinkCurPckHdrSize(*a1) && (v3 != v2 || *(char *)(v1 + 4) < 0))
  {
    unsigned int v5 = *(unsigned __int8 *)(v1 + 4);
    if (v5 >= 0x40 && (v5 & 0x20) == 0) {
      return 1;
    }
  }
  return result;
}

unsigned int *iAP2PacketAssignTimer(unsigned int *result, int a2)
{
  if (result)
  {
    char v2 = a2;
    int v3 = result;
    int v4 = *((unsigned __int8 *)result + 59);
    if (v4 != 255 && v4 != a2)
    {
      MainTimer = (unsigned int *)iAP2LinkGetMainTimer(*(void *)result);
      BOOL result = iAP2TimeCancelTimer(MainTimer, *((unsigned char *)v3 + 59));
    }
    *((unsigned char *)v3 + 59) = v2;
  }
  return result;
}

unsigned int *iAP2PacketRemoveTimer(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*((unsigned __int8 *)result + 59) != 255)
    {
      MainTimer = (unsigned int *)iAP2LinkGetMainTimer(*(void *)result);
      BOOL result = iAP2TimeCancelTimer(MainTimer, *((unsigned char *)v1 + 59));
    }
    *((unsigned char *)v1 + 59) = -1;
  }
  return result;
}

const char *iAP2PacketName(uint64_t a1)
{
  if (*(char *)(*(void *)(a1 + 64) + 4) < 0)
  {
    if ((*(unsigned char *)(*(void *)(a1 + 64) + 4) & 0x40) != 0) {
      return "SYN-ACK";
    }
    else {
      return "SYN";
    }
  }
  else if ((*(unsigned char *)(*(void *)(a1 + 64) + 4) & 0x20) != 0)
  {
    return "EAK";
  }
  else if ((*(unsigned char *)(*(void *)(a1 + 64) + 4) & 0x10) != 0)
  {
    return "RST";
  }
  else if ((*(unsigned char *)(*(void *)(a1 + 64) + 4) & 8) != 0)
  {
    return "SUS";
  }
  else if ((*(unsigned char *)(*(void *)(a1 + 64) + 4) & 0x40) != 0)
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 54);
    if (v2 <= iAP2LinkCurPckHdrSize(*(void *)a1)) {
      return "ACK";
    }
    else {
      return "DATA";
    }
  }
  else
  {
    return "UNKNOWN";
  }
}

_DWORD *iAP2PacketCopySessionInfo(_DWORD *result, _DWORD *a2)
{
  *BOOL result = *a2;
  return result;
}

void *acc_endpoint_create(uint64_t a1, unsigned int a2, unsigned int a3, const void *a4)
{
  ptr = 0;
  if (a1 && a2 <= 0xF && a3 <= 0x11)
  {
    CFStringRef v8 = CFCreateUUIDString();
    if (gLogObjects && gNumLogObjects >= 15)
    {
      __int16 v9 = *(NSObject **)(gLogObjects + 112);
    }
    else
    {
      __int16 v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)a1;
      if (*(unsigned char *)(a1 + 138)) {
        __int16 v11 = "YES";
      }
      else {
        __int16 v11 = "NO";
      }
      *(_DWORD *)buf = 138412802;
      *(void *)long long v54 = v8;
      *(_WORD *)&v54[8] = 2112;
      *(void *)&v54[10] = v10;
      *(_WORD *)&v54[18] = 2080;
      *(void *)int v55 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Creating endpoint %@ for connection %@ - connection published = %s...", buf, 0x20u);
    }
    ptr = malloc_type_calloc(1uLL, 0xC0uLL, 0x10E0040B3A48DD8uLL);
    if (ptr)
    {
      uint64_t v12 = gLogSignpostObjects;
      int v13 = gNumLogSignpostObjects;
      if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
      {
        int v14 = *(NSObject **)(gLogSignpostObjects + 16);
      }
      else
      {
        int v14 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)long long v54 = 2;
          *(_WORD *)&v54[4] = 2048;
          *(void *)&v54[6] = v12;
          *(_WORD *)&v54[14] = 1024;
          *(_DWORD *)&v54[16] = v13;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d", buf, 0x18u);
          uint64_t v12 = gLogSignpostObjects;
          int v13 = gNumLogSignpostObjects;
        }
      }
      if (v12 && v13 >= 3)
      {
        unint64_t v15 = *(NSObject **)(v12 + 16);
      }
      else
      {
        unint64_t v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          acc_endpoint_create_cold_5();
        }
      }
      os_signpost_id_t v16 = os_signpost_id_make_with_pointer(v15, ptr);
      if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v17 = v16;
        if (os_signpost_enabled(v14))
        {
          *(_DWORD *)buf = 138413058;
          *(void *)long long v54 = v8;
          *(_WORD *)&v54[8] = 1024;
          *(_DWORD *)&v54[10] = a2;
          *(_WORD *)&v54[14] = 1024;
          *(_DWORD *)&v54[16] = a3;
          *(_WORD *)int v55 = 2112;
          *(void *)&v55[2] = a4;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_BEGIN, v17, "Endpoint", "Create endpoint %@, type %{coreacc:ACCEndpoint_TransportType_t}d, protocol %{coreacc:ACCEndpoint_Protocol_t}d, identifier %@", buf, 0x22u);
        }
      }
      unsigned int v18 = ptr;
      *((unsigned char *)ptr + 88) = 0;
      v18[120] = 0;
      *(void *)unsigned int v18 = a1;
      CFTypeRef v19 = *(CFTypeRef *)a1;
      if (*(void *)a1) {
        CFTypeRef v19 = CFRetain(v19);
      }
      int v20 = ptr;
      *((void *)ptr + 1) = v19;
      v20[2] = v8;
      *((_DWORD *)v20 + 6) = a2;
      *((_DWORD *)v20 + 7) = a3;
      if (a4)
      {
        CFTypeRef v21 = CFRetain(a4);
        int v20 = ptr;
      }
      else
      {
        CFTypeRef v21 = 0;
      }
      v20[4] = v21;
      unint64_t CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
      char v23 = (pthread_mutex_t *)ptr;
      *((void *)ptr + 5) = CurrentUnixTimeMS;
      *(void *)&v23->__opaque[40] = 0;
      *(_DWORD *)&v23[1].__opaque[20] = -1;
      *(void *)&v23[1].__opaque[40] = 0;
      v23[1].__sig = 0;
      *(void *)v23[1].__opaque = 0;
      *(void *)&v23->__opaque[48] = 0;
      pthread_mutex_init(v23 + 2, 0);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      unsigned int v32 = ptr;
      *((void *)ptr + 10) = Mutable;
      if (v32[7]) {
        acc_protocolRouter_initProtocolLayer((uint64_t)v32, v24, v25, v26, v27, v28, v29, v30);
      }
      CFDictionaryRef v33 = *(const __CFDictionary **)(a1 + 40);
      if (!v33 || CFDictionaryGetValueIfPresent(v33, *((const void **)ptr + 2), 0))
      {
        acc_endpoint_destroy(&ptr);
      }
      else
      {
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 40), *((const void **)ptr + 2), ptr);
        acc_connection_mapAccessoryInfo((uint64_t *)a1);
        int v34 = ptr;
        *((unsigned char *)ptr + 121) = 0;
        BOOL isTransportSupervised = acc_policies_isTransportSupervised(v34[6], *(_DWORD *)(a1 + 8));
        BOOL isTransportRestricted = acc_endpoint_isTransportRestricted((unsigned int *)ptr);
        if (gLogObjects && gNumLogObjects >= 15)
        {
          int v37 = *(NSObject **)(gLogObjects + 112);
        }
        else
        {
          int v37 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          __int16 v38 = "NO";
          if (isTransportSupervised) {
            char v39 = "YES";
          }
          else {
            char v39 = "NO";
          }
          uint64_t v40 = *((void *)ptr + 1);
          uint64_t v41 = *((void *)ptr + 2);
          if (isTransportRestricted) {
            __int16 v38 = "YES";
          }
          *(_DWORD *)buf = 136315906;
          *(void *)long long v54 = v39;
          *(_WORD *)&v54[8] = 2080;
          *(void *)&v54[10] = v38;
          *(_WORD *)&v54[18] = 2112;
          *(void *)int v55 = v41;
          *(_WORD *)&v55[8] = 2112;
          uint64_t v56 = v40;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "isTransportSupervised: %s, isTransportRestricted: %s (endpointUUID: %@, connectionUUID: %@)", buf, 0x2Au);
        }
        if (isTransportRestricted)
        {
          if (gLogObjects && gNumLogObjects >= 15)
          {
            char v42 = *(NSObject **)(gLogObjects + 112);
          }
          else
          {
            char v42 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v43 = *((void *)ptr + 1);
            uint64_t v44 = *((void *)ptr + 2);
            *(_DWORD *)buf = 138412546;
            *(void *)long long v54 = v44;
            *(_WORD *)&v54[8] = 2112;
            *(void *)&v54[10] = v43;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Created endpoint with restricted transport! (endpointUUID: %@, connectionUUID: %@)", buf, 0x16u);
          }
        }
        else if (isTransportSupervised)
        {
          *((unsigned char *)ptr + 121) = 1;
          acc_restrictedMode_accessoryAttached();
        }
        unsigned int v45 = ptr;
        *((unsigned char *)ptr + 88) = 1;
        CFStringRef v46 = acc_endpoint_copyDescription((uint64_t)v45);
        if (gLogObjects && gNumLogObjects >= 15)
        {
          __int16 v47 = *(NSObject **)(gLogObjects + 112);
        }
        else
        {
          __int16 v47 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)long long v54 = v46;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "[#Events] Created endpoint %@!", buf, 0xCu);
        }
        if (v46) {
          CFRelease(v46);
        }
        if (gLogObjects && gNumLogObjects >= 15)
        {
          uint64_t v48 = *(NSObject **)(gLogObjects + 112);
        }
        else
        {
          uint64_t v48 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
        {
          CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40));
          uint64_t v50 = *(void *)a1;
          *(_DWORD *)buf = 134218242;
          *(void *)long long v54 = Count;
          *(_WORD *)&v54[8] = 2112;
          *(void *)&v54[10] = v50;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "There are now %ld endpoint(s) for connection %@.", buf, 0x16u);
        }
      }
    }
  }
  return ptr;
}

void **acc_endpoint_destroy(void **result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = (uint64_t)*result;
  if (!*result || !*(void *)v2) {
    return 0;
  }
  *(unsigned char *)(v2 + 120) = 1;
  CFStringRef v3 = acc_endpoint_copyDescription(v2);
  if (gLogObjects && gNumLogObjects >= 15)
  {
    int v4 = *(NSObject **)(gLogObjects + 112);
  }
  else
  {
    int v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v36 = 138412290;
    *(void *)int v37 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#Events] Destroying endpoint %@...", (uint8_t *)&v36, 0xCu);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (acc_endpoint_isTransportRestricted((unsigned int *)v2))
  {
    if (gLogObjects && gNumLogObjects >= 15)
    {
      uint64_t v12 = *(NSObject **)(gLogObjects + 112);
    }
    else
    {
      uint64_t v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(v2 + 8);
      uint64_t v13 = *(void *)(v2 + 16);
      int v36 = 138412546;
      *(void *)int v37 = v13;
      *(_WORD *)&v37[8] = 2112;
      *(void *)&v37[10] = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Destroying endpoint with restricted transport...  (endpointUUID: %@, connectionUUID: %@)", (uint8_t *)&v36, 0x16u);
    }
  }
  if (*(unsigned char *)(v2 + 121)
    && acc_policies_isTransportSupervised(*(_DWORD *)(v2 + 24), *(_DWORD *)(*(void *)v2 + 8)))
  {
    acc_restrictedMode_accessoryDetached();
  }
  int v15 = *(_DWORD *)(v2 + 28);
  if ((v15 | 2) == 7)
  {
    platform_externalAccessory_removeEAAccessoryForPrimaryEndpoint(*(void **)(v2 + 16));
    int v15 = *(_DWORD *)(v2 + 28);
  }
  if (v15 == 1) {
    platform_externalAccessory_removeEAAccessoryForPrimaryEndpoint(*(void **)(v2 + 16));
  }
  if (*(unsigned char *)(v2 + 89))
  {
    platform_analytics_endpointWillBeDestroyed((uint64_t *)v2);
    if (*(unsigned char *)(v2 + 89)) {
      platform_connectionInfo_accessoryEndpointDetached(*(void *)(v2 + 8), *(void *)(v2 + 16));
    }
  }
  os_signpost_id_t v16 = *(const void **)(v2 + 16);
  if (v16) {
    CFTypeRef v17 = CFRetain(v16);
  }
  else {
    CFTypeRef v17 = 0;
  }
  uint64_t v18 = *(void *)v2;
  if (*(void *)v2)
  {
    CFDictionaryRef v19 = *(const __CFDictionary **)(v18 + 40);
    if (v19)
    {
      if (CFDictionaryGetValueIfPresent(v19, *(const void **)(v2 + 16), 0)) {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)v2 + 40), *(const void **)(v2 + 16));
      }
      if (acc_connection_isPublished(v18)) {
        acc_connection_publish(v18);
      }
    }
  }
  acc_protocolRouter_destroyProtocolLayer(v2, v5, v6, v7, v8, v9, v10, v11);
  acc_protocolParser_destroy(v2 + 48);
  if (*(void *)v18) {
    CFTypeRef v20 = CFRetain(*(CFTypeRef *)(v2 + 8));
  }
  else {
    CFTypeRef v20 = 0;
  }
  CFTypeRef v21 = *(const void **)(v2 + 112);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(v2 + 112) = 0;
  }
  unsigned int v22 = *(const void **)(v2 + 16);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(v2 + 16) = 0;
  }
  char v23 = *(const void **)(v2 + 8);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(v2 + 8) = 0;
  }
  uint64_t v24 = *(const void **)(v2 + 32);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(v2 + 32) = 0;
  }
  acc_accInfo_destroy((void **)(v2 + 64));
  uint64_t v25 = *(const void **)(v2 + 72);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(v2 + 72) = 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 128));
  uint64_t v26 = *(const void **)(v2 + 80);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(v2 + 80) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 128));
  pthread_mutex_destroy((pthread_mutex_t *)(v2 + 128));
  if (*v1)
  {
    free(*v1);
    unsigned int *v1 = 0;
  }
  uint64_t v27 = gLogSignpostObjects;
  int v28 = gNumLogSignpostObjects;
  if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
  {
    uint64_t v29 = *(NSObject **)(gLogSignpostObjects + 16);
    if (!gLogSignpostObjects)
    {
LABEL_66:
      uint64_t v30 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        acc_endpoint_create_cold_5();
      }
      goto LABEL_68;
    }
  }
  else
  {
    uint64_t v29 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v36 = 67109632;
      *(_DWORD *)int v37 = 2;
      *(_WORD *)&v37[4] = 2048;
      *(void *)&v37[6] = v27;
      *(_WORD *)&v37[14] = 1024;
      *(_DWORD *)&v37[16] = v28;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d", (uint8_t *)&v36, 0x18u);
      uint64_t v27 = gLogSignpostObjects;
      int v28 = gNumLogSignpostObjects;
      if (!gLogSignpostObjects) {
        goto LABEL_66;
      }
    }
    else if (!v27)
    {
      goto LABEL_66;
    }
  }
  if (v28 < 3) {
    goto LABEL_66;
  }
  uint64_t v30 = *(NSObject **)(v27 + 16);
LABEL_68:
  os_signpost_id_t v31 = os_signpost_id_make_with_pointer(v30, (const void *)v2);
  if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v32 = v31;
    if (os_signpost_enabled(v29))
    {
      int v36 = 138412290;
      *(void *)int v37 = v17;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_INTERVAL_END, v32, "Endpoint", "Destroy endpoint %@", (uint8_t *)&v36, 0xCu);
    }
  }
  if (gLogObjects && gNumLogObjects >= 15)
  {
    CFDictionaryRef v33 = *(NSObject **)(gLogObjects + 112);
  }
  else
  {
    CFDictionaryRef v33 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    int v36 = 138412546;
    *(void *)int v37 = v17;
    *(_WORD *)&v37[8] = 2112;
    *(void *)&v37[10] = v20;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Destroyed endpoint %@ for connection %@!", (uint8_t *)&v36, 0x16u);
  }
  if (*(void *)(v18 + 40))
  {
    if (gLogObjects && gNumLogObjects >= 15)
    {
      int v34 = *(NSObject **)(gLogObjects + 112);
    }
    else
    {
      int v34 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v18 + 40));
      int v36 = 134218242;
      *(void *)int v37 = Count;
      *(_WORD *)&v37[8] = 2112;
      *(void *)&v37[10] = v20;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "There are now %ld endpoint(s) for connection %@.", (uint8_t *)&v36, 0x16u);
    }
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v20) {
    CFRelease(v20);
  }
  return (void **)1;
}

BOOL acc_endpoint_isTransportRestricted(unsigned int *a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t v2 = *(void *)a1;
  return !v2
      || acc_connection_getSupervisedTransportsRestricted(v2)
      && acc_policies_isTransportSupervised(a1[6], *(_DWORD *)(*(void *)a1 + 8));
}

CFStringRef acc_endpoint_copyDescription(uint64_t a1)
{
  if (!a1 || !*(void *)a1) {
    return 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  CFStringRef v3 = &kACCEndpoint_TransportType_Strings[17];
  if (v2 < 0x10) {
    CFStringRef v3 = &kACCEndpoint_TransportType_Strings[v2];
  }
  uint64_t v4 = *v3;
  if (*(_DWORD *)(a1 + 28) >= 0x12u) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(unsigned int *)(a1 + 28);
  }
  uint64_t v6 = kACCEndpoint_Protocol_Strings[v5];
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 32);
  unint64_t CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
  uint64_t v8 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 56)) {
    uint64_t v9 = "YES";
  }
  else {
    uint64_t v9 = "NO";
  }
  if (*(void *)(a1 + 64)) {
    uint64_t v10 = "YES";
  }
  else {
    uint64_t v10 = "NO";
  }
  CFDictionaryRef v11 = *(const __CFDictionary **)(a1 + 72);
  if (v11) {
    CFIndex Count = CFDictionaryGetCount(v11);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t v13 = CurrentUnixTimeMS - v8;
  CFDictionaryRef v14 = *(const __CFDictionary **)(a1 + 80);
  if (v14) {
    CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetCount(v14);
  }
  if (*(unsigned char *)(a1 + 89)) {
    int v15 = "YES";
  }
  else {
    int v15 = "NO";
  }
  CFStringRef v16 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"<ACCEndpoint_t: %@; parentConnectionUUID: %@; transportType: [%s]; protocol: [%s]; identifier: %@; creationTimestampMS: %llu; durationMS: %llu; protocolEndpoint: %s; accessoryInfo: %s; numAccessoryInfoOverrides: %ld; numProperties: %ld, published: %s>",
          v21,
          v20,
          v4,
          v6,
          v19,
          v18,
          v13,
          v9,
          v10,
          Count,
          v14,
          v15);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 128));
  return v16;
}

uint64_t acc_endpoint_setAccessoryInfo(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 15;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(gLogObjects + 112);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 16);
    int v18 = 138412290;
    uint64_t v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting accessory info for endpoint %@...", (uint8_t *)&v18, 0xCu);
  }
  uint64_t v7 = *(void *)(a1 + 64);
  if (!v7)
  {
    uint64_t v9 = acc_accInfo_create();
    uint64_t v8 = 0;
    *(void *)(a1 + 64) = v9;
    if (v9) {
      goto LABEL_13;
    }
    return 0;
  }
  uint64_t v8 = acc_accInfo_copyAccessoryInfoDictionary(v7);
  uint64_t v9 = *(char **)(a1 + 64);
  if (!v9) {
    return 0;
  }
LABEL_13:
  int v10 = acc_accInfo_setAccessoryInfo((uint64_t)v9, a2);
  BOOL v11 = _processAccessoryInfoOverrides(a1);
  uint64_t v12 = acc_accInfo_copyAccessoryInfoDictionary(*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 89))
  {
    platform_analytics_endpointAccessoryInfoDidChange((uint64_t *)a1, (uint64_t)v8, v12);
    acc_connection_updateAcccessoryInfoIfNeeded(*(void *)a1, *(const void **)(a1 + 16));
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v12) {
    CFRelease(v12);
  }
  CFStringRef v13 = acc_accInfo_copyAccessoryInfoDescription(*(CFStringRef *)(a1 + 64));
  if (gLogObjects && gNumLogObjects >= 15)
  {
    CFDictionaryRef v14 = *(NSObject **)(gLogObjects + 112);
  }
  else
  {
    CFDictionaryRef v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 16);
    int v18 = 138412546;
    uint64_t v19 = v15;
    __int16 v20 = 2112;
    CFStringRef v21 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[#Events] Accessory info for endpoint %@ did change: %@", (uint8_t *)&v18, 0x16u);
  }
  uint64_t v16 = v10 & v11;
  if (v13) {
    CFRelease(v13);
  }
  acc_connection_mapAccessoryInfo(*(uint64_t **)a1);
  return v16;
}

BOOL _processAccessoryInfoOverrides(uint64_t a1)
{
  if (a1)
  {
    CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 72);
    if (v2)
    {
      if (CFDictionaryGetCount(v2) >= 1)
      {
        CFStringRef v3 = *(char **)(a1 + 64);
        if (v3 || (CFStringRef v3 = acc_accInfo_create(), (*(void *)(a1 + 64) = v3) != 0)) {
          acc_accInfo_updateAccessoryInfoWithDictionary((uint64_t)v3, *(const __CFDictionary **)(a1 + 72));
        }
      }
    }
    platform_externalAccessory_updateEAAccessoryInfoForEndpointWithUUID(*(void **)(a1 + 16));
    if (*(unsigned char *)(a1 + 89) && *(void *)a1) {
      platform_connectionInfo_accessoryEndpointInfoPropertyChanged(*(void *)(a1 + 8), *(const void **)(a1 + 16));
    }
  }
  return a1 != 0;
}

uint64_t acc_endpoint_setAccessoryInfoWithDictionary(uint64_t a1, const __CFDictionary *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4)
  {
    uint64_t v6 = acc_accInfo_create();
    uint64_t v5 = 0;
    *(void *)(a1 + 64) = v6;
    if (v6) {
      goto LABEL_4;
    }
    return 0;
  }
  uint64_t v5 = acc_accInfo_copyAccessoryInfoDictionary(v4);
  uint64_t v6 = *(char **)(a1 + 64);
  if (!v6) {
    return 0;
  }
LABEL_4:
  int v7 = acc_accInfo_setAccessoryInfoWithDictionary((uint64_t)v6, a2);
  BOOL v8 = _processAccessoryInfoOverrides(a1);
  uint64_t v9 = acc_accInfo_copyAccessoryInfoDictionary(*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 89)) {
    platform_analytics_endpointAccessoryInfoDidChange((uint64_t *)a1, (uint64_t)v5, v9);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v9) {
    CFRelease(v9);
  }
  CFStringRef v10 = acc_accInfo_copyAccessoryInfoDescription(*(CFStringRef *)(a1 + 64));
  if (gLogObjects && gNumLogObjects >= 15)
  {
    BOOL v11 = *(NSObject **)(gLogObjects + 112);
  }
  else
  {
    BOOL v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v15 = 138412546;
    uint64_t v16 = v12;
    __int16 v17 = 2112;
    CFStringRef v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[#Events] Accessory info for endpoint %@ did change: %@", (uint8_t *)&v15, 0x16u);
  }
  uint64_t v13 = v7 & v8;
  if (v10) {
    CFRelease(v10);
  }
  acc_connection_mapAccessoryInfo(*(uint64_t **)a1);
  return v13;
}

BOOL acc_endpoint_setAccessoryInfoOverridesWithDictionary(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 15;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(gLogObjects + 112);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(const void **)(a1 + 16);
    int v16 = 138412290;
    __int16 v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting accessory info overrides for endpoint %@...", (uint8_t *)&v16, 0xCu);
  }
  if (gLogObjects && gNumLogObjects >= 15)
  {
    int v7 = *(NSObject **)(gLogObjects + 112);
  }
  else
  {
    int v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v16 = 138412290;
    __int16 v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "accessoryInfoOverrides: %@", (uint8_t *)&v16, 0xCu);
  }
  BOOL v8 = acc_accInfo_copyAccessoryInfoDictionary(*(void *)(a1 + 64));
  uint64_t v9 = *(const void **)(a1 + 72);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 72) = 0;
  }
  if (a2) {
    *(void *)(a1 + 72) = CFRetain(a2);
  }
  BOOL v10 = _processAccessoryInfoOverrides(a1);
  BOOL v11 = acc_accInfo_copyAccessoryInfoDictionary(*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 89)) {
    platform_analytics_endpointAccessoryInfoDidChange((uint64_t *)a1, (uint64_t)v8, v11);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v11) {
    CFRelease(v11);
  }
  CFStringRef v12 = acc_accInfo_copyAccessoryInfoDescription(*(CFStringRef *)(a1 + 64));
  if (gLogObjects && gNumLogObjects >= 15)
  {
    uint64_t v13 = *(NSObject **)(gLogObjects + 112);
  }
  else
  {
    uint64_t v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    CFDictionaryRef v14 = *(const void **)(a1 + 16);
    int v16 = 138412546;
    __int16 v17 = v14;
    __int16 v18 = 2112;
    CFStringRef v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[#Events] Accessory info for endpoint %@ did change: %@", (uint8_t *)&v16, 0x16u);
  }
  if (v12) {
    CFRelease(v12);
  }
  acc_connection_mapAccessoryInfo(*(uint64_t **)a1);
  return v10;
}

uint64_t acc_endpoint_clearAccessoryInfo(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    CFDictionaryRef v2 = (uint64_t *)(a1 + 64);
    CFStringRef v3 = acc_accInfo_copyAccessoryInfoDictionary(*(void *)(a1 + 64));
    BOOL v4 = acc_accInfo_destroy((void **)(v1 + 64));
    BOOL v5 = _processAccessoryInfoOverrides(v1);
    uint64_t v6 = acc_accInfo_copyAccessoryInfoDictionary(*v2);
    if (*(unsigned char *)(v1 + 89)) {
      platform_analytics_endpointAccessoryInfoDidChange((uint64_t *)v1, (uint64_t)v3, v6);
    }
    uint64_t v1 = v4 & v5;
    if (v3) {
      CFRelease(v3);
    }
    if (v6) {
      CFRelease(v6);
    }
  }
  return v1;
}

uint64_t acc_endpoint_publish(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    int v2 = *(unsigned __int8 *)(result + 89);
    if (!*(unsigned char *)(result + 89)) {
      platform_analytics_endpointWillBePublished(result);
    }
    switch(*((_DWORD *)v1 + 7))
    {
      case 7:
        ea_endpoint_publish(v1[7]);
        goto LABEL_16;
      case 8:
        oobPairing_endpoint_publish((uint64_t)v1[7], (uint64_t)v1[8]);
        goto LABEL_16;
      case 0xA:
        if (accAuthProtocol_endpoint_publish((uint64_t)v1[7], (uint64_t)v1[8])) {
          goto LABEL_16;
        }
        return 0;
      case 0xD:
        audioProductCerts_endpoint_publish(v1[7], (uint64_t)v1[8]);
        goto LABEL_16;
      case 0xE:
        mfi4Auth_endpoint_publish((uint64_t)v1[7]);
        goto LABEL_16;
      case 0xF:
        if (accSNTPTimeSync_endpoint_publish((uint64_t)v1[7])) {
          goto LABEL_16;
        }
        return 0;
      case 0x10:
        if (platform_systemInfo_supportsQiAuth()) {
          qiAuth_endpoint_publish(v1[7]);
        }
        goto LABEL_16;
      case 0x11:
        BOOL result = t56_endpoint_publish((uint64_t)v1[7]);
        if (result) {
          goto LABEL_16;
        }
        return result;
      default:
LABEL_16:
        if (!acc_accInfo_isConsideredEmpty((uint64_t)v1[8])) {
          goto LABEL_93;
        }
        if (*((_DWORD *)v1 + 7) != 5) {
          goto LABEL_93;
        }
        CFStringRef v3 = (char *)*v1;
        if (!*v1 || *((_DWORD *)v3 + 2) != 6) {
          goto LABEL_93;
        }
        uint64_t AccessoryInfo = acc_connection_getAccessoryInfo((uint64_t)v3);
        BOOL v5 = acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);
        if (gLogObjects && gNumLogObjects >= 15)
        {
          uint64_t v6 = *(NSObject **)(gLogObjects + 112);
        }
        else
        {
          uint64_t v6 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          acc_endpoint_publish_cold_10();
          if (v5) {
            goto LABEL_27;
          }
        }
        else if (v5)
        {
LABEL_27:
          uint64_t v72 = AccessoryInfo;
          int v7 = acc_connection_copyProperty((char *)*v1, @"AID Info");
          if (gLogObjects && gNumLogObjects >= 15)
          {
            BOOL v8 = *(NSObject **)(gLogObjects + 112);
          }
          else
          {
            BOOL v8 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            acc_endpoint_publish_cold_8();
            if (v7) {
              goto LABEL_34;
            }
          }
          else if (v7)
          {
LABEL_34:
            CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v7, @"MikeyBus Info");
LABEL_45:
            if (gLogObjects && gNumLogObjects >= 15)
            {
              uint64_t v13 = *(NSObject **)(gLogObjects + 112);
            }
            else
            {
              uint64_t v13 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              acc_endpoint_publish_cold_6();
              if (Value) {
                goto LABEL_52;
              }
            }
            else if (Value)
            {
LABEL_52:
              CFDictionaryRef v14 = (const __CFDictionary *)v5;
              CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"Product Name");
              int v16 = CFDictionaryGetValue(Value, @"Product Model Number");
              __int16 v17 = CFDictionaryGetValue(Value, @"Product Hardware Revision");
              CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"Product Firmware Revision");
LABEL_55:
              if (gLogObjects && gNumLogObjects >= 15)
              {
                __int16 v18 = *(NSObject **)(gLogObjects + 112);
              }
              else
              {
                __int16 v18 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
              {
                CFStringRef v19 = v1[2];
                __int16 v20 = v1[4];
                *(_DWORD *)buf = 136316674;
                __int16 v74 = "acc_endpoint_publish";
                __int16 v75 = 2112;
                unsigned int v76 = v19;
                __int16 v77 = 2112;
                int v78 = v20;
                __int16 v79 = 2112;
                CFDictionaryRef v80 = v15;
                __int16 v81 = 2112;
                long long v82 = v16;
                __int16 v83 = 2112;
                long long v84 = v17;
                __int16 v85 = 2112;
                CFDictionaryRef v86 = Value;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s: endpoint %@, identifier %@, mikeyBusName %@, mikeyBusModel %@, mikeyBusHWRev %@, mikeyBusFWRev %@", buf, 0x48u);
              }
              CFDictionaryRef Copy = v14;
              if (v1[4])
              {
                if (v17)
                {
                  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v14);
                  char v23 = (const void *)kCFACCInfo_HardwareVersion;
                  CFDictionarySetValue(MutableCopy, kCFACCInfo_HardwareVersion, v17);
                  CFRelease(v14);
                  uint64_t v24 = logObjectForModule_2();
                  uint64_t v25 = v16;
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v26 = v1[2];
                    uint64_t v27 = *(void **)(v72 + 32);
                    CFDictionaryRef v28 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, v23);
                    uint64_t v29 = v1[4];
                    *(_DWORD *)buf = 136316162;
                    __int16 v74 = "acc_endpoint_publish";
                    __int16 v75 = 2112;
                    unsigned int v76 = v26;
                    __int16 v77 = 2112;
                    int v78 = v27;
                    __int16 v79 = 2112;
                    CFDictionaryRef v80 = v28;
                    __int16 v81 = 2112;
                    long long v82 = v29;
                    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%s: endpoint %@, override hwVer from mikeyBus info '%@' -> '%@', identifier %@", buf, 0x34u);
                  }
                  CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, MutableCopy);
                  CFRelease(MutableCopy);
                }
                else
                {
                  uint64_t v25 = v16;
                }
                if (Value)
                {
                  os_signpost_id_t v31 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, Copy);
                  os_signpost_id_t v32 = (const void *)kCFACCInfo_FirmwareVersionActive;
                  CFDictionarySetValue(v31, kCFACCInfo_FirmwareVersionActive, Value);
                  CFRelease(Copy);
                  CFDictionaryRef v33 = logObjectForModule_2();
                  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                  {
                    int v34 = v1[2];
                    __int16 v35 = *(void **)(v72 + 32);
                    CFDictionaryRef v36 = (const __CFDictionary *)CFDictionaryGetValue(v31, v32);
                    int v37 = v1[4];
                    *(_DWORD *)buf = 136316162;
                    __int16 v74 = "acc_endpoint_publish";
                    __int16 v75 = 2112;
                    unsigned int v76 = v34;
                    __int16 v77 = 2112;
                    int v78 = v35;
                    __int16 v79 = 2112;
                    CFDictionaryRef v80 = v36;
                    __int16 v81 = 2112;
                    long long v82 = v37;
                    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%s: endpoint %@, override fwVer from mikeyBus info '%@' -> '%@', identifier %@", buf, 0x34u);
                  }
                  CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v31);
                  CFRelease(v31);
                }
                uint64_t v30 = (void *)&unk_100239000;
                if (v25)
                {
                  __int16 v38 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, Copy);
                  char v39 = (const void *)kCFACCInfo_Model;
                  CFDictionarySetValue(v38, kCFACCInfo_Model, v25);
                  CFRelease(Copy);
                  uint64_t v40 = logObjectForModule_2();
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v41 = v1[2];
                    char v42 = *(void **)(v72 + 16);
                    CFDictionaryRef v43 = (const __CFDictionary *)CFDictionaryGetValue(v38, v39);
                    uint64_t v44 = v1[4];
                    *(_DWORD *)buf = 136316162;
                    __int16 v74 = "acc_endpoint_publish";
                    __int16 v75 = 2112;
                    unsigned int v76 = v41;
                    __int16 v77 = 2112;
                    int v78 = v42;
                    uint64_t v30 = (void *)&unk_100239000;
                    __int16 v79 = 2112;
                    CFDictionaryRef v80 = v43;
                    __int16 v81 = 2112;
                    long long v82 = v44;
                    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "%s: endpoint %@, override model from mikeyBus info '%@' -> '%@', identifier %@", buf, 0x34u);
                  }
                  CFAllocatorRef v45 = kCFAllocatorDefault;
                }
                else
                {
                  uint64_t v46 = v72;
                  if ((acc_policies_shouldHideAccessoryWithModelNumber(*(void *)(v72 + 16)) & 1) == 0
                    && platform_externalAccessory_isEAProtocolContainedInAllowList(v1[4]))
                  {
                    __int16 v47 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, Copy);
                    uint64_t v48 = (const void *)kCFACCInfo_Model;
                    CFDictionarySetValue(v47, kCFACCInfo_Model, @"X90");
                    CFRelease(Copy);
                    unsigned int v49 = logObjectForModule_2();
                    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v50 = v1[2];
                      int v51 = *(void **)(v72 + 16);
                      CFDictionaryRef v52 = (const __CFDictionary *)CFDictionaryGetValue(v47, v48);
                      __int16 v53 = v1[4];
                      *(_DWORD *)buf = 136316162;
                      __int16 v74 = "acc_endpoint_publish";
                      __int16 v75 = 2112;
                      unsigned int v76 = v50;
                      __int16 v77 = 2112;
                      int v78 = v51;
                      uint64_t v30 = &unk_100239000;
                      __int16 v79 = 2112;
                      CFDictionaryRef v80 = v52;
                      __int16 v81 = 2112;
                      long long v82 = v53;
                      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "%s: endpoint %@, override model '%@' -> '%@', identifier %@", buf, 0x34u);
                    }
                    CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v47);
                    CFRelease(v47);
                    uint64_t v46 = v72;
                  }
                  if (!acc_policies_shouldHideAccessoryWithModelNumber(*(void *)(v46 + 16))
                    || (platform_externalAccessory_isEAProtocolContainedInAllowList(v1[4]) & 1) != 0)
                  {
                    goto LABEL_85;
                  }
                  __int16 v38 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, Copy);
                  char v65 = (const void *)kCFACCInfo_Model;
                  CFDictionarySetValue(v38, kCFACCInfo_Model, *(const void **)v46);
                  CFRelease(Copy);
                  uint64_t v66 = v46;
                  int32x2_t v67 = logObjectForModule_2();
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
                  {
                    long long v68 = v1[2];
                    __int16 v69 = *(void **)(v66 + 16);
                    CFDictionaryRef v70 = (const __CFDictionary *)CFDictionaryGetValue(v38, v65);
                    __int16 v71 = v1[4];
                    *(_DWORD *)buf = 136316162;
                    __int16 v74 = "acc_endpoint_publish";
                    __int16 v75 = 2112;
                    unsigned int v76 = v68;
                    __int16 v77 = 2112;
                    int v78 = v69;
                    uint64_t v30 = (void *)&unk_100239000;
                    __int16 v79 = 2112;
                    CFDictionaryRef v80 = v70;
                    __int16 v81 = 2112;
                    long long v82 = v71;
                    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "%s: endpoint %@, override model '%@' -> '%@', identifier %@", buf, 0x34u);
                  }
                  CFAllocatorRef v45 = kCFAllocatorDefault;
                }
                CFDictionaryRef Copy = CFDictionaryCreateCopy(v45, v38);
                CFRelease(v38);
              }
              else
              {
                uint64_t v30 = (void *)&unk_100239000;
              }
LABEL_85:
              uint64_t v54 = v30[49];
              if (v54 && gNumLogObjects >= 15)
              {
                int v55 = *(NSObject **)(v54 + 112);
              }
              else
              {
                int v55 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v56 = (void *)**v1;
                int v57 = v1[2];
                *(_DWORD *)buf = 136315906;
                __int16 v74 = "acc_endpoint_publish";
                __int16 v75 = 2112;
                unsigned int v76 = v56;
                __int16 v77 = 2112;
                int v78 = v57;
                __int16 v79 = 2112;
                CFDictionaryRef v80 = Copy;
                _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "%s: Copy accInfo from connection %@ for endpoint %@! accInfo %@", buf, 0x2Au);
              }
              acc_endpoint_setAccessoryInfoWithDictionary((uint64_t)v1, Copy);
              CFRelease(Copy);
              goto LABEL_93;
            }
            CFDictionaryRef v14 = (const __CFDictionary *)v5;
            CFDictionaryRef v15 = 0;
            int v16 = 0;
            __int16 v17 = 0;
            goto LABEL_55;
          }
          CFDictionaryRef Value = 0;
          goto LABEL_45;
        }
        if (gLogObjects && gNumLogObjects >= 15)
        {
          BOOL v10 = *(NSObject **)(gLogObjects + 112);
        }
        else
        {
          BOOL v10 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v11 = (void *)**v1;
          CFStringRef v12 = v1[2];
          *(_DWORD *)buf = 136315650;
          __int16 v74 = "acc_endpoint_publish";
          __int16 v75 = 2112;
          unsigned int v76 = v11;
          __int16 v77 = 2112;
          int v78 = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%s: connection %@ doesn't have accInfo yet to copy from for endpoint %@!", buf, 0x20u);
        }
LABEL_93:
        if (v2)
        {
          *((unsigned char *)v1 + 89) = 1;
          if (*((_DWORD *)v1 + 7) == 1) {
            platform_externalAccessory_updateEAAccessoryInfoForEndpointWithUUID(v1[2]);
          }
          if (gLogObjects && gNumLogObjects >= 15)
          {
            uint64_t v58 = *(NSObject **)(gLogObjects + 112);
          }
          else
          {
            uint64_t v58 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
          {
            unsigned __int8 v62 = (const char *)v1[2];
            *(_DWORD *)buf = 138412290;
            __int16 v74 = v62;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Re-published endpoint %@!", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v59 = *((unsigned int *)v1 + 7);
          if (*v1)
          {
            platform_connectionInfo_accessoryEndpointAttached((uint64_t)v1[1], v1[2], *((unsigned int *)v1 + 6), v59);
            LODWORD(v59) = *((_DWORD *)v1 + 7);
          }
          *((unsigned char *)v1 + 89) = 1;
          if (v59 == 1) {
            platform_externalAccessory_addEAAccessoryForPrimaryEndpoint((const char *)v1[2]);
          }
          CFStringRef v60 = acc_endpoint_copyDescription((uint64_t)v1);
          if (gLogObjects && gNumLogObjects >= 15)
          {
            __int16 v61 = *(NSObject **)(gLogObjects + 112);
          }
          else
          {
            __int16 v61 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int16 v74 = (const char *)v60;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "[#Events] Published endpoint %@!", buf, 0xCu);
          }
          if (v60) {
            CFRelease(v60);
          }
        }
        uint64_t v63 = (uint64_t)v1[8];
        if (v63)
        {
          int v64 = acc_accInfo_copyAccessoryInfoDictionary(v63);
          platform_analytics_endpointAccessoryInfoDidChange((uint64_t *)v1, 0, v64);
          if (v64) {
            CFRelease(v64);
          }
        }
        BOOL result = 1;
        break;
    }
  }
  return result;
}

BOOL acc_endpoint_setProperties(pthread_mutex_t *a1, const __CFDictionary *a2)
{
  if (!a1) {
    return 0;
  }
  BOOL v3 = 0;
  if (a2 && a1->__sig)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 15;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v6 = *(NSObject **)(gLogObjects + 112);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)&a1->__opaque[8];
      int v22 = 138412546;
      *(void *)char v23 = v7;
      *(_WORD *)&v23[8] = 2112;
      *(void *)&v23[10] = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Setting properties for endpoint %@: %@", (uint8_t *)&v22, 0x16u);
    }
    pthread_mutex_lock(a1 + 2);
    CFDictionaryRef v8 = acc_properties_copyProperties(*(const __CFDictionary **)&a1[1].__opaque[8]);
    uint64_t v9 = gLogSignpostObjects;
    int v10 = gNumLogSignpostObjects;
    if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
    {
      BOOL v11 = *(NSObject **)(gLogSignpostObjects + 16);
      if (!gLogSignpostObjects) {
        goto LABEL_22;
      }
    }
    else
    {
      BOOL v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v22 = 67109632;
        *(_DWORD *)char v23 = 2;
        *(_WORD *)&v23[4] = 2048;
        *(void *)&v23[6] = v9;
        *(_WORD *)&v23[14] = 1024;
        *(_DWORD *)&v23[16] = v10;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d", (uint8_t *)&v22, 0x18u);
        uint64_t v9 = gLogSignpostObjects;
        int v10 = gNumLogSignpostObjects;
        if (!gLogSignpostObjects) {
          goto LABEL_22;
        }
      }
      else if (!v9)
      {
        goto LABEL_22;
      }
    }
    if (v10 >= 3)
    {
      CFStringRef v12 = *(NSObject **)(v9 + 16);
LABEL_24:
      os_signpost_id_t v13 = os_signpost_id_make_with_pointer(v12, a1);
      if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v14 = v13;
        if (os_signpost_enabled(v11))
        {
          uint64_t v15 = *(void *)&a1->__opaque[8];
          CFIndex Count = CFDictionaryGetCount(a2);
          if (v8) {
            CFIndex v17 = CFDictionaryGetCount(v8);
          }
          else {
            CFIndex v17 = 0;
          }
          int v22 = 138412802;
          *(void *)char v23 = v15;
          *(_WORD *)&v23[8] = 2048;
          *(void *)&v23[10] = Count;
          *(_WORD *)&v23[18] = 2048;
          CFIndex v24 = v17;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, v14, "Endpoint PROPERTY", "Endpoint SetProperties! %@, %lu properties, previous %lu properties", (uint8_t *)&v22, 0x20u);
        }
      }
      BOOL v3 = acc_properties_setProperties(*(void **)&a1[1].__opaque[8], a2);
      CFDictionaryRef v18 = acc_properties_copyProperties(*(const __CFDictionary **)&a1[1].__opaque[8]);
      pthread_mutex_unlock(a1 + 2);
      if (gLogObjects && gNumLogObjects >= 15)
      {
        CFStringRef v19 = *(NSObject **)(gLogObjects + 112);
      }
      else
      {
        CFStringRef v19 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = *(void *)&a1->__opaque[8];
        int v22 = 138412546;
        *(void *)char v23 = v20;
        *(_WORD *)&v23[8] = 2112;
        *(void *)&v23[10] = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Set properties for endpoint %@: %@", (uint8_t *)&v22, 0x16u);
      }
      if (a1[1].__opaque[16] && !a1[1].__opaque[48]) {
        platform_notifications_propertiesDidChangeForEndpointUUID(*(void *)&a1->__opaque[8], *(void *)a1->__opaque, v8, v18);
      }
      if (a1[1].__opaque[17]) {
        platform_connectionInfo_accessoryEndpointInfoPropertyChanged(*(void *)a1->__opaque, *(const void **)&a1->__opaque[8]);
      }
      if (v8) {
        CFRelease(v8);
      }
      if (v18) {
        CFRelease(v18);
      }
      return v3;
    }
LABEL_22:
    CFStringRef v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      acc_endpoint_create_cold_5();
    }
    goto LABEL_24;
  }
  return v3;
}

uint64_t acc_endpoint_setProperty(pthread_mutex_t *a1, const void *a2, const __CFNull *a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = 0;
  if (a2 && a1->__sig)
  {
    if (gLogObjects) {
      BOOL v7 = gNumLogObjects < 15;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      CFDictionaryRef v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      CFDictionaryRef v8 = *(NSObject **)(gLogObjects + 112);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)&a1->__opaque[8];
      int v23 = 138412546;
      *(void *)CFIndex v24 = a2;
      *(_WORD *)&void v24[8] = 2112;
      *(void *)&v24[10] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Setting property %@ for endpoint %@...", (uint8_t *)&v23, 0x16u);
    }
    pthread_mutex_lock(a1 + 2);
    CFDictionaryRef v10 = acc_properties_copyProperties(*(const __CFDictionary **)&a1[1].__opaque[8]);
    uint64_t v11 = gLogSignpostObjects;
    int v12 = gNumLogSignpostObjects;
    if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
    {
      os_signpost_id_t v13 = *(NSObject **)(gLogSignpostObjects + 16);
      if (!gLogSignpostObjects) {
        goto LABEL_22;
      }
    }
    else
    {
      os_signpost_id_t v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v23 = 67109632;
        *(_DWORD *)CFIndex v24 = 2;
        *(_WORD *)&v24[4] = 2048;
        *(void *)&v24[6] = v11;
        *(_WORD *)&v24[14] = 1024;
        *(_DWORD *)&v24[16] = v12;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d", (uint8_t *)&v23, 0x18u);
        uint64_t v11 = gLogSignpostObjects;
        int v12 = gNumLogSignpostObjects;
        if (!gLogSignpostObjects) {
          goto LABEL_22;
        }
      }
      else if (!v11)
      {
        goto LABEL_22;
      }
    }
    if (v12 >= 3)
    {
      os_signpost_id_t v14 = *(NSObject **)(v11 + 16);
LABEL_24:
      os_signpost_id_t v15 = os_signpost_id_make_with_pointer(v14, a1);
      if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v16 = v15;
        if (os_signpost_enabled(v13))
        {
          uint64_t v17 = *(void *)&a1->__opaque[8];
          if (v10) {
            CFIndex Count = CFDictionaryGetCount(v10);
          }
          else {
            CFIndex Count = 0;
          }
          int v23 = 138412802;
          *(void *)CFIndex v24 = v17;
          *(_WORD *)&void v24[8] = 2112;
          *(void *)&v24[10] = a2;
          *(_WORD *)&v24[18] = 2048;
          CFIndex v25 = Count;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, v16, "Endpoint PROPERTY", "Endpoint SetProperty! %@, property %@, previous %lu properties", (uint8_t *)&v23, 0x20u);
        }
      }
      uint64_t v4 = acc_properties_setProperty(*(__CFDictionary **)&a1[1].__opaque[8], a2, a3);
      CFDictionaryRef v19 = acc_properties_copyProperties(*(const __CFDictionary **)&a1[1].__opaque[8]);
      pthread_mutex_unlock(a1 + 2);
      if (gLogObjects && gNumLogObjects >= 15)
      {
        uint64_t v20 = *(NSObject **)(gLogObjects + 112);
      }
      else
      {
        uint64_t v20 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = *(void *)&a1->__opaque[8];
        int v23 = 138412802;
        *(void *)CFIndex v24 = a2;
        *(_WORD *)&void v24[8] = 2112;
        *(void *)&v24[10] = v21;
        *(_WORD *)&v24[18] = 2112;
        CFIndex v25 = (CFIndex)v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Set property %@ for endpoint %@: %@", (uint8_t *)&v23, 0x20u);
      }
      if (a1[1].__opaque[16] && !a1[1].__opaque[48]) {
        platform_notifications_propertiesDidChangeForEndpointUUID(*(void *)&a1->__opaque[8], *(void *)a1->__opaque, v10, v19);
      }
      if (a1[1].__opaque[17]) {
        platform_connectionInfo_accessoryEndpointInfoPropertyChanged(*(void *)a1->__opaque, *(const void **)&a1->__opaque[8]);
      }
      if (v10) {
        CFRelease(v10);
      }
      if (v19) {
        CFRelease(v19);
      }
      return v4;
    }
LABEL_22:
    os_signpost_id_t v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      acc_endpoint_create_cold_5();
    }
    goto LABEL_24;
  }
  return v4;
}

BOOL acc_endpoint_removeProperty(pthread_mutex_t *a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  BOOL v3 = 0;
  if (a2 && a1->__sig)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 15;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v6 = *(NSObject **)(gLogObjects + 112);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)&a1->__opaque[8];
      int v21 = 138412546;
      *(void *)int v22 = a2;
      *(_WORD *)&v22[8] = 2112;
      *(void *)&v22[10] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Removing property %@ for endpoint %@...", (uint8_t *)&v21, 0x16u);
    }
    pthread_mutex_lock(a1 + 2);
    CFDictionaryRef v8 = acc_properties_copyProperties(*(const __CFDictionary **)&a1[1].__opaque[8]);
    uint64_t v9 = gLogSignpostObjects;
    int v10 = gNumLogSignpostObjects;
    if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
    {
      uint64_t v11 = *(NSObject **)(gLogSignpostObjects + 16);
      if (!gLogSignpostObjects) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v21 = 67109632;
        *(_DWORD *)int v22 = 2;
        *(_WORD *)&v22[4] = 2048;
        *(void *)&v22[6] = v9;
        *(_WORD *)&v22[14] = 1024;
        *(_DWORD *)&v22[16] = v10;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d", (uint8_t *)&v21, 0x18u);
        uint64_t v9 = gLogSignpostObjects;
        int v10 = gNumLogSignpostObjects;
        if (!gLogSignpostObjects) {
          goto LABEL_22;
        }
      }
      else if (!v9)
      {
        goto LABEL_22;
      }
    }
    if (v10 >= 3)
    {
      int v12 = *(NSObject **)(v9 + 16);
LABEL_24:
      os_signpost_id_t v13 = os_signpost_id_make_with_pointer(v12, a1);
      if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v14 = v13;
        if (os_signpost_enabled(v11))
        {
          uint64_t v15 = *(void *)&a1->__opaque[8];
          if (v8) {
            CFIndex Count = CFDictionaryGetCount(v8);
          }
          else {
            CFIndex Count = 0;
          }
          int v21 = 138412802;
          *(void *)int v22 = v15;
          *(_WORD *)&v22[8] = 2112;
          *(void *)&v22[10] = a2;
          *(_WORD *)&v22[18] = 2048;
          CFIndex v23 = Count;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, v14, "Endpoint PROPERTY", "Endpoint RemoveProperty! %@, property %@, previous %lu properties", (uint8_t *)&v21, 0x20u);
        }
      }
      BOOL v3 = acc_properties_removeProperty(*(CFMutableDictionaryRef *)&a1[1].__opaque[8], a2);
      CFDictionaryRef v17 = acc_properties_copyProperties(*(const __CFDictionary **)&a1[1].__opaque[8]);
      pthread_mutex_unlock(a1 + 2);
      if (gLogObjects && gNumLogObjects >= 15)
      {
        CFDictionaryRef v18 = *(NSObject **)(gLogObjects + 112);
      }
      else
      {
        CFDictionaryRef v18 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = *(void *)&a1->__opaque[8];
        int v21 = 138412802;
        *(void *)int v22 = a2;
        *(_WORD *)&v22[8] = 2112;
        *(void *)&v22[10] = v19;
        *(_WORD *)&v22[18] = 2112;
        CFIndex v23 = (CFIndex)v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Removed property %@ for endpoint %@: %@", (uint8_t *)&v21, 0x20u);
      }
      if (a1[1].__opaque[16] && !a1[1].__opaque[48]) {
        platform_notifications_propertiesDidChangeForEndpointUUID(*(void *)&a1->__opaque[8], *(void *)a1->__opaque, v8, v17);
      }
      if (a1[1].__opaque[17]) {
        platform_connectionInfo_accessoryEndpointInfoPropertyChanged(*(void *)a1->__opaque, *(const void **)&a1->__opaque[8]);
      }
      if (v8) {
        CFRelease(v8);
      }
      if (v17) {
        CFRelease(v17);
      }
      return v3;
    }
LABEL_22:
    int v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      acc_endpoint_create_cold_5();
    }
    goto LABEL_24;
  }
  return v3;
}

pthread_mutex_t *acc_endpoint_copyProperty(pthread_mutex_t *result, const void *a2)
{
  if (result)
  {
    BOOL v3 = result;
    uint64_t v4 = result + 2;
    pthread_mutex_lock(result + 2);
    BOOL v5 = acc_properties_copyProperty(*(const __CFDictionary **)&v3[1].__opaque[8], a2);
    pthread_mutex_unlock(v4);
    return (pthread_mutex_t *)v5;
  }
  return result;
}

pthread_mutex_t *acc_endpoint_copyProperties(pthread_mutex_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = result + 2;
    pthread_mutex_lock(result + 2);
    CFDictionaryRef v3 = acc_properties_copyProperties(*(const __CFDictionary **)&v1[1].__opaque[8]);
    pthread_mutex_unlock(v2);
    return (pthread_mutex_t *)v3;
  }
  return result;
}

uint64_t acc_endpoint_processIncomingData(uint64_t a1, CFDataRef theData)
{
  if (!a1) {
    return 0;
  }
  BOOL v3 = 0;
  if (!theData || !*(void *)a1) {
    return v3;
  }
  CFIndex Length = CFDataGetLength(theData);
  if (acc_userDefaultsLogging_BOOLForKey(@"TransportSignpost"))
  {
    CFHashCode v6 = CFHash(*(CFTypeRef *)(a1 + 16));
    os_signpost_id_t v7 = CFHash(theData) ^ v6;
    if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
    {
      CFDictionaryRef v8 = *(NSObject **)(gLogSignpostObjects + 16);
    }
    else
    {
      CFDictionaryRef v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        acc_endpoint_create_cold_5();
      }
    }
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      uint64_t v9 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 138412546;
      *(void *)int v64 = v9;
      *(_WORD *)&v64[8] = 2048;
      *(void *)&v64[10] = CFDataGetLength(theData);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, v7, "Endpoint RECV", "Received incoming data! %@, %lu bytes", buf, 0x16u);
    }
  }
  if (acc_endpoint_isTransportRestricted((unsigned int *)a1))
  {
    __int16 v53 = logObjectForModule_2();
    BOOL v3 = 1;
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_INFO)) {
      return v3;
    }
    int v54 = *(_DWORD *)(a1 + 24);
    uint64_t v55 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)int v64 = v54;
    *(_WORD *)&v64[4] = 2048;
    *(void *)&v64[6] = Length;
    *(_WORD *)&v64[14] = 2112;
    *(void *)&v64[16] = v55;
    uint64_t v56 = "Transport %{coreacc:ACCEndpoint_TransportType_t}d is restricted, dropping %ld bytes of incoming data for endpoint %@!";
    int v57 = v53;
    uint32_t v58 = 28;
LABEL_123:
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, v56, buf, v58);
    return v3;
  }
  int v62 = 0;
  if (acc_manager_isLockoutActiveForTransportType(*(_DWORD *)(a1 + 24), &v62))
  {
    uint64_t v59 = logObjectForModule_2();
    BOOL v3 = 1;
    if (!os_log_type_enabled(v59, OS_LOG_TYPE_INFO)) {
      return v3;
    }
    int v60 = *(_DWORD *)(a1 + 24);
    uint64_t v61 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)int v64 = v60;
    *(_WORD *)&v64[4] = 1024;
    *(_DWORD *)&v64[6] = v62;
    *(_WORD *)&v64[10] = 2048;
    *(void *)&v64[12] = Length;
    *(_WORD *)&v64[20] = 2112;
    *(void *)&v64[22] = v61;
    uint64_t v56 = "Transport %{coreacc:ACCEndpoint_TransportType_t}d is locked out for %u more second(s), dropping %ld bytes of i"
          "ncoming data for endpoint %@!";
    int v57 = v59;
    uint32_t v58 = 34;
    goto LABEL_123;
  }
  if (acc_platform_packetLogging_isLogPacketDataAsMsg() || platform_systemInfo_isInternalBuild())
  {
    if (gLogObjects && gNumLogObjects >= 15)
    {
      int v10 = *(NSObject **)(gLogObjects + 112);
    }
    else
    {
      int v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 16);
      int v12 = *(_DWORD *)(a1 + 24);
      BytePtr = CFDataGetBytePtr(theData);
      *(_DWORD *)buf = 134219010;
      *(void *)int v64 = Length;
      *(_WORD *)&v64[8] = 2112;
      *(void *)&v64[10] = v11;
      *(_WORD *)&v64[18] = 1024;
      *(_DWORD *)&v64[20] = v12;
      *(_WORD *)&v64[24] = 1040;
      *(_DWORD *)&v64[26] = Length;
      __int16 v65 = 2096;
      uint64_t v66 = BytePtr;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Received %ld bytes of incoming data for endpoint %@ (type:%{coreacc:ACCEndpoint_TransportType_t}d):\n%{coreacc:bytes}.*P", buf, 0x2Cu);
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 15)
    {
      os_signpost_id_t v14 = *(NSObject **)(gLogObjects + 112);
    }
    else
    {
      os_signpost_id_t v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v47 = *(void *)(a1 + 16);
      int v48 = *(_DWORD *)(a1 + 24);
      unsigned int v49 = CFDataGetBytePtr(theData);
      *(_DWORD *)buf = 134219010;
      *(void *)int v64 = Length;
      *(_WORD *)&v64[8] = 2112;
      *(void *)&v64[10] = v47;
      *(_WORD *)&v64[18] = 1024;
      *(_DWORD *)&v64[20] = v48;
      *(_WORD *)&v64[24] = 1040;
      *(_DWORD *)&v64[26] = Length;
      __int16 v65 = 2096;
      uint64_t v66 = v49;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Received %ld bytes of incoming data for endpoint %@ (type:%{coreacc:ACCEndpoint_TransportType_t}d):\n%{coreacc:bytes}.*P", buf, 0x2Cu);
    }
  }
  if (Length < 1) {
    return 1;
  }
  int v15 = *(_DWORD *)(a1 + 92);
  if (v15 == -1)
  {
    __acc_endpoint_setupPassthroughMode(a1);
    int v15 = *(_DWORD *)(a1 + 92);
  }
  if (v15 == 1) {
    goto LABEL_126;
  }
  if (v15 == -1)
  {
    __acc_endpoint_setupPassthroughMode(a1);
    int v15 = *(_DWORD *)(a1 + 92);
  }
  if (v15 == 2)
  {
LABEL_126:
    if (acc_platform_packetLogging_isLogPacketDataAsMsg() || platform_systemInfo_isInternalBuild())
    {
      if (gLogObjects && gNumLogObjects >= 15)
      {
        os_signpost_id_t v16 = *(NSObject **)(gLogObjects + 112);
      }
      else
      {
        os_signpost_id_t v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = *(void *)(a1 + 16);
        int v19 = *(_DWORD *)(a1 + 92);
        *(_DWORD *)buf = 138412546;
        *(void *)int v64 = v18;
        *(_WORD *)&v64[8] = 1024;
        *(_DWORD *)&v64[10] = v19;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Endpoint %@ isPassThrough(passthroughMode=%d)", buf, 0x12u);
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 15)
      {
        uint64_t v20 = *(NSObject **)(gLogObjects + 112);
      }
      else
      {
        uint64_t v20 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        acc_endpoint_processIncomingData_cold_7();
      }
    }
    if ((*(unsigned char *)(a1 + 96) || (__acc_endpoint_setupPassthroughPair(a1), *(unsigned char *)(a1 + 96)))
      && *(void *)(a1 + 104))
    {
      if (acc_platform_packetLogging_isLogPacketDataAsMsg() || platform_systemInfo_isInternalBuild())
      {
        if (gLogObjects && gNumLogObjects >= 15)
        {
          CFIndex v25 = *(NSObject **)(gLogObjects + 112);
        }
        else
        {
          CFIndex v25 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          CFIndex v27 = CFDataGetLength(theData);
          uint64_t v28 = *(void *)(a1 + 16);
          uint64_t v29 = *(void *)(a1 + 104);
          *(_DWORD *)buf = 134218498;
          *(void *)int v64 = v27;
          *(_WORD *)&v64[8] = 2112;
          *(void *)&v64[10] = v28;
          *(_WORD *)&v64[18] = 2112;
          *(void *)&v64[20] = v29;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Passthrough %ld bytes of data for endpoint %@ to %@", buf, 0x20u);
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 15)
        {
          os_signpost_id_t v32 = *(NSObject **)(gLogObjects + 112);
        }
        else
        {
          os_signpost_id_t v32 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          CFIndex v50 = CFDataGetLength(theData);
          uint64_t v51 = *(void *)(a1 + 16);
          uint64_t v52 = *(void *)(a1 + 104);
          *(_DWORD *)buf = 134218498;
          *(void *)int v64 = v50;
          *(_WORD *)&v64[8] = 2112;
          *(void *)&v64[10] = v51;
          *(_WORD *)&v64[18] = 2112;
          *(void *)&v64[20] = v52;
          _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Passthrough %ld bytes of data for endpoint %@ to %@", buf, 0x20u);
        }
      }
      EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)(a1 + 104));
      if (EndpointWithUUID) {
        return acc_endpoint_sendOutgoingData((uint64_t)EndpointWithUUID, theData);
      }
    }
    else if (acc_platform_packetLogging_isLogPacketDataAsMsg() || platform_systemInfo_isInternalBuild())
    {
      if (gLogObjects && gNumLogObjects >= 15)
      {
        uint64_t v26 = *(NSObject **)(gLogObjects + 112);
      }
      else
      {
        uint64_t v26 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        CFIndex v30 = CFDataGetLength(theData);
        uint64_t v31 = *(void *)(a1 + 16);
        *(_DWORD *)buf = 134218242;
        *(void *)int v64 = v30;
        *(_WORD *)&v64[8] = 2112;
        *(void *)&v64[10] = v31;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "No Passthrough pair, ignore %ld bytes of data for endpoint %@", buf, 0x16u);
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 15)
      {
        CFDictionaryRef v33 = *(NSObject **)(gLogObjects + 112);
      }
      else
      {
        CFDictionaryRef v33 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
        acc_endpoint_processIncomingData_cold_2(theData, a1, v33);
      }
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 28)) {
    return acc_protocolRouter_routeIncomingData(a1, theData);
  }
  uint64_t v21 = acc_protocolParser_detectProtocol((uint64_t *)(a1 + 48), theData);
  if (!v21) {
    return 1;
  }
  uint64_t v22 = v21;
  CFDataRef v23 = **(const __CFData ***)(a1 + 48);
  if (gLogObjects && gNumLogObjects >= 15)
  {
    CFIndex v24 = *(NSObject **)(gLogObjects + 112);
  }
  else
  {
    CFIndex v24 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v42 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)int v64 = v22;
    *(_WORD *)&v64[4] = 2112;
    *(void *)&v64[6] = v42;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Protocol %{coreacc:ACCEndpoint_Protocol_t}d detected for endpoint %@!", buf, 0x12u);
  }
  int v43 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v22;
  if (v43 != v22)
  {
    if (gLogObjects && gNumLogObjects >= 15)
    {
      uint64_t v44 = *(NSObject **)(gLogObjects + 112);
    }
    else
    {
      uint64_t v44 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v46 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)int v64 = v22;
      *(_WORD *)&v64[4] = 2112;
      *(void *)&v64[6] = v46;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Set protocol to %{coreacc:ACCEndpoint_Protocol_t}d for endpoint %@!", buf, 0x12u);
    }
    if (*(void *)a1) {
      acc_connection_mapAccessoryInfo(*(uint64_t **)a1);
    }
    platform_analytics_endpointProtocolDidChange((uint64_t *)a1);
    if (*(unsigned char *)(a1 + 89) && *(void *)a1) {
      platform_connectionInfo_accessoryEndpointProtocolUpdate(*(void *)(a1 + 8), *(const void **)(a1 + 16), v22);
    }
  }
  acc_protocolRouter_initProtocolLayer(a1, v35, v36, v37, v38, v39, v40, v41);
  BOOL v3 = acc_protocolRouter_routeIncomingData(a1, v23);
  acc_protocolParser_destroy(a1 + 48);
  return v3;
}

void __acc_endpoint_setupPassthroughPair(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 15;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    BOOL v3 = *(NSObject **)(gLogObjects + 112);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    __acc_endpoint_setupPassthroughPair_cold_7();
  }
  int v4 = *(_DWORD *)(a1 + 92);
  if (v4 == -1)
  {
    __acc_endpoint_setupPassthroughMode(a1);
    int v4 = *(_DWORD *)(a1 + 92);
  }
  switch(v4)
  {
    case -1:
      __acc_endpoint_setupPassthroughMode(a1);
      int v4 = *(_DWORD *)(a1 + 92);
      break;
    case 1:
      CFDictionaryRef v5 = acc_manager_copyAllEndpoints();
      CFIndex Count = CFDictionaryGetCount(v5);
      if (gLogObjects && gNumLogObjects >= 15)
      {
        os_signpost_id_t v7 = *(NSObject **)(gLogObjects + 112);
      }
      else
      {
        os_signpost_id_t v7 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      BOOL v11 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
      if (v11) {
        __acc_endpoint_setupPassthroughPair_cold_5();
      }
      int v60 = &v58;
      __chkstk_darwin(v11);
      os_signpost_id_t v13 = (const void **)((char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
      CFDictionaryRef v61 = v5;
      if (Count)
      {
        memset((char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), 170, v12);
        CFDictionaryGetKeysAndValues(v5, 0, v13);
        if (Count >= 1)
        {
          uint64_t v15 = 0;
          CFAllocatorRef v63 = kCFAllocatorDefault;
          *(void *)&long long v14 = 134218240;
          long long v58 = v14;
          *(void *)&long long v14 = 138413314;
          long long v59 = v14;
          *(void *)&long long v14 = 138412546;
          long long v62 = v14;
          do
          {
            uint64_t v16 = gLogObjects;
            int v17 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v18 = gNumLogObjects < 15;
            }
            else {
              BOOL v18 = 1;
            }
            if (v18)
            {
              int v19 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v58;
                uint64_t v65 = v16;
                __int16 v66 = 1024;
                *(_DWORD *)int32x2_t v67 = v17;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                int v19 = &_os_log_default;
              }
            }
            else
            {
              int v19 = *(NSObject **)(gLogObjects + 112);
            }
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v30 = *(void *)(a1 + 16);
              uint64_t v31 = v13[v15];
              uint64_t v32 = v31[2];
              LODWORD(v31) = *((_DWORD *)v31 + 23);
              *(_DWORD *)buf = v59;
              uint64_t v65 = v30;
              __int16 v66 = 1024;
              *(_DWORD *)int32x2_t v67 = v15;
              *(_WORD *)&v67[4] = 2048;
              *(void *)&v67[6] = Count;
              __int16 v68 = 2112;
              uint64_t v69 = v32;
              __int16 v70 = 1024;
              int v71 = (int)v31;
              _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "setupPassthroughPair (Accessory) for endpoint %@, index= %d / %ld, %@ passthroughMode=%d", buf, 0x2Cu);
            }
            uint64_t v20 = v13[v15];
            int v21 = v20[23];
            if (v21 == -1)
            {
              __acc_endpoint_setupPassthroughMode((uint64_t)v13[v15]);
              int v21 = v20[23];
            }
            if (v21 == 2)
            {
              uint64_t v22 = gLogObjects;
              int v23 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 15)
              {
                CFIndex v24 = *(NSObject **)(gLogObjects + 112);
              }
              else
              {
                CFIndex v24 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = v58;
                  uint64_t v65 = v22;
                  __int16 v66 = 1024;
                  *(_DWORD *)int32x2_t v67 = v23;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  CFIndex v24 = &_os_log_default;
                }
              }
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v33 = *((void *)v13[v15] + 2);
                uint64_t v34 = *(void *)(a1 + 16);
                *(_DWORD *)buf = v62;
                uint64_t v65 = v33;
                __int16 v66 = 2112;
                *(void *)int32x2_t v67 = v34;
                _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Found passthroughDevice endpoint %@ for passthroughAccessory endpoint %@", buf, 0x16u);
              }
              if (*(unsigned char *)(a1 + 96))
              {
                uint64_t v25 = gLogObjects;
                int v26 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 15)
                {
                  CFIndex v27 = *(NSObject **)(gLogObjects + 112);
                }
                else
                {
                  CFIndex v27 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = v58;
                    uint64_t v65 = v25;
                    __int16 v66 = 1024;
                    *(_DWORD *)int32x2_t v67 = v26;
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                    CFIndex v27 = &_os_log_default;
                  }
                }
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v28 = *((void *)v13[v15] + 2);
                  uint64_t v29 = *(void *)(a1 + 16);
                  *(_DWORD *)buf = v62;
                  uint64_t v65 = v28;
                  __int16 v66 = 2112;
                  *(void *)int32x2_t v67 = v29;
                  _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "ERROR: Found more than one passthroughDevice endpoint (%@) for passthroughAccessory endpoint %@ !", buf, 0x16u);
                }
              }
              *(void *)(a1 + 104) = CFStringCreateCopy(v63, *((CFStringRef *)v13[v15] + 2));
              *(unsigned char *)(a1 + 96) = 1;
            }
            ++v15;
          }
          while (Count != v15);
        }
        goto LABEL_100;
      }
LABEL_99:
      CFDictionaryGetKeysAndValues(v5, 0, v13);
LABEL_100:
      if (v61) {
        CFRelease(v61);
      }
      return;
    case 2:
      CFDictionaryRef v5 = acc_manager_copyAllEndpoints();
      CFIndex v8 = CFDictionaryGetCount(v5);
      if (gLogObjects && gNumLogObjects >= 15)
      {
        uint64_t v9 = *(NSObject **)(gLogObjects + 112);
      }
      else
      {
        uint64_t v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      BOOL v35 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      if (v35) {
        __acc_endpoint_setupPassthroughPair_cold_1();
      }
      int v60 = &v58;
      __chkstk_darwin(v35);
      os_signpost_id_t v13 = (const void **)((char *)&v58 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
      CFDictionaryRef v61 = v5;
      if (v8)
      {
        memset((char *)&v58 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0), 170, v36);
        CFDictionaryGetKeysAndValues(v5, 0, v13);
        if (v8 >= 1)
        {
          uint64_t v38 = 0;
          CFAllocatorRef v63 = kCFAllocatorDefault;
          *(void *)&long long v37 = 134218240;
          long long v58 = v37;
          *(void *)&long long v37 = 138413314;
          long long v59 = v37;
          *(void *)&long long v37 = 138412546;
          long long v62 = v37;
          do
          {
            uint64_t v39 = gLogObjects;
            int v40 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v41 = gNumLogObjects < 15;
            }
            else {
              BOOL v41 = 1;
            }
            if (v41)
            {
              uint64_t v42 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v58;
                uint64_t v65 = v39;
                __int16 v66 = 1024;
                *(_DWORD *)int32x2_t v67 = v40;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                uint64_t v42 = &_os_log_default;
              }
            }
            else
            {
              uint64_t v42 = *(NSObject **)(gLogObjects + 112);
            }
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v53 = *(void *)(a1 + 16);
              int v54 = v13[v38];
              uint64_t v55 = v54[2];
              LODWORD(v54) = *((_DWORD *)v54 + 23);
              *(_DWORD *)buf = v59;
              uint64_t v65 = v53;
              __int16 v66 = 1024;
              *(_DWORD *)int32x2_t v67 = v38;
              *(_WORD *)&v67[4] = 2048;
              *(void *)&v67[6] = v8;
              __int16 v68 = 2112;
              uint64_t v69 = v55;
              __int16 v70 = 1024;
              int v71 = (int)v54;
              _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "setupPassthroughPair (Device) for endpoint %@, index= %d / %ld, %@ passthroughMode=%d", buf, 0x2Cu);
            }
            int v43 = v13[v38];
            int v44 = v43[23];
            if (v44 == -1)
            {
              __acc_endpoint_setupPassthroughMode((uint64_t)v13[v38]);
              int v44 = v43[23];
            }
            if (v44 == 1)
            {
              uint64_t v45 = gLogObjects;
              int v46 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 15)
              {
                uint64_t v47 = *(NSObject **)(gLogObjects + 112);
              }
              else
              {
                uint64_t v47 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = v58;
                  uint64_t v65 = v45;
                  __int16 v66 = 1024;
                  *(_DWORD *)int32x2_t v67 = v46;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  uint64_t v47 = &_os_log_default;
                }
              }
              if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v56 = *((void *)v13[v38] + 2);
                uint64_t v57 = *(void *)(a1 + 16);
                *(_DWORD *)buf = v62;
                uint64_t v65 = v56;
                __int16 v66 = 2112;
                *(void *)int32x2_t v67 = v57;
                _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "Found passthroughAccessory endpoint %@ for passthroughDevice endpoint %@", buf, 0x16u);
              }
              if (*(unsigned char *)(a1 + 96))
              {
                uint64_t v48 = gLogObjects;
                int v49 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 15)
                {
                  CFIndex v50 = *(NSObject **)(gLogObjects + 112);
                }
                else
                {
                  CFIndex v50 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = v58;
                    uint64_t v65 = v48;
                    __int16 v66 = 1024;
                    *(_DWORD *)int32x2_t v67 = v49;
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                    CFIndex v50 = &_os_log_default;
                  }
                }
                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v51 = *((void *)v13[v38] + 2);
                  uint64_t v52 = *(void *)(a1 + 16);
                  *(_DWORD *)buf = v62;
                  uint64_t v65 = v51;
                  __int16 v66 = 2112;
                  *(void *)int32x2_t v67 = v52;
                  _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "ERROR: Found more than one passthroughAccessory endpoint (%@) for passthroughDevice endpoint %@ !", buf, 0x16u);
                }
              }
              *(void *)(a1 + 104) = CFStringCreateCopy(v63, *((CFStringRef *)v13[v38] + 2));
              *(unsigned char *)(a1 + 96) = 1;
            }
            ++v38;
          }
          while (v8 != v38);
        }
        goto LABEL_100;
      }
      goto LABEL_99;
  }
  if (gLogObjects && gNumLogObjects >= 15)
  {
    int v10 = *(NSObject **)(gLogObjects + 112);
  }
  else
  {
    int v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    __acc_endpoint_setupPassthroughPair_cold_3();
  }
  *(unsigned char *)(a1 + 96) = 1;
  *(void *)(a1 + 104) = 0;
}

uint64_t acc_endpoint_sendOutgoingData(uint64_t a1, const __CFData *a2)
{
  if (!a1)
  {
    CFIndex v27 = logObjectForModule_2();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      acc_endpoint_sendOutgoingData_cold_1(v27);
    }
    return 0;
  }
  if (!*(void *)a1)
  {
    uint64_t v28 = logObjectForModule_2();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      acc_endpoint_sendOutgoingData_cold_2(v28);
    }
    return 0;
  }
  int v34 = 0;
  if (acc_manager_isLockoutActiveForTransportType(*(_DWORD *)(a1 + 24), &v34))
  {
    uint64_t v29 = logObjectForModule_2();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = *(_DWORD *)(a1 + 24);
      int v31 = v34;
      CFIndex Length = CFDataGetLength(a2);
      uint64_t v33 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)size_t v36 = v30;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v31;
      *(_WORD *)long long v37 = 2048;
      *(void *)&v37[2] = Length;
      *(_WORD *)uint64_t v38 = 2112;
      *(void *)&v38[2] = v33;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Transport %{coreacc:ACCEndpoint_TransportType_t}d is locked out for %u more second(s), dropping %ld bytes of outgoing data for endpoint %@!", buf, 0x22u);
    }
    return 1;
  }
  else
  {
    CFHashCode v4 = CFHash(*(CFTypeRef *)(a1 + 16));
    os_signpost_id_t v5 = CFHash(a2) ^ v4;
    if (acc_userDefaultsLogging_BOOLForKey(@"TransportSignpost"))
    {
      if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
      {
        CFHashCode v6 = *(NSObject **)(gLogSignpostObjects + 16);
      }
      else
      {
        CFHashCode v6 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          acc_endpoint_create_cold_5();
        }
      }
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        CFIndex v8 = CFDataGetLength(a2);
        *(_DWORD *)buf = 138412546;
        *(void *)size_t v36 = v7;
        *(_WORD *)&v36[8] = 2048;
        *(void *)long long v37 = v8;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "Endpoint SEND", "Send outgoing data! %@, %lu bytes", buf, 0x16u);
      }
    }
    if (acc_platform_packetLogging_isLogPacketDataAsMsg() || platform_systemInfo_isInternalBuild())
    {
      if (gLogObjects && gNumLogObjects >= 15)
      {
        uint64_t v9 = *(NSObject **)(gLogObjects + 112);
      }
      else
      {
        uint64_t v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        CFIndex v10 = CFDataGetLength(a2);
        uint64_t v11 = *(void *)(a1 + 16);
        int v12 = *(_DWORD *)(a1 + 24);
        int v13 = CFDataGetLength(a2);
        BytePtr = CFDataGetBytePtr(a2);
        *(_DWORD *)buf = 134219010;
        *(void *)size_t v36 = v10;
        *(_WORD *)&v36[8] = 2112;
        *(void *)long long v37 = v11;
        *(_WORD *)&v37[8] = 1024;
        *(_DWORD *)uint64_t v38 = v12;
        *(_WORD *)&v38[4] = 1040;
        *(_DWORD *)&v38[6] = v13;
        __int16 v39 = 2096;
        int v40 = BytePtr;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Sending %ld bytes of outgoing data for endpoint %@ (type:%{coreacc:ACCEndpoint_TransportType_t}d):\n%{coreacc:bytes}.*P", buf, 0x2Cu);
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 15)
      {
        uint64_t v15 = *(NSObject **)(gLogObjects + 112);
      }
      else
      {
        uint64_t v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        CFIndex v22 = CFDataGetLength(a2);
        uint64_t v23 = *(void *)(a1 + 16);
        int v24 = *(_DWORD *)(a1 + 24);
        int v25 = CFDataGetLength(a2);
        int v26 = CFDataGetBytePtr(a2);
        *(_DWORD *)buf = 134219010;
        *(void *)size_t v36 = v22;
        *(_WORD *)&v36[8] = 2112;
        *(void *)long long v37 = v23;
        *(_WORD *)&v37[8] = 1024;
        *(_DWORD *)uint64_t v38 = v24;
        *(_WORD *)&v38[4] = 1040;
        *(_DWORD *)&v38[6] = v25;
        __int16 v39 = 2096;
        int v40 = v26;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Sending %ld bytes of outgoing data for endpoint %@ (type:%{coreacc:ACCEndpoint_TransportType_t}d):\n%{coreacc:bytes}.*P", buf, 0x2Cu);
      }
    }
    uint64_t v16 = acc_connection_sendDataOut(*(uint64_t **)a1, *(void *)(a1 + 16), a2);
    if (acc_userDefaultsLogging_BOOLForKey(@"TransportSignpost"))
    {
      if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
      {
        int v17 = *(NSObject **)(gLogSignpostObjects + 16);
      }
      else
      {
        int v17 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          acc_endpoint_create_cold_5();
        }
      }
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
      {
        if (v16) {
          BOOL v18 = "SUCCESS";
        }
        else {
          BOOL v18 = "ERROR";
        }
        uint64_t v19 = *(void *)(a1 + 16);
        CFIndex v20 = CFDataGetLength(a2);
        *(_DWORD *)buf = 136315650;
        *(void *)size_t v36 = v18;
        *(_WORD *)&v36[8] = 2112;
        *(void *)long long v37 = v19;
        *(_WORD *)&v37[8] = 2048;
        *(void *)uint64_t v38 = v20;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_END, v5, "Endpoint SEND", "%s handling send outgoing data! %@, %lu bytes", buf, 0x20u);
      }
    }
  }
  return v16;
}

BOOL acc_endpoint_processOutgoingSecureTunnelDataForClient(uint64_t a1, int a2, CFDataRef theData)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = 0;
  if (theData && *(void *)a1)
  {
    CFIndex Length = CFDataGetLength(theData);
    if (gLogObjects && gNumLogObjects >= 15)
    {
      CFIndex v8 = *(NSObject **)(gLogObjects + 112);
    }
    else
    {
      CFIndex v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(a1 + 24);
      uint64_t v10 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)size_t v36 = v9;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = a2;
      *(_WORD *)&unsigned char v36[10] = 2048;
      *(void *)&v36[12] = Length;
      *(_WORD *)&v36[20] = 2112;
      *(void *)&v36[22] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "processOutgoingSecureTunnelDataForClient: Transport %{coreacc:ACCEndpoint_TransportType_t}d, type %d, %ld bytes of incoming data for endpoint %@!", buf, 0x22u);
    }
    if (acc_userDefaultsLogging_BOOLForKey(@"TransportSignpost"))
    {
      CFHashCode v11 = CFHash(*(CFTypeRef *)(a1 + 16));
      os_signpost_id_t v12 = CFHash(theData) ^ v11;
      if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
      {
        int v13 = *(NSObject **)(gLogSignpostObjects + 16);
      }
      else
      {
        int v13 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          acc_endpoint_create_cold_5();
        }
      }
      if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
      {
        uint64_t v14 = *(void *)(a1 + 16);
        CFIndex v15 = CFDataGetLength(theData);
        *(_DWORD *)buf = 138412546;
        *(void *)size_t v36 = v14;
        *(_WORD *)&v36[8] = 2048;
        *(void *)&unsigned char v36[10] = v15;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, v12, "Endpoint RECV", "Received incoming data! %@, %lu bytes", buf, 0x16u);
      }
    }
    if (acc_endpoint_isTransportRestricted((unsigned int *)a1))
    {
      int v25 = logObjectForModule_2();
      uint64_t v4 = 1;
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_INFO)) {
        return v4;
      }
      int v26 = *(_DWORD *)(a1 + 24);
      uint64_t v27 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)size_t v36 = v26;
      *(_WORD *)&v36[4] = 2048;
      *(void *)&v36[6] = Length;
      *(_WORD *)&v36[14] = 2112;
      *(void *)&v36[16] = v27;
      uint64_t v28 = "Transport %{coreacc:ACCEndpoint_TransportType_t}d is restricted, dropping %ld bytes of incoming data for endpoint %@!";
      uint64_t v29 = v25;
      uint32_t v30 = 28;
    }
    else
    {
      int v34 = 0;
      if (!acc_manager_isLockoutActiveForTransportType(*(_DWORD *)(a1 + 24), &v34))
      {
        if (acc_platform_packetLogging_isLogPacketDataAsMsg() || platform_systemInfo_isInternalBuild())
        {
          if (gLogObjects && gNumLogObjects >= 15)
          {
            uint64_t v16 = *(NSObject **)(gLogObjects + 112);
          }
          else
          {
            uint64_t v16 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            uint64_t v17 = *(void *)(a1 + 16);
            int v18 = *(_DWORD *)(a1 + 24);
            BytePtr = CFDataGetBytePtr(theData);
            *(_DWORD *)buf = 134219266;
            *(void *)size_t v36 = Length;
            *(_WORD *)&v36[8] = 1024;
            *(_DWORD *)&unsigned char v36[10] = a2;
            *(_WORD *)&v36[14] = 2112;
            *(void *)&v36[16] = v17;
            *(_WORD *)&v36[24] = 1024;
            *(_DWORD *)&v36[26] = v18;
            __int16 v37 = 1040;
            LODWORD(v38[0]) = Length;
            WORD2(v38[0]) = 2096;
            *(void *)((char *)v38 + 6) = BytePtr;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Received %ld bytes of incoming data (type %d) for endpoint %@ (type:%{coreacc:ACCEndpoint_TransportType_t}d):\n%{coreacc:bytes}.*P", buf, 0x32u);
          }
        }
        else
        {
          if (gLogObjects && gNumLogObjects >= 15)
          {
            CFIndex v20 = *(NSObject **)(gLogObjects + 112);
          }
          else
          {
            CFIndex v20 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v22 = *(void *)(a1 + 16);
            int v23 = *(_DWORD *)(a1 + 24);
            int v24 = CFDataGetBytePtr(theData);
            *(_DWORD *)buf = 134219010;
            *(void *)size_t v36 = Length;
            *(_WORD *)&v36[8] = 2112;
            *(void *)&unsigned char v36[10] = v22;
            *(_WORD *)&v36[18] = 1024;
            *(_DWORD *)&v36[20] = v23;
            *(_WORD *)&v36[24] = 1040;
            *(_DWORD *)&v36[26] = Length;
            __int16 v37 = 2096;
            v38[0] = v24;
            _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Received %ld bytes of incoming data for endpoint %@ (type:%{coreacc:ACCEndpoint_TransportType_t}d):\n%{coreacc:bytes}.*P", buf, 0x2Cu);
          }
        }
        return Length < 1 || acc_protocolRouter_routeOutgoingSecureTunnelDataForClient(a1, a2, theData);
      }
      int v31 = logObjectForModule_2();
      uint64_t v4 = 1;
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO)) {
        return v4;
      }
      int v32 = *(_DWORD *)(a1 + 24);
      uint64_t v33 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)size_t v36 = v32;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v34;
      *(_WORD *)&unsigned char v36[10] = 2048;
      *(void *)&v36[12] = Length;
      *(_WORD *)&v36[20] = 2112;
      *(void *)&v36[22] = v33;
      uint64_t v28 = "Transport %{coreacc:ACCEndpoint_TransportType_t}d is locked out for %u more second(s), dropping %ld bytes of"
            " incoming data for endpoint %@!";
      uint64_t v29 = v31;
      uint32_t v30 = 34;
    }
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, v28, buf, v30);
  }
  return v4;
}

uint64_t acc_endpoint_getTransportTypeString(uint64_t a1)
{
  uint64_t result = kACCEndpoint_TransportType_Strings[17];
  if (a1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 24);
    if (v3 <= 0xF) {
      return kACCEndpoint_TransportType_Strings[v3];
    }
  }
  return result;
}

uint64_t acc_endpoint_getProtocolString(uint64_t a1)
{
  uint64_t result = kACCEndpoint_Protocol_Strings[0];
  if (a1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 28);
    if (v3 <= 0x11) {
      return kACCEndpoint_Protocol_Strings[v3];
    }
  }
  return result;
}

unint64_t acc_endpoint_getDurationMS(unint64_t result)
{
  if (result) {
    return systemInfo_getCurrentUnixTimeMS() - *(void *)(result + 40);
  }
  return result;
}

uint64_t acc_endpoint_getAccessoryInfo(uint64_t result)
{
  if (result) {
    return *(void *)(result + 64);
  }
  return result;
}

uint64_t acc_endpoint_getParentConnection(uint64_t result)
{
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t acc_endpoint_getTransportType(uint64_t a1)
{
  uint64_t result = 17;
  if (a1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 24);
    if (v3 <= 0xF) {
      return v3;
    }
    else {
      return 17;
    }
  }
  return result;
}

uint64_t acc_endpoint_getProtocol(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(_DWORD *)(result + 28);
    if (v1 <= 0x11) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

CFTypeRef acc_endpoint_copyIdentifier(uint64_t a1)
{
  if (a1 && (unsigned int v1 = *(const void **)(a1 + 32)) != 0) {
    return CFRetain(v1);
  }
  else {
    return 0;
  }
}

void *acc_endpoint_isWireless(void *result)
{
  if (result)
  {
    unsigned int v1 = result;
    uint64_t result = (void *)*result;
    if (result) {
      return (void *)(acc_connection_getType((uint64_t)result) == 2 || *((_DWORD *)v1 + 6) == 4);
    }
  }
  return result;
}

BOOL acc_endpoint_isPublished(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 89) != 0;
  }
  return result;
}

uint64_t acc_endpoint_getCreationTimestampMS(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

void acc_endpoint_supervisedTransportsRestrictedDidChange(uint64_t a1)
{
  if (a1 && *(void *)a1 && acc_policies_isTransportSupervised(*(_DWORD *)(a1 + 24), *(_DWORD *)(*(void *)a1 + 8)))
  {
    BOOL isTransportRestricted = acc_endpoint_isTransportRestricted((unsigned int *)a1);
    if (gLogObjects && gNumLogObjects >= 15)
    {
      unsigned int v3 = *(NSObject **)(gLogObjects + 112);
    }
    else
    {
      unsigned int v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = "NO";
      uint64_t v5 = *(void *)(a1 + 8);
      int v6 = *(_DWORD *)(*(void *)a1 + 8);
      if (isTransportRestricted) {
        uint64_t v4 = "YES";
      }
      int v7 = *(_DWORD *)(a1 + 24);
      int v8 = *(_DWORD *)(a1 + 28);
      uint64_t v9 = *(void *)(a1 + 16);
      int v10 = 136316674;
      CFHashCode v11 = "YES";
      __int16 v12 = 2080;
      int v13 = v4;
      __int16 v14 = 1024;
      int v15 = v6;
      __int16 v16 = 1024;
      int v17 = v7;
      __int16 v18 = 1024;
      int v19 = v8;
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      __int16 v22 = 2112;
      uint64_t v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Restricted mode status changed! (isTransportSupervised: %s, isTransportRestricted: %s, connectionType: %{coreacc:ACCConnection_Type_t}d, transportType: %{coreacc:ACCEndpoint_TransportType_t}d, protocol: %{coreacc:ACCEndpoint_Protocol_t}d, endpointUUID: %@, connectionUUID: %@)", (uint8_t *)&v10, 0x3Cu);
    }
    if (!acc_endpoint_isTransportRestricted((unsigned int *)a1))
    {
      if (*(_DWORD *)(*(void *)a1 + 8) == 1)
      {
        if (acc_policies_shouldResetLightningBusWhenTransportIsNoLongerRestricted(*(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28)))platform_system_resetLightningBusForEndpointWithUUID(*(void **)(a1 + 16)); {
      }
        }
      *(unsigned char *)(a1 + 121) = 1;
      acc_restrictedMode_accessoryAttached();
    }
  }
}

void __acc_endpoint_setupPassthroughMode(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 92) == -1)
  {
    BOOL v2 = acc_endpoint_copyProperties((pthread_mutex_t *)a1);
    if (v2)
    {
      CFDictionaryRef v3 = (const __CFDictionary *)v2;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v2, @"__PASSTHROUGH_ACCESSORY__");
      if (Value)
      {
        int valuePtr = -1431655766;
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
        if (gLogObjects && gNumLogObjects >= 15)
        {
          uint64_t v5 = *(NSObject **)(gLogObjects + 112);
        }
        else
        {
          uint64_t v5 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v6 = *(void *)(a1 + 16);
          int v7 = *(_DWORD *)(a1 + 92);
          *(_DWORD *)buf = 138412802;
          uint64_t v14 = v6;
          __int16 v15 = 1024;
          int v16 = v7;
          __int16 v17 = 1024;
          int v18 = valuePtr != 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Endpoint %@ passthroughMode(0=NO,1=Acc,2=Dev) %d -> %d", buf, 0x18u);
        }
        *(_DWORD *)(a1 + 92) = valuePtr != 0;
      }
      CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(v3, @"__PASSTHROUGH_DEVICE__");
      if (v8)
      {
        int valuePtr = -1431655766;
        CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
        if (gLogObjects && gNumLogObjects >= 15)
        {
          uint64_t v9 = *(NSObject **)(gLogObjects + 112);
        }
        else
        {
          uint64_t v9 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)(a1 + 16);
          int v11 = *(_DWORD *)(a1 + 92);
          *(_DWORD *)buf = 138412802;
          uint64_t v14 = v10;
          __int16 v15 = 1024;
          int v16 = v11;
          __int16 v17 = 1024;
          int v18 = 2 * (valuePtr != 0);
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Endpoint %@ passthroughMode(0=NO,1=Acc,2=Dev) %d -> %d", buf, 0x18u);
        }
        *(_DWORD *)(a1 + 92) = 2 * (valuePtr != 0);
      }
      else if (*(_DWORD *)(a1 + 92) == -1)
      {
        *(_DWORD *)(a1 + 92) = 0;
      }
      CFRelease(v3);
    }
    else
    {
      *(_DWORD *)(a1 + 92) = 0;
    }
  }
}

BOOL acc_endpoint_setParentEndpointUUID(uint64_t a1, CFStringRef theString)
{
  if (a1)
  {
    uint64_t v4 = *(const void **)(a1 + 112);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 112) = 0;
    }
    if (theString)
    {
      CFNullRef Copy = (const __CFNull *)CFStringCreateCopy(kCFAllocatorDefault, theString);
      *(void *)(a1 + 112) = Copy;
      acc_endpoint_setProperty((pthread_mutex_t *)a1, kCFACCProperties_Endpoint_ParentEndpointUUID, Copy);
    }
    else
    {
      acc_endpoint_removeProperty((pthread_mutex_t *)a1, kCFACCProperties_Endpoint_ParentEndpointUUID);
      uint64_t v6 = *(const void **)(a1 + 112);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(a1 + 112) = 0;
      }
    }
  }
  return a1 != 0;
}

CFStringRef acc_endpoint_copyParentEndpointUUID(uint64_t a1)
{
  if (a1 && (CFStringRef v1 = *(const __CFString **)(a1 + 112)) != 0) {
    return CFStringCreateCopy(kCFAllocatorDefault, v1);
  }
  else {
    return 0;
  }
}

void OUTLINED_FUNCTION_3_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x18u);
}

void OUTLINED_FUNCTION_5_2(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_6_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x20u);
}

id acc_userNotifications_generateIdentifier(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v3 = 0;
  if (a1 && a2)
  {
    CFDictionaryRef v3 = +[NSString stringWithFormat:@"%@_%@", a1, a2];
    uint64_t v2 = vars8;
  }
  return v3;
}

ACCUserNotification *acc_userNotifications_accessoryNotSupported()
{
  BOOL v0 = objc_alloc_init(ACCUserNotification);
  [(ACCUserNotification *)v0 setType:2];
  uint64_t v1 = acc_strings_bundle();
  uint64_t v2 = [v1 localizedStringForKey:@"Accessory Not Supported" value:&stru_10021CEF8 table:0];
  [(ACCUserNotification *)v0 setTitle:v2];

  CFDictionaryRef v3 = acc_strings_bundle();
  uint64_t v4 = [v3 localizedStringForKey:@"This accessory is not supported by this device." value:&stru_10021CEF8 table:0];
  [(ACCUserNotification *)v0 setMessage:v4];

  [(ACCUserNotification *)v0 setIsModal:0];
  [(ACCUserNotification *)v0 setPresentViaSystemAperture:1];

  return v0;
}

id platform_communications_initiateCallToDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = +[ACCCommunicationsServer sharedServer];
  id v7 = [v6 initiateCallToDestination:a1 withService:a2 addressBookID:a3];

  return v7;
}

id platform_communications_initiateCallToVoicemail()
{
  BOOL v0 = +[ACCCommunicationsServer sharedServer];
  id v1 = [v0 initiateCallToVoicemail];

  return v1;
}

id platform_communications_initiateRedial()
{
  BOOL v0 = +[ACCCommunicationsServer sharedServer];
  id v1 = [v0 initiateRedial];

  return v1;
}

id platform_communications_acceptCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[ACCCommunicationsServer sharedServer];
  id v5 = [v4 acceptCallWithAction:a1 callUUID:a2];

  return v5;
}

id platform_communications_endCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[ACCCommunicationsServer sharedServer];
  id v5 = [v4 endCallWithAction:a1 callUUID:a2];

  return v5;
}

id platform_communications_endAllCalls()
{
  BOOL v0 = +[ACCCommunicationsServer sharedServer];
  id v1 = [v0 endAllCalls];

  return v1;
}

id platform_communications_swapCalls()
{
  BOOL v0 = +[ACCCommunicationsServer sharedServer];
  id v1 = [v0 swapCalls];

  return v1;
}

id platform_communications_mergeCalls()
{
  BOOL v0 = +[ACCCommunicationsServer sharedServer];
  id v1 = [v0 mergeCalls];

  return v1;
}

id platform_communications_updateHoldStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[ACCCommunicationsServer sharedServer];
  id v5 = [v4 updateHoldStatus:a1 forCallWithUUID:a2];

  return v5;
}

id platform_communications_updateMuteStatus(uint64_t a1)
{
  uint64_t v2 = +[ACCCommunicationsServer sharedServer];
  id v3 = [v2 updateMuteStatus:a1];

  return v3;
}

id platform_communications_sendDTMF(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[ACCCommunicationsServer sharedServer];
  id v5 = [v4 sendDTMF:a1 forCallWithUUID:a2];

  return v5;
}

uint64_t platform_communications_callStateUpdate(uint64_t a1)
{
  return accFeatureHandlers_invokeHandler(0, 48, a1);
}

uint64_t platform_communications_communicationsUpdate(uint64_t a1)
{
  return accFeatureHandlers_invokeHandler(0, 49, a1);
}

uint64_t platform_communications_listUpdate(int a1, uint64_t a2, int a3)
{
  if (a1 == 1)
  {
    int v4 = 52;
    return accFeatureHandlers_invokeHandler(0, v4, a2);
  }
  if (!a1)
  {
    if (a3) {
      int v4 = 51;
    }
    else {
      int v4 = 50;
    }
    return accFeatureHandlers_invokeHandler(0, v4, a2);
  }
  return 0;
}

void platform_communications_triggerCallStateUpdates()
{
  id v0 = +[ACCCommunicationsServer sharedServer];
  [v0 triggerCallStateUpdates];
}

void platform_communications_triggerCommunicationsUpdate()
{
  id v0 = +[ACCCommunicationsServer sharedServer];
  [v0 triggerCommunicationsUpdate];
}

void platform_communications_triggerListUpdate(uint64_t a1, uint64_t a2)
{
  id v4 = +[ACCCommunicationsServer sharedServer];
  [v4 triggerUpdateForListType:a1 coalesce:a2];
}

void platform_communications_addSubscriber(uint64_t a1)
{
  id v2 = +[ACCCommunicationsServer sharedServer];
  [v2 addSubscriber:a1];
}

void platform_communications_removeSubscriber(uint64_t a1)
{
  id v2 = +[ACCCommunicationsServer sharedServer];
  [v2 removeSubscriber:a1];
}

void platform_communications_incrementUserCount()
{
  id v0 = +[ACCCommunicationsServer sharedServer];
  [v0 incrementUserCount];

  id v1 = +[ACCCommunicationsServer sharedServer];
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = +[ACCFeaturePluginManager sharedManager];
    [v3 startPlugInsWithClasses:&off_100223248];
  }
}

void platform_communications_decrementUserCount()
{
  id v0 = +[ACCCommunicationsServer sharedServer];
  [v0 decrementUserCount];
}

uint64_t platform_communications_copyDefaultCallState()
{
  CFStringRef v1 = @"Status";
  unsigned int v2 = &off_100223368;
  +[NSDictionary dictionaryWithObjects:&v2 forKeys:&v1 count:1];
  return objc_claimAutoreleasedReturnValue();
}

uint64_t platform_communications_copyDefaultCommunicationsState()
{
  v1[0] = @"SignalStrength";
  v1[1] = @"RegistrationStatus";
  v2[0] = &off_100223368;
  v2[1] = &off_100223368;
  v1[2] = @"AirplaneModeStatus";
  v1[3] = @"TTYStatus";
  v2[2] = &__kCFBooleanFalse;
  v2[3] = &__kCFBooleanFalse;
  void v1[4] = @"CarrierName";
  v1[5] = @"CellularSupported";
  v2[4] = &stru_10021CEF8;
  v2[5] = &__kCFBooleanFalse;
  v1[6] = @"TelephonyEnabled";
  v1[7] = @"FaceTimeAudioEnabled";
  v2[6] = &__kCFBooleanFalse;
  v2[7] = &__kCFBooleanFalse;
  v1[8] = @"FaceTimeVideoEnabled";
  v1[9] = @"MuteStatus";
  v2[8] = &__kCFBooleanFalse;
  v2[9] = &__kCFBooleanFalse;
  v1[10] = @"CurrentCallCount";
  v1[11] = @"NewVoicemailCount";
  v2[10] = &off_100223380;
  v2[11] = &off_100223380;
  v1[12] = @"InitiateCallAvailable";
  v1[13] = @"EndAndAcceptAvailable";
  v2[12] = &__kCFBooleanFalse;
  v2[13] = &__kCFBooleanFalse;
  v1[14] = @"HoldAndAcceptAvailable";
  v1[15] = @"SwapAvailable";
  v2[14] = &__kCFBooleanFalse;
  v2[15] = &__kCFBooleanFalse;
  v1[16] = @"MergeAvailable";
  v1[17] = @"HoldAvailable";
  v2[16] = &__kCFBooleanFalse;
  v2[17] = &__kCFBooleanFalse;
  +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:18];
  return objc_claimAutoreleasedReturnValue();
}

id convertNSDataToNSString(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    id v5 = v3;
    uint64_t v6 = (unsigned __int8 *)[v5 bytes];
    id v7 = objc_alloc_init((Class)NSMutableString);
    if ([v5 length])
    {
      unint64_t v8 = 0;
      do
        objc_msgSend(v7, "appendFormat:", v4, v6[v8++]);
      while (v8 < (unint64_t)[v5 length]);
    }
    uint64_t v9 = +[NSString stringWithString:v7];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id convertNSStringToNSData(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    unsigned int v2 = +[NSCharacterSet hexadecimalCharacterSet];
    id v3 = [v2 invertedSet];
    id v4 = [v1 componentsSeparatedByCharactersInSet:v3];
    id v5 = [v4 componentsJoinedByString:&stru_10021CEF8];

    id v1 = v5;
    uint64_t v6 = (const char *)[v1 UTF8String];
    size_t v7 = strlen(v6) >> 1;
    unint64_t v8 = malloc_type_malloc(v7, 0x71BB6ACDuLL);
    if (v6 && (unint64_t)[v1 length] >= 2)
    {
      unint64_t v9 = 0;
      int v10 = 0;
      do
      {
        uint64_t v11 = 0;
        __int16 v22 = -21846;
        char v12 = 1;
        do
        {
          char v13 = v12;
          int v14 = v6[v11 | (2 * v10)];
          unsigned int v15 = v14 - 48;
          unsigned int v16 = v14 - 65;
          if ((v14 - 97) >= 6) {
            char v17 = 0;
          }
          else {
            char v17 = v14 - 87;
          }
          char v18 = v14 - 55;
          if (v16 > 5) {
            char v18 = v17;
          }
          if (v15 < 0xA) {
            char v18 = v15;
          }
          *((unsigned char *)&v22 + v11) = v18;
          uint64_t v11 = 1;
          char v12 = 0;
        }
        while ((v13 & 1) != 0);
        v8[v9] = HIBYTE(v22) | (16 * v22);
        unint64_t v9 = (v10 + 1);
        unint64_t v19 = (unint64_t)[v1 length];
        int v10 = v9;
      }
      while (v9 < v19 >> 1);
    }
    __int16 v20 = +[NSData dataWithBytes:v8 length:v7];
    if (v8) {
      free(v8);
    }
  }
  else
  {
    __int16 v20 = 0;
  }

  return v20;
}

uint64_t classImplementsMethodsInProtocol(void *a1, void *a2, BOOL a3, BOOL a4, void *a5)
{
  unint64_t v9 = a2;
  int v10 = +[NSMutableSet set];
  outCFIndex Count = 0;
  uint64_t v11 = protocol_copyMethodDescriptionList(v9, a3, a4, &outCount);
  char v12 = v11;
  if (outCount)
  {
    unint64_t v13 = 0;
    p_name = &v11->name;
    do
    {
      if (([a1 instancesRespondToSelector:*p_name] & 1) == 0)
      {
        unsigned int v15 = NSStringFromSelector(*p_name);
        [v10 addObject:v15];
      }
      ++v13;
      p_name += 2;
    }
    while (v13 < outCount);
  }
  free(v12);
  if (outCount && [v10 count])
  {
    uint64_t v16 = 0;
    if (!a5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v16 = 1;
  if (a5)
  {
LABEL_11:
    *a5 = +[NSSet setWithSet:v10];
  }
LABEL_12:

  return v16;
}

uint64_t isNSObjectNull(void *a1)
{
  if (!a1) {
    return 1;
  }
  id v1 = a1;
  unsigned int v2 = +[NSNull null];
  id v3 = [v1 isEqual:v2];

  return (uint64_t)v3;
}

id NSObjectIfNotNull(void *a1)
{
  id v1 = a1;
  if (isNSObjectNull(v1)) {
    id v2 = 0;
  }
  else {
    id v2 = v1;
  }

  return v2;
}

uint64_t iap2_btConnectionStatus_btComponentInfoHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 44)
  {
    id v3 = *(NSObject **)(gLogObjects + 344);
  }
  else
  {
    id v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "iAP2BTConnectionStatus BTComponentInfo Handler", buf, 2u);
  }
  uint64_t v4 = 0;
  if (a1 && a2)
  {
    unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
    BOOL v57 = 0;
    uint64_t v4 = 1;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1, &kCFTypeArrayCallBacks);
    CFMutableArrayRef v7 = Mutable;
    if (!FirstParam) {
      goto LABEL_61;
    }
    theArray = Mutable;
    int v55 = 0;
    uint64_t v56 = a2;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
      if (ParamID)
      {
        int v9 = ParamID;
        uint64_t v10 = gLogObjects;
        int v11 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 44)
        {
          char v12 = *(NSObject **)(gLogObjects + 344);
        }
        else
        {
          char v12 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)long long v59 = v10;
            *(_WORD *)&v59[8] = 1024;
            v60[0] = v11;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        a2 = v56;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int MsgID = iAP2MsgGetMsgID(v56);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)long long v59 = v9;
          *(_WORD *)&v59[4] = 1024;
          *(_DWORD *)&v59[6] = MsgID;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
        }
        goto LABEL_56;
      }
      unint64_t v13 = iAP2MsgGetFirstParam(a2, FirstParam);
      if (!v13) {
        break;
      }
      NextParam = (unsigned __int16 *)v13;
      int v15 = 0;
      BOOL v16 = 0;
      int v17 = 0;
      unsigned __int16 v18 = 0;
      ++v55;
      do
      {
        int v19 = iAP2MsgGetParamID((uint64_t)NextParam);
        if (v19 == 1)
        {
          BOOL DataAsBool = iAP2MsgGetDataAsBool(NextParam, &v57);
          if (v57)
          {
            uint64_t v42 = logObjectForModule_4();
            BOOL v46 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
            uint64_t v4 = 0;
            CFMutableArrayRef v7 = theArray;
            if (!v46) {
              goto LABEL_61;
            }
            int v47 = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)long long v59 = 1;
            *(_WORD *)&v59[4] = 1024;
            *(_DWORD *)&v59[6] = 0;
            LOWORD(v60[0]) = 1024;
            *(_DWORD *)((char *)v60 + 2) = v47;
            uint64_t v45 = "Subparam ID: %d parse error in Param ID: %d for Msg ID: 0x%04X - ignoring message";
            goto LABEL_68;
          }
          BOOL v16 = DataAsBool;
          int v15 = 1;
        }
        else
        {
          int v20 = v19;
          if (v19)
          {
            uint64_t v23 = gLogObjects;
            int v24 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 44)
            {
              int v25 = *(NSObject **)(gLogObjects + 344);
            }
            else
            {
              int v25 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)long long v59 = v23;
                *(_WORD *)&v59[8] = 1024;
                v60[0] = v24;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
            }
            a2 = v56;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              int v26 = iAP2MsgGetMsgID(v56);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)long long v59 = v20;
              *(_WORD *)&v59[4] = 1024;
              *(_DWORD *)&v59[6] = 0;
              LOWORD(v60[0]) = 1024;
              *(_DWORD *)((char *)v60 + 2) = v26;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Unknown Subparam ID: %d in Param ID: %d for Msg ID: 0x%04X - ignoring subparam", buf, 0x14u);
            }
          }
          else
          {
            unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v57);
            if (v57)
            {
              uint64_t v42 = logObjectForModule_4();
              BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
              uint64_t v4 = 0;
              CFMutableArrayRef v7 = theArray;
              if (!v43) {
                goto LABEL_61;
              }
              int v44 = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)long long v59 = 0;
              *(_WORD *)&v59[4] = 1024;
              *(_DWORD *)&v59[6] = 0;
              LOWORD(v60[0]) = 1024;
              *(_DWORD *)((char *)v60 + 2) = v44;
              uint64_t v45 = "Subparam ID: %d parse error in Param ID: %d for Msg ID: 0x%04X - ignoring message";
LABEL_68:
              uint64_t v48 = v42;
              uint32_t v49 = 20;
              goto LABEL_69;
            }
            unsigned __int16 v18 = DataAsU16;
            int v17 = 1;
          }
        }
        NextParam = iAP2MsgGetNextParam(a2, FirstParam, NextParam);
      }
      while (NextParam);
      if (v17 & v15)
      {
        ComponentForID = _findComponentForID(a1, v18);
        if (ComponentForID)
        {
          ComponentInfoDict = platform_btComponentStatus_createComponentInfoDict(*(const void **)(a1 + 8), *((const void **)ComponentForID + 1), *((const void **)ComponentForID + 2), (UInt8 *)ComponentForID + 24, v16);
          CFArrayAppendValue(theArray, ComponentInfoDict);
          if (ComponentInfoDict) {
            CFRelease(ComponentInfoDict);
          }
          goto LABEL_56;
        }
        uint64_t v37 = gLogObjects;
        int v38 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 44)
        {
          __int16 v39 = *(NSObject **)(gLogObjects + 344);
        }
        else
        {
          __int16 v39 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)long long v59 = v37;
            *(_WORD *)&v59[8] = 1024;
            v60[0] = v38;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        int v55 = 0;
        a2 = v56;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          int v40 = iAP2MsgGetMsgID(v56);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)long long v59 = v40;
          *(_WORD *)&v59[4] = 1024;
          *(_DWORD *)&v59[6] = v18;
          int v34 = v39;
          BOOL v35 = "Ignore message (0x%04X), Unknown componentID %d";
          uint32_t v36 = 14;
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v30 = gLogObjects;
        int v31 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 44)
        {
          int v32 = *(NSObject **)(gLogObjects + 344);
        }
        else
        {
          int v32 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)long long v59 = v30;
            *(_WORD *)&v59[8] = 1024;
            v60[0] = v31;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        int v55 = 0;
        a2 = v56;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          int v33 = iAP2MsgGetMsgID(v56);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)long long v59 = v33;
          *(_WORD *)&v59[4] = 1024;
          *(_DWORD *)&v59[6] = v17 & 1;
          LOWORD(v60[0]) = 1024;
          *(_DWORD *)((char *)v60 + 2) = v15 & 1;
          int v34 = v32;
          BOOL v35 = "Ignore message (0x%04X), both componentID(valid=%d) and enabled(valid=%d) flag required";
          uint32_t v36 = 20;
LABEL_55:
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v35, buf, v36);
          int v55 = 0;
        }
      }
LABEL_56:
      unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0, FirstParam);
      if (!FirstParam)
      {
        if (v55 && acc_endpoint_getTransportType(*(void *)a1) != 2)
        {
          platform_btComponentStatus_btComponentInfo(*(void *)(a1 + 8), theArray);
          CFMutableArrayRef v7 = theArray;
          uint64_t v4 = 1;
        }
        else
        {
          uint64_t v4 = 1;
          CFMutableArrayRef v7 = theArray;
        }
        goto LABEL_61;
      }
    }
    CFIndex v50 = logObjectForModule_4();
    BOOL v51 = os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
    uint64_t v4 = 0;
    CFMutableArrayRef v7 = theArray;
    if (v51)
    {
      int v52 = iAP2MsgGetMsgID(a2);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)long long v59 = 0;
      *(_WORD *)&v59[4] = 1024;
      *(_DWORD *)&v59[6] = v52;
      uint64_t v45 = "Param ID: %d parse error for Msg ID: 0x%04X - ignoring message";
      uint64_t v48 = v50;
      uint32_t v49 = 14;
LABEL_69:
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, v45, buf, v49);
      CFMutableArrayRef v7 = theArray;
      uint64_t v4 = 0;
    }
LABEL_61:
    if (v7) {
      CFRelease(v7);
    }
  }
  return v4;
}

void *logObjectForModule_4()
{
  if (gLogObjects && gNumLogObjects >= 44) {
    return *(void **)(gLogObjects + 344);
  }
  id v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

unsigned __int16 *_findComponentForID(uint64_t a1, int a2)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 5u);
  if (gLogObjects && gNumLogObjects >= 44)
  {
    id v5 = *(NSObject **)(gLogObjects + 344);
  }
  else
  {
    id v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    if (!a1 || (uint64_t v6 = *(void *)(a1 + 8)) == 0) {
      uint64_t v6 = 0;
    }
    int v9 = 138412546;
    uint64_t v10 = v6;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "_findComponentForID %@, componentID=%u", (uint8_t *)&v9, 0x12u);
  }
  if (!Feature) {
    return 0;
  }
  uint64_t v7 = *(unsigned int *)(Feature + 8);
  if ((int)v7 < 1) {
    return 0;
  }
  for (uint64_t result = *(unsigned __int16 **)Feature; *result != a2; result += 16)
  {
    if (!--v7) {
      return 0;
    }
  }
  return result;
}

uint64_t iap2_btConnectionStatus_startBTConnectionUpdateHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 44)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 344);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2BTConnectionStatus StartBTConnectionUpdate Handler", buf, 2u);
  }
  uint64_t v5 = 0;
  if (!a1 || !a2) {
    return v5;
  }
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
  int v33 = 0;
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  if (FirstParam)
  {
    *(void *)&long long v8 = 67109376;
    long long v31 = v8;
    *(void *)&long long v8 = 134218240;
    long long v30 = v8;
    do
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
      if (ParamID)
      {
        int v10 = ParamID;
        uint64_t v11 = gLogObjects;
        int v12 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 44)
        {
          unint64_t v13 = *(NSObject **)(gLogObjects + 344);
        }
        else
        {
          unint64_t v13 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v30;
            *(void *)&uint8_t buf[4] = v11;
            *(_WORD *)&buf[12] = 1024;
            int v35 = v12;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            unint64_t v13 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = v31;
          *(_DWORD *)&uint8_t buf[4] = v10;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = MsgID;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
        }
      }
      else
      {
        __int16 valuePtr = -21846;
        __int16 valuePtr = iAP2MsgGetDataAsU16(FirstParam, &v33);
        if (v33)
        {
          uint64_t v28 = logObjectForModule_4();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            int v29 = iAP2MsgGetMsgID(a2);
            *(void *)buf = v31;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
          }
LABEL_47:
          uint64_t v5 = 0;
          if (!Mutable) {
            return v5;
          }
LABEL_43:
          CFRelease(Mutable);
          return v5;
        }
        CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
        CFSetSetValue(Mutable, v14);
        if (v14) {
          CFRelease(v14);
        }
      }
      unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0, FirstParam);
    }
    while (FirstParam);
  }
  if (CFSetGetCount(Mutable) < 1)
  {
    if (gLogObjects && gNumLogObjects >= 44)
    {
      int v25 = *(NSObject **)(gLogObjects + 344);
    }
    else
    {
      int v25 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      CFIndex Count = CFSetGetCount(Mutable);
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = Count;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "iAP2BTConnectionStatus StartBTConnectionUpdate: no components, componentIDSet.count=%ld, skip processing", buf, 0xCu);
    }
  }
  else
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 5u);
    if (!Feature) {
      goto LABEL_47;
    }
    *(unsigned char *)(Feature + 16) = 1;
    CFIndex v17 = CFSetGetCount(Mutable);
    uint64_t v18 = __chkstk_darwin();
    int v20 = (const void **)((char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v18)
    {
      memset((char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), 170, v19);
      CFSetGetValues(Mutable, v20);
      if (v17 >= 1)
      {
        do
        {
          CFNumberRef v21 = (const __CFNumber *)*v20;
          *(_WORD *)buf = -21846;
          CFNumberGetValue(v21, kCFNumberSInt16Type, buf);
          ComponentForID = _findComponentForID(a1, *(unsigned __int16 *)buf);
          if (ComponentForID)
          {
            uint64_t v23 = ComponentForID;
            CFDataRef v24 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)ComponentForID + 24, 6);
            platform_btConnectionStatus_accessoryStartConnectionUpdates(*(void *)(a1 + 8), *((void **)v23 + 1), *((void *)v23 + 2), (uint64_t)v24);
            if (v24) {
              CFRelease(v24);
            }
          }
          ++v20;
          --v17;
        }
        while (v17);
      }
    }
    else
    {
      CFSetGetValues(Mutable, (const void **)((char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0)));
    }
  }
  uint64_t v5 = 1;
  if (Mutable) {
    goto LABEL_43;
  }
  return v5;
}

uint64_t iap2_btConnectionStatus_stopBTConnectionUpdateHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 44)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 344);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2BTConnectionStatus StopBTConnectionUpdate Handler", v6, 2u);
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t result = iap2_feature_getFeature(a1, 5u);
    if (result)
    {
      *(unsigned char *)(result + 16) = 0;
      platform_btConnectionStatus_accessoryStopAllConnectionUpdates(*(void *)(a1 + 8));
      return 1;
    }
  }
  return result;
}

uint64_t iap2_btConnectionStatus_connectionUpdateHandler(uint64_t result, uint64_t a2)
{
  if (result)
  {
    id v3 = (uint64_t *)result;
    uint64_t Feature = iap2_feature_getFeature(result, 5u);
    if (gLogObjects && gNumLogObjects >= 44)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 344);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = "exists";
      uint64_t v7 = v3[1];
      if (!Feature) {
        uint64_t v6 = "missing!!";
      }
      int v39 = 138412546;
      uint64_t v40 = v7;
      __int16 v41 = 2080;
      uint64_t v42 = (void *)v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "connectionUpdateHandler %@ btConnStatus %s", (uint8_t *)&v39, 0x16u);
    }
    uint64_t result = 0;
    if (a2)
    {
      if (Feature)
      {
        if (!*(unsigned char *)(Feature + 16))
        {
          uint64_t v37 = logObjectForModule_4();
          BOOL v38 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (!v38) {
            return result;
          }
          LOWORD(v39) = 0;
          uint64_t v18 = "Received BT connection update, but BT updates are not started, ignoring...";
          CFDataRef v24 = v37;
          uint32_t v25 = 2;
          goto LABEL_48;
        }
        if (*(_DWORD *)a2) {
          return 0;
        }
        CFStringRef v8 = *(const __CFString **)(a2 + 8);
        if (v8)
        {
          uint64_t v9 = iap2_feature_getFeature((uint64_t)v3, 5u);
          if (gLogObjects && gNumLogObjects >= 44)
          {
            int v10 = *(NSObject **)(gLogObjects + 344);
          }
          else
          {
            int v10 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = v3[1];
            int v39 = 138412546;
            uint64_t v40 = v12;
            __int16 v41 = 2112;
            uint64_t v42 = (void *)v8;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "_findComponentForUID %@, componentUID=%@", (uint8_t *)&v39, 0x16u);
          }
          if (v9 && *(int *)(v9 + 8) >= 1)
          {
            uint64_t v13 = 0;
            uint64_t v14 = 0;
            while (CFStringCompare(*(CFStringRef *)(*(void *)v9 + v13 + 8), v8, 0))
            {
              ++v14;
              v13 += 32;
              if (v14 >= *(int *)(v9 + 8)) {
                goto LABEL_40;
              }
            }
            uint64_t v19 = *(void *)v9;
            if (*(void *)v9)
            {
              if (gLogObjects && gNumLogObjects >= 44)
              {
                int v20 = *(NSObject **)(gLogObjects + 344);
              }
              else
              {
                int v20 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
              {
                uint64_t v26 = v3[1];
                int v39 = 138412290;
                uint64_t v40 = v26;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "connectionUpdateHandler %@, create msg", (uint8_t *)&v39, 0xCu);
              }
              uint64_t v27 = iAP2MsgInit((uint64_t)(v3 + 15), 19972, v3[24], 0xFFFF, 0, 0);
              uint64_t v28 = iAP2MsgAddU16Param(v27, 0, 0, *(unsigned __int16 *)(v19 + v13));
              int v29 = iAP2MsgAddGroupParam(v27, 1);
              if (v29)
              {
                unsigned int v30 = *(_DWORD *)(a2 + 16);
                if (v30)
                {
                  uint64_t v31 = (uint64_t)v29;
                  __int16 v32 = 0;
                  do
                  {
                    if (v30) {
                      iAP2MsgAddVoidParam(v27, v31, v32);
                    }
                    ++v32;
                    BOOL v33 = v30 >= 2;
                    v30 >>= 1;
                  }
                  while (v33);
                }
                goto LABEL_63;
              }
              if (v28)
              {
LABEL_63:
                if (gLogObjects && gNumLogObjects >= 44)
                {
                  int v34 = *(NSObject **)(gLogObjects + 344);
                }
                else
                {
                  int v34 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
                {
                  uint64_t v35 = v3[1];
                  int MsgID = iAP2MsgGetMsgID(v27);
                  int v39 = 138412546;
                  uint64_t v40 = v35;
                  __int16 v41 = 1024;
                  LODWORD(v42) = MsgID;
                  _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "connectionUpdateHandler %@ send message %xh", (uint8_t *)&v39, 0x12u);
                }
                iap2_sessionControl_sendOutgoingMessage(v3, v27);
                platform_btConnectionStatus_deleteParams((void *)a2);
                return 1;
              }
              return 0;
            }
          }
LABEL_40:
          if (gLogObjects && gNumLogObjects >= 44)
          {
            uint64_t v11 = *(NSObject **)(gLogObjects + 344);
          }
          else
          {
            uint64_t v11 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          BOOL v21 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (!v21) {
            return result;
          }
          uint64_t v22 = v3[1];
          uint64_t v23 = *(void **)(a2 + 8);
          int v39 = 138412546;
          uint64_t v40 = v22;
          __int16 v41 = 2112;
          uint64_t v42 = v23;
          uint64_t v18 = "connectionUpdateHandler %@, Not found componentUID:%@, connectionUpdate not sent";
          goto LABEL_47;
        }
        if (gLogObjects && gNumLogObjects >= 44)
        {
          uint64_t v11 = *(NSObject **)(gLogObjects + 344);
        }
        else
        {
          uint64_t v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        BOOL v15 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v15)
        {
          uint64_t v16 = v3[1];
          CFIndex v17 = *(void **)(a2 + 8);
          int v39 = 138412546;
          uint64_t v40 = v16;
          __int16 v41 = 2112;
          uint64_t v42 = v17;
          uint64_t v18 = "connectionUpdateHandler %@, Invalid componentUID:%@, connectionUpdate not sent";
LABEL_47:
          CFDataRef v24 = v11;
          uint32_t v25 = 22;
LABEL_48:
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v39, v25);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t iap2_btConnectionStatus_isSupportedOnConnection(uint64_t a1)
{
  char v4 = 0;
  int v2 = iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgBTConnectionStatusMainList, 3, &v4);
  return v2 | iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgBTComponentInfoMainList, 1, &v4);
}

void *_createFeature_2(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 44)
  {
    int v2 = *(NSObject **)(gLogObjects + 344);
  }
  else
  {
    int v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2BTConnectionStatus _createFeature", v4, 2u);
  }
  if (!a1) {
    return 0;
  }
  uint64_t result = malloc_type_calloc(1uLL, 0x18uLL, 0x1020040545B2139uLL);
  if (result)
  {
    *uint64_t result = 0;
    result[1] = 0;
    *((unsigned char *)result + 16) = 0;
  }
  return result;
}

uint64_t _destroyFeature_2(void **a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 44)
  {
    char v4 = *(NSObject **)(gLogObjects + 344);
  }
  else
  {
    char v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LOWORD(v15) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2BTConnectionStatus _destroyFeature", (uint8_t *)&v15, 2u);
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v6 = (void **)*a1;
    if (*a1)
    {
      platform_btConnectionStatus_accessoryStopAllConnectionUpdates(*(void *)(a2 + 8));
      platform_btConnectionStatus_accessoryDetached(*(void *)(a2 + 8));
      uint64_t v7 = (int *)*a1;
      if (gLogObjects && gNumLogObjects >= 44)
      {
        CFStringRef v8 = *(NSObject **)(gLogObjects + 344);
      }
      else
      {
        CFStringRef v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a2 + 8);
        int v15 = 138412290;
        uint64_t v16 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "_cleanupComponentList %@", (uint8_t *)&v15, 0xCu);
      }
      if (v7)
      {
        if (v7[2] >= 1)
        {
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          uint64_t v12 = *(void *)v7;
          do
          {
            uint64_t v13 = *(const void **)(v12 + v10 + 8);
            if (v13)
            {
              CFRelease(v13);
              uint64_t v12 = *(void *)v7;
              *(void *)(*(void *)v7 + v10 + 8) = 0;
            }
            uint64_t v14 = *(const void **)(v12 + v10 + 16);
            if (v14)
            {
              CFRelease(v14);
              uint64_t v12 = *(void *)v7;
              *(void *)(*(void *)v7 + v10 + 16) = 0;
            }
            ++v11;
            v10 += 32;
          }
          while (v11 < v7[2]);
        }
        v7[2] = 0;
      }
      if (*v6)
      {
        free(*v6);
        const char *v6 = 0;
      }
      if (*a1)
      {
        free(*a1);
        *a1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL _startFeatureFromDevice_0(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 44)
  {
    int v2 = *(NSObject **)(gLogObjects + 344);
  }
  else
  {
    int v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2BTConnectionStatus _startFeatureFromDevice", v6, 2u);
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 5u);
  if (Feature && iap2_btConnectionStatus_isSupportedOnConnection(a1))
  {
    if (!a1 || (uint64_t v4 = *(void *)(a1 + 8)) == 0) {
      uint64_t v4 = 0;
    }
    platform_btConnectionStatus_accessoryAttached(v4);
    _setupComponentList(a1);
  }
  return Feature != 0;
}

uint64_t _checkIdentificationInfo_1(void *a1)
{
  __int16 v8 = 0;
  uint64_t result = iap2_identification_checkIdentificationMsgIDs((uint64_t)a1, (uint64_t)&gskMsgBTConnectionStatusMainList, 3u, (unsigned char *)&v8 + 1);
  if (HIBYTE(v8)) {
    BOOL v3 = result == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t result = iap2_identification_checkIdentificationMsgIDs((uint64_t)a1, (uint64_t)&gskMsgBTComponentInfoMainList, 1u, &v8);
    if (!(_BYTE)v8 || !result)
    {
      int v4 = HIBYTE(v8);
      if (HIBYTE(v8) && !result)
      {
        if (iap2_identification_getTransportComponent(a1, 3))
        {
          uint64_t result = 0;
        }
        else
        {
          TransportComponent = iap2_identification_getTransportComponent(a1, 5);
          uint64_t result = 0;
          if (TransportComponent) {
            uint64_t v6 = 0;
          }
          else {
            uint64_t v6 = 12;
          }
          if (!TransportComponent)
          {
            for (uint64_t i = 0; i != 36; i += 12)
              iap2_identification_rejectMsgID((uint64_t)a1, *(unsigned __int16 *)((char *)&gskMsgBTConnectionStatusMainList + i), *(_DWORD *)((char *)&gskMsgBTConnectionStatusMainList + i + 4), v6);
            uint64_t result = v6;
          }
        }
        int v4 = HIBYTE(v8);
      }
      if ((v4 || (_BYTE)v8) && !result)
      {
        iap2_features_createFeature((uint64_t)a1, 5u);
        iap2_identification_setIdentifiedForFeature((uint64_t)a1, 5u);
        return 0;
      }
    }
  }
  return result;
}

void _setupComponentList(uint64_t a1)
{
  uint64_t v53 = a1;
  CFDictionaryRef v1 = (const __CFDictionary *)iap2_identification_transportComponents(a1);
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    CFIndex Count = CFDictionaryGetCount(v1);
    if (gLogObjects && gNumLogObjects >= 44)
    {
      int v4 = *(NSObject **)(gLogObjects + 344);
    }
    else
    {
      int v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      _setupComponentList_cold_2(Count, v4);
      if (!Count) {
        return;
      }
    }
    else if (!Count)
    {
      return;
    }
    uint32_t v49 = &v45;
    __chkstk_darwin();
    uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    memset(v6, 170, v5);
    CFDictionaryGetKeysAndValues(v2, 0, (const void **)v6);
    __int16 v8 = &unk_100239000;
    if (Count >= 1)
    {
      uint64_t v9 = 0;
      BOOL v46 = v55;
      CFAllocatorRef v51 = kCFAllocatorDefault;
      *(void *)&long long v7 = 134218240;
      long long v48 = v7;
      *(void *)&long long v7 = 67110146;
      long long v47 = v7;
      *(void *)&long long v7 = 138412802;
      long long v50 = v7;
      do
      {
        uint64_t v10 = *(unsigned __int16 **)&v6[8 * v9];
        uint64_t v11 = v8[49];
        int v12 = gNumLogObjects;
        if (v11) {
          BOOL v13 = gNumLogObjects <= 43;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        if (v10)
        {
          if (v14)
          {
            int v15 = *(NSObject **)(v11 + 344);
          }
          else
          {
            int v15 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v48;
              *(void *)long long v62 = v11;
              *(_WORD *)&v62[8] = 1024;
              *(_DWORD *)&v62[10] = v12;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            int v36 = *v10;
            int v37 = *((_DWORD *)v10 + 5);
            uint64_t v38 = *((void *)v10 + 1);
            *(_DWORD *)buf = v47;
            *(_DWORD *)long long v62 = v9;
            *(_WORD *)&v62[4] = 2048;
            *(void *)&v62[6] = Count;
            __int16 v63 = 1024;
            *(_DWORD *)int v64 = v36;
            *(_WORD *)&v64[4] = 1024;
            *(_DWORD *)&v64[6] = v37;
            __int16 v65 = 2112;
            uint64_t v66 = v38;
            _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "_setupComponentList: found transportComponent, %d/%ld id=%d type=%d name=%@", buf, 0x28u);
          }
          int v17 = *((_DWORD *)v10 + 5);
          if (v17 == 5 || v17 == 3)
          {
            uint64_t v19 = v6;
            CFIndex v20 = Count;
            int v59 = -1431655766;
            __int16 v60 = -21846;
            int v57 = -1431655766;
            __int16 v58 = -21846;
            __int16 v56 = -21846;
            int v21 = *v10;
            CFAllocatorRef v22 = v51;
            CFUUIDRef v23 = CFUUIDCreate(v51);
            CFStringRef v24 = CFUUIDCreateString(v22, v23);
            CFStringRef Copy = CFStringCreateCopy(v22, *((CFStringRef *)v10 + 1));
            int v57 = *((_DWORD *)v10 + 6);
            __int16 v58 = v10[14];
            uint64_t Feature = iap2_feature_getFeature(v53, 5u);
            uint64_t v26 = v8[49];
            int v27 = gNumLogObjects;
            if (v26 && gNumLogObjects >= 44)
            {
              uint64_t v28 = *(NSObject **)(v26 + 344);
            }
            else
            {
              uint64_t v28 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v48;
                *(void *)long long v62 = v26;
                *(_WORD *)&v62[8] = 1024;
                *(_DWORD *)&v62[10] = v27;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
            }
            __int16 v8 = &unk_100239000;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              if (!v53 || (uint64_t v29 = *(void *)(v53 + 8)) == 0) {
                uint64_t v29 = 0;
              }
              *(_DWORD *)buf = v50;
              *(void *)long long v62 = v29;
              *(_WORD *)&v62[8] = 1024;
              *(_DWORD *)&v62[10] = v21;
              __int16 v63 = 2112;
              *(void *)int v64 = v24;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "_addComponent %@, component=(%u, %@)", buf, 0x1Cu);
            }
            if (Feature)
            {
              int v30 = *(_DWORD *)(Feature + 12);
              if (!v30)
              {
                *(_DWORD *)(Feature + 12) = 4;
                *(void *)uint64_t Feature = malloc_type_malloc(0x80uLL, 0x10600404D6FD926uLL);
                int v30 = *(_DWORD *)(Feature + 12);
              }
              if (v30 <= *(_DWORD *)(Feature + 8))
              {
                int v31 = 2 * v30;
                __int16 v32 = (char *)malloc_type_realloc(*(void **)Feature, 64 * v30, 0x10600404D6FD926uLL);
                if (v32)
                {
                  *(void *)uint64_t Feature = v32;
                  *(_DWORD *)(Feature + 12) = v31;
                  bzero(&v32[32 * *(int *)(Feature + 8)], 32 * (v31 - *(_DWORD *)(Feature + 8)));
                }
                else
                {
                  uint64_t v33 = gLogObjects;
                  int v34 = gNumLogObjects;
                  if (gLogObjects && gNumLogObjects >= 44)
                  {
                    uint64_t v35 = *(NSObject **)(gLogObjects + 344);
                  }
                  else
                  {
                    BOOL v39 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
                    uint64_t v35 = &_os_log_default;
                    if (v39)
                    {
                      *(_DWORD *)buf = v48;
                      *(void *)long long v62 = v33;
                      *(_WORD *)&v62[8] = 1024;
                      *(_DWORD *)&v62[10] = v34;
                      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                      uint64_t v35 = &_os_log_default;
                    }
                  }
                  uint64_t v40 = v35;
                  __int16 v8 = (void *)&unk_100239000;
                  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                  {
                    if (!v53 || (uint64_t v43 = *(void *)(v53 + 8)) == 0) {
                      uint64_t v43 = 0;
                    }
                    int v44 = *(_DWORD *)(Feature + 12);
                    *(_DWORD *)buf = v50;
                    *(void *)long long v62 = v43;
                    *(_WORD *)&v62[8] = 1024;
                    *(_DWORD *)&v62[10] = v44;
                    __int16 v63 = 1024;
                    *(_DWORD *)int v64 = v31;
                    _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "_addComponent %@ FAILED to re-allocate buffer for componentInfoList, allocCount=%d->%d", buf, 0x18u);
                  }
                }
              }
              uint64_t v41 = *(void *)Feature + 32 * *(int *)(Feature + 8);
              *(_WORD *)uint64_t v41 = v21;
              *(_DWORD *)(v41 + 2) = v59;
              *(_WORD *)(v41 + 6) = v60;
              CFStringRef v42 = Copy;
              *(void *)(v41 + 8) = v24;
              *(void *)(v41 + 16) = v42;
              *(_DWORD *)(v41 + 24) = v57;
              *(_WORD *)(v41 + 28) = v58;
              *(_WORD *)(v41 + 30) = v56;
              ++*(_DWORD *)(Feature + 8);
            }
            if (v23) {
              CFRelease(v23);
            }
            CFIndex Count = v20;
            uint64_t v6 = v19;
          }
        }
        else
        {
          if (v14)
          {
            uint64_t v16 = *(NSObject **)(v11 + 344);
          }
          else
          {
            uint64_t v16 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v48;
              *(void *)long long v62 = v11;
              *(_WORD *)&v62[8] = 1024;
              *(_DWORD *)&v62[10] = v12;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
          }
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            _setupComponentList_cold_1(&v54, v46, v16);
          }
        }
        ++v9;
      }
      while (Count != v9);
    }
  }
}

void acc_restrictedMode_accessoryAttached()
{
  v1[0] = 1;
  int v0 = ACMKernelControl(34);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v1[0] = 67109120;
    v1[1] = v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "acmStatus (accessoryAttached): %d", (uint8_t *)v1, 8u);
  }
}

void acc_restrictedMode_accessoryDetached()
{
  v1[0] = 1;
  int v0 = ACMKernelControl(37);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v1[0] = 67109120;
    v1[1] = v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "acmStatus (accessoryDetached): %d", (uint8_t *)v1, 8u);
  }
}

BOOL acc_authInfo_init(BOOL result)
{
  if (result) {
    return acc_authInfo_cleanup(result, 1);
  }
  return result;
}

BOOL acc_authInfo_cleanup(uint64_t a1, int a2)
{
  if (a1)
  {
    if (a2)
    {
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
    *(_DWORD *)(a1 + 20) = 0;
    BOOL v3 = *(const void **)(a1 + 24);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 24) = 0;
    }
    int v4 = *(const void **)(a1 + 32);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 32) = 0;
    }
    size_t v5 = *(const void **)(a1 + 40);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 40) = 0;
    }
    uint64_t v6 = *(const void **)(a1 + 48);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 48) = 0;
    }
    *(_DWORD *)(a1 + 56) = 255;
    *(unsigned char *)(a1 + 60) = 0;
  }
  return a1 != 0;
}

BOOL acc_authInfo_setCertData(uint64_t a1, const void *a2)
{
  if (a1)
  {
    acc_authInfo_cleanup(a1, 0);
    *(_DWORD *)(a1 + 56) = 255;
    if (a2) {
      CFRetain(a2);
    }
    int v4 = *(const void **)(a1 + 24);
    if (v4) {
      CFRelease(v4);
    }
    *(void *)(a1 + 24) = a2;
    if (a2)
    {
      *(_DWORD *)(a1 + 20) = 0;
      size_t v5 = (int *)(a1 + 20);
      if (gLogObjects && gNumLogObjects >= 18)
      {
        uint64_t v6 = *(NSObject **)(gLogObjects + 136);
      }
      else
      {
        uint64_t v6 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v31) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Parsing auth cert data...", (uint8_t *)&v31, 2u);
      }
      int v7 = platform_auth_certificateAuthVersionNumber();
      int v8 = v7;
      if (v7 == 3) {
        int v9 = 3;
      }
      else {
        int v9 = 0;
      }
      if (v7 == 2) {
        int v9 = 2;
      }
      *(_DWORD *)(a1 + 20) = v9;
      if (gLogObjects && gNumLogObjects >= 18)
      {
        uint64_t v10 = *(NSObject **)(gLogObjects + 136);
      }
      else
      {
        uint64_t v10 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *v5;
        int v31 = 67109376;
        *(_DWORD *)__int16 v32 = v11;
        *(_WORD *)&v32[4] = 1024;
        *(_DWORD *)&v32[6] = v8;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "pAuthInfo->authVersion: %{coreacc:ACCAuthInfo_Version_t}d, authVersionNum: %d", (uint8_t *)&v31, 0xEu);
      }
      int v12 = *(const void **)(a1 + 32);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(a1 + 32) = 0;
      }
      CFDataRef CertificateSerialNumber = (const __CFData *)platform_auth_createCertificateSerialNumber(*(void *)(a1 + 24));
      *(void *)(a1 + 32) = CertificateSerialNumber;
      if (*(void *)(a1 + 40))
      {
        CFRelease(*(CFTypeRef *)(a1 + 40));
        *(void *)(a1 + 40) = 0;
        CFDataRef CertificateSerialNumber = *(const __CFData **)(a1 + 32);
      }
      *(void *)(a1 + 40) = CFStringCreateFromCFData(CertificateSerialNumber, @"%02X");
      CapsFromAuthCert = (const UInt8 *)platform_auth_createCapsFromAuthCert();
      int v15 = *(const void **)(a1 + 48);
      if (v15)
      {
        CFRelease(v15);
        *(void *)(a1 + 48) = 0;
      }
      if (CapsFromAuthCert) {
        *(void *)(a1 + 48) = CFDataCreate(kCFAllocatorDefault, CapsFromAuthCert, 32);
      }
      platform_auth_deallocAuthCertCaps();
      if (gLogObjects && gNumLogObjects >= 18)
      {
        uint64_t v16 = *(NSObject **)(gLogObjects + 136);
      }
      else
      {
        uint64_t v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v17 = *(void *)(a1 + 40);
        uint64_t v19 = *(void *)(a1 + 48);
        int v31 = 138412802;
        *(void *)__int16 v32 = v17;
        *(_WORD *)&v32[8] = 2112;
        uint64_t v33 = v18;
        __int16 v34 = 2112;
        uint64_t v35 = v19;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "certSerialString: %@, certSerial: %@, certCapabilities: %@", (uint8_t *)&v31, 0x20u);
      }
      if (*v5 != 3)
      {
        if (*v5 == 2)
        {
          CFDataRef v20 = *(const __CFData **)(a1 + 32);
          if (v20 && CFDataGetLength(v20) >= 7) {
            *(_DWORD *)(a1 + 56) = CFDataGetBytePtr(*(CFDataRef *)(a1 + 32))[7];
          }
          if (gLogObjects && gNumLogObjects >= 18)
          {
            int v21 = *(NSObject **)(gLogObjects + 136);
          }
          else
          {
            int v21 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            int v23 = *(_DWORD *)(a1 + 56);
            int v31 = 67109120;
            *(_DWORD *)__int16 v32 = v23;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "certClass: %{coreacc:ACCAuthInfo_V2_Info_CertClass_t}d", (uint8_t *)&v31, 8u);
          }
        }
        else
        {
          if (gLogObjects && gNumLogObjects >= 18)
          {
            CFAllocatorRef v22 = *(NSObject **)(gLogObjects + 136);
          }
          else
          {
            CFAllocatorRef v22 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            acc_authInfo_setCertData_cold_1(a1 + 20, v22, v24, v25, v26, v27, v28, v29);
          }
        }
      }
    }
  }
  return a1 != 0;
}

uint64_t acc_authInfo_setStatus(uint64_t result, uint64_t a2, int a3)
{
  if (result)
  {
    if (a2 >= 5)
    {
      int v4 = logObjectForModule_5();
      uint64_t result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
      if (result)
      {
        acc_authInfo_setStatus_cold_1(a2, v4, v5, v6, v7, v8, v9, v10);
        return 0;
      }
    }
    else
    {
      *(_DWORD *)(result + 4 * a2) = a3;
      return 1;
    }
  }
  return result;
}

void *logObjectForModule_5()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 18;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    return *(void **)(gLogObjects + 136);
  }
  CFDictionaryRef v1 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v1;
}

BOOL acc_authInfo_setCTAAllowed(uint64_t a1, char a2)
{
  if (a1) {
    *(unsigned char *)(a1 + 60) = a2;
  }
  return a1 != 0;
}

uint64_t acc_authInfo_getStatus(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2 >= 5)
    {
      BOOL v3 = logObjectForModule_5();
      uint64_t result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
      if (result)
      {
        acc_authInfo_setStatus_cold_1(a2, v3, v4, v5, v6, v7, v8, v9);
        return 0;
      }
    }
    else
    {
      return *(unsigned int *)(result + 4 * a2);
    }
  }
  return result;
}

BOOL acc_authInfo_isAuthenticated(BOOL result, uint64_t a2)
{
  if (result)
  {
    if (a2 == 5 || a2 >= 7)
    {
      uint64_t v5 = logObjectForModule_5();
      uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
      if (result)
      {
        acc_authInfo_setStatus_cold_1(a2, v5, v6, v7, v8, v9, v10, v11);
        return 0;
      }
    }
    else if (a2 == 6)
    {
      uint64_t v3 = 0;
      int v4 = 0;
      do
      {
        if (*(_DWORD *)(result + v3) == 2) {
          ++v4;
        }
        v3 += 4;
      }
      while (v3 != 20);
      return v4 != 0;
    }
    else
    {
      return *(_DWORD *)(result + 4 * a2) == 2;
    }
  }
  return result;
}

BOOL acc_authInfo_isCTAAllowed(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 60) != 0;
  }
  return result;
}

id acc_authInfo_isAppleAccessory(id result)
{
  if (result)
  {
    uint64_t CapsFromAuthCert = platform_auth_createCapsFromAuthCert();
    id v2 = platform_auth_isAppleAccessory(CapsFromAuthCert);
    platform_auth_deallocAuthCertCaps();
    return v2;
  }
  return result;
}

CFStringRef acc_authInfo_copyCertSerialString(uint64_t a1)
{
  if (a1 && (CFStringRef v1 = *(const __CFString **)(a1 + 40)) != 0) {
    return CFStringCreateCopy(kCFAllocatorDefault, v1);
  }
  else {
    return 0;
  }
}

CFDataRef acc_authInfo_copyCertCapabilities(uint64_t a1)
{
  if (a1 && (CFDataRef v1 = *(const __CFData **)(a1 + 48)) != 0) {
    return CFDataCreateCopy(kCFAllocatorDefault, v1);
  }
  else {
    return 0;
  }
}

uint64_t iap2_AvailableDigitalCarKeys(uint64_t a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  uint64_t v5 = Mutable;
  uint64_t v6 = 0;
  if (!a1 || !a2 || !Mutable) {
    goto LABEL_34;
  }
  if (iAP2MsgGetMsgID(a2) != 17154)
  {
    uint64_t v6 = 0;
    goto LABEL_35;
  }
  uint64_t v22 = a1;
  if (gLogObjects && gNumLogObjects >= 52)
  {
    uint64_t v7 = *(NSObject **)(gLogObjects + 408);
  }
  else
  {
    uint64_t v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v25) = 17154;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "iap2_AvailableDigitalCarKeys: Received message 0x%x", buf, 8u);
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  int v23 = -1431655766;
  if (!FirstParam)
  {
LABEL_26:
    if (gLogObjects && gNumLogObjects >= 52)
    {
      uint64_t v18 = *(NSObject **)(gLogObjects + 408);
      uint64_t v19 = v22;
    }
    else
    {
      uint64_t v18 = &_os_log_default;
      uint64_t v19 = v22;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v25 = (uint64_t)v5;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "iap2_AvailableDigitalCarKeys: calling platform_CarPlay_availableDigitalCarKeys with key IDs: %@", buf, 0xCu);
    }
    platform_CarPlay_availableDigitalCarKeys(*(void *)(v19 + 8), (uint64_t)v5);
    uint64_t v6 = 1;
LABEL_34:
    if (!v5) {
      return v6;
    }
    goto LABEL_35;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  while (1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    if (!ParamID) {
      break;
    }
    int v11 = ParamID;
    uint64_t v12 = gLogObjects;
    int v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 52)
    {
      int v14 = *(NSObject **)(gLogObjects + 408);
    }
    else
    {
      int v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v25 = v12;
        __int16 v26 = 1024;
        int v27 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        int v14 = &_os_log_default;
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v25) = v11;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Unrecognized AvailableDigitalCarKeys paramID:0x%04X", buf, 8u);
    }
LABEL_25:
    NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
    if (!NextParam) {
      goto LABEL_26;
    }
  }
  DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)&v23);
  if (!v23)
  {
    CFStringRef v16 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
    if (v16)
    {
      CFStringRef v17 = v16;
      CFArrayAppendValue(v5, v16);
      CFRelease(v17);
    }
    goto LABEL_25;
  }
  int v21 = logObjectForModule_0();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
    iap2_AvailableDigitalCarKeys_cold_2(a2, v21);
  }
  uint64_t v6 = 0;
  if (v5) {
LABEL_35:
  }
    CFRelease(v5);
  return v6;
}

uint64_t iap2_MatchedDigitalCarKeys(uint64_t *a1, const __CFArray *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects && gNumLogObjects >= 52)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 408);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[1];
      int v10 = 138412546;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      CFArrayRef v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "iap2_MatchedDigitalCarKeys: %@, matchedKeys: %@", (uint8_t *)&v10, 0x16u);
    }
    iAP2MsgInit((uint64_t)(a1 + 15), 17155, a1[24], 0xFFFF, 0, 0);
    if (CFArrayGetCount(a2) < 1)
    {
      return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
    }
    else
    {
      CFIndex v7 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v7);
        CFTypeID v9 = CFGetTypeID(ValueAtIndex);
        if (v9 != CFStringGetTypeID()) {
          break;
        }
        iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), 0, 0, ValueAtIndex);
        if (++v7 >= CFArrayGetCount(a2)) {
          return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
        }
      }
      return 0;
    }
  }
  return result;
}

unsigned char *_createFeature_3(unsigned char *result)
{
  if (result)
  {
    uint64_t result = malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
    if (result) {
      *uint64_t result = 1;
    }
  }
  return result;
}

uint64_t _destroyFeature_3(void **a1)
{
  if (a1)
  {
    id v2 = *a1;
    if (v2)
    {
      free(v2);
      *a1 = 0;
    }
  }
  return 0;
}

uint64_t _checkIdentificationInfo_2(uint64_t a1)
{
  char v7 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&kMsgDigitalCarKeyMatchingList, 2u, &v7);
  if (v2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v7 == 0;
  }
  if (!v3)
  {
    if (*(_DWORD *)(*(void *)a1 + 24) == 4)
    {
      iap2_features_createFeature(a1, 0x1Cu);
      iap2_identification_setIdentifiedForFeature(a1, 0x1Cu);
      if (gLogObjects && gNumLogObjects >= 52)
      {
        int v4 = *(NSObject **)(gLogObjects + 408);
      }
      else
      {
        int v4 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
        _checkIdentificationInfo_cold_1_0(v4);
      }
      return 0;
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 52)
      {
        uint64_t v5 = *(NSObject **)(gLogObjects + 408);
      }
      else
      {
        uint64_t v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        _checkIdentificationInfo_cold_3(v5);
      }
      uint64_t v2 = 13;
      iap2_identification_rejectAllMsgIDsForList(a1, (uint64_t)&kMsgDigitalCarKeyMatchingList, 2u, 0xDu);
    }
  }
  return v2;
}

BOOL iAP2MsgSendCtlDataWithSentCallback(uint64_t a1, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t), int a8)
{
  unsigned int SessionForService = iAP2LinkGetSessionForService(*(void *)(a1 + 24), 0);
  BOOL v17 = iAP2LinkRunLoopQueueSendDataWithSentCallback(a1, a2, a3, SessionForService, a4, a5, a6, a7, a8);
  if (!v17 && (_iAP2LogEnableMask & 1) != 0)
  {
    if (gLogObjects) {
      BOOL v18 = gNumLogObjects < 20;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18)
    {
      uint64_t v19 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v19 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      unsigned int v22 = a3;
      __int16 v23 = 1024;
      int v24 = a8;
      __int16 v25 = 1024;
      unsigned int v26 = SessionForService;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "ERROR: Error sending message data !!!!!! dataLen=%u dataSentCBonACK=%d session=%u\n", buf, 0x14u);
    }
  }
  return v17;
}

uint64_t iAP2MsgPreSendCtlProcess()
{
  return 0;
}

void sub_100029914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_100029D40(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_7_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x20u);
}

void OUTLINED_FUNCTION_8_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x2Au);
}

void OUTLINED_FUNCTION_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_11(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x34u);
}

uint64_t OUTLINED_FUNCTION_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17()
{
  return v0;
}

CFStringRef *acc_manager_newConnection(unsigned int a1, const void *a2, const void *a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 15;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    char v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    char v7 = *(NSObject **)(gLogObjects + 112);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v19) = a1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Create new connection, connectionType %{coreacc:ACCConnection_Type_t}d.", buf, 8u);
  }
  uint64_t v8 = acc_connection_create(a1, a2, a3);
  BOOL v17 = v8;
  if (v8)
  {
    _tryWRLock((uint64_t)"_addConnection", 1509);
    if (_initSharedManager_onceToken != -1) {
      dispatch_once(&_initSharedManager_onceToken, &__block_literal_global_4);
    }
    if (_gSharedManager[0])
    {
      if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)_gSharedManager[0], *v8, 0))
      {
        CFDictionaryAddValue((CFMutableDictionaryRef)_gSharedManager[0], *v8, v8);
        CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)_gSharedManager[0]);
        if (Count == 1 && systemInfo_getCurrentUnixTime() - qword_100238178 >= 0x3C)
        {
          if (gLogObjects && gNumLogObjects >= 13)
          {
            uint64_t v10 = *(NSObject **)(gLogObjects + 96);
          }
          else
          {
            uint64_t v10 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v19) = 60;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Exceeded %d seconds since last accessory connection!", buf, 8u);
          }
          if (qword_100238170)
          {
            CFRelease((CFTypeRef)qword_100238170);
            qword_100238170 = 0;
          }
          qword_100238170 = (uint64_t)CFCreateUUIDString();
          if (gLogObjects && gNumLogObjects >= 13)
          {
            uint64_t v11 = *(NSObject **)(gLogObjects + 96);
          }
          else
          {
            uint64_t v11 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v19 = qword_100238170;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Reset device UUID: %@", buf, 0xCu);
          }
        }
        pthread_rwlock_unlock(&_gAccManagerLock);
        if (platform_sleepAssertion_connectionTypeRequiresAssertion(*((_DWORD *)v8 + 2))) {
          platform_sleepAssertion_create((uint64_t)*v8);
        }
        pthread_rwlock_rdlock(&_gAccManagerLock);
        if (platform_transactions_connectionTypeRequiresTransaction(*((_DWORD *)v8 + 2))) {
          platform_transactions_accessoryConnected((void *)*v8);
        }
        if (gLogObjects && gNumLogObjects >= 13)
        {
          __int16 v12 = *(NSObject **)(gLogObjects + 96);
        }
        else
        {
          __int16 v12 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v13 = *v8;
          *(_DWORD *)buf = 138412290;
          uint64_t v19 = (uint64_t)v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Added accessory connection: %@", buf, 0xCu);
        }
        if (gLogObjects && gNumLogObjects >= 13)
        {
          int v14 = *(NSObject **)(gLogObjects + 96);
        }
        else
        {
          int v14 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          uint64_t v19 = Count;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "There are now %ld accessory connection(s).", buf, 0xCu);
        }
        pthread_rwlock_unlock(&_gAccManagerLock);
        return v8;
      }
    }
    else
    {
      CFStringRef v16 = logObjectForModule_1(12);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "accessoryConnections = null!", buf, 2u);
      }
    }
    pthread_rwlock_unlock(&_gAccManagerLock);
    acc_connection_destroy((uint64_t)&v17);
    return v17;
  }
  return v8;
}

void *acc_manager_newEndpointForConnection(CFIndex *a1, unsigned int a2, unsigned int a3, const void *a4)
{
  if (!a1 || a3 == 16 && !platform_systemInfo_supportsQiAuth()) {
    return 0;
  }
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 15;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    uint64_t v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(gLogObjects + 112);
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    CFIndex v10 = *a1;
    *(_DWORD *)buf = 138412802;
    CFIndex v23 = v10;
    __int16 v24 = 1024;
    unsigned int v25 = a2;
    __int16 v26 = 1024;
    int v27 = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Create new endpoint for connection %@, transport %{coreacc:ACCEndpoint_TransportType_t}d, protocol %{coreacc:ACCEndpoint_Protocol_t}d.", buf, 0x18u);
  }
  uint64_t v11 = acc_endpoint_create((uint64_t)a1, a2, a3, a4);
  int v21 = v11;
  if (v11)
  {
    _tryWRLock((uint64_t)"_addEndpoint", 1565);
    if (_initSharedManager_onceToken != -1) {
      dispatch_once(&_initSharedManager_onceToken, &__block_literal_global_4);
    }
    if (qword_100238168)
    {
      if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_100238168, *((const void **)v11 + 2), 0))
      {
        CFDictionaryAddValue((CFMutableDictionaryRef)qword_100238168, *((const void **)v11 + 2), v11);
        pthread_rwlock_unlock(&_gAccManagerLock);
        if (platform_sleepAssertion_endpointProtocolAllowsAssertion(*((_DWORD *)v11 + 7))
          && platform_sleepAssertion_connectionTypeAllowsAssertion(*(_DWORD *)(*(void *)v11 + 8)))
        {
          platform_sleepAssertion_create(*((void *)v11 + 1));
        }
        pthread_rwlock_rdlock(&_gAccManagerLock);
        if (gLogObjects && gNumLogObjects >= 13)
        {
          __int16 v12 = *(NSObject **)(gLogObjects + 96);
        }
        else
        {
          __int16 v12 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          CFIndex v13 = *((void *)v11 + 2);
          *(_DWORD *)buf = 138412290;
          CFIndex v23 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Added connection endpoint: %@", buf, 0xCu);
        }
        if (gLogObjects && gNumLogObjects >= 13)
        {
          int v14 = *(NSObject **)(gLogObjects + 96);
        }
        else
        {
          int v14 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_100238168);
          *(_DWORD *)buf = 134217984;
          CFIndex v23 = Count;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "There are now %ld endpoint(s).", buf, 0xCu);
        }
        pthread_rwlock_unlock(&_gAccManagerLock);
        if (a3 == 1 && acc_connection_isPublished((BOOL)a1))
        {
          if (gLogObjects && gNumLogObjects >= 15)
          {
            CFStringRef v16 = *(NSObject **)(gLogObjects + 112);
          }
          else
          {
            CFStringRef v16 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            CFIndex v17 = *a1;
            unsigned int v18 = *((_DWORD *)v11 + 7);
            *(_DWORD *)buf = 138412802;
            CFIndex v23 = v17;
            __int16 v24 = 1024;
            unsigned int v25 = v18;
            __int16 v26 = 1024;
            int v27 = 1;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Connection %@ already published, publish endpoint of protocol %{coreacc:ACCEndpoint_Protocol_t}d /  %{coreacc:ACCEndpoint_Protocol_t}d.", buf, 0x18u);
          }
          acc_endpoint_publish((uint64_t)v11);
        }
        return v11;
      }
    }
    else
    {
      CFDataRef v20 = logObjectForModule_1(12);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "connectionEndpoints = null!", buf, 2u);
      }
    }
    pthread_rwlock_unlock(&_gAccManagerLock);
    acc_endpoint_destroy(&v21);
    return v21;
  }
  return v11;
}

void *acc_manager_newEndpointForConnectionWithUUID(const void *a1, unsigned int a2, unsigned int a3, const void *a4)
{
  ConnectionWithUUID = (CFIndex *)acc_manager_getConnectionWithUUID(a1);

  return acc_manager_newEndpointForConnection(ConnectionWithUUID, a2, a3, a4);
}

const void *acc_manager_getConnectionWithUUID(const void *Value)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 13;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    BOOL v3 = *(NSObject **)(gLogObjects + 96);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    acc_manager_getConnectionWithUUID_cold_1();
  }
  pthread_rwlock_rdlock(&_gAccManagerLock);
  if (Value)
  {
    if (_gSharedManager) {
      CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)_gSharedManager, Value);
    }
    else {
      CFNumberRef Value = 0;
    }
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  return Value;
}

uint64_t acc_manager_publishConnectionWithUUID(const void *a1)
{
  ConnectionWithUUID = acc_manager_getConnectionWithUUID(a1);

  return acc_connection_publish((uint64_t)ConnectionWithUUID);
}

void _tryWRLock(uint64_t a1, int a2)
{
  int v4 = pthread_rwlock_trywrlock(&_gAccManagerLock);
  if (v4 == 16)
  {
    int v5 = 0;
    do
    {
      ++v5;
      usleep(0x1388u);
      int v6 = pthread_rwlock_trywrlock(&_gAccManagerLock);
    }
    while (v6 == 16);
    int v7 = v6;
  }
  else
  {
    int v7 = v4;
    int v5 = 0;
  }
  if (v5 | v7)
  {
    if (gLogObjects) {
      BOOL v8 = gNumLogObjects <= 12;
    }
    else {
      BOOL v8 = 1;
    }
    int v9 = !v8;
    if (v7)
    {
      if (v9)
      {
        CFIndex v10 = *(NSObject **)(gLogObjects + 96);
      }
      else
      {
        CFIndex v10 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        int v12 = 136316162;
        CFIndex v13 = "_tryWRLock";
        __int16 v14 = 2080;
        uint64_t v15 = a1;
        __int16 v16 = 1024;
        int v17 = a2;
        __int16 v18 = 1024;
        int v19 = v5;
        __int16 v20 = 1024;
        int v21 = v7;
        _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%s: %s:%d tryCount %d, err %d ", (uint8_t *)&v12, 0x28u);
      }
    }
    else
    {
      if (v9)
      {
        uint64_t v11 = *(NSObject **)(gLogObjects + 96);
      }
      else
      {
        uint64_t v11 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v12 = 136316162;
        CFIndex v13 = "_tryWRLock";
        __int16 v14 = 2080;
        uint64_t v15 = a1;
        __int16 v16 = 1024;
        int v17 = a2;
        __int16 v18 = 1024;
        int v19 = v5;
        __int16 v20 = 1024;
        int v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s: %s:%d tryCount %d, err %d ", (uint8_t *)&v12, 0x28u);
      }
    }
  }
}

CFSetRef acc_manager_removeConnectionWithUUID(void *a1)
{
  _tryWRLock((uint64_t)"acc_manager_removeConnectionWithUUID", 275);
  if (!a1) {
    goto LABEL_48;
  }
  if (!_gSharedManager[0])
  {
    __int16 v14 = logObjectForModule_1(12);
    CFSetRef Value = 0;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_42;
    }
    *(_WORD *)buf = 0;
    uint64_t v15 = "accessoryConnections = null!";
    __int16 v16 = v14;
    uint32_t v17 = 2;
    goto LABEL_47;
  }
  CFSetRef Value = (const __CFSet *)CFDictionaryGetValue((CFDictionaryRef)_gSharedManager[0], a1);
  CFSetRef v19 = Value;
  if (!Value)
  {
    __int16 v18 = logObjectForModule_1(12);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 138412290;
    CFIndex v21 = (CFIndex)a1;
    uint64_t v15 = "No connection for %@!";
    __int16 v16 = v18;
    uint32_t v17 = 12;
LABEL_47:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
LABEL_48:
    CFSetRef Value = 0;
    goto LABEL_42;
  }
  if (gLogObjects && gNumLogObjects >= 13)
  {
    BOOL v3 = *(NSObject **)(gLogObjects + 96);
  }
  else
  {
    BOOL v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFIndex v4 = *(void *)Value;
    *(_DWORD *)buf = 138412290;
    CFIndex v21 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing accessory connection: %@...", buf, 0xCu);
  }
  CFDictionaryRemoveValue((CFMutableDictionaryRef)_gSharedManager[0], a1);
  if (qword_100238168)
  {
    CFSetRef v5 = acc_connection_copyEndpointUUIDs(Value);
    if (v5)
    {
      CFSetRef v6 = v5;
      if (gLogObjects && gNumLogObjects >= 13)
      {
        int v7 = *(NSObject **)(gLogObjects + 96);
      }
      else
      {
        int v7 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        CFIndex Count = CFSetGetCount(v6);
        *(_DWORD *)buf = 134218242;
        CFIndex v21 = Count;
        __int16 v22 = 2112;
        CFIndex v23 = a1;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Removing %ld endpoint(s) for connection %@...", buf, 0x16u);
      }
      CFSetApplyFunction(v6, (CFSetApplierFunction)CFSetApplierFunction_removeValueFromMutableDictionary, (void *)qword_100238168);
      CFRelease(v6);
    }
  }
  int v9 = *((_DWORD *)Value + 2);
  pthread_rwlock_unlock(&_gAccManagerLock);
  if ((platform_sleepAssertion_connectionTypeRequiresAssertion(v9) & 1) != 0
    || platform_sleepAssertion_connectionTypeAllowsAssertion(v9))
  {
    platform_sleepAssertion_destroy((uint64_t)a1);
  }
  CFSetRef Value = (const __CFSet *)acc_connection_destroy((uint64_t)&v19);
  _tryWRLock((uint64_t)"acc_manager_removeConnectionWithUUID", 320);
  CFIndex v10 = CFDictionaryGetCount((CFDictionaryRef)_gSharedManager[0]);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    uint64_t v11 = *(NSObject **)(gLogObjects + 96);
  }
  else
  {
    uint64_t v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    CFIndex v21 = (CFIndex)a1;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Removed accessory connection: %@!", buf, 0xCu);
  }
  if (gLogObjects && gNumLogObjects >= 13)
  {
    int v12 = *(NSObject **)(gLogObjects + 96);
  }
  else
  {
    int v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    CFIndex v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "There are now %ld accessory connection(s).", buf, 0xCu);
  }
  if (v10 <= 0) {
    qword_100238178 = systemInfo_getCurrentUnixTime();
  }
  if (platform_transactions_connectionTypeRequiresTransaction(v9)) {
    platform_transactions_accessoryDisconnected(a1);
  }
LABEL_42:
  pthread_rwlock_unlock(&_gAccManagerLock);
  return Value;
}

const void **acc_manager_removeEndpointWithUUID(const void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 13;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    BOOL v3 = *(NSObject **)(gLogObjects + 96);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    CFIndex v15 = (CFIndex)a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing connection endpoint: %@...", buf, 0xCu);
  }
  _tryWRLock((uint64_t)"acc_manager_removeEndpointWithUUID", 410);
  if (!a1) {
    goto LABEL_28;
  }
  if (!qword_100238168)
  {
    BOOL v8 = logObjectForModule_1(12);
    CFSetRef Value = 0;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    *(_WORD *)buf = 0;
    int v9 = "connectionEndpoints = null!";
    CFIndex v10 = v8;
    uint32_t v11 = 2;
    goto LABEL_27;
  }
  CFSetRef Value = (const void **)CFDictionaryGetValue((CFDictionaryRef)qword_100238168, a1);
  CFIndex v13 = Value;
  if (!Value)
  {
    int v12 = logObjectForModule_1(12);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    *(_DWORD *)buf = 138412290;
    CFIndex v15 = (CFIndex)a1;
    int v9 = "No endpoint for %@!";
    CFIndex v10 = v12;
    uint32_t v11 = 12;
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
LABEL_28:
    CFSetRef Value = 0;
    goto LABEL_22;
  }
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_100238168, Value[2], 0)) {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_100238168, Value[2]);
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  CFSetRef Value = (const void **)acc_endpoint_destroy((void **)&v13);
  pthread_rwlock_rdlock(&_gAccManagerLock);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    CFSetRef v5 = *(NSObject **)(gLogObjects + 96);
  }
  else
  {
    CFSetRef v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_100238168);
    *(_DWORD *)buf = 134217984;
    CFIndex v15 = Count;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "There are now %ld endpoint(s).", buf, 0xCu);
  }
LABEL_22:
  pthread_rwlock_unlock(&_gAccManagerLock);
  return Value;
}

CFDictionaryRef acc_manager_copyAllEndpoints()
{
  pthread_rwlock_rdlock(&_gAccManagerLock);
  if (_initSharedManager_onceToken != -1) {
    dispatch_once(&_initSharedManager_onceToken, &__block_literal_global_4);
  }
  if (qword_100238168) {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, (CFDictionaryRef)qword_100238168);
  }
  else {
    CFDictionaryRef Copy = 0;
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  return Copy;
}

CFDictionaryRef acc_manager_copyAllConnections()
{
  pthread_rwlock_rdlock(&_gAccManagerLock);
  if (_initSharedManager_onceToken != -1) {
    dispatch_once(&_initSharedManager_onceToken, &__block_literal_global_4);
  }
  if (_gSharedManager) {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, (CFDictionaryRef)_gSharedManager);
  }
  else {
    CFDictionaryRef Copy = 0;
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  return Copy;
}

BOOL acc_manager_iterateAllConnections(unsigned int (*a1)(void, uint64_t), uint64_t a2, int a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 13;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    int v7 = *(NSObject **)(gLogObjects + 96);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    int v31 = "acc_manager_iterateAllConnections";
    __int16 v32 = 1024;
    int v33 = 522;
    __int16 v34 = 1024;
    *(_DWORD *)uint64_t v35 = a1 != 0;
    *(_WORD *)&v35[4] = 1024;
    *(_DWORD *)&v35[6] = a2 != 0;
    LOWORD(v36) = 1024;
    *(_DWORD *)((char *)&v36 + 2) = a3;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s:%d iteratorCB %d, context %d, forWrite %d ", buf, 0x24u);
    if (a3) {
      goto LABEL_10;
    }
  }
  else if (a3)
  {
LABEL_10:
    _tryWRLock((uint64_t)"acc_manager_iterateAllConnections", 526);
    goto LABEL_13;
  }
  pthread_rwlock_rdlock(&_gAccManagerLock);
LABEL_13:
  if (!a1) {
    goto LABEL_34;
  }
  if (!_gSharedManager[0])
  {
    __int16 v22 = logObjectForModule_1(12);
    BOOL v21 = 0;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "accessoryConnections = null!", buf, 2u);
LABEL_34:
    BOOL v21 = 0;
    goto LABEL_35;
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)_gSharedManager[0]);
  if (!Count) {
    goto LABEL_34;
  }
  uint64_t v9 = Count;
  uint64_t v28 = &v25;
  __chkstk_darwin(Count);
  uint32_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v11, 170, v10);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)_gSharedManager[0], 0, (const void **)v11);
  BOOL v29 = v9 > 0;
  if (v9 >= 1)
  {
    uint64_t v13 = 0;
    BOOL v27 = a2 != 0;
    *(void *)&long long v12 = 134218240;
    long long v25 = v12;
    *(void *)&long long v12 = 136316418;
    long long v26 = v12;
    do
    {
      uint64_t v14 = gLogObjects;
      int v15 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v16 = gNumLogObjects < 13;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16)
      {
        uint32_t v17 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v25;
          int v31 = (const char *)v14;
          __int16 v32 = 1024;
          int v33 = v15;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          uint32_t v17 = &_os_log_default;
        }
      }
      else
      {
        uint32_t v17 = *(NSObject **)(gLogObjects + 96);
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = **(void **)&v11[8 * v13];
        *(_DWORD *)buf = v26;
        int v31 = "acc_manager_iterateAllConnections";
        __int16 v32 = 1024;
        int v33 = 547;
        __int16 v34 = 2048;
        *(void *)uint64_t v35 = v13;
        *(_WORD *)&v35[8] = 2048;
        uint64_t v36 = v9;
        __int16 v37 = 2112;
        uint64_t v38 = v20;
        __int16 v39 = 1024;
        BOOL v40 = v27;
        _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s:%d [%ld / %ld], call iteratorCB, %@, context %d ", buf, 0x36u);
      }
      if (a1(*(void *)&v11[8 * v13++], a2)) {
        BOOL v19 = v13 < v9;
      }
      else {
        BOOL v19 = 0;
      }
    }
    while (v19);
  }
  BOOL v21 = v29;
LABEL_35:
  pthread_rwlock_unlock(&_gAccManagerLock);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    CFIndex v23 = *(NSObject **)(gLogObjects + 96);
  }
  else
  {
    CFIndex v23 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
    acc_manager_iterateAllConnections_cold_1(v21, v23);
  }
  return v21;
}

BOOL acc_manager_iterateAllEndpoints(unsigned int (*a1)(void, uint64_t), uint64_t a2, int a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 13;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    int v7 = *(NSObject **)(gLogObjects + 96);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    int v31 = "acc_manager_iterateAllEndpoints";
    __int16 v32 = 1024;
    int v33 = 567;
    __int16 v34 = 1024;
    *(_DWORD *)uint64_t v35 = a1 != 0;
    *(_WORD *)&v35[4] = 1024;
    *(_DWORD *)&v35[6] = a2 != 0;
    LOWORD(v36) = 1024;
    *(_DWORD *)((char *)&v36 + 2) = a3;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s:%d iteratorCB %d, context %d, forWrite %d ", buf, 0x24u);
    if (a3) {
      goto LABEL_10;
    }
  }
  else if (a3)
  {
LABEL_10:
    _tryWRLock((uint64_t)"acc_manager_iterateAllEndpoints", 571);
    goto LABEL_13;
  }
  pthread_rwlock_rdlock(&_gAccManagerLock);
LABEL_13:
  if (!a1) {
    goto LABEL_34;
  }
  if (!qword_100238168)
  {
    __int16 v22 = logObjectForModule_1(12);
    BOOL v21 = 0;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "connectionEndpoints = null!", buf, 2u);
LABEL_34:
    BOOL v21 = 0;
    goto LABEL_35;
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_100238168);
  if (!Count) {
    goto LABEL_34;
  }
  uint64_t v9 = Count;
  uint64_t v28 = &v25;
  __chkstk_darwin();
  uint32_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v11, 170, v10);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_100238168, 0, (const void **)v11);
  BOOL v29 = v9 > 0;
  if (v9 >= 1)
  {
    uint64_t v13 = 0;
    BOOL v27 = a2 != 0;
    *(void *)&long long v12 = 134218240;
    long long v25 = v12;
    *(void *)&long long v12 = 136316418;
    long long v26 = v12;
    do
    {
      uint64_t v14 = gLogObjects;
      int v15 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v16 = gNumLogObjects < 13;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16)
      {
        uint32_t v17 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v25;
          int v31 = (const char *)v14;
          __int16 v32 = 1024;
          int v33 = v15;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          uint32_t v17 = &_os_log_default;
        }
      }
      else
      {
        uint32_t v17 = *(NSObject **)(gLogObjects + 96);
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = *(void *)(*(void *)&v11[8 * v13] + 16);
        *(_DWORD *)buf = v26;
        int v31 = "acc_manager_iterateAllEndpoints";
        __int16 v32 = 1024;
        int v33 = 592;
        __int16 v34 = 2048;
        *(void *)uint64_t v35 = v13;
        *(_WORD *)&v35[8] = 2048;
        uint64_t v36 = v9;
        __int16 v37 = 2112;
        uint64_t v38 = v20;
        __int16 v39 = 1024;
        BOOL v40 = v27;
        _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s:%d [%ld / %ld], call iteratorCB, %@, context %d ", buf, 0x36u);
      }
      if (a1(*(void *)&v11[8 * v13++], a2)) {
        BOOL v19 = v13 < v9;
      }
      else {
        BOOL v19 = 0;
      }
    }
    while (v19);
  }
  BOOL v21 = v29;
LABEL_35:
  pthread_rwlock_unlock(&_gAccManagerLock);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    CFIndex v23 = *(NSObject **)(gLogObjects + 96);
  }
  else
  {
    CFIndex v23 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
    acc_manager_iterateAllEndpoints_cold_1(v21, v23);
  }
  return v21;
}

uint64_t acc_manager_callbackForConnection(const void *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, int a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 13;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    uint64_t v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(gLogObjects + 96);
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 136316418;
    BOOL v16 = "acc_manager_callbackForConnection";
    __int16 v17 = 1024;
    int v18 = 679;
    __int16 v19 = 2112;
    uint64_t v20 = a1;
    __int16 v21 = 1024;
    BOOL v22 = a2 != 0;
    __int16 v23 = 1024;
    BOOL v24 = a3 != 0;
    __int16 v25 = 1024;
    int v26 = a4;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s:%d connection %@, iteratorCB %d, context %d, forWrite %d ", (uint8_t *)&v15, 0x2Eu);
    if (a4) {
      goto LABEL_10;
    }
LABEL_12:
    pthread_rwlock_rdlock(&_gAccManagerLock);
    goto LABEL_13;
  }
  if (!a4) {
    goto LABEL_12;
  }
LABEL_10:
  _tryWRLock((uint64_t)"acc_manager_callbackForConnection", 683);
LABEL_13:
  uint64_t Value = 0;
  if (a1 && a2)
  {
    if (_gSharedManager[0])
    {
      uint64_t Value = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)_gSharedManager[0], a1);
      if (Value)
      {
        if (gLogObjects && gNumLogObjects >= 13)
        {
          uint32_t v11 = *(NSObject **)(gLogObjects + 96);
        }
        else
        {
          uint32_t v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
          acc_manager_callbackForConnection_cold_3();
        }
        a2(Value, a3);
        uint64_t Value = 1;
      }
    }
    else
    {
      uint64_t v14 = logObjectForModule_1(12);
      uint64_t Value = 0;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "accessoryConnections = null!", (uint8_t *)&v15, 2u);
        uint64_t Value = 0;
      }
    }
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    long long v12 = *(NSObject **)(gLogObjects + 96);
  }
  else
  {
    long long v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    acc_manager_callbackForConnection_cold_1();
  }
  return Value;
}

uint64_t acc_manager_callbackForEndpoint(const void *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, int a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 13;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    uint64_t v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(gLogObjects + 96);
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 136316418;
    BOOL v16 = "acc_manager_callbackForEndpoint";
    __int16 v17 = 1024;
    int v18 = 723;
    __int16 v19 = 2112;
    uint64_t v20 = a1;
    __int16 v21 = 1024;
    BOOL v22 = a2 != 0;
    __int16 v23 = 1024;
    BOOL v24 = a3 != 0;
    __int16 v25 = 1024;
    int v26 = a4;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s:%d endpoint %@, iteratorCB %d, context %d, forWrite %d ", (uint8_t *)&v15, 0x2Eu);
    if (a4) {
      goto LABEL_10;
    }
LABEL_12:
    pthread_rwlock_rdlock(&_gAccManagerLock);
    goto LABEL_13;
  }
  if (!a4) {
    goto LABEL_12;
  }
LABEL_10:
  _tryWRLock((uint64_t)"acc_manager_callbackForEndpoint", 727);
LABEL_13:
  uint64_t Value = 0;
  if (a1 && a2)
  {
    if (qword_100238168)
    {
      uint64_t Value = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)qword_100238168, a1);
      if (Value)
      {
        if (gLogObjects && gNumLogObjects >= 13)
        {
          uint32_t v11 = *(NSObject **)(gLogObjects + 96);
        }
        else
        {
          uint32_t v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
          acc_manager_callbackForEndpoint_cold_3();
        }
        a2(Value, a3);
        uint64_t Value = 1;
      }
    }
    else
    {
      uint64_t v14 = logObjectForModule_1(12);
      uint64_t Value = 0;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "connectionEndpoints = null!", (uint8_t *)&v15, 2u);
        uint64_t Value = 0;
      }
    }
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    long long v12 = *(NSObject **)(gLogObjects + 96);
  }
  else
  {
    long long v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    acc_manager_callbackForEndpoint_cold_1();
  }
  return Value;
}

CFSetRef acc_manager_copyEndpointUUIDsForConnection(const void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 13;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    BOOL v3 = *(NSObject **)(gLogObjects + 96);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    acc_manager_copyEndpointUUIDsForConnection_cold_3();
  }
  pthread_rwlock_rdlock(&_gAccManagerLock);
  CFSetRef ConnectionWithUUID = (const __CFSet *)acc_manager_getConnectionWithUUID(a1);
  if (ConnectionWithUUID && *((void *)ConnectionWithUUID + 5)) {
    CFSetRef v5 = acc_connection_copyEndpointUUIDs(ConnectionWithUUID);
  }
  else {
    CFSetRef v5 = 0;
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    BOOL v6 = *(NSObject **)(gLogObjects + 96);
  }
  else
  {
    BOOL v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    acc_manager_copyEndpointUUIDsForConnection_cold_1();
  }
  return v5;
}

const void *acc_manager_getEndpointWithUUID(const void *Value)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 13;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    BOOL v3 = *(NSObject **)(gLogObjects + 96);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    acc_manager_getEndpointWithUUID_cold_1();
  }
  pthread_rwlock_rdlock(&_gAccManagerLock);
  if (Value)
  {
    if (qword_100238168) {
      uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)qword_100238168, Value);
    }
    else {
      uint64_t Value = 0;
    }
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  return Value;
}

BOOL acc_manager_processIncomingDataForEndpointWithUUID(const void *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  v3[1] = 0;
  uint64_t v4 = 0;
  v3[0] = a2;
  acc_manager_callbackForEndpoint(a1, (void (*)(uint64_t, uint64_t))_acc_manager_processIncomingDataForEndpointWithUUID, (uint64_t)v3, 0);
  return v4 != 0;
}

uint64_t _acc_manager_processIncomingDataForEndpointWithUUID(uint64_t a1, uint64_t a2)
{
  CFDataRef v3 = *(const __CFData **)a2;
  if (v3) {
    *(void *)(a2 + 16) = acc_endpoint_processIncomingData(a1, v3);
  }
  return 0;
}

uint64_t acc_manager_enableLockoutForTransportType(unsigned int a1, unsigned int a2)
{
  BOOL v4 = a1 >= 0x10 || a2 == 0;
  uint64_t v5 = !v4;
  if (v4)
  {
    if (gLogObjects) {
      BOOL v10 = gNumLogObjects < 13;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      uint32_t v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint32_t v11 = *(NSObject **)(gLogObjects + 96);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      acc_manager_enableLockoutForTransportType_cold_3(a1, a2, v11);
    }
  }
  else
  {
    int isLockoutActiveForTransportType = acc_manager_isLockoutActiveForTransportType(a1, 0);
    _tryWRLock((uint64_t)"acc_manager_enableLockoutForTransportType", 878);
    _gSharedManager[a1 + 4] = systemInfo_getCurrentUnixTime() + a2;
    pthread_rwlock_unlock(&_gAccManagerLock);
    if (gLogObjects) {
      BOOL v7 = gNumLogObjects <= 12;
    }
    else {
      BOOL v7 = 1;
    }
    int v8 = !v7;
    if (isLockoutActiveForTransportType)
    {
      if (v8)
      {
        uint64_t v9 = *(NSObject **)(gLogObjects + 96);
      }
      else
      {
        uint64_t v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 67109376;
        unsigned int v15 = a1;
        __int16 v16 = 1024;
        unsigned int v17 = a2;
        long long v12 = "Lockout for transport type: %{coreacc:ACCEndpoint_TransportType_t}d was extended to %d seconds!";
LABEL_36:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v14, 0xEu);
      }
    }
    else
    {
      if (v8)
      {
        uint64_t v9 = *(NSObject **)(gLogObjects + 96);
      }
      else
      {
        uint64_t v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 67109376;
        unsigned int v15 = a1;
        __int16 v16 = 1024;
        unsigned int v17 = a2;
        long long v12 = "Enabled lockout for transport type: %{coreacc:ACCEndpoint_TransportType_t}d for %d seconds!";
        goto LABEL_36;
      }
    }
  }
  return v5;
}

uint64_t acc_manager_isLockoutActiveForTransportType(unsigned int a1, _DWORD *a2)
{
  pthread_rwlock_rdlock(&_gAccManagerLock);
  if (a1 > 0xF)
  {
    if (gLogObjects) {
      BOOL v8 = gNumLogObjects < 13;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      uint64_t v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v9 = *(NSObject **)(gLogObjects + 96);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      acc_manager_isLockoutActiveForTransportType_cold_1(a1, v9);
    }
  }
  else
  {
    unint64_t v4 = _gSharedManager[a1 + 4];
    if (v4 && v4 > systemInfo_getCurrentUnixTime())
    {
      int v5 = _gSharedManager[a1 + 4];
      int v6 = v5 - systemInfo_getCurrentUnixTime();
      uint64_t v7 = 1;
      if (!a2) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  uint64_t v7 = 0;
  int v6 = 0;
  if (a2) {
LABEL_16:
  }
    *a2 = v6;
LABEL_17:
  pthread_rwlock_unlock(&_gAccManagerLock);
  return v7;
}

BOOL acc_manager_disableLockoutForTransportType(unsigned int a1)
{
  _tryWRLock((uint64_t)"acc_manager_disableLockoutForTransportType", 903);
  if (a1 > 0xF)
  {
    if (gLogObjects) {
      BOOL v3 = gNumLogObjects < 13;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3)
    {
      int v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      int v5 = *(NSObject **)(gLogObjects + 96);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      acc_manager_isLockoutActiveForTransportType_cold_1(a1, v5);
    }
  }
  else
  {
    _gSharedManager[a1 + 4] = 0;
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 13;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      unint64_t v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      unint64_t v4 = *(NSObject **)(gLogObjects + 96);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 67109120;
      v7[1] = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Disabled lockout for transport type: %{coreacc:ACCEndpoint_TransportType_t}d!", (uint8_t *)v7, 8u);
    }
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  return a1 < 0x10;
}

uint64_t acc_manager_disableLockoutForAllTransportTypes()
{
  _tryWRLock((uint64_t)"acc_manager_disableLockoutForAllTransportTypes", 924);
  xmmword_1002381E0 = 0u;
  unk_1002381F0 = 0u;
  xmmword_1002381C0 = 0u;
  unk_1002381D0 = 0u;
  xmmword_1002381A0 = 0u;
  unk_1002381B0 = 0u;
  xmmword_100238180 = 0u;
  *(_OWORD *)algn_100238190 = 0u;
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 13;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    CFDataRef v1 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    CFDataRef v1 = *(NSObject **)(gLogObjects + 96);
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Disabled lockout for all transport types!", v3, 2u);
  }
  return pthread_rwlock_unlock(&_gAccManagerLock);
}

CFTypeRef acc_manager_copyDeviceUUID()
{
  pthread_rwlock_rdlock(&_gAccManagerLock);
  if (_initSharedManager_onceToken != -1) {
    dispatch_once(&_initSharedManager_onceToken, &__block_literal_global_4);
  }
  if (qword_100238170) {
    CFTypeRef v0 = CFRetain((CFTypeRef)qword_100238170);
  }
  else {
    CFTypeRef v0 = 0;
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  return v0;
}

void *acc_manager_copyConnectionUUIDForEndpointUUID(const void *a1)
{
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  pthread_rwlock_rdlock(&_gAccManagerLock);
  if (EndpointWithUUID)
  {
    if (*EndpointWithUUID && (BOOL v2 = (const void *)EndpointWithUUID[1]) != 0) {
      EndpointWithUUID = CFRetain(v2);
    }
    else {
      EndpointWithUUID = 0;
    }
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  return EndpointWithUUID;
}

void acc_manager_checkForWirelessCTA()
{
  CFArrayRef context = 0;
  if ((acc_userDefaults_BOOLForKey(@"DisableWirelessCTA") & 1) == 0)
  {
    CFTypeRef v0 = &unk_100239000;
    if (gLogObjects) {
      BOOL v1 = gNumLogObjects < 14;
    }
    else {
      BOOL v1 = 1;
    }
    if (v1)
    {
      BOOL v2 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v2 = *(NSObject **)(gLogObjects + 104);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Check for WirelessCTA", buf, 2u);
    }
    CFDictionaryRef theDict = acc_manager_copyAllConnections();
    if (theDict && CFDictionaryGetCount(theDict) >= 1)
    {
      long long v48 = 0;
      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findWirelessCTADonorCapableConnection, &context);
      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findWirelessCTAReceiverCapableConnection, &v48);
      if (gLogObjects && gNumLogObjects >= 14)
      {
        BOOL v3 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        BOOL v3 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        CFArrayRef Count = context;
        if (context) {
          CFArrayRef Count = (const __CFArray *)CFArrayGetCount(context);
        }
        *(_DWORD *)buf = 134218240;
        CFAllocatorRef v51 = (const char *)Count;
        __int16 v52 = 1024;
        *(_DWORD *)uint64_t v53 = v48 != 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Check for WirelessCTA: attempt to find... donor %ld, receiver %d", buf, 0x12u);
      }
      if (gLogObjects && gNumLogObjects >= 14)
      {
        int v5 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        int v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        CFAllocatorRef v51 = (const char *)context;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Check for WirelessCTA: donorConnectionsFound %@", buf, 0xCu);
      }
      if (context)
      {
        CFIndex v6 = CFArrayGetCount(context);
        uint64_t v7 = (uint64_t)v48;
        if (v6 && v48)
        {
          CFIndex v8 = 0;
          while (1)
          {
            if (v8 >= CFArrayGetCount(context)) {
              goto LABEL_98;
            }
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(context, v8);
            uint64_t Value = (const char *)CFDictionaryGetValue(ValueAtIndex, kCFWirelessCTAConnectionUUID);
            uint32_t v11 = CFDictionaryGetValue(ValueAtIndex, kCFWirelessCTAOOBPairingData);
            long long v12 = CFDictionaryGetValue(ValueAtIndex, kCFWirelessCTAIdentifier);
            uint64_t v47 = 0;
            CFDictionaryApplyFunction((CFDictionaryRef)v48[5], (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findOOBPairingEndpoint, &v47);
            int v44 = v11;
            uint64_t v45 = Value;
            if (v47)
            {
              uint64_t v13 = *(void *)(v47 + 56);
              CFDataRef v14 = oobPairing_endpoint_copyCachedOOBPairingInfo(v13);
              CFDataRef v15 = oobPairing_endpoint_copyCachedOOBPairingData(v13);
              if (v14)
              {
                BytePtr = CFDataGetBytePtr(v14);
                CFIndex Length = CFDataGetLength(v14);
                if (BytePtr) {
                  BOOL v18 = Length == 6;
                }
                else {
                  BOOL v18 = 0;
                }
                if (v18) {
                  CFStringRef v19 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%02x:%02x:%02x:%02x:%02x:%02x", *BytePtr, BytePtr[1], BytePtr[2], BytePtr[3], BytePtr[4], BytePtr[5]);
                }
                else {
                  CFStringRef v19 = 0;
                }
                CFRelease(v14);
              }
              else
              {
                CFStringRef v19 = 0;
              }
              int v23 = 0;
              BOOL v46 = v15 != 0;
              if (v11 && v15) {
                int v23 = CFEqual(v11, v15);
              }
              int v22 = 0;
              BOOL v21 = v23 != 0;
              BOOL v20 = v19 != 0;
              if (v12 && v19)
              {
                int v22 = CFEqual(v12, v19);
                BOOL v20 = 1;
              }
            }
            else
            {
              BOOL v20 = 0;
              BOOL v21 = 0;
              CFDataRef v15 = 0;
              CFStringRef v19 = 0;
              BOOL v46 = 0;
              int v22 = 0;
            }
            uint64_t v43 = v12;
            BOOL v24 = v0;
            uint64_t v25 = v0[49];
            int v26 = gNumLogObjects;
            if (v25 && gNumLogObjects >= 14)
            {
              BOOL v27 = *(NSObject **)(v25 + 104);
            }
            else
            {
              BOOL v27 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                CFAllocatorRef v51 = (const char *)v25;
                __int16 v52 = 1024;
                *(_DWORD *)uint64_t v53 = v26;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
            }
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              CFAllocatorRef v51 = "acc_manager_checkForWirelessCTA";
              __int16 v52 = 1024;
              *(_DWORD *)uint64_t v53 = v21;
              *(_WORD *)&v53[4] = 1024;
              *(_DWORD *)&v53[6] = v22 != 0;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%s: pairingDataMatch %d, bdAddrMatch %d", buf, 0x18u);
            }
            if (v22) {
              int v28 = 1;
            }
            else {
              int v28 = v21;
            }
            CFTypeRef v0 = v24;
            uint64_t v29 = v24[49];
            int v30 = gNumLogObjects;
            if (v29) {
              BOOL v31 = gNumLogObjects <= 13;
            }
            else {
              BOOL v31 = 1;
            }
            int v32 = !v31;
            if (v28 == 1)
            {
              if (v32)
              {
                int v33 = *(NSObject **)(v29 + 104);
              }
              else
              {
                int v33 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  CFAllocatorRef v51 = (const char *)v29;
                  __int16 v52 = 1024;
                  *(_DWORD *)uint64_t v53 = v30;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
              }
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v35 = *v48;
                *(_DWORD *)buf = 138412546;
                CFAllocatorRef v51 = v45;
                __int16 v52 = 2112;
                *(void *)uint64_t v53 = v35;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Check for WirelessCTA: Found match! donor %@, receiver %@", buf, 0x16u);
              }
              acc_connection_setAuthStatus(v48, 2, 2);
              if (v46)
              {
LABEL_87:
                CFRelease(v15);
                if (!v20) {
                  goto LABEL_84;
                }
LABEL_83:
                CFRelease(v19);
                goto LABEL_84;
              }
            }
            else
            {
              if (v32)
              {
                __int16 v34 = *(NSObject **)(v29 + 104);
              }
              else
              {
                __int16 v34 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  CFAllocatorRef v51 = (const char *)v29;
                  __int16 v52 = 1024;
                  *(_DWORD *)uint64_t v53 = v30;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
              }
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v36 = *v48;
                int AuthStatus = acc_connection_getAuthStatus((uint64_t)v48, 2);
                *(_DWORD *)buf = 138413826;
                CFAllocatorRef v51 = v45;
                __int16 v52 = 2112;
                *(void *)uint64_t v53 = v36;
                *(_WORD *)&v53[8] = 2112;
                uint8_t v54 = v44;
                __int16 v55 = 2112;
                __int16 v56 = v43;
                __int16 v57 = 2112;
                CFDataRef v58 = v15;
                __int16 v59 = 2112;
                CFStringRef v60 = v19;
                __int16 v61 = 1024;
                int v62 = AuthStatus;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Check for WirelessCTA: Found donor %@, receiver %@, but data/info doesn't match or doesn't exist! donor %@ / %@, receiver %@ / %@, Maintain auth state for receiver (authStatus %{coreacc:ACCAuthInfo_Status_t}d)", buf, 0x44u);
                if (v46) {
                  goto LABEL_87;
                }
              }
              else if (v46)
              {
                goto LABEL_87;
              }
            }
            if (v20) {
              goto LABEL_83;
            }
LABEL_84:
            ++v8;
            if (v28) {
              goto LABEL_98;
            }
          }
        }
      }
      else
      {
        uint64_t v7 = (uint64_t)v48;
      }
      if (v7)
      {
        if (gLogObjects && gNumLogObjects >= 14)
        {
          uint64_t v38 = *(NSObject **)(gLogObjects + 104);
        }
        else
        {
          uint64_t v38 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v39 = *v48;
          int v40 = acc_connection_getAuthStatus((uint64_t)v48, 2);
          int v41 = acc_connection_getAuthStatus((uint64_t)v48, 6);
          *(_DWORD *)buf = 138412802;
          CFAllocatorRef v51 = v39;
          __int16 v52 = 1024;
          *(_DWORD *)uint64_t v53 = v40;
          *(_WORD *)&v53[4] = 1024;
          *(_DWORD *)&v53[6] = v41;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Check for WirelessCTA: No donor! Maintain auth state for receiver %@ (authStatus %{coreacc:ACCAuthInfo_Status_t}d / %{coreacc:ACCAuthInfo_Status_t}d)", buf, 0x18u);
        }
      }
    }
LABEL_98:
    if (context)
    {
      CFRelease(context);
      CFArrayRef context = 0;
    }
    if (theDict) {
      CFRelease(theDict);
    }
  }
}

void _CFDictionaryApplierFunction_findWirelessCTADonorCapableConnection(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  if (a2 && a3)
  {
    int v5 = *a3;
    int Type = acc_connection_getType(a2);
    if (gLogObjects) {
      BOOL v7 = gNumLogObjects < 14;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      CFIndex v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      CFIndex v8 = *(NSObject **)(gLogObjects + 104);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findWirelessCTADonorCapableConnection_cold_6(a2);
    }
    if (Type == 2 && acc_connection_isAuthenticated(a2, 6))
    {
      uint64_t v9 = acc_connection_copyProperty((char *)a2, kCFACCProperties_Endpoint_OOBPairingData);
      CFStringRef v10 = *(const __CFString **)(a2 + 16);
      if (v10 && CFStringGetLength(v10) == 17)
      {
        memset(buffer, 170, sizeof(buffer));
        CFStringGetCString(v10, buffer, 18, 0x600u);
        BOOL v15 = buffer[2] == 58 && buffer[5] == 58 && buffer[8] == 58 && buffer[11] == 58 && buffer[14] == 58;
      }
      else
      {
        BOOL v15 = 0;
      }
      if (gLogObjects && gNumLogObjects >= 14)
      {
        __int16 v16 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        __int16 v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        _CFDictionaryApplierFunction_findWirelessCTADonorCapableConnection_cold_4();
      }
      if (v9) {
        int v17 = 1;
      }
      else {
        int v17 = v15;
      }
      if (v17 == 1)
      {
        if (gLogObjects && gNumLogObjects >= 14)
        {
          BOOL v18 = *(NSObject **)(gLogObjects + 104);
        }
        else
        {
          BOOL v18 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t ParentConnection = acc_endpoint_getParentConnection(a2);
          BOOL isAuthenticated = acc_connection_isAuthenticated(a2, 6);
          uint64_t v21 = *(void *)(a2 + 16);
          *(_DWORD *)buffer = 138413570;
          *(void *)&buffer[4] = ParentConnection;
          *(_WORD *)&buffer[12] = 1024;
          *(_DWORD *)&buffer[14] = 2;
          __int16 v27 = 1024;
          BOOL v28 = isAuthenticated;
          __int16 v29 = 1024;
          BOOL v30 = v15;
          __int16 v31 = 2112;
          int v32 = v9;
          __int16 v33 = 2112;
          uint64_t v34 = v21;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "findWirelessCTADonorCapableConnection: %@ type %{coreacc:ACCConnection_Type_t}d, isAuthenticated %d, isBdAddrFormatString %d, found oobPairingData %@ / identifier %@", (uint8_t *)buffer, 0x32u);
        }
        if (v5 || (int v5 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks), (*a3 = v5) != 0))
        {
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (Mutable)
          {
            int v23 = Mutable;
            CFDictionaryAddValue(Mutable, kCFWirelessCTAConnectionUUID, *(const void **)a2);
            BOOL v24 = *(const void **)(a2 + 16);
            if (v24) {
              CFDictionaryAddValue(v23, kCFWirelessCTAIdentifier, v24);
            }
            if (v9) {
              CFDictionaryAddValue(v23, kCFWirelessCTAOOBPairingData, v9);
            }
            CFArrayAppendValue(v5, v23);
            CFRelease(v23);
          }
        }
        if (v9) {
          CFRelease(v9);
        }
      }
    }
    if (gLogObjects && gNumLogObjects >= 14)
    {
      uint64_t v25 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      uint64_t v25 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findWirelessCTADonorCapableConnection_cold_1((uint64_t)v5, v25);
    }
  }
}

void _CFDictionaryApplierFunction_findWirelessCTAReceiverCapableConnection(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 && a3)
  {
    uint64_t Type = acc_connection_getType(a2);
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 14;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      BOOL v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v7 = *(NSObject **)(gLogObjects + 104);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findWirelessCTAReceiverCapableConnection_cold_2(a2, Type, v7);
    }
    if (Type == 8 || Type == 6)
    {
      uint64_t context = 0;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a2 + 40), (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findOOBPairingEndpoint, &context);
      if (context)
      {
        if (gLogObjects && gNumLogObjects >= 14)
        {
          CFIndex v8 = *(NSObject **)(gLogObjects + 104);
        }
        else
        {
          CFIndex v8 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t ParentConnection = acc_endpoint_getParentConnection(a2);
          uint64_t v10 = *(void *)(context + 16);
          *(_DWORD *)buf = 138412802;
          uint64_t v13 = ParentConnection;
          __int16 v14 = 1024;
          int v15 = Type;
          __int16 v16 = 2112;
          uint64_t v17 = v10;
          _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "findWirelessCTAReceiverCapableConnection: %@ type %{coreacc:ACCConnection_Type_t}d, found endpoint %@", buf, 0x1Cu);
        }
        if (!*a3) {
          *a3 = a2;
        }
      }
    }
  }
}

void _CFDictionaryApplierFunction_findOOBPairingEndpoint(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 && a3)
  {
    int Protocol = acc_endpoint_getProtocol(a2);
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 14;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      BOOL v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v7 = *(NSObject **)(gLogObjects + 104);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findOOBPairingEndpoint_cold_1();
    }
    if (Protocol == 8 && !*a3) {
      *a3 = a2;
    }
  }
}

void acc_manager_checkForInductiveCTA()
{
  if ((acc_userDefaults_BOOLForKey(@"DisableWirelessCTA") & 1) == 0)
  {
    if (!gLogObjects || gNumLogObjects < 14)
    {
      BOOL v1 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v1 = *(NSObject **)(gLogObjects + 104);
    }
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Check for InductiveCTA", buf, 2u);
    }
    CFDictionaryRef v2 = acc_manager_copyAllConnections();
    if (v2)
    {
      CFDictionaryRef v3 = v2;
      if (CFDictionaryGetCount(v2) < 1)
      {
LABEL_116:
        CFRelease(v3);
        return;
      }
      uint64_t v43 = 0;
      uint64_t context = 0;
      CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findInductiveCTADonorCapableConnection, &context);
      CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findInductiveCTAReceiverCapableConnection, &v43);
      if (gLogObjects && gNumLogObjects >= 14)
      {
        unint64_t v4 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        unint64_t v4 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)BOOL v46 = context != 0;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v43 != 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Check for InductiveCTA: attempt to find... donor %d, receiver %d", buf, 0xEu);
      }
      if (!context || !v43)
      {
        if (v43)
        {
          if (gLogObjects && gNumLogObjects >= 14)
          {
            long long v12 = *(NSObject **)(gLogObjects + 104);
          }
          else
          {
            long long v12 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            CFDictionaryRef v13 = *v43;
            int AuthStatus = acc_connection_getAuthStatus((uint64_t)v43, 4);
            int v15 = acc_connection_getAuthStatus((uint64_t)v43, 6);
            *(_DWORD *)buf = 138412802;
            *(void *)BOOL v46 = v13;
            *(_WORD *)&v46[8] = 1024;
            *(_DWORD *)uint64_t v47 = AuthStatus;
            *(_WORD *)&v47[4] = 1024;
            *(_DWORD *)&v47[6] = v15;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Check for InductiveCTA: No donor! Maintain auth state for receiver %@ (authStatus %{coreacc:ACCAuthInfo_Status_t}d / %{coreacc:ACCAuthInfo_Status_t}d)", buf, 0x18u);
          }
        }
        goto LABEL_116;
      }
      uint64_t v42 = 0;
      CFDictionaryApplyFunction(v43[5], (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findInductiveAuthEndpoint, &v42);
      int v5 = (const void *)kCFACCProperties_Connection_Inductive_RxID;
      BOOL v6 = acc_connection_copyProperty(context, kCFACCProperties_Connection_Inductive_RxID);
      BOOL v7 = acc_connection_copyProperty((char *)v43, v5);
      CFIndex v8 = v7;
      int v9 = 0;
      if (v6 && v7) {
        int v9 = CFEqual(v6, v7);
      }
      BOOL v10 = v9 != 0;
      if (v6 && !v9 && acc_userDefaults_BOOLForKey(@"InductiveAuthPretendMatchRxID"))
      {
        if (gLogObjects && gNumLogObjects >= 14)
        {
          uint32_t v11 = *(NSObject **)(gLogObjects + 104);
        }
        else
        {
          uint32_t v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)BOOL v46 = "acc_manager_checkForInductiveCTA";
          *(_WORD *)&v46[8] = 1024;
          *(_DWORD *)uint64_t v47 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s: rxIDMatch %d, -> pretend matching rxID !!!", buf, 0x12u);
        }
        BOOL v10 = 1;
      }
      if ((acc_userDefaults_BOOLForKey(@"PretendNFCAuthFailed") & 1) != 0
        || acc_userDefaults_BOOLForKey(@"PretendNFCAuthTimeout"))
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          __int16 v16 = *(NSObject **)(gLogObjects + 440);
        }
        else
        {
          __int16 v16 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        BOOL v17 = 0;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v18 = acc_userDefaults_BOOLForKey(@"PretendNFCAuthFailed");
          unsigned int v19 = acc_userDefaults_BOOLForKey(@"PretendNFCAuthTimeout");
          *(_DWORD *)buf = 136316162;
          *(void *)BOOL v46 = "acc_manager_checkForInductiveCTA";
          *(_WORD *)&v46[8] = 1024;
          *(_DWORD *)uint64_t v47 = v18;
          *(_WORD *)&v47[4] = 1024;
          *(_DWORD *)&v47[6] = v19;
          LOWORD(v48) = 1024;
          *(_DWORD *)((char *)&v48 + 2) = v10;
          HIWORD(v48) = 1024;
          LODWORD(v49) = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s: PretendNFCAuthFailed(%d)/PretendNFCAuthTimeout(%d) !!!, rxIDMatch %d -> %d", buf, 0x24u);
          BOOL v17 = 0;
        }
      }
      else
      {
        BOOL v17 = v10;
      }
      if (gLogObjects && gNumLogObjects >= 14)
      {
        BOOL v20 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        BOOL v20 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = context;
        if (context) {
          uint64_t v21 = *(char **)context;
        }
        int v22 = v43;
        if (v43) {
          int v22 = (CFDictionaryRef *)*v43;
        }
        uint64_t v23 = v42;
        if (v42) {
          uint64_t v23 = *(void *)(v42 + 16);
        }
        *(_DWORD *)buf = 136316674;
        *(void *)BOOL v46 = "acc_manager_checkForInductiveCTA";
        *(_WORD *)&v46[8] = 2112;
        *(void *)uint64_t v47 = v21;
        *(_WORD *)&v47[8] = 2112;
        long long v48 = v22;
        LOWORD(v49) = 1024;
        *(_DWORD *)((char *)&v49 + 2) = v17;
        WORD3(v49) = 2112;
        *((void *)&v49 + 1) = v6;
        __int16 v50 = 2112;
        CFAllocatorRef v51 = v8;
        __int16 v52 = 2112;
        uint64_t v53 = v23;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%s: donor %@, receiver %@, rxIDMatch %d, donorRxID %@, receiverRxID %@, pAccAuthEndpointFound %@", buf, 0x44u);
      }
      if (gLogObjects) {
        BOOL v24 = gNumLogObjects <= 13;
      }
      else {
        BOOL v24 = 1;
      }
      int v25 = !v24;
      if (v17)
      {
        if (v25)
        {
          int v26 = *(NSObject **)(gLogObjects + 104);
        }
        else
        {
          int v26 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = *(void *)context;
          CFDictionaryRef v29 = *v43;
          *(_DWORD *)buf = 138412546;
          *(void *)BOOL v46 = v28;
          *(_WORD *)&v46[8] = 2112;
          *(void *)uint64_t v47 = v29;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Check for InductiveCTA: Found match! donor %@, receiver %@", buf, 0x16u);
        }
        if (acc_connection_getAuthStatus((uint64_t)v43, 4) != 2)
        {
          CFDataRef v36 = oobPairing_endpoint_copyCachedOOBPairingInfo((uint64_t)(context + 48));
          if (gLogObjects && gNumLogObjects >= 14)
          {
            __int16 v37 = *(NSObject **)(gLogObjects + 104);
          }
          else
          {
            __int16 v37 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v39 = *(void *)context;
            CFDictionaryRef v40 = *v43;
            *(_DWORD *)buf = 136315906;
            *(void *)BOOL v46 = "acc_manager_checkForInductiveCTA";
            *(_WORD *)&v46[8] = 2112;
            *(void *)uint64_t v47 = v39;
            *(_WORD *)&v47[8] = 2112;
            long long v48 = v40;
            LOWORD(v49) = 2112;
            *(void *)((char *)&v49 + 2) = v36;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%s: copy certData from %@ to %@ : %@", buf, 0x2Au);
          }
          acc_authInfo_setCertData((uint64_t)(v43 + 6), v36);
          acc_connection_setAuthStatus(v43, 4, 2);
          if (v42 && *(void *)(v42 + 56))
          {
            if (gLogObjects && gNumLogObjects >= 14)
            {
              int v41 = *(NSObject **)(gLogObjects + 104);
            }
            else
            {
              int v41 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)BOOL v46 = 2;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Check for InductiveCTA: Inform authProtocol endpoint %{coreacc:ACCAuthInfo_Status_t}d", buf, 8u);
            }
            accAuthProtocol_endpoint_notifyAuthStatus(*(void *)(v42 + 56), 2);
          }
          goto LABEL_112;
        }
        if (gLogObjects && gNumLogObjects >= 14)
        {
          BOOL v30 = *(NSObject **)(gLogObjects + 104);
        }
        else
        {
          BOOL v30 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
LABEL_112:
          if (v6) {
            CFRelease(v6);
          }
          if (v8) {
            CFRelease(v8);
          }
          goto LABEL_116;
        }
        CFDictionaryRef v38 = *v43;
        *(_DWORD *)buf = 138412546;
        *(void *)BOOL v46 = v38;
        *(_WORD *)&v46[8] = 1024;
        *(_DWORD *)uint64_t v47 = 2;
        __int16 v33 = "Check for InductiveCTA: receiver %@, already authenticated! %{coreacc:ACCAuthInfo_Status_t}d";
        uint64_t v34 = v30;
        uint32_t v35 = 18;
      }
      else
      {
        if (v25)
        {
          __int16 v27 = *(NSObject **)(gLogObjects + 104);
        }
        else
        {
          __int16 v27 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_112;
        }
        uint64_t v31 = *(void *)context;
        CFDictionaryRef v32 = *v43;
        *(_DWORD *)buf = 138413058;
        *(void *)BOOL v46 = v31;
        *(_WORD *)&v46[8] = 2112;
        *(void *)uint64_t v47 = v32;
        *(_WORD *)&v47[8] = 2112;
        long long v48 = v6;
        LOWORD(v49) = 2112;
        *(void *)((char *)&v49 + 2) = v8;
        __int16 v33 = "Check for InductiveCTA: Found donor %@, receiver %@, but data/info doesn't match or doesn't exist! donor %@, receiver %@";
        uint64_t v34 = v27;
        uint32_t v35 = 42;
      }
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v33, buf, v35);
      goto LABEL_112;
    }
  }
}

void _CFDictionaryApplierFunction_findInductiveCTADonorCapableConnection(uint64_t a1, char *a2, char **a3)
{
  if (a2 && a3)
  {
    int Type = acc_connection_getType((uint64_t)a2);
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 14;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      BOOL v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v7 = *(NSObject **)(gLogObjects + 104);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findInductiveCTADonorCapableConnection_cold_2((uint64_t)a2);
    }
    if (Type == 9 && acc_connection_isAuthenticated((BOOL)a2, 6))
    {
      CFIndex v8 = acc_connection_copyProperty(a2, kCFACCProperties_Connection_Inductive_RxID);
      if (v8)
      {
        int v9 = v8;
        if (gLogObjects && gNumLogObjects >= 14)
        {
          BOOL v10 = *(NSObject **)(gLogObjects + 104);
        }
        else
        {
          BOOL v10 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 138413058;
          uint64_t ParentConnection = acc_endpoint_getParentConnection((uint64_t)a2);
          __int16 v13 = 1024;
          int v14 = 9;
          __int16 v15 = 1024;
          BOOL isAuthenticated = acc_connection_isAuthenticated((BOOL)a2, 6);
          __int16 v17 = 2112;
          unsigned int v18 = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "findInductiveCTADonorCapableConnection: %@ type %{coreacc:ACCConnection_Type_t}d, isAuthenticated %d, found rxID %@", (uint8_t *)&v11, 0x22u);
        }
        if (!*a3) {
          *a3 = a2;
        }
        CFRelease(v9);
      }
    }
  }
}

void _CFDictionaryApplierFunction_findInductiveCTAReceiverCapableConnection(uint64_t a1, char *a2, char **a3)
{
  if (a2 && a3)
  {
    uint64_t Type = acc_connection_getType((uint64_t)a2);
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 14;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      BOOL v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v7 = *(NSObject **)(gLogObjects + 104);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findInductiveCTAReceiverCapableConnection_cold_3((uint64_t)a2, Type, v7);
    }
    if (Type == 4)
    {
      if (acc_userDefaults_BOOLForKey(@"InductiveAuthPretendMatchRxID"))
      {
        if (gLogObjects && gNumLogObjects >= 14)
        {
          CFIndex v8 = *(NSObject **)(gLogObjects + 104);
        }
        else
        {
          CFIndex v8 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = 138412802;
          uint64_t ParentConnection = acc_endpoint_getParentConnection((uint64_t)a2);
          __int16 v14 = 1024;
          int v15 = 4;
          __int16 v16 = 1024;
          BOOL isAuthenticated = acc_connection_isAuthenticated((BOOL)a2, 6);
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "findInductiveCTAReceiverCapableConnection: %@ type %{coreacc:ACCConnection_Type_t}d, isAuthenticated %d, pretend found rxID !!!", (uint8_t *)&v12, 0x18u);
        }
        if (!*a3) {
          *a3 = a2;
        }
      }
      else
      {
        int v9 = acc_connection_copyProperty(a2, kCFACCProperties_Connection_Inductive_RxID);
        if (v9)
        {
          BOOL v10 = v9;
          if (gLogObjects && gNumLogObjects >= 14)
          {
            int v11 = *(NSObject **)(gLogObjects + 104);
          }
          else
          {
            int v11 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            int v12 = 138413058;
            uint64_t ParentConnection = acc_endpoint_getParentConnection((uint64_t)a2);
            __int16 v14 = 1024;
            int v15 = 4;
            __int16 v16 = 1024;
            BOOL isAuthenticated = acc_connection_isAuthenticated((BOOL)a2, 6);
            __int16 v18 = 2112;
            unsigned int v19 = v10;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "findInductiveCTAReceiverCapableConnection: %@ type %{coreacc:ACCConnection_Type_t}d, isAuthenticated %d, found rxID %@", (uint8_t *)&v12, 0x22u);
          }
          if (!*a3) {
            *a3 = a2;
          }
          CFRelease(v10);
        }
      }
    }
  }
}

void _CFDictionaryApplierFunction_findInductiveAuthEndpoint(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 && a3)
  {
    int Protocol = acc_endpoint_getProtocol(a2);
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 14;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      BOOL v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v7 = *(NSObject **)(gLogObjects + 104);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findInductiveAuthEndpoint_cold_1();
    }
    if (Protocol == 10 && !*a3) {
      *a3 = a2;
    }
  }
}

CFStringRef acc_manager_findAdapterForConnection(CFTypeRef cf)
{
  if (!cf)
  {
    CFStringRef Copy = 0;
    goto LABEL_8;
  }
  CFRetain(cf);
  CFStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  v15[0] = cf;
  v15[1] = Mutable;
  acc_manager_iterateAllConnections((unsigned int (*)(void, uint64_t))_findAdapterForConnection, (uint64_t)v15, 0);
  if (!CFStringGetLength(Mutable))
  {
    CFStringRef Copy = 0;
    if (!Mutable) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, Mutable);
  if (Mutable) {
LABEL_7:
  }
    CFRelease(Mutable);
LABEL_8:
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 14;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    int v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    int v5 = *(NSObject **)(gLogObjects + 104);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315906;
    CFIndex v8 = "acc_manager_findAdapterForConnection";
    __int16 v9 = 1024;
    int v10 = 1416;
    __int16 v11 = 2112;
    CFTypeRef v12 = cf;
    __int16 v13 = 2112;
    CFStringRef v14 = Copy;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s:%d connectionUUID %@, resultAdapterConnectionUUID %@", (uint8_t *)&v7, 0x26u);
  }
  if (cf) {
    CFRelease(cf);
  }
  return Copy;
}

BOOL _findAdapterForConnection(uint64_t a1, uint64_t a2)
{
  if (!a1 || *(unsigned char *)(a1 + 142))
  {
    CFDictionaryRef v3 = 0;
    BOOL v4 = 0;
    int v5 = 0;
    BOOL v6 = 0;
    goto LABEL_16;
  }
  CFDictionaryRef v3 = 0;
  if (!a2)
  {
    BOOL v4 = 0;
    int v5 = 0;
    BOOL v6 = 0;
    goto LABEL_16;
  }
  BOOL v4 = 0;
  int v5 = 0;
  BOOL v6 = 0;
  if (*(_DWORD *)(a1 + 8) != 6) {
    goto LABEL_16;
  }
  CFDictionaryRef v3 = 0;
  BOOL v6 = *(const void **)a2;
  if (!*(void *)a2 || (int v7 = *(__CFString **)(a2 + 8)) == 0)
  {
    BOOL v4 = 0;
    int v5 = 0;
    goto LABEL_16;
  }
  CFSetRef ConnectionWithUUID = (__CFString *)acc_manager_getConnectionWithUUID(*(const void **)a2);
  CFDictionaryRef v3 = ConnectionWithUUID;
  if (!ConnectionWithUUID)
  {
LABEL_35:
    BOOL v4 = 0;
    int v5 = 0;
    goto LABEL_16;
  }
  if (BYTE6(ConnectionWithUUID[4].info)
    || LODWORD(ConnectionWithUUID->info) != 6
    || CFEqual((CFStringRef)ConnectionWithUUID->isa, *(CFStringRef *)a1))
  {
    CFDictionaryRef v3 = 0;
    goto LABEL_35;
  }
  __int16 v9 = (const void *)kCFACCProperties_Connection_ManagerParent;
  BOOL v4 = acc_connection_copyProperty((char *)v3, kCFACCProperties_Connection_ManagerParent);
  int v10 = acc_connection_copyProperty((char *)a1, v9);
  int v5 = v10;
  CFDictionaryRef v3 = 0;
  if (v4 && v10)
  {
    if (CFStringCompare((CFStringRef)v4, (CFStringRef)v10, 0))
    {
      CFDictionaryRef v3 = 0;
    }
    else
    {
      CFDictionaryRef v3 = *(__CFString **)a1;
      CFStringReplaceAll(v7, *(CFStringRef *)a1);
    }
  }
LABEL_16:
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects < 14;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    CFTypeRef v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    CFTypeRef v12 = *(NSObject **)(gLogObjects + 104);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      CFStringRef v14 = *(CFStringRef *)a1;
    }
    else {
      CFStringRef v14 = 0;
    }
    int v15 = 136316674;
    __int16 v16 = "_findAdapterForConnection";
    __int16 v17 = 1024;
    int v18 = 1326;
    __int16 v19 = 2112;
    CFStringRef v20 = v14;
    __int16 v21 = 2112;
    int v22 = v6;
    __int16 v23 = 2112;
    BOOL v24 = v3;
    __int16 v25 = 2112;
    int v26 = v4;
    __int16 v27 = 2112;
    uint64_t v28 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s:%d pPotentialAdapterConnection %@, inConnectionUUID %@, foundAdapterConnectionUUID %@, connectionManagerParent %@, adapterManagerParent %@", (uint8_t *)&v15, 0x44u);
    if (!v4) {
      goto LABEL_26;
    }
  }
  else if (!v4)
  {
    goto LABEL_26;
  }
  CFRelease(v4);
LABEL_26:
  if (v5) {
    CFRelease(v5);
  }
  return v3 == 0;
}

CFArrayRef acc_manager_findConnectionsThroughAdapter(CFTypeRef cf)
{
  if (!cf)
  {
    CFArrayRef Copy = 0;
    goto LABEL_8;
  }
  CFRetain(cf);
  CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v15[0] = cf;
  v15[1] = Mutable;
  acc_manager_iterateAllConnections((unsigned int (*)(void, uint64_t))_findConnectionsThroughAdapter, (uint64_t)v15, 0);
  if (!CFArrayGetCount(Mutable))
  {
    CFArrayRef Copy = 0;
    if (!Mutable) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  CFArrayRef Copy = CFArrayCreateCopy(kCFAllocatorDefault, Mutable);
  if (Mutable) {
LABEL_7:
  }
    CFRelease(Mutable);
LABEL_8:
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 14;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    int v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    int v5 = *(NSObject **)(gLogObjects + 104);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315906;
    CFIndex v8 = "acc_manager_findConnectionsThroughAdapter";
    __int16 v9 = 1024;
    int v10 = 1448;
    __int16 v11 = 2112;
    CFTypeRef v12 = cf;
    __int16 v13 = 2112;
    CFArrayRef v14 = Copy;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s:%d adapterConnectionUUID %@, resultConnectionUUIDs %@", (uint8_t *)&v7, 0x26u);
  }
  if (cf) {
    CFRelease(cf);
  }
  return Copy;
}

uint64_t _findConnectionsThroughAdapter(char *a1, uint64_t a2)
{
  if (!a1 || a1[142])
  {
    BOOL v4 = 0;
    int v5 = 0;
    BOOL v6 = 0;
  }
  else
  {
    BOOL v4 = 0;
    if (a2)
    {
      int v5 = 0;
      BOOL v6 = 0;
      if (*((_DWORD *)a1 + 2) == 6)
      {
        BOOL v4 = 0;
        CFDictionaryRef v2 = *(const void **)a2;
        if (*(void *)a2 && (int v7 = *(__CFArray **)(a2 + 8)) != 0)
        {
          CFSetRef ConnectionWithUUID = (char *)acc_manager_getConnectionWithUUID(*(const void **)a2);
          BOOL v6 = ConnectionWithUUID;
          if (ConnectionWithUUID)
          {
            if (!ConnectionWithUUID[142]
              && *((_DWORD *)ConnectionWithUUID + 2) == 6
              && CFStringCompare(*(CFStringRef *)ConnectionWithUUID, *(CFStringRef *)a1, 0))
            {
              __int16 v9 = (const void *)kCFACCProperties_Connection_ManagerParent;
              BOOL v6 = acc_connection_copyProperty(v6, kCFACCProperties_Connection_ManagerParent);
              int v10 = acc_connection_copyProperty(a1, v9);
              int v5 = v10;
              BOOL v4 = 0;
              if (v10 && v6)
              {
                if (CFStringCompare((CFStringRef)v10, (CFStringRef)v6, 0))
                {
                  BOOL v4 = 0;
                }
                else
                {
                  BOOL v4 = *(const void **)a1;
                  CFArrayAppendValue(v7, *(const void **)a1);
                }
              }
            }
            else
            {
              BOOL v4 = 0;
              int v5 = 0;
              BOOL v6 = 0;
            }
          }
          else
          {
            BOOL v4 = 0;
            int v5 = 0;
          }
        }
        else
        {
          int v5 = 0;
          BOOL v6 = 0;
        }
      }
    }
    else
    {
      int v5 = 0;
      BOOL v6 = 0;
    }
  }
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects < 14;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    CFTypeRef v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    CFTypeRef v12 = *(NSObject **)(gLogObjects + 104);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      CFArrayRef v14 = *(const void **)a1;
    }
    else {
      CFArrayRef v14 = 0;
    }
    int v15 = 136316674;
    __int16 v16 = "_findConnectionsThroughAdapter";
    __int16 v17 = 1024;
    int v18 = 1382;
    __int16 v19 = 2112;
    CFStringRef v20 = v14;
    __int16 v21 = 2112;
    int v22 = v2;
    __int16 v23 = 2112;
    BOOL v24 = v4;
    __int16 v25 = 2112;
    int v26 = v5;
    __int16 v27 = 2112;
    uint64_t v28 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s:%d pConnection %@, inAdapterConnectionUUID %@, foundConnectionUUID %@, connectionManagerParent %@, adapterManagerParent %@", (uint8_t *)&v15, 0x44u);
    if (!v5) {
      goto LABEL_26;
    }
  }
  else if (!v5)
  {
    goto LABEL_26;
  }
  CFRelease(v5);
LABEL_26:
  if (v6) {
    CFRelease(v6);
  }
  return 1;
}

void ___initSharedManager_block_invoke(id a1)
{
  if (!_gSharedManager[0]) {
    _gSharedManager[0] = (uint64_t)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, 0);
  }
  if (!qword_100238168) {
    qword_100238168 = (uint64_t)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, 0);
  }
  if (!qword_100238170)
  {
    qword_100238170 = (uint64_t)CFCreateUUIDString();
    qword_100238178 = systemInfo_getCurrentUnixTime();
    if (gLogObjects && gNumLogObjects >= 13)
    {
      BOOL v1 = *(NSObject **)(gLogObjects + 96);
    }
    else
    {
      BOOL v1 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      int v2 = 138412290;
      uint64_t v3 = qword_100238170;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Initialized device UUID: %@", (uint8_t *)&v2, 0xCu);
    }
  }
}

void OUTLINED_FUNCTION_3_5(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x22u);
}

void OUTLINED_FUNCTION_9(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x1Cu);
}

void OUTLINED_FUNCTION_12_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x12u);
}

void OUTLINED_FUNCTION_13_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x22u);
}

CFStringRef iAP2MsgCopyDataAsCFString(unsigned __int16 *a1, BOOL *a2)
{
  DataAsString = iAP2MsgGetDataAsString(a1, a2);
  if (!DataAsString || *a2) {
    return 0;
  }

  return CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
}

unsigned char *iAP2MsgAddCFU64Param(uint64_t a1, uint64_t a2, __int16 a3, const __CFNumber *a4)
{
  if (!a4) {
    return 0;
  }
  FreeParam = (unsigned char *)iAP2MsgGetFreeParam(a1);
  if (FreeParam)
  {
    unint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
    if (CFNumberGetValue(a4, kCFNumberSInt64Type, &valuePtr))
    {
      iAP2MsgInitParam(a1, FreeParam, a3, 0, 0xCu, a2);
      char v9 = HIBYTE(valuePtr);
      *(unsigned char *)iAP2MsgGetParamValueData((uint64_t)FreeParam) = v9;
      char v10 = BYTE6(valuePtr);
      *(unsigned char *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 1) = v10;
      unint64_t v11 = valuePtr >> 40;
      *(unsigned char *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 2) = v11;
      LOBYTE(v11) = BYTE4(valuePtr);
      *(unsigned char *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 3) = v11;
      unint64_t v12 = valuePtr >> 24;
      *(unsigned char *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 4) = v12;
      unint64_t v13 = valuePtr >> 16;
      *(unsigned char *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 5) = v13;
      unint64_t v14 = valuePtr >> 8;
      *(unsigned char *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 6) = v14;
      LOBYTE(v14) = valuePtr;
      *(unsigned char *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 7) = v14;
      return FreeParam;
    }
    return 0;
  }
  return FreeParam;
}

uint64_t iAP2MsgAddCFU32Param(uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number)
{
  if (!number) {
    return 0;
  }
  unsigned int valuePtr = -1431655766;
  if (CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr)) {
    return iAP2MsgAddU32Param(a1, a2, a3, valuePtr);
  }
  else {
    return 0;
  }
}

uint64_t iAP2MsgAddCFU16Param(uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number)
{
  if (!number) {
    return 0;
  }
  unsigned __int16 valuePtr = -21846;
  if (CFNumberGetValue(number, kCFNumberSInt16Type, &valuePtr)) {
    return iAP2MsgAddU16Param(a1, a2, a3, valuePtr);
  }
  else {
    return 0;
  }
}

unsigned char *iAP2MsgAddCFU8Param(uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number)
{
  if (!number) {
    return 0;
  }
  char valuePtr = -86;
  if (CFNumberGetValue(number, kCFNumberSInt8Type, &valuePtr)) {
    return iAP2MsgAddU8Param(a1, a2, a3, valuePtr);
  }
  else {
    return 0;
  }
}

unsigned char *iAP2MsgAddCFBooleanParam(uint64_t a1, uint64_t a2, __int16 a3, CFBooleanRef BOOLean)
{
  if (!BOOLean) {
    return 0;
  }
  char v7 = CFBooleanGetValue(BOOLean) != 0;

  return iAP2MsgAddU8Param(a1, a2, a3, v7);
}

unsigned char *iAP2MsgAddCFStringParam(uint64_t a1, uint64_t a2, __int16 a3, CFStringRef theString)
{
  CFIndex bufferSize = 0;
  if (!theString) {
    return 0;
  }
  v12.length = CFStringGetLength(theString);
  v12.location = 0;
  CFStringGetBytes(theString, v12, 0x8000100u, 0, 0, 0, 0, &bufferSize);
  ++bufferSize;
  FreeParam = (unsigned char *)iAP2MsgGetFreeParam(a1);
  if (FreeParam
    && bufferSize <= *(void *)(a1 + 24) + (unint64_t)*(unsigned int *)(a1 + 16) - *(void *)(a1 + 32) - 4)
  {
    iAP2MsgInitParam(a1, FreeParam, a3, 8, (unsigned __int16)(bufferSize + 4), a2);
    ParamValueData = (char *)iAP2MsgGetParamValueData((uint64_t)FreeParam);
    CFStringGetCString(theString, ParamValueData, bufferSize, 0x8000100u);
  }
  return FreeParam;
}

unsigned char *iAP2MsgAddCFU16ArrayParam(uint64_t a1, uint64_t a2, __int16 a3, CFArrayRef theArray)
{
  if (!theArray) {
    return 0;
  }
  unsigned __int16 valuePtr = -21846;
  CFIndex Count = CFArrayGetCount(theArray);
  FreeParam = (unsigned char *)iAP2MsgGetFreeParam(a1);
  if (FreeParam)
  {
    iAP2MsgInitParam(a1, FreeParam, a3, 9, (2 * (_WORD)Count + 4) & 0xFFFE, a2);
    uint64_t ParamValueData = iAP2MsgGetParamValueData((uint64_t)FreeParam);
    if (Count >= 1)
    {
      unint64_t v11 = (_WORD *)ParamValueData;
      CFIndex v12 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v12);
        if (!CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &valuePtr)) {
          break;
        }
        *v11++ = bswap32(valuePtr) >> 16;
        if (Count == ++v12) {
          return FreeParam;
        }
      }
      return 0;
    }
  }
  return FreeParam;
}

BOOL iap2_sessionFileTransfer_init(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    size_t BuffSize = iAP2ListArrayGetBuffSize(128, 24);
    uint64_t v3 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
    *(void *)(v1 + 432) = v3;
    uint64_t v4 = malloc_type_malloc(BuffSize, 0x48E4437EuLL);
    *uint64_t v3 = v4;
    LODWORD(v1) = iAP2ListArrayInit((uint64_t)v4, 128, 0x18u);
    uint64_t v5 = malloc_type_malloc(BuffSize, 0xC0018726uLL);
    v3[1] = v5;
    int v6 = iAP2ListArrayInit((uint64_t)v5, 128, 0x18u);
    char v7 = malloc_type_malloc(BuffSize, 0x4E533F88uLL);
    void v3[2] = v7;
    return (iAP2ListArrayInit((uint64_t)v7, 128, 0x18u) | v6 | v1) == 0;
  }
  return result;
}

uint64_t iap2_sessionFileTransfer_cleanup(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = *(unsigned __int8 ***)(result + 432);
    if (v2)
    {
      if (gLogObjects) {
        BOOL v3 = gNumLogObjects < 24;
      }
      else {
        BOOL v3 = 1;
      }
      if (v3)
      {
        uint64_t v4 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        uint64_t v4 = *(NSObject **)(gLogObjects + 184);
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(v1 + 8);
        unsigned int Count = iAP2ListArrayGetCount(*v2);
        unsigned int v7 = iAP2ListArrayGetCount(v2[1]);
        unsigned int v8 = iAP2ListArrayGetCount(v2[2]);
        int v17 = 138413058;
        uint64_t v18 = v5;
        __int16 v19 = 1024;
        unsigned int v20 = Count;
        __int16 v21 = 1024;
        unsigned int v22 = v7;
        __int16 v23 = 1024;
        unsigned int v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "sessionFileTransfer cleanup: %@, list counts: in %d, out %d, remove %d", (uint8_t *)&v17, 0x1Eu);
      }
      iap2_sessionFileTransfer_cleanUpRemoveTransferList(v1);
      if (iAP2ListArrayGetCount(*v2)
        || iAP2ListArrayGetCount(v2[1])
        || iAP2ListArrayGetCount(v2[2]))
      {
        if (gLogObjects && gNumLogObjects >= 24)
        {
          char v9 = *(NSObject **)(gLogObjects + 184);
        }
        else
        {
          char v9 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)(v1 + 8);
          unsigned int v11 = iAP2ListArrayGetCount(*v2);
          unsigned int v12 = iAP2ListArrayGetCount(v2[1]);
          unsigned int v13 = iAP2ListArrayGetCount(v2[2]);
          int v17 = 138413058;
          uint64_t v18 = v10;
          __int16 v19 = 1024;
          unsigned int v20 = v11;
          __int16 v21 = 1024;
          unsigned int v22 = v12;
          __int16 v23 = 1024;
          unsigned int v24 = v13;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "sessionFileTransfer cleanup: %@, Still entries after cleanUpRemoveTransferList! list counts: in %d, out %d, remove %d", (uint8_t *)&v17, 0x1Eu);
        }
      }
      if (*v2)
      {
        free(*v2);
        const void *v2 = 0;
      }
      unint64_t v14 = v2[1];
      if (v14)
      {
        free(v14);
        v2[1] = 0;
      }
      int v15 = v2[2];
      if (v15)
      {
        free(v15);
        v2[2] = 0;
      }
      __int16 v16 = *(void **)(v1 + 432);
      if (v16)
      {
        free(v16);
        *(void *)(v1 + 432) = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void iap2_sessionFileTransfer_cleanUpRemoveTransferList(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 432);
    if (v1)
    {
      if (gLogObjects) {
        BOOL v2 = gNumLogObjects < 24;
      }
      else {
        BOOL v2 = 1;
      }
      if (v2)
      {
        BOOL v3 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        BOOL v3 = *(NSObject **)(gLogObjects + 184);
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
        iap2_sessionFileTransfer_cleanUpRemoveTransferList_cold_3();
      }
      uint64_t v4 = *(unsigned char **)(v1 + 16);
      int LastItemIndex = iAP2ListArrayGetLastItemIndex((uint64_t)v4);
      if (LastItemIndex != 255)
      {
        unsigned __int8 v6 = LastItemIndex;
        int v7 = 0;
        do
        {
          unint64_t v8 = iAP2ListArrayItemForIndex((uint64_t)v4, v6);
          iAP2FileTransferRelease(*(void *)(v8 + 8));
          char v9 = *(void **)(v8 + 16);
          if (v9)
          {
            free(v9);
            *(void *)(v8 + 16) = 0;
          }
          uint64_t v10 = *(void **)(v8 + 8);
          if (v10)
          {
            free(v10);
            *(void *)(v8 + 8) = 0;
          }
          iAP2ListArrayDeleteItem(v4, v6, 0);
          ++v7;
          int v11 = iAP2ListArrayGetLastItemIndex((uint64_t)v4);
          unsigned __int8 v6 = v11;
        }
        while (v11 != 255);
      }
      if (gLogObjects && gNumLogObjects >= 24)
      {
        unsigned int v12 = *(NSObject **)(gLogObjects + 184);
      }
      else
      {
        unsigned int v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
        iap2_sessionFileTransfer_cleanUpRemoveTransferList_cold_1();
      }
    }
  }
}

uint64_t iap2_sessionFileTransfer_start(unsigned __int8 *a1)
{
  if (a1)
  {
    unsigned int Version = iap2_sessionFileTransfer_getVersion(a1);
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 24;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      BOOL v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v3 = *(NSObject **)(gLogObjects + 184);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5[0] = 67109120;
      v5[1] = Version;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Starting fileTransfer session (version=%d)...", (uint8_t *)v5, 8u);
    }
  }
  return 0;
}

unsigned __int8 *iap2_sessionFileTransfer_getVersion(unsigned __int8 *result)
{
  if (result)
  {
    uint64_t v1 = *((void *)result + 4);
    if (v1 && (BOOL v2 = *(unsigned __int8 **)(v1 + 24)) != 0)
    {
      int SessionForService = iAP2LinkGetSessionForService(*(void *)(v1 + 24), 1);
      uint64_t result = iAP2LinkGetSessionInfo(v2, SessionForService);
      if (result) {
        return (unsigned __int8 *)result[2];
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t iap2_sessionFileTransfer_handleDatagram(unint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  unint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      int v7 = *a2;
      unint64_t result = iap2_sessionFileTransfer_findTransferEntry(a1, v7);
      if (result)
      {
        uint64_t v8 = *(void *)(result + 8);
        if (v8)
        {
          if (gLogObjects && gNumLogObjects >= 24)
          {
            char v9 = *(NSObject **)(gLogObjects + 184);
          }
          else
          {
            char v9 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v10 = *(void *)(a1 + 8);
            uint64_t v11 = *(void *)(v8 + 16);
            int v12 = *(unsigned __int8 *)(v8 + 109);
            int v13 = 136316674;
            unint64_t v14 = "iap2_sessionFileTransfer_handleDatagram";
            __int16 v15 = 1024;
            int v16 = 158;
            __int16 v17 = 2112;
            uint64_t v18 = v10;
            __int16 v19 = 2048;
            uint64_t v20 = v8;
            __int16 v21 = 2048;
            uint64_t v22 = v11;
            __int16 v23 = 1024;
            int v24 = v12;
            __int16 v25 = 1024;
            int v26 = v7;
            _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s:%d pEndpoint %@, fileXfer %p (buffer %p, id 0x%x), bufferID 0x%x", (uint8_t *)&v13, 0x3Cu);
          }
          iAP2FileTransferHandleRecv(v8, (uint64_t)a2, a3);
          iap2_sessionFileTransfer_cleanUpRemoveTransferList(a1);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

unint64_t iap2_sessionFileTransfer_findTransferEntry(unint64_t result, int a2)
{
  if (result)
  {
    BOOL v2 = *(void **)(result + 432);
    if (v2)
    {
      if ((a2 & 0x80) != 0)
      {
        if (*v2)
        {
          if (gLogObjects && gNumLogObjects >= 24)
          {
            unsigned __int8 v6 = *(NSObject **)(gLogObjects + 184);
          }
          else
          {
            unsigned __int8 v6 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
            iap2_sessionFileTransfer_findTransferEntry_cold_4();
          }
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v4 = v2[1];
        ++v2;
        if (v4)
        {
          if (gLogObjects && gNumLogObjects >= 24)
          {
            uint64_t v5 = *(NSObject **)(gLogObjects + 184);
          }
          else
          {
            uint64_t v5 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
            iap2_sessionFileTransfer_findTransferEntry_cold_2();
          }
LABEL_20:
          int v7 = (unsigned char *)*v2;
          v10[0] = 0xAAAAAAAAAAAAAAAALL;
          v10[1] = 0;
          LOBYTE(v10[0]) = a2;
          _DWORD v10[2] = 0;
          unsigned int Item = iAP2ListArrayFindItem(v7, (uint64_t)v10, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_compareBufferID);
          if (Item != 255) {
            return iAP2ListArrayItemForIndex((uint64_t)v7, Item);
          }
          if (gLogObjects && gNumLogObjects >= 24)
          {
            char v9 = *(NSObject **)(gLogObjects + 184);
          }
          else
          {
            char v9 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            int v12 = a2;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Failed to find transfer for bufferID(%u)!", buf, 8u);
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t iap2_sessionFileTransfer_addTransferForFeature(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  if (!a1 || !a3) {
    return result;
  }
  int v7 = *(unsigned __int8 ***)(a1 + 432);
  if (!v7) {
    return 0;
  }
  if ((*(char *)(a3 + 109) & 0x80000000) == 0)
  {
    uint64_t v10 = v7 + 1;
    if (v7[1])
    {
      if (gLogObjects && gNumLogObjects >= 24)
      {
        uint64_t v11 = *(NSObject **)(gLogObjects + 184);
      }
      else
      {
        uint64_t v11 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = *(void *)(a1 + 8);
        int v14 = *(unsigned __int8 *)(a3 + 109);
        *(_DWORD *)buf = 138413058;
        *(void *)uint32_t v35 = v13;
        *(_WORD *)&v35[8] = 1024;
        *(_DWORD *)&unsigned char v35[10] = a2;
        __int16 v36 = 1024;
        int v37 = v14;
        __int16 v38 = 1024;
        BOOL v39 = a4 != 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "iap2_sessionFileTransfer_addTransferForFeature: %@ type=%d bufferID=%u context(%d), use inTransferList", buf, 0x1Eu);
      }
      goto LABEL_21;
    }
    return 0;
  }
  if (!*v7) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 24)
  {
    int v12 = *(NSObject **)(gLogObjects + 184);
  }
  else
  {
    int v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  uint64_t v10 = v7;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v28 = *(void *)(a1 + 8);
    int v29 = *(unsigned __int8 *)(a3 + 109);
    *(_DWORD *)buf = 138413058;
    *(void *)uint32_t v35 = v28;
    *(_WORD *)&v35[8] = 1024;
    *(_DWORD *)&unsigned char v35[10] = a2;
    __int16 v36 = 1024;
    int v37 = v29;
    __int16 v38 = 1024;
    BOOL v39 = a4 != 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "iap2_sessionFileTransfer_addTransferForFeature: %@ type=%d bufferID=%u context(%d), use outTransferList", buf, 0x1Eu);
    uint64_t v10 = v7;
  }
LABEL_21:
  __int16 v15 = *v10;
  char v16 = *(unsigned char *)(a3 + 109);
  int __src = -1431655766;
  uint64_t v32 = 0;
  LOBYTE(__src) = v16;
  int __src_4 = a2;
  uint64_t v33 = 0;
  if (iAP2ListArrayFindItem(v15, (uint64_t)&__src, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_compareBufferIDAndFeatureType) == 255)
  {
    LOBYTE(__src) = *(unsigned char *)(a3 + 109);
    int __src_4 = a2;
    uint64_t v32 = a3;
    uint64_t v33 = a4;
    unsigned int LastItemIndex = iAP2ListArrayGetLastItemIndex((uint64_t)v15);
    if (iAP2ListArrayAddItemAfter(v15, LastItemIndex, &__src) != 255) {
      return 1;
    }
    if (gLogObjects && gNumLogObjects >= 24)
    {
      int v24 = *(NSObject **)(gLogObjects + 184);
    }
    else
    {
      int v24 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v25)
    {
      int v26 = *(unsigned __int8 *)(a3 + 109);
      __int16 v27 = "incoming";
      if (v15 == *v7) {
        __int16 v27 = "outgoing";
      }
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)uint32_t v35 = v26;
      *(_WORD *)&v35[4] = 2080;
      *(void *)&v35[6] = v27;
      __int16 v21 = "Failed to add new fileXfer (bufferID=%xh) to %s list";
      uint64_t v22 = v24;
      uint32_t v23 = 18;
      goto LABEL_31;
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 24)
    {
      __int16 v17 = *(NSObject **)(gLogObjects + 184);
    }
    else
    {
      __int16 v17 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v19 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v19)
    {
      int v20 = *(unsigned __int8 *)(a3 + 109);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)uint32_t v35 = v20;
      *(_WORD *)&v35[4] = 1024;
      *(_DWORD *)&v35[6] = a2;
      __int16 v21 = "Transfer for bufferID(%u) already exists! type=%d";
      uint64_t v22 = v17;
      uint32_t v23 = 14;
LABEL_31:
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, buf, v23);
      return 0;
    }
  }
  return result;
}

unint64_t _compareBufferIDAndFeatureType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  unint64_t result = v3 - v4;
  if (v3 == v4) {
    return *((unsigned int *)a1 + 1) - (unint64_t)*((unsigned int *)a2 + 1);
  }
  return result;
}

uint64_t iap2_sessionFileTransfer_removeTransferForFeature(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = 0;
  if (!a1 || !a3) {
    return result;
  }
  unsigned __int8 v6 = *(void **)(a1 + 432);
  if (!v6) {
    return 0;
  }
  if ((*(char *)(a3 + 109) & 0x80000000) == 0)
  {
    uint64_t v8 = (unsigned char **)(v6 + 1);
    if (v6[1])
    {
      if (gLogObjects && gNumLogObjects >= 24)
      {
        char v9 = *(NSObject **)(gLogObjects + 184);
      }
      else
      {
        char v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = *(void *)(a1 + 8);
        int v12 = *(unsigned __int8 *)(a3 + 109);
        *(_DWORD *)buf = 138412802;
        *(void *)BOOL v30 = v11;
        *(_WORD *)&v30[8] = 1024;
        *(_DWORD *)&v30[10] = a2;
        __int16 v31 = 1024;
        int v32 = v12;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "iap2_sessionFileTransfer_removeTransferForFeature: %@ type=%d bufferID=%u, use inTransferList", buf, 0x18u);
      }
      goto LABEL_21;
    }
    return 0;
  }
  if (!*v6) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 24)
  {
    uint64_t v10 = *(NSObject **)(gLogObjects + 184);
  }
  else
  {
    uint64_t v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  uint64_t v8 = (unsigned char **)v6;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = *(void *)(a1 + 8);
    int v25 = *(unsigned __int8 *)(a3 + 109);
    *(_DWORD *)buf = 138412802;
    *(void *)BOOL v30 = v24;
    *(_WORD *)&v30[8] = 1024;
    *(_DWORD *)&v30[10] = a2;
    __int16 v31 = 1024;
    int v32 = v25;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "iap2_sessionFileTransfer_removeTransferForFeature: %@ type=%d bufferID=%u, use outTransferList", buf, 0x18u);
    uint64_t v8 = (unsigned char **)v6;
  }
LABEL_21:
  uint64_t v13 = (unsigned __int8 *)v6[2];
  int v14 = *v8;
  char v15 = *(unsigned char *)(a3 + 109);
  v26[0] = -1431655766;
  uint64_t v27 = 0;
  LOBYTE(v26[0]) = v15;
  v26[1] = a2;
  uint64_t v28 = 0;
  unsigned int Item = iAP2ListArrayFindItem(v14, (uint64_t)v26, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_compareBufferIDAndFeatureType);
  if (Item != 255)
  {
    unsigned int v17 = Item;
    unsigned int LastItemIndex = iAP2ListArrayGetLastItemIndex((uint64_t)v13);
    BOOL v19 = (void *)iAP2ListArrayItemForIndex((uint64_t)v14, v17);
    iAP2ListArrayAddItemAfter(v13, LastItemIndex, v19);
    iAP2ListArrayDeleteItem(v14, v17, 0);
    return 1;
  }
  if (gLogObjects && gNumLogObjects >= 24)
  {
    int v20 = *(NSObject **)(gLogObjects + 184);
  }
  else
  {
    int v20 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v21)
  {
    int v22 = *(unsigned __int8 *)(a3 + 109);
    if (v14 == (unsigned char *)*v6)
    {
      uint32_t v23 = "outgoing";
    }
    else if (v14 == (unsigned char *)v6[1])
    {
      uint32_t v23 = "incoming";
    }
    else
    {
      uint32_t v23 = "unknown";
    }
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)BOOL v30 = v22;
    *(_WORD *)&v30[4] = 2080;
    *(void *)&v30[6] = v23;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Failed to remove new fileXfer (bufferID=%xh) from %s list... doesn't exist!", buf, 0x12u);
    return 0;
  }
  return result;
}

unint64_t _compareBufferID(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 - (unint64_t)*a2;
}

unint64_t iap2_sessionFileTransfer_findTransferEntryForFeature(uint64_t a1, char a2, unsigned __int8 *a3, uint64_t (*a4)(unsigned __int8 *, uint64_t, uint64_t))
{
  unint64_t result = 0;
  if (a1 && a3 && a4)
  {
    uint64_t v8 = *(uint64_t **)(a1 + 432);
    if (v8)
    {
      if (a2 < 0)
      {
        if (*v8)
        {
          if (gLogObjects && gNumLogObjects >= 24)
          {
            uint64_t v11 = *(NSObject **)(gLogObjects + 184);
          }
          else
          {
            uint64_t v11 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
            iap2_sessionFileTransfer_findTransferEntryForFeature_cold_5();
          }
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v9 = v8[1];
        ++v8;
        if (v9)
        {
          if (gLogObjects && gNumLogObjects >= 24)
          {
            uint64_t v10 = *(NSObject **)(gLogObjects + 184);
          }
          else
          {
            uint64_t v10 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
            iap2_sessionFileTransfer_findTransferEntryForFeature_cold_3();
          }
LABEL_22:
          uint64_t v12 = *v8;
          unsigned int Item = iAP2ListArrayFindItem((unsigned char *)*v8, (uint64_t)a3, a4);
          if (Item != 255) {
            return iAP2ListArrayItemForIndex(v12, Item);
          }
          if (gLogObjects && gNumLogObjects >= 24)
          {
            int v14 = *(NSObject **)(gLogObjects + 184);
          }
          else
          {
            int v14 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
            iap2_sessionFileTransfer_findTransferEntryForFeature_cold_1(a3, v14);
          }
        }
      }
    }
    return 0;
  }
  return result;
}

void OUTLINED_FUNCTION_3_6(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_4_4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

id logObjectForModule_6()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 7;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    BOOL v1 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v1) {
      logObjectForModule_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
    }
    id v10 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  else
  {
    id v10 = *(id *)(gLogObjects + 48);
  }

  return v10;
}

void platform_iapd_bridge_accessory_connected(uint64_t a1, int a2)
{
  if (a2)
  {
    if (gLogObjects) {
      BOOL v3 = gNumLogObjects < 7;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v5 = &_os_log_default;
      id v4 = &_os_log_default;
    }
    else
    {
      uint64_t v5 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      platform_iapd_bridge_accessory_connected_cold_1();
    }
  }
  uint64_t v6 = +[PlatformIAPDBridge sharedPlatformIAPDBridge];
  [v6 iapdAccessoryArrived:a1];
}

void platform_iapd_bridge_accessory_disconnected(uint64_t a1)
{
  id v2 = +[PlatformIAPDBridge sharedPlatformIAPDBridge];
  [v2 iapdAccessoryLeft:a1];
}

uint64_t platform_iapd_bridge_accessory_processIncomingData(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(_DWORD *)(result + 24) == 7)
    {
      if (gLogObjects) {
        BOOL v3 = gNumLogObjects < 7;
      }
      else {
        BOOL v3 = 1;
      }
      if (v3)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v8 = &_os_log_default;
        id v4 = &_os_log_default;
      }
      else
      {
        uint64_t v8 = *(id *)(gLogObjects + 48);
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v9 = *(_DWORD *)(v2 + 24);
        v10[0] = 67109120;
        v10[1] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[#iapd Bridge] Dropping iAP1 bytes over %{coreacc:ACCEndpoint_TransportType_t}d!", (uint8_t *)v10, 8u);
      }

      return 1;
    }
    else
    {
      uint64_t v6 = +[PlatformIAPDBridge sharedPlatformIAPDBridge];
      id v7 = [v6 iapdAccessory:v2 dataArrivedFromAccessory:a2];

      return (uint64_t)v7;
    }
  }
  return result;
}

uint64_t iAP2TimeGetCurTimeMs()
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v1.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v1, 0);
  return (v1.tv_usec / 1000 + 1000 * LODWORD(v1.tv_sec));
}

__darwin_time_t iAP2TimeGetCurTimeMsInt64()
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v1.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v1, 0);
  return 1000 * v1.tv_sec + v1.tv_usec / 1000;
}

uint64_t iAP2TimeGetBuffSize(int a1)
{
  return (iAP2ListArrayGetBuffSize(a1, 8) + 67) & 0xFFFFFFFC;
}

uint64_t iAP2TimeCreate(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!a5) {
    iAP2TimeCreate_cold_1();
  }
  if (!a2) {
    iAP2TimeCreate_cold_2();
  }
  if (a4 == 255) {
    iAP2TimeCreate_cold_3();
  }
  if (!a4) {
    iAP2TimeCreate_cold_4();
  }
  *(void *)(a5 + 16) = a1;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = a2;
  *(void *)(a5 + 40) = a3;
  *(unsigned char *)(a5 + 61) = a4;
  *(_DWORD *)(a5 + 56) = -1;
  *(unsigned char *)(a5 + 60) = 0;
  *(void *)(a5 + 48) = a5 + 64;
  uint64_t v6 = a5 + 64 + iAP2ListArrayGetBuffSize(a4, 8);
  iAP2ListArrayInit(*(void *)(a5 + 48), *(unsigned __int8 *)(a5 + 61), 8u);
  *(void *)a5 = a5;
  *(void *)(a5 + 8) = v6;
  return a5;
}

void iAP2TimeDelete(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 56) = -1;
    _iAP2TimeCancelCallback(a1);
    iAP2ListArrayCleanup(*(unsigned char **)(a1 + 48), 0);
    _iAP2TimeCleanupCallback(a1);
  }
}

uint64_t iAP2TimeGetContext(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t iAP2TimeCallbackAfter(uint64_t a1, char a2, int a3)
{
  if (!a1) {
    return 255;
  }
  unint64_t __src = 0xAAAAAAAAAAAAAAAALL;
  v12.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v6 = *(unsigned __int8 *)(a1 + 60);
  int v7 = (v6 + 1);
  if (v7 == v6 + 1) {
    char v8 = v6 + 1;
  }
  else {
    char v8 = 1;
  }
  *(unsigned char *)(a1 + 60) = v8;
  if (v7 == v6 + 1) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0;
  }
  *(void *)&v12.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v12, 0);
  LODWORD(__src) = v12.tv_usec / 1000 + a3 + 1000 * LODWORD(v12.tv_sec);
  BYTE4(__src) = v9;
  BYTE5(__src) = a2;
  iAP2ListArrayAddItemInOrder(*(unsigned __int8 **)(a1 + 48), &__src, (uint64_t (*)(unsigned __int8 *, void *, uint64_t))_iAP2TimeCompareTimeout);
  _iAP2TimeCheckTimeouts(a1);
  return v9;
}

uint64_t _iAP2TimeCompareTimeout(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

unsigned int *_iAP2TimeCheckTimeouts(uint64_t a1)
{
  unsigned int FirstItemIndex = iAP2ListArrayGetFirstItemIndex(*(void *)(a1 + 48));
  unint64_t result = (unsigned int *)iAP2ListArrayItemForIndex(*(void *)(a1 + 48), FirstItemIndex);
  if (result)
  {
    id v4 = result;
    unsigned int v5 = *(_DWORD *)(a1 + 56);
    if (*result < v5 || v5 == -1)
    {
      if (v5 != -1)
      {
        *(_DWORD *)(a1 + 56) = -1;
        _iAP2TimeCancelCallback(a1);
      }
      memset(v13, 170, 16);
      gettimeofday((timeval *)v13, 0);
      unsigned int v7 = *(_DWORD *)&v13[8] / 1000 + 1000 * *(_DWORD *)v13;
      unsigned int v8 = *v4;
      *(_DWORD *)(a1 + 56) = *v4;
      if (v8 < v7 && (_iAP2LogEnableMask & 1) != 0)
      {
        uint64_t v9 = gLogObjects;
        int v10 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 20)
        {
          uint64_t v11 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          uint64_t v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v13 = 134218240;
            *(void *)&v13[4] = v9;
            *(_WORD *)&v13[12] = 1024;
            *(_DWORD *)&v13[14] = v10;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", v13, 0x12u);
            unsigned int v8 = *v4;
          }
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v13 = 67109632;
          *(_DWORD *)&v13[4] = v8;
          *(_WORD *)&v13[8] = 1024;
          *(_DWORD *)&v13[10] = v7;
          *(_WORD *)&v13[14] = 1024;
          *(_DWORD *)&v13[16] = v8 - v7;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "ERROR: WARNING: timeout(%u) < curTime(%u) !!!, diff = %d, Correcting", v13, 0x14u);
          unsigned int v8 = *v4;
        }
      }
      if (v8 >= v7) {
        unsigned int v12 = v8 - v7;
      }
      else {
        unsigned int v12 = 0;
      }
      return (unsigned int *)_iAP2TimeCallbackAfter(a1, v12, (uint64_t)_iAP2TimeHandleExpired);
    }
  }
  return result;
}

unsigned int *iAP2TimeCancelTimer(unsigned int *result, char a2)
{
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    unint64_t v3 = 0xAAAAAAAAAAAAAAAALL;
    BYTE4(v3) = a2;
    unint64_t result = (unsigned int *)iAP2ListArrayFindItem(*((unsigned char **)result + 6), (uint64_t)&v3, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_iAP2TimeCompareID);
    if (result != 255)
    {
      iAP2ListArrayDeleteItem(*(unsigned char **)(v2 + 48), result, 0);
      return _iAP2TimeCheckTimeouts(v2);
    }
  }
  return result;
}

unint64_t _iAP2TimeCompareID(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 4) - (unint64_t)*(unsigned __int8 *)(a2 + 4);
}

uint64_t _iAP2TimeHandleExpired(uint64_t a1, uint64_t a2)
{
  unsigned int FirstItemIndex = iAP2ListArrayGetFirstItemIndex(*(void *)(a1 + 48));
  unsigned __int8 v5 = FirstItemIndex;
  unint64_t v6 = iAP2ListArrayItemForIndex(*(void *)(a1 + 48), FirstItemIndex);
  for (*(_DWORD *)(a1 + 56) = -1; v6; unint64_t v6 = iAP2ListArrayItemForIndex(*(void *)(a1 + 48), v10))
  {
    if (*(_DWORD *)v6 > a2) {
      break;
    }
    unsigned int v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 4);
    uint64_t v9 = *(unsigned __int8 *)(v6 + 5);
    iAP2ListArrayDeleteItem(*(unsigned char **)(a1 + 48), v5, 0);
    v7(a1, v8, v9, a2);
    unsigned int v10 = iAP2ListArrayGetFirstItemIndex(*(void *)(a1 + 48));
    unsigned __int8 v5 = v10;
  }

  return _iAP2TimeCheckTimeouts(a1);
}

void sub_10003C8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void init_logging_modules(uint64_t a1, char a2, uint64_t a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = __init_logging_modules_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  char v4 = a2;
  block[4] = a3;
  block[5] = a1;
  if (init_logging_modules_onceToken != -1) {
    dispatch_once(&init_logging_modules_onceToken, block);
  }
}

void __init_logging_modules_block_invoke(uint64_t a1)
{
  uint64_t v2 = &off_1001B7000;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    int v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(a1 + 32);
      unsigned int v7 = *(const char **)(v6 + v3);
      if (!v7)
      {
        unsigned int v7 = "<Undefined>";
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v12) = v4;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Subsystem missing for logging module %d!\n(Check LoggingModuleEntry_t table)", buf, 8u);
          uint64_t v6 = *(void *)(a1 + 32);
          unsigned int v7 = "<Undefined>";
        }
      }
      uint64_t v8 = *(const char **)(v6 + v3 + 8);
      if (!v8)
      {
        uint64_t v8 = "<Undefined>";
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __init_logging_modules_block_invoke_cold_1(v15, v4, &v16);
          uint64_t v8 = "<Undefined>";
        }
      }
      os_log_t v9 = os_log_create(v7, v8);
      *(void *)(*(void *)(a1 + 40) + 8 * v4) = v9;
      if (v9)
      {
        ++v5;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          unsigned int v12 = v7;
          __int16 v13 = 2080;
          int v14 = v8;
          _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "Created log object %s: %s", buf, 0x16u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        unsigned int v12 = v7;
        __int16 v13 = 2080;
        int v14 = v8;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Failed to create os_log_t object %s: %s!", buf, 0x16u);
      }
      ++v4;
      unint64_t v10 = *(unsigned __int8 *)(a1 + 48);
      v3 += 16;
    }
    while (v4 < v10);
    uint64_t v2 = &off_1001B7000;
  }
  else
  {
    LODWORD(v10) = 0;
    int v5 = 0;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = *((void *)v2 + 392);
    LODWORD(v12) = v5;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Created %d log object(s)!", buf, 8u);
    LODWORD(v10) = *(unsigned __int8 *)(a1 + 48);
  }
  gLogObjects = *(void *)(a1 + 40);
  gNumLogObjects = v10;
}

dispatch_object_t *audioProductCerts_endpoint_create(uint64_t a1)
{
  if (!a1)
  {
    unsigned int v17 = logObjectForModule_7();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      acc_endpoint_sendOutgoingData_cold_1(v17);
    }
    return 0;
  }
  if (!*(void *)a1)
  {
    uint64_t v18 = logObjectForModule_7();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      audioProductCerts_endpoint_create_cold_2(v18);
    }
    return 0;
  }
  uint64_t v2 = (dispatch_object_t *)malloc_type_calloc(1uLL, 0x78uLL, 0x10E0040CD29F606uLL);
  if (v2)
  {
    if (gLogObjects && gNumLogObjects >= 58)
    {
      uint64_t v3 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      uint64_t v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)BOOL v19 = 67109120;
      *(_DWORD *)&v19[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "audioProductCerts create: transportType %{coreacc:ACCEndpoint_TransportType_t}d", v19, 8u);
    }
    int v5 = dispatch_queue_create("AudioProductCertsQ", 0);
    v2[6] = v5;
    if (v5)
    {
      dispatch_set_context(v5, v2);
      dispatch_set_finalizer_f(v2[6], (dispatch_function_t)_audioProductCerts_endpoint_dispatchQueueFinalizer);
      dispatch_object_t *v2 = (dispatch_object_t)a1;
      _audioProductCerts_endpoint_initSession((uint64_t)v2);
      v11.isa = *(Class *)a1;
      if (*(void *)(*(void *)a1 + 16) && *((_DWORD *)v11.isa + 2) == 2)
      {
        uint64_t v12 = gLogObjects;
        int v13 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 58)
        {
          int v14 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          int v14 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)BOOL v19 = 134218240;
            *(void *)&v19[4] = v12;
            __int16 v20 = 1024;
            int v21 = v13;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", v19, 0x12u);
            v11.isa = *(Class *)a1;
          }
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = *((void *)v11.isa + 2);
          *(_DWORD *)BOOL v19 = 138412290;
          *(void *)&v19[4] = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "audioProductCerts create: macAddress %@", v19, 0xCu);
          v11.isa = *(Class *)a1;
        }
        acc_endpoint_setProperty((pthread_mutex_t *)a1, kCFACCProperties_Endpoint_AACP_MACAddress, *((const __CFNull **)v11.isa + 2));
      }
      acc_platform_packetLogging_logEvent((uint64_t)*v2, "ATTACH", (uint64_t)"AudioProductCerts accessory attached!", v6, v7, v8, v9, v10, *(uint64_t *)v19);
      acc_platform_audioProductCerts_accessoryAttach(*(void *)(a1 + 8), *(void *)(a1 + 16));
    }
  }
  return v2;
}

void *logObjectForModule_7()
{
  if (gLogObjects && gNumLogObjects >= 58) {
    return *(void **)(gLogObjects + 456);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void _audioProductCerts_endpoint_dispatchQueueFinalizer(void *a1)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "audioProductCerts dispatchQueueFinalizer: cleanupSession", buf, 2u);
  }
  _audioProductCerts_endpoint_cleanupSession((uint64_t)a1);
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v3 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    uint64_t v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "audioProductCerts dispatchQueueFinalizer: free pProtocolEndpoint", v4, 2u);
  }
  if (a1) {
    free(a1);
  }
}

uint64_t _audioProductCerts_endpoint_initSession(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 56) = CFAbsoluteTimeGetCurrent();
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(*(void *)a1 + 24);
    uint64_t v4 = *(void *)(a1 + 56);
    v7[0] = 67109376;
    v7[1] = v3;
    __int16 v8 = 2048;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "audioProductCerts initSession: %{coreacc:ACCEndpoint_TransportType_t}d, attachTimestamp %f", (uint8_t *)v7, 0x12u);
  }
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(a1 + 24) = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(a1 + 32) = platform_auth_createCertificateCache(@"com.apple.accessoryd");
  *(_DWORD *)(a1 + 40) = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = Mutable;
  *(_DWORD *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 80) = 5;
  return 1;
}

uint64_t audioProductCerts_endpoint_publish(BOOL *a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_55;
  }
  int v3 = (void *)*a1;
  if (!*a1 || !*v3) {
    goto LABEL_55;
  }
  int Protocol = acc_endpoint_getProtocol((uint64_t)v3);
  BOOL v6 = acc_policies_allowAudioProductCertsOnTransport(*(_DWORD *)(*a1 + 24));
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v7 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    uint64_t v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(*a1 + 24);
    *(_DWORD *)buf = 67109376;
    int v43 = v8;
    __int16 v44 = 1024;
    BOOL v45 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "audioProductCerts publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, allowed %d ", buf, 0xEu);
  }
  if (Protocol == 13)
  {
    BOOL isPublished = acc_endpoint_isPublished(*a1);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1, &kCFTypeArrayCallBacks);
    if (*a1) {
      NSObject v11 = *(const void **)(*a1 + 16);
    }
    else {
      NSObject v11 = 0;
    }
    CFDataRef cf = Mutable;
    CFArrayAppendValue(Mutable, v11);
    uint64_t v12 = acc_accInfo_copyAccessoryInfoDictionary(a2);
    if (v12) {
      MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, (CFDictionaryRef)v12);
    }
    else {
      MutableCFArrayRef Copy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    CFMutableDictionaryRef v14 = MutableCopy;
    if (gLogObjects && gNumLogObjects >= 58)
    {
      uint64_t v15 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      uint64_t v15 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109634;
      int v43 = v6;
      __int16 v44 = 1024;
      BOOL v45 = isPublished;
      __int16 v46 = 2112;
      CFMutableDictionaryRef v47 = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "audioProductCerts publish: transportAllowed %d, wasPublished = %d, accInfoDict = %@ ", buf, 0x18u);
    }
    if (v6)
    {
      if (audioProductCerts_endpoint_publish_onceToken != -1) {
        dispatch_once(&audioProductCerts_endpoint_publish_onceToken, &__block_literal_global_7);
      }
      int v16 = acc_endpoint_copyProperties((pthread_mutex_t *)*a1);
      if (v16)
      {
        unsigned int v17 = v16;
        CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)v16);
        BOOL v19 = CFDictionaryCreateMutable(kCFAllocatorDefault, Count + 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (gLogObjects && gNumLogObjects >= 58)
        {
          __int16 v20 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          __int16 v20 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          audioProductCerts_endpoint_publish_cold_4((uint64_t)v17, v20, v21, v22, v23, v24, v25, v26);
        }
        if (v19)
        {
          CFDictionaryAddValue(v19, CFACCTransportPlugin_PropertiesDidChangeNotification_ConnectionUUID, *(const void **)(*a1 + 8));
          CFDictionaryAddValue(v19, CFACCTransportPlugin_EndpointPropertiesDidChangeNotification_EndpointUUID, *(const void **)(*a1 + 16));
          CFDictionaryAddValue(v19, CFACCTransportPlugin_PropertiesDidChangeNotification_PropertiesNew, v17);
          if (gLogObjects && gNumLogObjects >= 58)
          {
            uint64_t v27 = *(NSObject **)(gLogObjects + 456);
          }
          else
          {
            uint64_t v27 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
            audioProductCerts_endpoint_publish_cold_2((uint64_t)v19, v27, v28, v29, v30, v31, v32, v33);
          }
          CFNotificationCenterRef LocalCenter = CFNotificationCenterGetLocalCenter();
          _audioProductCerts_endpoint_handlePropertiesDidChange((uint64_t)LocalCenter, v35, CFACCTransportPlugin_EndpointPropertiesDidChangeNotification, v36, v19);
          CFRelease(v19);
        }
        CFRelease(v17);
      }
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (cf) {
      CFRelease(cf);
    }
    return 1;
  }
  else
  {
LABEL_55:
    if (gLogObjects && gNumLogObjects >= 58)
    {
      __int16 v38 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      __int16 v38 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v39)
    {
      if (a1 && *a1) {
        int v40 = *(_DWORD *)(*a1 + 24);
      }
      else {
        int v40 = 17;
      }
      *(_DWORD *)buf = 67109120;
      int v43 = v40;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "audioProductCerts publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, Failed to publish!!! ", buf, 8u);
      return 0;
    }
  }
  return result;
}

void __audioProductCerts_endpoint_publish_block_invoke(id a1)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    timeval v1 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    timeval v1 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "audioProductCerts publish: CFNotificationCenterAddObserver", v3, 2u);
  }
  CFNotificationCenterRef LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)_audioProductCerts_endpoint_handlePropertiesDidChange, CFACCTransportPlugin_EndpointPropertiesDidChangeNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void _audioProductCerts_endpoint_handlePropertiesDidChange(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v7 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    uint64_t v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    _audioProductCerts_endpoint_handlePropertiesDidChange_cold_3((uint64_t)a3);
  }
  if (CFEqual(a3, CFACCTransportPlugin_EndpointPropertiesDidChangeNotification))
  {
    if (gLogObjects && gNumLogObjects >= 58)
    {
      int v8 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      int v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v21 = a3;
      __int16 v22 = 2112;
      CFDictionaryRef v23 = a5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Notification received %@, userInfo: %@", buf, 0x16u);
    }
    uint64_t Value = CFDictionaryGetValue(a5, CFACCTransportPlugin_PropertiesDidChangeNotification_ConnectionUUID);
    uint64_t v10 = CFDictionaryGetValue(a5, CFACCTransportPlugin_EndpointPropertiesDidChangeNotification_EndpointUUID);
    if (Value)
    {
      NSObject v11 = v10;
      CFTypeID v12 = CFGetTypeID(Value);
      if (v12 == CFStringGetTypeID())
      {
        if (v11)
        {
          CFTypeID v13 = CFGetTypeID(v11);
          if (v13 == CFStringGetTypeID())
          {
            EndpointWithUUID = acc_manager_getEndpointWithUUID(v11);
            if (EndpointWithUUID)
            {
              if (*((_DWORD *)EndpointWithUUID + 7) == 13)
              {
                uint64_t v15 = EndpointWithUUID[7];
                if (v15)
                {
                  CFDictionaryGetValue(a5, CFACCTransportPlugin_PropertiesDidChangeNotification_PropertiesOld);
                  int v16 = CFDictionaryGetValue(a5, CFACCTransportPlugin_PropertiesDidChangeNotification_PropertiesNew);
                  unsigned int v17 = logObjectForModule_7();
                  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
                  {
                    _audioProductCerts_endpoint_handlePropertiesDidChange_cold_1((uint64_t)v16);
                    if (!v16) {
                      return;
                    }
                  }
                  else if (!v16)
                  {
                    return;
                  }
                  CFRetain(v16);
                  uint64_t v18 = *(NSObject **)(v15 + 48);
                  v19[0] = _NSConcreteStackBlock;
                  v19[1] = 0x40000000;
                  v19[2] = ___audioProductCerts_endpoint_handlePropertiesDidChange_block_invoke;
                  v19[3] = &__block_descriptor_tmp_26;
                  v19[4] = v15;
                  v19[5] = v16;
                  dispatch_async(v18, v19);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t audioProductCerts_endpoint_destroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)result;
    if (*(void *)result)
    {
      if (*(void *)v2 && **(void **)v2)
      {
        uint64_t v3 = gLogObjects;
        int v4 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 58)
        {
          int v5 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          int v5 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v15 = 134218240;
            *(void *)&uint8_t v15[4] = v3;
            __int16 v16 = 1024;
            int v17 = v4;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", v15, 0x12u);
            uint64_t v2 = *(void *)v1;
          }
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = *(_DWORD *)(*(void *)v2 + 24);
          *(_DWORD *)uint64_t v15 = 67109120;
          *(_DWORD *)&uint8_t v15[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "audioProductCerts destroy: transportType %{coreacc:ACCEndpoint_TransportType_t}d", v15, 8u);
          uint64_t v2 = *(void *)v1;
        }
        uint64_t v12 = *(void *)v2;
        CFTypeID v13 = **(uint64_t ***)v2;
        acc_platform_packetLogging_logEvent(v12, "DETACH", (uint64_t)"AudioProductCerts accessory detached!", v6, v7, v8, v9, v10, *(uint64_t *)v15);
        acc_platform_audioProductCerts_accessoryDetach(*v13, *(void *)(v12 + 16));
        uint64_t v2 = *(void *)v1;
      }
      dispatch_sync(*(dispatch_queue_t *)(v2 + 48), &__block_literal_global_8);
      CFMutableDictionaryRef v14 = *(NSObject **)(*(void *)v1 + 48);
      *(void *)(*(void *)v1 + 48) = 0;
      dispatch_release(v14);
      *(void *)uint64_t v1 = 0;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t audioProductCerts_endpoint_processIncomingData(uint64_t result, CFTypeRef cf)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t result = 0;
    if (cf)
    {
      if (*v3)
      {
        CFRetain(cf);
        int v4 = v3[6];
        v5[0] = _NSConcreteStackBlock;
        v5[1] = 0x40000000;
        _DWORD v5[2] = __audioProductCerts_endpoint_processIncomingData_block_invoke;
        v5[3] = &__block_descriptor_tmp_9_0;
        v5[4] = v3;
        v5[5] = cf;
        dispatch_async(v4, v5);
        return 1;
      }
    }
  }
  return result;
}

void __audioProductCerts_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  _audioProductCerts_endpoint_processIncomingData(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t _audioProductCerts_endpoint_processIncomingData(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t result = 0;
    if (a2)
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (*(_DWORD *)(v4 + 28) == 13)
        {
          if (gLogObjects && gNumLogObjects >= 58)
          {
            int v5 = *(NSObject **)(gLogObjects + 456);
          }
          else
          {
            int v5 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
            _audioProductCerts_endpoint_processIncomingData_cold_1(v4, a2, v5);
          }
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t audioProductCerts_endpoint_propertyDidChange(uint64_t *a1, const __CFString *a2, const void *a3)
{
  if (!a1 || (uint64_t v6 = (void *)*a1) == 0 || !*v6)
  {
LABEL_72:
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    goto LABEL_83;
  }
  uint64_t v7 = gLogObjects;
  int v8 = gNumLogObjects;
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v9 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    uint64_t v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v54 = 134218240;
      uint64_t v55 = v7;
      __int16 v56 = 1024;
      *(_DWORD *)__int16 v57 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v54, 0x12u);
      uint64_t v6 = (void *)*a1;
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = v6[2];
    int v11 = *((_DWORD *)a1 + 10);
    int v54 = 138413058;
    uint64_t v55 = v10;
    __int16 v56 = 1024;
    *(_DWORD *)__int16 v57 = v11;
    *(_WORD *)&v57[4] = 2112;
    *(void *)&v57[6] = a2;
    *(_WORD *)&v57[14] = 2112;
    *(void *)&v57[16] = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "PropertyDidchange: ENTER %@, state %d, %@ : %@", (uint8_t *)&v54, 0x26u);
    uint64_t v6 = (void *)*a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (a3 && a2 && v6[2])
  {
    CFTypeID v14 = CFGetTypeID(a2);
    if (v14 == CFStringGetTypeID())
    {
      if (CFEqual(a2, kCFACCProperties_Endpoint_AACP_CertificateSupported)
        || CFEqual(a2, kCFACCProperties_Endpoint_AACP_FirstConnectionAfterPair))
      {
        CFTypeID v15 = CFGetTypeID(a3);
        if (v15 == CFBooleanGetTypeID() || (CFTypeID v16 = CFGetTypeID(a3), v16 == CFNumberGetTypeID()))
        {
          if (gLogObjects && gNumLogObjects >= 58)
          {
            int v17 = *(NSObject **)(gLogObjects + 456);
          }
          else
          {
            int v17 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
            audioProductCerts_endpoint_propertyDidChange_cold_9((uint64_t)a2, a3, v17);
          }
          goto LABEL_41;
        }
      }
      CFTypeID v18 = CFGetTypeID(a3);
      CFTypeID TypeID = CFArrayGetTypeID();
      if (gLogObjects) {
        BOOL v20 = gNumLogObjects <= 57;
      }
      else {
        BOOL v20 = 1;
      }
      int v21 = !v20;
      if (v18 == TypeID)
      {
        if (v21)
        {
          __int16 v22 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          __int16 v22 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
          audioProductCerts_endpoint_propertyDidChange_cold_11();
        }
LABEL_41:
        uint64_t v12 = *a1;
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v24 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          uint64_t v24 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v44 = *(void *)(v12 + 16);
          int v54 = 138412802;
          uint64_t v55 = v44;
          __int16 v56 = 2112;
          *(void *)__int16 v57 = a2;
          *(_WORD *)&v57[8] = 2112;
          *(void *)&v57[10] = a3;
          _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "PropertyDidchange: %@, %@ : %@", (uint8_t *)&v54, 0x20u);
        }
        int v25 = *((_DWORD *)a1 + 10);
        if (!v25)
        {
          if (CFEqual(a2, kCFACCProperties_Endpoint_AACP_CertificateSerial))
          {
            if (_audioProductCerts_endpoint_handleCertSerialList((uint64_t)a1, a2, a3)) {
              goto LABEL_82;
            }
            goto LABEL_125;
          }
          int v25 = *((_DWORD *)a1 + 10);
        }
        if (v25 == 2)
        {
          if (CFEqual(a2, kCFACCProperties_Endpoint_AACP_CertificateList))
          {
            if (_audioProductCerts_endpoint_handleCertList((uint64_t)a1, a2, a3)
              && (_audioProductCerts_endpoint_handleAuthCertList((uint64_t)a1, a2, a3) & 1) != 0)
            {
              goto LABEL_82;
            }
            goto LABEL_125;
          }
          int v25 = *((_DWORD *)a1 + 10);
        }
        if (v25 == 4)
        {
          if (CFEqual(a2, kCFACCProperties_Endpoint_AudioProduct_AuthResponse))
          {
            if (_audioProductCerts_endpoint_handleAuthResponseList((uint64_t)a1, a2, a3)) {
              goto LABEL_82;
            }
            goto LABEL_125;
          }
          int v25 = *((_DWORD *)a1 + 10);
        }
        if (v25 != 5 || CFStringCompare(a2, kCFACCProperties_Endpoint_AACP_CertificateList, 0))
        {
          if (gLogObjects && gNumLogObjects >= 58)
          {
            uint64_t v26 = *(NSObject **)(gLogObjects + 456);
          }
          else
          {
            uint64_t v26 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v27 = *(void *)(*a1 + 16);
            int v28 = *((_DWORD *)a1 + 10);
            int v54 = 138412802;
            uint64_t v55 = v27;
            __int16 v56 = 2112;
            *(void *)__int16 v57 = a2;
            *(_WORD *)&v57[8] = 1024;
            *(_DWORD *)&v57[10] = v28;
            _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "PropertyDidchange: %@, Unknown key %@, state %d", (uint8_t *)&v54, 0x1Cu);
          }
          goto LABEL_82;
        }
        if (_audioProductCerts_endpoint_handleMissingCertList(a1, a2, a3)
          && _audioProductCerts_endpoint_handleAuthResponseWithMissingCert((CFDictionaryRef *)a1, a2, a3))
        {
LABEL_82:
          uint64_t v13 = 1;
          goto LABEL_83;
        }
LABEL_125:
        uint64_t v13 = 0;
        goto LABEL_83;
      }
      if (v21)
      {
        CFDictionaryRef v23 = *(NSObject **)(gLogObjects + 456);
      }
      else
      {
        CFDictionaryRef v23 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
        audioProductCerts_endpoint_propertyDidChange_cold_14(v23, v29, v30, v31, v32, v33, v34, v35);
      }
    }
    else
    {
      __int16 v46 = logObjectForModule_7();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
        audioProductCerts_endpoint_propertyDidChange_cold_16(v46, v47, v48, v49, v50, v51, v52, v53);
      }
    }
    uint64_t v36 = logObjectForModule_7();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
      audioProductCerts_endpoint_propertyDidChange_cold_13(v36);
    }
    goto LABEL_72;
  }
LABEL_83:
  if (gLogObjects && gNumLogObjects >= 58)
  {
    int v37 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    int v37 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    if (v12)
    {
      uint64_t v42 = *(void *)(v12 + 16);
      if (a1) {
        goto LABEL_112;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if (a1)
      {
LABEL_112:
        int v43 = *((_DWORD *)a1 + 10);
LABEL_119:
        int v54 = 138412802;
        uint64_t v55 = v42;
        __int16 v56 = 1024;
        *(_DWORD *)__int16 v57 = v43;
        *(_WORD *)&v57[4] = 1024;
        *(_DWORD *)&v57[6] = v13;
        _os_log_debug_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "PropertyDidchange: %@, state %d, success %d", (uint8_t *)&v54, 0x18u);
        goto LABEL_89;
      }
    }
    int v43 = -1;
    goto LABEL_119;
  }
LABEL_89:
  if (gLogObjects && gNumLogObjects >= 58)
  {
    __int16 v38 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    __int16 v38 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
    audioProductCerts_endpoint_propertyDidChange_cold_4(v12);
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    BOOL v39 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    BOOL v39 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
  {
    audioProductCerts_endpoint_propertyDidChange_cold_2(v12);
    if (v13) {
      return v13;
    }
  }
  else if (v13)
  {
    return v13;
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    int v40 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    int v40 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      uint64_t v45 = *a1;
      if (*a1) {
        uint64_t v45 = *(void *)(v45 + 16);
      }
    }
    else
    {
      uint64_t v45 = 0;
    }
    int v54 = 138412802;
    uint64_t v55 = v45;
    __int16 v56 = 2112;
    *(void *)__int16 v57 = a2;
    *(_WORD *)&v57[8] = 2112;
    *(void *)&v57[10] = a3;
    _os_log_debug_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "PropertyDidchange: %@, did not handle key %@, value %@", (uint8_t *)&v54, 0x20u);
  }
  return v13;
}

uint64_t _audioProductCerts_endpoint_handleCertSerialList(uint64_t result, const void *a2, const void *a3)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = (CFArrayRef *)result;
  if (!*(void *)result || !**(void **)result) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    CFStringRef v7 = (const __CFString *)*((void *)*v3 + 2);
    int v8 = *((_DWORD *)v3 + 10);
    int v31 = 136316162;
    uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
    __int16 v33 = 2112;
    CFStringRef v34 = v7;
    __int16 v35 = 1024;
    *(_DWORD *)uint64_t v36 = v8;
    *(_WORD *)&v36[4] = 2112;
    *(void *)&v36[6] = a2;
    *(_WORD *)&v36[14] = 2112;
    *(void *)&v36[16] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s: ENTER %@, state %d, %@ : %@", (uint8_t *)&v31, 0x30u);
  }
  uint64_t result = 0;
  if (a2 && a3)
  {
    CFTypeID v9 = CFGetTypeID(a2);
    if (v9 == CFStringGetTypeID())
    {
      CFTypeID v10 = CFGetTypeID(a3);
      if (v10 == CFArrayGetTypeID())
      {
        CFArrayRef v11 = *v3;
        CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *((CFStringRef *)*v3 + 2));
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v13 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          uint64_t v13 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
        if (v14)
        {
          CFStringRef v30 = (const __CFString *)*((void *)v11 + 2);
          int v31 = 136315906;
          uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
          __int16 v33 = 2112;
          CFStringRef v34 = v30;
          __int16 v35 = 2112;
          *(void *)uint64_t v36 = a2;
          *(_WORD *)&v36[8] = 2112;
          *(void *)&unsigned char v36[10] = a3;
          _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s: %@, %@ : %@", (uint8_t *)&v31, 0x2Au);
        }
        PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription(v14, 1, (uint64_t)a2, (const __CFArray *)a3);
        acc_platform_packetLogging_logParsedData((uint64_t)*v3, (uint64_t)a2, @"AudioProductCerts", (uint64_t)PropertyDescription, 1);
        if (PropertyDescription) {
          CFRelease(PropertyDescription);
        }
        if (gLogObjects && gNumLogObjects >= 58)
        {
          CFTypeID v16 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          CFTypeID v16 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v17 = (const __CFString *)*((void *)v11 + 2);
          int v18 = *((_DWORD *)v3 + 10);
          int v31 = 136316162;
          uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
          __int16 v33 = 2112;
          CFStringRef v34 = v17;
          __int16 v35 = 2112;
          *(void *)uint64_t v36 = a2;
          *(_WORD *)&v36[8] = 1024;
          *(_DWORD *)&unsigned char v36[10] = v18;
          *(_WORD *)&v36[14] = 1024;
          *(_DWORD *)&v36[16] = 1;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s: %@, %@, state %d -> %d", (uint8_t *)&v31, 0x2Cu);
        }
        *((_DWORD *)v3 + 10) = 1;
        v37.length = CFArrayGetCount((CFArrayRef)a3);
        v37.location = 0;
        CFArrayApplyFunction((CFArrayRef)a3, v37, (CFArrayApplierFunction)_CFArrayApplierFunction_handleSerialList, v3);
        if (CFArrayGetCount(v3[2]))
        {
          if (gLogObjects && gNumLogObjects >= 58)
          {
            BOOL v19 = *(NSObject **)(gLogObjects + 456);
          }
          else
          {
            BOOL v19 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            CFArrayRef v22 = v3[2];
            int v31 = 136315650;
            uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
            __int16 v33 = 2112;
            CFStringRef v34 = Copy;
            __int16 v35 = 2112;
            *(void *)uint64_t v36 = v22;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%s: %@, setProperty kCFACCProperties_Endpoint_AudioProduct_CertificateRequired: %@", (uint8_t *)&v31, 0x20u);
          }
          CFArrayRef v23 = CFArrayCreateCopy(kCFAllocatorDefault, v3[2]);
          audioProductCerts_endpoint_setProperty((uint64_t *)v3, kCFACCProperties_Endpoint_AACP_CertificateRequired, v23);
          if (v23) {
            CFRelease(v23);
          }
          if (gLogObjects && gNumLogObjects >= 58)
          {
            uint64_t v24 = *(NSObject **)(gLogObjects + 456);
          }
          else
          {
            uint64_t v24 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            int v25 = *((_DWORD *)v3 + 10);
            int v31 = 136316162;
            uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
            __int16 v33 = 2112;
            CFStringRef v34 = Copy;
            __int16 v35 = 2112;
            *(void *)uint64_t v36 = a2;
            *(_WORD *)&v36[8] = 1024;
            *(_DWORD *)&unsigned char v36[10] = v25;
            *(_WORD *)&v36[14] = 1024;
            *(_DWORD *)&v36[16] = 2;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%s: %@, %@, state %d -> %d", (uint8_t *)&v31, 0x2Cu);
          }
          *((_DWORD *)v3 + 10) = 2;
        }
        else
        {
          CFArrayRef v20 = v3[3];
          if (v20 && CFArrayGetCount(v20))
          {
            if (gLogObjects && gNumLogObjects >= 58)
            {
              int v21 = *(NSObject **)(gLogObjects + 456);
            }
            else
            {
              int v21 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              CFArrayRef v26 = v3[3];
              int v31 = 136315650;
              uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
              __int16 v33 = 2112;
              CFStringRef v34 = Copy;
              __int16 v35 = 2112;
              *(void *)uint64_t v36 = v26;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%s: %@, setProperty kCFACCProperties_Endpoint_AudioProduct_CertificateList: %@", (uint8_t *)&v31, 0x20u);
            }
            if (gLogObjects && gNumLogObjects >= 58)
            {
              uint64_t v27 = *(NSObject **)(gLogObjects + 456);
            }
            else
            {
              uint64_t v27 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              int v28 = *((_DWORD *)v3 + 10);
              int v31 = 136316162;
              uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
              __int16 v33 = 2112;
              CFStringRef v34 = Copy;
              __int16 v35 = 2112;
              *(void *)uint64_t v36 = a2;
              *(_WORD *)&v36[8] = 1024;
              *(_DWORD *)&unsigned char v36[10] = v28;
              *(_WORD *)&v36[14] = 1024;
              *(_DWORD *)&v36[16] = 2;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%s: %@, %@, state %d -> %d", (uint8_t *)&v31, 0x2Cu);
            }
            *((_DWORD *)v3 + 10) = 2;
            CFArrayRef v29 = CFArrayCreateCopy(kCFAllocatorDefault, v3[3]);
            audioProductCerts_endpoint_setProperty((uint64_t *)v3, kCFACCProperties_Endpoint_AACP_CertificateList, v29);
            if (v29) {
              CFRelease(v29);
            }
          }
        }
        if (Copy) {
          CFRelease(Copy);
        }
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t _audioProductCerts_endpoint_handleCertList(uint64_t result, const void *a2, const void *a3)
{
  if (result)
  {
    uint64_t v3 = (CFArrayRef *)result;
    if (!*(void *)result || !**(void **)result) {
      return 0;
    }
    if (gLogObjects && gNumLogObjects >= 58)
    {
      uint64_t v6 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      uint64_t v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *((void *)*v3 + 2);
      int v8 = *((_DWORD *)v3 + 10);
      int v44 = 136316162;
      uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
      __int16 v46 = 2112;
      uint64_t v47 = v7;
      __int16 v48 = 1024;
      *(_DWORD *)uint64_t v49 = v8;
      *(_WORD *)&v49[4] = 2112;
      *(void *)&v49[6] = a2;
      *(_WORD *)&v49[14] = 2112;
      *(void *)&v49[16] = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s: ENTER %@, state %d, %@ : %@", (uint8_t *)&v44, 0x30u);
    }
    uint64_t result = 0;
    if (a2 && a3)
    {
      CFTypeID v9 = CFGetTypeID(a2);
      if (v9 == CFStringGetTypeID())
      {
        CFTypeID v10 = CFGetTypeID(a3);
        if (v10 == CFArrayGetTypeID())
        {
          CFArrayRef v11 = (uint64_t *)*v3;
          if (gLogObjects && gNumLogObjects >= 58)
          {
            uint64_t v12 = *(NSObject **)(gLogObjects + 456);
          }
          else
          {
            uint64_t v12 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
          if (v13)
          {
            uint64_t v35 = v11[2];
            int v44 = 136315906;
            uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
            __int16 v46 = 2112;
            uint64_t v47 = v35;
            __int16 v48 = 2112;
            *(void *)uint64_t v49 = a2;
            *(_WORD *)&v49[8] = 2112;
            *(void *)&v49[10] = a3;
            _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s: %@, %@ : %@", (uint8_t *)&v44, 0x2Au);
          }
          PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription(v13, 1, (uint64_t)a2, (const __CFArray *)a3);
          acc_platform_packetLogging_logParsedData((uint64_t)*v3, (uint64_t)a2, @"AudioProductCerts", (uint64_t)PropertyDescription, 1);
          if (PropertyDescription) {
            CFRelease(PropertyDescription);
          }
          if (gLogObjects && gNumLogObjects >= 58)
          {
            CFTypeID v15 = *(NSObject **)(gLogObjects + 456);
          }
          else
          {
            CFTypeID v15 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v16 = v11[2];
            int v17 = *((_DWORD *)v3 + 10);
            int v44 = 136316162;
            uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
            __int16 v46 = 2112;
            uint64_t v47 = v16;
            __int16 v48 = 2112;
            *(void *)uint64_t v49 = a2;
            *(_WORD *)&v49[8] = 1024;
            *(_DWORD *)&v49[10] = v17;
            *(_WORD *)&v49[14] = 1024;
            *(_DWORD *)&v49[16] = 3;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%s: %@, %@, state %d -> %d", (uint8_t *)&v44, 0x2Cu);
          }
          *((_DWORD *)v3 + 10) = 3;
          v50.length = CFArrayGetCount((CFArrayRef)a3);
          v50.location = 0;
          CFArrayApplyFunction((CFArrayRef)a3, v50, (CFArrayApplierFunction)_CFArrayApplierFunction_handleCertList, v3);
          CFIndex Count = CFArrayGetCount(v3[3]);
          if (gLogObjects) {
            BOOL v19 = gNumLogObjects <= 57;
          }
          else {
            BOOL v19 = 1;
          }
          int v20 = !v19;
          if (Count)
          {
            if (v20)
            {
              int v21 = *(NSObject **)(gLogObjects + 456);
            }
            else
            {
              int v21 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v23 = v11[2];
              CFArrayRef v24 = v3[3];
              int v44 = 136315650;
              uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
              __int16 v46 = 2112;
              uint64_t v47 = v23;
              __int16 v48 = 2112;
              *(void *)uint64_t v49 = v24;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%s: %@, got kCFACCProperties_Endpoint_AudioProduct_CertificateList: %@", (uint8_t *)&v44, 0x20u);
            }
            unsigned __int8 v25 = acc_userDefaults_BOOLForKey(@"DisableAMSHookUp");
            if (gLogObjects) {
              BOOL v26 = gNumLogObjects <= 57;
            }
            else {
              BOOL v26 = 1;
            }
            int v27 = !v26;
            if ((v25 & 1) == 0)
            {
              if (v27)
              {
                int v28 = *(NSObject **)(gLogObjects + 456);
              }
              else
              {
                int v28 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                uint64_t v32 = v11[2];
                int v44 = 136315650;
                uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
                __int16 v46 = 2112;
                uint64_t v47 = v32;
                __int16 v48 = 2112;
                *(void *)uint64_t v49 = a2;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%s: %@, %@, get accInfo from endpoint", (uint8_t *)&v44, 0x20u);
              }
              CFStringRef AccessoryInfo = (const __CFString *)acc_endpoint_getAccessoryInfo((uint64_t)v11);
              if (!AccessoryInfo)
              {
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  CFStringRef v34 = *(NSObject **)(gLogObjects + 456);
                }
                else
                {
                  CFStringRef v34 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
                {
                  uint64_t v36 = v11[2];
                  int v44 = 136315650;
                  uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
                  __int16 v46 = 2112;
                  uint64_t v47 = v36;
                  __int16 v48 = 2112;
                  *(void *)uint64_t v49 = a2;
                  _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%s: %@, %@, get accInfo from connection", (uint8_t *)&v44, 0x20u);
                }
                CFStringRef AccessoryInfo = (const __CFString *)acc_connection_getAccessoryInfo(*v11);
              }
              CFStringRef v37 = acc_accInfo_copyAccessoryInfoDescription(AccessoryInfo);
              if (gLogObjects && gNumLogObjects >= 58)
              {
                __int16 v38 = *(NSObject **)(gLogObjects + 456);
              }
              else
              {
                __int16 v38 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                uint64_t v39 = v11[2];
                int v44 = 136315906;
                uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
                __int16 v46 = 2112;
                uint64_t v47 = v39;
                __int16 v48 = 2112;
                *(void *)uint64_t v49 = a2;
                *(_WORD *)&v49[8] = 2112;
                *(void *)&v49[10] = v37;
                _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "%s: %@, %@, accInfo %@", (uint8_t *)&v44, 0x2Au);
              }
              if (v37) {
                CFRelease(v37);
              }
              if (AccessoryInfo) {
                uint64_t data = (uint64_t)AccessoryInfo->data;
              }
              else {
                uint64_t data = 0;
              }
              acc_platform_audioProductCerts_processAudioProductCerts(v11[1], v11[2], data, (uint64_t)v3[3], *((unsigned __int8 *)v3 + 9));
              if (gLogObjects && gNumLogObjects >= 58)
              {
                int v41 = *(NSObject **)(gLogObjects + 456);
              }
              else
              {
                int v41 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
              {
                uint64_t v42 = v11[2];
                int v43 = *((_DWORD *)v3 + 10);
                int v44 = 136316162;
                uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
                __int16 v46 = 2112;
                uint64_t v47 = v42;
                __int16 v48 = 2112;
                *(void *)uint64_t v49 = a2;
                *(_WORD *)&v49[8] = 1024;
                *(_DWORD *)&v49[10] = v43;
                *(_WORD *)&v49[14] = 1024;
                *(_DWORD *)&v49[16] = 6;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "%s: %@, %@, state %d -> %d", (uint8_t *)&v44, 0x2Cu);
              }
              *((_DWORD *)v3 + 10) = 6;
              return 1;
            }
            if (v27)
            {
              CFArrayRef v22 = *(NSObject **)(gLogObjects + 456);
            }
            else
            {
              CFArrayRef v22 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
              return 1;
            }
            uint64_t v31 = *((void *)*v3 + 2);
            int v44 = 136315394;
            uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
            __int16 v46 = 2112;
            uint64_t v47 = v31;
            CFStringRef v30 = "%s: %@, skip notifying of audioProductCert";
          }
          else
          {
            if (v20)
            {
              CFArrayRef v22 = *(NSObject **)(gLogObjects + 456);
            }
            else
            {
              CFArrayRef v22 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
              return 1;
            }
            uint64_t v29 = *((void *)*v3 + 2);
            int v44 = 136315394;
            uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
            __int16 v46 = 2112;
            uint64_t v47 = v29;
            CFStringRef v30 = "%s: %@, No Valid Certs! skip notifying of audioProductCert";
          }
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v30, (uint8_t *)&v44, 0x16u);
          return 1;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t _audioProductCerts_endpoint_handleAuthCertList(uint64_t result, const void *a2, const void *a3)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = (uint64_t *)result;
  if (!*(void *)result || !**(void **)result) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(*v3 + 16);
    int v8 = *((_DWORD *)v3 + 10);
    int v21 = 136316162;
    CFArrayRef v22 = "_audioProductCerts_endpoint_handleAuthCertList";
    __int16 v23 = 2112;
    uint64_t v24 = v7;
    __int16 v25 = 1024;
    *(_DWORD *)BOOL v26 = v8;
    *(_WORD *)&v26[4] = 2112;
    *(void *)&v26[6] = a2;
    *(_WORD *)&v26[14] = 2112;
    *(void *)&v26[16] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s: ENTER %@, state %d, %@ : %@", (uint8_t *)&v21, 0x30u);
  }
  uint64_t result = 0;
  if (a2 && a3)
  {
    CFTypeID v9 = CFGetTypeID(a2);
    if (v9 == CFStringGetTypeID())
    {
      CFTypeID v10 = CFGetTypeID(a3);
      if (v10 == CFArrayGetTypeID())
      {
        uint64_t v11 = *v3;
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v12 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          uint64_t v12 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = *(void *)(v11 + 16);
          int v21 = 136315906;
          CFArrayRef v22 = "_audioProductCerts_endpoint_handleAuthCertList";
          __int16 v23 = 2112;
          uint64_t v24 = v16;
          __int16 v25 = 2112;
          *(void *)BOOL v26 = a2;
          *(_WORD *)&void v26[8] = 2112;
          *(void *)&unsigned char v26[10] = a3;
          _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s: %@, %@ : %@", (uint8_t *)&v21, 0x2Au);
        }
        if (acc_userDefaults_BOOLForKey(@"DisableAACPAuth"))
        {
          int v17 = logObjectForModule_7();
          uint64_t result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          uint64_t v18 = *(void *)(v11 + 16);
          int v21 = 136315906;
          CFArrayRef v22 = "_audioProductCerts_endpoint_handleAuthCertList";
          __int16 v23 = 2112;
          uint64_t v24 = v18;
          __int16 v25 = 2112;
          *(void *)BOOL v26 = a2;
          *(_WORD *)&void v26[8] = 2112;
          *(void *)&unsigned char v26[10] = a3;
          BOOL v19 = "%s: %@, Auth not supported! %@ : %@";
        }
        else
        {
          if (_audioProductCerts_endpoint_generateAuthChallenge((uint64_t)v3, 1))
          {
            if (v3[12] && v3[13])
            {
              CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1, &kCFTypeArrayCallBacks);
              if (Mutable)
              {
                CFArrayRef v14 = Mutable;
                CFArrayAppendValue(Mutable, (const void *)v3[12]);
                *((_DWORD *)v3 + 10) = 4;
                audioProductCerts_endpoint_setProperty(v3, kCFACCProperties_Endpoint_AudioProduct_AuthChallenge, v14);
              }
              else
              {
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  CFTypeID v15 = *(NSObject **)(gLogObjects + 456);
                }
                else
                {
                  CFTypeID v15 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
                  _audioProductCerts_endpoint_handleAuthCertList_cold_1();
                }
              }
            }
            return 1;
          }
          int v17 = logObjectForModule_7();
          uint64_t result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          uint64_t v20 = *(void *)(v11 + 16);
          int v21 = 136315906;
          CFArrayRef v22 = "_audioProductCerts_endpoint_handleAuthCertList";
          __int16 v23 = 2112;
          uint64_t v24 = v20;
          __int16 v25 = 2112;
          *(void *)BOOL v26 = a2;
          *(_WORD *)&void v26[8] = 2112;
          *(void *)&unsigned char v26[10] = a3;
          BOOL v19 = "%s: %@, Unable to generate auth challenge! %@ : %@";
        }
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v21, 0x2Au);
      }
    }
    return 0;
  }
  return result;
}

uint64_t _audioProductCerts_endpoint_handleAuthResponseList(uint64_t result, const void *a2, const void *a3)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  if (!*(void *)result || !**(void **)result) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(*(void *)v3 + 16);
    int v8 = *(_DWORD *)(v3 + 40);
    int v37 = 136316162;
    __int16 v38 = "_audioProductCerts_endpoint_handleAuthResponseList";
    __int16 v39 = 2112;
    uint64_t v40 = v7;
    __int16 v41 = 1024;
    *(_DWORD *)uint64_t v42 = v8;
    *(_WORD *)&v42[4] = 2112;
    *(void *)&v42[6] = a2;
    *(_WORD *)&v42[14] = 2112;
    *(void *)&v42[16] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s: ENTER %@, state %d, %@ : %@", (uint8_t *)&v37, 0x30u);
  }
  uint64_t result = 0;
  if (!a2 || !a3) {
    return result;
  }
  CFTypeID v9 = CFGetTypeID(a2);
  if (v9 != CFStringGetTypeID()) {
    return 0;
  }
  CFTypeID v10 = CFGetTypeID(a3);
  if (v10 != CFArrayGetTypeID()) {
    return 0;
  }
  uint64_t v11 = *(void *)v3;
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v12 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    uint64_t v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = *(void *)(v11 + 16);
    int v37 = 136315906;
    __int16 v38 = "_audioProductCerts_endpoint_handleAuthResponseList";
    __int16 v39 = 2112;
    uint64_t v40 = v24;
    __int16 v41 = 2112;
    *(void *)uint64_t v42 = a2;
    *(_WORD *)&v42[8] = 2112;
    *(void *)&v42[10] = a3;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s: %@, %@ : %@", (uint8_t *)&v37, 0x2Au);
  }
  if (CFArrayGetCount((CFArrayRef)a3) < 1) {
    return 0;
  }
  if (!*(void *)(v3 + 96) || !*(void *)(v3 + 104))
  {
    __int16 v25 = logObjectForModule_7();
    uint64_t result = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    uint64_t v26 = *(void *)(v11 + 16);
    int v37 = 136315906;
    __int16 v38 = "_audioProductCerts_endpoint_handleAuthResponseList";
    __int16 v39 = 2112;
    uint64_t v40 = v26;
    __int16 v41 = 2112;
    *(void *)uint64_t v42 = a2;
    *(_WORD *)&v42[8] = 2112;
    *(void *)&v42[10] = a3;
    int v27 = "%s: %@, Challenge was not initiated! %@ : %@";
    goto LABEL_52;
  }
  id v13 = acc_userDefaults_BOOLForKey(@"DisableAACPAuth");
  if (v13)
  {
    __int16 v25 = logObjectForModule_7();
    uint64_t result = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    uint64_t v28 = *(void *)(v11 + 16);
    int v37 = 136315906;
    __int16 v38 = "_audioProductCerts_endpoint_handleAuthResponseList";
    __int16 v39 = 2112;
    uint64_t v40 = v28;
    __int16 v41 = 2112;
    *(void *)uint64_t v42 = a2;
    *(_WORD *)&v42[8] = 2112;
    *(void *)&v42[10] = a3;
    int v27 = "%s: %@, Auth not supported! %@ : %@";
LABEL_52:
    _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&v37, 0x2Au);
    return 0;
  }
  PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription((uint64_t)v13, 1, (uint64_t)a2, (const __CFArray *)a3);
  acc_platform_packetLogging_logParsedData(*(void *)v3, (uint64_t)a2, @"AudioProductCerts", (uint64_t)PropertyDescription, 1);
  if (PropertyDescription) {
    CFRelease(PropertyDescription);
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    CFTypeID v15 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    CFTypeID v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *(void *)(v11 + 16);
    int v17 = *(_DWORD *)(v3 + 40);
    int v37 = 136316162;
    __int16 v38 = "_audioProductCerts_endpoint_handleAuthResponseList";
    __int16 v39 = 2112;
    uint64_t v40 = v16;
    __int16 v41 = 2112;
    *(void *)uint64_t v42 = a2;
    *(_WORD *)&v42[8] = 1024;
    *(_DWORD *)&v42[10] = v17;
    *(_WORD *)&v42[14] = 1024;
    *(_DWORD *)&v42[16] = 6;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s: %@, %@, state %d -> %d", (uint8_t *)&v37, 0x2Cu);
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a3, 0);
  if (acc_userDefaults_BOOLForKey(@"DisableAACPAuth")) {
    goto LABEL_46;
  }
  BOOL v19 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Type;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 96), kCFACCProperties_Endpoint_AACP_CertificateInfo_Type);
  CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v19);
  if (CFNumberCompare(Value, v21, 0) && *(_DWORD *)(v3 + 80) == 5) {
    return _audioProductCerts_endpoint_handlePrimaryBudMismatch(v3, ValueAtIndex);
  }
  if (_audioProductCerts_endpoint_validateChallenge((uint64_t *)v3, ValueAtIndex))
  {
    if ((acc_userDefaults_BOOLForKey(@"KeepAACPAuthData") & 1) == 0)
    {
      CFArrayRef v22 = *(const void **)(v3 + 96);
      if (v22)
      {
        CFRelease(v22);
        *(void *)(v3 + 96) = 0;
      }
      __int16 v23 = *(const void **)(v3 + 104);
      if (v23)
      {
        CFRelease(v23);
        *(void *)(v3 + 104) = 0;
      }
      audioProductCerts_endpoint_removeProperty(v3, kCFACCProperties_Endpoint_AudioProduct_AuthChallenge);
      audioProductCerts_endpoint_removeProperty(v3, kCFACCProperties_Endpoint_AudioProduct_AuthResponse);
    }
LABEL_46:
    *(_DWORD *)(v3 + 40) = 6;
    return 1;
  }
  uint64_t v29 = logObjectForModule_7();
  uint64_t result = os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _audioProductCerts_endpoint_handleAuthResponseList_cold_1(v29, v30, v31, v32, v33, v34, v35, v36);
    return 0;
  }
  return result;
}

BOOL _audioProductCerts_endpoint_handleMissingCertList(uint64_t *a1, CFTypeRef cf, const void *a3)
{
  if (!a1)
  {
    uint64_t v49 = logObjectForModule_7();
    BOOL result = os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _audioProductCerts_endpoint_handleMissingCertList_cold_1(v49, v50, v51, v52, v53, v54, v55, v56);
    return 0;
  }
  if (!*a1)
  {
    __int16 v57 = logObjectForModule_7();
    BOOL result = os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _audioProductCerts_endpoint_handleMissingCertList_cold_2(v57, v58, v59, v60, v61, v62, v63, v64);
    return 0;
  }
  if (!*(void *)*a1)
  {
    __int16 v65 = logObjectForModule_7();
    BOOL result = os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _audioProductCerts_endpoint_handleMissingCertList_cold_3(v65, v66, v67, v68, v69, v70, v71, v72);
    return 0;
  }
  if (!cf)
  {
    __int16 v73 = logObjectForModule_7();
    BOOL result = os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _audioProductCerts_endpoint_handleMissingCertList_cold_4(v73, v74, v75, v76, v77, v78, v79, v80);
    return 0;
  }
  if (!a3)
  {
    __int16 v81 = logObjectForModule_7();
    BOOL result = os_log_type_enabled(v81, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _audioProductCerts_endpoint_handleMissingCertList_cold_5(v81, v82, v83, v84, v85, v86, v87, v88);
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 != CFStringGetTypeID())
  {
    double v89 = logObjectForModule_7();
    BOOL result = os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _audioProductCerts_endpoint_handleMissingCertList_cold_16(v89, v90, v91, v92, v93, v94, v95, v96);
    return 0;
  }
  CFTypeID v7 = CFGetTypeID(a3);
  if (v7 == CFArrayGetTypeID())
  {
    if (gLogObjects && gNumLogObjects >= 58)
    {
      int v8 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      int v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(*a1 + 16);
      int v10 = *((_DWORD *)a1 + 10);
      *(_DWORD *)buf = 136316162;
      v106 = "_audioProductCerts_endpoint_handleMissingCertList";
      __int16 v107 = 2112;
      uint64_t v108 = v9;
      __int16 v109 = 1024;
      *(_DWORD *)v110 = v10;
      *(_WORD *)&v110[4] = 2112;
      *(void *)&v110[6] = cf;
      *(_WORD *)&v110[14] = 2112;
      *(void *)&v110[16] = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s: ENTER %@, state %d, %@ : %@", buf, 0x30u);
    }
    uint64_t v11 = (uint64_t *)*a1;
    if (gLogObjects && gNumLogObjects >= 58)
    {
      uint64_t v12 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      uint64_t v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
    if (v13)
    {
      uint64_t v39 = v11[2];
      *(_DWORD *)buf = 136315906;
      v106 = "_audioProductCerts_endpoint_handleMissingCertList";
      __int16 v107 = 2112;
      uint64_t v108 = v39;
      __int16 v109 = 2112;
      *(void *)v110 = cf;
      *(_WORD *)&v110[8] = 2112;
      *(void *)&v110[10] = a3;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s: %@, %@ : %@", buf, 0x2Au);
    }
    PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription(v13, 1, (uint64_t)cf, (const __CFArray *)a3);
    acc_platform_packetLogging_logParsedData(*a1, (uint64_t)cf, @"AudioProductCerts", (uint64_t)PropertyDescription, 1);
    if (PropertyDescription) {
      CFRelease(PropertyDescription);
    }
    if (gLogObjects && gNumLogObjects >= 58)
    {
      CFTypeID v15 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      CFTypeID v15 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = v11[2];
      int v17 = *((_DWORD *)a1 + 10);
      *(_DWORD *)buf = 136316162;
      v106 = "_audioProductCerts_endpoint_handleMissingCertList";
      __int16 v107 = 2112;
      uint64_t v108 = v16;
      __int16 v109 = 2112;
      *(void *)v110 = cf;
      *(_WORD *)&v110[8] = 1024;
      *(_DWORD *)&v110[10] = v17;
      *(_WORD *)&v110[14] = 1024;
      *(_DWORD *)&v110[16] = 3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%s: %@, %@, state %d -> %d", buf, 0x2Cu);
    }
    *((_DWORD *)a1 + 10) = 3;
    CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 10);
    CFIndex Count = CFArrayGetCount((CFArrayRef)a3);
    if (Count >= 1)
    {
      CFIndex v20 = Count;
      CFIndex v21 = 0;
      CFArrayRef v22 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Type;
      __int16 v23 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Data;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a3, v21);
        if (!ValueAtIndex) {
          break;
        }
        CFDictionaryRef v25 = ValueAtIndex;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v22);
        if (!Value) {
          break;
        }
        if (CFNumberCompare(v18, Value, 0) == kCFCompareEqualTo)
        {
          CFDataRef v27 = (const __CFData *)CFDictionaryGetValue(v25, v23);
          if (CFDataGetLength(v27) <= 0) {
            break;
          }
        }
        if (v20 == ++v21) {
          goto LABEL_38;
        }
      }
      *((_DWORD *)a1 + 10) = 5;
      if (v18) {
        CFRelease(v18);
      }
      return 0;
    }
LABEL_38:
    if (v18) {
      CFRelease(v18);
    }
    v111.length = CFArrayGetCount((CFArrayRef)a3);
    v111.location = 0;
    CFArrayApplyFunction((CFArrayRef)a3, v111, (CFArrayApplierFunction)_CFArrayApplierFunction_handleCertList, a1);
    *((_DWORD *)a1 + 20) = 5;
    if (CFArrayGetCount((CFArrayRef)a1[3]))
    {
      unsigned __int8 v28 = acc_userDefaults_BOOLForKey(@"DisableAMSHookUp");
      if (gLogObjects) {
        BOOL v29 = gNumLogObjects <= 57;
      }
      else {
        BOOL v29 = 1;
      }
      int v30 = !v29;
      if ((v28 & 1) == 0)
      {
        if (v30)
        {
          uint64_t v32 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          uint64_t v32 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          uint64_t v36 = v11[2];
          *(_DWORD *)buf = 136315650;
          v106 = "_audioProductCerts_endpoint_handleMissingCertList";
          __int16 v107 = 2112;
          uint64_t v108 = v36;
          __int16 v109 = 2112;
          *(void *)v110 = cf;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "%s: %@, %@, get accInfo from endpoint", buf, 0x20u);
        }
        CFStringRef AccessoryInfo = (const __CFString *)acc_endpoint_getAccessoryInfo((uint64_t)v11);
        if (!AccessoryInfo)
        {
          if (gLogObjects && gNumLogObjects >= 58)
          {
            __int16 v38 = *(NSObject **)(gLogObjects + 456);
          }
          else
          {
            __int16 v38 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
          {
            uint64_t v40 = v11[2];
            *(_DWORD *)buf = 136315650;
            v106 = "_audioProductCerts_endpoint_handleMissingCertList";
            __int16 v107 = 2112;
            uint64_t v108 = v40;
            __int16 v109 = 2112;
            *(void *)v110 = cf;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "%s: %@, %@, get accInfo from connection", buf, 0x20u);
          }
          CFStringRef AccessoryInfo = (const __CFString *)acc_connection_getAccessoryInfo(*v11);
        }
        CFStringRef v41 = acc_accInfo_copyAccessoryInfoDescription(AccessoryInfo);
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v42 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          uint64_t v42 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        {
          uint64_t v43 = v11[2];
          *(_DWORD *)buf = 136315906;
          v106 = "_audioProductCerts_endpoint_handleMissingCertList";
          __int16 v107 = 2112;
          uint64_t v108 = v43;
          __int16 v109 = 2112;
          *(void *)v110 = cf;
          *(_WORD *)&v110[8] = 2112;
          *(void *)&v110[10] = v41;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "%s: %@, %@, accInfo %@", buf, 0x2Au);
        }
        if (v41) {
          CFRelease(v41);
        }
        if (AccessoryInfo) {
          uint64_t data = (uint64_t)AccessoryInfo->data;
        }
        else {
          uint64_t data = 0;
        }
        acc_platform_audioProductCerts_processAudioProductCerts(v11[1], v11[2], data, a1[3], *((unsigned __int8 *)a1 + 9));
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v45 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          uint64_t v45 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          uint64_t v46 = v11[2];
          int v47 = *((_DWORD *)a1 + 10);
          *(_DWORD *)buf = 136316162;
          v106 = "_audioProductCerts_endpoint_handleMissingCertList";
          __int16 v107 = 2112;
          uint64_t v108 = v46;
          __int16 v109 = 2112;
          *(void *)v110 = cf;
          *(_WORD *)&v110[8] = 1024;
          *(_DWORD *)&v110[10] = v47;
          *(_WORD *)&v110[14] = 1024;
          *(_DWORD *)&v110[16] = 6;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "%s: %@, %@, state %d -> %d", buf, 0x2Cu);
        }
        *((_DWORD *)a1 + 10) = 6;
        return 1;
      }
      if (v30)
      {
        uint64_t v31 = *(NSObject **)(gLogObjects + 456);
      }
      else
      {
        uint64_t v31 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
      uint64_t v35 = *(void *)(*a1 + 16);
      *(_DWORD *)buf = 136315394;
      v106 = "_audioProductCerts_endpoint_handleMissingCertList";
      __int16 v107 = 2112;
      uint64_t v108 = v35;
      uint64_t v34 = "%s: %@, skip notifying of audioProductCert";
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 58)
      {
        uint64_t v31 = *(NSObject **)(gLogObjects + 456);
      }
      else
      {
        uint64_t v31 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
      uint64_t v33 = *(void *)(*a1 + 16);
      *(_DWORD *)buf = 136315394;
      v106 = "_audioProductCerts_endpoint_handleMissingCertList";
      __int16 v107 = 2112;
      uint64_t v108 = v33;
      uint64_t v34 = "%s: %@, No Valid Certs! skip notifying of audioProductCert";
    }
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v34, buf, 0x16u);
    return 1;
  }
  v97 = logObjectForModule_7();
  BOOL result = os_log_type_enabled(v97, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _audioProductCerts_endpoint_handleMissingCertList_cold_15(v97, v98, v99, v100, v101, v102, v103, v104);
    return 0;
  }
  return result;
}

BOOL _audioProductCerts_endpoint_handleAuthResponseWithMissingCert(CFDictionaryRef *a1, CFTypeRef cf, const void *a3)
{
  if (a1)
  {
    if (*a1)
    {
      if (*(void *)*a1)
      {
        if (cf)
        {
          if (a3)
          {
            CFTypeID v6 = CFGetTypeID(cf);
            if (v6 == CFStringGetTypeID())
            {
              CFTypeID v7 = CFGetTypeID(a3);
              if (v7 == CFArrayGetTypeID())
              {
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  int v8 = *(NSObject **)(gLogObjects + 456);
                }
                else
                {
                  int v8 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
                {
                  uint64_t v9 = *((void *)*a1 + 2);
                  int v10 = *((_DWORD *)a1 + 10);
                  *(_DWORD *)buf = 136316162;
                  uint64_t v108 = "_audioProductCerts_endpoint_handleAuthResponseWithMissingCert";
                  __int16 v109 = 2112;
                  uint64_t v110 = v9;
                  __int16 v111 = 1024;
                  *(_DWORD *)v112 = v10;
                  *(_WORD *)&v112[4] = 2112;
                  *(void *)&v112[6] = cf;
                  *(_WORD *)&v112[14] = 2112;
                  *(void *)&v112[16] = a3;
                  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s: ENTER %@, state %d, %@ : %@", buf, 0x30u);
                }
                CFDictionaryRef v106 = *a1;
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  uint64_t v11 = *(NSObject **)(gLogObjects + 456);
                }
                else
                {
                  uint64_t v11 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v37 = *((void *)v106 + 2);
                  *(_DWORD *)buf = 136315906;
                  uint64_t v108 = "_audioProductCerts_endpoint_handleAuthResponseWithMissingCert";
                  __int16 v109 = 2112;
                  uint64_t v110 = v37;
                  __int16 v111 = 2112;
                  *(void *)v112 = cf;
                  *(_WORD *)&v112[8] = 2112;
                  *(void *)&v112[10] = a3;
                  _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s: %@, %@ : %@", buf, 0x2Au);
                }
                if (acc_userDefaults_BOOLForKey(@"DisableAACPAuth"))
                {
                  uint64_t v94 = logObjectForModule_7();
                  BOOL result = os_log_type_enabled(v94, OS_LOG_TYPE_ERROR);
                  if (result)
                  {
                    uint64_t v95 = *((void *)v106 + 2);
                    *(_DWORD *)buf = 136315906;
                    uint64_t v108 = "_audioProductCerts_endpoint_handleAuthResponseWithMissingCert";
                    __int16 v109 = 2112;
                    uint64_t v110 = v95;
                    __int16 v111 = 2112;
                    *(void *)v112 = cf;
                    *(_WORD *)&v112[8] = 2112;
                    *(void *)&v112[10] = a3;
                    uint64_t v96 = "%s: %@, Auth not supported! %@ : %@";
LABEL_74:
                    _os_log_error_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, v96, buf, 0x2Au);
                    return 0;
                  }
                }
                else
                {
                  uint64_t v12 = (const void *)kCFACCProperties_Endpoint_AudioProduct_AuthResponse;
                  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*((CFDictionaryRef *)*a1 + 10), kCFACCProperties_Endpoint_AudioProduct_AuthResponse);
                  if (CFArrayGetCount(Value) <= 0)
                  {
                    v97 = logObjectForModule_7();
                    BOOL result = os_log_type_enabled(v97, OS_LOG_TYPE_ERROR);
                    if (result)
                    {
                      _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_6(v97, v98, v99, v100, v101, v102, v103, v104);
                      return 0;
                    }
                  }
                  else
                  {
                    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, 0);
                    uint64_t AuthChallenge = _audioProductCerts_endpoint_generateAuthChallenge((uint64_t)a1, 0);
                    if (AuthChallenge)
                    {
                      PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription(AuthChallenge, 1, (uint64_t)cf, (const __CFArray *)a3);
                      acc_platform_packetLogging_logParsedData((uint64_t)*a1, (uint64_t)cf, @"AudioProductCerts", (uint64_t)PropertyDescription, 1);
                      if (PropertyDescription) {
                        CFRelease(PropertyDescription);
                      }
                      if (gLogObjects && gNumLogObjects >= 58)
                      {
                        int v17 = *(NSObject **)(gLogObjects + 456);
                      }
                      else
                      {
                        int v17 = &_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }
                      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v18 = *((void *)v106 + 2);
                        int v19 = *((_DWORD *)a1 + 10);
                        *(_DWORD *)buf = 136316162;
                        uint64_t v108 = "_audioProductCerts_endpoint_handleAuthResponseWithMissingCert";
                        __int16 v109 = 2112;
                        uint64_t v110 = v18;
                        __int16 v111 = 2112;
                        *(void *)v112 = cf;
                        *(_WORD *)&v112[8] = 1024;
                        *(_DWORD *)&v112[10] = v19;
                        *(_WORD *)&v112[14] = 1024;
                        *(_DWORD *)&v112[16] = 6;
                        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s: %@, %@, state %d -> %d", buf, 0x2Cu);
                      }
                      if (acc_userDefaults_BOOLForKey(@"DisableAACPAuth")) {
                        goto LABEL_52;
                      }
                      CFIndex v20 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Type;
                      CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(a1[12], kCFACCProperties_Endpoint_AACP_CertificateInfo_Type);
                      CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v20);
                      if (CFNumberCompare(v21, v22, 0))
                      {
                        if (gLogObjects && gNumLogObjects >= 58)
                        {
                          __int16 v23 = *(NSObject **)(gLogObjects + 456);
                        }
                        else
                        {
                          __int16 v23 = &_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }
                        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                        {
                          uint64_t v33 = *((void *)v106 + 2);
                          uint64_t v34 = CFDictionaryGetValue(a1[12], kCFACCProperties_Endpoint_AACP_CertificateInfo_Data);
                          *(_DWORD *)buf = 136316162;
                          uint64_t v108 = "_audioProductCerts_endpoint_handleAuthResponseWithMissingCert";
                          __int16 v109 = 2112;
                          uint64_t v110 = v33;
                          __int16 v111 = 2112;
                          *(void *)v112 = cf;
                          *(_WORD *)&v112[8] = 2112;
                          *(void *)&v112[10] = a3;
                          *(_WORD *)&v112[18] = 2112;
                          *(void *)&v112[20] = v34;
                          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%s: %@, %@ : %@, cert %@", buf, 0x34u);
                        }
                        goto LABEL_46;
                      }
                      if (_audioProductCerts_endpoint_validateChallenge((uint64_t *)a1, ValueAtIndex))
                      {
LABEL_46:
                        if ((acc_userDefaults_BOOLForKey(@"KeepAACPAuthData") & 1) == 0)
                        {
                          CFDictionaryRef v35 = a1[12];
                          if (v35)
                          {
                            CFRelease(v35);
                            a1[12] = 0;
                          }
                          CFDictionaryRef v36 = a1[13];
                          if (v36)
                          {
                            CFRelease(v36);
                            a1[13] = 0;
                          }
                          audioProductCerts_endpoint_removeProperty((BOOL)a1, kCFACCProperties_Endpoint_AudioProduct_AuthChallenge);
                          audioProductCerts_endpoint_removeProperty((BOOL)a1, v12);
                        }
LABEL_52:
                        *((_DWORD *)a1 + 10) = 6;
                        return 1;
                      }
                      uint64_t v24 = logObjectForModule_7();
                      BOOL result = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
                      if (!result) {
                        return result;
                      }
                      _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_7(v24, v26, v27, v28, v29, v30, v31, v32);
                      return 0;
                    }
                    uint64_t v94 = logObjectForModule_7();
                    BOOL result = os_log_type_enabled(v94, OS_LOG_TYPE_ERROR);
                    if (result)
                    {
                      uint64_t v105 = *((void *)v106 + 2);
                      *(_DWORD *)buf = 136315906;
                      uint64_t v108 = "_audioProductCerts_endpoint_handleAuthResponseWithMissingCert";
                      __int16 v109 = 2112;
                      uint64_t v110 = v105;
                      __int16 v111 = 2112;
                      *(void *)v112 = cf;
                      *(_WORD *)&v112[8] = 2112;
                      *(void *)&v112[10] = a3;
                      uint64_t v96 = "%s: %@, Unable to generate auth challenge! %@ : %@";
                      goto LABEL_74;
                    }
                  }
                }
              }
              else
              {
                uint64_t v86 = logObjectForModule_7();
                BOOL result = os_log_type_enabled(v86, OS_LOG_TYPE_ERROR);
                if (result)
                {
                  _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_12(v86, v87, v88, v89, v90, v91, v92, v93);
                  return 0;
                }
              }
            }
            else
            {
              uint64_t v78 = logObjectForModule_7();
              BOOL result = os_log_type_enabled(v78, OS_LOG_TYPE_ERROR);
              if (result)
              {
                _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_13(v78, v79, v80, v81, v82, v83, v84, v85);
                return 0;
              }
            }
          }
          else
          {
            uint64_t v70 = logObjectForModule_7();
            BOOL result = os_log_type_enabled(v70, OS_LOG_TYPE_ERROR);
            if (result)
            {
              _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_5(v70, v71, v72, v73, v74, v75, v76, v77);
              return 0;
            }
          }
        }
        else
        {
          uint64_t v62 = logObjectForModule_7();
          BOOL result = os_log_type_enabled(v62, OS_LOG_TYPE_ERROR);
          if (result)
          {
            _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_4(v62, v63, v64, v65, v66, v67, v68, v69);
            return 0;
          }
        }
      }
      else
      {
        uint64_t v54 = logObjectForModule_7();
        BOOL result = os_log_type_enabled(v54, OS_LOG_TYPE_ERROR);
        if (result)
        {
          _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_3(v54, v55, v56, v57, v58, v59, v60, v61);
          return 0;
        }
      }
    }
    else
    {
      uint64_t v46 = logObjectForModule_7();
      BOOL result = os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
      if (result)
      {
        _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_2(v46, v47, v48, v49, v50, v51, v52, v53);
        return 0;
      }
    }
  }
  else
  {
    __int16 v38 = logObjectForModule_7();
    BOOL result = os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
    if (result)
    {
      _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_1(v38, v39, v40, v41, v42, v43, v44, v45);
      return 0;
    }
  }
  return result;
}

uint64_t audioProductCerts_endpoint_propertiesDidChange(unsigned __int8 *a1, CFTypeRef cf)
{
  if (cf) {
    BOOL v2 = *(void *)a1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (!v2)
  {
    CFRetain(cf);
    CFTypeID v6 = &unk_100239000;
    if (gLogObjects && gNumLogObjects >= 58)
    {
      CFTypeID v7 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      CFTypeID v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      audioProductCerts_endpoint_propertiesDidChange_cold_3();
    }
    unsigned int valuePtr = 0;
    uint64_t v8 = kCFACCProperties_Endpoint_AACP_CertificateSupported;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, kCFACCProperties_Endpoint_AACP_CertificateSupported);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (acc_userDefaults_BOOLForKey(@"DisableCertSupport"))
      {
        if (gLogObjects && gNumLogObjects >= 58)
        {
          int v10 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          int v10 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *(void *)(*(void *)a1 + 16);
          *(_DWORD *)buf = 138412802;
          uint64_t v47 = v11;
          __int16 v48 = 1024;
          int v49 = valuePtr;
          __int16 v50 = 1024;
          BOOL v51 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "PropertiesDidchange: %@, Override certificateRetrievalSupported %d -> %d", buf, 0x18u);
        }
        unsigned int valuePtr = 0;
      }
    }
    uint64_t v12 = valuePtr;
    if (a1[8] != (valuePtr != 0))
    {
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 58)
      {
        CFTypeID v15 = *(NSObject **)(gLogObjects + 456);
      }
      else
      {
        CFTypeID v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v47 = v13;
          __int16 v48 = 1024;
          int v49 = v14;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          uint64_t v12 = valuePtr;
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(*(void *)a1 + 16);
        int v17 = a1[8];
        *(_DWORD *)buf = 138412802;
        uint64_t v47 = v16;
        __int16 v48 = 1024;
        int v49 = v17;
        __int16 v50 = 1024;
        BOOL v51 = v12 != 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PropertiesDidchange: %@, certificateRetrievalSupported %d -> %d", buf, 0x18u);
        uint64_t v12 = valuePtr;
      }
      CFStringRef v18 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"certRetrievalSupported: %d", v12);
      acc_platform_packetLogging_logParsedData(*(void *)a1, v8, @"AudioProductCerts", (uint64_t)v18, 1);
      if (v18) {
        CFRelease(v18);
      }
    }
    a1[8] = valuePtr != 0;
    uint64_t v19 = kCFACCProperties_Endpoint_AACP_FirstConnectionAfterPair;
    CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, kCFACCProperties_Endpoint_AACP_FirstConnectionAfterPair);
    if (v20) {
      uint64_t v21 = CFBooleanGetValue(v20);
    }
    else {
      uint64_t v21 = 0;
    }
    if (v21 != a1[9])
    {
      if (gLogObjects && gNumLogObjects >= 58)
      {
        CFNumberRef v22 = *(NSObject **)(gLogObjects + 456);
      }
      else
      {
        CFNumberRef v22 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *(void *)(*(void *)a1 + 16);
        int v24 = a1[9];
        *(_DWORD *)buf = 138412802;
        uint64_t v47 = v23;
        __int16 v48 = 1024;
        int v49 = v24;
        __int16 v50 = 1024;
        BOOL v51 = v21;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "PropertiesDidchange: %@, firstConnectionAfterPair %d -> %d", buf, 0x18u);
      }
      CFStringRef v25 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"firstConnectionAfterPair: %d", v21);
      acc_platform_packetLogging_logParsedData(*(void *)a1, v19, @"AudioProductCerts", (uint64_t)v25, 1);
      if (v25) {
        CFRelease(v25);
      }
    }
    a1[9] = v21 != 0;
    uint64_t v26 = kCFACCProperties_Endpoint_AudioProduct_AuthSupported;
    CFArrayRef v27 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, kCFACCProperties_Endpoint_AudioProduct_AuthSupported);
    if (v27)
    {
      CFArrayRef v28 = v27;
      if (CFArrayGetCount(v27) >= 1)
      {
        uint64_t v29 = (const void *)*((void *)a1 + 8);
        if (v29)
        {
          CFRelease(v29);
          *((void *)a1 + 8) = 0;
        }
        CFAllocatorRef v30 = kCFAllocatorDefault;
        *((void *)a1 + 8) = CFArrayCreateCopy(kCFAllocatorDefault, v28);
        if (CFArrayGetCount(v28) >= 1)
        {
          CFIndex v31 = 0;
          char v32 = 0;
          do
          {
            while (1)
            {
              CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v28, v31);
              int v44 = 0;
              CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &v44);
              int v34 = v44;
              if (a1[v44 + 72]) {
                break;
              }
              CFAllocatorRef alloc = v30;
              uint64_t v35 = v3;
              uint64_t v36 = v6[49];
              int v37 = gNumLogObjects;
              if (v36 && gNumLogObjects >= 58)
              {
                __int16 v38 = *(NSObject **)(v36 + 456);
              }
              else
              {
                __int16 v38 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v47 = v36;
                  __int16 v48 = 1024;
                  int v49 = v37;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  int v34 = v44;
                }
              }
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v39 = *(void *)(*(void *)a1 + 16);
                int v40 = a1[v34 + 72];
                *(_DWORD *)buf = 138413058;
                uint64_t v47 = v39;
                __int16 v48 = 1024;
                int v49 = v34;
                __int16 v50 = 1024;
                BOOL v51 = v40;
                __int16 v52 = 1024;
                int v53 = 1;
                _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "PropertiesDidchange: %@, authSupported[%d] = %d -> %d ", buf, 0x1Eu);
                int v34 = v44;
              }
              uint64_t v3 = v35;
              CFTypeID v6 = (void *)&unk_100239000;
              char v32 = 1;
              a1[v34 + 72] = 1;
              ++v31;
              CFAllocatorRef v30 = alloc;
              if (v31 >= CFArrayGetCount(v28)) {
                goto LABEL_67;
              }
            }
            ++v31;
          }
          while (v31 < CFArrayGetCount(v28));
          if ((v32 & 1) == 0) {
            goto LABEL_69;
          }
LABEL_67:
          CFStringRef v41 = CFStringCreateWithFormat(v30, 0, @"authSupported: %@", v28);
          acc_platform_packetLogging_logParsedData(*(void *)a1, v26, @"AudioProductCerts", (uint64_t)v41, 1);
          if (v41) {
            CFRelease(v41);
          }
        }
      }
    }
LABEL_69:
    CFDictionaryApplyFunction((CFDictionaryRef)cf, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_handlePropertiesChange, a1);
    CFRelease(cf);
  }
  return v3;
}

CFStringRef _CFDictionaryApplierFunction_handlePropertiesChange(const __CFString *result, const void *a2, uint64_t *a3)
{
  if (result && a3)
  {
    if (*a3) {
      return (const __CFString *)audioProductCerts_endpoint_propertyDidChange(a3, result, a2);
    }
  }
  return result;
}

BOOL audioProductCerts_endpoint_setProperty(uint64_t *a1, const void *a2, const __CFArray *a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  char v15 = 0;
  if (a1 && *a1 && *(void *)(*a1 + 16))
  {
    PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription((uint64_t)a1, 1, (uint64_t)a2, a3);
    acc_platform_packetLogging_logParsedData(*a1, (uint64_t)a2, @"AudioProductCerts", (uint64_t)PropertyDescription, 0);
    if (PropertyDescription) {
      CFRelease(PropertyDescription);
    }
    CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)(*a1 + 16));
    if (a2) {
      CFRetain(a2);
    }
    if (a3) {
      CFRetain(a3);
    }
    uint64_t v8 = a1[6];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 0x40000000;
    _DWORD v11[2] = __audioProductCerts_endpoint_setProperty_block_invoke;
    v11[3] = &unk_1002168D8;
    v11[4] = &v12;
    v11[5] = Copy;
    v11[6] = a2;
    v11[7] = a3;
    dispatch_async(v8, v11);
    BOOL v9 = *((unsigned char *)v13 + 24) != 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  _Block_object_dispose(&v12, 8);
  return v9;
}

__CFString *_audioProductCerts_endpoint_createPropertyDescription(uint64_t a1, int a2, uint64_t a3, const __CFArray *a4)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  uint64_t v8 = Mutable;
  BOOL v9 = "DELETE";
  if (a2) {
    BOOL v9 = "ADD";
  }
  CFStringAppendFormat(Mutable, 0, @"(%s) { %@ : \n", v9, a3);
  if (a4 && (CFTypeID v10 = CFGetTypeID(a4), v10 == CFArrayGetTypeID()))
  {
    if (CFArrayGetCount(a4))
    {
      v12.length = CFArrayGetCount(a4);
      v12.location = 0;
      CFArrayApplyFunction(a4, v12, (CFArrayApplierFunction)_CFArrayApplierFunction_parseEntries, v8);
    }
    else
    {
      CFStringAppendFormat(v8, 0, @"no entries ");
    }
  }
  else
  {
    CFStringAppendFormat(v8, 0, @"(no valid entries) ");
  }
  CFStringAppendFormat(v8, 0, @"}");
  return v8;
}

void __audioProductCerts_endpoint_setProperty_block_invoke(uint64_t a1)
{
  EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(*(const void **)(a1 + 40));
  if (EndpointWithUUID)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = acc_endpoint_setProperty(EndpointWithUUID, *(const void **)(a1 + 48), *(const __CFNull **)(a1 + 56));
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 58)
    {
      uint64_t v3 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      uint64_t v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v7 = 136315394;
      uint64_t v8 = "audioProductCerts_endpoint_setProperty_block_invoke";
      __int16 v9 = 2112;
      uint64_t v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s: unable to find endpoint for %@", (uint8_t *)&v7, 0x16u);
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
  int v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  CFTypeID v6 = *(const void **)(a1 + 56);
  if (v6) {
    CFRelease(v6);
  }
}

BOOL audioProductCerts_endpoint_removeProperty(BOOL result, const void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription(result, 0, (uint64_t)a2, 0);
    acc_platform_packetLogging_logParsedData(*v3, (uint64_t)a2, @"AudioProductCerts", (uint64_t)PropertyDescription, 0);
    if (PropertyDescription) {
      CFRelease(PropertyDescription);
    }
    int v5 = (pthread_mutex_t *)*v3;
    return acc_endpoint_removeProperty(v5, a2);
  }
  return result;
}

void _audioProductCerts_endpoint_cleanupSession(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    BOOL v2 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    BOOL v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    int v10 = 134217984;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "audioProductCerts cleanupSession: attachTimestamp %f", (uint8_t *)&v10, 0xCu);
  }
  platform_auth_deallocCertificateCache();
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 80) = 5;
  uint64_t v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 16) = 0;
  }
  int v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 24) = 0;
  }
  CFTypeID v6 = *(const void **)(a1 + 88);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 88) = 0;
  }
  int v7 = *(const void **)(a1 + 96);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 96) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 104);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 104) = 0;
  }
  __int16 v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 64) = 0;
  }
}

void _audioProductCerts_endpoint_addCertEntryToList(unsigned __int8 *a1, const void *a2, const void *a3, const void *a4)
{
  unsigned int v8 = acc_userDefaults_BOOLForKey(@"DisableSNOnly");
  if (a1 && a2 && a3)
  {
    unsigned int v9 = v8;
    if (gLogObjects && gNumLogObjects >= 58)
    {
      int v10 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      int v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = *(void *)(*(void *)a1 + 16);
      int v22 = a1[8];
      int v23 = 138413314;
      *(void *)int v24 = v21;
      *(_WORD *)&void v24[8] = 1024;
      *(_DWORD *)CFStringRef v25 = v22;
      *(_WORD *)&v25[4] = 2112;
      *(void *)&v25[6] = a2;
      __int16 v26 = 2112;
      CFArrayRef v27 = a3;
      __int16 v28 = 2112;
      uint64_t v29 = a4;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "_audioProductCerts_endpoint_addCertEntryToList: %@, certificateRetrievalSupported %d, type %@, serial %@, certData %@", (uint8_t *)&v23, 0x30u);
    }
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(Mutable, kCFACCProperties_Endpoint_AACP_CertificateInfo_Type, a2);
    CFDictionaryAddValue(Mutable, kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial, a3);
    if (a4) {
      CFDictionaryAddValue(Mutable, kCFACCProperties_Endpoint_AACP_CertificateInfo_Data, a4);
    }
    if (gLogObjects && gNumLogObjects >= 58)
    {
      CFRange v12 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      CFRange v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v13 = a1[8];
      if (a4) {
        CFIndex Length = CFDataGetLength((CFDataRef)a4);
      }
      else {
        CFIndex Length = -1;
      }
      int v23 = 67109632;
      *(_DWORD *)int v24 = v9;
      *(_WORD *)&v24[4] = 1024;
      *(_DWORD *)&v24[6] = v13;
      *(_WORD *)CFStringRef v25 = 2048;
      *(void *)&v25[2] = Length;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "_audioProductCerts_endpoint_addCertEntryToList: disableSNOnly %d, certificateRetrievalSupported %d, certData %ld bytes", (uint8_t *)&v23, 0x18u);
    }
    if (v9)
    {
      uint64_t v15 = gLogObjects;
      int v16 = gNumLogObjects;
    }
    else
    {
      uint64_t v15 = gLogObjects;
      int v16 = gNumLogObjects;
      if (a4 || !a1[8])
      {
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v19 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          uint64_t v19 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          CFBooleanRef v20 = "valid certificate";
          if (!a4) {
            CFBooleanRef v20 = "serial numbers";
          }
          int v23 = 136315394;
          *(void *)int v24 = v20;
          *(_WORD *)&void v24[8] = 2112;
          *(void *)CFStringRef v25 = Mutable;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "_audioProductCerts_endpoint_addCertEntryToList: add %s to certificateList, entry %@", (uint8_t *)&v23, 0x16u);
        }
        CFStringRef v18 = (CFMutableArrayRef *)(a1 + 24);
        goto LABEL_45;
      }
    }
    if (v15 && v16 >= 58)
    {
      int v17 = *(NSObject **)(v15 + 456);
    }
    else
    {
      int v17 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      int v23 = 138412290;
      *(void *)int v24 = Mutable;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "_audioProductCerts_endpoint_addCertEntryToList: add serial numbers to certificateRequiredList, entry %@", (uint8_t *)&v23, 0xCu);
    }
    CFStringRef v18 = (CFMutableArrayRef *)(a1 + 16);
LABEL_45:
    CFArrayAppendValue(*v18, Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

void ___audioProductCerts_endpoint_handlePropertiesDidChange_block_invoke(uint64_t a1)
{
  audioProductCerts_endpoint_propertiesDidChange(*(unsigned __int8 **)(a1 + 32), *(CFTypeRef *)(a1 + 40));
  BOOL v2 = *(const void **)(a1 + 40);

  CFRelease(v2);
}

void _CFArrayApplierFunction_parseEntries(const void *a1, __CFString *a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    CFTypeID v5 = CFGetTypeID(a1);
    if (v5 != CFDictionaryGetTypeID() || (CFTypeID v6 = CFGetTypeID(a2), v6 != CFStringGetTypeID()))
    {
      uint64_t v2 = 0;
      goto LABEL_18;
    }
    CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, kCFACCProperties_Endpoint_AACP_CertificateInfo_Type);
    unsigned int v8 = CFDictionaryGetValue((CFDictionaryRef)a1, kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial);
    unsigned int v9 = CFDictionaryGetValue((CFDictionaryRef)a1, kCFACCProperties_Endpoint_AACP_CertificateInfo_Data);
    int v10 = CFDictionaryGetValue((CFDictionaryRef)a1, kCFACCProperties_Endpoint_AudioProduct_AuthData);
    if (gLogObjects && gNumLogObjects >= 58)
    {
      uint64_t v11 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      uint64_t v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138413058;
      CFBooleanRef v20 = Value;
      __int16 v21 = 2112;
      int v22 = v8;
      __int16 v23 = 2112;
      int v24 = v9;
      __int16 v25 = 2112;
      __int16 v26 = v10;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "_CFArrayApplierFunction_parseEntries: type %@, serial %@, data %@, authData %@", buf, 0x2Au);
      if (v9) {
        goto LABEL_12;
      }
    }
    else if (v9)
    {
LABEL_12:
      CFStringAppendFormat(a2, 0, @"\t{type=%@, serial=%@, data=%@} \n", Value, v8, v9);
LABEL_17:
      uint64_t v2 = (uint64_t)a2;
      goto LABEL_18;
    }
    if (v10) {
      CFStringAppendFormat(a2, 0, @"\t{type=%@, serial=%@, authData=%@} \n", Value, v8, v10);
    }
    else {
      CFStringAppendFormat(a2, 0, @"\t{type=%@, serial=%@, no data} \n", Value, v8);
    }
    goto LABEL_17;
  }
LABEL_18:
  if (gLogObjects && gNumLogObjects >= 58)
  {
    CFRange v12 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    CFRange v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    _CFArrayApplierFunction_parseEntries_cold_1(v2, v12, v13, v14, v15, v16, v17, v18);
  }
}

CFIndex _audioProductCerts_endpoint_getSerialEntryIndexInCertList(const __CFArray *a1, const __CFString *a2)
{
  CFIndex v2 = -1;
  if (a1 && a2 && CFArrayGetCount(a1) >= 1)
  {
    CFIndex v2 = 0;
    CFTypeID v5 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v2);
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v5);
      uint64_t v8 = gLogObjects;
      int v9 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 58)
      {
        int v10 = *(NSObject **)(gLogObjects + 456);
      }
      else
      {
        int v10 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v15 = v8;
          __int16 v16 = 1024;
          LODWORD(v17) = v9;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          int v10 = &_os_log_default;
        }
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        CFIndex Count = CFArrayGetCount(a1);
        *(_DWORD *)buf = 134218754;
        uint64_t v15 = v2;
        __int16 v16 = 2048;
        CFIndex v17 = Count;
        __int16 v18 = 2112;
        CFStringRef v19 = Value;
        __int16 v20 = 2112;
        CFStringRef v21 = a2;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "_CFArrayApplierFunction_parseEntries: [%ld / %ld] serial %@ =?= %@", buf, 0x2Au);
        if (Value)
        {
LABEL_12:
          if (CFEqual(Value, a2)) {
            break;
          }
        }
      }
      else if (Value)
      {
        goto LABEL_12;
      }
      if (++v2 >= CFArrayGetCount(a1))
      {
        CFIndex v2 = -1;
        break;
      }
    }
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    CFRange v12 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    CFRange v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    _audioProductCerts_endpoint_getSerialEntryIndexInCertList_cold_1(v2, v12);
  }
  return v2;
}

void _CFArrayApplierFunction_handleSerialList(CFTypeRef cf, uint64_t *a2)
{
  uint64_t v3 = 0;
  if (cf && a2)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFDictionaryGetTypeID())
    {
      uint64_t v3 = *a2;
      if (*a2 && *(void *)(v3 + 16))
      {
        CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, kCFACCProperties_Endpoint_AACP_CertificateInfo_Type);
        int v7 = CFDictionaryGetValue((CFDictionaryRef)cf, kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial);
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v8 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          uint64_t v8 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)__int16 v38 = Value;
          *(_WORD *)&v38[8] = 2112;
          *(void *)uint64_t v39 = v7;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleSerialList: type %@, serial %@", buf, 0x16u);
        }
        if (Value) {
          BOOL v9 = v7 == 0;
        }
        else {
          BOOL v9 = 1;
        }
        int v10 = !v9;
        if (!v9)
        {
          int v36 = v10;
          if (*((unsigned char *)a2 + 9) && (platform_auth_removeCertDataEntryFromCache() & 1) == 0)
          {
            if (gLogObjects && gNumLogObjects >= 58)
            {
              uint64_t v11 = *(NSObject **)(gLogObjects + 456);
            }
            else
            {
              uint64_t v11 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleCertList: failed to remove certificate from cache!", buf, 2u);
            }
          }
          uint64_t CertDataFromSerialNumber = platform_auth_createCertDataFromSerialNumber(a2[4], v7);
          if (CertDataFromSerialNumber)
          {
            uint64_t v13 = (const void *)CertDataFromSerialNumber;
            uint64_t v35 = v3;
            unsigned int v14 = acc_userDefaults_BOOLForKey(@"DisableCertVerification");
            int v15 = platform_auth_verifyPublicCertificate();
            if (gLogObjects && gNumLogObjects >= 58)
            {
              __int16 v16 = *(NSObject **)(gLogObjects + 456);
            }
            else
            {
              __int16 v16 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)__int16 v38 = v15;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleSerialList: initial verify, valid %d", buf, 8u);
            }
            if (v15)
            {
              BOOL v18 = 1;
            }
            else
            {
              BOOL v18 = platform_auth_verifyCertificateChain(v13, 0, 4u);
              if (gLogObjects && gNumLogObjects >= 58)
              {
                CFStringRef v19 = *(NSObject **)(gLogObjects + 456);
              }
              else
              {
                CFStringRef v19 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)__int16 v38 = v18;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleSerialList: second verify, valid %d", buf, 8u);
              }
            }
            if (gLogObjects && gNumLogObjects >= 58)
            {
              __int16 v20 = *(NSObject **)(gLogObjects + 456);
            }
            else
            {
              __int16 v20 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)__int16 v38 = v14;
              *(_WORD *)&v38[4] = 1024;
              *(_DWORD *)&v38[6] = v18;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleSerialList: cached certData, skip %d, valid %d", buf, 0xEu);
            }
            if ((v14 | v18) == 1)
            {
              CFStringRef v21 = (unsigned __int8 *)a2;
              int v22 = Value;
              __int16 v23 = v7;
              int v24 = v13;
            }
            else
            {
              if (gLogObjects && gNumLogObjects >= 58)
              {
                __int16 v25 = *(NSObject **)(gLogObjects + 456);
              }
              else
              {
                __int16 v25 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                *(void *)__int16 v38 = v7;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "_CFArrayApplierFunction_handleSerialList: invalid cached certData, remove cert from cache! %@", buf, 0xCu);
              }
              if ((platform_auth_removeCertDataEntryFromCache() & 1) == 0)
              {
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  __int16 v26 = *(NSObject **)(gLogObjects + 456);
                }
                else
                {
                  __int16 v26 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleSerialList: failed to remove certificate from cache!", buf, 2u);
                }
              }
              if (gLogObjects && gNumLogObjects >= 58)
              {
                CFArrayRef v27 = *(NSObject **)(gLogObjects + 456);
              }
              else
              {
                CFArrayRef v27 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412546;
                *(void *)__int16 v38 = Value;
                *(_WORD *)&v38[8] = 2112;
                *(void *)uint64_t v39 = v7;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "_CFArrayApplierFunction_handleSerialList: call _addCertEntryToList, typeObj %@, serialObj %@", buf, 0x16u);
              }
              CFStringRef v21 = (unsigned __int8 *)a2;
              int v22 = Value;
              __int16 v23 = v7;
              int v24 = 0;
            }
            _audioProductCerts_endpoint_addCertEntryToList(v21, v22, v23, v24);
            uint64_t v3 = v35;
            int v10 = v36;
            CFRelease(v13);
          }
          else
          {
            if (gLogObjects && gNumLogObjects >= 58)
            {
              CFIndex v17 = *(NSObject **)(gLogObjects + 456);
            }
            else
            {
              CFIndex v17 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              *(void *)__int16 v38 = Value;
              *(_WORD *)&v38[8] = 2112;
              *(void *)uint64_t v39 = v7;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "_CFArrayApplierFunction_handleSerialList: missing cached certData, call _addCertEntryToList, typeObj %@, serialObj %@", buf, 0x16u);
            }
            _audioProductCerts_endpoint_addCertEntryToList((unsigned __int8 *)a2, Value, v7, 0);
          }
        }
        if (gLogObjects && gNumLogObjects >= 58)
        {
          __int16 v28 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          __int16 v28 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          uint64_t v29 = *(void *)(v3 + 16);
          int v30 = *((_DWORD *)a2 + 10);
          *(_DWORD *)buf = 138412802;
          *(void *)__int16 v38 = v29;
          *(_WORD *)&v38[8] = 1024;
          *(_DWORD *)uint64_t v39 = v30;
          *(_WORD *)&v39[4] = 1024;
          *(_DWORD *)&v39[6] = v10;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "_CFArrayApplierFunction_handleSerialList: %@, state %d, success %d", buf, 0x18u);
        }
        if (gLogObjects && gNumLogObjects >= 58)
        {
          CFIndex v31 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          CFIndex v31 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v34 = *(void *)(v3 + 16);
          *(_DWORD *)buf = 138412546;
          *(void *)__int16 v38 = v34;
          *(_WORD *)&v38[8] = 2112;
          *(void *)uint64_t v39 = cf;
          _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "_CFArrayApplierFunction_handleSerialList: %@, value %@", buf, 0x16u);
          if (v10) {
            return;
          }
        }
        else if (v10)
        {
          return;
        }
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    char v32 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    char v32 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    if (v3) {
      uint64_t v33 = *(void *)(v3 + 16);
    }
    else {
      uint64_t v33 = 0;
    }
    *(_DWORD *)buf = 138412546;
    *(void *)__int16 v38 = v33;
    *(_WORD *)&v38[8] = 2112;
    *(void *)uint64_t v39 = cf;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleSerialList: %@, Failed to handle serialList entry %@", buf, 0x16u);
  }
}

void _CFArrayApplierFunction_handleCertList(CFTypeRef cf, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = &unk_100239000;
  if (!cf || !a2) {
    goto LABEL_149;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 != CFDictionaryGetTypeID())
  {
    uint64_t v3 = 0;
    goto LABEL_149;
  }
  uint64_t v3 = *(void *)a2;
  if (!*(void *)a2) {
    goto LABEL_149;
  }
  key = (void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Type;
  CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, kCFACCProperties_Endpoint_AACP_CertificateInfo_Type);
  __int16 v50 = (void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial;
  CFStringRef v8 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial);
  int v49 = (void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Data;
  BOOL v9 = (void *)CFDictionaryGetValue((CFDictionaryRef)cf, kCFACCProperties_Endpoint_AACP_CertificateInfo_Data);
  if (gLogObjects && gNumLogObjects >= 58)
  {
    int v10 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    int v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    *(void *)uint64_t v55 = Value;
    *(_WORD *)&v55[8] = 2112;
    *(void *)&unsigned char v55[10] = v8;
    *(_WORD *)&v55[18] = 2112;
    uint64_t v56 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleCertList: type %@, serial %@, data %@", buf, 0x20u);
  }
  int v11 = 0;
  if (Value && v8 && v9)
  {
    if (CFDataGetLength((CFDataRef)v9) >= 1 && (CFIndex Length = CFDataGetLength((CFDataRef)v9)) != 0)
    {
      CFIndex v47 = Length;
      if (acc_userDefaults_BOOLForKey(@"DisableCertVerification"))
      {
        BOOL v13 = 0;
        int v52 = 1;
        int v48 = 1;
      }
      else
      {
        int v21 = platform_auth_verifyPublicCertificate();
        if (gLogObjects && gNumLogObjects >= 58)
        {
          int v22 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          int v22 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)uint64_t v55 = v21;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleCertList: initial verify, valid %d", buf, 8u);
        }
        uint64_t v4 = &unk_100239000;
        if (v21)
        {
          int v52 = 0;
          int v48 = 1;
          BOOL v13 = 1;
        }
        else
        {
          BOOL v13 = platform_auth_verifyCertificateChain(v9, 0, 4u);
          if (gLogObjects && gNumLogObjects >= 58)
          {
            __int16 v25 = *(NSObject **)(gLogObjects + 456);
          }
          else
          {
            __int16 v25 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)uint64_t v55 = v13;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleCertList: second verify, valid %d", buf, 8u);
          }
          int v52 = 0;
          int v48 = 1;
          uint64_t v4 = (_DWORD *)&unk_100239000;
        }
      }
    }
    else
    {
      CFIndex v47 = 0;
      int v48 = 0;
      BOOL v13 = 0;
      int v52 = 1;
    }
    int v14 = v4[100];
    if (gLogObjects && v14 >= 58)
    {
      int v15 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      int v15 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)uint64_t v55 = v52;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)&v55[6] = v13;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleCertList: skip %d, valid %d", buf, 0xEu);
    }
    if (v13) {
      CFStringRef v16 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"CertificateVerify: serial %@, type %@, valid certData", v8, Value);
    }
    else {
      CFStringRef v16 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"CertificateVerify: serial %@, type %@, NOT valid certData", v8, Value);
    }
    CFStringRef v17 = v16;
    acc_platform_packetLogging_logData(v3, (uint64_t)v16, @"AudioProductCerts", v9, -1);
    if (v17) {
      CFRelease(v17);
    }
    if ((v52 | v13) == 1)
    {
      if (v48)
      {
        if ((platform_auth_addCertDataEntryToCacheForSerialNumber() & 1) == 0)
        {
          if (gLogObjects && gNumLogObjects >= 58)
          {
            BOOL v18 = *(NSObject **)(gLogObjects + 456);
          }
          else
          {
            BOOL v18 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleCertList: failed to save certificate to cache!", buf, 2u);
          }
        }
        if (gLogObjects) {
          BOOL v26 = gNumLogObjects <= 57;
        }
        else {
          BOOL v26 = 1;
        }
        int v27 = !v26;
        if (v52)
        {
          if (v27)
          {
            __int16 v28 = *(NSObject **)(gLogObjects + 456);
          }
          else
          {
            __int16 v28 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)uint64_t v55 = cf;
            __int16 v23 = "_CFArrayApplierFunction_handleCertList: got certificate for certificateList, entry %@";
LABEL_87:
            int v24 = v28;
            goto LABEL_88;
          }
        }
        else
        {
          if (v27)
          {
            __int16 v28 = *(NSObject **)(gLogObjects + 456);
          }
          else
          {
            __int16 v28 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)uint64_t v55 = cf;
            __int16 v23 = "_CFArrayApplierFunction_handleCertList: got valid certificate for certificateList, entry %@";
            goto LABEL_87;
          }
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 58)
        {
          __int16 v20 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          __int16 v20 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)uint64_t v55 = cf;
          __int16 v23 = "_CFArrayApplierFunction_handleCertList: got empty certificate data for certificateList, entry %@";
          int v24 = v20;
LABEL_88:
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, v23, buf, 0xCu);
        }
      }
      CFIndex SerialEntryIndexInCertList = _audioProductCerts_endpoint_getSerialEntryIndexInCertList(*(const __CFArray **)(a2 + 24), v8);
      if ((SerialEntryIndexInCertList & 0x8000000000000000) == 0)
      {
        CFIndex v30 = SerialEntryIndexInCertList;
        if (gLogObjects && gNumLogObjects >= 58)
        {
          CFIndex v31 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          CFIndex v31 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)uint64_t v55 = v8;
          *(_WORD *)&v55[8] = 2048;
          *(void *)&unsigned char v55[10] = v30;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "_CFArrayApplierFunction_handleCertList: certificate already in certificateList for %@ at index %ld", buf, 0x16u);
        }
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a2 + 24), v30);
      }
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionaryAddValue(Mutable, key, Value);
      CFDictionaryAddValue(Mutable, v50, v8);
      if (v48) {
        CFDictionaryAddValue(Mutable, v49, v9);
      }
      if (gLogObjects) {
        BOOL v33 = gNumLogObjects <= 57;
      }
      else {
        BOOL v33 = 1;
      }
      int v34 = !v33;
      if (v52)
      {
        if (v34)
        {
          uint64_t v35 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          uint64_t v35 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_INFO)) {
          goto LABEL_120;
        }
        *(_DWORD *)buf = 138412290;
        *(void *)uint64_t v55 = cf;
        int v36 = "_CFArrayApplierFunction_handleCertList: add certificate to certificateList, entry %@";
      }
      else
      {
        if (v34)
        {
          uint64_t v35 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          uint64_t v35 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_INFO)) {
          goto LABEL_120;
        }
        *(_DWORD *)buf = 138412290;
        *(void *)uint64_t v55 = cf;
        int v36 = "_CFArrayApplierFunction_handleCertList: add valid certificate to certificateList, entry %@";
      }
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, v36, buf, 0xCu);
LABEL_120:
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), Mutable);
      int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr);
      if ((v48 & (acc_userDefaults_BOOLForKey(@"DisableAACPAuth") ^ 1)) == 1
        && *(unsigned char *)(a2 + valuePtr + 72)
        || (v48 & (acc_userDefaults_BOOLForKey(@"DisableAACPAuth") ^ 1)) == 1
        && *(_DWORD *)(a2 + 80) == valuePtr)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 88), Mutable);
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 58)
        {
          int v37 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          int v37 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v38 = acc_userDefaults_BOOLForKey(@"DisableAACPAuth");
          int v39 = *(unsigned __int8 *)(a2 + valuePtr + 72);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)uint64_t v55 = v38 ^ 1;
          *(_WORD *)&v55[4] = 2048;
          *(void *)&v55[6] = v47;
          *(_WORD *)&v55[14] = 1024;
          *(_DWORD *)&v55[16] = v39;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleCertList: skip adding to pendingList, enable %d, len %zu, supported %d", buf, 0x18u);
        }
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      int v11 = 1;
      goto LABEL_135;
    }
    if (gLogObjects && gNumLogObjects >= 58)
    {
      CFStringRef v19 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      CFStringRef v19 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    int v11 = 0;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleCertList: certificate failed verify!", buf, 2u);
      int v11 = 0;
    }
  }
LABEL_135:
  if (gLogObjects && gNumLogObjects >= 58)
  {
    int v40 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    int v40 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
  {
    uint64_t v41 = *(void *)(v3 + 16);
    int v42 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)buf = 138412802;
    *(void *)uint64_t v55 = v41;
    *(_WORD *)&v55[8] = 1024;
    *(_DWORD *)&unsigned char v55[10] = v42;
    *(_WORD *)&v55[14] = 1024;
    *(_DWORD *)&v55[16] = v11;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "_CFArrayApplierFunction_handleCertList: %@, state %d, success %d", buf, 0x18u);
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v43 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    uint64_t v43 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v46 = *(void *)(v3 + 16);
    *(_DWORD *)buf = 138412546;
    *(void *)uint64_t v55 = v46;
    *(_WORD *)&v55[8] = 2112;
    *(void *)&unsigned char v55[10] = cf;
    _os_log_debug_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "_CFArrayApplierFunction_handleCertList: %@, value %@", buf, 0x16u);
    if (v11) {
      return;
    }
  }
  else if (v11)
  {
    return;
  }
LABEL_149:
  if (gLogObjects && gNumLogObjects >= 58)
  {
    int v44 = *(NSObject **)(gLogObjects + 456);
  }
  else
  {
    int v44 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    if (v3) {
      uint64_t v45 = *(void *)(v3 + 16);
    }
    else {
      uint64_t v45 = 0;
    }
    *(_DWORD *)buf = 138412546;
    *(void *)uint64_t v55 = v45;
    *(_WORD *)&v55[8] = 2112;
    *(void *)&unsigned char v55[10] = cf;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleCertList: %@, Failed to handle certList entry %@", buf, 0x16u);
  }
}

uint64_t _audioProductCerts_endpoint_generateAuthChallenge(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (!*(void *)result || !**(void **)result) {
      return 0;
    }
    if (acc_userDefaults_BOOLForKey(@"DisableAACPAuth")) {
      return 1;
    }
    uint64_t v4 = (CFArrayRef *)(v2 + 88);
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v2 + 88));
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects <= 57;
    }
    else {
      BOOL v6 = 1;
    }
    int v7 = !v6;
    if (Count < 1)
    {
      if (v7)
      {
        BOOL v9 = *(NSObject **)(gLogObjects + 456);
      }
      else
      {
        BOOL v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(*(void *)v2 + 16);
        *(_DWORD *)BOOL v18 = 136315394;
        *(void *)&v18[4] = "_audioProductCerts_endpoint_generateAuthChallenge";
        *(_WORD *)&v18[12] = 2112;
        *(void *)&v18[14] = v17;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s: %@, No pending auth certificates", v18, 0x16u);
      }
      return 1;
    }
    if (v7)
    {
      CFStringRef v8 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      CFStringRef v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      _audioProductCerts_endpoint_generateAuthChallenge_cold_7();
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*v4, 0);
    if (ValueAtIndex) {
      MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, ValueAtIndex);
    }
    else {
      MutableCFStringRef Copy = 0;
    }
    if (gLogObjects && gNumLogObjects >= 58)
    {
      CFRange v12 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      CFRange v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      _audioProductCerts_endpoint_generateAuthChallenge_cold_5();
      if (!MutableCopy) {
        goto LABEL_33;
      }
    }
    else if (!MutableCopy)
    {
      goto LABEL_33;
    }
    *(void *)(v2 + 96) = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, MutableCopy);
    if (a2)
    {
      *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)BOOL v18 = v13;
      *(_OWORD *)&uint8_t v18[16] = v13;
      arc4random_buf(v18, 0x20uLL);
      *(void *)(v2 + 104) = CFDataCreate(kCFAllocatorDefault, v18, 32);
    }
    CFDictionaryRemoveValue(MutableCopy, kCFACCProperties_Endpoint_AACP_CertificateInfo_Data);
    int v14 = (const void *)kCFACCProperties_Endpoint_AudioProduct_AuthData;
    CFDictionarySetValue(MutableCopy, kCFACCProperties_Endpoint_AudioProduct_AuthData, *(const void **)(v2 + 104));
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v2 + 96), v14, *(const void **)(v2 + 104));
LABEL_33:
    CFArrayRemoveValueAtIndex(*v4, 0);
    if (gLogObjects && gNumLogObjects >= 58)
    {
      int v15 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      int v15 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
      _audioProductCerts_endpoint_generateAuthChallenge_cold_3();
    }
    if (gLogObjects && gNumLogObjects >= 58)
    {
      CFStringRef v16 = *(NSObject **)(gLogObjects + 456);
    }
    else
    {
      CFStringRef v16 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      _audioProductCerts_endpoint_generateAuthChallenge_cold_1();
      if (!MutableCopy) {
        return 1;
      }
    }
    else if (!MutableCopy)
    {
      return 1;
    }
    CFRelease(MutableCopy);
    return 1;
  }
  return result;
}

BOOL _audioProductCerts_endpoint_handlePrimaryBudMismatch(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)(a1 + 96) = 0;
  uint64_t v4 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Type;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, kCFACCProperties_Endpoint_AACP_CertificateInfo_Type);
  BOOL v6 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial;
  int v7 = CFDictionaryGetValue(theDict, kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial);
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 24)) < 1 || v7 != 0)
  {
    BOOL v9 = 0;
LABEL_13:
    CFArrayRef CertDataFromSerialNumber = (const __CFArray *)platform_auth_createCertDataFromSerialNumber(*(void *)(a1 + 32), v7);
    if (CertDataFromSerialNumber)
    {
      CFArrayRef v14 = CertDataFromSerialNumber;
      CFDictionaryAddValue(v9, kCFACCProperties_Endpoint_AACP_CertificateInfo_Data, CertDataFromSerialNumber);
      CFArrayRef v15 = v14;
    }
    else
    {
      if (CFArrayGetCount(*(CFArrayRef *)(a1 + 16)))
      {
        if (gLogObjects && gNumLogObjects >= 58)
        {
          CFStringRef v16 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          CFStringRef v16 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v19 = *(void *)(*(void *)a1 + 16);
          uint64_t v20 = *(void *)(a1 + 16);
          unsigned int v44 = 136315650;
          uint64_t v45 = "_audioProductCerts_endpoint_handlePrimaryBudMismatch";
          __int16 v46 = 2112;
          uint64_t v47 = v19;
          __int16 v48 = 2112;
          uint64_t v49 = v20;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s: %@, setProperty kCFACCProperties_Endpoint_AudioProduct_CertificateRequired: %@", (uint8_t *)&v44, 0x20u);
        }
        unsigned int v44 = -1431655766;
        if (CFNumberGetValue(Value, kCFNumberIntType, &v44)) {
          *(unsigned char *)(a1 + v44 + 72) = 1;
        }
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), 0);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), 0);
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), ValueAtIndex);
        CFArrayRef Copy = CFArrayCreateCopy(kCFAllocatorDefault, *(CFArrayRef *)(a1 + 16));
        audioProductCerts_endpoint_setProperty((uint64_t *)a1, kCFACCProperties_Endpoint_AACP_CertificateRequired, Copy);
        if (Copy) {
          CFRelease(Copy);
        }
        int v23 = v44;
        if (v44 >= 5) {
          int v23 = 5;
        }
        *(_DWORD *)(a1 + 80) = v23;
        *(_DWORD *)(a1 + 40) = 5;
        return 1;
      }
      CFArrayRef v17 = *(const __CFArray **)(a1 + 24);
      if (!v17 || !CFArrayGetCount(v17)) {
        return 1;
      }
      if (gLogObjects && gNumLogObjects >= 58)
      {
        BOOL v18 = *(NSObject **)(gLogObjects + 456);
      }
      else
      {
        BOOL v18 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = *(void *)(*(void *)a1 + 16);
        uint64_t v26 = *(void *)(a1 + 24);
        unsigned int v44 = 136315650;
        uint64_t v45 = "_audioProductCerts_endpoint_handlePrimaryBudMismatch";
        __int16 v46 = 2112;
        uint64_t v47 = v25;
        __int16 v48 = 2112;
        uint64_t v49 = v26;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%s: %@, setProperty kCFACCProperties_Endpoint_AudioProduct_CertificateList: %@", (uint8_t *)&v44, 0x20u);
      }
      *(_DWORD *)(a1 + 40) = 5;
      CFArrayRef v27 = CFArrayCreateCopy(kCFAllocatorDefault, *(CFArrayRef *)(a1 + 24));
      audioProductCerts_endpoint_setProperty((uint64_t *)a1, kCFACCProperties_Endpoint_AACP_CertificateList, v27);
      if (!v27) {
        return 1;
      }
      CFArrayRef v15 = v27;
    }
    CFRelease(v15);
    return 1;
  }
  CFIndex v10 = 1;
  while (1)
  {
    CFDictionaryRef v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v10 - 1);
    if (!v11)
    {
      *(_DWORD *)(a1 + 40) = 5;
      __int16 v28 = logObjectForModule_7();
      BOOL result = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _audioProductCerts_endpoint_handlePrimaryBudMismatch_cold_3(v28, v29, v30, v31, v32, v33, v34, v35);
      return 0;
    }
    BOOL v9 = v11;
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(v11, v4);
    if (!v12) {
      break;
    }
    int v7 = 0;
    if (CFNumberCompare(Value, v12, 0) == kCFCompareEqualTo) {
      int v7 = CFDictionaryGetValue(v9, v6);
    }
    if (v10 < CFArrayGetCount(*(CFArrayRef *)(a1 + 24)))
    {
      ++v10;
      if (!v7) {
        continue;
      }
    }
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 40) = 5;
  int v36 = logObjectForModule_7();
  BOOL result = os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  _audioProductCerts_endpoint_handlePrimaryBudMismatch_cold_4(v36, v37, v38, v39, v40, v41, v42, v43);
  return 0;
}

uint64_t *_audioProductCerts_endpoint_validateChallenge(uint64_t *result, const __CFDictionary *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *result;
    if (!*result) {
      return 0;
    }
    BOOL result = 0;
    if (a2)
    {
      if (*(void *)v3)
      {
        BOOL valuePtr = 0;
        CFTypeID v5 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Data;
        CFDictionaryRef theDict = (const __CFDictionary *)v2[12];
        CFDataRef Value = (const __CFData *)CFDictionaryGetValue(theDict, kCFACCProperties_Endpoint_AACP_CertificateInfo_Data);
        CFDataRef v94 = (const __CFData *)v2[13];
        CFDataRef theData = Value;
        if (acc_userDefaults_BOOLForKey(@"UseCertDataPropertyForAuth")) {
          int v7 = v5;
        }
        else {
          int v7 = (const void *)kCFACCProperties_Endpoint_AudioProduct_AuthData;
        }
        CFDataRef v8 = (const __CFData *)CFDictionaryGetValue(a2, v7);
        CFDataRef v9 = v8;
        if (v8)
        {
          CFRetain(v8);
          if (CFDataGetLength(v9))
          {
            BytePtr = CFDataGetBytePtr(v9);
            if (BytePtr)
            {
              CFDictionaryRef v11 = BytePtr;
              if (CFDataGetLength(v9) == 72 && *v11 == 48)
              {
                switch(v11[1])
                {
                  case 'B':
                    if (v11[68] || v11[69] || v11[70] || v11[71]) {
                      goto LABEL_27;
                    }
                    CFIndex v12 = 68;
                    goto LABEL_169;
                  case 'C':
                    if (v11[69] || v11[70] || v11[71]) {
                      goto LABEL_27;
                    }
                    CFIndex v12 = 69;
                    goto LABEL_169;
                  case 'D':
                    if (v11[70] || v11[71]) {
                      goto LABEL_27;
                    }
                    CFIndex v12 = 70;
                    goto LABEL_169;
                  case 'E':
                    if (v11[71]) {
                      goto LABEL_27;
                    }
                    CFIndex v12 = 71;
LABEL_169:
                    uint64_t v81 = CFDataGetBytePtr(v9);
                    CFDataRef Copy = CFDataCreate(kCFAllocatorDefault, v81, v12);
                    if (gLogObjects && gNumLogObjects >= 58)
                    {
                      uint64_t v82 = *(NSObject **)(gLogObjects + 456);
                    }
                    else
                    {
                      uint64_t v82 = &_os_log_default;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }
                    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136315650;
                      uint64_t v98 = "_audioProductCerts_createTruncatedSignature";
                      __int16 v99 = 2048;
                      CFIndex Length = CFDataGetLength(v9);
                      __int16 v101 = 2048;
                      *(void *)uint64_t v102 = CFDataGetLength(Copy);
                      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "%s: signature needs truncation! %ld -> %ld", buf, 0x20u);
                    }
                    break;
                  default:
LABEL_27:
                    CFDataRef Copy = CFDataCreateCopy(kCFAllocatorDefault, v9);
                    break;
                }
                if (Copy) {
                  goto LABEL_37;
                }
              }
            }
          }
        }
        if (gLogObjects && gNumLogObjects >= 58)
        {
          CFArrayRef v14 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          CFArrayRef v14 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          _audioProductCerts_endpoint_validateChallenge_cold_17();
        }
        CFDataRef Copy = 0;
        CFDataRef v15 = 0;
        if (v9)
        {
LABEL_37:
          CFRelease(v9);
          CFDataRef v15 = Copy;
        }
        if (gLogObjects && gNumLogObjects >= 58)
        {
          CFStringRef v16 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          CFStringRef v16 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          CFIndex v17 = *(void *)(v3 + 16);
          uint64_t v18 = v2[13];
          *(_DWORD *)buf = 136315906;
          uint64_t v98 = "_audioProductCerts_endpoint_validateChallenge";
          __int16 v99 = 2112;
          CFIndex Length = v17;
          __int16 v101 = 2112;
          *(void *)uint64_t v102 = v18;
          *(_WORD *)&v102[8] = 2112;
          *(void *)uint64_t v103 = v15;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s: %@, verify challenge %@ vs signature %@", buf, 0x2Au);
        }
        CFDataRef v93 = v15;
        CFDataRef v19 = v94;
        if (CFDataGetLength(theData) < 1 || CFDataGetLength(v15) < 1 || CFDataGetLength(v94) < 1) {
          goto LABEL_113;
        }
        if (v94 && CFDataGetLength(v94) == 32)
        {
          CFDataRef v20 = (const __CFData *)platform_systemInfo_copyBluetoothMACAddressData();
          CFDataRef v21 = v20;
          if (v20)
          {
            if (CFDataGetLength(v20) == 6)
            {
              CFIndex v22 = CFDataGetLength(v94);
              CFMutableArrayRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, v22 + 24);
              if (Mutable)
              {
                int v24 = Mutable;
                CFDataAppendBytes(Mutable, (const UInt8 *)"auth pairing state", 18);
                uint64_t v25 = CFDataGetBytePtr(v94);
                CFIndex v26 = CFDataGetLength(v94);
                CFDataAppendBytes(v24, v25, v26);
                CFArrayRef v27 = CFDataGetBytePtr(v21);
                CFIndex v28 = CFDataGetLength(v21);
                CFDataAppendBytes(v24, v27, v28);
                CFRelease(v21);
                if (!acc_platform_packetLogging_isLogPacketDataAsMsg())
                {
                  uint64_t v90 = v2;
                  int v29 = CFDataGetLength(theData);
                  uint64_t v30 = CFDataGetBytePtr(theData);
                  int v86 = CFDataGetLength(v94);
                  CFDataRef v91 = v24;
                  int v87 = CFDataGetLength(v24);
                  int v88 = CFDataGetLength(v9);
                  int v89 = CFDataGetLength(v15);
                  if (v29 >= 1)
                  {
                    int v31 = 0;
                    int v32 = 500;
                    uint64_t v85 = 134218240;
                    do
                    {
                      if (v32 >= v29 - v31) {
                        int v32 = v29 - v31;
                      }
                      uint64_t v33 = gLogObjects;
                      int v34 = gNumLogObjects;
                      if (gLogObjects && gNumLogObjects >= 58)
                      {
                        uint64_t v35 = *(NSObject **)(gLogObjects + 456);
                      }
                      else
                      {
                        uint64_t v35 = &_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 134218240;
                          uint64_t v98 = (const char *)v33;
                          __int16 v99 = 1024;
                          LODWORD(Length) = v34;
                          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                          uint64_t v35 = &_os_log_default;
                        }
                      }
                      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
                      {
                        CFIndex v36 = *(void *)(v3 + 16);
                        *(_DWORD *)buf = 136316674;
                        uint64_t v98 = "_audioProductCerts_endpoint_validateChallenge";
                        __int16 v99 = 2112;
                        CFIndex Length = v36;
                        __int16 v101 = 1024;
                        *(_DWORD *)uint64_t v102 = v31;
                        *(_WORD *)&v102[4] = 1024;
                        *(_DWORD *)&v102[6] = v29;
                        *(_WORD *)uint64_t v103 = 1024;
                        *(_DWORD *)&v103[2] = v32;
                        *(_WORD *)&v103[6] = 1040;
                        *(_DWORD *)&v103[8] = v32;
                        __int16 v104 = 2096;
                        uint64_t v105 = v30;
                        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%s: %@, certificate (%d of %d, show %d bytes):\n%{coreacc:bytes}.*P", buf, 0x38u);
                      }
                      v31 += v32;
                      v30 += v32;
                    }
                    while (v31 < v29);
                  }
                  if (gLogObjects && gNumLogObjects >= 58)
                  {
                    uint64_t v37 = *(NSObject **)(gLogObjects + 456);
                    uint64_t v2 = v90;
                  }
                  else
                  {
                    uint64_t v37 = &_os_log_default;
                    uint64_t v2 = v90;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                  {
                    CFIndex v38 = *(void *)(v3 + 16);
                    uint64_t v39 = CFDataGetBytePtr(v94);
                    *(_DWORD *)buf = 136316162;
                    uint64_t v98 = "_audioProductCerts_endpoint_validateChallenge";
                    __int16 v99 = 2112;
                    CFIndex Length = v38;
                    __int16 v101 = 1024;
                    *(_DWORD *)uint64_t v102 = v86;
                    *(_WORD *)&v102[4] = 1040;
                    *(_DWORD *)&v102[6] = v86;
                    *(_WORD *)uint64_t v103 = 2096;
                    *(void *)&v103[2] = v39;
                    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%s: %@, nonce (%d bytes):\n%{coreacc:bytes}.*P", buf, 0x2Cu);
                  }
                  if (gLogObjects && gNumLogObjects >= 58)
                  {
                    uint64_t v40 = *(NSObject **)(gLogObjects + 456);
                  }
                  else
                  {
                    uint64_t v40 = &_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
                  {
                    CFIndex v41 = *(void *)(v3 + 16);
                    uint64_t v42 = CFDataGetBytePtr(v91);
                    *(_DWORD *)buf = 136316162;
                    uint64_t v98 = "_audioProductCerts_endpoint_validateChallenge";
                    __int16 v99 = 2112;
                    CFIndex Length = v41;
                    __int16 v101 = 1024;
                    *(_DWORD *)uint64_t v102 = v87;
                    *(_WORD *)&v102[4] = 1040;
                    *(_DWORD *)&v102[6] = v87;
                    *(_WORD *)uint64_t v103 = 2096;
                    *(void *)&v103[2] = v42;
                    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "%s: %@, challenge (%d bytes):\n%{coreacc:bytes}.*P", buf, 0x2Cu);
                  }
                  if (gLogObjects && gNumLogObjects >= 58)
                  {
                    uint64_t v43 = *(NSObject **)(gLogObjects + 456);
                    int v24 = v91;
                  }
                  else
                  {
                    uint64_t v43 = &_os_log_default;
                    int v24 = v91;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                  {
                    CFIndex v44 = *(void *)(v3 + 16);
                    uint64_t v45 = CFDataGetBytePtr(v9);
                    *(_DWORD *)buf = 136316162;
                    uint64_t v98 = "_audioProductCerts_endpoint_validateChallenge";
                    __int16 v99 = 2112;
                    CFIndex Length = v44;
                    int v24 = v91;
                    __int16 v101 = 1024;
                    *(_DWORD *)uint64_t v102 = v88;
                    *(_WORD *)&v102[4] = 1040;
                    *(_DWORD *)&v102[6] = v88;
                    *(_WORD *)uint64_t v103 = 2096;
                    *(void *)&v103[2] = v45;
                    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "%s: %@, origSig (%d bytes):\n%{coreacc:bytes}.*P", buf, 0x2Cu);
                  }
                  if (gLogObjects && gNumLogObjects >= 58)
                  {
                    __int16 v46 = *(NSObject **)(gLogObjects + 456);
                    CFDataRef v15 = v93;
                  }
                  else
                  {
                    __int16 v46 = &_os_log_default;
                    CFDataRef v15 = v93;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }
                  CFDataRef v19 = v94;
                  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                  {
                    CFIndex v47 = *(void *)(v3 + 16);
                    __int16 v48 = CFDataGetBytePtr(v15);
                    *(_DWORD *)buf = 136316162;
                    uint64_t v98 = "_audioProductCerts_endpoint_validateChallenge";
                    __int16 v99 = 2112;
                    CFIndex Length = v47;
                    int v24 = v91;
                    __int16 v101 = 1024;
                    *(_DWORD *)uint64_t v102 = v89;
                    *(_WORD *)&v102[4] = 1040;
                    *(_DWORD *)&v102[6] = v89;
                    *(_WORD *)uint64_t v103 = 2096;
                    *(void *)&v103[2] = v48;
                    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "%s: %@, signature (%d bytes):\n%{coreacc:bytes}.*P", buf, 0x2Cu);
                  }
                }
                acc_platform_packetLogging_logData(v3, @"ChallengeVerify: nonce", @"AudioProductCerts", v19, -1);
                acc_platform_packetLogging_logData(v3, @"ChallengeVerify: verify nonce", @"AudioProductCerts", v24, -1);
                acc_platform_packetLogging_logData(v3, @"ChallengeVerify: orig signature", @"AudioProductCerts", v9, -1);
                acc_platform_packetLogging_logData(v3, @"ChallengeVerify: signature", @"AudioProductCerts", v15, -1);
                unsigned int v49 = platform_auth_verifyNonceSignature((uint64_t)theData, (uint64_t)v24, (uint64_t)v15);
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  __int16 v50 = *(NSObject **)(gLogObjects + 456);
                }
                else
                {
                  __int16 v50 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                {
                  CFIndex v51 = *(void *)(v3 + 16);
                  *(_DWORD *)buf = 136315650;
                  uint64_t v98 = "_audioProductCerts_endpoint_validateChallenge";
                  __int16 v99 = 2112;
                  CFIndex Length = v51;
                  __int16 v101 = 1024;
                  *(_DWORD *)uint64_t v102 = v49;
                  _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "%s: %@, initial verify signature, passed %d", buf, 0x1Cu);
                }
                if (v49)
                {
                  CFRelease(v24);
LABEL_103:
                  int v52 = 2;
                  goto LABEL_114;
                }
                unsigned int v53 = platform_auth_verifyNonceSignatureForType((uint64_t)theData, (uint64_t)v24, (uint64_t)v15, 4u);
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  uint64_t v54 = *(NSObject **)(gLogObjects + 456);
                }
                else
                {
                  uint64_t v54 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
                {
                  CFIndex v55 = *(void *)(v3 + 16);
                  *(_DWORD *)buf = 136315906;
                  uint64_t v98 = "_audioProductCerts_endpoint_validateChallenge";
                  __int16 v99 = 2112;
                  CFIndex Length = v55;
                  __int16 v101 = 1024;
                  *(_DWORD *)uint64_t v102 = 4;
                  *(_WORD *)&v102[4] = 1024;
                  *(_DWORD *)&v102[6] = v53;
                  _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "%s: %@, second verify signature, for type %d, passed %d", buf, 0x22u);
                  CFRelease(v24);
                  if (v53) {
                    goto LABEL_103;
                  }
                }
                else
                {
                  CFRelease(v24);
                  if (v53) {
                    goto LABEL_103;
                  }
                }
LABEL_113:
                int v52 = 1;
LABEL_114:
                *((_DWORD *)v2 + 28) = v52;
                if (acc_userDefaults_BOOLForKey(@"ForceAuthFail")) {
                  *((_DWORD *)v2 + 28) = 1;
                }
                if (acc_userDefaults_BOOLForKey(@"IgnoreAACPAuthStatus"))
                {
                  if (gLogObjects && gNumLogObjects >= 58)
                  {
                    uint64_t v56 = *(NSObject **)(gLogObjects + 456);
                  }
                  else
                  {
                    uint64_t v56 = &_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }
                  if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
                  {
                    CFIndex v57 = *(void *)(v3 + 16);
                    int v58 = *((_DWORD *)v2 + 28);
                    *(_DWORD *)buf = 136315906;
                    uint64_t v98 = "_audioProductCerts_endpoint_validateChallenge";
                    __int16 v99 = 2112;
                    CFIndex Length = v57;
                    __int16 v101 = 1024;
                    *(_DWORD *)uint64_t v102 = v58;
                    *(_WORD *)&v102[4] = 1024;
                    *(_DWORD *)&v102[6] = valuePtr;
                    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "%s: %@, Skip setting auth state: authState %{coreacc:ACCAuthInfo_Status_t}d) -> %d) ", buf, 0x22u);
                  }
                }
                else
                {
                  acc_connection_setAuthStatus(*(void *)v3, 1, *((_DWORD *)v2 + 28));
                }
                int v59 = *((_DWORD *)v2 + 28);
                BOOL valuePtr = v59 == 2;
                uint64_t v60 = gLogObjects;
                int v61 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  uint64_t v62 = *(NSObject **)(gLogObjects + 456);
                  int v63 = v59;
                }
                else
                {
                  uint64_t v62 = &_os_log_default;
                  int v63 = v59;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134218240;
                    uint64_t v98 = (const char *)v60;
                    __int16 v99 = 1024;
                    LODWORD(Length) = v61;
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                    int v63 = *((_DWORD *)v2 + 28);
                  }
                }
                if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
                {
                  CFIndex v69 = *(void *)(v3 + 16);
                  *(_DWORD *)buf = 136315906;
                  uint64_t v98 = "_audioProductCerts_endpoint_validateChallenge";
                  __int16 v99 = 2112;
                  CFIndex Length = v69;
                  __int16 v101 = 1024;
                  *(_DWORD *)uint64_t v102 = v63;
                  *(_WORD *)&v102[4] = 1024;
                  *(_DWORD *)&v102[6] = v59 == 2;
                  _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "%s: %@, authState to value %{coreacc:ACCAuthInfo_Status_t}d) -> %d) ", buf, 0x22u);
                  int v63 = *((_DWORD *)v2 + 28);
                }
                if (v63 == 3)
                {
                  uint64_t v70 = "AUTH TIMEOUT";
                  uint64_t v71 = "ACCAuthProtocol accessory authentication Timed Out!";
                }
                else
                {
                  if (v63 != 2)
                  {
                    acc_platform_packetLogging_logEvent(v3, "AUTH FAILED", (uint64_t)"ACCAuthProtocol accessory authentication Failed!", v64, v65, v66, v67, v68, v85);
                    CFDictionaryGetValue(theDict, kCFACCProperties_Endpoint_AudioProduct_AuthSerial);
                    CFDataRef v72 = v93;
                    if ((platform_auth_removeCertDataEntryFromCache() & 1) == 0)
                    {
                      if (gLogObjects && gNumLogObjects >= 58)
                      {
                        uint64_t v73 = *(NSObject **)(gLogObjects + 456);
                      }
                      else
                      {
                        uint64_t v73 = &_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }
                      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "_CFArrayApplierFunction_handleSerialList: failed to remove certificate from cache!", buf, 2u);
                      }
                    }
                    goto LABEL_145;
                  }
                  uint64_t v70 = "AUTH PASSED";
                  uint64_t v71 = "ACCAuthProtocol accessory authentication Passed!";
                }
                acc_platform_packetLogging_logEvent(v3, v70, (uint64_t)v71, v64, v65, v66, v67, v68, v85);
                CFDataRef v72 = v93;
LABEL_145:
                CFNumberRef v74 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
                if (v74)
                {
                  CFNullRef v75 = v74;
                  if (acc_userDefaults_BOOLForKey(@"IgnoreAACPAuthStatus"))
                  {
                    if (gLogObjects && gNumLogObjects >= 58)
                    {
                      uint64_t v76 = *(NSObject **)(gLogObjects + 456);
                    }
                    else
                    {
                      uint64_t v76 = &_os_log_default;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }
                    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
                    {
                      CFIndex v79 = *(void *)(v3 + 16);
                      int v80 = *((_DWORD *)v2 + 28);
                      *(_DWORD *)buf = 136315906;
                      uint64_t v98 = "_audioProductCerts_endpoint_validateChallenge";
                      __int16 v99 = 2112;
                      CFIndex Length = v79;
                      __int16 v101 = 1024;
                      *(_DWORD *)uint64_t v102 = v80;
                      *(_WORD *)&v102[4] = 1024;
                      *(_DWORD *)&v102[6] = valuePtr;
                      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "%s: %@, Skip setting auth state property: authState %{coreacc:ACCAuthInfo_Status_t}d) -> %d) ", buf, 0x22u);
                    }
                    CFStringRef v78 = @"__Ignored_AuthState";
                  }
                  else
                  {
                    CFStringRef v78 = (const __CFString *)kCFACCProperties_Endpoint_AudioProduct_AuthState;
                  }
                  acc_endpoint_setProperty((pthread_mutex_t *)v3, v78, v75);
                  CFRelease(v75);
                }
                else
                {
                  if (gLogObjects && gNumLogObjects >= 58)
                  {
                    uint64_t v77 = *(NSObject **)(gLogObjects + 456);
                  }
                  else
                  {
                    uint64_t v77 = &_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }
                  if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR)) {
                    _audioProductCerts_endpoint_validateChallenge_cold_1();
                  }
                }
                if (v72) {
                  CFRelease(v72);
                }
                return (uint64_t *)1;
              }
            }
          }
        }
        else
        {
          CFDataRef v21 = 0;
        }
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v83 = *(NSObject **)(gLogObjects + 456);
        }
        else
        {
          uint64_t v83 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
        {
          _audioProductCerts_endpoint_validateChallenge_cold_8();
          if (!v21)
          {
LABEL_186:
            if (gLogObjects && gNumLogObjects >= 58)
            {
              uint64_t v84 = *(NSObject **)(gLogObjects + 456);
            }
            else
            {
              uint64_t v84 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
              _audioProductCerts_endpoint_validateChallenge_cold_6();
            }
            goto LABEL_113;
          }
        }
        else if (!v21)
        {
          goto LABEL_186;
        }
        CFRelease(v21);
        goto LABEL_186;
      }
    }
  }
  return result;
}

void OUTLINED_FUNCTION_7_3(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_10_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_11_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x20u);
}

uint64_t oobPairing_control_sendPairingInfo(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    BOOL result = 0;
    if (a2)
    {
      if (*v3)
      {
        if (*(_DWORD *)a2 == 3)
        {
          if (gLogObjects && gNumLogObjects >= 11)
          {
            uint64_t v4 = *(NSObject **)(gLogObjects + 80);
          }
          else
          {
            uint64_t v4 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v5 = v3[1];
            uint64_t v6 = *(void *)(*v3 + 16);
            int v10 = 138412546;
            uint64_t v11 = v6;
            __int16 v12 = 2112;
            uint64_t v13 = v5;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Send OOBPairing Info for endpoint: %@ bleUUID: %@", (uint8_t *)&v10, 0x16u);
          }
          int v7 = oobPairing_bleToOobPairingType(*(_DWORD *)(a2 + 16));
          BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a2 + 24));
          unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 24));
          oobPairing_endpoint_sendOutgoingData((uint64_t)v3, 2u, v7, BytePtr, Length);
          platform_blePairing_deleteParams((void *)a2);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t oobPairing_control_sendPairingData(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    BOOL result = 0;
    if (a2)
    {
      if (*v3)
      {
        if (*(_DWORD *)a2 == 2)
        {
          if (gLogObjects && gNumLogObjects >= 11)
          {
            uint64_t v4 = *(NSObject **)(gLogObjects + 80);
          }
          else
          {
            uint64_t v4 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v5 = v3[1];
            uint64_t v6 = *(void *)(*v3 + 16);
            int v10 = 138412546;
            uint64_t v11 = v6;
            __int16 v12 = 2112;
            uint64_t v13 = v5;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Send OOBPairing Data for endpoint: %@ bleUUID: %@", (uint8_t *)&v10, 0x16u);
          }
          int v7 = oobPairing_bleToOobPairingType(*(_DWORD *)(a2 + 16));
          BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a2 + 24));
          unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 24));
          oobPairing_endpoint_sendOutgoingData((uint64_t)v3, 3u, v7, BytePtr, Length);
          platform_blePairing_deleteParams((void *)a2);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t oobPairing_control_start(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    BOOL result = 0;
    if (a2)
    {
      if (*v3)
      {
        if (*(_DWORD *)a2)
        {
          return 0;
        }
        else
        {
          if (gLogObjects && gNumLogObjects >= 11)
          {
            uint64_t v4 = *(NSObject **)(gLogObjects + 80);
          }
          else
          {
            uint64_t v4 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v5 = v3[1];
            uint64_t v6 = *(void *)(*v3 + 16);
            int v7 = 138412546;
            uint64_t v8 = v6;
            __int16 v9 = 2112;
            uint64_t v10 = v5;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "OOBPairing start for endpoint: %@ bleUUID: %@", (uint8_t *)&v7, 0x16u);
          }
          oobPairing_endpoint_sendOutgoingData((uint64_t)v3, 0, 2, 0, 0);
          platform_blePairing_deleteParams(a2);
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t oobPairing_control_stop(void *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = 0;
  if (!a2 || !*a1) {
    return v3;
  }
  if (*(_DWORD *)a2 != 4) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 11)
  {
    uint64_t v5 = *(NSObject **)(gLogObjects + 80);
  }
  else
  {
    uint64_t v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[1];
    uint64_t v7 = *(void *)(*a1 + 16);
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "OOBPairing stop for endpoint: %@ bleUUID: %@", (uint8_t *)&v9, 0x16u);
  }
  uint64_t v3 = 1;
  oobPairing_endpoint_sendOutgoingData((uint64_t)a1, 1u, 2, 0, 0);
  platform_blePairing_deleteParams(a2);
  return v3;
}

uint64_t oobPairing_control_deviceStateUpdate(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v2 = (void *)result;
    if (*(void *)result)
    {
      if (gLogObjects) {
        BOOL v4 = gNumLogObjects < 11;
      }
      else {
        BOOL v4 = 1;
      }
      if (v4)
      {
        uint64_t v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        uint64_t v5 = *(NSObject **)(gLogObjects + 80);
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = v2[1];
        uint64_t v7 = *(void *)(*v2 + 16);
        int v8 = 138412546;
        uint64_t v9 = v7;
        __int16 v10 = 2112;
        uint64_t v11 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "OOBPairing deviceStateUpdate for endpoint: %@ bleUUID: %@", (uint8_t *)&v8, 0x16u);
      }
      platform_blePairing_deleteParams(a2);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t loggingProtocol_getCurrentTimeInNanoseconds()
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  clock_gettime(_CLOCK_REALTIME, &v1);
  return v1.tv_nsec + 1000000000 * v1.tv_sec;
}

unint64_t systemInfo_getCurrentUnixTime()
{
  BOOL v0 = +[NSDate date];
  [v0 timeIntervalSince1970];
  double v2 = v1;

  unint64_t v3 = vcvtad_u64_f64(v2);
  if (v2 <= 0.0) {
    return 0;
  }
  else {
    return v3;
  }
}

unint64_t systemInfo_getCurrentUnixTimeMS()
{
  BOOL v0 = +[NSDate date];
  [v0 timeIntervalSince1970];
  double v2 = v1;

  unint64_t v3 = vcvtad_u64_f64(v2 * 1000.0);
  if (v2 <= 0.0) {
    return 0;
  }
  else {
    return v3;
  }
}

uint64_t systemInfo_isInternalBuild()
{
  if (systemInfo_isInternalBuild_onceToken != -1) {
    dispatch_once(&systemInfo_isInternalBuild_onceToken, &__block_literal_global_8);
  }
  return systemInfo_isInternalBuild_internalBuild;
}

void __systemInfo_isInternalBuild_block_invoke(id a1)
{
  systemInfo_isInternalBuild_internalBuild = MGGetBoolAnswer();
}

uint64_t systemInfo_systemSupportsWAPI()
{
  if (systemInfo_systemSupportsWAPI_onceToken != -1) {
    dispatch_once(&systemInfo_systemSupportsWAPI_onceToken, &__block_literal_global_16);
  }
  return systemInfo_systemSupportsWAPI_supportsWAPI;
}

void __systemInfo_systemSupportsWAPI_block_invoke(id a1)
{
  systemInfo_systemSupportsWAPI_supportsWAPI = MGGetBoolAnswer();
}

uint64_t systemInfo_copyDeviceClass()
{
  return MGCopyAnswer();
}

const void *systemInfo_copyProductType()
{
  BOOL result = (const void *)MGCopyAnswer();
  if (result)
  {
    double v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFStringGetTypeID()) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

void platform_navigation_accessoryAttached(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    BOOL v4 = *(id *)(gLogObjects + 368);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    uint64_t v8 = a1;
    __int16 v9 = 2112;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "navigation accessoryAttached: %@, componentList=%@", (uint8_t *)&v7, 0x16u);
  }

  uint64_t v6 = +[ACCNavigationServer sharedServer];
  [v6 accessoryNavigationAttached:a1 componentList:a2];
}

void platform_navigation_accessoryDetached(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    CFTypeID v2 = *(id *)(gLogObjects + 368);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFTypeID v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "navigation accessoryDetached: %@", (uint8_t *)&v5, 0xCu);
  }

  BOOL v4 = +[ACCNavigationServer sharedServer];
  [v4 accessoryNavigationDetached:a1];
}

void platform_navigation_startRouteGuidance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v6 = *(id *)(gLogObjects + 368);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412802;
    uint64_t v10 = a1;
    __int16 v11 = 2112;
    uint64_t v12 = a2;
    __int16 v13 = 2048;
    uint64_t v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "navigation startRouteGuidance: %@, componentIdList=%@, options=%llxh", (uint8_t *)&v9, 0x20u);
  }

  uint64_t v8 = +[ACCNavigationServer sharedServer];
  [v8 accessoryNavigationStartRouteGuidance:a1 componentIdList:a2 options:a3];
}

void platform_navigation_stopRouteGuidance(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    BOOL v4 = *(id *)(gLogObjects + 368);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    uint64_t v8 = a1;
    __int16 v9 = 2112;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "navigation stopRouteGuidance: %@, componentIdList=%@", (uint8_t *)&v7, 0x16u);
  }

  uint64_t v6 = +[ACCNavigationServer sharedServer];
  [v6 accessoryNavigationStopRouteGuidance:a1 componentIdList:a2];
}

void platform_navigation_objectDetectionUpdateInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v6 = *(id *)(gLogObjects + 368);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412802;
    uint64_t v10 = a1;
    __int16 v11 = 2112;
    uint64_t v12 = a2;
    __int16 v13 = 2112;
    uint64_t v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "navigation objectDetectionUpdateInfo: %@, componentIdList=%@, updateInfo=%@", (uint8_t *)&v9, 0x20u);
  }

  uint64_t v8 = +[ACCNavigationServer sharedServer];
  [v8 accessoryNavigationObjectDetectionUpdateInfo:a1 componentIdList:a2 updateInfo:a3];
}

void platform_navigation_routeGuidanceUpdateHandler(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v8 = *(id *)(gLogObjects + 368);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412802;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v6;
    __int16 v16 = 2112;
    id v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "navigation routeGuidanceUpdateHandler: %@, componentIdList=%@, updateInfo=%@", (uint8_t *)&v12, 0x20u);
  }

  uint64_t v10 = malloc_type_calloc(1uLL, 0x18uLL, 0x1060040CA828048uLL);
  *(_DWORD *)uint64_t v10 = 0;
  if (v6) {
    id v11 = v6;
  }
  v10[1] = v6;
  _DWORD v10[2] = v7;
  if ((accFeatureHandlers_invokeHandler(v5, 43, (uint64_t)v10) & 1) == 0) {
    platform_navigation_deleteParams(v10);
  }
}

void platform_navigation_deleteParams(void *a1)
{
  if (a1)
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        CFTypeID v2 = (const void *)a1[2];
        if (v2) {
          CFRelease(v2);
        }
        goto LABEL_5;
      case 4:
LABEL_5:
        id v3 = (const void *)a1[1];
        if (v3) {
          CFRelease(v3);
        }
        break;
      default:
        break;
    }
    free(a1);
  }
}

void platform_navigation_routeGuidanceManeuverUpdateHandler(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v8 = *(id *)(gLogObjects + 368);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412802;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v6;
    __int16 v16 = 2112;
    id v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "navigation routeGuidanceManeuverUpdateHandler: %@, componentIdList=%@, updateInfo=%@", (uint8_t *)&v12, 0x20u);
  }

  uint64_t v10 = malloc_type_calloc(1uLL, 0x18uLL, 0x1060040CA828048uLL);
  *(_DWORD *)uint64_t v10 = 1;
  if (v6) {
    id v11 = v6;
  }
  v10[1] = v6;
  _DWORD v10[2] = v7;
  if ((accFeatureHandlers_invokeHandler(v5, 44, (uint64_t)v10) & 1) == 0) {
    platform_navigation_deleteParams(v10);
  }
}

void platform_navigation_laneGuidanceInfoUpdateHandler(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v8 = *(id *)(gLogObjects + 368);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412802;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v6;
    __int16 v16 = 2112;
    id v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "navigation laneGuidanceInfoUpdateHandler: %@, componentIdList=%@, updateInfo=%@", (uint8_t *)&v12, 0x20u);
  }

  uint64_t v10 = malloc_type_calloc(1uLL, 0x18uLL, 0x1060040CA828048uLL);
  *(_DWORD *)uint64_t v10 = 2;
  if (v6) {
    id v11 = v6;
  }
  v10[1] = v6;
  _DWORD v10[2] = v7;
  if ((accFeatureHandlers_invokeHandler(v5, 45, (uint64_t)v10) & 1) == 0) {
    platform_navigation_deleteParams(v10);
  }
}

void platform_navigation_startObjectDetectionHandler(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v8 = *(id *)(gLogObjects + 368);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v13 = 138412802;
    id v14 = v5;
    __int16 v15 = 2112;
    id v16 = v6;
    __int16 v17 = 2112;
    id v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "navigation startObjectDetectionHandler: %@, componentIdList=%@, objectTypeList=%@", (uint8_t *)&v13, 0x20u);
  }

  uint64_t v10 = malloc_type_calloc(1uLL, 0x18uLL, 0x1060040CA828048uLL);
  *(_DWORD *)uint64_t v10 = 3;
  if (v6) {
    id v11 = v6;
  }
  v10[1] = v6;
  if (v7) {
    id v12 = v7;
  }
  _DWORD v10[2] = v7;
  if ((accFeatureHandlers_invokeHandler(v5, 46, (uint64_t)v10) & 1) == 0) {
    platform_navigation_deleteParams(v10);
  }
}

void platform_navigation_stopObjectDetectionHandler(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (gLogObjects && gNumLogObjects >= 47)
  {
    id v5 = *(id *)(gLogObjects + 368);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v5 = &_os_log_default;
    id v6 = &_os_log_default;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412546;
    id v10 = v3;
    __int16 v11 = 2112;
    id v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "navigation stopObjectDetectionHandler: %@, componentIdList=%@", (uint8_t *)&v9, 0x16u);
  }

  id v7 = malloc_type_calloc(1uLL, 0x18uLL, 0x1060040CA828048uLL);
  *(_DWORD *)id v7 = 4;
  if (v4) {
    id v8 = v4;
  }
  v7[1] = v4;
  if ((accFeatureHandlers_invokeHandler(v3, 47, (uint64_t)v7) & 1) == 0) {
    platform_navigation_deleteParams(v7);
  }
}

id platform_navigation_routeGuidanceInfoKeyForType(uint64_t a1)
{
  return +[ACCNavigationRouteGuidanceUpdateInfo keyForType:a1];
}

id platform_navigation_maneuverInfoKeyForType(uint64_t a1)
{
  return +[ACCNavigationManeuverUpdateInfo keyForType:a1];
}

id platform_navigation_laneGuidanceInfoKeyForType(uint64_t a1)
{
  return +[ACCNavigationLaneGuidanceInfo keyForType:a1];
}

id platform_navigation_laneInfoKeyForType(uint64_t a1)
{
  return +[ACCNavigationLaneGuidanceLaneInfo keyForType:a1];
}

__CFDictionary *platform_navigation_createDisplayComponentDict(uint64_t a1, __int16 a2, const void *a3)
{
  __int16 valuePtr = a2;
  if (!a1) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(Mutable, ACCNav_DispComp_ComponentID, v5);
    CFDictionarySetValue(Mutable, ACCNav_DispComp_Name, a3);
    CFRelease(v5);
  }
  return Mutable;
}

void platform_navigation_displayComponentAddMaxCurrentRoadNameLength(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxCurRoadNameLength, v3);
    CFRelease(v3);
  }
}

void platform_navigation_displayComponentAddMaxDestinationNameLength(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxDestinationNameLength, v3);
    CFRelease(v3);
  }
}

void platform_navigation_displayComponentAddMaxAfterManeuverRoadNameLength(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxAfterManeuverRoadNameLength, v3);
    CFRelease(v3);
  }
}

void platform_navigation_displayComponentAddManeuverDescriptionLength(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxManeuverDescriptionLength, v3);
    CFRelease(v3);
  }
}

void platform_navigation_displayComponentAddGuidanceManeuverCapacity(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxMGuidanceManeuverCapacity, v3);
    CFRelease(v3);
  }
}

void platform_navigation_displayComponentAddLaneGuidanceDescriptionLength(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxLaneGuidanceDescriptionLength, v3);
    CFRelease(v3);
  }
}

void platform_navigation_displayComponentAddLaneGuidanceCapacity(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxLaneGuidanceStorageCapacity, v3);
    CFRelease(v3);
  }
}

CFDictionaryRef platform_navigation_objectDetectionComponentGetSupportedTypes(const __CFDictionary *result)
{
  if (result) {
    return (const __CFDictionary *)CFDictionaryGetValue(result, ACCNav_RODComp_SupportedTypes);
  }
  return result;
}

CFMutableDictionaryRef platform_navigation_createObjectDetectionInfoDict()
{
  return CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
}

const void *platform_navigation_objectDetectionInfoGetItem(const __CFDictionary *a1, uint64_t a2)
{
  id v3 = +[ACCNavigationRoadObjectDetectionInfo keyForType:a2];
  if (!a1 || !v3) {
    return 0;
  }

  return CFDictionaryGetValue(a1, v3);
}

void platform_navigation_objectDetectionInfoAddComponentID(const __CFDictionary *a1, __int16 a2)
{
  if (a1)
  {
    __int16 valuePtr = a2;
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    _addDictionaryArrayEntryValue(a1, ACCNav_RODUpdate_ID, v3);
    CFRelease(v3);
  }
}

void platform_navigation_objectDetectionInfoSetTimestamp(__CFDictionary *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t valuePtr = a2;
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
    _replaceDictionaryNumberValue(a1, ACCNav_RODUpdate_Timestamp, v3);
    CFRelease(v3);
  }
}

void _replaceDictionaryNumberValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  if (key)
  {
    if (value) {
      CFDictionarySetValue(theDict, key, value);
    }
    else {
      CFDictionaryRemoveValue(theDict, key);
    }
  }
}

void platform_navigation_objectDetectionInfoSetEgoSpeed(__CFDictionary *a1, int a2)
{
  if (a1)
  {
    int valuePtr = a2;
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    _replaceDictionaryNumberValue(a1, ACCNav_RODUpdate_EgoSpeed, v3);
    CFRelease(v3);
  }
}

void platform_navigation_objectDetectionInfoSetEgoYawRate(__CFDictionary *a1, float a2)
{
  if (a1)
  {
    float valuePtr = a2;
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
    _replaceDictionaryNumberValue(a1, ACCNav_RODUpdate_EgoYawRate, v3);
    CFRelease(v3);
  }
}

void platform_navigation_objectDetectionInfoAddRoadSign(const __CFDictionary *a1, const void *a2)
{
  if (a1)
  {
    if (a2) {
      _addDictionaryArrayEntryValue(a1, ACCNav_RODUpdate_RoadSign, a2);
    }
  }
}

void platform_navigation_objectDetectionInfoAddRoadLane(const __CFDictionary *a1, const void *a2)
{
  if (a1)
  {
    if (a2) {
      _addDictionaryArrayEntryValue(a1, ACCNav_RODUpdate_RoadLane, a2);
    }
  }
}

void platform_navigation_objectDetectionInfoAddRoadObject(const __CFDictionary *a1, const void *a2)
{
  if (a1)
  {
    if (a2) {
      _addDictionaryArrayEntryValue(a1, ACCNav_RODUpdate_RoadObject, a2);
    }
  }
}

CFMutableDictionaryRef platform_navigation_createObjectDetectionRoadSignDict(CFMutableDictionaryRef result)
{
  if (result) {
    return CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  return result;
}

void platform_navigation_objectDetectionRoadSignSetInfo(__CFDictionary *a1, uint64_t a2, const void *a3)
{
  if (a1)
  {
    id v5 = +[ACCNavigationRoadObjectRoadSignInfo keyForType:a2];
    if (a3)
    {
      CFDictionarySetValue(a1, v5, a3);
    }
    else
    {
      CFDictionaryRemoveValue(a1, v5);
    }
  }
}

void platform_navigation_objectDetectionRoadLaneSetInfo(__CFDictionary *a1, uint64_t a2, const void *a3)
{
  if (a1)
  {
    id v5 = +[ACCNavigationRoadObjectRoadLaneInfo keyForType:a2];
    if (a3)
    {
      CFDictionarySetValue(a1, v5, a3);
    }
    else
    {
      CFDictionaryRemoveValue(a1, v5);
    }
  }
}

void platform_navigation_objectDetectionRoadObjectSetInfo(__CFDictionary *a1, uint64_t a2, const void *a3)
{
  if (a1)
  {
    id v5 = +[ACCNavigationRoadObjectRoadObjectInfo keyForType:a2];
    if (a3)
    {
      CFDictionarySetValue(a1, v5, a3);
    }
    else
    {
      CFDictionaryRemoveValue(a1, v5);
    }
  }
}

void platform_navigation_incrementUserCount()
{
  BOOL v0 = +[ACCNavigationServer sharedServer];
  [v0 incrementUserCount];

  double v1 = +[ACCNavigationServer sharedServer];
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = +[ACCFeaturePluginManager sharedManager];
    [v3 startPlugInsWithClasses:&off_100223260];
  }
}

void platform_navigation_decrementUserCount()
{
  id v0 = +[ACCNavigationServer sharedServer];
  [v0 decrementUserCount];
}

void _addDictionaryArrayEntryValue(const __CFDictionary *a1, const void *a2, const void *a3)
{
  if (a2 && a3)
  {
    CFDataRef Value = (__CFArray *)CFDictionaryGetValue(a1, a2);
    if (Value
      || (CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks),
          CFDictionarySetValue(a1, a2, Mutable),
          CFRelease(Mutable),
          (CFDataRef Value = (__CFArray *)CFDictionaryGetValue(a1, a2)) != 0))
    {
      CFArrayAppendValue(Value, a3);
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 47)
      {
        id v8 = *(id *)(gLogObjects + 368);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v8 = &_os_log_default;
        id v9 = &_os_log_default;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 138412290;
        __int16 v11 = a2;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "navigation _addDictionaryArrayEntryValue: failed to add array entry! key %@", (uint8_t *)&v10, 0xCu);
      }
    }
  }
}

void _setInfoFromDictionary(void *a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = [a1 objectForKey:v5];
  if (v6) {
    [v7 setObject:v6 forKey:v5];
  }
}

uint64_t _createCarPlayCategoryMaskFromCategorySet(void *a1)
{
  id v1 = a1;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v1);
        }
        v4 |= 1 << (char)[*(id *)(*((void *)&v8 + 1) + 8 * i) unsignedShortValue];
      }
      id v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id _supportedAppLinksEAProtocols(uint64_t a1)
{
  id v1 = platform_externalAccessory_copyEAProtocolsForEndpointUUID(a1);
  id v2 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v1 count]);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        long long v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        long long v9 = objc_msgSend(v8, "lowercaseString", (void)v15);
        long long v10 = [@"com.apple.mfi.gamecontroller" lowercaseString];
        unsigned __int8 v11 = [v9 isEqualToString:v10];

        if ((v11 & 1) == 0) {
          [v2 addObject:v8];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v21 count:16];
    }
    while (v5);
  }

  if (gLogObjects && gNumLogObjects >= 8)
  {
    id v12 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v12 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    CFDataRef v20 = v2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[#App Links] availableEAProtocols for appLinks = %@", buf, 0xCu);
  }

  return v2;
}

id logObjectForModule_8(int a1)
{
  if (gLogObjects) {
    BOOL v1 = gNumLogObjects <= a1;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1)
  {
    BOOL v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2) {
      logObjectForModule_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
    }
    id v11 = &_os_log_default;
    id v10 = &_os_log_default;
  }
  else
  {
    id v11 = *(id *)(gLogObjects + 8 * a1);
  }

  return v11;
}

void sub_10004D1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004DFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_10004EE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43)
{
}

id platform_appLinks_addSubscriberForSubFeature(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 == 1)
  {
    uint64_t v9 = +[ACCAppLinksManager sharedManager];
    id v10 = [v9 addEAAppLinksSubscriber:a1 forCategories:a3 forIconSize:a4 andCertSerialNumber:a5];
  }
  else
  {
    if (a2) {
      return 0;
    }
    uint64_t v9 = +[ACCAppLinksManager sharedManager];
    id v10 = [v9 addCarPlayAppLinksSubscriber:a1 forCategories:a3 forIconSize:a4 andCertSerialNumber:a5];
  }
  id v11 = v10;

  return v11;
}

id platform_appLinks_removeSubscriberForSubFeature(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v3 = +[ACCAppLinksManager sharedManager];
    id v4 = [v3 removeEAAppLinksSubscriber:a1];
  }
  else
  {
    if (a2) {
      return 0;
    }
    uint64_t v3 = +[ACCAppLinksManager sharedManager];
    id v4 = [v3 removeCarPlayAppLinksSubscriber:a1];
  }
  id v5 = v4;

  return v5;
}

uint64_t platform_appLinks_requestAppIcons(uint64_t a1, uint64_t a2)
{
  id v4 = +[ACCAppLinksManager sharedManager];
  [v4 requestAppIcons:a2 forUUID:a1];

  return 1;
}

void OUTLINED_FUNCTION_2_8(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

unsigned char *OUTLINED_FUNCTION_3_7(unsigned char *result, unsigned char *a2)
{
  *BOOL result = 0;
  *a2 = 0;
  return result;
}

BOOL iAP2LinkProcessInOrderPacketCMD(uint64_t a1, uint64_t a2)
{
  int v4 = **(unsigned __int8 **)(a2 + 72);
  if ((_iAP2LogEnableMask & 2) != 0)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 20;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v6 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = *(unsigned __int8 *)(a1 + 213);
      int v15 = 136316162;
      long long v16 = "iAP2LinkProcessInOrderPacketCMD";
      __int16 v17 = 1024;
      int v18 = 95;
      __int16 v19 = 1024;
      int v20 = v7;
      __int16 v21 = 1024;
      int v22 = v4;
      __int16 v23 = 1024;
      int v24 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s:%d linkVer=%d cmdID=%xh(%d)", (uint8_t *)&v15, 0x24u);
    }
  }
  uint64_t v8 = (unsigned __int8 *)(a1 + 213);
  if (*(unsigned char *)(a1 + 213) != 1)
  {
    *(unsigned char *)(a1 + 188) = *(unsigned char *)(*(void *)(a2 + 64) + 5);
    *(unsigned char *)(a1 + 212) |= 1u;
    if (v4 == 85)
    {
      id v10 = *(uint64_t **)(a1 + 8);
      unsigned int v11 = 10;
    }
    else
    {
      if (v4 != 84)
      {
        if ((_iAP2LogEnableMask & 4) != 0)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            id v14 = *(NSObject **)(gLogObjects + 152);
          }
          else
          {
            id v14 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
          if (result)
          {
            iAP2LinkProcessInOrderPacketCMD_cold_3(v4, v14);
            return 0;
          }
          return result;
        }
        return 0;
      }
      id v10 = *(uint64_t **)(a1 + 8);
      unsigned int v11 = 9;
    }
    iAP2FSMHandleEvent(v10, v11);
    return 1;
  }
  if ((_iAP2LogEnableMask & 4) == 0) {
    return 0;
  }
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects < 20;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    id v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    id v13 = *(NSObject **)(gLogObjects + 152);
  }
  BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    iAP2LinkProcessInOrderPacketCMD_cold_1(v8, v4, v13);
    return 0;
  }
  return result;
}

BOOL iAP2LinkCommandIsFeatureSetValid(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 24);
  if (*(unsigned char *)(a1 + 24))
  {
    int v2 = 0;
    uint64_t v3 = (unsigned __int8 *)(a1 + 25);
    do
    {
      int v5 = *v3++;
      int v4 = v5;
      if (v5 == 85) {
        unsigned int v6 = 2;
      }
      else {
        unsigned int v6 = 0x80000000;
      }
      if (v4 == 84) {
        int v7 = 1;
      }
      else {
        int v7 = v6;
      }
      v2 |= v7;
      --v1;
    }
    while (v1);
    if (v2 < 0) {
      return 0;
    }
  }
  else
  {
    LOBYTE(v2) = 0;
  }
  int v9 = v2 & 3;
  return v9 == 3 || v9 == 0;
}

uint64_t iAP2LinkCommandValidateFeatureSets(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a2 + 24))
  {
    int v3 = 0;
    int v4 = (unsigned __int8 *)(a2 + 25);
    do
    {
      int v6 = *v4++;
      int v5 = v6;
      if (v6 == 85) {
        unsigned int v7 = 2;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
      if (v5 == 84) {
        int v8 = 1;
      }
      else {
        int v8 = v7;
      }
      v3 |= v8;
      --v2;
    }
    while (v2);
    if ((v3 & 3) != 0)
    {
      *(_WORD *)(a2 + 25) = 21844;
      v3 |= 3u;
      LOBYTE(v2) = 2;
    }
    else
    {
      LOBYTE(v2) = 0;
    }
  }
  else
  {
    int v3 = 0;
  }
  *(unsigned char *)(a2 + 24) = v2;
  *(_DWORD *)(result + 272) = v3;
  return result;
}

void sub_1000509F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
}

void platform_blePairing_accessoryAttached(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    int v8 = *(id *)(gLogObjects + 328);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138413058;
    uint64_t v12 = a1;
    __int16 v13 = 2112;
    uint64_t v14 = a2;
    __int16 v15 = 2112;
    uint64_t v16 = a3;
    __int16 v17 = 2112;
    uint64_t v18 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "blePairing accessoryAttached: %@, blePairingUUID %@ accInfoDict=%@ supportedPairTypes=%@", (uint8_t *)&v11, 0x2Au);
  }

  id v10 = +[ACCBLEPairingServer sharedServer];
  [v10 accessoryBLEPairingAttached:a1 blePairingUUID:a2 accInfoDict:a3 supportedPairTypes:a4];
}

void platform_blePairing_accessoryDetached(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    int v4 = *(id *)(gLogObjects + 328);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    uint64_t v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "blePairing accessoryDetached: %@", (uint8_t *)&v7, 0xCu);
  }

  int v6 = +[ACCBLEPairingServer sharedServer];
  [v6 accessoryBLEPairingDetached:a1 blePairingUUID:a2];
}

void platform_blePairing_accessoryStateUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    uint64_t v12 = *(id *)(gLogObjects + 328);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v12 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 138413570;
    uint64_t v16 = a1;
    __int16 v17 = 2112;
    uint64_t v18 = a2;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = a4;
    __int16 v23 = 1024;
    int v24 = a5;
    __int16 v25 = 1024;
    int v26 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "blePairing accessoryStateUpdate: %@, blePairingUUID %@, validMask=%xh btRadioOn=%d pairingState=%d pairingModeOn=%d", (uint8_t *)&v15, 0x2Eu);
  }

  uint64_t v14 = +[ACCBLEPairingServer sharedServer];
  [v14 accessoryBLEPairingStateUpdate:a1 blePairingUUID:a2 validMask:a3 btRadioOn:a4 pairingState:a5 pairingModeOn:a6];
}

void platform_blePairing_accessoryPairingInfo(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    uint64_t v8 = *(id *)(gLogObjects + 328);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138413058;
    uint64_t v12 = a1;
    __int16 v13 = 2112;
    uint64_t v14 = a2;
    __int16 v15 = 1024;
    int v16 = a3;
    __int16 v17 = 2112;
    uint64_t v18 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "blePairing accessoryPairingInfo: %@, blePairingUUID %@, pairType=%d pairInfoList=%@", (uint8_t *)&v11, 0x26u);
  }

  id v10 = +[ACCBLEPairingServer sharedServer];
  [v10 accessoryBLEPairingInfoUpdate:a1 blePairingUUID:a2 pairType:a3 pairInfoList:a4];
}

void platform_blePairing_accessoryPairingData(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  id v8 = +[NSData dataWithBytes:a4 length:a5];
  platform_blePairing_accessoryPairingCFData(a1, a2, a3, (uint64_t)v8);
}

void platform_blePairing_accessoryPairingCFData(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    id v8 = *(id *)(gLogObjects + 328);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138413058;
    uint64_t v12 = a1;
    __int16 v13 = 2112;
    uint64_t v14 = a2;
    __int16 v15 = 1024;
    int v16 = a3;
    __int16 v17 = 2112;
    uint64_t v18 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "blePairing accessoryPairingInfo: %@, blePairingUUID %@, pairType=%d pairData=%@", (uint8_t *)&v11, 0x26u);
  }

  id v10 = +[ACCBLEPairingServer sharedServer];
  [v10 accessoryBLEPairingDataUpdate:a1 blePairingUUID:a2 pairType:a3 pairData:a4];
}

void platform_blePairing_finishedNegotiation(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    int v4 = *(id *)(gLogObjects + 328);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    uint64_t v8 = a1;
    __int16 v9 = 2112;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "blePairing finishedNegotiation: %@, blePairingUUID %@", (uint8_t *)&v7, 0x16u);
  }

  int v6 = +[ACCBLEPairingServer sharedServer];
  [v6 accessoryBLEPairingFinished:a1 blePairingUUID:a2];
}

void platform_blePairing_startBLEUpdatesHandler(void *a1, void *a2, int a3, int a4, int a5)
{
  id v9 = a1;
  id v10 = a2;
  if (gLogObjects && gNumLogObjects >= 42)
  {
    int v11 = *(id *)(gLogObjects + 328);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v11 = &_os_log_default;
    id v12 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138413314;
    id v15 = v9;
    __int16 v16 = 2112;
    id v17 = v10;
    __int16 v18 = 1024;
    int v19 = a3;
    __int16 v20 = 1024;
    int v21 = a4;
    __int16 v22 = 1024;
    int v23 = a5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "blePairing startBLEUpdates: %@, blePairingUUID=%@, pairType=%d bRadioUpdatesOn=%d bPairInfoUpdatesOn=%d", (uint8_t *)&v14, 0x28u);
  }

  __int16 v13 = malloc_type_malloc(0x20uLL, 0x1062040A60DE276uLL);
  *(_DWORD *)__int16 v13 = 0;
  v13[1] = v10;
  *((_DWORD *)v13 + 4) = a3;
  *((unsigned char *)v13 + 20) = a4;
  *((unsigned char *)v13 + 21) = a5;
  if ((accFeatureHandlers_invokeHandler(v9, 30, (uint64_t)v13) & 1) == 0) {
    platform_blePairing_deleteParams(v13);
  }
}

void platform_blePairing_deleteParams(void *a1)
{
  if (a1)
  {
    if (*(_DWORD *)a1 == 3 || *(_DWORD *)a1 == 2)
    {
      uint64_t v2 = (const void *)a1[3];
      if (v2) {
        CFRelease(v2);
      }
    }
    int v3 = (const void *)a1[1];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

void platform_blePairing_deviceStateUpdateHandler(void *a1, void *a2, int a3, int a4, int a5)
{
  id v9 = a1;
  id v10 = a2;
  if (gLogObjects && gNumLogObjects >= 42)
  {
    int v11 = *(id *)(gLogObjects + 328);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v11 = &_os_log_default;
    id v12 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138413314;
    id v15 = v9;
    __int16 v16 = 2112;
    id v17 = v10;
    __int16 v18 = 1024;
    int v19 = a3;
    __int16 v20 = 1024;
    int v21 = a4;
    __int16 v22 = 1024;
    int v23 = a5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "blePairing deviceStateUpdate: %@, blePairingUUID=%@, bRadioOn=%d pairState=%d bPairModeOn=%d", (uint8_t *)&v14, 0x28u);
  }

  __int16 v13 = malloc_type_malloc(0x20uLL, 0x1062040A60DE276uLL);
  *(_DWORD *)__int16 v13 = 1;
  v13[1] = v10;
  *((unsigned char *)v13 + 16) = a3;
  *((_DWORD *)v13 + 5) = a4;
  *((unsigned char *)v13 + 24) = a5;
  if ((accFeatureHandlers_invokeHandler(v9, 31, (uint64_t)v13) & 1) == 0) {
    platform_blePairing_deleteParams(v13);
  }
}

void platform_blePairing_devicePairingDataHandler(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (gLogObjects && gNumLogObjects >= 42)
  {
    id v10 = *(id *)(gLogObjects + 328);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = &_os_log_default;
    id v11 = &_os_log_default;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138413058;
    id v14 = v7;
    __int16 v15 = 2112;
    id v16 = v8;
    __int16 v17 = 1024;
    int v18 = a3;
    __int16 v19 = 2112;
    id v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "blePairing devicePairingData: %@, blePairingUUID=%@, pairType=%d pairData=%@", (uint8_t *)&v13, 0x26u);
  }

  id v12 = malloc_type_malloc(0x20uLL, 0x1062040A60DE276uLL);
  *(_DWORD *)id v12 = 2;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = a3;
  v12[3] = v9;
  if ((accFeatureHandlers_invokeHandler(v7, 32, (uint64_t)v12) & 1) == 0) {
    platform_blePairing_deleteParams(v12);
  }
}

void platform_blePairing_deviceUpdatePairingInfoHandler(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (gLogObjects && gNumLogObjects >= 42)
  {
    id v10 = *(id *)(gLogObjects + 328);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = &_os_log_default;
    id v11 = &_os_log_default;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138413058;
    id v14 = v7;
    __int16 v15 = 2112;
    id v16 = v8;
    __int16 v17 = 1024;
    int v18 = a3;
    __int16 v19 = 2112;
    id v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "blePairing deviceUpdatePairingInfo: %@, blePairingUUID=%@, pairType=%d pairInfo=%@", (uint8_t *)&v13, 0x26u);
  }

  id v12 = malloc_type_malloc(0x20uLL, 0x1062040A60DE276uLL);
  *(_DWORD *)id v12 = 3;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = a3;
  v12[3] = v9;
  if ((accFeatureHandlers_invokeHandler(v7, 33, (uint64_t)v12) & 1) == 0) {
    platform_blePairing_deleteParams(v12);
  }
}

void platform_blePairing_stopBLEUpdatesHandler(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (gLogObjects && gNumLogObjects >= 42)
  {
    id v5 = *(id *)(gLogObjects + 328);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v5 = &_os_log_default;
    id v6 = &_os_log_default;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    id v9 = v3;
    __int16 v10 = 2112;
    id v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "blePairing stopBLEUpdates: %@ blePairingUUID=%@", (uint8_t *)&v8, 0x16u);
  }

  id v7 = malloc_type_malloc(0x20uLL, 0x1062040A60DE276uLL);
  *(_DWORD *)id v7 = 4;
  v7[1] = v4;
  if ((accFeatureHandlers_invokeHandler(v3, 34, (uint64_t)v7) & 1) == 0) {
    platform_blePairing_deleteParams(v7);
  }
}

__CFDictionary *platform_blePairing_createAccInfoMutableDict(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, 0);
  int v13 = Mutable;
  if (a2 && a1 && Mutable)
  {
    CFDictionaryAddValue(Mutable, @"IAPAppBTPairingAccManufacturer", a2);
    CFDictionaryAddValue(v13, @"IAPAppBTPairingAccModel", a1);
    CFDictionaryAddValue(v13, @"IAPAppBTPairingAccName", a3);
    CFDictionaryAddValue(v13, @"IAPAppBTPairingAccSerialNum", a4);
    CFDictionaryAddValue(v13, @"IAPAppBTPairingAccFwVer", a5);
    CFDictionaryAddValue(v13, @"IAPAppBTPairingAccHwVer", a6);
  }
  return v13;
}

void platform_blePairing_incrementUserCount()
{
  id v0 = +[ACCBLEPairingServer sharedServer];
  [v0 incrementUserCount];

  uint64_t v1 = +[ACCBLEPairingServer sharedServer];
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = +[ACCFeaturePluginManager sharedManager];
    [v3 startPlugInsWithClasses:&off_100223278];
  }
}

void platform_blePairing_decrementUserCount()
{
  id v0 = +[ACCBLEPairingServer sharedServer];
  [v0 decrementUserCount];
}

void mfi4Auth_protocol_cleanupNVMContext(uint64_t a1)
{
  if (a1)
  {
    unsigned int v2 = *(void **)a1;
    if (v2)
    {
      free(v2);
      *(void *)a1 = 0;
    }
    id v3 = *(const void **)(a1 + 48);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 48) = 0;
    }
    id v4 = *(const void **)(a1 + 56);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 56) = 0;
    }
    id v5 = *(const void **)(a1 + 64);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 64) = 0;
    }
    id v6 = *(const void **)(a1 + 72);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 72) = 0;
    }
    id v7 = *(const void **)(a1 + 80);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 80) = 0;
    }
    int v8 = *(const void **)(a1 + 88);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 88) = 0;
    }
    id v9 = *(const void **)(a1 + 96);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 96) = 0;
    }
    __int16 v10 = *(const void **)(a1 + 104);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 104) = 0;
    }
    id v11 = *(const void **)(a1 + 112);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a1 + 112) = 0;
    }
    id v12 = *(void **)(a1 + 120);
    if (v12)
    {
      free(v12);
      *(void *)(a1 + 120) = 0;
    }
  }
}

uint64_t mfi4Auth_protocol_initMessage_RequestUserNVMRead(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, int a4, uint64_t a5, uint64_t a6)
{
  if (!a2) {
    return 1;
  }
  LODWORD(v8) = a4;
  __int16 v12 = *(_WORD *)(a1 + 200);
  int v13 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = (uint64_t)v13;
  if (!v13) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v13, v12, 20784, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  if (*(unsigned char *)(a1 + 144) == 2)
  {
    if (a5) {
      iAP2MsgAddArrayU8Param(*a2, 0, 0, a5, 0x40u);
    }
    if (a6) {
      iAP2MsgAddArrayU8Param(*a2, 0, 1, a6, 0x10u);
    }
  }
  __int16 v14 = _convertUserVendorNVMRead(a1, 2);
  if (v8)
  {
    __int16 v15 = v14;
    uint64_t v8 = v8;
    do
    {
      unsigned int v16 = *a3++;
      iAP2MsgAddU16Param(*a2, 0, v15, v16);
      --v8;
    }
    while (v8);
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20784;
  return result;
}

uint64_t _convertUserVendorNVMRead(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a1)
  {
    id v4 = logObjectForModule_9();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _convertUserVendorNVMRead_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    goto LABEL_11;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    id v4 = logObjectForModule_9();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _convertUserVendorNVMRead_cold_2(v4, v12, v13, v14, v15, v16, v17, v18);
    }
LABEL_11:

    return v2;
  }
  if (*(unsigned char *)(a1 + 144) == 3 && (a2 - 1) <= 4) {
    return word_1001B8160[(__int16)(a2 - 1)];
  }
  return v2;
}

uint64_t mfi4Auth_protocol_handle_NVMEraseResponse(uint64_t a1, uint64_t a2)
{
  unsigned int v69 = 1;
  if (!a1)
  {
    CFIndex v51 = logObjectForModule_9();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMEraseResponse_cold_1(v51, v54, v55, v56, v57, v58, v59, v60);
    }
    goto LABEL_116;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    CFIndex v51 = logObjectForModule_9();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMEraseResponse_cold_8(v51, v61, v62, v63, v64, v65, v66, v67);
    }
    goto LABEL_116;
  }
  if (!a2)
  {
    CFIndex v51 = logObjectForModule_9();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMEraseResponse_cold_2();
    }
    goto LABEL_116;
  }
  char v68 = 0;
  __dst[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst[1] = 0xAAAAAAAAAAAAAAAALL;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
  int v5 = 0;
  while (1)
  {
    if (!FirstParam)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v18 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v18 = &_os_log_default;
        id v19 = &_os_log_default;
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v72) = v5;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "handle_NVMEraseResponse: paramMask:0x%x", buf, 8u);
      }

      if ((v5 >> _convertNVMEraseResponse(a1, 1, 0)))
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          id v20 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v20 = &_os_log_default;
          id v22 = &_os_log_default;
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "handle_NVMEraseResponse: KeyErased", buf, 2u);
        }

        if (*(void *)(*(void *)(a1 + 712) + 80))
        {
          int v23 = +[NSString stringWithFormat:@"com.apple.accessoryd.mfi4.userPublicKey.%@", *(void *)(*(void *)(a1 + 712) + 80)];
          if (gLogObjects && gNumLogObjects >= 56)
          {
            int v24 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            int v24 = &_os_log_default;
            id v25 = &_os_log_default;
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v72 = (uint64_t)v23;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "handle_NVMEraseResponse: featureTag: %@", buf, 0xCu);
          }

          MFi4AuthFeatureGroup();
          DeleteSynchronizableKeyForAuthFeature();
          DeleteKeyForAuthFeature();
        }
        else
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            int v23 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            int v23 = &_os_log_default;
            id v26 = &_os_log_default;
          }
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "handle_NVMEraseResponse: !serialNumberString", buf, 2u);
          }
        }

        CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a1);
        CFStringRef v28 = Copy;
        if (Copy)
        {
          EndpointWithUUID = (uint64_t *)acc_manager_getEndpointWithUUID(Copy);
          if (EndpointWithUUID) {
            acc_connection_setPairingStatus(*EndpointWithUUID, 1);
          }
        }
        int v30 = *(_DWORD *)(a1 + 32);
        if (v30 == 5)
        {
          int v31 = *(void **)(a1 + 64);
          if (!v31) {
            goto LABEL_87;
          }
          int v32 = objc_retainBlock(v31);
          v32[2](v32, 0);
          *(void *)(a1 + 64) = 0;
          *(_DWORD *)(a1 + 32) = 0;

          int v30 = *(_DWORD *)(a1 + 32);
        }
        if (v30 != 11)
        {
LABEL_84:
          if (v30 == 13)
          {
            uint64_t v35 = *(void **)(a1 + 64);
            if (v35)
            {
              CFIndex v36 = objc_retainBlock(v35);
              v36[2](v36, 0);
              *(void *)(a1 + 64) = 0;
              *(_DWORD *)(a1 + 32) = 0;
            }
          }
          goto LABEL_87;
        }
        uint64_t v33 = *(void **)(a1 + 64);
        if (v33)
        {
          int v34 = objc_retainBlock(v33);
          v34[2](v34, 0);
          *(void *)(a1 + 64) = 0;
          *(_DWORD *)(a1 + 32) = 0;

          int v30 = *(_DWORD *)(a1 + 32);
          goto LABEL_84;
        }
LABEL_87:
        if (v28) {
          CFRelease(v28);
        }
        return 0;
      }
      if (1 << _convertNVMEraseResponse(a1, 2, 0) == v5)
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          int v21 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          int v21 = &_os_log_default;
          id v38 = &_os_log_default;
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "handle_NVMEraseResponse: KeyNotErased", buf, 2u);
        }

        int v39 = *(_DWORD *)(a1 + 32);
        if (v39 == 5)
        {
          uint64_t v40 = *(void **)(a1 + 64);
          if (!v40) {
            return 0;
          }
          CFIndex v41 = objc_retainBlock(v40);
          id v42 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
          v41[2](v41, v42);
          *(void *)(a1 + 64) = 0;
          *(_DWORD *)(a1 + 32) = 0;

          int v39 = *(_DWORD *)(a1 + 32);
        }
        if (v39 != 11)
        {
LABEL_102:
          if (v39 == 13)
          {
            __int16 v46 = *(void **)(a1 + 64);
            if (v46)
            {
              CFIndex v47 = objc_retainBlock(v46);
              id v48 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
              v47[2](v47, v48);
              *(void *)(a1 + 64) = 0;
              *(_DWORD *)(a1 + 32) = 0;
            }
          }
          return 0;
        }
        uint64_t v43 = *(void **)(a1 + 64);
        if (v43)
        {
          CFIndex v44 = objc_retainBlock(v43);
          id v45 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
          v44[2](v44, v45);
          *(void *)(a1 + 64) = 0;
          *(_DWORD *)(a1 + 32) = 0;

          int v39 = *(_DWORD *)(a1 + 32);
          goto LABEL_102;
        }
      }
      return 0;
    }
    uint64_t ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v7 = gLogObjects;
    int v8 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v9 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v72 = v7;
        __int16 v73 = 1024;
        int v74 = v8;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
      id v10 = &_os_log_default;
      uint64_t v9 = &_os_log_default;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v72) = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "handle_NVMEraseResponse: paramID: %d", buf, 8u);
    }

    if (*(unsigned char *)(a1 + 144) == 3)
    {
      int v11 = ParamID;
      if (!ParamID) {
        goto LABEL_22;
      }
    }
    else
    {
      int v11 = _convertNVMEraseResponse(a1, ParamID, 1);
      if (!v11)
      {
LABEL_22:
        iAP2MsgGetDataAsU16(FirstParam, &v69);
        if (v69)
        {
          CFIndex v51 = logObjectForModule_9();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            __int16 v50 = "handle_NVMEraseResponse: KeyErased: errorNo";
            goto LABEL_115;
          }
          goto LABEL_116;
        }
LABEL_33:
        v5 |= 1 << ParamID;
        goto LABEL_34;
      }
    }
    if (v11 == 1)
    {
      iAP2MsgGetDataAsU16(FirstParam, &v69);
      if (v69)
      {
        CFIndex v51 = logObjectForModule_9();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          __int16 v50 = "handle_NVMEraseResponse: KeyNotErased: errorNo";
          goto LABEL_115;
        }
        goto LABEL_116;
      }
      goto LABEL_33;
    }
    if (v11 == 2) {
      break;
    }
LABEL_34:
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0, FirstParam, &v68);
    if (v68)
    {
      CFIndex v51 = logObjectForModule_9();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        __int16 v50 = "handle_NVMEraseResponse: iAP2MsgGetNextParamWithError: error";
        goto LABEL_115;
      }
      goto LABEL_116;
    }
  }
  uint64_t v12 = gLogObjects;
  int v13 = gNumLogObjects;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v14 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      uint64_t v72 = v12;
      __int16 v73 = 1024;
      int v74 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
    }
    id v15 = &_os_log_default;
    uint64_t v14 = &_os_log_default;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int ParamValueLen = iAP2MsgGetParamValueLen(FirstParam);
    *(_DWORD *)buf = 67109120;
    LODWORD(v72) = ParamValueLen;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "handle_NVMEraseResponse: AuthNonce length: %d", buf, 8u);
  }

  unsigned int v69 = 0;
  int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v69, __dst, 16);
  if (!v69)
  {
    if (DataAsArrayU8 != 16)
    {
      CFIndex v51 = logObjectForModule_9();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        __int16 v50 = "handle_NVMEraseResponse: AuthNonce: count";
LABEL_115:
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, v50, buf, 2u);
      }
      goto LABEL_116;
    }
    goto LABEL_33;
  }
  CFIndex v51 = logObjectForModule_9();
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    __int16 v50 = "handle_NVMEraseResponse: AuthNonce: errorNo";
    goto LABEL_115;
  }
LABEL_116:

  return v69;
}

id logObjectForModule_9()
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v0 = *(id *)(gLogObjects + 440);
  }
  else
  {
    BOOL v1 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v1) {
      logObjectForModule_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
    }
    id v0 = &_os_log_default;
    id v9 = &_os_log_default;
  }

  return v0;
}

uint64_t _convertNVMEraseResponse(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1)
  {
    uint64_t v12 = logObjectForModule_9();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      _convertNVMEraseResponse_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    goto LABEL_27;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v12 = logObjectForModule_9();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      _convertNVMEraseResponse_cold_3(v12, v20, v21, v22, v23, v24, v25, v26);
    }
LABEL_27:

    uint64_t v7 = a2;
    goto LABEL_11;
  }
  BOOL v6 = *(unsigned char *)(a1 + 144) != 3 && a3 == 0;
  uint64_t v7 = a2;
  if (!v6)
  {
    if (a2 == 2)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v7 = a2;
      if (a2 == 1) {
        uint64_t v7 = 0;
      }
    }
  }
LABEL_11:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v8 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      int v11 = *(unsigned __int8 *)(a1 + 144);
    }
    else {
      int v11 = -1;
    }
    int v27 = 136316418;
    CFStringRef v28 = "_convertNVMEraseResponse";
    __int16 v29 = 1024;
    int v30 = 3090;
    __int16 v31 = 1024;
    int v32 = v11;
    __int16 v33 = 1024;
    int v34 = a3;
    __int16 v35 = 1024;
    int v36 = a2;
    __int16 v37 = 1024;
    int v38 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s:%d negotiatedVersion %d, force %d, commandID 0x%04x -> 0x%04x", (uint8_t *)&v27, 0x2Au);
  }

  return v7;
}

uint64_t mfi4Auth_protocol_handle_NVMReadResponse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int inited = 1;
  char v161 = 0;
  *(void *)&long long __dst = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&__dst + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v163[6] = v3;
  v163[7] = v3;
  v163[4] = v3;
  v163[5] = v3;
  v163[2] = v3;
  v163[3] = v3;
  v163[0] = v3;
  v163[1] = v3;
  if (!a1)
  {
    v125 = logObjectForModule_9();
    if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMReadResponse_cold_1(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    goto LABEL_288;
  }
  uint64_t v4 = a1;
  if (*(unsigned char *)(a1 + 30))
  {
    v125 = logObjectForModule_9();
    if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMReadResponse_cold_13(v125, v133, v134, v135, v136, v137, v138, v139);
    }
    goto LABEL_288;
  }
  uint64_t v5 = a2;
  if (!a2)
  {
    v125 = logObjectForModule_9();
    if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMReadResponse_cold_2(v125, v140, v141, v142, v143, v144, v145, v146);
    }
LABEL_288:

    v116 = 0;
    goto LABEL_268;
  }
  uint64_t v148 = *(void *)(a1 + 712);
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
  int v156 = 0;
  char v157 = 0;
  char v158 = 0;
  char v154 = 0;
  char v155 = 0;
  char v150 = 0;
  v149 = 0;
  unint64_t v7 = 0;
  int v8 = 0;
  uint64_t v151 = v4;
  while (2)
  {
    if (!FirstParam)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v58 = *(id *)(gLogObjects + 440);
        char v59 = v155;
        unsigned __int8 v60 = v156;
        char v62 = v157;
        char v61 = v158;
      }
      else
      {
        char v59 = v155;
        unsigned __int8 v60 = v156;
        char v62 = v157;
        char v61 = v158;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v58 = &_os_log_default;
        id v63 = &_os_log_default;
      }
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_NVMReadResponse: paramMask:0x%x", buf, 8u);
      }

      if (v62)
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v64 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v64 = &_os_log_default;
          id v65 = &_os_log_default;
        }
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "_handleNvmReadAccessoryInfo: Vendor", buf, 2u);
        }

        _handleNvmReadAccessoryInfo(v4, 1);
      }
      if (v61)
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v66 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v66 = &_os_log_default;
          id v67 = &_os_log_default;
        }
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "_handleNvmReadAccessoryInfo: User", buf, 2u);
        }

        _handleNvmReadAccessoryInfo(v4, 0);
      }
      if (v60 && *(unsigned char *)(v4 + 144) == 2)
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          char v68 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          char v68 = &_os_log_default;
          id v69 = &_os_log_default;
        }
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "_handleNvmReadUserPublicKey", buf, 2u);
        }

        _handleNvmReadUserPublicKey(v4, v8 & 1 | v60);
      }
      if (v59)
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v70 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v70 = &_os_log_default;
          id v71 = &_os_log_default;
        }
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "_handleNvmReadManufacturerPublicKey", buf, 2u);
        }
      }
      if ((v8 >> _convertNVMReadResponse(v4, 1, 0)))
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v72 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v72 = &_os_log_default;
          id v74 = &_os_log_default;
        }
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_NVMReadResponse: KeyRead", buf, 2u);
        }

        CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)v4);
        CFStringRef v76 = Copy;
        if (Copy)
        {
          EndpointWithUUID = (uint64_t *)acc_manager_getEndpointWithUUID(Copy);
          if (EndpointWithUUID)
          {
            CFStringRef v78 = (pthread_mutex_t *)EndpointWithUUID;
            uint64_t v79 = *EndpointWithUUID;
            if (v79)
            {
              int PairingStatus = acc_connection_getPairingStatus(v79);
              uint64_t v81 = acc_endpoint_copyProperty(v78, kCFACCProperties_Endpoint_NFC_TagId);
              if (v81)
              {
                CFDataRef v82 = (const __CFData *)v81;
                int v83 = CFDataGetLength((CFDataRef)v81) ? *CFDataGetBytePtr(v82) : 0;
                CFRelease(v82);
                if (!PairingStatus && (v83 - 87) <= 1)
                {
                  __int16 v107 = (unsigned __int16 *)malloc_type_malloc(1uLL, 0x408B054FuLL);
                  if (v107)
                  {
                    uint64_t v108 = v107;
                    *__int16 v107 = 21248;
                    unsigned int inited = mfi4Auth_protocol_initMessage_RequestUserNVMRead(v4, a3, v107, 1, 0, 0);
                    free(v108);
                    if (inited) {
                      goto LABEL_267;
                    }
                    goto LABEL_265;
                  }
LABEL_269:
                  unsigned int inited = -1;
                  goto LABEL_267;
                }
              }
            }
          }
        }
        if ((v154 & 1) != 0 && *(_DWORD *)(v4 + 32) == 7 && *(void *)(v4 + 64))
        {
          _replyGetNVMKey(v4);
          *(void *)(v4 + 64) = 0;
          *(_DWORD *)(v4 + 32) = 0;
        }
        if ((v150 & 1) != 0 && *(_DWORD *)(v4 + 32) == 7 && *(void *)(v4 + 64))
        {
          _replyGetNVMKey(v4);
          *(void *)(v4 + 64) = 0;
          *(_DWORD *)(v4 + 32) = 0;
        }
        if (*(void *)(v148 + 88))
        {
          if (*(_DWORD *)(v4 + 32) == 9)
          {
            __int16 v109 = *(void **)(v4 + 64);
            if (v109)
            {
              id v110 = objc_retainBlock(v109);
              if (gLogObjects && gNumLogObjects >= 56)
              {
                __int16 v111 = *(id *)(gLogObjects + 440);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                __int16 v111 = &_os_log_default;
                id v112 = &_os_log_default;
              }
              if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v113 = *(void *)(v148 + 88);
                *(_DWORD *)buf = 138412290;
                *(void *)&uint8_t buf[4] = v113;
                _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "NVMReadResponse: %@", buf, 0xCu);
              }

              CFRetain(*(CFTypeRef *)(v148 + 88));
              (*((void (**)(id, void, void))v110 + 2))(v110, *(void *)(v148 + 88), 0);
              *(void *)(v4 + 64) = 0;
              *(_DWORD *)(v4 + 32) = 0;
            }
          }
        }
        if (*(_DWORD *)(v4 + 32) == 5)
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            v114 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            v114 = &_os_log_default;
            id v115 = &_os_log_default;
          }
          if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "NVMReadResponse: RequestNVMAuthStart", buf, 2u);
          }

          unsigned int inited = mfi4Auth_protocol_initMessage_RequestNVMAuthStart(v4, a3, 0x5300u);
        }
      }
      else
      {
        if (*(unsigned char *)(v4 + 144) == 2 && v8 == 5)
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            __int16 v73 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            __int16 v73 = &_os_log_default;
            id v85 = &_os_log_default;
          }
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_NVMReadResponse: Nonce", buf, 2u);
          }

          memset(buf, 170, 16);
          arc4random_buf(buf, 0x10uLL);
          uint64_t v86 = *(void *)(v148 + 80);
          if (!v86)
          {
            unsigned int inited = -1;
            v119 = logObjectForModule_9();
            if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_275;
            }
            valuePtr[0] = 0;
            v121 = "mfi4Auth_protocol_handle_NVMReadResponse: !serialNumberString";
            v122 = (uint8_t *)valuePtr;
            goto LABEL_273;
          }
          UserPublicKeyForSerialNumber = (__SecKey *)_copyOrCreateUserPublicKeyForSerialNumber(v86);
          if (!UserPublicKeyForSerialNumber) {
            goto LABEL_269;
          }
          CFDataRef v88 = _generateUserSignature(UserPublicKeyForSerialNumber, &__dst, (long long *)buf);
          if (!v88) {
            goto LABEL_269;
          }
          BytePtr = CFDataGetBytePtr(v88);
          mfi4Auth_protocol_initMessage_RequestUserNVMRead(v4, a3, (unsigned __int16 *)v163, v7, (uint64_t)BytePtr, (uint64_t)buf);
LABEL_266:
          unsigned int inited = 0;
          goto LABEL_267;
        }
        if (1 << _convertNVMReadResponse(v4, 2, 0) != v8) {
          goto LABEL_266;
        }
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v84 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v84 = &_os_log_default;
          id v90 = &_os_log_default;
        }
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_NVMReadResponse: KeyNotRead", buf, 2u);
        }

        if (*(_DWORD *)(v4 + 32) == 7 && *(void *)(v4 + 64))
        {
          _replyGetNVMKey(v4);
          *(void *)(v4 + 64) = 0;
          *(_DWORD *)(v4 + 32) = 0;
        }
        if (v7)
        {
          unint64_t v91 = v7;
          uint64_t v92 = (unsigned __int16 *)v163;
          do
          {
            int v93 = *v92++;
            if (v93 == 21248)
            {
              uint64_t v94 = gLogObjects;
              int v95 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 56)
              {
                uint64_t v96 = *(id *)(gLogObjects + 440);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = v94;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&unsigned char buf[14] = v95;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
                id v97 = &_os_log_default;
                uint64_t v96 = &_os_log_default;
              }
              if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_NVMReadResponse: UserPublicKey_NotProgrammed", buf, 2u);
              }

              *(_DWORD *)(v148 + 8) = 1;
            }
            --v91;
          }
          while (v91);
        }
        CFStringRef v98 = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)v151);
        CFStringRef v76 = v98;
        if (!v98
          || (__int16 v99 = (uint64_t *)acc_manager_getEndpointWithUUID(v98)) == 0
          || (uint64_t v100 = *v99) == 0
          || !acc_connection_getPairingStatus(v100))
        {
          __int16 v101 = (unsigned __int16 *)malloc_type_malloc(1uLL, 0xCA8E9724uLL);
          if (!v101) {
            goto LABEL_269;
          }
          uint64_t v102 = v101;
          *__int16 v101 = 21248;
          unsigned int inited = mfi4Auth_protocol_initMessage_RequestUserNVMRead(v151, a3, v101, 1, 0, 0);
          free(v102);
          if (inited) {
            goto LABEL_267;
          }
        }
        if (*(_DWORD *)(v151 + 32) == 9)
        {
          uint64_t v103 = *(void **)(v151 + 64);
          if (v103)
          {
            __int16 v104 = objc_retainBlock(v103);
            uint64_t v105 = logObjectForModule_9();
            if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "NVMReadResponse: !userNameString", buf, 2u);
            }

            id v106 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
            v104[2](v104, 0, v106);
            *(void *)(v151 + 64) = 0;
            *(_DWORD *)(v151 + 32) = 0;
          }
        }
      }
      if (v76)
      {
LABEL_265:
        CFRelease(v76);
        goto LABEL_266;
      }
      goto LABEL_266;
    }
    unsigned int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v9 = gLogObjects;
    int v10 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v11 = *(id *)(gLogObjects + 440);
    }
    else
    {
      int v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v10;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
      id v12 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_NVMReadResponse: paramID: %d", buf, 8u);
    }

    int v13 = ParamID;
    if (*(unsigned char *)(v4 + 144) != 3) {
      int v13 = _convertNVMReadResponse(v4, ParamID, 1);
    }
    switch(v13)
    {
      case 0:
        int v152 = v8;
        unint64_t v153 = v7;
        valuePtr[0] = -21846;
        NextParamWithError = (unsigned __int16 *)iAP2MsgGetFirstParam(v5, FirstParam);
        uint64_t v15 = 0;
        unsigned int ParamValueLen = 0;
        int v17 = 0;
        do
        {
          if (!NextParamWithError)
          {
            if (v17 == 3)
            {
              CFNumberRef v35 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, valuePtr);
              CFDataRef v36 = CFDataCreate(kCFAllocatorDefault, v15, ParamValueLen);
              __int16 v37 = _dumpSimpleHex(v36);

              uint64_t v38 = gLogObjects;
              int v39 = gNumLogObjects;
              int v8 = v152;
              if (gLogObjects && gNumLogObjects >= 56)
              {
                uint64_t v40 = *(id *)(gLogObjects + 440);
              }
              else
              {
                uint64_t v40 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = v38;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&unsigned char buf[14] = v39;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
                id v53 = &_os_log_default;
              }
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                *(void *)&uint8_t buf[4] = v37;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "handleNVMReadResponse: keyValue:%@", buf, 0xCu);
              }

              CFDictionaryAddValue(*(CFMutableDictionaryRef *)(*(void *)(v151 + 712) + 48), v35, v36);
              uint64_t v54 = gLogObjects;
              int v55 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 56)
              {
                uint64_t v56 = *(id *)(gLogObjects + 440);
              }
              else
              {
                uint64_t v56 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = v54;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&unsigned char buf[14] = v55;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
                id v57 = &_os_log_default;
              }
              uint64_t v4 = v151;
              if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "handleNVMReadResponse: CFDictionaryAddValue", buf, 2u);
              }

              if (v36) {
                CFRelease(v36);
              }
              v149 = v37;
            }
            else
            {
              uint64_t v4 = v151;
              int v8 = v152;
            }
            unint64_t v7 = v153;
            if (v15) {
              free(v15);
            }
            int v49 = 1 << ParamID;
            goto LABEL_111;
          }
          uint64_t v18 = v5;
          int v19 = iAP2MsgGetParamID((uint64_t)NextParamWithError);
          uint64_t v20 = gLogObjects;
          int v21 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v22 = *(id *)(gLogObjects + 440);
          }
          else
          {
            uint64_t v22 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v20;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = v21;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
            id v23 = &_os_log_default;
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = ParamID;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v19;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_NVMReadResponse: paramID: %d, subparam: %d", buf, 0xEu);
          }

          if (v19 == 1)
          {
            unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParamWithError);
            uint64_t v15 = (UInt8 *)malloc_type_calloc(1uLL, ParamValueLen, 0xCB60F802uLL);
            int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(NextParamWithError, &inited, v15, ParamValueLen);
            if (inited) {
              goto LABEL_267;
            }
            if (DataAsArrayU8 != ParamValueLen) {
              goto LABEL_269;
            }
            uint64_t v5 = v18;
            v17 |= 2u;
          }
          else
          {
            uint64_t v5 = v18;
            if (!v19)
            {
              valuePtr[0] = iAP2MsgGetDataAsU16(NextParamWithError, &inited);
              if (inited) {
                goto LABEL_267;
              }
              uint64_t v24 = gLogObjects;
              int v25 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 56)
              {
                uint64_t v26 = *(id *)(gLogObjects + 440);
              }
              else
              {
                uint64_t v26 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = v24;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&unsigned char buf[14] = v25;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
                id v28 = &_os_log_default;
              }
              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = valuePtr[0];
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "handleNVMReadResponse: key: 0x%x", buf, 8u);
              }

              if (valuePtr[0] == 21248)
              {
                v156 |= 1 << ParamID;
              }
              else if (valuePtr[0] - 21249 >= 0x4F)
              {
                if (valuePtr[0] - 21328 >= 0xB0) {
                  v155 |= valuePtr[0] - 20736 < 0x50;
                }
                else {
                  char v150 = 1;
                }
              }
              else
              {
                char v154 = 1;
              }
              v157 |= valuePtr[0] - 20994 < 9;
              v158 |= valuePtr[0] - 21250 < 9;
              v17 |= 1u;
            }
          }
          NextParamWithError = iAP2MsgGetNextParamWithError(v5, FirstParam, NextParamWithError, &v161);
        }
        while (!v161);
        goto LABEL_267;
      case 1:
        if (v7 >= 0x40)
        {
          uint64_t v29 = gLogObjects;
          int v30 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            __int16 v31 = *(id *)(gLogObjects + 440);
          }
          else
          {
            __int16 v31 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v29;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = v30;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
            id v50 = &_os_log_default;
          }
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = 64;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "handleNVMReadResponse: reached limit of %d keyNotRead parameters", buf, 8u);
          }

          goto LABEL_112;
        }
        int v41 = v8;
        int DataAsU16 = iAP2MsgGetDataAsU16(FirstParam, &inited);
        *((_WORD *)v163 + v7) = DataAsU16;
        uint64_t v43 = gLogObjects;
        int v44 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          id v45 = *(id *)(gLogObjects + 440);
        }
        else
        {
          id v45 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v43;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v44;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
          id v51 = &_os_log_default;
        }
        int v8 = v41;
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = DataAsU16;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "handleNVMReadResponse: KeyNotRead:0x%x", buf, 8u);
        }

        if (!inited)
        {
          int v49 = 1 << ParamID;
          if (DataAsU16 == 21248) {
            int v52 = 1 << ParamID;
          }
          else {
            int v52 = 0;
          }
          v156 |= v52;
          ++v7;
          goto LABEL_111;
        }
        v119 = logObjectForModule_9();
        if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_275;
        }
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = inited;
        v121 = "errorNo:%d";
        v122 = buf;
        v123 = v119;
        uint32_t v124 = 8;
        goto LABEL_274;
      case 2:
      case 3:
        iAP2MsgGetDataAsU16(FirstParam, &inited);
        if (inited) {
          goto LABEL_267;
        }
        goto LABEL_74;
      case 7:
        uint64_t v32 = gLogObjects;
        int v33 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          int v34 = *(id *)(gLogObjects + 440);
        }
        else
        {
          int v34 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v32;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v33;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
          id v46 = &_os_log_default;
        }
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          int v47 = iAP2MsgGetParamValueLen(FirstParam);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v47;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "handleNVMReadResponse: AuthNonce length: %d", buf, 8u);
        }

        unsigned int inited = 0;
        int v48 = iAP2MsgGetDataAsArrayU8(FirstParam, &inited, &__dst, 16);
        if (inited)
        {
          v119 = logObjectForModule_9();
          if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_275;
          }
          *(_WORD *)buf = 0;
          v121 = "handleNVMReadResponse: AuthNonce: errorNo";
LABEL_272:
          v122 = buf;
LABEL_273:
          v123 = v119;
          uint32_t v124 = 2;
LABEL_274:
          _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, v121, v122, v124);
          goto LABEL_275;
        }
        if (v48 != 16)
        {
          v119 = logObjectForModule_9();
          if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_275;
          }
          *(_WORD *)buf = 0;
          v121 = "handleNVMReadResponse: AuthNonce: count";
          goto LABEL_272;
        }
LABEL_74:
        int v49 = 1 << ParamID;
LABEL_111:
        v8 |= v49;
LABEL_112:
        unint64_t FirstParam = iAP2MsgGetNextParamWithError(v5, 0, FirstParam, &v161);
        if (!v161) {
          continue;
        }
        v119 = logObjectForModule_9();
        if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v121 = "handleNVMReadResponse: iAP2MsgGetNextParamWithError: error";
          goto LABEL_272;
        }
LABEL_275:

LABEL_267:
        v116 = v149;
LABEL_268:
        uint64_t v117 = inited;

        return v117;
      default:
        goto LABEL_112;
    }
  }
}

uint64_t _convertNVMReadResponse(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1)
  {
    int v8 = logObjectForModule_9();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      _convertNVMReadResponse_cold_2(v8, v20, v21, v22, v23, v24, v25, v26);
    }
    goto LABEL_17;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    int v8 = logObjectForModule_9();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      _convertNVMReadResponse_cold_5(v8, v27, v28, v29, v30, v31, v32, v33);
    }
    goto LABEL_17;
  }
  BOOL v6 = *(unsigned char *)(a1 + 144) != 3 && a3 == 0;
  uint64_t v7 = a2;
  if (!v6)
  {
    if (a2 < 8)
    {
      uint64_t v7 = word_1001B8170[(__int16)a2];
      goto LABEL_18;
    }
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v8 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v8 = &_os_log_default;
      id v9 = &_os_log_default;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      _convertNVMReadResponse_cold_3(a2, v8, v10, v11, v12, v13, v14, v15);
    }
LABEL_17:

    uint64_t v7 = a2;
  }
LABEL_18:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v16 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v16 = &_os_log_default;
    id v17 = &_os_log_default;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      int v19 = *(unsigned __int8 *)(a1 + 144);
    }
    else {
      int v19 = -1;
    }
    int v34 = 136316418;
    CFNumberRef v35 = "_convertNVMReadResponse";
    __int16 v36 = 1024;
    int v37 = 3034;
    __int16 v38 = 1024;
    int v39 = v19;
    __int16 v40 = 1024;
    int v41 = a3;
    __int16 v42 = 1024;
    int v43 = a2;
    __int16 v44 = 1024;
    int v45 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s:%d negotiatedVersion %d, force %d, commandID 0x%04x -> 0x%04x", (uint8_t *)&v34, 0x2Au);
  }

  return v7;
}

void _handleNvmReadAccessoryInfo(uint64_t a1, int a2)
{
  uint64_t v4 = &unk_100239000;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v5 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v5 = &_os_log_default;
    id v6 = &_os_log_default;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "_handleNvmReadAccessoryInfo", buf, 2u);
  }

  unint64_t v171 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v169 = v7;
  long long v170 = v7;
  *(_OWORD *)buf = v7;
  long long v168 = v7;
  if (!a1)
  {
    uint64_t v133 = logObjectForModule_9();
    if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR)) {
      _handleNvmReadAccessoryInfo_cold_1(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    goto LABEL_258;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v133 = logObjectForModule_9();
    if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR)) {
      _handleNvmReadAccessoryInfo_cold_15(v133, v141, v142, v143, v144, v145, v146, v147);
    }
LABEL_258:

    uint64_t v26 = 0;
    uint64_t v27 = 0;
    char v157 = 0;
    CFDataRef cf = 0;
    v159 = 0;
    v160 = 0;
    char v155 = 0;

    goto LABEL_247;
  }
  MutableCFStringRef Copy = 0;
  int v9 = 0;
  long long v187 = 0u;
  long long v188 = 0u;
  long long v185 = 0u;
  long long v186 = 0u;
  long long v183 = 0u;
  long long v184 = 0u;
  long long v181 = 0u;
  long long v182 = 0u;
  long long v179 = 0u;
  long long v180 = 0u;
  long long v178 = 0u;
  uint64_t v10 = *(void *)(a1 + 712);
  int v153 = a2;
  if (a2) {
    __int16 v11 = 20994;
  }
  else {
    __int16 v11 = 21250;
  }
  CFAllocatorRef v12 = kCFAllocatorDefault;
  do
  {
    *(_WORD *)float valuePtr = v11 + v9;
    CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, valuePtr);
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(v10 + 48), v13);
    if (!Value) {
      break;
    }
    CFDataRef v15 = Value;
    if (MutableCopy)
    {
      BytePtr = CFDataGetBytePtr(Value);
      CFIndex Length = CFDataGetLength(v15);
      CFDataAppendBytes(MutableCopy, BytePtr, Length);
    }
    else
    {
      MutableCFStringRef Copy = CFDataCreateMutableCopy(kCFAllocatorDefault, 2160, Value);
    }
    ++v9;
  }
  while (v9 != 9);
  if (!MutableCopy) {
    goto LABEL_26;
  }
  iAP2MsgInitWithSom((uint64_t)buf, 0, 0, 0, 0, 0, 0);
  uint64_t v18 = (unsigned __int16 *)iAP2MsgParserInit(0xFFFF, *(void *)(a1 + 8), 0, 0);
  int v19 = CFDataGetBytePtr(MutableCopy);
  CFIndex v20 = CFDataGetLength(MutableCopy);
  if (!v20)
  {
LABEL_25:
    CFRelease(MutableCopy);
LABEL_26:
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    char v157 = 0;
    CFDataRef cf = 0;
    uint64_t v28 = 0;
    char v155 = 0;
    int v156 = 0;
    v160 = 0;
    unint64_t v154 = 0;
    goto LABEL_27;
  }
  unint64_t v21 = v20;
  uint64_t v22 = 0;
  unsigned int v23 = 1;
  while (1)
  {
    uint64_t v24 = iAP2MsgParserConsumeByte(v18, v19[v22], (uint64_t)buf);
    if (v24) {
      break;
    }
    uint64_t v22 = v23;
    if (v21 <= v23++) {
      goto LABEL_25;
    }
  }
  uint64_t v36 = v24;
  CFRelease(MutableCopy);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v37 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v37 = &_os_log_default;
    id v54 = &_os_log_default;
  }
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)float valuePtr = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "_handleNvmReadAccessoryInfo: pMessage", valuePtr, 2u);
  }

  int v166 = 1;
  char v165 = 0;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(v36, 0);
  uint64_t v151 = 0;
  int v152 = 0;
  char v157 = 0;
  CFDataRef cf = 0;
  v159 = 0;
  v160 = 0;
  char v155 = 0;
  int v156 = 0;
  unint64_t v154 = 0;
  *(void *)&long long v56 = 134218240;
  long long v149 = v56;
  uint64_t v150 = a1;
  while (FirstParam)
  {
    unsigned int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v58 = v4[49];
    int v59 = gNumLogObjects;
    if (v58 && gNumLogObjects >= 56)
    {
      unsigned __int8 v60 = *(id *)(v58 + 440);
    }
    else
    {
      unsigned __int8 v60 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)float valuePtr = v149;
        *(void *)&valuePtr[4] = v58;
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = v59;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", valuePtr, 0x12u);
      }
      id v61 = &_os_log_default;
    }
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 67109120;
      *(_DWORD *)&valuePtr[4] = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "_handleNvmReadAccessoryInfo: paramID: %d", valuePtr, 8u);
    }

    if (ParamID > 0x25) {
      goto LABEL_138;
    }
    if (((1 << ParamID) & 0x80000000FLL) == 0)
    {
      if (((1 << ParamID) & 0x3000000000) != 0)
      {
        *(_OWORD *)float valuePtr = xmmword_1001B8140;
        *(_OWORD *)&valuePtr[16] = unk_1001B8150;
        unint64_t v67 = iAP2MsgGetFirstParam(v36, FirstParam);
        if (v67)
        {
          NextParam = (unsigned __int16 *)v67;
          int v69 = 0;
          do
          {
            unsigned int v70 = iAP2MsgGetParamID((uint64_t)NextParam);
            if (v70 <= 3)
            {
              unsigned int v71 = v70;
              unsigned int DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v166);
              if (v166) {
                goto LABEL_155;
              }
              unsigned int v73 = DataAsU16;
              if (DataAsU16 > 0x3E8) {
                goto LABEL_155;
              }
              uint64_t v74 = gLogObjects;
              int v75 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 56)
              {
                CFStringRef v76 = *(id *)(gLogObjects + 440);
              }
              else
              {
                CFStringRef v76 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v189 = v149;
                  *(void *)v190 = v74;
                  *(_WORD *)&v190[8] = 1024;
                  int v191 = v75;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", v189, 0x12u);
                }
                id v77 = &_os_log_default;
              }
              if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v189 = 67109376;
                *(_DWORD *)v190 = v71;
                *(_WORD *)&v190[4] = 1024;
                *(_DWORD *)&v190[6] = v73;
                _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "_handleNvmReadAccessoryInfo: subParamID:%d, 0x%x", v189, 0xEu);
              }

              CFAllocatorRef v12 = kCFAllocatorDefault;
              switch(v71)
              {
                case 0u:
                  *(double *)float valuePtr = (double)v73 / 1000.0;
                  break;
                case 1u:
                  *(double *)&valuePtr[8] = (double)v73 / 1000.0;
                  break;
                case 2u:
                  *(double *)&valuePtr[16] = (double)v73 / 1000.0;
                  break;
                case 3u:
                  *(double *)&valuePtr[24] = (double)v73 / 1000.0;
                  break;
                default:
                  break;
              }
              v69 |= (1 << v71);
            }
            NextParam = iAP2MsgGetNextParam(v36, FirstParam, NextParam);
          }
          while (NextParam);
          if ((~v69 & 3) == 0)
          {
            uint64_t v82 = +[NSData dataWithBytes:valuePtr length:32];
            int v83 = v160;
            uint64_t v84 = v156;
            if (ParamID == 36) {
              id v85 = v160;
            }
            else {
              id v85 = v156;
            }
            if (ParamID == 36) {
              int v83 = (void *)v82;
            }
            v160 = v83;
            if (ParamID != 36) {
              uint64_t v84 = (void *)v82;
            }
            int v156 = v84;
          }
LABEL_155:
          a1 = v150;
          uint64_t v4 = (void *)&unk_100239000;
        }
        goto LABEL_160;
      }
LABEL_138:
      if (ParamID == 242)
      {
        unint64_t DataAsU64 = iAP2MsgGetDataAsU64(FirstParam, &v166);
        unint64_t v79 = v154;
        if (!v166) {
          unint64_t v79 = DataAsU64;
        }
        unint64_t v154 = v79;
      }
      goto LABEL_160;
    }
    int ParamValueLen = iAP2MsgGetParamValueLen(FirstParam);
    id v63 = malloc_type_calloc(1uLL, (ParamValueLen + 1), 0x17EBEBF2uLL);
    if (v63)
    {
      uint64_t v64 = v63;
      unsigned __int16 DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v166, v63, ParamValueLen);
      if (!v166 && ParamValueLen == DataAsArrayU8)
      {
        CFAllocatorRef v12 = kCFAllocatorDefault;
        switch(ParamID)
        {
          case 0u:
            uint64_t v66 = +[NSString stringWithUTF8String:v64];

            int v152 = (void *)v66;
            break;
          case 1u:
            uint64_t v86 = +[NSString stringWithUTF8String:v64];

            uint64_t v151 = (void *)v86;
            break;
          case 2u:
            uint64_t v87 = +[NSString stringWithUTF8String:v64];

            CFDataRef cf = (void *)v87;
            break;
          case 3u:
            uint64_t v88 = +[NSString stringWithUTF8String:v64];

            char v157 = (void *)v88;
            break;
          default:
            if (ParamID == 35)
            {
              uint64_t v80 = +[NSString stringWithUTF8String:v64];

              uint64_t v81 = v159;
              if (!v159)
              {
                uint64_t v81 = +[NSMutableArray arrayWithCapacity:1];
              }
              v159 = v81;
              objc_msgSend(v81, "addObject:", v80, v149);
              char v155 = (void *)v80;
            }
            break;
        }
        free(v64);
        goto LABEL_160;
      }
      free(v64);
    }
    CFAllocatorRef v12 = kCFAllocatorDefault;
LABEL_160:
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(v36, 0, FirstParam, &v165);
    if (v165)
    {
      uint64_t v27 = v151;
      uint64_t v26 = v152;
      goto LABEL_246;
    }
  }
  uint64_t v89 = v4[49];
  if (v89 && gNumLogObjects >= 56)
  {
    id v90 = *(id *)(v89 + 440);
    uint64_t v27 = v151;
    uint64_t v26 = v152;
  }
  else
  {
    uint64_t v27 = v151;
    uint64_t v26 = v152;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v90 = &_os_log_default;
    id v132 = &_os_log_default;
  }
  if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)float valuePtr = 0;
    _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "_handleNvmReadAccessoryInfo: finish", valuePtr, 2u);
  }

  uint64_t v28 = v159;
LABEL_27:
  v159 = v28;
  if (!v153)
  {
    uint64_t v32 = v27;
    if (v26)
    {
      uint64_t v33 = *(void *)(a1 + 712);
      uint64_t v34 = v4[49];
      if (v34 && gNumLogObjects >= 56)
      {
        CFNumberRef v35 = *(id *)(v34 + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        CFNumberRef v35 = &_os_log_default;
        id v41 = &_os_log_default;
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)float valuePtr = 138412290;
        *(void *)&valuePtr[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "user nameString %@", valuePtr, 0xCu);
      }

      *(void *)(v33 + 88) = v26;
    }
    goto LABEL_237;
  }
  uint64_t v29 = *(void **)(a1 + 712);
  if (v26)
  {
    uint64_t v30 = v4[49];
    if (v30 && gNumLogObjects >= 56)
    {
      uint64_t v31 = *(id *)(v30 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v31 = &_os_log_default;
      id v38 = &_os_log_default;
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "vendor nameString %@", valuePtr, 0xCu);
    }

    v29[7] = v26;
    CFRetain(v26);
    *(void *)&long long v178 = v29[7];
  }
  if (v27)
  {
    uint64_t v39 = v4[49];
    if (v39 && gNumLogObjects >= 56)
    {
      __int16 v40 = *(id *)(v39 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v40 = &_os_log_default;
      id v42 = &_os_log_default;
    }
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "modelIdentifierString %@", valuePtr, 0xCu);
    }

    v29[8] = v27;
    CFRetain(v27);
    *(void *)&long long v179 = v29[8];
  }
  if (cf)
  {
    uint64_t v43 = v4[49];
    if (v43 && gNumLogObjects >= 56)
    {
      __int16 v44 = *(id *)(v43 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v44 = &_os_log_default;
      id v45 = &_os_log_default;
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = cf;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "manufacturerString %@", valuePtr, 0xCu);
    }

    v29[9] = cf;
    CFRetain(cf);
    *((void *)&v178 + 1) = v29[9];
  }
  if (v157)
  {
    uint64_t v46 = v4[49];
    if (v46 && gNumLogObjects >= 56)
    {
      int v47 = *(id *)(v46 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v47 = &_os_log_default;
      id v48 = &_os_log_default;
    }
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = v157;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "serialNumberString %@", valuePtr, 0xCu);
    }

    v29[10] = v157;
    CFRetain(v157);
    *((void *)&v179 + 1) = v29[10];
  }
  if (v160)
  {
    uint64_t v49 = v4[49];
    if (v49 && gNumLogObjects >= 56)
    {
      id v50 = *(id *)(v49 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v50 = &_os_log_default;
      id v51 = &_os_log_default;
    }
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = v160;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "primaryColorData %@", valuePtr, 0xCu);
    }

    v29[13] = v160;
    CFRetain(v160);
    if (v156)
    {
      uint64_t v52 = v4[49];
      if (v52 && gNumLogObjects >= 56)
      {
        id v53 = *(id *)(v52 + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v53 = &_os_log_default;
        id v91 = &_os_log_default;
      }
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)float valuePtr = 138412290;
        *(void *)&valuePtr[4] = v156;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "secondaryColorData %@", valuePtr, 0xCu);
      }

      v29[14] = v156;
      CFRetain(v156);
    }
  }
  if (!v26 && !v27 && !cf && !v157 && !v155 || !*(void *)a1)
  {
LABEL_182:
    if (v160 && *(void *)a1)
    {
      CFStringRef Copy = CFStringCreateCopy(v12, *(CFStringRef *)a1);
      if (!Copy) {
        goto LABEL_246;
      }
      CFStringRef v96 = Copy;
      EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(Copy);
      if (!EndpointWithUUID)
      {
        CFStringRef v148 = v96;
        goto LABEL_261;
      }
      CFStringRef v98 = EndpointWithUUID;
      __int16 v99 = v27;
      uint64_t v100 = acc_endpoint_copyProperty(EndpointWithUUID, kCFACCProperties_Endpoint_NFC_DisplayP3Rgb);
      __int16 v101 = v100;
      if (!v100 || CFEqual(v100, kCFNull))
      {
        uint64_t v102 = v26;
        uint64_t v103 = v4[49];
        if (v103 && gNumLogObjects >= 56)
        {
          __int16 v104 = *(id *)(v103 + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          __int16 v104 = &_os_log_default;
          id v105 = &_os_log_default;
        }
        if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)float valuePtr = 67109120;
          *(_DWORD *)&valuePtr[4] = v156 != 0;
          _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "acc_endpoint_setProperties: primaryColorData:1, secondaryColorData:%d", valuePtr, 8u);
        }

        if (v156)
        {
          v175[0] = kACCProperties_Endpoint_NFC_DisplayP3Rgb;
          v175[1] = kACCProperties_Endpoint_NFC_DisplayP3RgbSecondary;
          v176[0] = v160;
          v176[1] = v156;
          id v106 = (void **)v176;
          __int16 v107 = v175;
          uint64_t v108 = 2;
        }
        else
        {
          uint64_t v173 = kACCProperties_Endpoint_NFC_DisplayP3Rgb;
          v174 = v160;
          id v106 = &v174;
          __int16 v107 = &v173;
          uint64_t v108 = 1;
        }
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v106, v107, v108, v149);
        CFDictionaryRef v109 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        uint64_t v26 = v102;
        acc_endpoint_setProperties(v98, v109);

        if (v101) {
          CFRelease(v101);
        }
      }
      CFRelease(v96);
      uint64_t v27 = v99;
    }
    uint64_t v32 = v27;
    if (!v159) {
      goto LABEL_237;
    }
    uint64_t v110 = v4[49];
    if (v110 && gNumLogObjects >= 56)
    {
      __int16 v111 = *(id *)(v110 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v111 = &_os_log_default;
      id v112 = &_os_log_default;
    }
    if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = v159;
      _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "deviceCompatibilityArray %@", valuePtr, 0xCu);
    }

    v29[12] = v159;
    CFRetain(v159);
    *(void *)&long long v183 = v29[12];
    CFStringRef v113 = (const __CFString *)systemInfo_copyProductType();
    uint64_t v114 = v4[49];
    if (v114 && gNumLogObjects >= 56)
    {
      id v115 = *(id *)(v114 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v115 = &_os_log_default;
      id v116 = &_os_log_default;
    }
    uint64_t v117 = v26;
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = v113;
      _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "productType %@", valuePtr, 0xCu);
    }

    long long v163 = 0u;
    long long v164 = 0u;
    long long v161 = 0u;
    long long v162 = 0u;
    id v118 = v159;
    id v119 = [v118 countByEnumeratingWithState:&v161 objects:v172 count:16];
    if (v119)
    {
      id v120 = v119;
      LOBYTE(v121) = 0;
      uint64_t v122 = *(void *)v162;
      do
      {
        for (uint64_t i = 0; i != v120; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v162 != v122) {
            objc_enumerationMutation(v118);
          }
          BOOL v121 = v121
              || CFEqual(v113, *(CFStringRef *)(*((void *)&v161 + 1) + 8 * i));
        }
        id v120 = [v118 countByEnumeratingWithState:&v161 objects:v172 count:16];
      }
      while (v120);

      if (*(void *)a1) {
        BOOL v124 = v121;
      }
      else {
        BOOL v124 = 0;
      }
      uint64_t v26 = v117;
      if (!v124) {
        goto LABEL_237;
      }
      CFStringRef v125 = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a1);
      if (v125)
      {
        CFStringRef v126 = v125;
        uint64_t v127 = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(v125);
        if (v127)
        {
          acc_endpoint_setProperty(v127, kCFACCProperties_Endpoint_NFC_DisplayUI, kCFBooleanTrue);
          CFRelease(v126);
          goto LABEL_237;
        }
        CFRelease(v126);
      }
      v159 = v118;
      uint64_t v27 = v32;
      goto LABEL_246;
    }

LABEL_237:
    uint64_t v128 = v4[49];
    if (v128 && gNumLogObjects >= 56)
    {
      uint64_t v129 = *(id *)(v128 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v129 = &_os_log_default;
      id v130 = &_os_log_default;
    }
    uint64_t v27 = v32;
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v131 = *(void *)(a1 + 72);
      *(_DWORD *)float valuePtr = 134218240;
      *(void *)&valuePtr[4] = v131;
      *(_WORD *)&valuePtr[12] = 2048;
      *(void *)&valuePtr[14] = v154;
      _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEFAULT, "supportedSecureTunnelCapabilitiesMask: 0x%llx -> 0x%llx", valuePtr, 0x16u);
    }

    *(void *)(a1 + 72) = v154;
    *(_DWORD *)(a1 + 32) = 0;
    goto LABEL_246;
  }
  CFStringRef v92 = CFStringCreateCopy(v12, *(CFStringRef *)a1);
  if (v92)
  {
    CFStringRef v93 = v92;
    uint64_t v94 = acc_manager_getEndpointWithUUID(v92);
    if (v94)
    {
      acc_endpoint_setAccessoryInfo((uint64_t)v94, (uint64_t)&v178);
      CFRelease(v93);
      goto LABEL_182;
    }
    CFStringRef v148 = v93;
LABEL_261:
    CFRelease(v148);
  }
LABEL_246:

LABEL_247:
}

void _handleNvmReadUserPublicKey(uint64_t a1, int a2)
{
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 30))
    {
      if (!*(void *)a1) {
        goto LABEL_64;
      }
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a1);
      if (!Copy) {
        goto LABEL_64;
      }
      CFStringRef v5 = Copy;
      EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(Copy);
      if (!EndpointWithUUID) {
        goto LABEL_63;
      }
      long long v7 = EndpointWithUUID;
      if (1 << _convertNVMReadResponse(a1, 1, 0) != a2)
      {
        if (1 << _convertNVMReadResponse(a1, 2, 0) != a2) {
          goto LABEL_54;
        }
        if (gLogObjects && gNumLogObjects >= 56)
        {
          id v17 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v17 = &_os_log_default;
          id v18 = &_os_log_default;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "NotPaired", buf, 2u);
        }

        uint64_t sig = v7->__sig;
        int v20 = 1;
LABEL_53:
        acc_connection_setPairingStatus(sig, v20);
LABEL_54:
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v27 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v27 = &_os_log_default;
          id v28 = &_os_log_default;
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v45 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "setProperty: NFC_InfoAvailable", v45, 2u);
        }

        acc_endpoint_setProperty(v7, kCFACCProperties_Endpoint_NFC_InfoAvailable, kCFBooleanTrue);
LABEL_63:
        CFRelease(v5);
        goto LABEL_64;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 712) + 80);
      if (!v8)
      {
        __int16 v44 = logObjectForModule_9();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v50 = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "_handleNvmReadUserPublicKey: !serialNumberString", v50, 2u);
        }

        goto LABEL_54;
      }
      int v9 = (__SecKey *)mfi4Auth_protocol_nvm_copyUserPublicKeyForSerialNumber(v8);
      if (v9)
      {
        PublicKey = _extractPublicKey(v9);
        if (!PublicKey) {
          goto LABEL_54;
        }
        __int16 v11 = PublicKey;
        CachedUserPublicKey = _getCachedUserPublicKey(a1);
        if (!CachedUserPublicKey) {
          goto LABEL_54;
        }
        int v13 = memcmp(v11, CachedUserPublicKey, 0x40uLL);
        if (gLogObjects) {
          BOOL v14 = gNumLogObjects <= 55;
        }
        else {
          BOOL v14 = 1;
        }
        int v15 = !v14;
        if (!v13)
        {
          if (v15)
          {
            unint64_t v21 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            unint64_t v21 = &_os_log_default;
            id v26 = &_os_log_default;
          }
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int v47 = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "PairedToCurrentUser", v47, 2u);
          }

          uint64_t sig = v7->__sig;
          int v20 = 2;
          goto LABEL_53;
        }
        if (v15)
        {
          uint64_t v16 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v16 = &_os_log_default;
          id v22 = &_os_log_default;
        }
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_46;
        }
        __int16 v48 = 0;
        unsigned int v23 = "PairedToAnotherUser";
        uint64_t v24 = (uint8_t *)&v48;
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v16 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v16 = &_os_log_default;
          id v25 = &_os_log_default;
        }
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_46;
        }
        *(_WORD *)uint64_t v49 = 0;
        unsigned int v23 = "PairedToAnotherUser (!keyRef)";
        uint64_t v24 = v49;
      }
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v23, v24, 2u);
LABEL_46:

      uint64_t sig = v7->__sig;
      int v20 = 3;
      goto LABEL_53;
    }
    uint64_t v29 = logObjectForModule_9();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      _handleNvmReadUserPublicKey_cold_7(v29, v37, v38, v39, v40, v41, v42, v43);
    }
  }
  else
  {
    uint64_t v29 = logObjectForModule_9();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      _handleNvmReadUserPublicKey_cold_1(v29, v30, v31, v32, v33, v34, v35, v36);
    }
  }

LABEL_64:
  if (!*(unsigned char *)(a1 + 89))
  {
    notify_post("com.apple.accessories.connection.passedMFi4Auth");
    *(unsigned char *)(a1 + 89) = 1;
  }
}

void _replyGetNVMKey(uint64_t a1)
{
  uint64_t v2 = (void (**)(id, __CFDictionary *, void))objc_retainBlock(*(id *)(a1 + 64));
  if (*(unsigned char *)(a1 + 30))
  {
    CFIndex v21 = -1431655766;
    int v20 = logObjectForModule_9();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      _replyGetNVMKey_cold_3(v20, v26, v27, v28, v29, v30, v31, v32);
    }
    goto LABEL_40;
  }
  CFIndex v3 = *(int *)(a1 + 36);
  if (!v3)
  {
    int v20 = logObjectForModule_9();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      uint64_t v33 = "_replyGetNVMKey: !actionKeyCount";
LABEL_55:
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v33, buf, 2u);
    }
LABEL_56:
    CFIndex v21 = -1;
    goto LABEL_40;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, v3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    int v20 = logObjectForModule_9();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      uint64_t v33 = "_replyGetNVMKey: !userPublicNVMKeyValues";
      goto LABEL_55;
    }
    goto LABEL_56;
  }
  CFStringRef v5 = Mutable;
  uint64_t v34 = v2;
  if (*(int *)(a1 + 36) < 1)
  {
LABEL_21:
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v18 = *(id *)(gLogObjects + 440);
      uint64_t v2 = v34;
    }
    else
    {
      uint64_t v2 = v34;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v18 = &_os_log_default;
      id v19 = &_os_log_default;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "_replyGetNVMKey: dictionary", buf, 2u);
    }

    v2[2](v2, v5, 0);
    goto LABEL_30;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a1 + 712);
  while (1)
  {
    CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, (const void *)(*(void *)(a1 + 40) + v6));
    if (!v9) {
      break;
    }
    CFNumberRef v10 = v9;
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v8 + 48), v9))
    {
      CFDataRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 48), v10);
      if (!Value)
      {
        int v20 = logObjectForModule_9();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          id v22 = "_replyGetNVMKey: !valueData";
          goto LABEL_38;
        }
LABEL_39:
        CFIndex v21 = -1;
        uint64_t v2 = v34;
        goto LABEL_40;
      }
      CFAllocatorRef v12 = Value;
      CFStringRef v13 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%d", *(unsigned __int16 *)(*(void *)(a1 + 40) + v6));
      if (!v13)
      {
        int v20 = logObjectForModule_9();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          id v22 = "_replyGetNVMKey: !keyStringRef";
LABEL_38:
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v22, buf, 2u);
        }
        goto LABEL_39;
      }
      CFDictionaryAddValue(v5, v13, v12);
    }
    else
    {
      uint64_t v14 = gLogObjects;
      int v15 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v16 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v36 = v14;
          __int16 v37 = 1024;
          int v38 = v15;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
        id v17 = &_os_log_default;
        uint64_t v16 = &_os_log_default;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "_replyGetNVMKey: !contains", buf, 2u);
      }
    }
    ++v7;
    v6 += 2;
    if (v7 >= *(int *)(a1 + 36)) {
      goto LABEL_21;
    }
  }
  int v20 = logObjectForModule_9();
  uint64_t v2 = v34;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "_replyGetNVMKey: !keyRef", buf, 2u);
  }
  CFIndex v21 = -1;
LABEL_40:

  if (gLogObjects && gNumLogObjects >= 56)
  {
    unsigned int v23 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v23 = &_os_log_default;
    id v24 = &_os_log_default;
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "_replyGetNVMKey: error", buf, 2u);
  }

  CFErrorRef v25 = CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainPOSIX, v21, 0);
  ((void (**)(id, __CFDictionary *, CFErrorRef))v2)[2](v2, 0, v25);
LABEL_30:
}

uint64_t mfi4Auth_protocol_initMessage_RequestNVMAuthStart(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  if (!a1)
  {
    __int16 v11 = logObjectForModule_9();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMAuthStart_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    goto LABEL_18;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    __int16 v11 = logObjectForModule_9();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMAuthStart_cold_3(v11, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_18:

    return 1;
  }
  __int16 v6 = *(_WORD *)(a1 + 200);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v7 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v7 = &_os_log_default;
    id v8 = &_os_log_default;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "initMessage_RequestNVMAuthStart", v26, 2u);
  }

  if (!a2) {
    return 1;
  }
  CFNumberRef v9 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = (uint64_t)v9;
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v9, v6, 20797, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  iAP2MsgAddU16Param(*a2, 0, 0, a3);
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20797;
  return result;
}

uint64_t _copyOrCreateUserPublicKeyForSerialNumber(uint64_t a1)
{
  BOOL v1 = +[NSString stringWithFormat:@"com.apple.accessoryd.mfi4.userPublicKey.%@", a1];
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v2 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v8 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "_copyOrCreateUserPublicKeyForSerialNumber: featureTag: %@", buf, 0xCu);
  }

  MFi4AuthFeatureGroup();
  SynchronizableKeyForAuthuint64_t Feature = CopySynchronizableKeyForAuthFeature();
  if (!SynchronizableKeyForAuthFeature)
  {
    MFi4AuthFeatureGroup();
    SynchronizableKeyForAuthuint64_t Feature = CreateSynchronizableKeyForAuthFeature();
    if (!SynchronizableKeyForAuthFeature)
    {
      __int16 v6 = logObjectForModule_9();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "_copyOrCreateUserPublicKeyForSerialNumber: failed", buf, 2u);
      }

      SynchronizableKeyForAuthuint64_t Feature = 0;
    }
  }

  return SynchronizableKeyForAuthFeature;
}

CFDataRef _generateUserSignature(__SecKey *a1, long long *a2, long long *a3)
{
  CFErrorRef error = 0;
  char data = 2;
  long long v10 = *a2;
  long long v11 = *a3;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)md = v4;
  long long v8 = v4;
  CC_SHA256(&data, 0x21u, md);
  if (!a1) {
    return 0;
  }
  CFDataRef result = CFDataCreate(kCFAllocatorDefault, md, 32);
  if (result) {
    return SecKeyCreateSignature(a1, kSecKeyAlgorithmECDSASignatureRFC4754, result, &error);
  }
  return result;
}

uint64_t mfi4Auth_protocol_handle_NVMWriteResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v107 = 1;
  if (!a1)
  {
    unint64_t v79 = logObjectForModule_9();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMWriteResponse_cold_2(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    goto LABEL_161;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    unint64_t v79 = logObjectForModule_9();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMWriteResponse_cold_7(v79, v87, v88, v89, v90, v91, v92, v93);
    }
    goto LABEL_161;
  }
  if (!a3)
  {
    unint64_t v79 = logObjectForModule_9();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMWriteResponse_cold_3(v79, v94, v95, v96, v97, v98, v99, v100);
    }
    goto LABEL_161;
  }
  char v106 = 0;
  *(void *)&long long __dst = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&__dst + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a3, 0);
  int v7 = 0;
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  uint64_t v104 = 0;
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v13 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v12;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
      id v14 = &_os_log_default;
      uint64_t v13 = &_os_log_default;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_NVMWriteResponse: paramID: %d", buf, 8u);
    }

    if (*(unsigned char *)(a1 + 144) == 2)
    {
      switch(ParamID)
      {
        case 2:
          if (v9 >= 0x40)
          {
            uint64_t v22 = gLogObjects;
            int v23 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 56)
            {
              uint64_t v19 = *(id *)(gLogObjects + 440);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)&uint8_t buf[4] = v22;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&unsigned char buf[14] = v23;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
              id v48 = &_os_log_default;
              uint64_t v19 = &_os_log_default;
            }
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_60;
            }
LABEL_87:

            break;
          }
          int DataAsU16 = iAP2MsgGetDataAsU16(FirstParam, &v107);
          uint64_t v35 = gLogObjects;
          int v36 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            __int16 v37 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v35;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = v36;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
            id v50 = &_os_log_default;
            __int16 v37 = &_os_log_default;
          }
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = DataAsU16;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "NVMWriteResponse: keyNotWritten: 0x%x", buf, 8u);
          }

          if (v107) {
            goto LABEL_164;
          }
          ++v9;
          v7 |= 4u;
          break;
        case 1:
          if (v8 < 0x40)
          {
            int v38 = iAP2MsgGetDataAsU16(FirstParam, &v107);
            uint64_t v39 = gLogObjects;
            int v40 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 56)
            {
              uint64_t v41 = *(id *)(gLogObjects + 440);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)&uint8_t buf[4] = v39;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&unsigned char buf[14] = v40;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
              id v51 = &_os_log_default;
              uint64_t v41 = &_os_log_default;
            }
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v38;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "NVMWriteResponse: keyWritten: 0x%x", buf, 8u);
            }

            if (v107) {
              goto LABEL_164;
            }
            ++v8;
            LODWORD(v104) = v104 | (v38 == 21248);
            HIDWORD(v104) |= (v38 - 21249) < 0xFF;
LABEL_102:
            v7 |= 2u;
            break;
          }
          uint64_t v24 = gLogObjects;
          int v25 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v19 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v24;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = v25;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
            id v49 = &_os_log_default;
            uint64_t v19 = &_os_log_default;
          }
          if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_87;
          }
          goto LABEL_85;
        case 0:
          int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v107, &__dst, 16);
          unsigned int v16 = v107;
          if (v107 || DataAsArrayU8 != 16) {
            goto LABEL_163;
          }
LABEL_68:
          v7 |= 1u;
          break;
      }
    }
    else
    {
      if (ParamID == 1)
      {
        if (v9 < 0x40)
        {
          int v30 = iAP2MsgGetDataAsU16(FirstParam, &v107);
          uint64_t v31 = gLogObjects;
          int v32 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v33 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v31;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = v32;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
            id v47 = &_os_log_default;
            uint64_t v33 = &_os_log_default;
          }
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v30;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "NVMWriteResponse: keyNotWritten: 0x%x", buf, 8u);
          }

          if (v107) {
            goto LABEL_164;
          }
          ++v9;
          goto LABEL_102;
        }
        uint64_t v20 = gLogObjects;
        int v21 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v19 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v20;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v21;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
          id v43 = &_os_log_default;
          uint64_t v19 = &_os_log_default;
        }
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_87;
        }
LABEL_60:
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 64;
        __int16 v44 = v19;
        id v45 = "NVMWriteResponse: reached limit of %d keyNotWritten parameters";
        goto LABEL_86;
      }
      if (!ParamID)
      {
        if (v8 >= 0x40)
        {
          uint64_t v17 = gLogObjects;
          int v18 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v19 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v17;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = v18;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
            id v42 = &_os_log_default;
            uint64_t v19 = &_os_log_default;
          }
          if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_87;
          }
LABEL_85:
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = 64;
          __int16 v44 = v19;
          id v45 = "NVMWriteResponse: reached limit of %d keyWritten parameters";
LABEL_86:
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, v45, buf, 8u);
          goto LABEL_87;
        }
        int v26 = iAP2MsgGetDataAsU16(FirstParam, &v107);
        uint64_t v27 = gLogObjects;
        int v28 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v29 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v27;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v28;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
          id v46 = &_os_log_default;
          uint64_t v29 = &_os_log_default;
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v26;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "NVMWriteResponse: keyWritten: 0x%x", buf, 8u);
        }

        if (v107) {
          goto LABEL_164;
        }
        ++v8;
        LODWORD(v104) = v104 | (v26 == 21248);
        HIDWORD(v104) |= (v26 - 21249) < 0xFF;
        goto LABEL_68;
      }
    }
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a3, 0, FirstParam, &v106);
    if (v106) {
      goto LABEL_162;
    }
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v52 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v52 = &_os_log_default;
    id v53 = &_os_log_default;
  }
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_NVMWriteResponse: paramMask: 0x%x", buf, 8u);
  }

  if (1 << _convertNVMWriteResponse(a1, 1, 0) == v7)
  {
    if (v104)
    {
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a1);
      if (Copy)
      {
        CFStringRef v55 = Copy;
        EndpointWithUUID = (uint64_t *)acc_manager_getEndpointWithUUID(Copy);
        if (EndpointWithUUID) {
          acc_connection_setPairingStatus(*EndpointWithUUID, 2);
        }
        CFRelease(v55);
      }
      if (*(_DWORD *)(a1 + 32) == 4)
      {
        id v57 = (void (**)(id, void))objc_retainBlock(*(id *)(a1 + 64));
        if (v57)
        {
          uint64_t v58 = logObjectForModule_9();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_NVMWriteResponse: reply", buf, 2u);
          }

          v57[2](v57, 0);
        }
        *(void *)(a1 + 64) = 0;
        *(_DWORD *)(a1 + 32) = 0;
      }
    }
    if ((v104 & 0x100000000) != 0)
    {
      int v59 = *(_DWORD *)(a1 + 32);
      if (v59 == 6)
      {
        unsigned __int8 v60 = (void (**)(id, void))objc_retainBlock(*(id *)(a1 + 64));
        v60[2](v60, 0);
        *(void *)(a1 + 64) = 0;
        *(_DWORD *)(a1 + 32) = 0;

        int v59 = *(_DWORD *)(a1 + 32);
      }
      if (v59 == 8)
      {
        id v61 = (void (**)(id, void))objc_retainBlock(*(id *)(a1 + 64));
        v61[2](v61, 0);
        *(void *)(a1 + 64) = 0;
        *(_DWORD *)(a1 + 32) = 0;
      }
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 144) != 2 || v7 != 5)
  {
    char v63 = _convertNVMWriteResponse(a1, 2, 0);
    uint64_t result = 0;
    if (1 << v63 != v7) {
      return result;
    }
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v65 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v65 = &_os_log_default;
      id v78 = &_os_log_default;
    }
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_NVMWriteResponse: unknown combination of params", buf, 2u);
    }

    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    char v62 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    char v62 = &_os_log_default;
    id v66 = &_os_log_default;
  }
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_NVMWriteResponse: received Nonce", buf, 2u);
  }

  memset(buf, 170, 16);
  arc4random_buf(buf, 0x10uLL);
  uint64_t v67 = *(void *)(*(void *)(a1 + 712) + 80);
  if (!v67)
  {
    unsigned int v107 = -1;
    unint64_t v79 = logObjectForModule_9();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v105 = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "NVMWriteResponse: !serialNumberString", v105, 2u);
    }
LABEL_161:

LABEL_162:
    unsigned int v16 = v107;
LABEL_163:
    if (v16) {
      goto LABEL_164;
    }
    return 0;
  }
  UserPublicKeyForSerialNumber = (__SecKey *)_copyOrCreateUserPublicKeyForSerialNumber(v67);
  if (!UserPublicKeyForSerialNumber)
  {
    unsigned int v107 = -1;
    goto LABEL_162;
  }
  int v69 = UserPublicKeyForSerialNumber;
  CFDataRef v70 = _generateUserSignature(UserPublicKeyForSerialNumber, &__dst, (long long *)buf);
  if (v70)
  {
    CFDataRef v71 = v70;
    if (_extractPublicKey(v69))
    {
      __int16 v72 = *(_WORD *)(a1 + 200);
      unsigned int v73 = *(unsigned __int16 **)(a1 + 40);
      uint64_t v74 = *(uint64_t **)(a1 + 48);
      int v75 = *(_DWORD **)(a1 + 56);
      unsigned int v76 = *(unsigned __int8 *)(a1 + 36);
      BytePtr = CFDataGetBytePtr(v71);
      mfi4Auth_protocol_initMessage_RequestUserNVMWrite(a1, v72, a4, v73, v74, v75, v76, (uint64_t)BytePtr, (uint64_t)buf);
      return 0;
    }
  }
  unsigned int v107 = -1;
LABEL_164:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    __int16 v101 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v101 = &_os_log_default;
    id v102 = &_os_log_default;
  }
  if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_NVMWriteResponse: error", buf, 2u);
  }

  return v107;
}

uint64_t _convertNVMWriteResponse(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1)
  {
    int v12 = logObjectForModule_9();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      _convertNVMWriteResponse_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    goto LABEL_27;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    int v12 = logObjectForModule_9();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      _convertNVMWriteResponse_cold_3(v12, v20, v21, v22, v23, v24, v25, v26);
    }
LABEL_27:

    uint64_t v7 = a2;
    goto LABEL_11;
  }
  BOOL v6 = *(unsigned char *)(a1 + 144) != 3 && a3 == 0;
  uint64_t v7 = a2;
  if (!v6)
  {
    if (a2 == 2)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v7 = a2;
      if (a2 == 1) {
        uint64_t v7 = 0;
      }
    }
  }
LABEL_11:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    unsigned int v8 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      int v11 = *(unsigned __int8 *)(a1 + 144);
    }
    else {
      int v11 = -1;
    }
    int v27 = 136316418;
    int v28 = "_convertNVMWriteResponse";
    __int16 v29 = 1024;
    int v30 = 3062;
    __int16 v31 = 1024;
    int v32 = v11;
    __int16 v33 = 1024;
    int v34 = a3;
    __int16 v35 = 1024;
    int v36 = a2;
    __int16 v37 = 1024;
    int v38 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s:%d negotiatedVersion %d, force %d, commandID 0x%04x -> 0x%04x", (uint8_t *)&v27, 0x2Au);
  }

  return v7;
}

UInt8 *_extractPublicKey(__SecKey *a1)
{
  CFErrorRef error = 0;
  if (!a1) {
    return 0;
  }
  SecKeyRef v1 = SecKeyCopyPublicKey(a1);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v3 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v3 = &_os_log_default;
    id v4 = &_os_log_default;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "_extractPublicKey: SecKeyCopyExternalRepresentation", buf, 2u);
  }

  CFDataRef v5 = SecKeyCopyExternalRepresentation(v2, &error);
  if (error)
  {
    uint64_t v13 = logObjectForModule_9();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      CFIndex Code = CFErrorGetCode(error);
      *(_DWORD *)buf = 134217984;
      CFIndex v18 = Code;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "cfError: 0x%ld", buf, 0xCu);
    }

    return 0;
  }
  CFDataRef v6 = v5;
  if (!v5) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v7 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v7 = &_os_log_default;
    id v8 = &_os_log_default;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "_extractPublicKey: CFDataGetLength", buf, 2u);
  }

  CFIndex Length = CFDataGetLength(v6);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    long long v10 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    long long v10 = &_os_log_default;
    id v11 = &_os_log_default;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    CFIndex v18 = Length;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "_extractPublicKey: keyDataLength:%ld", buf, 0xCu);
  }

  if (Length != 65) {
    return 0;
  }
  int v12 = (UInt8 *)malloc_type_calloc(0x40uLL, 1uLL, 0x840CEE5FuLL);
  v19.location = 1;
  v19.length = 64;
  CFDataGetBytes(v6, v19, v12);
  return v12;
}

uint64_t mfi4Auth_protocol_initMessage_RequestUserNVMWrite(uint64_t a1, __int16 a2, uint64_t *a3, unsigned __int16 *a4, uint64_t *a5, _DWORD *a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
  {
    uint64_t v26 = logObjectForModule_9();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestUserNVMWrite_cold_1(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    goto LABEL_27;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v26 = logObjectForModule_9();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestUserNVMWrite_cold_5(v26, v34, v35, v36, v37, v38, v39, v40);
    }
    goto LABEL_27;
  }
  long long v10 = a4;
  if (!a4)
  {
    uint64_t v26 = logObjectForModule_9();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestUserNVMWrite_cold_2(v26, v41, v42, v43, v44, v45, v46, v47);
    }
    goto LABEL_27;
  }
  id v11 = a5;
  if (!a5)
  {
    uint64_t v26 = logObjectForModule_9();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestUserNVMWrite_cold_3(v26, v48, v49, v50, v51, v52, v53, v54);
    }
    goto LABEL_27;
  }
  int v12 = a6;
  if (!a6)
  {
    uint64_t v26 = logObjectForModule_9();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestUserNVMWrite_cold_4(v26, v55, v56, v57, v58, v59, v60, v61);
    }
LABEL_27:

    return 1;
  }
  if (!a3) {
    return 1;
  }
  uint64_t v17 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a3 = (uint64_t)v17;
  if (!v17) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v17, a2, 20787, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  if (*(unsigned char *)(a1 + 144) == 2)
  {
    if (a8) {
      iAP2MsgAddArrayU8Param(*a3, 0, 0, a8, 0x40u);
    }
    if (a9) {
      iAP2MsgAddArrayU8Param(*a3, 0, 1, a9, 0x10u);
    }
  }
  __int16 v18 = _convertUserNVMWrite(a1, 2);
  if (a7)
  {
    __int16 v19 = v18;
    uint64_t v20 = a7;
    do
    {
      uint64_t v21 = iAP2MsgAddGroupParam(*a3, v19);
      unsigned int v22 = *v10++;
      iAP2MsgAddU16Param(*a3, (uint64_t)v21, 0, v22);
      uint64_t v24 = *v11++;
      uint64_t v23 = v24;
      LODWORD(v24) = *v12++;
      iAP2MsgAddArrayU8Param(*a3, (uint64_t)v21, 1, v23, v24);
      --v20;
    }
    while (v20);
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20787;
  return result;
}

uint64_t mfi4Auth_protocol_handle_NVMPublicKeyChallenge(uint64_t a1, __int16 a2, uint64_t a3, uint64_t *a4, unsigned char *a5)
{
  int v100 = 1;
  if (!a1)
  {
    uint64_t v44 = logObjectForModule_9();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_3(v44, v62, v63, v64, v65, v66, v67, v68);
    }
    goto LABEL_155;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v44 = logObjectForModule_9();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_16(v44, v69, v70, v71, v72, v73, v74, v75);
    }
    goto LABEL_155;
  }
  if (!a3)
  {
    uint64_t v44 = logObjectForModule_9();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_4(v44, v76, v77, v78, v79, v80, v81, v82);
    }
    goto LABEL_155;
  }
  if (!a5)
  {
    uint64_t v44 = logObjectForModule_9();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_5(v44, v83, v84, v85, v86, v87, v88, v89);
    }
LABEL_155:

LABEL_156:
    BOOL v21 = v100;
LABEL_157:
    if (!v21) {
      return 0;
    }
LABEL_158:
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v91 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v91 = &_os_log_default;
      id v92 = &_os_log_default;
    }
    if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_1();
    }

    return v100;
  }
  char v99 = 0;
  long long bytes = 0uLL;
  uint64_t v96 = *(void *)(a1 + 712);
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a3, 0);
  int v7 = 0;
  LOBYTE(v8) = 0;
  int v9 = 0;
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v13 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v12;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
      id v14 = &_os_log_default;
      uint64_t v13 = &_os_log_default;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "handle_NVMPublicKeyChallenge: paramID: %d", buf, 8u);
    }

    switch(ParamID)
    {
      case 2:
        BOOL DataAsBool = iAP2MsgGetDataAsBool(FirstParam, (BOOL *)&v100);
        if (v100) {
          goto LABEL_158;
        }
        BOOL v8 = DataAsBool;
        uint64_t v17 = gLogObjects;
        int v18 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          __int16 v19 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v17;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v18;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
          id v22 = &_os_log_default;
          __int16 v19 = &_os_log_default;
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v8;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "handle_NVMPublicKeyChallenge: isProgrammed: %d", buf, 8u);
        }

        if (v8 && *(_DWORD *)(a1 + 32) == 4)
        {
          uint64_t v23 = *(void **)(a1 + 64);
          if (v23)
          {
            uint64_t v24 = objc_retainBlock(v23);
            uint64_t v25 = gLogObjects;
            int v26 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 56)
            {
              uint64_t v27 = *(id *)(gLogObjects + 440);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)&uint8_t buf[4] = v25;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&unsigned char buf[14] = v26;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
              id v28 = &_os_log_default;
              uint64_t v27 = &_os_log_default;
            }
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "handle_NVMPublicKeyChallenge: reply", buf, 2u);
            }

            id v29 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
            v24[2](v24, v29);
            *(_DWORD *)(a1 + 32) = 0;
            *(void *)(a1 + 64) = 0;
          }
        }
        v7 |= 4u;
        break;
      case 1:
        int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v100, &bytes, 16);
        BOOL v21 = v100;
        if (v100 || DataAsArrayU8 != 16) {
          goto LABEL_157;
        }
        v7 |= 2u;
        break;
      case 0:
        int DataAsU16 = iAP2MsgGetDataAsU16(FirstParam, &v100);
        if (v100) {
          goto LABEL_158;
        }
        int v9 = DataAsU16;
        v7 |= 1u;
        break;
    }
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a3, 0, FirstParam, &v99);
    if (v99) {
      goto LABEL_156;
    }
  }
  if (v7 != 7) {
    goto LABEL_156;
  }
  uint64_t result = 0;
  switch(*(_DWORD *)(a1 + 32))
  {
    case 4:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v31 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v31 = &_os_log_default;
        id v35 = &_os_log_default;
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "handle_NVMPublicKeyChallenge: kMfi4Auth_Action_WriteUserKey", buf, 2u);
      }

      if (v9 != 21248)
      {
        uint64_t v44 = logObjectForModule_9();
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)buf = 0;
        uint64_t v45 = "handle_NVMPublicKeyChallenge: !kMFi4_Area51_NVM_User_PublicKey";
        goto LABEL_140;
      }
      if (v8)
      {
        uint64_t v44 = logObjectForModule_9();
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)buf = 0;
        uint64_t v45 = "handle_NVMPublicKeyChallenge: isProgrammed";
        goto LABEL_140;
      }
      memset(buf, 170, 16);
      arc4random_buf(buf, 0x10uLL);
      uint64_t v36 = *(void *)(v96 + 80);
      if (!v36)
      {
        int v100 = -1;
        uint64_t v44 = logObjectForModule_9();
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)uint64_t v98 = 0;
        uint64_t v45 = "NVMPublicKeyChallenge: WriteUserKey: !serialNumberString";
        goto LABEL_153;
      }
      UserPublicKeyForSerialNumber = (__SecKey *)_copyOrCreateUserPublicKeyForSerialNumber(v36);
      if (!UserPublicKeyForSerialNumber
        || (uint64_t v38 = UserPublicKeyForSerialNumber,
            (CFDataRef v39 = _generateUserSignature(UserPublicKeyForSerialNumber, &bytes, (long long *)buf)) == 0))
      {
        int v100 = -1;
        goto LABEL_156;
      }
      CFDataRef v40 = v39;
      PublicKey = _extractPublicKey(v38);
      if (!PublicKey)
      {
        int v100 = -1;
        uint64_t v44 = logObjectForModule_9();
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)uint64_t v98 = 0;
        uint64_t v45 = "NVMPublicKeyChallenge: WriteUserKey: !userPublicKey";
        goto LABEL_153;
      }
      uint64_t v42 = (uint64_t)PublicKey;
      BytePtr = CFDataGetBytePtr(v40);
      uint64_t result = mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey(a1, a4, 0x5300u, v42, 0x40u, (uint64_t)buf, (uint64_t)BytePtr);
      int v100 = result;
      if (result)
      {
        uint64_t v44 = logObjectForModule_9();
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)uint64_t v98 = 0;
        uint64_t v45 = "NVMPublicKeyChallenge: WriteUserKey: initMessage_RequestNVMWritePublicKey error";
        goto LABEL_153;
      }
      return result;
    case 5:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v32 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v32 = &_os_log_default;
        id v46 = &_os_log_default;
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "handle_NVMPublicKeyChallenge: kMfi4Auth_Action_EraseUserKey", buf, 2u);
      }

      memset(buf, 170, 16);
      arc4random_buf(buf, 0x10uLL);
      if (v9 != 21248)
      {
        uint64_t v44 = logObjectForModule_9();
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)uint64_t v98 = 0;
        uint64_t v45 = "handle_NVMPublicKeyChallenge: !kMFi4_Area51_NVM_User_PublicKey";
        goto LABEL_153;
      }
      if (!v8)
      {
        uint64_t v44 = logObjectForModule_9();
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)uint64_t v98 = 0;
        uint64_t v45 = "handle_NVMPublicKeyChallenge: !isProgrammed";
        goto LABEL_153;
      }
      uint64_t v47 = *(void *)(v96 + 80);
      if (!v47)
      {
        int v100 = -1;
        uint64_t v44 = logObjectForModule_9();
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)uint64_t v98 = 0;
        uint64_t v45 = "handle_NVMPublicKeyChallenge: EraseUserKey: !serialNumberString";
        goto LABEL_153;
      }
      uint64_t v48 = (__SecKey *)_copyOrCreateUserPublicKeyForSerialNumber(v47);
      if (!v48)
      {
        int v100 = -1;
        uint64_t v44 = logObjectForModule_9();
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)uint64_t v98 = 0;
        uint64_t v45 = "handle_NVMPublicKeyChallenge: EraseUserKey: _copyOrCreateUserPublicKeyForSerialNumber failed";
        goto LABEL_153;
      }
      uint64_t v49 = v48;
      CFDataRef v50 = _generateUserSignature(v48, &bytes, (long long *)buf);
      if (!v50)
      {
        int v100 = -1;
        uint64_t v44 = logObjectForModule_9();
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)uint64_t v98 = 0;
        uint64_t v45 = "handle_NVMPublicKeyChallenge: EraseUserKey: _generateUserSignature failed";
        goto LABEL_153;
      }
      CFDataRef v51 = v50;
      if (!_extractPublicKey(v49))
      {
        int v100 = -1;
        uint64_t v44 = logObjectForModule_9();
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)uint64_t v98 = 0;
        uint64_t v45 = "handle_NVMPublicKeyChallenge: EraseUserKey: !userPublicKey";
        goto LABEL_153;
      }
      uint64_t v52 = CFDataGetBytePtr(v51);
      uint64_t result = mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey(a1, a2, a4, 0x5300u, 0x5300u, (uint64_t)buf, (uint64_t)v52);
      int v100 = result;
      if (result)
      {
        uint64_t v44 = logObjectForModule_9();
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)uint64_t v98 = 0;
        uint64_t v45 = "handle_NVMPublicKeyChallenge: EraseUserKey: initMessage_RequestNVMErasePublicKey error";
LABEL_153:
        uint64_t v90 = v98;
        goto LABEL_154;
      }
      break;
    case 0xA:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v33 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v33 = &_os_log_default;
        id v53 = &_os_log_default;
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "handle_NVMPublicKeyChallenge: kMfi4Auth_Action_BeginVendorKeyErase", buf, 2u);
      }

      uint64_t v54 = *(void **)(a1 + 64);
      if (v54)
      {
        id v55 = objc_retainBlock(v54);
        uint64_t v56 = (void (**)(void, void, void))v55;
        if (v9 == 20992)
        {
          if (v8)
          {
            CFDataRef v57 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&bytes, 16);
            if (v57) {
              goto LABEL_109;
            }
            v56[2](v56, 0, 0);
            uint64_t v58 = logObjectForModule_9();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_8();
            }
          }
          else
          {
            (*((void (**)(id, void, void))v55 + 2))(v55, 0, 0);
            uint64_t v58 = logObjectForModule_9();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_9();
            }
          }
        }
        else
        {
          (*((void (**)(id, void, void))v55 + 2))(v55, 0, 0);
          uint64_t v58 = logObjectForModule_9();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_10();
          }
        }
        goto LABEL_170;
      }
      uint64_t v44 = logObjectForModule_9();
      if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_155;
      }
      *(_WORD *)buf = 0;
      uint64_t v45 = "handle_NVMPublicKeyChallenge: BeginVendorKeyErase: !actionReply";
      goto LABEL_140;
    case 0xC:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v34 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v34 = &_os_log_default;
        id v59 = &_os_log_default;
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "handle_NVMPublicKeyChallenge: kMfi4Auth_Action_BeginUserKeyErase", buf, 2u);
      }

      uint64_t v60 = *(void **)(a1 + 64);
      if (!v60)
      {
        uint64_t v44 = logObjectForModule_9();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          uint64_t v45 = "handle_NVMPublicKeyChallenge: BeginUserKeyErase: !actionReply";
LABEL_140:
          uint64_t v90 = buf;
LABEL_154:
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, v45, v90, 2u);
        }
        goto LABEL_155;
      }
      id v61 = objc_retainBlock(v60);
      uint64_t v56 = (void (**)(void, void, void))v61;
      if (v9 == 21248)
      {
        if (v8)
        {
          CFDataRef v57 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&bytes, 16);
          if (v57)
          {
LABEL_109:
            *a5 = 1;
            ((void (**)(void, CFDataRef, void))v56)[2](v56, v57, 0);
            *(void *)(a1 + 64) = 0;
            *(_DWORD *)(a1 + 32) = 0;

            return 0;
          }
          v56[2](v56, 0, 0);
          uint64_t v58 = logObjectForModule_9();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_12();
          }
        }
        else
        {
          (*((void (**)(id, void, void))v61 + 2))(v61, 0, 0);
          uint64_t v58 = logObjectForModule_9();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_13();
          }
        }
      }
      else
      {
        (*((void (**)(id, void, void))v61 + 2))(v61, 0, 0);
        uint64_t v58 = logObjectForModule_9();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_14();
        }
      }
LABEL_170:

      goto LABEL_156;
    default:
      return result;
  }
  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    int v18 = logObjectForModule_9();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey_cold_1(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    int v18 = logObjectForModule_9();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey_cold_5(v18, v26, v27, v28, v29, v30, v31, v32);
    }
    goto LABEL_19;
  }
  if (!a4)
  {
    int v18 = logObjectForModule_9();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey_cold_2(v18, v33, v34, v35, v36, v37, v38, v39);
    }
    goto LABEL_19;
  }
  if (!a6)
  {
    int v18 = logObjectForModule_9();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey_cold_3(v18, v40, v41, v42, v43, v44, v45, v46);
    }
    goto LABEL_19;
  }
  if (!a7)
  {
    int v18 = logObjectForModule_9();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey_cold_4(v18, v47, v48, v49, v50, v51, v52, v53);
    }
LABEL_19:

    return 1;
  }
  if (!a2) {
    return 1;
  }
  __int16 v14 = *(_WORD *)(a1 + 200);
  uint64_t v15 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = (uint64_t)v15;
  if (!v15) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v15, v14, 20795, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  iAP2MsgAddU16Param(*a2, 0, 0, a3);
  iAP2MsgAddArrayU8Param(*a2, 0, 1, a7, 0x40u);
  iAP2MsgAddArrayU8Param(*a2, 0, 2, a6, 0x10u);
  uint64_t v16 = iAP2MsgAddGroupParam(*a2, 3);
  iAP2MsgAddU16Param(*a2, (uint64_t)v16, 0, a3);
  iAP2MsgAddArrayU8Param(*a2, (uint64_t)v16, 1, a4, a5);
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20795;
  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey(uint64_t a1, __int16 a2, uint64_t *a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    uint64_t v16 = logObjectForModule_9();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v16 = logObjectForModule_9();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey_cold_4(v16, v24, v25, v26, v27, v28, v29, v30);
    }
    goto LABEL_16;
  }
  if (!a6)
  {
    uint64_t v16 = logObjectForModule_9();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey_cold_2(v16, v31, v32, v33, v34, v35, v36, v37);
    }
    goto LABEL_16;
  }
  if (!a7)
  {
    uint64_t v16 = logObjectForModule_9();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey_cold_3(v16, v38, v39, v40, v41, v42, v43, v44);
    }
LABEL_16:

    return 1;
  }
  if (!a3) {
    return 1;
  }
  __int16 v14 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a3 = (uint64_t)v14;
  if (!v14) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v14, a2, 20796, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  iAP2MsgAddU16Param(*a3, 0, 0, a4);
  iAP2MsgAddArrayU8Param(*a3, 0, 1, a7, 0x40u);
  iAP2MsgAddArrayU8Param(*a3, 0, 2, a6, 0x10u);
  iAP2MsgAddU16Param(*a3, 0, 3, a5);
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20796;
  return result;
}

uint64_t mfi4Auth_protocol_handle_NVMAuthStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int inited = 1;
  char v49 = 0;
  char v53 = 0;
  long long __dst = 0u;
  long long v52 = 0u;
  if (!a1)
  {
    uint64_t v17 = logObjectForModule_9();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthStart_cold_1(v17, v20, v21, v22, v23, v24, v25, v26);
    }
    goto LABEL_36;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v17 = logObjectForModule_9();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthStart_cold_6(v17, v27, v28, v29, v30, v31, v32, v33);
    }
    goto LABEL_36;
  }
  if (!a2)
  {
    uint64_t v17 = logObjectForModule_9();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthStart_cold_2(v17, v34, v35, v36, v37, v38, v39, v40);
    }
    goto LABEL_36;
  }
  if (!a4)
  {
    uint64_t v17 = logObjectForModule_9();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthStart_cold_3(v17, v41, v42, v43, v44, v45, v46, v47);
    }
    goto LABEL_36;
  }
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
  int v6 = 0;
  __int16 v7 = 0;
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v9 = gLogObjects;
    int v10 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v11 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v55 = v9;
        __int16 v56 = 1024;
        int v57 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
      id v12 = &_os_log_default;
      uint64_t v11 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v55) = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthStart: paramID: %d", buf, 8u);
    }

    switch(ParamID)
    {
      case 2:
        int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &inited, &__dst, 33);
        if (inited || DataAsArrayU8 != 33) {
          return inited;
        }
        v6 |= 4u;
        break;
      case 1:
        __int16 DataAsU16 = iAP2MsgGetDataAsU16(FirstParam, &inited);
        if (inited) {
          return inited;
        }
        __int16 v7 = DataAsU16;
        v6 |= 2u;
        break;
      case 0:
        iAP2MsgGetDataAsU16(FirstParam, &inited);
        if (inited) {
          return inited;
        }
        v6 |= 1u;
        break;
    }
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0, FirstParam, &v49);
    if (v49) {
      return inited;
    }
  }
  if (v6 == 7)
  {
    uint64_t v15 = *(void *)(a1 + 712);
    *(_WORD *)(v15 + 136) = v7;
    long long v16 = v52;
    *(_OWORD *)(v15 + 138) = __dst;
    *(_OWORD *)(v15 + 154) = v16;
    *(unsigned char *)(v15 + 170) = v53;
    unsigned int inited = mfi4Auth_protocol_initSigmaContextNvm(a1);
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v17 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v17 = &_os_log_default;
      id v18 = &_os_log_default;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthStart_cold_4();
    }
LABEL_36:
  }
  return inited;
}

uint64_t mfi4Auth_protocol_initSigmaContextNvm(uint64_t a1)
{
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 30))
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v2 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v2 = &_os_log_default;
        id v3 = &_os_log_default;
      }
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_initSigmaContextNvm", v24, 2u);
      }

      id v4 = *(void **)(a1 + 712);
      CFDataRef v5 = malloc_type_malloc(0x2F0uLL, 0x10E0040123A03EAuLL);
      *id v4 = v5;
      if (v5)
      {
        if (*(void *)(a1 + 104))
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            int v6 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            int v6 = &_os_log_default;
            id v7 = &_os_log_default;
          }
          uint64_t v8 = 2863311530;
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_initSigmaContextNvm_cold_4();
          }
          goto LABEL_21;
        }
        int v6 = logObjectForModule_9();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_initSigmaContextNvm_cold_3();
        }
      }
      else
      {
        int v6 = logObjectForModule_9();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_initSigmaContextNvm_cold_2();
        }
      }
      uint64_t v8 = 0xFFFFFFFFLL;
      goto LABEL_21;
    }
    uint64_t v8 = 2863311530;
    int v6 = logObjectForModule_9();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContextNvm_cold_7(v6, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  else
  {
    uint64_t v8 = 2863311530;
    int v6 = logObjectForModule_9();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContextNvm_cold_1(v6, v10, v11, v12, v13, v14, v15, v16);
    }
  }
LABEL_21:

  return v8;
}

uint64_t mfi4Auth_protocol_handle_NVMAuthFinish(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int inited = 1;
  char v91 = 0;
  memset(__dst, 0, sizeof(__dst));
  long long v97 = 0u;
  long long v98 = 0u;
  *(_OWORD *)long long bytes = 0u;
  long long v96 = 0u;
  char v94 = 69;
  v93[0] = xmmword_1001B80F8;
  v93[1] = unk_1001B8108;
  v93[2] = xmmword_1001B8118;
  v93[3] = unk_1001B8128;
  if (!a1)
  {
    uint64_t v54 = logObjectForModule_9();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthFinish_cold_2(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    goto LABEL_149;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v54 = logObjectForModule_9();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthFinish_cold_26(v54, v62, v63, v64, v65, v66, v67, v68);
    }
    goto LABEL_149;
  }
  if (!a2)
  {
    uint64_t v54 = logObjectForModule_9();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthFinish_cold_3(v54, v69, v70, v71, v72, v73, v74, v75);
    }
    goto LABEL_149;
  }
  if (!a4)
  {
    uint64_t v54 = logObjectForModule_9();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthFinish_cold_4(v54, v76, v77, v78, v79, v80, v81, v82);
    }
LABEL_149:

    uint64_t v17 = 0;
    goto LABEL_156;
  }
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
  LOWORD(ParamValueLen) = 0;
  id v7 = 0;
  int v8 = 0;
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v10 = gLogObjects;
    int v11 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v12 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v11;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
      id v13 = &_os_log_default;
      uint64_t v12 = &_os_log_default;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: paramID: %d", buf, 8u);
    }

    if (ParamID == 2)
    {
      unsigned int ParamValueLen = iAP2MsgGetParamValueLen(FirstParam);
      uint64_t v14 = malloc_type_calloc(ParamValueLen, 1uLL, 0x100004077774924uLL);
      int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &inited, v14, ParamValueLen);
      if (inited || DataAsArrayU8 != ParamValueLen) {
        goto LABEL_155;
      }
      CFDataRef v16 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)v14, ParamValueLen);
      uint64_t v17 = _dumpSimpleHex(v16);

      uint64_t v18 = gLogObjects;
      int v19 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v20 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v18;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = v19;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
        id v22 = &_os_log_default;
        uint64_t v20 = &_os_log_default;
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = ParamValueLen;
        *(_WORD *)&buf[8] = 2112;
        *(void *)&buf[10] = v17;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: A_c1[%d]: %@", buf, 0x12u);
      }

      v8 |= 4u;
    }
    else
    {
      if (ParamID == 1)
      {
        int v21 = iAP2MsgGetDataAsArrayU8(FirstParam, &inited, __dst, 80);
        if (inited || v21 != 80) {
          goto LABEL_155;
        }
        v8 |= 2u;
      }
      else if (!ParamID)
      {
        iAP2MsgGetDataAsU16(FirstParam, &inited);
        if (inited) {
          goto LABEL_155;
        }
        v8 |= 1u;
      }
      uint64_t v17 = v7;
    }
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0, FirstParam, &v91);
    id v7 = v17;
    if (v91) {
      goto LABEL_156;
    }
  }
  if (v8 == 7)
  {
    uint64_t v23 = *(void *)(a1 + 712);
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v24 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v24 = &_os_log_default;
      id v25 = &_os_log_default;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: ccsigma_open", buf, 2u);
    }

    if (inited)
    {
      uint64_t v83 = logObjectForModule_9();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_NVMAuthFinish_cold_17();
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v26 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v26 = &_os_log_default;
        id v27 = &_os_log_default;
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: ccsigma_import_peer_verification_key", buf, 2u);
      }

      unsigned int inited = ccsigma_import_peer_verification_key(*(void *)v23, 65, (unsigned __int8 *)v93);
      if (!inited)
      {
        uint64_t v28 = *(uint64_t **)(a1 + 712);
        printSessionKeys(*v28, 1);
        CFDataRef v29 = CFDataCreate(kCFAllocatorDefault, bytes, 64);
        uint64_t v17 = _dumpSimpleHex(v29);

        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v30 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v30 = &_os_log_default;
          id v31 = &_os_log_default;
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v17;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: A_sig: %@", buf, 0xCu);
        }

        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v32 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v32 = &_os_log_default;
          id v33 = &_os_log_default;
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: ccsigma_verify", buf, 2u);
        }

        unsigned int inited = ccsigma_verify((_DWORD *)*v28, (uint64_t)bytes, 64, (uint64_t)v93 + 1);
        if (inited)
        {
          long long v52 = logObjectForModule_9();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_NVMAuthFinish_cold_19();
          }
          goto LABEL_179;
        }
        malloc_type_calloc((unsigned __int16)ParamValueLen - 22, 1uLL, 0x17D14C6DuLL);
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v34 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v34 = &_os_log_default;
          id v35 = &_os_log_default;
        }
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: ccsigma_open A_c1", buf, 2u);
        }

        if (inited)
        {
          long long v52 = logObjectForModule_9();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_NVMAuthFinish_cold_17();
          }
          goto LABEL_179;
        }
        int v36 = *(_DWORD *)(a1 + 32);
        if (v36 == 8)
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v38 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v38 = &_os_log_default;
            id v41 = &_os_log_default;
          }
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: Action_WriteUserName", buf, 2u);
          }

          *(void *)buf = 0;
          unsigned int inited = mfi4Auth_protocol_initMessage_RequestUserNVMWrite(a1, *(_WORD *)(v23 + 136), (uint64_t *)buf, *(unsigned __int16 **)(a1 + 40), *(uint64_t **)(a1 + 48), *(_DWORD **)(a1 + 56), *(unsigned __int8 *)(a1 + 36), 0, 0);
          if (!inited)
          {
            if (gLogObjects && gNumLogObjects >= 56)
            {
              uint64_t v42 = *(id *)(gLogObjects + 440);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              uint64_t v42 = &_os_log_default;
              id v47 = &_os_log_default;
            }
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v90 = 0;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: encryptPayload", v90, 2u);
            }

            if (!inited)
            {
              size_t MsgLen = iAP2MsgGetMsgLen(*(uint64_t *)buf);
              char v49 = malloc_type_calloc(MsgLen, 1uLL, 0x3FD39B54uLL);
              memcpy(v49, *(const void **)(*(void *)buf + 24), MsgLen);
              if (gLogObjects && gNumLogObjects >= 56)
              {
                uint64_t v50 = *(id *)(gLogObjects + 440);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                uint64_t v50 = &_os_log_default;
                id v53 = &_os_log_default;
              }
              if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)uint64_t v90 = 0;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: initMessage_RequestNVMOperation", v90, 2u);
              }

              unsigned int inited = mfi4Auth_protocol_initMessage_RequestNVMOperation(a1, a3, (uint64_t)v49, MsgLen);
              if (inited)
              {
                long long v52 = logObjectForModule_9();
                if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
LABEL_178:
                }
                  mfi4Auth_protocol_handle_NVMAuthFinish_cold_5();
LABEL_179:

                goto LABEL_156;
              }
LABEL_140:
              unsigned int inited = 0;
              goto LABEL_156;
            }
            long long v52 = logObjectForModule_9();
            if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
              goto LABEL_179;
            }
LABEL_174:
            mfi4Auth_protocol_handle_NVMAuthFinish_cold_7();
            goto LABEL_179;
          }
          long long v52 = logObjectForModule_9();
          if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
            goto LABEL_179;
          }
        }
        else
        {
          if (v36 != 5) {
            goto LABEL_140;
          }
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v37 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v37 = &_os_log_default;
            id v39 = &_os_log_default;
          }
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: Action_EraseUserKey", buf, 2u);
          }

          *(void *)buf = 0;
          unsigned int inited = mfi4Auth_protocol_initMessage_RequestNVMPublicKeyChallenge(a1, *(_WORD *)(v23 + 136), (uint64_t *)buf, 0x5300u);
          if (!inited)
          {
            if (gLogObjects && gNumLogObjects >= 56)
            {
              uint64_t v40 = *(id *)(gLogObjects + 440);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              uint64_t v40 = &_os_log_default;
              id v43 = &_os_log_default;
            }
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v90 = 0;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: encryptPayload", v90, 2u);
            }

            if (!inited)
            {
              size_t v44 = iAP2MsgGetMsgLen(*(uint64_t *)buf);
              uint64_t v45 = malloc_type_calloc(v44, 1uLL, 0x2F070A53uLL);
              memcpy(v45, *(const void **)(*(void *)buf + 24), v44);
              if (gLogObjects && gNumLogObjects >= 56)
              {
                uint64_t v46 = *(id *)(gLogObjects + 440);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                uint64_t v46 = &_os_log_default;
                id v51 = &_os_log_default;
              }
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)uint64_t v90 = 0;
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: initMessage_RequestNVMOperation", v90, 2u);
              }

              unsigned int inited = mfi4Auth_protocol_initMessage_RequestNVMOperation(a1, a3, (uint64_t)v45, v44);
              if (inited)
              {
                long long v52 = logObjectForModule_9();
                if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_178;
                }
                goto LABEL_179;
              }
              goto LABEL_140;
            }
            long long v52 = logObjectForModule_9();
            if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
              goto LABEL_179;
            }
            goto LABEL_174;
          }
          long long v52 = logObjectForModule_9();
          if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
            goto LABEL_179;
          }
        }
        mfi4Auth_protocol_handle_NVMAuthFinish_cold_9();
        goto LABEL_179;
      }
      uint64_t v83 = logObjectForModule_9();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_NVMAuthFinish_cold_22();
      }
    }
  }
LABEL_155:
  uint64_t v17 = v7;
LABEL_156:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v84 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v84 = &_os_log_default;
    id v85 = &_os_log_default;
  }
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: completed", buf, 2u);
  }

  uint64_t v86 = inited;
  return v86;
}

void printSessionKeys(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  id v3 = 0;
  id v4 = (char *)&unk_100216DD8;
  if (a2)
  {
    id v4 = (char *)&unk_100216D38;
    uint64_t v5 = 10;
  }
  else
  {
    uint64_t v5 = 14;
  }
  int v6 = (uint64_t *)(v4 + 8);
  do
  {
    uint64_t v7 = gLogObjects;
    int v8 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v9 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v24 = v7;
        __int16 v25 = 1024;
        int v26 = v8;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
      id v10 = &_os_log_default;
      uint64_t v9 = &_os_log_default;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *v6;
      *(_DWORD *)buf = 136315138;
      uint64_t v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "mfi4 %s = ", buf, 0xCu);
    }

    uint64_t v12 = *(v6 - 1);
    id v13 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:a1 + v2 + 544 length:v12]);

    uint64_t v14 = gLogObjects;
    int v15 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      CFDataRef v16 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v24 = v14;
        __int16 v25 = 1024;
        int v26 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
      id v17 = &_os_log_default;
      CFDataRef v16 = &_os_log_default;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v24 = (uint64_t)v13;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "mfi4 %@", buf, 0xCu);
    }

    uint64_t v18 = gLogObjects;
    int v19 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v20 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v24 = v18;
        __int16 v25 = 1024;
        int v26 = v19;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
      id v21 = &_os_log_default;
      uint64_t v20 = &_os_log_default;
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "\n", buf, 2u);
    }
    v2 += v12;

    v6 += 2;
    id v3 = v13;
    --v5;
  }
  while (v5);
}

uint64_t mfi4Auth_protocol_initMessage_RequestNVMPublicKeyChallenge(uint64_t a1, __int16 a2, uint64_t *a3, unsigned int a4)
{
  if (!a1)
  {
    id v10 = logObjectForModule_9();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMPublicKeyChallenge_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    id v10 = logObjectForModule_9();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMPublicKeyChallenge_cold_2(v10, v18, v19, v20, v21, v22, v23, v24);
    }
LABEL_10:

    return 1;
  }
  if (!a3) {
    return 1;
  }
  int v8 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a3 = (uint64_t)v8;
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v8, a2, 20793, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  iAP2MsgAddU16Param(*a3, 0, 0, a4);
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20793;
  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestNVMOperation(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  if (!a1)
  {
    uint64_t v11 = logObjectForModule_9();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMOperation_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v11 = logObjectForModule_9();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMOperation_cold_3(v11, v19, v20, v21, v22, v23, v24, v25);
    }
    goto LABEL_13;
  }
  if (!a3)
  {
    uint64_t v11 = logObjectForModule_9();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMOperation_cold_2(v11, v26, v27, v28, v29, v30, v31, v32);
    }
LABEL_13:

    return 1;
  }
  if (!a2) {
    return 1;
  }
  __int16 v8 = *(_WORD *)(a1 + 200);
  uint64_t v9 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = (uint64_t)v9;
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v9, v8, 20809, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  iAP2MsgAddArrayU8Param(*a2, 0, 0, a3, a4);
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20809;
  return result;
}

uint64_t mfi4Auth_protocol_handle_NVMOperationResponse(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int inited = 1;
  if (!a1)
  {
    uint64_t v27 = logObjectForModule_9();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMOperationResponse_cold_1(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    goto LABEL_58;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v27 = logObjectForModule_9();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMOperationResponse_cold_9(v27, v35, v36, v37, v38, v39, v40, v41);
    }
    goto LABEL_58;
  }
  if (!a2)
  {
    uint64_t v27 = logObjectForModule_9();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMOperationResponse_cold_2(v27, v42, v43, v44, v45, v46, v47, v48);
    }
    goto LABEL_58;
  }
  if (!a4)
  {
    uint64_t v27 = logObjectForModule_9();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMOperationResponse_cold_3(v27, v49, v50, v51, v52, v53, v54, v55);
    }
    goto LABEL_58;
  }
  char v60 = 0;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
  int v6 = 0;
  uint64_t v7 = 0;
  LOWORD(ParamValueLen) = -21846;
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v10 = gLogObjects;
    int v11 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v12 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v11;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
      id v13 = &_os_log_default;
      uint64_t v12 = &_os_log_default;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "handle_NVMOperationResponse: paramID: %d", buf, 8u);
    }

    if (ParamID
      || (unsigned int ParamValueLen = iAP2MsgGetParamValueLen(FirstParam),
          int v6 = 1,
          uint64_t v7 = malloc_type_calloc(ParamValueLen, 1uLL, 0x100004077774924uLL),
          int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &inited, v7, ParamValueLen),
          !inited)
      && DataAsArrayU8 == ParamValueLen)
    {
      unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0, FirstParam, &v60);
      if (!v60) {
        continue;
      }
    }
    return inited;
  }
  if (v6 == 1)
  {
    CFDataRef v15 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)v7, (unsigned __int16)ParamValueLen);
    unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v65 = v16;
    long long v66 = v16;
    *(_OWORD *)buf = v16;
    *(_OWORD *)&uint8_t buf[16] = v16;
    uint64_t v59 = 0;
    uint64_t v17 = *(void *)(a1 + 712);
    uint64_t v18 = *(unsigned __int16 *)(v17 + 136);
    uint64_t v19 = mfi4Auth_protocol_parse(a1, (uint64_t)buf, v15, *(_WORD *)(v17 + 136));
    if (v19)
    {
      uint64_t v20 = v19;
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v21 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v21 = &_os_log_default;
        id v22 = &_os_log_default;
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v62 = 67109120;
        int v63 = v18;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "handle_NVMOperationResponse: Found no message starting with: %x", v62, 8u);
      }

      uint64_t v23 = mfi4Auth_protocol_parse(a1, (uint64_t)buf, v15, 0);
      if (!v23)
      {
        unsigned int inited = -1;
        uint64_t v27 = logObjectForModule_9();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v62 = 67109120;
          int v63 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "handle_NVMOperationResponse: Found no message starting with: %x", v62, 8u);
        }
        goto LABEL_58;
      }
      uint64_t v20 = v23;
      uint64_t v18 = 0;
    }
    if (inited)
    {
      uint64_t v27 = logObjectForModule_9();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_NVMOperationResponse_cold_7();
      }
    }
    else if (mfi4Auth_protocol_processIncomingMessageExtra(a1, v18, v20, &v59, a4))
    {
      if (!v59) {
        return 0;
      }
      if (inited)
      {
        uint64_t v27 = logObjectForModule_9();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_handle_NVMOperationResponse_cold_5();
        }
      }
      else
      {
        size_t MsgLen = iAP2MsgGetMsgLen(v59);
        uint64_t v25 = malloc_type_calloc(MsgLen, 1uLL, 0x218BA1D4uLL);
        memcpy(v25, *(const void **)(v59 + 24), MsgLen);
        unsigned int inited = mfi4Auth_protocol_initMessage_RequestNVMOperation(a1, a3, (uint64_t)v25, MsgLen);
        if (!inited) {
          return 0;
        }
        uint64_t v27 = logObjectForModule_9();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_handle_NVMOperationResponse_cold_4();
        }
      }
    }
    else
    {
      uint64_t v27 = logObjectForModule_9();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_NVMOperationResponse_cold_6();
      }
    }
LABEL_58:
  }
  return inited;
}

uint64_t mfi4Auth_protocol_parse(uint64_t a1, uint64_t a2, CFDataRef theData, __int16 a4)
{
  if (!a1)
  {
    CFDataRef v15 = logObjectForModule_9();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_parse_cold_1(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    CFDataRef v15 = logObjectForModule_9();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_parse_cold_4(v15, v23, v24, v25, v26, v27, v28, v29);
    }
    goto LABEL_19;
  }
  if (!a2)
  {
    CFDataRef v15 = logObjectForModule_9();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_parse_cold_2(v15, v30, v31, v32, v33, v34, v35, v36);
    }
    goto LABEL_19;
  }
  if (!theData)
  {
    CFDataRef v15 = logObjectForModule_9();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_parse_cold_3(v15, v37, v38, v39, v40, v41, v42, v43);
    }
LABEL_19:

    return 0;
  }
  unsigned int Length = CFDataGetLength(theData);
  BytePtr = (char *)CFDataGetBytePtr(theData);
  iAP2MsgInitWithSom(a2, a4, 0, 0, 0, 0, 0);
  uint64_t v10 = iAP2MsgParserInit(0xFFFF, *(void *)(a1 + 8), 0, a4);
  uint64_t v11 = Length;
  if (!Length) {
    return 0;
  }
  uint64_t v12 = (unsigned __int16 *)v10;
  while (1)
  {
    char v13 = *BytePtr++;
    uint64_t result = iAP2MsgParserConsumeByte(v12, v13, a2);
    if (result) {
      break;
    }
    if (!--v11) {
      return 0;
    }
  }
  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestVendorNVMRead(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, int a4)
{
  if (!a1)
  {
    uint64_t v14 = logObjectForModule_9();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestVendorNVMRead_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v14 = logObjectForModule_9();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestVendorNVMRead_cold_3(v14, v22, v23, v24, v25, v26, v27, v28);
    }
    goto LABEL_16;
  }
  uint64_t v5 = a3;
  if (!a3)
  {
    uint64_t v14 = logObjectForModule_9();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestVendorNVMRead_cold_2(v14, v29, v30, v31, v32, v33, v34, v35);
    }
LABEL_16:

    return 1;
  }
  if (!a2) {
    return 1;
  }
  LODWORD(v7) = a4;
  __int16 v8 = *(_WORD *)(a1 + 200);
  uint64_t v9 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = (uint64_t)v9;
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v9, v8, 20785, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  __int16 v10 = _convertUserVendorNVMRead(a1, 2);
  if (v7)
  {
    __int16 v11 = v10;
    uint64_t v7 = v7;
    do
    {
      unsigned int v12 = *v5++;
      iAP2MsgAddU16Param(*a2, 0, v11, v12);
      --v7;
    }
    while (v7);
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20785;
  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestManufacturerNVMRead(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, int a4)
{
  if (!a1)
  {
    uint64_t v14 = logObjectForModule_9();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestManufacturerNVMRead_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v14 = logObjectForModule_9();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestManufacturerNVMRead_cold_3(v14, v22, v23, v24, v25, v26, v27, v28);
    }
    goto LABEL_16;
  }
  uint64_t v5 = a3;
  if (!a3)
  {
    uint64_t v14 = logObjectForModule_9();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestManufacturerNVMRead_cold_2(v14, v29, v30, v31, v32, v33, v34, v35);
    }
LABEL_16:

    return 1;
  }
  if (!a2) {
    return 1;
  }
  LODWORD(v7) = a4;
  __int16 v8 = *(_WORD *)(a1 + 200);
  uint64_t v9 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = (uint64_t)v9;
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v9, v8, 20802, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  __int16 v10 = _convertUserVendorNVMRead(a1, 2);
  if (v7)
  {
    __int16 v11 = v10;
    uint64_t v7 = v7;
    do
    {
      unsigned int v12 = *v5++;
      iAP2MsgAddU16Param(*a2, 0, v11, v12);
      --v7;
    }
    while (v7);
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20802;
  return result;
}

uint64_t _convertUserNVMWrite(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a1)
  {
    uint64_t v5 = logObjectForModule_9();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      _convertUserNVMWrite_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v5 = logObjectForModule_9();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      _convertUserNVMWrite_cold_2(v5, v13, v14, v15, v16, v17, v18, v19);
    }
LABEL_14:

    return v2;
  }
  if (*(unsigned char *)(a1 + 144) == 3 && a2 == 2) {
    return 0;
  }
  else {
    return a2;
  }
}

uint64_t mfi4Auth_protocol_requestNvmErasePublicKey(uint64_t a1, CFDataRef theData, const __CFData *a3, unsigned int a4, uint64_t *a5)
{
  if (!a1)
  {
    uint64_t v11 = logObjectForModule_9();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_requestNvmErasePublicKey_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v11 = logObjectForModule_9();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_requestNvmErasePublicKey_cold_2(v11, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_14:

    return 1;
  }
  *(void *)buffer = 0;
  uint64_t v28 = 0;
  memset(v26, 0, sizeof(v26));
  if (!a5) {
    return 1;
  }
  uint64_t result = 1;
  if (theData && a3)
  {
    if (CFDataGetLength(theData) == 16 && CFDataGetLength(a3) == 64)
    {
      v29.location = 0;
      v29.length = 16;
      CFDataGetBytes(theData, v29, buffer);
      v30.location = 0;
      v30.length = 64;
      CFDataGetBytes(a3, v30, (UInt8 *)v26);
      return mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey(a1, *(_WORD *)(a1 + 200), a5, a4, 0x5300u, (uint64_t)buffer, (uint64_t)v26);
    }
    return 1;
  }
  return result;
}

uint64_t mfi4Auth_protocol_nvm_copyUserPublicKeyForSerialNumber(uint64_t a1)
{
  SecKeyRef v1 = +[NSString stringWithFormat:@"com.apple.accessoryd.mfi4.userPublicKey.%@", a1];
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v2 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v8 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "copyUserPublicKeyForSerialNumber: featureTag: %@", buf, 0xCu);
  }

  MFi4AuthFeatureGroup();
  uint64_t v4 = CopySynchronizableKeyForAuthFeature();
  if (!v4)
  {
    uint64_t v6 = logObjectForModule_9();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_nvm_copyUserPublicKeyForSerialNumber_cold_1();
    }
  }
  return v4;
}

_OWORD *_getCachedUserPublicKey(uint64_t a1)
{
  __int16 valuePtr = 21248;
  CFNumberRef v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  if (!a1)
  {
    uint64_t v10 = logObjectForModule_9();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _getCachedUserPublicKey_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v10 = logObjectForModule_9();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _getCachedUserPublicKey_cold_2(v10, v18, v19, v20, v21, v22, v23, v24);
    }
LABEL_9:

    return 0;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 712) + 48), v2);
  uint64_t v4 = malloc_type_calloc(1uLL, 0x40uLL, 0x338BEC8BuLL);
  BytePtr = CFDataGetBytePtr(Value);
  long long v6 = *((_OWORD *)BytePtr + 3);
  long long v8 = *(_OWORD *)BytePtr;
  long long v7 = *((_OWORD *)BytePtr + 1);
  _DWORD v4[2] = *((_OWORD *)BytePtr + 2);
  v4[3] = v6;
  *uint64_t v4 = v8;
  v4[1] = v7;
  return v4;
}

uint64_t mfi4Auth_protocol_convertUserAccessoryInfoToAction(uint64_t a1, CFStringRef theString)
{
  uint64_t v39 = 0;
  CFIndex Length = CFStringGetLength(theString);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CFIndex usedBufLen = 0;
  long long v6 = (UInt8 *)malloc_type_calloc(MaximumSizeForEncoding + 1, 1uLL, 0x5BE10911uLL);
  v42.location = 0;
  v42.length = Length;
  CFStringGetBytes(theString, v42, 0x8000100u, 0, 0, v6, MaximumSizeForEncoding, &usedBufLen);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    long long v7 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    long long v7 = &_os_log_default;
    id v8 = &_os_log_default;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v41 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "convert: accessoryUserName: %s", buf, 0xCu);
  }

  if (!a1)
  {
    uint64_t v23 = logObjectForModule_9();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_convertUserAccessoryInfoToAction_cold_1(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    goto LABEL_35;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v23 = logObjectForModule_9();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_convertUserAccessoryInfoToAction_cold_3(v23, v31, v32, v33, v34, v35, v36, v37);
    }
LABEL_35:

    uint64_t v10 = 0;
    goto LABEL_36;
  }
  _generateUserAccessoryInfoPayload(a1, (uint64_t)v6, usedBufLen + 1, (uint64_t *)&v39);
  uint64_t v9 = +[NSData dataWithBytes:*(void *)(a1 + 16) length:iAP2MsgGetMsgLen((uint64_t)v39)];
  uint64_t v10 = _dumpSimpleHex((const __CFData *)v9);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v11 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v11 = &_os_log_default;
    id v12 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v41 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "payload: %@", buf, 0xCu);
  }

  unsigned int MsgLen = iAP2MsgGetMsgLen((uint64_t)v39);
  if (MsgLen)
  {
    unsigned int v14 = MsgLen;
    uint64_t v15 = (MsgLen - 1) / 0xF0 + 1;
    *(_DWORD *)(a1 + 36) = v15;
    *(void *)(a1 + 40) = malloc_type_malloc(2 * v15, 0x1000040BDFB0063uLL);
    *(void *)(a1 + 48) = malloc_type_malloc(8 * v15, 0x10040436913F5uLL);
    uint64_t v16 = malloc_type_malloc(4 * v15, 0x100004052888210uLL);
    uint64_t v17 = 0;
    *(void *)(a1 + 56) = v16;
    uint64_t v18 = *(void *)(a1 + 40);
    do
    {
      *(_WORD *)(v18 + 2 * v17) = v17 + 21250;
      ++v17;
    }
    while (v15 != v17);
    uint64_t v19 = 0;
    if (v14 >= 0xF0) {
      size_t v20 = 240;
    }
    else {
      size_t v20 = v14;
    }
    do
    {
      **(_DWORD **)(a1 + 56) = v20;
      **(void **)(a1 + 48) = malloc_type_calloc(1uLL, v20, 0xC710A039uLL);
      memcpy(**(void ***)(a1 + 48), (const void *)(*(void *)(a1 + 16) + v19), v20);
      v19 += v20;
    }
    while (v14 != v19);
    uint64_t v21 = 0;
    if (v6) {
      goto LABEL_27;
    }
    goto LABEL_28;
  }
LABEL_36:
  uint64_t v21 = 0xFFFFFFFFLL;
  if (v6) {
LABEL_27:
  }
    free(v6);
LABEL_28:
  if (v39)
  {
    free(v39);
    uint64_t v39 = 0;
  }

  return v21;
}

void _generateUserAccessoryInfoPayload(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  if (!a1)
  {
    uint64_t v10 = logObjectForModule_9();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _generateUserAccessoryInfoPayload_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v10 = logObjectForModule_9();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _generateUserAccessoryInfoPayload_cold_3(v10, v18, v19, v20, v21, v22, v23, v24);
    }
    goto LABEL_14;
  }
  if (!a4)
  {
    uint64_t v10 = logObjectForModule_9();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _generateUserAccessoryInfoPayload_cold_2(v10, v25, v26, v27, v28, v29, v30, v31);
    }
LABEL_14:

    return;
  }
  id v8 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a4 = (uint64_t)v8;
  if (v8)
  {
    iAP2MsgInitWithSom((uint64_t)v8, 0, 0, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
    uint64_t v9 = *a4;
    iAP2MsgAddArrayU8Param(v9, 0, 0, a2, a3);
  }
}

void acc_platform_audioProductCerts_accessoryAttach(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v4 = *(id *)(gLogObjects + 456);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    uint64_t v8 = a1;
    __int16 v9 = 2112;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "processAudioProductCerts accessoryAttach %@-%@", (uint8_t *)&v7, 0x16u);
  }

  long long v6 = +[ACCFeatureAudioProduct sharedManager];
  [v6 accessoryAttached:a2 connection:a1];
}

void acc_platform_audioProductCerts_accessoryDetach(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v4 = *(id *)(gLogObjects + 456);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    uint64_t v8 = a1;
    __int16 v9 = 2112;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "processAudioProductCerts accessoryDetach %@-%@", (uint8_t *)&v7, 0x16u);
  }

  long long v6 = +[ACCFeatureAudioProduct sharedManager];
  [v6 accessoryDetached:a2 connection:a1];
}

void acc_platform_audioProductCerts_processAudioProductCerts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v10 = *(id *)(gLogObjects + 456);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v10 = &_os_log_default;
    id v11 = &_os_log_default;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138413314;
    uint64_t v14 = a1;
    __int16 v15 = 2112;
    uint64_t v16 = a2;
    __int16 v17 = 2112;
    uint64_t v18 = a3;
    __int16 v19 = 2112;
    uint64_t v20 = a4;
    __int16 v21 = 1024;
    int v22 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "processAudioProductCerts: connection %@, endpoint %@, model %@, certs %@, firstConnectionAfterPair %d", (uint8_t *)&v13, 0x30u);
  }

  uint64_t v12 = +[ACCFeatureAudioProduct sharedManager];
  [v12 processAudioProductCerts:a4 forModel:a3 firstConnectionAfterPair:a5 connection:a1 endpoint:a2];
}

unsigned char *_createFeature_4(unsigned char *result)
{
  if (result)
  {
    uint64_t result = malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
    if (result) {
      *uint64_t result = 0;
    }
  }
  return result;
}

uint64_t _destroyFeature_4(unsigned char **a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = *a1;
      if (v3)
      {
        if (!*v3 || (platform_digitalAudio_accessoryDetached(*(void *)(a2 + 8)), (id v3 = *a1) != 0))
        {
          free(v3);
          *a1 = 0;
        }
      }
    }
  }
  return 0;
}

uint64_t _startFeatureFromDevice_1(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = iap2_feature_getFeature(result, 9u);
    if (result)
    {
      uint64_t v2 = *(void *)(v1 + 8);
      CFDictionaryRef EndpointSampleRates = _getEndpointSampleRates(v1);
      platform_digitalAudio_accessoryAttached(v2, (uint64_t)EndpointSampleRates);
      return 1;
    }
  }
  return result;
}

uint64_t _checkIdentificationInfo_3(uint64_t a1)
{
  char v10 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo__kMsgDigitalAudioList, 3u, &v10);
  uint64_t v3 = v2;
  if (v10) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(*(void *)a1 + 24);
    BOOL v6 = v5 > 8;
    int v7 = (1 << v5) & 0x141;
    if (v6 || v7 == 0)
    {
      uint64_t v3 = 13;
    }
    else
    {
      if (_checkRequiredSampleRates(a1))
      {
        iap2_features_createFeature(a1, 9u);
        iap2_identification_setIdentifiedForFeature(a1, 9u);
        return 0;
      }
      uint64_t v3 = 2;
    }
    iap2_identification_rejectAllMsgIDsForList(a1, (uint64_t)&_checkIdentificationInfo__kMsgDigitalAudioList, 3u, v3);
  }
  return v3;
}

uint64_t iap2_digitalAudio_start(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t Feature = (unsigned char *)iap2_feature_getFeature(a1, 9u);
    if (Feature)
    {
      *uint64_t Feature = 1;
      uint64_t v2 = platform_digitalAudio_start();
      if (gLogObjects && gNumLogObjects >= 38)
      {
        unsigned int v5 = *(NSObject **)(gLogObjects + 296);
      }
      else
      {
        unsigned int v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 8);
        int v8 = 138412290;
        uint64_t v9 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Digital Audio started for EndpointUUID: %@", (uint8_t *)&v8, 0xCu);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t iap2_digitalAudio_stop(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t Feature = (unsigned char *)iap2_feature_getFeature(a1, 9u);
    if (Feature)
    {
      *uint64_t Feature = 0;
      uint64_t v2 = platform_digitalAudio_stop();
      if (gLogObjects && gNumLogObjects >= 38)
      {
        unsigned int v5 = *(NSObject **)(gLogObjects + 296);
      }
      else
      {
        unsigned int v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 8);
        int v8 = 138412290;
        uint64_t v9 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Digital Audio stopped for EndpointUUID: %@", (uint8_t *)&v8, 0xCu);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t iap2_digitalAudio_sendInformationUpdate(uint64_t *a1, const __CFDictionary *a2)
{
  if (gLogObjects && gNumLogObjects >= 38)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 296);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v12 = 138412290;
    v13[0] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "attributes: %@", (uint8_t *)&v12, 0xCu);
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"SampleRate");
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(a2, @"VolumeLevel");
    CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(a2, @"SoundCheck");
    iAP2MsgInit((uint64_t)(a1 + 15), 55809, a1[24], 0xFFFF, 0, 0);
    if (Value)
    {
      LOBYTE(v12) = 0;
      CFNumberGetValue(Value, kCFNumberCharType, &v12);
      LODWORD(Value) = iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0, 0, v12) != 0;
    }
    if (v7)
    {
      unsigned int v12 = 0;
      CFNumberGetValue(v7, kCFNumberIntType, &v12);
      iAP2MsgAddU32Param((uint64_t)(a1 + 15), 0, 1, v12);
    }
    if (v8)
    {
      unsigned int v12 = 0;
      CFNumberGetValue(v8, kCFNumberIntType, &v12);
      iAP2MsgAddU32Param((uint64_t)(a1 + 15), 0, 2, v12);
    }
    if (Value)
    {
      if (gLogObjects && gNumLogObjects >= 38)
      {
        uint64_t v9 = *(NSObject **)(gLogObjects + 296);
      }
      else
      {
        uint64_t v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int MsgID = iAP2MsgGetMsgID((uint64_t)(a1 + 15));
        uint64_t v11 = a1[1];
        unsigned int v12 = 67109378;
        LODWORD(v13[0]) = MsgID;
        WORD2(v13[0]) = 2112;
        *(void *)((char *)v13 + 6) = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Digital Audio sending msg: %xh for endpoint: %@", (uint8_t *)&v12, 0x12u);
      }
      return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFDictionaryRef _getEndpointSampleRates(uint64_t a1)
{
  CFDictionaryRef v1 = (const __CFDictionary *)iap2_identification_transportComponents(a1);
  CFDictionaryRef v2 = v1;
  if (v1)
  {
    CFIndex Count = CFDictionaryGetCount(v1);
    if (Count)
    {
      uint64_t v4 = Count;
      __chkstk_darwin();
      uint64_t v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
      memset(v6, 170, v5);
      CFDictionaryGetKeysAndValues(v2, 0, (const void **)v6);
      if (v4 < 1)
      {
        return 0;
      }
      else
      {
        CFDictionaryRef v2 = 0;
        uint64_t v14 = v16;
        *(void *)&long long v7 = 134218240;
        long long v13 = v7;
        do
        {
          uint64_t v8 = *v6;
          if (*v6)
          {
            if (*(_DWORD *)(v8 + 20) == 1) {
              CFDictionaryRef v2 = (const __CFDictionary *)*(unsigned int *)(v8 + 48);
            }
          }
          else
          {
            uint64_t v9 = gLogObjects;
            int v10 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 38)
            {
              uint64_t v11 = *(NSObject **)(gLogObjects + 296);
            }
            else
            {
              uint64_t v11 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v13;
                uint64_t v18 = v9;
                __int16 v19 = 1024;
                int v20 = v10;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                uint64_t v11 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
              _getEndpointSampleRates_cold_1(&v15, v14, v11);
            }
          }
          ++v6;
          --v4;
        }
        while (v4);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

CFDictionaryRef _checkRequiredSampleRates(uint64_t a1)
{
  CFDictionaryRef result = (const __CFDictionary *)iap2_identification_transportComponents(a1);
  if (result)
  {
    CFDictionaryRef v3 = result;
    CFIndex Count = CFDictionaryGetCount(result);
    if (Count)
    {
      uint64_t v5 = Count;
      __chkstk_darwin();
      long long v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
      memset(v7, 170, v6);
      CFDictionaryGetKeysAndValues(v3, 0, (const void **)v7);
      if (v5 < 1)
      {
        int v15 = 0;
      }
      else
      {
        __int16 v17 = v20;
        uint64_t v18 = &v16;
        *(void *)&long long v8 = 134218240;
        long long v16 = v8;
        do
        {
          uint64_t v9 = *v7;
          if (*v7)
          {
            if (*(_DWORD *)(v9 + 20) == 1)
            {
              int v10 = *(_DWORD *)(*(void *)a1 + 24);
              BOOL v11 = !v10 || v10 == 8;
              if ((v11 || v10 == 6 && !*(unsigned char *)(v9 + 16)) && (~*(_DWORD *)(v9 + 48) & 0x1C0) == 0)
              {
                int v15 = 1;
                return v15;
              }
            }
          }
          else
          {
            uint64_t v12 = gLogObjects;
            int v13 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 38)
            {
              uint64_t v14 = *(NSObject **)(gLogObjects + 296);
            }
            else
            {
              uint64_t v14 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v16;
                uint64_t v22 = v12;
                __int16 v23 = 1024;
                int v24 = v13;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                uint64_t v14 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
              _getEndpointSampleRates_cold_1(&v19, v17, v14);
            }
          }
          ++v7;
          --v5;
        }
        while (v5);
        int v15 = 0;
      }
    }
    else
    {
      int v15 = 0;
    }
    return v15;
  }
  return result;
}

uint64_t obfuscatedPointer(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = obfuscatedPointer_salt;
    if (!obfuscatedPointer_salt)
    {
      uint64_t v2 = random();
      obfuscatedPointer_salt = v2;
    }
    return v1 + v2;
  }
  return result;
}

BOOL getMemoryUse(void *a1, void *a2, void *a3)
{
  kern_return_t v7;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;

  uint64_t v33 = -1431655766;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v31 = v6;
  uint64_t v32 = v6;
  uint64_t v29 = v6;
  uint64_t v30 = v6;
  uint64_t v27 = v6;
  uint64_t v28 = v6;
  uint64_t v25 = v6;
  uint64_t v26 = v6;
  __int16 v23 = v6;
  int v24 = v6;
  __int16 v21 = v6;
  uint64_t v22 = v6;
  uint8_t v19 = v6;
  int v20 = v6;
  uint64_t v18 = v6;
  long long v16 = v6;
  __int16 v17 = v6;
  uint64_t v14 = v6;
  int v15 = v6;
  uint64_t v12 = v6;
  int v13 = v6;
  *(_OWORD *)task_info_out = v6;
  BOOL v11 = v6;
  task_info_outCnt = 93;
  long long v7 = task_info(mach_task_self_, 0x16u, task_info_out, &task_info_outCnt);
  if (!v7)
  {
    if (a1) {
      *a1 = v11;
    }
    if (a2) {
      *a2 = *(void *)task_info_out;
    }
    if (a3) {
      *a3 = v19;
    }
  }
  return v7 == 0;
}

void _replaceKeyInDictIfExist(void *a1, void *a2, void *a3)
{
  id v8 = a1;
  id v5 = a2;
  id v6 = a3;
  long long v7 = [v8 objectForKey:v5];
  if (v7)
  {
    [v8 setObject:v7 forKey:v6];
    [v8 removeObjectForKey:v5];
  }
}

id _convertAccInfoToBLEAccInfo(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (a1)
  {
    id v8 = +[NSMutableDictionary dictionaryWithDictionary:a1];
    _replaceKeyInDictIfExist(v8, kACCInfo_Name, @"IAPAppBTPairingAccName");
    _replaceKeyInDictIfExist(v8, kACCInfo_Manufacturer, @"IAPAppBTPairingAccManufacturer");
    _replaceKeyInDictIfExist(v8, kACCInfo_Model, @"IAPAppBTPairingAccModel");
    _replaceKeyInDictIfExist(v8, kACCInfo_SerialNumber, @"IAPAppBTPairingAccSerialNum");
    _replaceKeyInDictIfExist(v8, kACCInfo_HardwareVersion, @"IAPAppBTPairingAccHwVer");
    _replaceKeyInDictIfExist(v8, kACCInfo_FirmwareVersionActive, @"IAPAppBTPairingAccFwVer");
    _replaceKeyInDictIfExist(v8, kACCInfo_FirmwareVersionPending, @"IAPAppBTPairingAccFwPendingVer");
    _replaceKeyInDictIfExist(v8, kACCInfo_AccessoryDeviceUID, @"IAPAppBTPairingAccDeviceUID");
    _replaceKeyInDictIfExist(v8, @"Supports2Way", @"IAPAppBTPairingSupports2WayKey");
    _replaceKeyInDictIfExist(v8, kACCInfo_VendorID, @"IAPAppBTPairingAccVendorID");
    _replaceKeyInDictIfExist(v8, kACCInfo_ProductID, @"IAPAppBTPairingAccProductID");
    _replaceKeyInDictIfExist(v8, kACCInfo_AccessoryPlatformID, @"IAPAppBTPairingAccPlatformID");
    if (v7) {
      [v8 setObject:v7 forKey:@"IAPAppBTPairingTypesSupportedKey"];
    }
    if (v6) {
      [v8 setObject:v6 forKey:@"IAPAppBTPairingUUIDKey"];
    }
    id v9 = [v8 copy];
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_1000639A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,id a24)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a24);
  _Unwind_Resume(a1);
}

void sub_100063D30(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

uint64_t t56_util_init(uint64_t a1)
{
  if (!a1) {
    return 4294967294;
  }
  uint64_t v2 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  uint64_t result = 0;
  *(void *)(a1 + 16) = v2;
  return result;
}

uint64_t t56_util_cleanup(uint64_t a1)
{
  if (!a1) {
    return 4294967294;
  }
  uint64_t v1 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  free(v1);
  return 0;
}

void t56_util_notifyRxID(const void **a1, unsigned int a2)
{
  unsigned int valuePtr = a2;
  if (a1)
  {
    T56Endpoint = t56_util_ios_getT56Endpoint(a1);
    if (T56Endpoint)
    {
      CFDictionaryRef v3 = (uint64_t *)T56Endpoint;
      if (*T56Endpoint)
      {
        CFNullRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
        CFStringRef v5 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"RxID: %@ / 0x%X", v4, valuePtr);
        acc_platform_packetLogging_logParsedData(*v3, @"DATA-RxID", @"T56", (uint64_t)v5, 1);
        if (v5) {
          CFRelease(v5);
        }
        acc_endpoint_setProperty((pthread_mutex_t *)*v3, kCFACCProperties_Endpoint_Inductive_RxID, v4);
        uint64_t v6 = *(void *)*v3;
        if (v6)
        {
          if ((acc_connection_setProperty(v6, kCFACCProperties_Connection_Inductive_RxID, v4),
                (CFStringRef v7 = acc_endpoint_copyParentEndpointUUID(*v3)) != 0)
            && (CFStringRef v8 = v7,
                EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(v7),
                CFRelease(v8),
                EndpointWithUUID)
            && *(_DWORD *)&EndpointWithUUID->__opaque[16] == 13
            || (EndpointWithUUID = (pthread_mutex_t *)*v3, *(_DWORD *)(*v3 + 24) == 13))
          {
            acc_endpoint_setProperty(EndpointWithUUID, kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanFalse);
          }
        }
        if (v4) {
          CFRelease(v4);
        }
      }
    }
  }
}

const void **t56_util_ios_getT56Endpoint(const void **result)
{
  if (result)
  {
    uint64_t v1 = *result;
    if (v1)
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(v1);
      if (EndpointWithUUID) {
        return (const void **)EndpointWithUUID[7];
      }
      if (gLogObjects && gNumLogObjects >= 61)
      {
        CFDictionaryRef v3 = *(id *)(gLogObjects + 480);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        CFDictionaryRef v3 = &_os_log_default;
        id v5 = &_os_log_default;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        t56_util_ios_getT56Endpoint_cold_3();
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 61)
      {
        CFDictionaryRef v3 = *(id *)(gLogObjects + 480);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        CFDictionaryRef v3 = &_os_log_default;
        id v4 = &_os_log_default;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        t56_util_ios_getT56Endpoint_cold_1();
      }
    }

    return 0;
  }
  return result;
}

const void **t56_util_sendData(const void **result, const UInt8 *a2, unsigned int a3)
{
  if (result)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = t56_util_ios_getT56Endpoint(result);
        if (result)
        {
          return (const void **)t56_endpoint_sendOutgoingData((uint64_t *)result, a2, a3);
        }
      }
    }
  }
  return result;
}

uint64_t t56_util_callbackOnTimer(const void **a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 1000000 * a2;
  uint64_t v6 = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    T56Endpoint = t56_util_ios_getT56Endpoint(a1);
    if (T56Endpoint)
    {
      int v10 = T56Endpoint;
      uint64_t v30 = a4;
      int64_t v31 = v5;
      uint64_t v6 = 0;
      BOOL v11 = T56Endpoint + 26;
      uint64_t v12 = (uint64_t *)(T56Endpoint + 18);
      while (1)
      {
        uint64_t v13 = gLogObjects;
        int v14 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 61)
        {
          int v15 = *(id *)(gLogObjects + 480);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v33 = (const char *)v13;
            __int16 v34 = 1024;
            int v35 = v14;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
          id v16 = &_os_log_default;
          int v15 = &_os_log_default;
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = *v12;
          int v18 = *((unsigned __int8 *)v11 + v6);
          *(_DWORD *)buf = 136316162;
          uint64_t v33 = "t56_util_callbackOnTimer";
          __int16 v34 = 1024;
          int v35 = 222;
          __int16 v36 = 1024;
          int v37 = v6;
          __int16 v38 = 2048;
          *(void *)uint64_t v39 = v17;
          *(_WORD *)&v39[8] = 1024;
          *(_DWORD *)&unsigned char v39[10] = v18;
          _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s:%d [%d] timer %p, running %d", buf, 0x28u);
        }

        if (!*v12)
        {
          if (gLogObjects && gNumLogObjects >= 61)
          {
            uint8_t v19 = *(id *)(gLogObjects + 480);
            uint64_t v5 = v31;
          }
          else
          {
            uint64_t v5 = v31;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint8_t v19 = &_os_log_default;
            id v24 = &_os_log_default;
          }
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
            t56_util_callbackOnTimer_cold_2();
          }
          goto LABEL_45;
        }
        if (!*((unsigned char *)v11 + v6)) {
          break;
        }
        ++v6;
        ++v12;
        if (v6 == 4)
        {
          uint64_t v6 = 0xFFFFFFFFLL;
          goto LABEL_22;
        }
      }
      v12[4] = a3;
      v12[9] = v30;
      *((unsigned char *)v10 + v6 + 208) = 1;
LABEL_22:
      uint64_t v5 = v31;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v20 = *(id *)(gLogObjects + 480);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v20 = &_os_log_default;
        id v21 = &_os_log_default;
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = v10[(int)v6 + 18];
        *(_DWORD *)buf = 136316418;
        uint64_t v33 = "t56_util_callbackOnTimer";
        __int16 v34 = 1024;
        int v35 = 238;
        __int16 v36 = 1024;
        int v37 = v6;
        __int16 v38 = 2048;
        *(void *)uint64_t v39 = v29;
        *(_WORD *)&v39[8] = 1024;
        *(_DWORD *)&unsigned char v39[10] = a2;
        __int16 v40 = 2048;
        int64_t v41 = v31;
        _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s:%d timerID %d, timer %p, timeoutMs %u, timeoutNs %lld", buf, 0x32u);
      }

      if ((v6 & 0x80000000) == 0)
      {
        uint64_t v22 = v10[v6 + 18];
        dispatch_time_t v23 = dispatch_time(0, v31);
        dispatch_source_set_timer(v22, v23, 0xFFFFFFFFFFFFFFFFLL, 0);
        goto LABEL_47;
      }
      if (gLogObjects && gNumLogObjects >= 61)
      {
        uint8_t v19 = *(id *)(gLogObjects + 480);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint8_t v19 = &_os_log_default;
        id v25 = &_os_log_default;
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        t56_util_callbackOnTimer_cold_4();
      }
LABEL_45:
    }
    uint64_t v6 = 0xFFFFFFFFLL;
  }
LABEL_47:
  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v26 = *(id *)(gLogObjects + 480);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v26 = &_os_log_default;
    id v27 = &_os_log_default;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    uint64_t v33 = "t56_util_callbackOnTimer";
    __int16 v34 = 1024;
    int v35 = 246;
    __int16 v36 = 1024;
    int v37 = v6;
    __int16 v38 = 1024;
    *(_DWORD *)uint64_t v39 = a2;
    *(_WORD *)&v39[4] = 2048;
    *(void *)&v39[6] = v5;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%s:%d timerID %d, timeoutMs %u, timeoutNs %lld", buf, 0x28u);
  }

  return v6;
}

void t56_util_cancelTimer(const void **a1, unsigned int a2)
{
  if (a1)
  {
    if ((a2 & 0x80000000) == 0)
    {
      T56Endpoint = t56_util_ios_getT56Endpoint(a1);
      if (T56Endpoint)
      {
        id v4 = T56Endpoint;
        uint64_t v5 = (char *)T56Endpoint + a2;
        int v8 = v5[208];
        CFStringRef v7 = v5 + 208;
        int v6 = v8;
        if (gLogObjects) {
          BOOL v9 = gNumLogObjects <= 60;
        }
        else {
          BOOL v9 = 1;
        }
        int v10 = !v9;
        if (v6)
        {
          if (v10)
          {
            BOOL v11 = *(id *)(gLogObjects + 480);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            BOOL v11 = &_os_log_default;
            id v13 = &_os_log_default;
          }
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            int v16 = 136315650;
            uint64_t v17 = "t56_util_cancelTimer";
            __int16 v18 = 1024;
            int v19 = 263;
            __int16 v20 = 1024;
            unsigned int v21 = a2;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s:%d Cancel timerID %d", (uint8_t *)&v16, 0x18u);
          }

          unsigned char *v7 = 0;
          int v14 = &v4[a2];
          v14[22] = 0;
          v14[27] = 0;
          dispatch_source_set_timer((dispatch_source_t)v14[18], 0xFFFFFFFFFFFFFFFFLL, 0, 0);
        }
        else
        {
          if (v10)
          {
            uint64_t v12 = *(id *)(gLogObjects + 480);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v12 = &_os_log_default;
            id v15 = &_os_log_default;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
            t56_util_cancelTimer_cold_1();
          }
        }
      }
    }
  }
}

void OUTLINED_FUNCTION_4_6(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100068ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100068D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100069064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006943C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100069704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000699F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void sub_100069DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006A070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006A32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006A5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006A8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006AB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006AE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006B098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006B354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006B618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006B8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006BBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_4_7(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_6_5(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x1Cu);
}

void OUTLINED_FUNCTION_8_3(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

CFStringRef *acc_connection_create(unsigned int a1, const void *a2, const void *a3)
{
  if (a1 > 9) {
    return 0;
  }
  int v6 = (char *)malloc_type_calloc(1uLL, 0x110uLL, 0x10E0040FA6EFA87uLL);
  CFStringRef v7 = (CFStringRef *)v6;
  if (v6)
  {
    v6[137] = 0;
    v6[142] = 0;
    pthread_mutex_init((pthread_mutex_t *)(v6 + 208), 0);
    CFStringRef *v7 = CFCreateUUIDString();
    uint64_t v8 = gLogSignpostObjects;
    int v9 = gNumLogSignpostObjects;
    if (gLogSignpostObjects && gNumLogSignpostObjects >= 2)
    {
      int v10 = *(NSObject **)(gLogSignpostObjects + 8);
      if (!gLogSignpostObjects) {
        goto LABEL_12;
      }
    }
    else
    {
      int v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v21 = 67109632;
        *(_DWORD *)uint64_t v22 = 1;
        *(_WORD *)&v22[4] = 2048;
        *(void *)&v22[6] = v8;
        __int16 v23 = 1024;
        LODWORD(v24) = v9;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d", (uint8_t *)&v21, 0x18u);
        uint64_t v8 = gLogSignpostObjects;
        int v9 = gNumLogSignpostObjects;
        if (!gLogSignpostObjects) {
          goto LABEL_12;
        }
      }
      else if (!v8)
      {
        goto LABEL_12;
      }
    }
    if (v9 >= 2)
    {
      BOOL v11 = *(NSObject **)(v8 + 8);
LABEL_14:
      os_signpost_id_t v12 = os_signpost_id_make_with_pointer(v11, v7);
      if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v13 = v12;
        if (os_signpost_enabled(v10))
        {
          CFStringRef v14 = *v7;
          int v21 = 138412802;
          *(void *)uint64_t v22 = v14;
          *(_WORD *)&v22[8] = 1024;
          *(_DWORD *)&v22[10] = a1;
          __int16 v23 = 2112;
          id v24 = a2;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v13, "Connection", "Create connection %@, type %{coreacc:ACCConnection_Type_t}d, identifier %@", (uint8_t *)&v21, 0x1Cu);
        }
      }
      *((_DWORD *)v7 + 2) = a1;
      if (a1 == 2) {
        kdebug_trace();
      }
      if (a2) {
        CFStringRef v15 = (const __CFString *)CFRetain(a2);
      }
      else {
        CFStringRef v15 = 0;
      }
      _DWORD v7[2] = v15;
      pthread_rwlock_wrlock(&_gAccConnectionLock);
      if (a3) {
        CFStringRef v16 = (const __CFString *)_Block_copy(a3);
      }
      else {
        CFStringRef v16 = 0;
      }
      v7[3] = v16;
      v7[4] = (CFStringRef)systemInfo_getCurrentUnixTimeMS();
      v7[5] = (CFStringRef)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, 0);
      pthread_rwlock_unlock(&_gAccConnectionLock);
      acc_authInfo_init((BOOL)(v7 + 6));
      acc_nvmInfo_init((_DWORD *)v7 + 28);
      v7[15] = 0;
      pthread_mutex_init((pthread_mutex_t *)(v7 + 18), 0);
      v7[16] = (CFStringRef)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFNullRef v17 = (const __CFNull *)v7[2];
      if (v17 && *((_DWORD *)v7 + 2) == 2) {
        acc_connection_setProperty((uint64_t)v7, kCFACCExternalAccessoryMacAddressKey, v17);
      }
      *((unsigned char *)v7 + 136) = 0;
      *((unsigned char *)v7 + 138) = 0;
      *((_WORD *)v7 + 70) = 0;
      CFStringRef v18 = acc_connection_copyDescription((CFStringRef)v7);
      if (gLogObjects && gNumLogObjects >= 14)
      {
        int v19 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        int v19 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = 138412290;
        *(void *)uint64_t v22 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[#Events] Created connection %@!", (uint8_t *)&v21, 0xCu);
      }
      if (v18) {
        CFRelease(v18);
      }
      *((unsigned char *)v7 + 137) = 1;
      return v7;
    }
LABEL_12:
    BOOL v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      acc_connection_create_cold_2();
    }
    goto LABEL_14;
  }
  return v7;
}

uint64_t acc_connection_setProperty(uint64_t a1, const void *a2, const __CFNull *a3)
{
  uint64_t v3 = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v7 = gNumLogObjects < 14;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      uint64_t v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v8 = *(NSObject **)(gLogObjects + 104);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)a1;
      int v17 = 138412546;
      CFStringRef v18 = a2;
      __int16 v19 = 2112;
      uint64_t v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Setting property %@ for connection %@...", (uint8_t *)&v17, 0x16u);
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 144));
    CFDictionaryRef v10 = acc_properties_copyProperties(*(const __CFDictionary **)(a1 + 128));
    uint64_t v3 = acc_properties_setProperty(*(__CFDictionary **)(a1 + 128), a2, a3);
    CFDictionaryRef v11 = acc_properties_copyProperties(*(const __CFDictionary **)(a1 + 128));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 144));
    if (gLogObjects && gNumLogObjects >= 14)
    {
      os_signpost_id_t v12 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      os_signpost_id_t v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)a1;
      int v17 = 138412802;
      CFStringRef v18 = a2;
      __int16 v19 = 2112;
      uint64_t v20 = v13;
      __int16 v21 = 2112;
      CFDictionaryRef v22 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Set property %@ for connection %@: %@", (uint8_t *)&v17, 0x20u);
    }
    if (*(unsigned char *)(a1 + 137) && !*(unsigned char *)(a1 + 142))
    {
      if (gLogObjects && gNumLogObjects >= 14)
      {
        CFStringRef v14 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        CFStringRef v14 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        acc_connection_setProperty_cold_3();
      }
      acc_manager_checkForWirelessCTA();
      if (gLogObjects && gNumLogObjects >= 14)
      {
        CFStringRef v15 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        CFStringRef v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        acc_connection_setProperty_cold_1();
      }
      acc_manager_checkForInductiveCTA();
      if (CFEqual(a2, kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo)) {
        acc_connection_mapAccessoryInfo((uint64_t *)a1);
      }
      platform_notifications_propertiesDidChangeForConnectionUUID(*(void *)a1, v10, v11);
    }
    if (v10) {
      CFRelease(v10);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (*(unsigned char *)(a1 + 138)) {
      platform_connectionInfo_accessoryConnectionInfoPropertyChanged(*(const void **)a1);
    }
  }
  return v3;
}

CFStringRef acc_connection_copyDescription(CFStringRef result)
{
  if (result)
  {
    uint64_t v1 = (__CFString *)result;
    p_char data = (pthread_mutex_t *)&result[4].data;
    pthread_mutex_lock((pthread_mutex_t *)&result[4].data);
    uint64_t isa = (uint64_t)v1->isa;
    uint64_t info_low = LODWORD(v1->info);
    if (info_low >= 0xA) {
      uint64_t v4 = &kACCConnection_Type_Strings[11];
    }
    else {
      uint64_t v4 = &kACCConnection_Type_Strings[info_low];
    }
    uint64_t v20 = *v4;
    uint64_t v5 = v1[1].isa;
    if (v1->length) {
      int v6 = "YES";
    }
    else {
      int v6 = "NO";
    }
    CFStringRef v18 = v6;
    char data = v1->data;
    unint64_t CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
    uint64_t v9 = v1[1].isa;
    CFDictionaryRef info = (const __CFDictionary *)v1[1].info;
    if (info) {
      CFIndex Count = CFDictionaryGetCount(info);
    }
    else {
      CFIndex Count = 0;
    }
    if (acc_authInfo_isAuthenticated((BOOL)&v1[1].data, 6)) {
      CFDictionaryRef v11 = "YES";
    }
    else {
      CFDictionaryRef v11 = "NO";
    }
    uint64_t length = v1[3].length;
    if (!length)
    {
      if (BYTE1(v1[4].info))
      {
        acc_connection_mapAccessoryInfo((uint64_t *)v1);
        uint64_t length = v1[3].length;
      }
      else
      {
        uint64_t length = 0;
      }
    }
    uint64_t v13 = CurrentUnixTimeMS - (void)v9;
    if (length) {
      CFStringRef v14 = "YES";
    }
    else {
      CFStringRef v14 = "NO";
    }
    CFDictionaryRef v15 = (const __CFDictionary *)v1[4].isa;
    if (v15) {
      CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetCount(v15);
    }
    if (BYTE2(v1[4].info)) {
      CFStringRef v16 = "YES";
    }
    else {
      CFStringRef v16 = "NO";
    }
    CFStringRef v17 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"<ACCConnection_t: %@; connectionType: [%s]; identifier: %@; dataOutHandler: %s; creationTimestampMS: %llu; durationMS: %llu; numEndpoints: %ld; authenticated: %s; accessoryInfo: %s; numProperties: %ld; published: %s>",
            isa,
            v20,
            data,
            v18,
            v5,
            v13,
            Count,
            v11,
            v14,
            v15,
            v16);
    pthread_mutex_unlock(p_data);
    return v17;
  }
  return result;
}

uint64_t acc_connection_publish(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (!*(void *)(result + 40) || *(unsigned char *)(result + 142)) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(result + 138);
  if (!*(unsigned char *)(result + 138))
  {
    platform_analytics_connectionWillBePublished((uint64_t *)result);
    platform_connectionInfo_accessoryConnectionAttached(*(const void **)v1, *(unsigned int *)(v1 + 8));
  }
  uint64_t v3 = (int *)&unk_100239000;
  if (gLogObjects && gNumLogObjects >= 14)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 104);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(const void **)v1;
    *(_DWORD *)buf = 138412290;
    *(void *)uint64_t v54 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Publishing all endpoints for connection %@...", buf, 0xCu);
  }
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(v1 + 40), (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_publishEndpoint, 0);
  uint64_t context = 0;
  CFArrayRef theArray = 0;
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v1 + 40));
  CFArrayRef theArray = CFArrayCreateMutable(kCFAllocatorDefault, Count, &kCFTypeArrayCallBacks);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(v1 + 40), (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_countEAServiceEndpoints, &context);
  if ((unsigned __int16)context == WORD1(context) && (unsigned __int16)context == *(unsigned __int16 *)(v1 + 140))
  {
    if (gLogObjects && gNumLogObjects >= 14)
    {
      BOOL v7 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      BOOL v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v33 = *(unsigned __int16 *)(v1 + 140);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)uint64_t v54 = (unsigned __int16)context;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = WORD1(context);
      *(_WORD *)uint64_t v55 = 1024;
      *(_DWORD *)&v55[2] = v33;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Not re-publishing EAService endpoint count %d.  number already published %d, connection's advertised count %d", buf, 0x14u);
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 14)
    {
      uint64_t v8 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      uint64_t v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Removing all EAService or EA endpoints from ExternalAccessory...", buf, 2u);
    }
    platform_externalAccessory_removeEAAccessoryForPrimaryEndpoints(theArray);
    if (gLogObjects && gNumLogObjects >= 14)
    {
      uint64_t v9 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      uint64_t v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      CFIndex v10 = CFArrayGetCount(theArray);
      *(_DWORD *)buf = 134217984;
      *(void *)uint64_t v54 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Adding %ld EAService or EA endpoints to ExternalAccessory...", buf, 0xCu);
    }
    if (gLogObjects && gNumLogObjects >= 14)
    {
      CFDictionaryRef v11 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      CFDictionaryRef v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v54 = theArray;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "EA or EAServiceEndpointUUIDs: %@", buf, 0xCu);
    }
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 144));
    os_signpost_id_t v12 = (const void *)kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo;
    if (acc_properties_containsProperty(*(CFDictionaryRef *)(v1 + 128), kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo))
    {
      uint64_t v13 = acc_properties_copyProperty(*(const __CFDictionary **)(v1 + 128), v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 144));
    platform_externalAccessory_addEAAccessoryForEAEndpoints(theArray, (uint64_t)v13);
    if (v13) {
      CFRelease(v13);
    }
    if (theArray)
    {
      *(_WORD *)(v1 + 140) = CFArrayGetCount(theArray);
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 14)
      {
        CFStringRef v14 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        CFStringRef v14 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        acc_connection_publish_cold_11();
      }
    }
    if (gLogObjects && gNumLogObjects >= 14)
    {
      CFDictionaryRef v15 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      CFDictionaryRef v15 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
      acc_connection_publish_cold_9((uint64_t *)v1, v15);
    }
  }
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (!*(unsigned char *)(v1 + 142) && *(void *)v1 && *(_DWORD *)(v1 + 8) == 6)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 144));
    CFStringRef v16 = acc_properties_copyProperty(*(const __CFDictionary **)(v1 + 128), kCFACCProperties_Connection_ManagerParent);
    CFNumberRef v17 = (const __CFNumber *)acc_properties_copyProperty(*(const __CFDictionary **)(v1 + 128), kCFACCProperties_Connection_IsAdapter);
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 144));
    if (gLogObjects && gNumLogObjects >= 14)
    {
      CFStringRef v18 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      CFStringRef v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      __int16 v19 = *(const void **)v1;
      *(_DWORD *)buf = 136316162;
      *(void *)uint64_t v54 = "_checkForAdapterInfo";
      *(_WORD *)&v54[8] = 1024;
      *(_DWORD *)uint64_t v55 = 1444;
      *(_WORD *)&v55[4] = 2112;
      *(void *)&v55[6] = v19;
      *(_WORD *)&v55[14] = 2112;
      *(void *)&v55[16] = v16;
      *(_WORD *)&v55[24] = 2112;
      *(void *)&v55[26] = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s:%d connection %@, managerParent %@, isAdapter %@", buf, 0x30u);
    }
    if (!v16) {
      goto LABEL_123;
    }
    if (*(void *)(v1 + 120))
    {
      int valuePtr = 0;
      if (v17 && (CFNumberGetValue(v17, kCFNumberIntType, &valuePtr), valuePtr))
      {
        CFArrayRef ConnectionsThroughAdapter = acc_manager_findConnectionsThroughAdapter(*(CFTypeRef *)v1);
        if (ConnectionsThroughAdapter)
        {
          CFArrayRef v21 = ConnectionsThroughAdapter;
          size_t v22 = CFArrayGetCount(ConnectionsThroughAdapter);
          if (v22)
          {
            CFIndex v23 = v22;
            int v49 = v2;
            values = (void **)malloc_type_calloc(v22, 8uLL, 0x6004044C4A2DFuLL);
            CFNullRef v24 = (const __CFNull *)acc_accInfo_retainedProperty(*(void *)(v1 + 120), 11, 0);
            CFNullRef v25 = (const __CFNull *)acc_accInfo_retainedProperty(*(void *)(v1 + 120), 12, 0);
            if (gLogObjects && gNumLogObjects >= 14)
            {
              uint64_t v26 = *(NSObject **)(gLogObjects + 104);
            }
            else
            {
              uint64_t v26 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              __int16 v34 = *(const void **)v1;
              *(_DWORD *)buf = 138413314;
              *(void *)uint64_t v54 = v34;
              *(_WORD *)&v54[8] = 2048;
              *(void *)uint64_t v55 = v23;
              *(_WORD *)&v55[8] = 2112;
              *(void *)&unsigned char v55[10] = v24;
              *(_WORD *)&v55[18] = 2112;
              *(void *)&unsigned char v55[20] = v25;
              *(_WORD *)&v55[28] = 2112;
              *(void *)&v55[30] = v21;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "%@ isAdapter: Found connectionsThroughAdapter count %ld, adapterVID %@, adapterPID %@, connectionUUIDs %@", buf, 0x34u);
            }
            uint64_t v48 = v16;
            if (v24 && v25 && values)
            {
              v56.location = 0;
              v56.uint64_t length = v23;
              CFArrayGetValues(v21, v56, (const void **)values);
              if (v23 >= 1)
              {
                int v35 = (const void *)kCFACCProperties_Connection_AdapterVID;
                __int16 v36 = (const void *)kCFACCProperties_Connection_AdapterPID;
                int v37 = (const void **)values;
                do
                {
                  __int16 v38 = *v37++;
                  CFSetRef ConnectionWithUUID = acc_manager_getConnectionWithUUID(v38);
                  acc_connection_setProperty((uint64_t)ConnectionWithUUID, v35, v24);
                  acc_connection_setProperty((uint64_t)ConnectionWithUUID, v36, v25);
                  --v23;
                }
                while (v23);
              }
            }
            else if (!values)
            {
LABEL_112:
              uint64_t v3 = (_DWORD *)&unk_100239000;
              goto LABEL_118;
            }
            free(values);
            goto LABEL_112;
          }
LABEL_98:
          CFNullRef v25 = v21;
LABEL_121:
          CFRelease(v25);
        }
      }
      else
      {
        CFStringRef AdapterForConnection = acc_manager_findAdapterForConnection(*(CFTypeRef *)v1);
        if (AdapterForConnection)
        {
          CFArrayRef v21 = (const __CFArray *)AdapterForConnection;
          uint64_t v28 = (uint64_t *)acc_manager_getConnectionWithUUID(AdapterForConnection);
          if (v28)
          {
            uint64_t v29 = v28;
            uint64_t v30 = v28[15];
            if (v30)
            {
              uint64_t v48 = v16;
              int v49 = v2;
              CFNullRef v24 = (const __CFNull *)acc_accInfo_retainedProperty(v30, 11, 0);
              CFNullRef v25 = (const __CFNull *)acc_accInfo_retainedProperty(v29[15], 12, 0);
              if (gLogObjects && gNumLogObjects >= 14)
              {
                int64_t v31 = *(NSObject **)(gLogObjects + 104);
              }
              else
              {
                int64_t v31 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
              {
                uint64_t v40 = *v29;
                int64_t v41 = *(const void **)v1;
                *(_DWORD *)buf = 138413058;
                *(void *)uint64_t v54 = v40;
                *(_WORD *)&v54[8] = 2112;
                *(void *)uint64_t v55 = v41;
                *(_WORD *)&v55[8] = 2112;
                *(void *)&unsigned char v55[10] = v24;
                *(_WORD *)&v55[18] = 2112;
                *(void *)&unsigned char v55[20] = v25;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Found adapter %@ for connection %@, adapterVID %@, adapterPID %@", buf, 0x2Au);
              }
              acc_connection_setProperty(v1, kCFACCProperties_Connection_AdapterVID, v24);
              acc_connection_setProperty(v1, kCFACCProperties_Connection_AdapterPID, v25);
              uint64_t v3 = (int *)&unk_100239000;
LABEL_118:
              CFRelease(v21);
              int v2 = v49;
              CFStringRef v16 = v48;
              if (v24) {
                CFRelease(v24);
              }
              if (!v25) {
                goto LABEL_122;
              }
              goto LABEL_121;
            }
          }
          if (gLogObjects && gNumLogObjects >= 14)
          {
            uint64_t v32 = *(NSObject **)(gLogObjects + 104);
          }
          else
          {
            uint64_t v32 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            acc_connection_publish_cold_3((uint64_t)v21, (uint64_t *)v1, v32);
          }
          goto LABEL_98;
        }
      }
    }
LABEL_122:
    CFRelease(v16);
LABEL_123:
    if (v17) {
      CFRelease(v17);
    }
  }
  *(unsigned char *)(v1 + 138) = 1;
  if (v2)
  {
    if (gLogObjects && v3[100] >= 14)
    {
      CFRange v42 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      CFRange v42 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v45 = *(const void **)v1;
      CFDictionaryRef v46 = *(const __CFDictionary **)(v1 + 40);
      if (v46) {
        CFDictionaryRef v46 = (const __CFDictionary *)CFDictionaryGetCount(v46);
      }
      *(_DWORD *)buf = 138412546;
      *(void *)uint64_t v54 = v45;
      *(_WORD *)&v54[8] = 2048;
      *(void *)uint64_t v55 = v46;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Re-published connection %@! (numEndpoints: %ld)", buf, 0x16u);
    }
  }
  else
  {
    CFStringRef v43 = acc_connection_copyDescription((CFStringRef)v1);
    if (gLogObjects && v3[100] >= 14)
    {
      uint64_t v44 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      uint64_t v44 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v54 = v43;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "[#Events] Published connection %@!", buf, 0xCu);
    }
    if (v43) {
      CFRelease(v43);
    }
  }
  return 1;
}

uint64_t _CFDictionaryApplierFunction_publishEndpoint(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return acc_endpoint_publish(a2);
  }
  return result;
}

void _CFDictionaryApplierFunction_countEAServiceEndpoints(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3 && (acc_endpoint_getProtocol(a2) == 5 || acc_endpoint_getProtocol(a2) == 7))
  {
    ++*(_WORD *)a3;
    if (acc_endpoint_isPublished(a2)) {
      ++*(_WORD *)(a3 + 2);
    }
    uint64_t v5 = *(__CFArray **)(a3 + 8);
    if (v5)
    {
      int v6 = *(const void **)(a2 + 16);
      CFArrayAppendValue(v5, v6);
    }
  }
}

uint64_t acc_connection_destroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    int v2 = *(uint64_t **)result;
    if (*(void *)result)
    {
      uint64_t v3 = gLogSignpostObjects;
      int v4 = gNumLogSignpostObjects;
      if (gLogSignpostObjects) {
        BOOL v5 = gNumLogSignpostObjects < 2;
      }
      else {
        BOOL v5 = 1;
      }
      if (v5)
      {
        int v6 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          int v24 = 67109632;
          *(_DWORD *)CFNullRef v25 = 1;
          *(_WORD *)&v25[4] = 2048;
          *(void *)&v25[6] = v3;
          *(_WORD *)&unsigned char v25[14] = 1024;
          *(_DWORD *)&v25[16] = v4;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d", (uint8_t *)&v24, 0x18u);
          uint64_t v3 = gLogSignpostObjects;
          int v4 = gNumLogSignpostObjects;
        }
      }
      else
      {
        int v6 = *(NSObject **)(gLogSignpostObjects + 8);
      }
      if (v3 && v4 >= 2)
      {
        BOOL v7 = *(NSObject **)(v3 + 8);
      }
      else
      {
        BOOL v7 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          acc_connection_create_cold_2();
        }
      }
      os_signpost_id_t v8 = os_signpost_id_make_with_pointer(v7, v2);
      if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v9 = v8;
        if (os_signpost_enabled(v6))
        {
          uint64_t v10 = *v2;
          int v24 = 138412290;
          *(void *)CFNullRef v25 = v10;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_BEGIN, v9, "Connection", "Create connection %@", (uint8_t *)&v24, 0xCu);
        }
      }
      CFStringRef v11 = acc_connection_copyDescription((CFStringRef)v2);
      if (gLogObjects && gNumLogObjects >= 14)
      {
        os_signpost_id_t v12 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        os_signpost_id_t v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = 138412290;
        *(void *)CFNullRef v25 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[#Events] Destroying connection %@...", (uint8_t *)&v24, 0xCu);
      }
      if (v11) {
        CFRelease(v11);
      }
      *((unsigned char *)v2 + 142) = 1;
      acc_connection_setDataOutHandler(*v1, 0);
      if (*((_DWORD *)v2 + 2) == 2) {
        kdebug_trace();
      }
      unint64_t CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
      uint64_t v14 = v2[4];
      if (gLogObjects && gNumLogObjects >= 14)
      {
        CFDictionaryRef v15 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        CFDictionaryRef v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = *v2;
        int v24 = 138412290;
        *(void *)CFNullRef v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Dismissing any user notifications for connection %@...", (uint8_t *)&v24, 0xCu);
      }
      ACCUNManagerDismissNotificationsWithGroupIdentifier(*v2);
      acc_connection_removeAllEndpoints((uint64_t)v2);
      if (*((unsigned char *)v2 + 138))
      {
        platform_analytics_connectionWillBeDestroyed((unint64_t)v2);
        platform_connectionInfo_accessoryConnectionDetached(*v2);
      }
      if (*v2) {
        CFTypeRef v17 = CFRetain((CFTypeRef)*v2);
      }
      else {
        CFTypeRef v17 = 0;
      }
      pthread_mutex_lock((pthread_mutex_t *)(v2 + 26));
      if (*v2)
      {
        CFRelease((CFTypeRef)*v2);
        uint64_t *v2 = 0;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 26));
      pthread_mutex_destroy((pthread_mutex_t *)(v2 + 26));
      CFStringRef v18 = (const void *)v2[2];
      if (v18)
      {
        CFRelease(v18);
        v2[2] = 0;
      }
      __int16 v19 = (const void *)v2[5];
      if (v19)
      {
        CFRelease(v19);
        v2[5] = 0;
      }
      pthread_mutex_lock((pthread_mutex_t *)(v2 + 18));
      uint64_t v20 = (const void *)v2[16];
      if (v20)
      {
        CFRelease(v20);
        v2[16] = 0;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 18));
      pthread_mutex_destroy((pthread_mutex_t *)(v2 + 18));
      acc_nvmInfo_init((_DWORD *)v2 + 28);
      acc_authInfo_cleanup((uint64_t)(v2 + 6), 1);
      acc_accInfo_destroy((void **)v2 + 15);
      if (*v1)
      {
        free((void *)*v1);
        uint64_t *v1 = 0;
      }
      if (gLogObjects && gNumLogObjects >= 14)
      {
        CFArrayRef v21 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        CFArrayRef v21 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = 138412546;
        *(void *)CFNullRef v25 = v17;
        *(_WORD *)&unsigned char v25[8] = 2048;
        *(double *)&v25[10] = (double)(CurrentUnixTimeMS - v14) / 1000.0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Destroyed connection %@! (duration: %.2fs)", (uint8_t *)&v24, 0x16u);
      }
      if (v17) {
        CFRelease(v17);
      }
      if (gLogObjects && gNumLogObjects >= 14)
      {
        size_t v22 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        size_t v22 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
        acc_connection_destroy_cold_3();
      }
      acc_manager_checkForWirelessCTA();
      if (gLogObjects && gNumLogObjects >= 14)
      {
        CFIndex v23 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        CFIndex v23 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
        acc_connection_destroy_cold_1();
      }
      acc_manager_checkForInductiveCTA();
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL acc_connection_setDataOutHandler(uint64_t a1, const void *a2)
{
  if (a1)
  {
    pthread_rwlock_wrlock(&_gAccConnectionLock);
    int v4 = *(const void **)(a1 + 24);
    if (v4) {
      _Block_release(v4);
    }
    if (a2) {
      BOOL v5 = _Block_copy(a2);
    }
    else {
      BOOL v5 = 0;
    }
    *(void *)(a1 + 24) = v5;
    pthread_rwlock_unlock(&_gAccConnectionLock);
  }
  return a1 != 0;
}

unint64_t acc_connection_getDurationMS(unint64_t result)
{
  if (result) {
    return systemInfo_getCurrentUnixTimeMS() - *(void *)(result + 32);
  }
  return result;
}

void acc_connection_removeAllEndpoints(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 40))
    {
      pthread_rwlock_wrlock(&_gAccConnectionLock);
      CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a1 + 40));
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 40));
      pthread_rwlock_unlock(&_gAccConnectionLock);
      CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_destroyEndpoint, 0);
      if (Copy)
      {
        CFRelease(Copy);
      }
    }
  }
}

CFSetRef acc_connection_copyEndpointUUIDs(CFSetRef result)
{
  if (result)
  {
    CFSetRef v1 = result;
    uint64_t result = (CFSetRef)*((void *)result + 5);
    if (result)
    {
      CFIndex Count = CFDictionaryGetCount(result);
      if (Count < 1)
      {
        return CFSetCreate(kCFAllocatorDefault, 0, 0, &kCFTypeSetCallBacks);
      }
      else
      {
        CFIndex v3 = Count;
        __chkstk_darwin(Count);
        BOOL v5 = (char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
        memset(v5, 170, v4);
        CFDictionaryGetKeysAndValues(*((CFDictionaryRef *)v1 + 5), (const void **)v5, 0);
        return CFSetCreate(kCFAllocatorDefault, (const void **)v5, v3, &kCFTypeSetCallBacks);
      }
    }
  }
  return result;
}

void **_CFDictionaryApplierFunction_destroyEndpoint(uint64_t a1, void *a2)
{
  CFIndex v3 = a2;
  if (a2) {
    return acc_endpoint_destroy(&v3);
  }
  return result;
}

BOOL acc_connection_setAuthCertData(BOOL result, const void *a2)
{
  if (result)
  {
    CFIndex v3 = (uint64_t *)result;
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 14;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      BOOL v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v5 = *(NSObject **)(gLogObjects + 104);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *v3;
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting auth cert data for connection %@...", (uint8_t *)&v7, 0xCu);
    }
    return acc_authInfo_setCertData((uint64_t)(v3 + 6), a2);
  }
  return result;
}

uint64_t acc_connection_setAuthStatus(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v6 = acc_connection_copyUUID(a1);
  if (!v6) {
    return 0;
  }
  int v7 = v6;
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 14;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    os_signpost_id_t v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    os_signpost_id_t v9 = *(NSObject **)(gLogObjects + 104);
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v27 = 1024;
    int v28 = a2;
    __int16 v29 = 1024;
    int v30 = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "acc_connection_setAuthStatus: %@, authType %{coreacc:ACCAuthInfo_Type_t}d, authStatus %{coreacc:ACCAuthInfo_Status_t}d", buf, 0x18u);
  }
  uint64_t Status = acc_authInfo_getStatus(a1 + 48, a2);
  BOOL isAuthenticated = acc_authInfo_isAuthenticated(a1 + 48, 6);
  uint64_t v12 = acc_authInfo_setStatus(a1 + 48, a2, a3);
  if (v12)
  {
    uint64_t v13 = acc_authInfo_getStatus(a1 + 48, a2);
    BOOL v14 = acc_authInfo_isAuthenticated(a1 + 48, 6);
    if (v13 != Status)
    {
      uint64_t v15 = v14;
      if (gLogObjects && gNumLogObjects >= 14)
      {
        uint64_t v16 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        uint64_t v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        CFTypeRef v17 = "NO";
        *(_DWORD *)buf = 138413570;
        *(void *)&uint8_t buf[4] = v7;
        if (isAuthenticated) {
          CFStringRef v18 = "YES";
        }
        else {
          CFStringRef v18 = "NO";
        }
        if (v15) {
          CFTypeRef v17 = "YES";
        }
        __int16 v27 = 1024;
        int v28 = Status;
        __int16 v29 = 1024;
        int v30 = v13;
        __int16 v31 = 1024;
        int v32 = a2;
        __int16 v33 = 2080;
        __int16 v34 = v18;
        __int16 v35 = 2080;
        __int16 v36 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Authentication status changed for connection %@! oldAuthStatus: %{coreacc:ACCAuthInfo_Status_t}d, newAuthStatus: %{coreacc:ACCAuthInfo_Status_t}d, authType: %{coreacc:ACCAuthInfo_Type_t}d, wasAuthenticated: %s, isAuthenticated: %s", buf, 0x32u);
      }
      platform_notifications_authenticationStatusDidChangeForConnectionUUID(v7, Status, v13, a2, v15, isAuthenticated);
      *(void *)buf = 0;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findiAP2Endpoint, buf);
      uint64_t v12 = v12;
      if ((v13 & 0xFFFFFFFD) == 1)
      {
        platform_analytics_connectionAuthUnsuccessful((CFStringRef *)a1, v13);
        __int16 v19 = &unk_100239000;
      }
      else
      {
        __int16 v19 = (void *)&unk_100239000;
        if (v13 == 2 && !*(void *)buf)
        {
          platform_analytics_connectionPassedAuth((CFStringRef *)a1);
          goto LABEL_32;
        }
      }
      if (v13 != 2)
      {
LABEL_50:
        if (*(unsigned char *)(a1 + 138)) {
          platform_connectionInfo_accessoryConnectionInfoPropertyChanged(v7);
        }
        goto LABEL_52;
      }
LABEL_32:
      int v20 = *(_DWORD *)(a1 + 8);
      if (v20 == 2)
      {
        uint64_t v21 = v19[49];
        if (v21 && gNumLogObjects >= 14)
        {
          size_t v22 = *(NSObject **)(v21 + 104);
        }
        else
        {
          size_t v22 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
          acc_connection_setAuthStatus_cold_3();
        }
        acc_manager_checkForWirelessCTA();
        int v20 = *(_DWORD *)(a1 + 8);
      }
      if (v20 == 9)
      {
        uint64_t v23 = v19[49];
        if (v23 && gNumLogObjects >= 14)
        {
          int v24 = *(NSObject **)(v23 + 104);
        }
        else
        {
          int v24 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
          acc_connection_setAuthStatus_cold_1();
        }
        acc_manager_checkForInductiveCTA();
      }
      goto LABEL_50;
    }
  }
LABEL_52:
  CFRelease(v7);
  return v12;
}

void *acc_connection_copyUUID(uint64_t a1)
{
  CFSetRef v1 = (void *)a1;
  if (a1)
  {
    int v2 = (pthread_mutex_t *)(a1 + 208);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 208));
    CFSetRef v1 = (void *)*v1;
    if (v1) {
      CFRetain(v1);
    }
    pthread_mutex_unlock(v2);
  }
  return v1;
}

void _CFDictionaryApplierFunction_findiAP2Endpoint(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 && a3 && acc_endpoint_getProtocol(a2) == 4 && !*a3) {
    *a3 = a2;
  }
}

BOOL acc_connection_setAuthCTAAAllowed(BOOL result, char a2)
{
  if (result) {
    return acc_authInfo_setCTAAllowed(result + 48, a2);
  }
  return result;
}

uint64_t acc_connection_getAuthStatus(uint64_t result, uint64_t a2)
{
  if (result) {
    return acc_authInfo_getStatus(result + 48, a2);
  }
  return result;
}

BOOL acc_connection_isAuthenticated(BOOL result, uint64_t a2)
{
  if (result) {
    return acc_authInfo_isAuthenticated(result + 48, a2);
  }
  return result;
}

uint64_t acc_connection_getTypeString(uint64_t a1)
{
  uint64_t result = kACCConnection_Type_Strings[11];
  if (a1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 8);
    if (v3 <= 9) {
      return kACCConnection_Type_Strings[v3];
    }
  }
  return result;
}

uint64_t acc_connection_getAccessoryInfo(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 120);
    if (!result)
    {
      if (*(unsigned char *)(v1 + 137))
      {
        acc_connection_mapAccessoryInfo((uint64_t *)v1);
        return *(void *)(v1 + 120);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t acc_connection_getType(uint64_t a1)
{
  uint64_t result = 11;
  if (a1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 8);
    if (v3 <= 9) {
      return v3;
    }
    else {
      return 11;
    }
  }
  return result;
}

CFTypeRef acc_connection_copyIdentifier(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(const void **)(a1 + 16)) != 0) {
    return CFRetain(v1);
  }
  else {
    return 0;
  }
}

uint64_t acc_connection_getAuthInfo(uint64_t a1)
{
  if (a1) {
    return a1 + 48;
  }
  else {
    return 0;
  }
}

void acc_connection_mapAccessoryInfo(uint64_t *a1)
{
  if (!a1) {
    return;
  }
  if (!gLogObjects || gNumLogObjects < 14)
  {
    unsigned int v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    unsigned int v3 = *(NSObject **)(gLogObjects + 104);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *a1;
    *(_DWORD *)buf = 138412290;
    uint64_t v40 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Mapping accessory info for connection %@...", buf, 0xCu);
  }
  CFDictionaryRef v5 = (const __CFDictionary *)a1[5];
  if (!v5 || CFDictionaryGetCount(v5) < 1) {
    return;
  }
  if (*((unsigned char *)a1 + 142))
  {
    __int16 v36 = logObjectForModule_1(13);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)buf = 0;
    __int16 v29 = "Skipped mapping accessory info since connection is being destroyed.";
    int v30 = v36;
    os_log_type_t v31 = OS_LOG_TYPE_INFO;
    goto LABEL_89;
  }
  uint64_t context = 0;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 18));
  uint64_t v6 = (const void *)kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo;
  if (acc_properties_containsProperty((CFDictionaryRef)a1[16], kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo))
  {
    int v7 = acc_properties_copyProperty((const __CFDictionary *)a1[16], v6);
    EndpointWithUUID = acc_manager_getEndpointWithUUID(v7);
    uint64_t context = EndpointWithUUID;
    if (v7)
    {
      CFRelease(v7);
      EndpointWithUUID = context;
    }
    if (gLogObjects) {
      BOOL v9 = gNumLogObjects <= 13;
    }
    else {
      BOOL v9 = 1;
    }
    int v10 = !v9;
    if (EndpointWithUUID)
    {
      if (v10)
      {
        CFStringRef v11 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        CFStringRef v11 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        BOOL v14 = "Endpoint for accessory info was specified!";
        uint64_t v15 = v11;
        os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
LABEL_40:
        _os_log_impl((void *)&_mh_execute_header, v15, v16, v14, buf, 2u);
      }
    }
    else
    {
      if (v10)
      {
        uint64_t v13 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        uint64_t v13 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        acc_connection_mapAccessoryInfo_cold_6();
      }
    }
  }
  else
  {
    CFDictionaryApplyFunction((CFDictionaryRef)a1[5], (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findiAPEndpoint, &context);
    if (context)
    {
      if (gLogObjects && gNumLogObjects >= 14)
      {
        uint64_t v12 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        uint64_t v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        BOOL v14 = "Found iAP endpoint, mapping accessory info to first iAP endpoint...";
        uint64_t v15 = v12;
        os_log_type_t v16 = OS_LOG_TYPE_INFO;
        goto LABEL_40;
      }
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 18));
  CFTypeRef v17 = context;
  if (context) {
    goto LABEL_71;
  }
  CFDictionaryApplyFunction((CFDictionaryRef)a1[5], (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findEAServiceEndpoint, &context);
  if (context)
  {
    if (gLogObjects && gNumLogObjects >= 14)
    {
      CFStringRef v18 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      CFStringRef v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      size_t v22 = "Found EAService endpoint, mapping accessory info to first EAService endpoint...";
      uint64_t v23 = v18;
LABEL_69:
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, v22, buf, 2u);
    }
  }
  else
  {
    CFDictionaryApplyFunction((CFDictionaryRef)a1[5], (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findInternalInfoEndpoint, &context);
    if (gLogObjects) {
      BOOL v19 = gNumLogObjects <= 13;
    }
    else {
      BOOL v19 = 1;
    }
    int v20 = !v19;
    if (context)
    {
      if (v20)
      {
        uint64_t v21 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        uint64_t v21 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        size_t v22 = "Found InternalInfo endpoint, mapping accessory info to first InternalInfo endpoint...";
        uint64_t v23 = v21;
        goto LABEL_69;
      }
    }
    else
    {
      if (v20)
      {
        int v24 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        int v24 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Couldn't find known endpoint types, mapping accessory info to first endpoint...", buf, 2u);
      }
      if (CFDictionaryGetCount((CFDictionaryRef)a1[5]) >= 1)
      {
        __chkstk_darwin();
        __int16 v35 = (uint64_t *)((char *)&v37 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
        memset(v35, 170, v34);
        CFDictionaryGetKeysAndValues((CFDictionaryRef)a1[5], 0, (const void **)v35);
        uint64_t context = (void *)*v35;
      }
    }
  }
  CFTypeRef v17 = context;
  if (!context)
  {
    if (gLogObjects && gNumLogObjects >= 14)
    {
      __int16 v33 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      __int16 v33 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)buf = 0;
    __int16 v29 = "Couldn't find an endpoint to map accessory info to!";
    int v30 = v33;
    os_log_type_t v31 = OS_LOG_TYPE_DEFAULT;
LABEL_89:
    uint32_t v32 = 2;
    goto LABEL_80;
  }
LABEL_71:
  CFNullRef v25 = (char *)a1[15];
  if (!v25)
  {
    CFNullRef v25 = acc_accInfo_create();
    a1[15] = (uint64_t)v25;
    CFTypeRef v17 = context;
  }
  acc_accInfo_setAccessoryInfo((uint64_t)v25, v17[8]);
  if (gLogObjects && gNumLogObjects >= 14)
  {
    uint64_t v26 = *(NSObject **)(gLogObjects + 104);
  }
  else
  {
    uint64_t v26 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = *a1;
    uint64_t v28 = context[2];
    *(_DWORD *)buf = 138412546;
    uint64_t v40 = v27;
    __int16 v41 = 2112;
    uint64_t v42 = v28;
    __int16 v29 = "Mapped accessory info for connection %@ to endpoint %@";
    int v30 = v26;
    os_log_type_t v31 = OS_LOG_TYPE_DEFAULT;
    uint32_t v32 = 22;
LABEL_80:
    _os_log_impl((void *)&_mh_execute_header, v30, v31, v29, buf, v32);
  }
}

BOOL acc_connection_setProperties(uint64_t a1, const __CFDictionary *a2)
{
  BOOL v2 = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 14;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v6 = *(NSObject **)(gLogObjects + 104);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)a1;
      int v15 = 138412546;
      uint64_t v16 = v7;
      __int16 v17 = 2112;
      CFDictionaryRef v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Setting properties for connection %@: %@", (uint8_t *)&v15, 0x16u);
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 144));
    CFDictionaryRef v8 = acc_properties_copyProperties(*(const __CFDictionary **)(a1 + 128));
    BOOL v2 = acc_properties_setProperties(*(void **)(a1 + 128), a2);
    CFDictionaryRef v9 = acc_properties_copyProperties(*(const __CFDictionary **)(a1 + 128));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 144));
    if (gLogObjects && gNumLogObjects >= 14)
    {
      int v10 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      int v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)a1;
      int v15 = 138412546;
      uint64_t v16 = v11;
      __int16 v17 = 2112;
      CFDictionaryRef v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Set properties for connection %@: %@", (uint8_t *)&v15, 0x16u);
    }
    if (*(unsigned char *)(a1 + 137) && !*(unsigned char *)(a1 + 142))
    {
      if (gLogObjects && gNumLogObjects >= 14)
      {
        uint64_t v12 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        uint64_t v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
        acc_connection_setProperties_cold_3();
      }
      acc_manager_checkForWirelessCTA();
      if (gLogObjects && gNumLogObjects >= 14)
      {
        uint64_t v13 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        uint64_t v13 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        acc_connection_setProperties_cold_1();
      }
      acc_manager_checkForInductiveCTA();
      if (acc_properties_containsProperty(a2, kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo)) {
        acc_connection_mapAccessoryInfo((uint64_t *)a1);
      }
      platform_notifications_propertiesDidChangeForConnectionUUID(*(void *)a1, v8, v9);
    }
    if (v8) {
      CFRelease(v8);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (*(unsigned char *)(a1 + 138)) {
      platform_connectionInfo_accessoryConnectionInfoPropertyChanged(*(const void **)a1);
    }
  }
  return v2;
}

BOOL acc_connection_removeProperty(uint64_t a1, const void *a2)
{
  BOOL v2 = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 14;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v6 = *(NSObject **)(gLogObjects + 104);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)a1;
      int v13 = 138412546;
      BOOL v14 = a2;
      __int16 v15 = 2112;
      uint64_t v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Removing property %@ for connection %@...", (uint8_t *)&v13, 0x16u);
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 144));
    CFDictionaryRef v8 = acc_properties_copyProperties(*(const __CFDictionary **)(a1 + 128));
    BOOL v2 = acc_properties_removeProperty(*(CFMutableDictionaryRef *)(a1 + 128), a2);
    CFDictionaryRef v9 = acc_properties_copyProperties(*(const __CFDictionary **)(a1 + 128));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 144));
    if (gLogObjects && gNumLogObjects >= 14)
    {
      int v10 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      int v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)a1;
      int v13 = 138412802;
      BOOL v14 = a2;
      __int16 v15 = 2112;
      uint64_t v16 = v11;
      __int16 v17 = 2112;
      CFDictionaryRef v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Removed property %@ for connection %@: %@", (uint8_t *)&v13, 0x20u);
    }
    if (*(unsigned char *)(a1 + 137) && !*(unsigned char *)(a1 + 142)) {
      platform_notifications_propertiesDidChangeForConnectionUUID(*(void *)a1, v8, v9);
    }
    if (v8) {
      CFRelease(v8);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (*(unsigned char *)(a1 + 138)) {
      platform_connectionInfo_accessoryConnectionInfoPropertyChanged(*(const void **)a1);
    }
  }
  return v2;
}

char *acc_connection_copyProperty(char *result, const void *a2)
{
  if (result)
  {
    unsigned int v3 = (const __CFDictionary **)result;
    uint64_t v4 = (pthread_mutex_t *)(result + 144);
    pthread_mutex_lock((pthread_mutex_t *)(result + 144));
    BOOL v5 = acc_properties_copyProperty(v3[16], a2);
    pthread_mutex_unlock(v4);
    return (char *)v5;
  }
  return result;
}

CFDictionaryRef acc_connection_copyProperties(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryRef v1 = result;
    BOOL v2 = (pthread_mutex_t *)((char *)result + 144);
    pthread_mutex_lock((pthread_mutex_t *)((char *)result + 144));
    CFDictionaryRef v3 = acc_properties_copyProperties(*((const __CFDictionary **)v1 + 16));
    pthread_mutex_unlock(v2);
    return v3;
  }
  return result;
}

BOOL acc_connection_getSupervisedTransportsRestricted(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 136) != 0;
  }
  return result;
}

BOOL acc_connection_setSupervisedTransportsRestricted(uint64_t *a1, int a2)
{
  if (a1 && *((unsigned __int8 *)a1 + 136) != a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 14;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      BOOL v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v5 = *(NSObject **)(gLogObjects + 104);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = "NO";
      uint64_t v7 = *a1;
      if (a2) {
        uint64_t v6 = "YES";
      }
      int v9 = 136315394;
      int v10 = v6;
      __int16 v11 = 2112;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Setting supervisedTransportsRestricted... (supervisedTransportsRestricted: %s, connectionUUID: %@)", (uint8_t *)&v9, 0x16u);
    }
    *((unsigned char *)a1 + 136) = a2;
    CFDictionaryApplyFunction((CFDictionaryRef)a1[5], (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_supervisedTransportsRestrictedDidChange, 0);
  }
  return a1 != 0;
}

void _CFDictionaryApplierFunction_supervisedTransportsRestrictedDidChange(uint64_t a1, uint64_t a2)
{
  if (a2) {
    acc_endpoint_supervisedTransportsRestrictedDidChange(a2);
  }
}

BOOL acc_connection_isPublished(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 138) != 0;
  }
  return result;
}

void _CFDictionaryApplierFunction_findiAPEndpoint(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 && a3 && acc_endpoint_getProtocol(a2) - 3 <= 1 && !*a3) {
    *a3 = a2;
  }
}

void _CFDictionaryApplierFunction_findEAServiceEndpoint(uint64_t a1, void *a2, void *a3)
{
  if (a2 && a3)
  {
    int Protocol = acc_endpoint_getProtocol((uint64_t)a2);
    int v6 = Protocol;
    int v7 = 11;
    if (*a2)
    {
      if (*(_DWORD *)(*a2 + 8) <= 9u) {
        int v7 = *(_DWORD *)(*a2 + 8);
      }
      else {
        int v7 = 11;
      }
    }
    if (Protocol != 5 || v7 == 6)
    {
      if (gLogObjects && gNumLogObjects >= 14)
      {
        CFDictionaryRef v8 = *(NSObject **)(gLogObjects + 104);
      }
      else
      {
        CFDictionaryRef v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = a2[2];
        int v10 = 136315906;
        __int16 v11 = "_CFDictionaryApplierFunction_findEAServiceEndpoint";
        __int16 v12 = 2112;
        uint64_t v13 = v9;
        __int16 v14 = 1024;
        int v15 = v6;
        __int16 v16 = 1024;
        int v17 = v7;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s: Skip endpoint %@ with protocol %{coreacc:ACCEndpoint_Protocol_t}d, connectionType %{coreacc:ACCConnection_Type_t}d", (uint8_t *)&v10, 0x22u);
      }
    }
    else if (!*a3)
    {
      *a3 = a2;
    }
  }
}

void _CFDictionaryApplierFunction_findInternalInfoEndpoint(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 && a3 && acc_endpoint_getProtocol(a2) == 2 && !*a3) {
    *a3 = a2;
  }
}

void acc_connection_updateAcccessoryInfoIfNeeded(uint64_t a1, const void *a2)
{
  if (!a1 || !a2) {
    return;
  }
  BOOL v4 = (const void *)kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo;
  if (!acc_properties_containsProperty(*(CFDictionaryRef *)(a1 + 128), kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo))goto LABEL_13; {
  BOOL v5 = acc_properties_copyProperty(*(const __CFDictionary **)(a1 + 128), v4);
  }
  if (CFEqual(v5, a2))
  {
    EndpointWithUUID = 0;
    if (!v5) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
  if (v5) {
LABEL_6:
  }
    CFRelease(v5);
LABEL_7:
  if (EndpointWithUUID)
  {
    int v7 = *(char **)(a1 + 120);
    if (!v7)
    {
      int v7 = acc_accInfo_create();
      *(void *)(a1 + 120) = v7;
    }
    acc_accInfo_setAccessoryInfo((uint64_t)v7, EndpointWithUUID[8]);
    if (gLogObjects && gNumLogObjects >= 14)
    {
      CFDictionaryRef v8 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      CFDictionaryRef v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = EndpointWithUUID[2];
      int v12 = 138412546;
      uint64_t v13 = v10;
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Update accessory info for connection %@ with endpoint %@", (uint8_t *)&v12, 0x16u);
    }
    return;
  }
LABEL_13:
  if (gLogObjects && gNumLogObjects >= 14)
  {
    uint64_t v9 = *(NSObject **)(gLogObjects + 104);
  }
  else
  {
    uint64_t v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Couldn't find an endpoint to update accessory info with! Try mapAccessoryInfo", (uint8_t *)&v12, 2u);
  }
  acc_connection_mapAccessoryInfo((uint64_t *)a1);
}

uint64_t acc_connection_sendDataOut(uint64_t *a1, uint64_t a2, const __CFData *a3)
{
  if (!a1) {
    return 0;
  }
  pthread_rwlock_rdlock(&_gAccConnectionLock);
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 14;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    int v7 = *(NSObject **)(gLogObjects + 104);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    acc_connection_sendDataOut_cold_2(a1, v7);
  }
  uint64_t v8 = a1[3];
  if (v8)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFData *))(v8 + 16))(v8, *a1, a2, a3);
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 14)
    {
      uint64_t v10 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      uint64_t v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      CFIndex Length = CFDataGetLength(a3);
      uint64_t v13 = *a1;
      int v14 = 134218498;
      CFIndex v15 = Length;
      __int16 v16 = 2112;
      uint64_t v17 = v13;
      __int16 v18 = 2112;
      uint64_t v19 = a2;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "No DataOutHandler!!! - Unable to send %ld bytes of outgoing data for connectionUUID %@ endpointUUID %@", (uint8_t *)&v14, 0x20u);
    }
    uint64_t v9 = 0;
  }
  pthread_rwlock_unlock(&_gAccConnectionLock);
  return v9;
}

uint64_t acc_connection_setPairingStatus(uint64_t a1, int a2)
{
  BOOL v4 = (_DWORD *)(a1 + 112);
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 9;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    BOOL v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    BOOL v6 = *(NSObject **)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "acc_connection_setPairingStatus", v8, 2u);
  }
  acc_nvmInfo_setPairingStatus(v4, a2);
  if (*(unsigned char *)(a1 + 138)) {
    platform_connectionInfo_accessoryConnectionInfoPropertyChanged(*(const void **)a1);
  }
  return 1;
}

uint64_t acc_connection_getPairingStatus(uint64_t a1)
{
  CFDictionaryRef v1 = (unsigned int *)(a1 + 112);
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 9;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    CFDictionaryRef v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    CFDictionaryRef v3 = *(NSObject **)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "acc_connection_getPairingStatus", (uint8_t *)v7, 2u);
  }
  uint64_t PairingStatus = acc_nvmInfo_getPairingStatus(v1);
  if (gLogObjects && gNumLogObjects >= 9)
  {
    BOOL v5 = *(NSObject **)(gLogObjects + 64);
  }
  else
  {
    BOOL v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = PairingStatus;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "acc_connection_getPairingStatus: %d", (uint8_t *)v7, 8u);
  }
  return PairingStatus;
}

BOOL acc_connection_isConnectedThroughAdapter(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    BOOL v2 = (pthread_mutex_t *)(result + 144);
    pthread_mutex_lock((pthread_mutex_t *)(result + 144));
    CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 128), kCFACCProperties_Connection_AdapterVID);
    BOOL v4 = CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 128), kCFACCProperties_Connection_AdapterPID);
    pthread_mutex_unlock(v2);
    if (Value) {
      BOOL v5 = v4 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    return !v5;
  }
  return result;
}

uint64_t acc_connection_getAdapterVID(uint64_t result)
{
  unsigned __int16 valuePtr = 0;
  if (result)
  {
    uint64_t v1 = result;
    BOOL v2 = (pthread_mutex_t *)(result + 144);
    pthread_mutex_lock((pthread_mutex_t *)(result + 144));
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 128), kCFACCProperties_Connection_AdapterVID);
    pthread_mutex_unlock(v2);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr);
      return valuePtr;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t acc_connection_getAdapterPID(uint64_t result)
{
  unsigned __int16 valuePtr = 0;
  if (result)
  {
    uint64_t v1 = result;
    BOOL v2 = (pthread_mutex_t *)(result + 144);
    pthread_mutex_lock((pthread_mutex_t *)(result + 144));
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 128), kCFACCProperties_Connection_AdapterPID);
    pthread_mutex_unlock(v2);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr);
      return valuePtr;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void platform_analytics_connectionWillBePublished(uint64_t *a1)
{
  if (a1 && *a1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    else
    {
      BOOL v4 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *a1;
      *(_DWORD *)buf = 138412290;
      CFStringRef v32 = (const __CFString *)v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#EventLogger] Connection will be published: %@", buf, 0xCu);
    }

    v35[0] = @"connectionUUID";
    BOOL v6 = (void *)*a1;
    if (*a1) {
      BOOL v6 = (void *)CFRetain(v6);
    }
    int v30 = v6;
    uint64_t v7 = NSObjectIfNotNull(v6);
    __int16 v29 = (void *)v7;
    if (v7) {
      CFStringRef v8 = (const __CFString *)v7;
    }
    else {
      CFStringRef v8 = &stru_10021CEF8;
    }
    v36[0] = v8;
    v35[1] = @"connectionType";
    uint64_t v28 = +[NSString stringWithUTF8String:acc_connection_getTypeString((uint64_t)a1)];
    uint64_t v9 = NSObjectIfNotNull(v28);
    uint64_t v10 = (void *)v9;
    if (v9) {
      CFStringRef v11 = (const __CFString *)v9;
    }
    else {
      CFStringRef v11 = &stru_10021CEF8;
    }
    v36[1] = v11;
    v35[2] = @"unlockedSinceBoot";
    int v12 = +[NSNumber numberWithBool:platform_system_unlockedSinceBoot()];
    v36[2] = v12;
    v35[3] = @"deviceIsPowered";
    uint64_t v13 = +[NSNumber numberWithBool:platform_power_getCurrentLimit(*a1) != 0];
    v36[3] = v13;
    v35[4] = @"screenIsLocked";
    int v14 = +[NSNumber numberWithBool:platform_system_isDeviceLocked()];
    v36[4] = v14;
    v35[5] = @"ConnectedThroughAdapter";
    CFIndex v15 = +[NSNumber numberWithBool:acc_connection_isConnectedThroughAdapter((BOOL)a1)];
    v36[5] = v15;
    v35[6] = @"AdapterVID";
    __int16 v16 = +[NSNumber numberWithInt:acc_connection_getAdapterVID((uint64_t)a1)];
    v36[6] = v16;
    v35[7] = @"AdapterPID";
    uint64_t v17 = +[NSNumber numberWithInt:acc_connection_getAdapterPID((uint64_t)a1)];
    v36[7] = v17;
    __int16 v18 = +[NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:8];
    uint64_t v19 = +[NSMutableDictionary dictionaryWithDictionary:v18];

    int v20 = acc_connection_copyProperty((char *)a1, kCFACCProperties_Connection_DigitalID);
    uint64_t v21 = convertNSDataToNSString(v20, @"%02X");

    size_t v22 = v19;
    if (v21) {
      [v19 setObject:v21 forKey:@"lightningDigitalID"];
    }
    uint64_t v23 = acc_connection_copyProperty((char *)a1, kCFACCProperties_Connection_PrimaryPortNumber);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v22 setObject:v23 forKey:@"lightningPrimaryPortNumber"];
    }
    Cableuint64_t Type = platform_power_getCableType(*a1);
    if ((CableType - 1) <= 0xFFFFFFFD)
    {
      CFNullRef v25 = +[NSNumber numberWithInt:CableType];
      [v22 setObject:v25 forKey:@"lightningCableType"];
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      uint64_t v26 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v26 = &_os_log_default;
      id v27 = &_os_log_default;
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      CFStringRef v32 = @"com.apple.accessories.connection.added";
      __int16 v33 = 2112;
      size_t v34 = v22;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "[#EventLogger] CoreAnalytics event: %@\neventDict: %@", buf, 0x16u);
    }

    AnalyticsSendEvent();
  }
}

void platform_analytics_endpointWillBePublished(uint64_t a1)
{
  if (!a1 || !*(void *)a1 || !*(void *)(a1 + 8)) {
    return;
  }
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v6 = *(void **)(a1 + 8);
    CFStringRef v5 = *(const __CFString **)(a1 + 16);
    *(_DWORD *)buf = 138412546;
    CFStringRef v80 = v5;
    __int16 v81 = 2112;
    id v82 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#EventLogger] Endpoint will be published: %@ (connection %@)", buf, 0x16u);
  }

  v77[0] = @"endpointUUID";
  uint64_t v7 = *(void **)(a1 + 16);
  if (v7) {
    uint64_t v7 = (void *)CFRetain(v7);
  }
  uint64_t v74 = v7;
  uint64_t v8 = NSObjectIfNotNull(v7);
  uint64_t v72 = (void *)v8;
  if (v8) {
    CFStringRef v9 = (const __CFString *)v8;
  }
  else {
    CFStringRef v9 = &stru_10021CEF8;
  }
  v78[0] = v9;
  v77[1] = @"connectionUUID";
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10) {
    uint64_t v10 = (void *)CFRetain(v10);
  }
  uint64_t v71 = v10;
  uint64_t v11 = NSObjectIfNotNull(v10);
  uint64_t v69 = (void *)v11;
  if (v11) {
    CFStringRef v12 = (const __CFString *)v11;
  }
  else {
    CFStringRef v12 = &stru_10021CEF8;
  }
  v78[1] = v12;
  v77[2] = @"connectionType";
  long long v66 = +[NSString stringWithUTF8String:acc_connection_getTypeString(*(void *)a1)];
  uint64_t v13 = NSObjectIfNotNull(v66);
  long long v65 = (void *)v13;
  if (v13) {
    CFStringRef v14 = (const __CFString *)v13;
  }
  else {
    CFStringRef v14 = &stru_10021CEF8;
  }
  v78[2] = v14;
  void v77[3] = @"transportType";
  uint64_t v64 = +[NSString stringWithUTF8String:acc_endpoint_getTransportTypeString(a1)];
  uint64_t v15 = NSObjectIfNotNull(v64);
  int v63 = (void *)v15;
  if (v15) {
    CFStringRef v16 = (const __CFString *)v15;
  }
  else {
    CFStringRef v16 = &stru_10021CEF8;
  }
  void v78[3] = v16;
  v77[4] = @"protocol";
  uint64_t v62 = +[NSString stringWithUTF8String:acc_endpoint_getProtocolString(a1)];
  uint64_t v17 = NSObjectIfNotNull(v62);
  __int16 v18 = (void *)v17;
  if (v17) {
    CFStringRef v19 = (const __CFString *)v17;
  }
  else {
    CFStringRef v19 = &stru_10021CEF8;
  }
  v78[4] = v19;
  v77[5] = @"unlockedSinceBoot";
  uint64_t v61 = +[NSNumber numberWithBool:platform_system_unlockedSinceBoot()];
  v78[5] = v61;
  v77[6] = @"deviceIsPowered";
  int v20 = +[NSNumber numberWithBool:platform_power_getCurrentLimit(*(void *)(a1 + 8)) != 0];
  v78[6] = v20;
  v77[7] = @"screenIsLocked";
  uint64_t v21 = +[NSNumber numberWithBool:platform_system_isDeviceLocked()];
  v78[7] = v21;
  v77[8] = @"ConnectedThroughAdapter";
  size_t v22 = +[NSNumber numberWithBool:acc_connection_isConnectedThroughAdapter(*(void *)a1)];
  v78[8] = v22;
  v77[9] = @"AdapterVID";
  uint64_t v23 = +[NSNumber numberWithInt:acc_connection_getAdapterVID(*(void *)a1)];
  v78[9] = v23;
  v77[10] = @"AdapterPID";
  int v24 = +[NSNumber numberWithInt:acc_connection_getAdapterPID(*(void *)a1)];
  v78[10] = v24;
  CFNullRef v25 = +[NSDictionary dictionaryWithObjects:v78 forKeys:v77 count:11];
  uint64_t v26 = +[NSMutableDictionary dictionaryWithDictionary:v25];

  id v27 = acc_connection_copyProperty(*(char **)a1, kCFACCProperties_Connection_PrimaryPortNumber);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [v26 setObject:v27 forKey:@"lightningPrimaryPortNumber"];
  }
  if (acc_endpoint_getTransportType(a1) == 13)
  {
    id v28 = v26;
    __int16 v29 = (void *)acc_endpoint_copyIdentifier(a1);
    if (!v29)
    {
      size_t v34 = 0;
      __int16 v33 = 0;
      CFStringRef v32 = 0;
      goto LABEL_79;
    }
    [v28 setValue:v29 forKey:@"nfcTagId"];
    int v30 = (const void *)kCFACCProperties_Endpoint_NFC_Type;
    os_log_type_t v31 = acc_endpoint_copyProperty((pthread_mutex_t *)a1, kCFACCProperties_Endpoint_NFC_Type);
    CFStringRef v32 = v31;
    if (!v31)
    {
      size_t v34 = 0;
      __int16 v33 = 0;
      goto LABEL_79;
    }
    __int16 v33 = +[NSString stringWithFormat:@"0x%02x", (int)[(pthread_mutex_t *)v31 charValue]];
    if (!v33)
    {
      size_t v34 = 0;
      goto LABEL_79;
    }
    [v28 setValue:v33 forKey:@"nfcAccessoryType"];
    size_t v34 = +[NSMutableArray arrayWithObject:v33];
    if (!v34) {
      goto LABEL_79;
    }
    CFDictionaryRef v35 = acc_manager_copyAllEndpoints();
    if (!v35) {
      goto LABEL_79;
    }
    CFDictionaryRef v36 = v35;
    uint64_t v73 = v33;
    CFIndex Count = CFDictionaryGetCount(v35);
    if (!Count || (uint64_t v38 = Count, (v39 = (const void **)malloc_type_malloc(8 * Count, 0x2004093837F09uLL)) == 0))
    {
LABEL_78:
      CFRelease(v36);
      __int16 v33 = v73;
LABEL_79:

      goto LABEL_80;
    }
    unint64_t v67 = v32;
    uint64_t v68 = v29;
    uint64_t v70 = v27;
    uint64_t v75 = (uint64_t *)v39;
    CFDictionaryGetKeysAndValues(v36, 0, v39);
    if (v38 >= 1)
    {
      uint64_t v40 = v75;
      do
      {
        uint64_t v41 = *v40;
        if (*v40)
        {
          if (acc_endpoint_getTransportType(*v40) == 13
            && !CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(v41 + 16)))
          {
            uint64_t v42 = acc_endpoint_copyProperty((pthread_mutex_t *)v41, v30);
            if (v42)
            {
              CFStringRef v43 = v42;
              uint64_t v44 = +[NSString stringWithFormat:@"0x%02x", (int)[(pthread_mutex_t *)v42 charValue]];
              [v34 addObject:v44];
            }
          }
        }
        ++v40;
        --v38;
      }
      while (v38);
    }
    if ((unint64_t)[v34 count] > 1)
    {
      [v34 sortUsingSelector:"compare:"];
      uint64_t v45 = [v34 componentsJoinedByString:@","];
      [v28 setValue:v45 forKey:@"nfcStackedType"];
    }
    memset(v76, 170, sizeof(v76));
    CFDictionaryRef v46 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", [v34 count]);
    [v28 setValue:v46 forKey:@"nfcAttachedCount"];

    uint64_t v47 = +[NSDate date];
    _getWeekAndMonth(v47, &v76[3], &v76[2]);

    uint64_t v48 = +[ACCUserDefaults sharedDefaults];
    int v49 = [v48 objectForKey:@"NFCAnalyticsDate"];

    _getWeekAndMonth(v49, &v76[1], v76);
    if (v76[3] == v76[1])
    {
      if (v76[2] == v76[0])
      {
LABEL_59:
        __int16 v29 = v68;
        id v27 = v70;
        CFStringRef v32 = v67;
        if (gLogObjects && gNumLogObjects >= 7)
        {
          uint64_t v55 = *(id *)(gLogObjects + 48);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v55 = &_os_log_default;
          id v56 = &_os_log_default;
        }
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          CFStringRef v80 = @"com.apple.accessories.nfc.endpoint.added";
          __int16 v81 = 2112;
          id v82 = v28;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "[#EventLogger] CoreAnalytics event: %@\neventDict: %@", buf, 0x16u);
        }

        AnalyticsSendEvent();
        if ((unint64_t)[v34 count] >= 2)
        {
          if (gLogObjects && gNumLogObjects >= 7)
          {
            uint64_t v57 = *(id *)(gLogObjects + 48);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v57 = &_os_log_default;
            id v58 = &_os_log_default;
          }
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            CFStringRef v80 = @"com.apple.accessories.nfc.stack";
            __int16 v81 = 2112;
            id v82 = v28;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "[#EventLogger] CoreAnalytics event: %@\neventDict: %@", buf, 0x16u);
          }

          AnalyticsSendEvent();
        }
        free(v75);
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v50 = +[NSNumber numberWithBool:1];
      [v28 setValue:v50 forKey:@"nfcAttachedThisWeek"];

      if (v76[2] == v76[0])
      {
LABEL_58:
        uint64_t v52 = +[ACCUserDefaults sharedDefaults];
        uint64_t v53 = +[NSDate date];
        [v52 setObject:v53 forKey:@"NFCAnalyticsDate"];

        uint64_t v54 = +[ACCUserDefaults sharedDefaults];
        [v54 synchronize];

        goto LABEL_59;
      }
    }
    uint64_t v51 = +[NSNumber numberWithBool:1];
    [v28 setValue:v51 forKey:@"nfcAttachedThisMonth"];

    goto LABEL_58;
  }
LABEL_80:
  if (gLogObjects && gNumLogObjects >= 7)
  {
    uint64_t v59 = *(id *)(gLogObjects + 48);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v59 = &_os_log_default;
    id v60 = &_os_log_default;
  }
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    CFStringRef v80 = @"com.apple.accessories.endpoint.added";
    __int16 v81 = 2112;
    id v82 = v26;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "[#EventLogger] CoreAnalytics event: %@\neventDict: %@", buf, 0x16u);
  }

  AnalyticsSendEvent();
}

void platform_analytics_endpointProtocolDidChange(uint64_t *a1)
{
  if (a1 && *a1 && a1[1])
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    else
    {
      BOOL v4 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[1];
      CFStringRef v5 = (const __CFString *)a1[2];
      *(_DWORD *)buf = 138412546;
      CFStringRef v42 = v5;
      __int16 v43 = 2112;
      uint64_t v44 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#EventLogger] Protocol changed for endpoint: %@ (connection %@)", buf, 0x16u);
    }

    v39[0] = @"endpointUUID";
    uint64_t v7 = (void *)a1[2];
    if (v7) {
      uint64_t v7 = (void *)CFRetain(v7);
    }
    uint64_t v38 = v7;
    uint64_t v8 = NSObjectIfNotNull(v7);
    uint64_t v37 = (void *)v8;
    if (v8) {
      CFStringRef v9 = (const __CFString *)v8;
    }
    else {
      CFStringRef v9 = &stru_10021CEF8;
    }
    v40[0] = v9;
    v39[1] = @"connectionUUID";
    uint64_t v10 = (void *)a1[1];
    if (v10) {
      uint64_t v10 = (void *)CFRetain(v10);
    }
    CFDictionaryRef v36 = v10;
    uint64_t v11 = NSObjectIfNotNull(v10);
    CFDictionaryRef v35 = (void *)v11;
    if (v11) {
      CFStringRef v12 = (const __CFString *)v11;
    }
    else {
      CFStringRef v12 = &stru_10021CEF8;
    }
    v40[1] = v12;
    v39[2] = @"connectionType";
    size_t v34 = +[NSString stringWithUTF8String:acc_connection_getTypeString(*a1)];
    uint64_t v13 = NSObjectIfNotNull(v34);
    __int16 v33 = (void *)v13;
    if (v13) {
      CFStringRef v14 = (const __CFString *)v13;
    }
    else {
      CFStringRef v14 = &stru_10021CEF8;
    }
    v40[2] = v14;
    v39[3] = @"transportType";
    CFStringRef v32 = +[NSString stringWithUTF8String:acc_endpoint_getTransportTypeString((uint64_t)a1)];
    uint64_t v15 = NSObjectIfNotNull(v32);
    CFStringRef v16 = (void *)v15;
    if (v15) {
      CFStringRef v17 = (const __CFString *)v15;
    }
    else {
      CFStringRef v17 = &stru_10021CEF8;
    }
    v40[3] = v17;
    v39[4] = @"protocol";
    os_log_type_t v31 = +[NSString stringWithUTF8String:acc_endpoint_getProtocolString((uint64_t)a1)];
    uint64_t v18 = NSObjectIfNotNull(v31);
    CFStringRef v19 = (void *)v18;
    if (v18) {
      CFStringRef v20 = (const __CFString *)v18;
    }
    else {
      CFStringRef v20 = &stru_10021CEF8;
    }
    v40[4] = v20;
    v39[5] = @"unlockedSinceBoot";
    uint64_t v21 = +[NSNumber numberWithBool:platform_system_unlockedSinceBoot()];
    v40[5] = v21;
    v39[6] = @"deviceIsPowered";
    size_t v22 = +[NSNumber numberWithBool:platform_power_getCurrentLimit(a1[1]) != 0];
    v40[6] = v22;
    v39[7] = @"ConnectedThroughAdapter";
    uint64_t v23 = +[NSNumber numberWithBool:acc_connection_isConnectedThroughAdapter(*a1)];
    v40[7] = v23;
    v39[8] = @"AdapterVID";
    int v24 = +[NSNumber numberWithInt:acc_connection_getAdapterVID(*a1)];
    v40[8] = v24;
    v39[9] = @"AdapterPID";
    CFNullRef v25 = +[NSNumber numberWithInt:acc_connection_getAdapterPID(*a1)];
    v40[9] = v25;
    uint64_t v26 = +[NSDictionary dictionaryWithObjects:v40 forKeys:v39 count:10];
    id v27 = +[NSMutableDictionary dictionaryWithDictionary:v26];

    id v28 = acc_connection_copyProperty((char *)*a1, kCFACCProperties_Connection_PrimaryPortNumber);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v27 setObject:v28 forKey:@"lightningPrimaryPortNumber"];
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      __int16 v29 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v29 = &_os_log_default;
      id v30 = &_os_log_default;
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      CFStringRef v42 = @"com.apple.accessories.endpoint.protocolChanged";
      __int16 v43 = 2112;
      uint64_t v44 = (uint64_t)v27;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[#EventLogger] CoreAnalytics event: %@\neventDict: %@", buf, 0x16u);
    }

    AnalyticsSendEvent();
  }
}

void platform_analytics_endpointAccessoryInfoDidChange(uint64_t *a1, uint64_t a2, void *a3)
{
  if (a1 && *a1 && a1[1])
  {
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 7;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v8 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    else
    {
      uint64_t v8 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[1];
      CFStringRef v9 = (const __CFString *)a1[2];
      *(_DWORD *)buf = 138412546;
      CFStringRef v145 = v9;
      __int16 v146 = 2112;
      uint64_t v147 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[#EventLogger] Accessory info changed for endpoint: %@ (connection %@)", buf, 0x16u);
    }

    if (gLogObjects && gNumLogObjects >= 7)
    {
      uint64_t v11 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v11 = &_os_log_default;
      id v12 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      platform_analytics_endpointAccessoryInfoDidChange_cold_4(a2, (uint64_t)a3, v11);
    }

    unsigned int v13 = [a3 isEqualToDictionary:a2];
    if (a3 == (void *)a2) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v13;
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      uint64_t v15 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v15 = &_os_log_default;
      id v16 = &_os_log_default;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
      platform_analytics_endpointAccessoryInfoDidChange_cold_2(v14, v15, v17, v18, v19, v20, v21, v22);
    }

    if ((v14 & 1) == 0)
    {
      uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo((uint64_t)a1);
      int v24 = acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);
      if (v24)
      {
        v142[0] = @"endpointUUID";
        CFNullRef v25 = (const void *)a1[2];
        uint64_t v133 = a3;
        if (v25) {
          uint64_t v26 = (void *)CFRetain(v25);
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v27 = NSObjectIfNotNull(v26);
        id v28 = (void *)v27;
        if (v27) {
          CFStringRef v29 = (const __CFString *)v27;
        }
        else {
          CFStringRef v29 = &stru_10021CEF8;
        }
        v143[0] = v29;
        v142[1] = @"connectionUUID";
        id v30 = (void *)a1[1];
        uint64_t v127 = v28;
        uint64_t v129 = v26;
        if (v30) {
          id v30 = (void *)CFRetain(v30);
        }
        CFStringRef v125 = v30;
        uint64_t v31 = NSObjectIfNotNull(v30);
        v123 = (void *)v31;
        if (v31) {
          CFStringRef v32 = (const __CFString *)v31;
        }
        else {
          CFStringRef v32 = &stru_10021CEF8;
        }
        v143[1] = v32;
        v142[2] = @"connectionType";
        BOOL v121 = +[NSString stringWithUTF8String:acc_connection_getTypeString(*a1)];
        uint64_t v33 = NSObjectIfNotNull(v121);
        id v119 = (void *)v33;
        if (v33) {
          CFStringRef v34 = (const __CFString *)v33;
        }
        else {
          CFStringRef v34 = &stru_10021CEF8;
        }
        v143[2] = v34;
        v142[3] = @"transportType";
        uint64_t v117 = +[NSString stringWithUTF8String:acc_endpoint_getTransportTypeString((uint64_t)a1)];
        uint64_t v35 = NSObjectIfNotNull(v117);
        id v115 = (void *)v35;
        if (v35) {
          CFStringRef v36 = (const __CFString *)v35;
        }
        else {
          CFStringRef v36 = &stru_10021CEF8;
        }
        v143[3] = v36;
        v142[4] = @"protocol";
        CFStringRef v113 = +[NSString stringWithUTF8String:acc_endpoint_getProtocolString((uint64_t)a1)];
        uint64_t v37 = NSObjectIfNotNull(v113);
        id v112 = (void *)v37;
        if (v37) {
          CFStringRef v38 = (const __CFString *)v37;
        }
        else {
          CFStringRef v38 = &stru_10021CEF8;
        }
        v143[4] = v38;
        v142[5] = @"accessoryName";
        __int16 v111 = [(int64x2_t *)v24 objectForKeyedSubscript:kACCInfo_Name];
        uint64_t v39 = NSObjectIfNotNull(v111);
        uint64_t v110 = (void *)v39;
        if (v39) {
          CFStringRef v40 = (const __CFString *)v39;
        }
        else {
          CFStringRef v40 = &stru_10021CEF8;
        }
        v143[5] = v40;
        v142[6] = @"accessoryManufacturer";
        CFDictionaryRef v109 = [(int64x2_t *)v24 objectForKeyedSubscript:kACCInfo_Manufacturer];
        uint64_t v41 = NSObjectIfNotNull(v109);
        uint64_t v108 = (void *)v41;
        if (v41) {
          CFStringRef v42 = (const __CFString *)v41;
        }
        else {
          CFStringRef v42 = &stru_10021CEF8;
        }
        v143[6] = v42;
        v142[7] = @"accessoryModel";
        unsigned int v107 = [(int64x2_t *)v24 objectForKeyedSubscript:kACCInfo_Model];
        uint64_t v43 = NSObjectIfNotNull(v107);
        char v106 = (void *)v43;
        if (v43) {
          CFStringRef v44 = (const __CFString *)v43;
        }
        else {
          CFStringRef v44 = &stru_10021CEF8;
        }
        v143[7] = v44;
        v142[8] = @"accessoryHardwareVersion";
        id v105 = [(int64x2_t *)v24 objectForKeyedSubscript:kACCInfo_HardwareVersion];
        uint64_t v45 = NSObjectIfNotNull(v105);
        uint64_t v104 = (void *)v45;
        if (v45) {
          CFStringRef v46 = (const __CFString *)v45;
        }
        else {
          CFStringRef v46 = &stru_10021CEF8;
        }
        v143[8] = v46;
        v142[9] = @"accessoryFirmwareVersionActive";
        uint64_t v103 = [(int64x2_t *)v24 objectForKeyedSubscript:kACCInfo_FirmwareVersionActive];
        uint64_t v47 = NSObjectIfNotNull(v103);
        id v102 = (void *)v47;
        if (v47) {
          CFStringRef v48 = (const __CFString *)v47;
        }
        else {
          CFStringRef v48 = &stru_10021CEF8;
        }
        v143[9] = v48;
        v142[10] = @"accessoryFirmwareVersionPending";
        __int16 v101 = [(int64x2_t *)v24 objectForKeyedSubscript:kACCInfo_FirmwareVersionPending];
        uint64_t v49 = NSObjectIfNotNull(v101);
        int v100 = (void *)v49;
        if (v49) {
          CFStringRef v50 = (const __CFString *)v49;
        }
        else {
          CFStringRef v50 = &stru_10021CEF8;
        }
        v143[10] = v50;
        v142[11] = @"accessoryVID";
        char v99 = [(int64x2_t *)v24 objectForKeyedSubscript:kACCInfo_VendorID];
        uint64_t v51 = NSObjectIfNotNull(v99);
        long long v98 = (void *)v51;
        if (v51) {
          uint64_t v52 = (_UNKNOWN **)v51;
        }
        else {
          uint64_t v52 = &off_100223398;
        }
        v143[11] = v52;
        v142[12] = @"accessoryPID";
        uint64_t v131 = v24;
        long long v97 = [(int64x2_t *)v24 objectForKeyedSubscript:kACCInfo_ProductID];
        uint64_t v53 = NSObjectIfNotNull(v97);
        uint64_t v54 = (void *)v53;
        if (v53) {
          uint64_t v55 = (_UNKNOWN **)v53;
        }
        else {
          uint64_t v55 = &off_100223398;
        }
        v143[12] = v55;
        v142[13] = @"unlockedSinceBoot";
        long long v96 = +[NSNumber numberWithBool:platform_system_unlockedSinceBoot()];
        v143[13] = v96;
        v142[14] = @"deviceIsPowered";
        id v56 = +[NSNumber numberWithBool:platform_power_getCurrentLimit(a1[1]) != 0];
        v143[14] = v56;
        v142[15] = @"screenIsLocked";
        uint64_t v57 = +[NSNumber numberWithBool:platform_system_isDeviceLocked()];
        v143[15] = v57;
        v142[16] = @"authState";
        id v58 = +[NSNumber numberWithBool:acc_authInfo_isAuthenticated(*a1 + 48, 6)];
        v143[16] = v58;
        v142[17] = @"authVersion";
        uint64_t v59 = +[NSNumber numberWithInt:*(unsigned int *)(*a1 + 68)];
        v143[17] = v59;
        v142[18] = @"ConnectedThroughAdapter";
        id v60 = +[NSNumber numberWithBool:acc_connection_isConnectedThroughAdapter(*a1)];
        v143[18] = v60;
        v142[19] = @"AdapterVID";
        uint64_t v61 = +[NSNumber numberWithInt:acc_connection_getAdapterVID(*a1)];
        v143[19] = v61;
        v142[20] = @"AdapterPID";
        uint64_t v62 = +[NSNumber numberWithInt:acc_connection_getAdapterPID(*a1)];
        v143[20] = v62;
        int v63 = +[NSDictionary dictionaryWithObjects:v143 forKeys:v142 count:21];
        uint64_t v135 = +[NSMutableDictionary dictionaryWithDictionary:v63];

        uint64_t v64 = acc_connection_copyProperty((char *)*a1, kCFACCProperties_Connection_PrimaryPortNumber);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [v135 setObject:v64 forKey:@"lightningPrimaryPortNumber"];
        }
        int v24 = v131;
        a3 = v133;
        if (gLogObjects && gNumLogObjects >= 7)
        {
          long long v65 = *(id *)(gLogObjects + 48);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          long long v65 = &_os_log_default;
          id v66 = &_os_log_default;
        }
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          CFStringRef v145 = @"com.apple.accessories.endpoint.accessoryInfoChanged";
          __int16 v146 = 2112;
          uint64_t v147 = (uint64_t)v135;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "[#EventLogger] CoreAnalytics event: %@\neventDict: %@", buf, 0x16u);
        }

        AnalyticsSendEvent();
      }

      id v67 = a3;
      uint64_t v68 = v67;
      if (v67)
      {
        v141[0] = &__kCFBooleanTrue;
        v140[0] = IAPAppAccessoryConnectedKey;
        v140[1] = IAPAppAccessoryNameKey;
        uint64_t v69 = kACCInfo_Name;
        uint64_t v70 = [v67 objectForKeyedSubscript:kACCInfo_Name];
        char v134 = isNSObjectNull(v70);
        if (v134)
        {
          CFStringRef v71 = &stru_10021CEF8;
        }
        else
        {
          CFStringRef v71 = [v68 objectForKeyedSubscript:v69];
        }
        id v120 = (__CFString *)v71;
        v141[1] = v71;
        v140[2] = IAPAppAccessoryManufacturerKey;
        uint64_t v72 = kACCInfo_Manufacturer;
        uint64_t v73 = [v68 objectForKeyedSubscript:kACCInfo_Manufacturer];
        char v130 = isNSObjectNull(v73);
        if (v130)
        {
          CFStringRef v74 = &stru_10021CEF8;
        }
        else
        {
          CFStringRef v74 = [v68 objectForKeyedSubscript:v72];
        }
        id v118 = (__CFString *)v74;
        v141[2] = v74;
        v140[3] = IAPAppAccessoryModelNumberKey;
        uint64_t v75 = kACCInfo_Model;
        uint64_t v76 = [v68 objectForKeyedSubscript:kACCInfo_Model];
        char v126 = isNSObjectNull(v76);
        if (v126)
        {
          CFStringRef v77 = &stru_10021CEF8;
        }
        else
        {
          CFStringRef v77 = [v68 objectForKeyedSubscript:v75];
        }
        id v116 = (__CFString *)v77;
        v141[3] = v77;
        v140[4] = IAPAppAccessorySerialNumberKey;
        uint64_t v78 = kACCInfo_SerialNumber;
        uint64_t v79 = [v68 objectForKeyedSubscript:kACCInfo_SerialNumber];
        uint64_t v128 = v76;
        char v122 = isNSObjectNull(v79);
        if (v122)
        {
          CFStringRef v80 = &stru_10021CEF8;
        }
        else
        {
          CFStringRef v80 = [v68 objectForKeyedSubscript:v78];
        }
        uint64_t v114 = (__CFString *)v80;
        v141[4] = v80;
        v140[5] = IAPAppAccessoryFirmwareRevisionKey;
        uint64_t v81 = kACCInfo_FirmwareVersionActive;
        id v82 = [v68 objectForKeyedSubscript:kACCInfo_FirmwareVersionActive];
        char v83 = isNSObjectNull(v82);
        id v132 = v73;
        BOOL v124 = v79;
        if (v83)
        {
          uint64_t v84 = &stru_10021CEF8;
        }
        else
        {
          uint64_t v84 = [v68 objectForKeyedSubscript:v81];
        }
        v141[5] = v84;
        v140[6] = IAPAppAccessoryHardwareRevisionKey;
        uint64_t v85 = kACCInfo_HardwareVersion;
        uint64_t v86 = [v68 objectForKeyedSubscript:kACCInfo_HardwareVersion];
        char v87 = isNSObjectNull(v86);
        uint64_t v88 = v70;
        if (v87)
        {
          uint64_t v89 = &stru_10021CEF8;
        }
        else
        {
          uint64_t v89 = [v68 objectForKeyedSubscript:v85];
        }
        v141[6] = v89;
        v140[7] = IAPAppAccessoryConnectionTimeInSecKey;
        uint64_t v136 = a1;
        uint64_t v90 = +[NSNumber numberWithLong:acc_endpoint_getCreationTimestampMS((uint64_t)a1) / 0x3E8uLL];
        v141[7] = v90;
        char v91 = +[NSDictionary dictionaryWithObjects:v141 forKeys:v140 count:8];

        if ((v87 & 1) == 0) {
        if ((v83 & 1) == 0)
        }

        if ((v122 & 1) == 0) {
        if ((v126 & 1) == 0)
        }

        if ((v130 & 1) == 0) {
        if ((v134 & 1) == 0)
        }

        id v92 = +[NSString stringWithString:v136[2]];
        uint64_t v93 = _powerLogQueue();
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = __platform_analytics_endpointAccessoryInfoDidChange_block_invoke;
        block[3] = &unk_100215968;
        id v138 = v92;
        id v139 = v91;
        id v94 = v91;
        id v95 = v92;
        dispatch_async(v93, block);
      }
    }
  }
}

id _powerLogQueue()
{
  if (_powerLogQueue_onceToken != -1) {
    dispatch_once(&_powerLogQueue_onceToken, &__block_literal_global_12);
  }
  id v0 = (void *)_powerLogQueue_powerLogQueue;

  return v0;
}

uint64_t __platform_analytics_endpointAccessoryInfoDidChange_block_invoke(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v15 = 138412290;
    uint64_t v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[#EventLogger] [#powerlog] Logging accessory connection for endpoint %@ to powerlog...", (uint8_t *)&v15, 0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 7)
  {
    BOOL v6 = *(id *)(gLogObjects + 48);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    __platform_analytics_endpointAccessoryInfoDidChange_block_invoke_cold_1(a1, v6, v8, v9, v10, v11, v12, v13);
  }

  return PLLogRegisteredEvent();
}

void platform_analytics_endpointWillBeDestroyed(uint64_t *a1)
{
  if (a1 && *a1 && a1[2] && a1[1])
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      BOOL v2 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v2 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = a1[1];
      CFStringRef v4 = (const __CFString *)a1[2];
      *(_DWORD *)buf = 138412546;
      CFStringRef v128 = v4;
      __int16 v129 = 2112;
      uint64_t v130 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[#EventLogger] Endpoint will be destroyed: %@ (connection %@)", buf, 0x16u);
    }

    uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo((uint64_t)a1);
    id v7 = acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);
    v125[0] = @"endpointUUID";
    uint64_t v8 = (void *)a1[2];
    if (v8) {
      uint64_t v8 = (void *)CFRetain(v8);
    }
    uint64_t v117 = v8;
    uint64_t v9 = NSObjectIfNotNull(v8);
    id v115 = (void *)v9;
    if (v9) {
      CFStringRef v10 = (const __CFString *)v9;
    }
    else {
      CFStringRef v10 = &stru_10021CEF8;
    }
    v126[0] = v10;
    v125[1] = @"connectionUUID";
    uint64_t v11 = (void *)a1[1];
    if (v11) {
      uint64_t v11 = (void *)CFRetain(v11);
    }
    CFStringRef v113 = v11;
    uint64_t v12 = NSObjectIfNotNull(v11);
    __int16 v111 = (void *)v12;
    if (v12) {
      CFStringRef v13 = (const __CFString *)v12;
    }
    else {
      CFStringRef v13 = &stru_10021CEF8;
    }
    v126[1] = v13;
    v125[2] = @"connectionType";
    CFDictionaryRef v109 = +[NSString stringWithUTF8String:acc_connection_getTypeString(*a1)];
    uint64_t v14 = NSObjectIfNotNull(v109);
    unsigned int v107 = (void *)v14;
    if (v14) {
      CFStringRef v15 = (const __CFString *)v14;
    }
    else {
      CFStringRef v15 = &stru_10021CEF8;
    }
    v126[2] = v15;
    v125[3] = @"transportType";
    id v105 = +[NSString stringWithUTF8String:acc_endpoint_getTransportTypeString((uint64_t)a1)];
    uint64_t v16 = NSObjectIfNotNull(v105);
    uint64_t v103 = (void *)v16;
    if (v16) {
      CFStringRef v17 = (const __CFString *)v16;
    }
    else {
      CFStringRef v17 = &stru_10021CEF8;
    }
    v126[3] = v17;
    v125[4] = @"protocol";
    int v100 = +[NSString stringWithUTF8String:acc_endpoint_getProtocolString((uint64_t)a1)];
    uint64_t v18 = NSObjectIfNotNull(v100);
    long long v98 = (void *)v18;
    if (v18) {
      CFStringRef v19 = (const __CFString *)v18;
    }
    else {
      CFStringRef v19 = &stru_10021CEF8;
    }
    v126[4] = v19;
    v125[5] = @"accessoryName";
    uint64_t v77 = kACCInfo_Name;
    long long v96 = -[int64x2_t objectForKeyedSubscript:](v7, "objectForKeyedSubscript:");
    uint64_t v20 = NSObjectIfNotNull(v96);
    id v94 = (void *)v20;
    if (v20) {
      CFStringRef v21 = (const __CFString *)v20;
    }
    else {
      CFStringRef v21 = &stru_10021CEF8;
    }
    v126[5] = v21;
    v125[6] = @"accessoryManufacturer";
    uint64_t v73 = kACCInfo_Manufacturer;
    uint64_t v93 = -[int64x2_t objectForKeyedSubscript:](v7, "objectForKeyedSubscript:");
    uint64_t v22 = NSObjectIfNotNull(v93);
    id v92 = (void *)v22;
    if (v22) {
      CFStringRef v23 = (const __CFString *)v22;
    }
    else {
      CFStringRef v23 = &stru_10021CEF8;
    }
    v126[6] = v23;
    v125[7] = @"accessoryModel";
    uint64_t v74 = kACCInfo_Model;
    char v91 = -[int64x2_t objectForKeyedSubscript:](v7, "objectForKeyedSubscript:");
    uint64_t v24 = NSObjectIfNotNull(v91);
    uint64_t v90 = (void *)v24;
    if (v24) {
      CFStringRef v25 = (const __CFString *)v24;
    }
    else {
      CFStringRef v25 = &stru_10021CEF8;
    }
    v126[7] = v25;
    v125[8] = @"accessoryHardwareVersion";
    uint64_t v76 = kACCInfo_HardwareVersion;
    uint64_t v89 = -[int64x2_t objectForKeyedSubscript:](v7, "objectForKeyedSubscript:");
    uint64_t v26 = NSObjectIfNotNull(v89);
    uint64_t v88 = (void *)v26;
    if (v26) {
      CFStringRef v27 = (const __CFString *)v26;
    }
    else {
      CFStringRef v27 = &stru_10021CEF8;
    }
    v126[8] = v27;
    v125[9] = @"accessoryFirmwareVersionActive";
    uint64_t v75 = kACCInfo_FirmwareVersionActive;
    char v87 = -[int64x2_t objectForKeyedSubscript:](v7, "objectForKeyedSubscript:");
    uint64_t v28 = NSObjectIfNotNull(v87);
    uint64_t v86 = (void *)v28;
    if (v28) {
      CFStringRef v29 = (const __CFString *)v28;
    }
    else {
      CFStringRef v29 = &stru_10021CEF8;
    }
    v126[9] = v29;
    v125[10] = @"accessoryFirmwareVersionPending";
    uint64_t v85 = [(int64x2_t *)v7 objectForKeyedSubscript:kACCInfo_FirmwareVersionPending];
    uint64_t v30 = NSObjectIfNotNull(v85);
    uint64_t v84 = (void *)v30;
    if (v30) {
      CFStringRef v31 = (const __CFString *)v30;
    }
    else {
      CFStringRef v31 = &stru_10021CEF8;
    }
    v126[10] = v31;
    v125[11] = @"accessoryVID";
    char v83 = [(int64x2_t *)v7 objectForKeyedSubscript:kACCInfo_VendorID];
    uint64_t v32 = NSObjectIfNotNull(v83);
    id v82 = (void *)v32;
    if (v32) {
      uint64_t v33 = (_UNKNOWN **)v32;
    }
    else {
      uint64_t v33 = &off_100223398;
    }
    v126[11] = v33;
    v125[12] = @"accessoryPID";
    id v119 = v7;
    uint64_t v81 = [(int64x2_t *)v7 objectForKeyedSubscript:kACCInfo_ProductID];
    uint64_t v34 = NSObjectIfNotNull(v81);
    CFStringRef v80 = (void *)v34;
    if (v34) {
      uint64_t v35 = (_UNKNOWN **)v34;
    }
    else {
      uint64_t v35 = &off_100223398;
    }
    v126[12] = v35;
    v125[13] = @"unlockedSinceBoot";
    uint64_t v79 = +[NSNumber numberWithBool:platform_system_unlockedSinceBoot()];
    v126[13] = v79;
    v125[14] = @"deviceIsPowered";
    uint64_t v78 = +[NSNumber numberWithBool:platform_power_getCurrentLimit(a1[1]) != 0];
    v126[14] = v78;
    v125[15] = @"duration";
    CFStringRef v36 = +[NSNumber numberWithInt:((int)acc_endpoint_getDurationMS((unint64_t)a1) / 1000)];
    v126[15] = v36;
    v125[16] = @"screenIsLocked";
    uint64_t v37 = +[NSNumber numberWithBool:platform_system_isDeviceLocked()];
    v126[16] = v37;
    v125[17] = @"authState";
    CFStringRef v38 = +[NSNumber numberWithBool:acc_authInfo_isAuthenticated(*a1 + 48, 6)];
    v126[17] = v38;
    v125[18] = @"authVersion";
    uint64_t v39 = +[NSNumber numberWithInt:*(unsigned int *)(*a1 + 68)];
    v126[18] = v39;
    v125[19] = @"ConnectedThroughAdapter";
    CFStringRef v40 = +[NSNumber numberWithBool:acc_connection_isConnectedThroughAdapter(*a1)];
    v126[19] = v40;
    v125[20] = @"AdapterVID";
    uint64_t v41 = +[NSNumber numberWithInt:acc_connection_getAdapterVID(*a1)];
    v126[20] = v41;
    v125[21] = @"AdapterPID";
    CFStringRef v42 = +[NSNumber numberWithInt:acc_connection_getAdapterPID(*a1)];
    v126[21] = v42;
    uint64_t v43 = +[NSDictionary dictionaryWithObjects:v126 forKeys:v125 count:22];
    CFStringRef v44 = +[NSMutableDictionary dictionaryWithDictionary:v43];

    uint64_t v45 = acc_connection_copyProperty((char *)*a1, kCFACCProperties_Connection_PrimaryPortNumber);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v44 setObject:v45 forKey:@"lightningPrimaryPortNumber"];
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      CFStringRef v46 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v46 = &_os_log_default;
      id v47 = &_os_log_default;
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      CFStringRef v128 = @"com.apple.accessories.endpoint.removed";
      __int16 v129 = 2112;
      uint64_t v130 = (uint64_t)v44;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "[#EventLogger] CoreAnalytics event: %@\neventDict: %@", buf, 0x16u);
    }

    AnalyticsSendEvent();
    uint64_t v48 = acc_endpoint_getAccessoryInfo((uint64_t)a1);
    uint64_t v49 = acc_accInfo_copyAccessoryInfoDictionary(v48);
    CFStringRef v50 = v49;
    if (v49)
    {
      v124[0] = &__kCFBooleanFalse;
      v123[0] = IAPAppAccessoryConnectedKey;
      v123[1] = IAPAppAccessoryNameKey;
      uint64_t v51 = [(int64x2_t *)v49 objectForKeyedSubscript:v77];
      char v118 = isNSObjectNull(v51);
      if (v118)
      {
        CFStringRef v52 = &stru_10021CEF8;
      }
      else
      {
        CFStringRef v52 = [(int64x2_t *)v50 objectForKeyedSubscript:v77];
      }
      id v102 = (__CFString *)v52;
      v124[1] = v52;
      v123[2] = IAPAppAccessoryManufacturerKey;
      uint64_t v53 = [(int64x2_t *)v50 objectForKeyedSubscript:v73];
      char v114 = isNSObjectNull(v53);
      if (v114)
      {
        CFStringRef v54 = &stru_10021CEF8;
      }
      else
      {
        CFStringRef v54 = [(int64x2_t *)v50 objectForKeyedSubscript:v73];
      }
      __int16 v101 = (__CFString *)v54;
      v124[2] = v54;
      v123[3] = IAPAppAccessoryModelNumberKey;
      uint64_t v55 = [(int64x2_t *)v50 objectForKeyedSubscript:v74];
      char v110 = isNSObjectNull(v55);
      if (v110)
      {
        CFStringRef v56 = &stru_10021CEF8;
      }
      else
      {
        CFStringRef v56 = [(int64x2_t *)v50 objectForKeyedSubscript:v74];
      }
      char v99 = (__CFString *)v56;
      v124[3] = v56;
      v123[4] = IAPAppAccessorySerialNumberKey;
      uint64_t v57 = kACCInfo_SerialNumber;
      id v58 = [(int64x2_t *)v50 objectForKeyedSubscript:kACCInfo_SerialNumber];
      id v116 = v53;
      char v106 = isNSObjectNull(v58);
      if (v106)
      {
        CFStringRef v59 = &stru_10021CEF8;
      }
      else
      {
        CFStringRef v59 = [(int64x2_t *)v50 objectForKeyedSubscript:v57];
      }
      long long v97 = (__CFString *)v59;
      v124[4] = v59;
      v123[5] = IAPAppAccessoryFirmwareRevisionKey;
      id v60 = [(int64x2_t *)v50 objectForKeyedSubscript:v75];
      char v61 = isNSObjectNull(v60);
      uint64_t v104 = v60;
      if (v61)
      {
        CFStringRef v62 = &stru_10021CEF8;
      }
      else
      {
        CFStringRef v62 = [(int64x2_t *)v50 objectForKeyedSubscript:v75];
      }
      id v95 = (__CFString *)v62;
      v124[5] = v62;
      v123[6] = IAPAppAccessoryHardwareRevisionKey;
      int v63 = [(int64x2_t *)v50 objectForKeyedSubscript:v76];
      char v64 = isNSObjectNull(v63);
      id v112 = v55;
      uint64_t v108 = v58;
      if (v64)
      {
        long long v65 = &stru_10021CEF8;
      }
      else
      {
        long long v65 = [(int64x2_t *)v50 objectForKeyedSubscript:v76];
      }
      v124[6] = v65;
      v123[7] = IAPAppAccessoryConnectionTimeInSecKey;
      id v66 = +[NSNumber numberWithLong:acc_endpoint_getCreationTimestampMS((uint64_t)a1) / 0x3E8uLL];
      v124[7] = v66;
      v123[8] = IAPAppAccessoryUsageTimeInSecsKey;
      id v67 = +[NSNumber numberWithLong:acc_endpoint_getDurationMS((unint64_t)a1) / 0x3E8];
      v124[8] = v67;
      uint64_t v68 = +[NSDictionary dictionaryWithObjects:v124 forKeys:v123 count:9];

      if ((v64 & 1) == 0) {
      if ((v61 & 1) == 0)
      }

      if ((v106 & 1) == 0) {
      if ((v110 & 1) == 0)
      }

      if ((v114 & 1) == 0) {
      if ((v118 & 1) == 0)
      }

      uint64_t v69 = +[NSString stringWithString:a1[2]];
      uint64_t v70 = _powerLogQueue();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = __platform_analytics_endpointWillBeDestroyed_block_invoke;
      block[3] = &unk_100215968;
      id v121 = v69;
      id v122 = v68;
      id v71 = v68;
      id v72 = v69;
      dispatch_async(v70, block);
    }
  }
}

uint64_t __platform_analytics_endpointWillBeDestroyed_block_invoke(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFStringRef v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    CFStringRef v4 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v15 = 138412290;
    uint64_t v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[#EventLogger] [#powerlog] Logging accessory disconnection for endpoint %@ to powerlog...", (uint8_t *)&v15, 0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 7)
  {
    BOOL v6 = *(id *)(gLogObjects + 48);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    __platform_analytics_endpointAccessoryInfoDidChange_block_invoke_cold_1(a1, v6, v8, v9, v10, v11, v12, v13);
  }

  return PLLogRegisteredEvent();
}

void platform_analytics_connectionWillBeDestroyed(unint64_t a1)
{
  if (a1 && *(void *)a1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v4 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    else
    {
      CFStringRef v4 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)a1;
      *(_DWORD *)buf = 138412290;
      CFStringRef v66 = (const __CFString *)v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#EventLogger] Connection will be destroyed: %@", buf, 0xCu);
    }

    BOOL v6 = acc_accInfo_copyAccessoryInfoDictionary(*(void *)(a1 + 120));
    v69[0] = @"connectionUUID";
    id v7 = *(void **)a1;
    if (*(void *)a1) {
      id v7 = (void *)CFRetain(v7);
    }
    int v63 = v7;
    uint64_t v8 = NSObjectIfNotNull(v7);
    CFStringRef v62 = (void *)v8;
    if (v8) {
      CFStringRef v9 = (const __CFString *)v8;
    }
    else {
      CFStringRef v9 = &stru_10021CEF8;
    }
    v70[0] = v9;
    v69[1] = @"connectionType";
    char v61 = +[NSString stringWithUTF8String:acc_connection_getTypeString(a1)];
    uint64_t v10 = NSObjectIfNotNull(v61);
    id v60 = (void *)v10;
    if (v10) {
      CFStringRef v11 = (const __CFString *)v10;
    }
    else {
      CFStringRef v11 = &stru_10021CEF8;
    }
    v70[1] = v11;
    v69[2] = @"accessoryName";
    CFStringRef v59 = [(int64x2_t *)v6 objectForKeyedSubscript:kACCInfo_Name];
    uint64_t v12 = NSObjectIfNotNull(v59);
    id v58 = (void *)v12;
    if (v12) {
      CFStringRef v13 = (const __CFString *)v12;
    }
    else {
      CFStringRef v13 = &stru_10021CEF8;
    }
    v70[2] = v13;
    v69[3] = @"accessoryManufacturer";
    uint64_t v57 = [(int64x2_t *)v6 objectForKeyedSubscript:kACCInfo_Manufacturer];
    uint64_t v14 = NSObjectIfNotNull(v57);
    CFStringRef v56 = (void *)v14;
    if (v14) {
      CFStringRef v15 = (const __CFString *)v14;
    }
    else {
      CFStringRef v15 = &stru_10021CEF8;
    }
    v70[3] = v15;
    v69[4] = @"accessoryModel";
    uint64_t v55 = [(int64x2_t *)v6 objectForKeyedSubscript:kACCInfo_Model];
    uint64_t v16 = NSObjectIfNotNull(v55);
    CFStringRef v54 = (void *)v16;
    if (v16) {
      CFStringRef v17 = (const __CFString *)v16;
    }
    else {
      CFStringRef v17 = &stru_10021CEF8;
    }
    v70[4] = v17;
    v69[5] = @"accessoryHardwareVersion";
    uint64_t v53 = [(int64x2_t *)v6 objectForKeyedSubscript:kACCInfo_HardwareVersion];
    uint64_t v18 = NSObjectIfNotNull(v53);
    CFStringRef v52 = (void *)v18;
    if (v18) {
      CFStringRef v19 = (const __CFString *)v18;
    }
    else {
      CFStringRef v19 = &stru_10021CEF8;
    }
    v70[5] = v19;
    v69[6] = @"accessoryFirmwareVersionActive";
    uint64_t v51 = [(int64x2_t *)v6 objectForKeyedSubscript:kACCInfo_FirmwareVersionActive];
    uint64_t v20 = NSObjectIfNotNull(v51);
    CFStringRef v50 = (void *)v20;
    if (v20) {
      CFStringRef v21 = (const __CFString *)v20;
    }
    else {
      CFStringRef v21 = &stru_10021CEF8;
    }
    v70[6] = v21;
    v69[7] = @"accessoryFirmwareVersionPending";
    uint64_t v49 = [(int64x2_t *)v6 objectForKeyedSubscript:kACCInfo_FirmwareVersionPending];
    uint64_t v22 = NSObjectIfNotNull(v49);
    uint64_t v48 = (void *)v22;
    if (v22) {
      CFStringRef v23 = (const __CFString *)v22;
    }
    else {
      CFStringRef v23 = &stru_10021CEF8;
    }
    v70[7] = v23;
    v69[8] = @"accessoryVID";
    id v47 = [(int64x2_t *)v6 objectForKeyedSubscript:kACCInfo_VendorID];
    uint64_t v24 = NSObjectIfNotNull(v47);
    CFStringRef v46 = (void *)v24;
    if (v24) {
      CFStringRef v25 = (_UNKNOWN **)v24;
    }
    else {
      CFStringRef v25 = &off_100223398;
    }
    v70[8] = v25;
    v69[9] = @"accessoryPID";
    char v64 = v6;
    uint64_t v45 = [(int64x2_t *)v6 objectForKeyedSubscript:kACCInfo_ProductID];
    uint64_t v26 = NSObjectIfNotNull(v45);
    CFStringRef v44 = (void *)v26;
    if (v26) {
      CFStringRef v27 = (_UNKNOWN **)v26;
    }
    else {
      CFStringRef v27 = &off_100223398;
    }
    v70[9] = v27;
    v69[10] = @"unlockedSinceBoot";
    uint64_t v43 = +[NSNumber numberWithBool:platform_system_unlockedSinceBoot()];
    v70[10] = v43;
    v69[11] = @"deviceIsPowered";
    CFStringRef v42 = +[NSNumber numberWithBool:platform_power_getCurrentLimit(*(void *)a1) != 0];
    v70[11] = v42;
    v69[12] = @"duration";
    uint64_t v28 = +[NSNumber numberWithInt:((int)acc_connection_getDurationMS(a1) / 1000)];
    v70[12] = v28;
    v69[13] = @"screenIsLocked";
    CFStringRef v29 = +[NSNumber numberWithBool:platform_system_isDeviceLocked()];
    v70[13] = v29;
    v69[14] = @"authState";
    uint64_t v30 = +[NSNumber numberWithBool:acc_authInfo_isAuthenticated(a1 + 48, 6)];
    v70[14] = v30;
    v69[15] = @"authVersion";
    CFStringRef v31 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 68)];
    v70[15] = v31;
    v69[16] = @"ConnectedThroughAdapter";
    uint64_t v32 = +[NSNumber numberWithBool:acc_connection_isConnectedThroughAdapter(a1)];
    v70[16] = v32;
    v69[17] = @"AdapterVID";
    uint64_t v33 = +[NSNumber numberWithInt:acc_connection_getAdapterVID(a1)];
    v70[17] = v33;
    v69[18] = @"AdapterPID";
    uint64_t v34 = +[NSNumber numberWithInt:acc_connection_getAdapterPID(a1)];
    v70[18] = v34;
    uint64_t v35 = +[NSDictionary dictionaryWithObjects:v70 forKeys:v69 count:19];
    CFStringRef v36 = +[NSMutableDictionary dictionaryWithDictionary:v35];

    uint64_t v37 = acc_connection_copyProperty((char *)a1, kCFACCProperties_Connection_DigitalID);
    CFStringRef v38 = convertNSDataToNSString(v37, @"%02X");

    if (v38) {
      [v36 setObject:v38 forKey:@"lightningDigitalID"];
    }
    uint64_t v39 = acc_connection_copyProperty((char *)a1, kCFACCProperties_Connection_PrimaryPortNumber);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v36 setObject:v39 forKey:@"lightningPrimaryPortNumber"];
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      CFStringRef v40 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v40 = &_os_log_default;
      id v41 = &_os_log_default;
    }
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      CFStringRef v66 = @"com.apple.accessories.connection.removed";
      __int16 v67 = 2112;
      uint64_t v68 = v36;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "[#EventLogger] CoreAnalytics event: %@\neventDict: %@", buf, 0x16u);
    }

    AnalyticsSendEvent();
  }
}

void platform_analytics_availableCurrentNegotiated(uint64_t *a1, uint64_t a2)
{
  if (a1 && *a1 && a1[1])
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 7;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v6 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    else
    {
      BOOL v6 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[1];
      uint64_t v7 = a1[2];
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)id v82 = a2;
      *(_WORD *)&v82[4] = 2112;
      *(void *)&v82[6] = v7;
      *(_WORD *)&v82[14] = 2112;
      *(void *)&v82[16] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#EventLogger] Available current set at: %d for endpoint: %@ (connection %@)", buf, 0x1Cu);
    }

    uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo((uint64_t)a1);
    uint64_t v10 = acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);
    v79[0] = @"endpointUUID";
    CFStringRef v11 = (void *)a1[2];
    if (v11) {
      CFStringRef v11 = (void *)CFRetain(v11);
    }
    uint64_t v77 = v11;
    uint64_t v12 = NSObjectIfNotNull(v11);
    uint64_t v76 = (void *)v12;
    if (v12) {
      CFStringRef v13 = (const __CFString *)v12;
    }
    else {
      CFStringRef v13 = &stru_10021CEF8;
    }
    v80[0] = v13;
    v79[1] = @"connectionUUID";
    uint64_t v14 = (void *)a1[1];
    if (v14) {
      uint64_t v14 = (void *)CFRetain(v14);
    }
    uint64_t v75 = v14;
    uint64_t v15 = NSObjectIfNotNull(v14);
    uint64_t v74 = (void *)v15;
    if (v15) {
      CFStringRef v16 = (const __CFString *)v15;
    }
    else {
      CFStringRef v16 = &stru_10021CEF8;
    }
    v80[1] = v16;
    v79[2] = @"connectionType";
    uint64_t v73 = +[NSString stringWithUTF8String:acc_connection_getTypeString(*a1)];
    uint64_t v17 = NSObjectIfNotNull(v73);
    id v72 = (void *)v17;
    if (v17) {
      CFStringRef v18 = (const __CFString *)v17;
    }
    else {
      CFStringRef v18 = &stru_10021CEF8;
    }
    v80[2] = v18;
    void v79[3] = @"transportType";
    id v71 = +[NSString stringWithUTF8String:acc_endpoint_getTransportTypeString((uint64_t)a1)];
    uint64_t v19 = NSObjectIfNotNull(v71);
    uint64_t v70 = (void *)v19;
    if (v19) {
      CFStringRef v20 = (const __CFString *)v19;
    }
    else {
      CFStringRef v20 = &stru_10021CEF8;
    }
    void v80[3] = v20;
    v79[4] = @"protocol";
    uint64_t v69 = +[NSString stringWithUTF8String:acc_endpoint_getProtocolString((uint64_t)a1)];
    uint64_t v21 = NSObjectIfNotNull(v69);
    uint64_t v68 = (void *)v21;
    if (v21) {
      CFStringRef v22 = (const __CFString *)v21;
    }
    else {
      CFStringRef v22 = &stru_10021CEF8;
    }
    v80[4] = v22;
    v79[5] = @"accessoryName";
    __int16 v67 = [(int64x2_t *)v10 objectForKeyedSubscript:kACCInfo_Name];
    uint64_t v23 = NSObjectIfNotNull(v67);
    CFStringRef v66 = (void *)v23;
    if (v23) {
      CFStringRef v24 = (const __CFString *)v23;
    }
    else {
      CFStringRef v24 = &stru_10021CEF8;
    }
    v80[5] = v24;
    v79[6] = @"accessoryManufacturer";
    long long v65 = [(int64x2_t *)v10 objectForKeyedSubscript:kACCInfo_Manufacturer];
    uint64_t v25 = NSObjectIfNotNull(v65);
    char v64 = (void *)v25;
    if (v25) {
      CFStringRef v26 = (const __CFString *)v25;
    }
    else {
      CFStringRef v26 = &stru_10021CEF8;
    }
    v80[6] = v26;
    v79[7] = @"accessoryModel";
    int v63 = [(int64x2_t *)v10 objectForKeyedSubscript:kACCInfo_Model];
    uint64_t v27 = NSObjectIfNotNull(v63);
    CFStringRef v62 = (void *)v27;
    if (v27) {
      CFStringRef v28 = (const __CFString *)v27;
    }
    else {
      CFStringRef v28 = &stru_10021CEF8;
    }
    v80[7] = v28;
    v79[8] = @"accessoryHardwareVersion";
    char v61 = [(int64x2_t *)v10 objectForKeyedSubscript:kACCInfo_HardwareVersion];
    uint64_t v29 = NSObjectIfNotNull(v61);
    id v60 = (void *)v29;
    if (v29) {
      CFStringRef v30 = (const __CFString *)v29;
    }
    else {
      CFStringRef v30 = &stru_10021CEF8;
    }
    v80[8] = v30;
    v79[9] = @"accessoryFirmwareVersionActive";
    CFStringRef v59 = [(int64x2_t *)v10 objectForKeyedSubscript:kACCInfo_FirmwareVersionActive];
    uint64_t v31 = NSObjectIfNotNull(v59);
    id v58 = (void *)v31;
    if (v31) {
      CFStringRef v32 = (const __CFString *)v31;
    }
    else {
      CFStringRef v32 = &stru_10021CEF8;
    }
    v80[9] = v32;
    v79[10] = @"accessoryFirmwareVersionPending";
    uint64_t v57 = [(int64x2_t *)v10 objectForKeyedSubscript:kACCInfo_FirmwareVersionPending];
    uint64_t v33 = NSObjectIfNotNull(v57);
    CFStringRef v56 = (void *)v33;
    if (v33) {
      CFStringRef v34 = (const __CFString *)v33;
    }
    else {
      CFStringRef v34 = &stru_10021CEF8;
    }
    v80[10] = v34;
    v79[11] = @"accessoryVID";
    uint64_t v55 = [(int64x2_t *)v10 objectForKeyedSubscript:kACCInfo_VendorID];
    uint64_t v35 = NSObjectIfNotNull(v55);
    CFStringRef v54 = (void *)v35;
    if (v35) {
      CFStringRef v36 = (_UNKNOWN **)v35;
    }
    else {
      CFStringRef v36 = &off_100223398;
    }
    v80[11] = v36;
    v79[12] = @"accessoryPID";
    uint64_t v78 = v10;
    uint64_t v53 = [(int64x2_t *)v10 objectForKeyedSubscript:kACCInfo_ProductID];
    uint64_t v37 = NSObjectIfNotNull(v53);
    CFStringRef v38 = (void *)v37;
    if (v37) {
      uint64_t v39 = (_UNKNOWN **)v37;
    }
    else {
      uint64_t v39 = &off_100223398;
    }
    v80[12] = v39;
    v79[13] = @"unlockedSinceBoot";
    CFStringRef v52 = +[NSNumber numberWithBool:platform_system_unlockedSinceBoot()];
    v80[13] = v52;
    v79[14] = @"deviceIsPowered";
    CFStringRef v40 = +[NSNumber numberWithBool:platform_power_getCurrentLimit(a1[1]) != 0];
    v80[14] = v40;
    v79[15] = @"availableCurrent";
    id v41 = +[NSNumber numberWithUnsignedShort:a2];
    v80[15] = v41;
    v79[16] = @"ConnectedThroughAdapter";
    CFStringRef v42 = +[NSNumber numberWithBool:acc_connection_isConnectedThroughAdapter(*a1)];
    v80[16] = v42;
    v79[17] = @"AdapterVID";
    uint64_t v43 = +[NSNumber numberWithInt:acc_connection_getAdapterVID(*a1)];
    v80[17] = v43;
    v79[18] = @"AdapterPID";
    CFStringRef v44 = +[NSNumber numberWithInt:acc_connection_getAdapterPID(*a1)];
    v80[18] = v44;
    uint64_t v45 = +[NSDictionary dictionaryWithObjects:v80 forKeys:v79 count:19];
    CFStringRef v46 = +[NSMutableDictionary dictionaryWithDictionary:v45];

    id v47 = acc_connection_copyProperty((char *)*a1, kCFACCProperties_Connection_PrimaryPortNumber);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v46 setObject:v47 forKey:@"lightningPrimaryPortNumber"];
    }
    Cableuint64_t Type = platform_power_getCableType(a1[1]);
    if ((CableType - 1) <= 0xFFFFFFFD)
    {
      uint64_t v49 = +[NSNumber numberWithInt:CableType];
      [v46 setObject:v49 forKey:@"lightningCableType"];
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      CFStringRef v50 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v50 = &_os_log_default;
      id v51 = &_os_log_default;
    }
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)id v82 = @"com.apple.accessories.endpoint.setAvailableCurrent";
      *(_WORD *)&v82[8] = 2112;
      *(void *)&v82[10] = v46;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "[#EventLogger] CoreAnalytics event: %@\neventDict: %@", buf, 0x16u);
    }

    AnalyticsSendEvent();
  }
}

void platform_analytics_connectionPassedAuth(CFStringRef *a1)
{
  i64 = a1;
  uint64_t v8 = 0;
  CFStringRef v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (!a1) {
    goto LABEL_10;
  }
  if (!*a1)
  {
LABEL_9:
    i64 = 0;
    goto LABEL_10;
  }
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *a1);
  v9[3] = (uint64_t)Copy;
  uint64_t v7 = 0;
  _getEndpointAndAccInfoForAuthPassedEvent(i64, &v7);
  id v3 = v7;
  if (!v3)
  {
    dispatch_time_t v5 = dispatch_time(0, 5000000000);
    if (_analyticsQueue_onceToken != -1) {
      dispatch_once(&_analyticsQueue_onceToken, &__block_literal_global_179);
    }
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = __platform_analytics_connectionPassedAuth_block_invoke;
    v6[3] = &unk_100217220;
    v6[4] = &v8;
    dispatch_after(v5, (dispatch_queue_t)_analyticsQueue_analyticsQueue, v6);
    goto LABEL_9;
  }
  i64 = v3->i64;
  _logAuthPassedEvent((const void *)v9[3]);
  BOOL v4 = (const void *)v9[3];
  if (v4)
  {
    CFRelease(v4);
    v9[3] = 0;
  }
LABEL_10:
  _Block_object_dispose(&v8, 8);
}

void sub_100073FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFDictionaryRef _getEndpointAndAccInfoForAuthPassedEvent(void *a1, int64x2_t **a2)
{
  *a2 = 0;
  if (!a1 || !*a1) {
    return 0;
  }
  CFDictionaryRef CreationTimestampMS = (const __CFDictionary *)acc_endpoint_getCreationTimestampMS((uint64_t)a1);
  CFDictionaryRef v4 = CreationTimestampMS;
  if (!CreationTimestampMS) {
    return v4;
  }
  CFIndex Count = CFDictionaryGetCount(CreationTimestampMS);
  if (Count < 1) {
    return 0;
  }
  uint64_t v6 = Count;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v8, 170, v7);
  CFDictionaryGetKeysAndValues(v4, (const void **)v8, 0);
  uint64_t v9 = 0;
  unsigned int v10 = 1;
  while (1)
  {
    id v11 = *(id *)&v8[8 * v9];
    CFDictionaryRef EndpointWithUUID = (const __CFDictionary *)acc_manager_getEndpointWithUUID(v11);
    CFDictionaryRef v4 = EndpointWithUUID;
    if (EndpointWithUUID)
    {
      if ((*((_DWORD *)EndpointWithUUID + 7) - 3) <= 1) {
        break;
      }
    }

    uint64_t v9 = v10;
    BOOL v13 = v6 <= v10++;
    if (v13) {
      goto LABEL_13;
    }
  }
  uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo((uint64_t)EndpointWithUUID);
  *a2 = acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);

LABEL_13:
  uint64_t v15 = *a2;
  if (!*a2)
  {
    unsigned int v16 = 1;
    while (1)
    {
      id v17 = *(id *)&v8[8 * (void)v15];
      CFDictionaryRef v18 = (const __CFDictionary *)acc_manager_getEndpointWithUUID(v17);
      CFDictionaryRef v4 = v18;
      if (v18)
      {
        if ((*((_DWORD *)v18 + 7) | 2) == 7) {
          break;
        }
      }

      uint64_t v15 = (int64x2_t *)v16;
      BOOL v13 = v6 <= v16++;
      if (v13) {
        goto LABEL_21;
      }
    }
    uint64_t v19 = acc_endpoint_getAccessoryInfo((uint64_t)v18);
    *a2 = acc_accInfo_copyAccessoryInfoDictionary(v19);

LABEL_21:
    CFStringRef v20 = *a2;
    if (!*a2)
    {
      unsigned int v21 = 1;
      while (1)
      {
        id v22 = *(id *)&v8[8 * (void)v20];
        CFDictionaryRef v23 = (const __CFDictionary *)acc_manager_getEndpointWithUUID(v22);
        CFDictionaryRef v4 = v23;
        if (v23)
        {
          if (*((_DWORD *)v23 + 7) == 2) {
            break;
          }
        }

        CFStringRef v20 = (int64x2_t *)v21;
        BOOL v13 = v6 <= v21++;
        if (v13) {
          goto LABEL_29;
        }
      }
      uint64_t v24 = acc_endpoint_getAccessoryInfo((uint64_t)v23);
      *a2 = acc_accInfo_copyAccessoryInfoDictionary(v24);

LABEL_29:
      uint64_t v25 = *a2;
      if (!*a2)
      {
        unsigned int v26 = 1;
        while (1)
        {
          id v27 = *(id *)&v8[8 * (void)v25];
          CFDictionaryRef v28 = (const __CFDictionary *)acc_manager_getEndpointWithUUID(v27);
          CFDictionaryRef v4 = v28;
          if (v28)
          {
            uint64_t v29 = acc_endpoint_getAccessoryInfo((uint64_t)v28);
            CFStringRef v30 = acc_accInfo_copyAccessoryInfoDictionary(v29);
            *a2 = v30;
            if (v30) {
              break;
            }
          }

          uint64_t v25 = (int64x2_t *)v26;
          BOOL v13 = v6 <= v26++;
          if (v13) {
            return v4;
          }
        }
      }
    }
  }
  return v4;
}

void _logAuthPassedEvent(const void *a1)
{
  if (a1)
  {
    CFSetRef ConnectionWithUUID = acc_manager_getConnectionWithUUID(a1);
    if (ConnectionWithUUID)
    {
      uint64_t v2 = (uint64_t)ConnectionWithUUID;
      id v72 = 0;
      CFDictionaryRef EndpointAndAccInfoForAuthPassedEvent = _getEndpointAndAccInfoForAuthPassedEvent(ConnectionWithUUID, &v72);
      CFDictionaryRef v4 = v72;
      if (v4)
      {
        dispatch_time_t v5 = v4;
        if (gLogObjects && gNumLogObjects >= 7)
        {
          uint64_t v6 = *(id *)(gLogObjects + 48);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v6 = &_os_log_default;
          id v7 = &_os_log_default;
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(void *)v2;
          *(_DWORD *)buf = 138412290;
          CFStringRef v74 = (const __CFString *)v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#EventLogger] Connection: %@ passed authentication", buf, 0xCu);
        }

        v77[0] = @"connectionUUID";
        uint64_t v9 = *(void **)v2;
        if (*(void *)v2) {
          uint64_t v9 = (void *)CFRetain(v9);
        }
        uint64_t v70 = v9;
        uint64_t v10 = NSObjectIfNotNull(v9);
        uint64_t v69 = (void *)v10;
        if (v10) {
          CFStringRef v11 = (const __CFString *)v10;
        }
        else {
          CFStringRef v11 = &stru_10021CEF8;
        }
        v78[0] = v11;
        v77[1] = @"connectionType";
        uint64_t v68 = +[NSString stringWithUTF8String:acc_connection_getTypeString(v2)];
        uint64_t v12 = NSObjectIfNotNull(v68);
        __int16 v67 = (void *)v12;
        if (v12) {
          CFStringRef v13 = (const __CFString *)v12;
        }
        else {
          CFStringRef v13 = &stru_10021CEF8;
        }
        v78[1] = v13;
        v77[2] = @"transportType";
        CFStringRef v66 = +[NSString stringWithUTF8String:acc_endpoint_getTransportTypeString((uint64_t)EndpointAndAccInfoForAuthPassedEvent)];
        uint64_t v14 = NSObjectIfNotNull(v66);
        long long v65 = (void *)v14;
        if (v14) {
          CFStringRef v15 = (const __CFString *)v14;
        }
        else {
          CFStringRef v15 = &stru_10021CEF8;
        }
        v78[2] = v15;
        void v77[3] = @"protocol";
        char v64 = +[NSString stringWithUTF8String:acc_endpoint_getProtocolString((uint64_t)EndpointAndAccInfoForAuthPassedEvent)];
        uint64_t v16 = NSObjectIfNotNull(v64);
        int v63 = (void *)v16;
        if (v16) {
          CFStringRef v17 = (const __CFString *)v16;
        }
        else {
          CFStringRef v17 = &stru_10021CEF8;
        }
        void v78[3] = v17;
        v77[4] = @"accessoryName";
        CFStringRef v62 = [(int64x2_t *)v5 objectForKeyedSubscript:kACCInfo_Name];
        uint64_t v18 = NSObjectIfNotNull(v62);
        char v61 = (void *)v18;
        if (v18) {
          CFStringRef v19 = (const __CFString *)v18;
        }
        else {
          CFStringRef v19 = &stru_10021CEF8;
        }
        v78[4] = v19;
        v77[5] = @"accessoryManufacturer";
        id v60 = [(int64x2_t *)v5 objectForKeyedSubscript:kACCInfo_Manufacturer];
        uint64_t v20 = NSObjectIfNotNull(v60);
        CFStringRef v59 = (void *)v20;
        if (v20) {
          CFStringRef v21 = (const __CFString *)v20;
        }
        else {
          CFStringRef v21 = &stru_10021CEF8;
        }
        v78[5] = v21;
        v77[6] = @"accessoryModel";
        id v58 = [(int64x2_t *)v5 objectForKeyedSubscript:kACCInfo_Model];
        uint64_t v22 = NSObjectIfNotNull(v58);
        uint64_t v57 = (void *)v22;
        if (v22) {
          CFStringRef v23 = (const __CFString *)v22;
        }
        else {
          CFStringRef v23 = &stru_10021CEF8;
        }
        v78[6] = v23;
        v77[7] = @"accessoryHardwareVersion";
        CFStringRef v56 = [(int64x2_t *)v5 objectForKeyedSubscript:kACCInfo_HardwareVersion];
        uint64_t v24 = NSObjectIfNotNull(v56);
        uint64_t v55 = (void *)v24;
        if (v24) {
          CFStringRef v25 = (const __CFString *)v24;
        }
        else {
          CFStringRef v25 = &stru_10021CEF8;
        }
        v78[7] = v25;
        v77[8] = @"accessoryFirmwareVersionActive";
        CFStringRef v54 = [(int64x2_t *)v5 objectForKeyedSubscript:kACCInfo_FirmwareVersionActive];
        uint64_t v26 = NSObjectIfNotNull(v54);
        uint64_t v53 = (void *)v26;
        if (v26) {
          CFStringRef v27 = (const __CFString *)v26;
        }
        else {
          CFStringRef v27 = &stru_10021CEF8;
        }
        v78[8] = v27;
        v77[9] = @"accessoryFirmwareVersionPending";
        CFStringRef v52 = [(int64x2_t *)v5 objectForKeyedSubscript:kACCInfo_FirmwareVersionPending];
        uint64_t v28 = NSObjectIfNotNull(v52);
        id v51 = (void *)v28;
        if (v28) {
          CFStringRef v29 = (const __CFString *)v28;
        }
        else {
          CFStringRef v29 = &stru_10021CEF8;
        }
        v78[9] = v29;
        v77[10] = @"accessoryVID";
        CFStringRef v50 = [(int64x2_t *)v5 objectForKeyedSubscript:kACCInfo_VendorID];
        uint64_t v30 = NSObjectIfNotNull(v50);
        uint64_t v49 = (void *)v30;
        if (v30) {
          uint64_t v31 = (_UNKNOWN **)v30;
        }
        else {
          uint64_t v31 = &off_100223398;
        }
        v78[10] = v31;
        void v77[11] = @"accessoryPID";
        id v71 = v5;
        uint64_t v48 = [(int64x2_t *)v5 objectForKeyedSubscript:kACCInfo_ProductID];
        uint64_t v32 = NSObjectIfNotNull(v48);
        uint64_t v33 = (void *)v32;
        if (v32) {
          CFStringRef v34 = (_UNKNOWN **)v32;
        }
        else {
          CFStringRef v34 = &off_100223398;
        }
        void v78[11] = v34;
        v77[12] = @"unlockedSinceBoot";
        id v47 = +[NSNumber numberWithBool:platform_system_unlockedSinceBoot()];
        v78[12] = v47;
        v77[13] = @"deviceIsPowered";
        uint64_t v35 = +[NSNumber numberWithBool:platform_power_getCurrentLimit(*(void *)v2) != 0];
        v78[13] = v35;
        v77[14] = @"authVersion";
        CFStringRef v36 = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 68)];
        v78[14] = v36;
        v77[15] = @"ConnectedThroughAdapter";
        uint64_t v37 = +[NSNumber numberWithBool:acc_connection_isConnectedThroughAdapter(v2)];
        v78[15] = v37;
        v77[16] = @"AdapterVID";
        CFStringRef v38 = +[NSNumber numberWithInt:acc_connection_getAdapterVID(v2)];
        v78[16] = v38;
        v77[17] = @"AdapterPID";
        uint64_t v39 = +[NSNumber numberWithInt:acc_connection_getAdapterPID(v2)];
        v78[17] = v39;
        CFStringRef v40 = +[NSDictionary dictionaryWithObjects:v78 forKeys:v77 count:18];
        id v41 = +[NSMutableDictionary dictionaryWithDictionary:v40];

        CFStringRef v42 = acc_connection_copyProperty((char *)v2, kCFACCProperties_Connection_PrimaryPortNumber);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [v41 setObject:v42 forKey:@"lightningPrimaryPortNumber"];
        }
        Cableuint64_t Type = platform_power_getCableType(*(void *)v2);
        if ((CableType - 1) <= 0xFFFFFFFD)
        {
          CFStringRef v44 = +[NSNumber numberWithInt:CableType];
          [v41 setObject:v44 forKey:@"lightningCableType"];
        }
        if (gLogObjects && gNumLogObjects >= 7)
        {
          uint64_t v45 = *(id *)(gLogObjects + 48);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v45 = &_os_log_default;
          id v46 = &_os_log_default;
        }
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          CFStringRef v74 = @"com.apple.accessories.connection.passedAuth";
          __int16 v75 = 2112;
          uint64_t v76 = v41;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "[#EventLogger] CoreAnalytics event: %@\neventDict: %@", buf, 0x16u);
        }

        AnalyticsSendEvent();
      }
    }
  }
}

void __platform_analytics_connectionPassedAuth_block_invoke(uint64_t a1)
{
  _logAuthPassedEvent(*(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void platform_analytics_connectionAuthUnsuccessful(CFStringRef *a1, uint64_t a2)
{
  if (a1)
  {
    if (*a1)
    {
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *a1);
      if (Copy)
      {
        CFStringRef v4 = Copy;
        if (a2 == 2)
        {
          if (gLogObjects && gNumLogObjects >= 7)
          {
            uint64_t v8 = *(id *)(gLogObjects + 48);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v8 = &_os_log_default;
            id v77 = &_os_log_default;
          }
          if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_77;
          }
          *(_DWORD *)buf = 136315394;
          CFStringRef v80 = "_logAuthUnsuccessfulEvent";
          __int16 v81 = 1024;
          LODWORD(v82) = 2;
          CFStringRef v74 = "[#EventLogger] Called %s but authStatus successful: %d";
          __int16 v75 = v8;
          uint32_t v76 = 18;
        }
        else
        {
          CFSetRef ConnectionWithUUID = acc_manager_getConnectionWithUUID(Copy);
          if (ConnectionWithUUID)
          {
            uint64_t v6 = (uint64_t)ConnectionWithUUID;
            uint64_t v78 = 0;
            CFDictionaryRef EndpointAndAccInfoForAuthPassedEvent = _getEndpointAndAccInfoForAuthPassedEvent(ConnectionWithUUID, &v78);
            uint64_t v8 = v78;
            id v9 = objc_alloc_init((Class)NSMutableDictionary);
            if (v8)
            {
              if (gLogObjects && gNumLogObjects >= 7)
              {
                uint64_t v10 = *(id *)(gLogObjects + 48);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                uint64_t v10 = &_os_log_default;
                id v11 = &_os_log_default;
              }
              if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v12 = *(const char **)v6;
                *(_DWORD *)buf = 138412290;
                CFStringRef v80 = v12;
                _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[#EventLogger] Connection: %@ passed authentication", buf, 0xCu);
              }

              CFStringRef v13 = [v8 objectForKeyedSubscript:kACCInfo_Name];
              uint64_t v14 = NSObjectIfNotNull(v13);
              CFStringRef v15 = (void *)v14;
              if (v14) {
                CFStringRef v16 = (const __CFString *)v14;
              }
              else {
                CFStringRef v16 = &stru_10021CEF8;
              }
              [v9 setObject:v16 forKey:@"accessoryName"];

              CFStringRef v17 = [v8 objectForKeyedSubscript:kACCInfo_Manufacturer];
              uint64_t v18 = NSObjectIfNotNull(v17);
              CFStringRef v19 = (void *)v18;
              if (v18) {
                CFStringRef v20 = (const __CFString *)v18;
              }
              else {
                CFStringRef v20 = &stru_10021CEF8;
              }
              [v9 setObject:v20 forKey:@"accessoryManufacturer"];

              CFStringRef v21 = [v8 objectForKeyedSubscript:kACCInfo_Model];
              uint64_t v22 = NSObjectIfNotNull(v21);
              CFStringRef v23 = (void *)v22;
              if (v22) {
                CFStringRef v24 = (const __CFString *)v22;
              }
              else {
                CFStringRef v24 = &stru_10021CEF8;
              }
              [v9 setObject:v24 forKey:@"accessoryModel"];

              CFStringRef v25 = [v8 objectForKeyedSubscript:kACCInfo_HardwareVersion];
              uint64_t v26 = NSObjectIfNotNull(v25);
              CFStringRef v27 = (void *)v26;
              if (v26) {
                CFStringRef v28 = (const __CFString *)v26;
              }
              else {
                CFStringRef v28 = &stru_10021CEF8;
              }
              [v9 setObject:v28 forKey:@"accessoryHardwareVersion"];

              CFStringRef v29 = [v8 objectForKeyedSubscript:kACCInfo_FirmwareVersionActive];
              uint64_t v30 = NSObjectIfNotNull(v29);
              uint64_t v31 = (void *)v30;
              if (v30) {
                CFStringRef v32 = (const __CFString *)v30;
              }
              else {
                CFStringRef v32 = &stru_10021CEF8;
              }
              [v9 setObject:v32 forKey:@"accessoryFirmwareVersionActive"];

              uint64_t v33 = [v8 objectForKeyedSubscript:kACCInfo_FirmwareVersionPending];
              uint64_t v34 = NSObjectIfNotNull(v33);
              uint64_t v35 = (void *)v34;
              if (v34) {
                CFStringRef v36 = (const __CFString *)v34;
              }
              else {
                CFStringRef v36 = &stru_10021CEF8;
              }
              [v9 setObject:v36 forKey:@"accessoryFirmwareVersionPending"];

              uint64_t v37 = [v8 objectForKeyedSubscript:kACCInfo_VendorID];
              uint64_t v38 = NSObjectIfNotNull(v37);
              uint64_t v39 = (void *)v38;
              if (v38) {
                CFStringRef v40 = (_UNKNOWN **)v38;
              }
              else {
                CFStringRef v40 = &off_100223398;
              }
              [v9 setObject:v40 forKey:@"accessoryVID"];

              id v41 = [v8 objectForKeyedSubscript:kACCInfo_ProductID];
              uint64_t v42 = NSObjectIfNotNull(v41);
              uint64_t v43 = (void *)v42;
              if (v42) {
                CFStringRef v44 = (_UNKNOWN **)v42;
              }
              else {
                CFStringRef v44 = &off_100223398;
              }
              [v9 setObject:v44 forKey:@"accessoryPID"];
            }
            if (*(void *)v6) {
              uint64_t v45 = (void *)CFRetain(*(CFTypeRef *)v6);
            }
            else {
              uint64_t v45 = 0;
            }
            uint64_t v46 = NSObjectIfNotNull(v45);
            id v47 = (void *)v46;
            if (v46) {
              CFStringRef v48 = (const __CFString *)v46;
            }
            else {
              CFStringRef v48 = &stru_10021CEF8;
            }
            [v9 setObject:v48 forKey:@"connectionUUID"];

            uint64_t v49 = +[NSString stringWithUTF8String:acc_connection_getTypeString(v6)];
            uint64_t v50 = NSObjectIfNotNull(v49);
            id v51 = (void *)v50;
            if (v50) {
              CFStringRef v52 = (const __CFString *)v50;
            }
            else {
              CFStringRef v52 = &stru_10021CEF8;
            }
            [v9 setObject:v52 forKey:@"connectionType"];

            uint64_t v53 = +[NSString stringWithUTF8String:acc_endpoint_getTransportTypeString((uint64_t)EndpointAndAccInfoForAuthPassedEvent)];
            uint64_t v54 = NSObjectIfNotNull(v53);
            uint64_t v55 = (void *)v54;
            if (v54) {
              CFStringRef v56 = (const __CFString *)v54;
            }
            else {
              CFStringRef v56 = &stru_10021CEF8;
            }
            [v9 setObject:v56 forKey:@"transportType"];

            uint64_t v57 = +[NSString stringWithUTF8String:acc_endpoint_getProtocolString((uint64_t)EndpointAndAccInfoForAuthPassedEvent)];
            uint64_t v58 = NSObjectIfNotNull(v57);
            CFStringRef v59 = (void *)v58;
            if (v58) {
              CFStringRef v60 = (const __CFString *)v58;
            }
            else {
              CFStringRef v60 = &stru_10021CEF8;
            }
            [v9 setObject:v60 forKey:@"protocol"];

            char v61 = +[NSNumber numberWithBool:platform_system_unlockedSinceBoot()];
            [v9 setObject:v61 forKey:@"unlockedSinceBoot"];

            CFStringRef v62 = +[NSNumber numberWithBool:platform_power_getCurrentLimit(*(void *)v6) != 0];
            [v9 setObject:v62 forKey:@"deviceIsPowered"];

            int v63 = +[NSNumber numberWithInt:*(unsigned int *)(v6 + 68)];
            [v9 setObject:v63 forKey:@"authVersion"];

            char v64 = +[NSNumber numberWithBool:acc_connection_isConnectedThroughAdapter(v6)];
            [v9 setObject:v64 forKey:@"ConnectedThroughAdapter"];

            long long v65 = +[NSNumber numberWithInt:acc_connection_getAdapterVID(v6)];
            [v9 setObject:v65 forKey:@"AdapterVID"];

            CFStringRef v66 = +[NSNumber numberWithInt:acc_connection_getAdapterPID(v6)];
            [v9 setObject:v66 forKey:@"AdapterPID"];

            __int16 v67 = acc_connection_copyProperty((char *)v6, kCFACCProperties_Connection_PrimaryPortNumber);
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              [v9 setObject:v67 forKey:@"lightningPrimaryPortNumber"];
            }
            Cableuint64_t Type = platform_power_getCableType(*(void *)v6);
            if ((CableType - 1) <= 0xFFFFFFFD)
            {
              uint64_t v69 = +[NSNumber numberWithInt:CableType];
              [v9 setObject:v69 forKey:@"lightningCableType"];
            }
            uint64_t v70 = +[NSNumber numberWithInt:a2];
            [v9 setObject:v70 forKey:@"authStatusCode"];

            if (gLogObjects && gNumLogObjects >= 7)
            {
              id v71 = *(id *)(gLogObjects + 48);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              id v71 = &_os_log_default;
              id v72 = &_os_log_default;
            }
            if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              CFStringRef v80 = @"com.apple.accessories.connection.authUnsuccessful";
              __int16 v81 = 2112;
              id v82 = v9;
              _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "[#EventLogger] CoreAnalytics event: %@\neventDict: %@", buf, 0x16u);
            }

            AnalyticsSendEvent();
            goto LABEL_77;
          }
          if (gLogObjects && gNumLogObjects >= 7)
          {
            uint64_t v8 = *(id *)(gLogObjects + 48);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v8 = &_os_log_default;
            id v73 = &_os_log_default;
          }
          if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_77;
          }
          *(_DWORD *)buf = 138412290;
          CFStringRef v80 = @"com.apple.accessories.connection.authUnsuccessful";
          CFStringRef v74 = "[#EventLogger] Unable to create %@ analytic. No connection found";
          __int16 v75 = v8;
          uint32_t v76 = 12;
        }
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, v74, buf, v76);
LABEL_77:

        CFRelease(v4);
      }
    }
  }
}

void platform_analytics_iap1_lingoesSupportedDidChange(uint64_t *a1, uint64_t a2)
{
  if (a1 && *a1 && *(void *)*a1)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 7;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v6 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    else
    {
      uint64_t v6 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v7 = (const __CFString *)a1[2];
      uint64_t v8 = *(void **)*a1;
      *(_DWORD *)buf = 138412546;
      CFStringRef v42 = v7;
      __int16 v43 = 2112;
      CFStringRef v44 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#EventLogger] iAP1 lingoes reported for endpoint: %@ (connection %@)", buf, 0x16u);
    }

    v39[0] = @"endpointUUID";
    id v9 = (void *)a1[2];
    if (v9) {
      id v9 = (void *)CFRetain(v9);
    }
    uint64_t v38 = v9;
    uint64_t v10 = NSObjectIfNotNull(v9);
    uint64_t v37 = (void *)v10;
    if (v10) {
      CFStringRef v11 = (const __CFString *)v10;
    }
    else {
      CFStringRef v11 = &stru_10021CEF8;
    }
    v40[0] = v11;
    v39[1] = @"connectionUUID";
    uint64_t v12 = *(void **)*a1;
    if (v12) {
      uint64_t v12 = (void *)CFRetain(v12);
    }
    CFStringRef v36 = v12;
    uint64_t v13 = NSObjectIfNotNull(v12);
    uint64_t v35 = (void *)v13;
    if (v13) {
      CFStringRef v14 = (const __CFString *)v13;
    }
    else {
      CFStringRef v14 = &stru_10021CEF8;
    }
    v40[1] = v14;
    v39[2] = @"connectionType";
    uint64_t v34 = +[NSString stringWithUTF8String:acc_connection_getTypeString(*a1)];
    uint64_t v15 = NSObjectIfNotNull(v34);
    CFStringRef v16 = (void *)v15;
    if (v15) {
      CFStringRef v17 = (const __CFString *)v15;
    }
    else {
      CFStringRef v17 = &stru_10021CEF8;
    }
    v40[2] = v17;
    v39[3] = @"transportType";
    uint64_t v33 = +[NSString stringWithUTF8String:acc_endpoint_getTransportTypeString((uint64_t)a1)];
    uint64_t v18 = NSObjectIfNotNull(v33);
    CFStringRef v19 = (void *)v18;
    if (v18) {
      CFStringRef v20 = (const __CFString *)v18;
    }
    else {
      CFStringRef v20 = &stru_10021CEF8;
    }
    v40[3] = v20;
    v39[4] = @"protocol";
    CFStringRef v21 = +[NSString stringWithUTF8String:acc_endpoint_getProtocolString((uint64_t)a1)];
    uint64_t v22 = NSObjectIfNotNull(v21);
    CFStringRef v23 = (void *)v22;
    if (v22) {
      CFStringRef v24 = (const __CFString *)v22;
    }
    else {
      CFStringRef v24 = &stru_10021CEF8;
    }
    v40[4] = v24;
    v39[5] = @"lingoesBitmask";
    CFStringRef v25 = +[NSNumber numberWithUnsignedInt:a2];
    v40[5] = v25;
    v39[6] = @"ConnectedThroughAdapter";
    uint64_t v26 = +[NSNumber numberWithBool:acc_connection_isConnectedThroughAdapter(*a1)];
    v40[6] = v26;
    v39[7] = @"AdapterVID";
    CFStringRef v27 = +[NSNumber numberWithInt:acc_connection_getAdapterVID(*a1)];
    v40[7] = v27;
    v39[8] = @"AdapterPID";
    CFStringRef v28 = +[NSNumber numberWithInt:acc_connection_getAdapterPID(*a1)];
    v40[8] = v28;
    CFStringRef v29 = +[NSDictionary dictionaryWithObjects:v40 forKeys:v39 count:9];
    uint64_t v30 = +[NSMutableDictionary dictionaryWithDictionary:v29];

    if (gLogObjects && gNumLogObjects >= 7)
    {
      uint64_t v31 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v31 = &_os_log_default;
      id v32 = &_os_log_default;
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      CFStringRef v42 = @"com.apple.accessories.endpoint.iap1.lingoesSupported";
      __int16 v43 = 2112;
      CFStringRef v44 = v30;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "[#EventLogger] CoreAnalytics event: %@\neventDict: %@", buf, 0x16u);
    }

    AnalyticsSendEvent();
  }
}

void platform_analytics_iap2_featuresSupportedDidChange(const __CFSet *a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      if (*v2 && v2[1])
      {
        if (gLogObjects && gNumLogObjects >= 7)
        {
          id v3 = *(id *)(gLogObjects + 48);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v3 = &_os_log_default;
          id v4 = &_os_log_default;
        }
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v5 = (const __CFString *)*((void *)a1 + 1);
          uint64_t v6 = *(void **)(*(void *)a1 + 8);
          *(_DWORD *)buf = 138412546;
          CFStringRef v88 = v5;
          __int16 v89 = 2112;
          uint64_t v90 = v6;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[#EventLogger] iAP2 messages reported for endpoint: %@ (connection %@)", buf, 0x16u);
        }

        unsigned int v7 = 0;
        int v8 = 0;
        do
        {
          unsigned int v9 = iap2_identification_isIdentifiedForFeature(a1, v7);
          int v10 = 1 << v7;
          if (!v9) {
            int v10 = 0;
          }
          v8 |= v10;
          ++v7;
        }
        while (v7 != 29);
        if (gLogObjects) {
          BOOL v11 = gNumLogObjects < 7;
        }
        else {
          BOOL v11 = 1;
        }
        if (v11)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v13 = &_os_log_default;
          id v12 = &_os_log_default;
        }
        else
        {
          uint64_t v13 = *(id *)(gLogObjects + 48);
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v88) = v8;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[#EventLogger] True FeaturesMask: 0x%08x", buf, 8u);
        }

        if (gLogObjects && gNumLogObjects >= 7)
        {
          CFStringRef v14 = *(id *)(gLogObjects + 48);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          CFStringRef v14 = &_os_log_default;
          id v15 = &_os_log_default;
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v88) = v8 & 0x136FC80;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[#EventLogger] Filtered FeaturesMask: 0x%08x", buf, 8u);
        }

        uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo(*(void *)a1);
        CFStringRef v17 = acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);
        v85[0] = @"endpointUUID";
        uint64_t v18 = (void *)*((void *)a1 + 1);
        if (v18) {
          uint64_t v18 = (void *)CFRetain(v18);
        }
        char v83 = v18;
        uint64_t v19 = NSObjectIfNotNull(v18);
        id v82 = (void *)v19;
        if (v19) {
          CFStringRef v20 = (const __CFString *)v19;
        }
        else {
          CFStringRef v20 = &stru_10021CEF8;
        }
        v86[0] = v20;
        v85[1] = @"connectionUUID";
        CFStringRef v21 = *(void **)(*(void *)a1 + 8);
        if (v21) {
          CFStringRef v21 = (void *)CFRetain(v21);
        }
        __int16 v81 = v21;
        uint64_t v22 = NSObjectIfNotNull(v21);
        CFStringRef v80 = (void *)v22;
        if (v22) {
          CFStringRef v23 = (const __CFString *)v22;
        }
        else {
          CFStringRef v23 = &stru_10021CEF8;
        }
        v86[1] = v23;
        v85[2] = @"connectionType";
        uint64_t v79 = +[NSString stringWithUTF8String:acc_connection_getTypeString(**(void **)a1)];
        uint64_t v24 = NSObjectIfNotNull(v79);
        uint64_t v78 = (void *)v24;
        if (v24) {
          CFStringRef v25 = (const __CFString *)v24;
        }
        else {
          CFStringRef v25 = &stru_10021CEF8;
        }
        v86[2] = v25;
        void v85[3] = @"transportType";
        id v77 = +[NSString stringWithUTF8String:acc_endpoint_getTransportTypeString(*(void *)a1)];
        uint64_t v26 = NSObjectIfNotNull(v77);
        uint32_t v76 = (void *)v26;
        if (v26) {
          CFStringRef v27 = (const __CFString *)v26;
        }
        else {
          CFStringRef v27 = &stru_10021CEF8;
        }
        void v86[3] = v27;
        v85[4] = @"protocol";
        __int16 v75 = +[NSString stringWithUTF8String:acc_endpoint_getProtocolString(*(void *)a1)];
        uint64_t v28 = NSObjectIfNotNull(v75);
        CFStringRef v74 = (void *)v28;
        if (v28) {
          CFStringRef v29 = (const __CFString *)v28;
        }
        else {
          CFStringRef v29 = &stru_10021CEF8;
        }
        v86[4] = v29;
        v85[5] = @"accessoryName";
        id v73 = [(int64x2_t *)v17 objectForKeyedSubscript:kACCInfo_Name];
        uint64_t v30 = NSObjectIfNotNull(v73);
        id v72 = (void *)v30;
        if (v30) {
          CFStringRef v31 = (const __CFString *)v30;
        }
        else {
          CFStringRef v31 = &stru_10021CEF8;
        }
        v86[5] = v31;
        v85[6] = @"accessoryManufacturer";
        id v71 = [(int64x2_t *)v17 objectForKeyedSubscript:kACCInfo_Manufacturer];
        uint64_t v32 = NSObjectIfNotNull(v71);
        uint64_t v70 = (void *)v32;
        if (v32) {
          CFStringRef v33 = (const __CFString *)v32;
        }
        else {
          CFStringRef v33 = &stru_10021CEF8;
        }
        v86[6] = v33;
        v85[7] = @"accessoryModel";
        uint64_t v69 = [(int64x2_t *)v17 objectForKeyedSubscript:kACCInfo_Model];
        uint64_t v34 = NSObjectIfNotNull(v69);
        uint64_t v68 = (void *)v34;
        if (v34) {
          CFStringRef v35 = (const __CFString *)v34;
        }
        else {
          CFStringRef v35 = &stru_10021CEF8;
        }
        v86[7] = v35;
        v85[8] = @"accessoryHardwareVersion";
        __int16 v67 = [(int64x2_t *)v17 objectForKeyedSubscript:kACCInfo_HardwareVersion];
        uint64_t v36 = NSObjectIfNotNull(v67);
        CFStringRef v66 = (void *)v36;
        if (v36) {
          CFStringRef v37 = (const __CFString *)v36;
        }
        else {
          CFStringRef v37 = &stru_10021CEF8;
        }
        v86[8] = v37;
        v85[9] = @"accessoryFirmwareVersionActive";
        long long v65 = [(int64x2_t *)v17 objectForKeyedSubscript:kACCInfo_FirmwareVersionActive];
        uint64_t v38 = NSObjectIfNotNull(v65);
        char v64 = (void *)v38;
        if (v38) {
          CFStringRef v39 = (const __CFString *)v38;
        }
        else {
          CFStringRef v39 = &stru_10021CEF8;
        }
        v86[9] = v39;
        v85[10] = @"accessoryFirmwareVersionPending";
        int v63 = [(int64x2_t *)v17 objectForKeyedSubscript:kACCInfo_FirmwareVersionPending];
        uint64_t v40 = NSObjectIfNotNull(v63);
        CFStringRef v62 = (void *)v40;
        if (v40) {
          CFStringRef v41 = (const __CFString *)v40;
        }
        else {
          CFStringRef v41 = &stru_10021CEF8;
        }
        v86[10] = v41;
        v85[11] = @"accessoryVID";
        char v61 = [(int64x2_t *)v17 objectForKeyedSubscript:kACCInfo_VendorID];
        uint64_t v42 = NSObjectIfNotNull(v61);
        CFStringRef v60 = (void *)v42;
        if (v42) {
          __int16 v43 = (_UNKNOWN **)v42;
        }
        else {
          __int16 v43 = &off_100223398;
        }
        v86[11] = v43;
        v85[12] = @"accessoryPID";
        uint64_t v84 = v17;
        CFStringRef v59 = [(int64x2_t *)v17 objectForKeyedSubscript:kACCInfo_ProductID];
        uint64_t v44 = NSObjectIfNotNull(v59);
        uint64_t v45 = (void *)v44;
        if (v44) {
          uint64_t v46 = (_UNKNOWN **)v44;
        }
        else {
          uint64_t v46 = &off_100223398;
        }
        v86[12] = v46;
        v85[13] = @"unlockedSinceBoot";
        uint64_t v58 = +[NSNumber numberWithBool:platform_system_unlockedSinceBoot()];
        v86[13] = v58;
        v85[14] = @"featuresBitmask";
        id v47 = +[NSNumber numberWithInteger:v8 & 0x136FC80];
        v86[14] = v47;
        v85[15] = @"carPlayCapable";
        CFStringRef v48 = +[NSNumber numberWithBool:iap2_identification_isIdentifiedForCarPlay((uint64_t)a1)];
        v86[15] = v48;
        v85[16] = @"screenIsLocked";
        uint64_t v49 = +[NSNumber numberWithBool:platform_system_isDeviceLocked()];
        v86[16] = v49;
        v85[17] = @"ConnectedThroughAdapter";
        uint64_t v50 = +[NSNumber numberWithBool:acc_connection_isConnectedThroughAdapter(**(void **)a1)];
        v86[17] = v50;
        v85[18] = @"AdapterVID";
        id v51 = +[NSNumber numberWithInt:acc_connection_getAdapterVID(**(void **)a1)];
        v86[18] = v51;
        v85[19] = @"AdapterPID";
        CFStringRef v52 = +[NSNumber numberWithInt:acc_connection_getAdapterPID(**(void **)a1)];
        v86[19] = v52;
        uint64_t v53 = +[NSDictionary dictionaryWithObjects:v86 forKeys:v85 count:20];
        uint64_t v54 = +[NSMutableDictionary dictionaryWithDictionary:v53];

        uint64_t v55 = acc_connection_copyProperty(**(char ***)a1, kCFACCProperties_Connection_PrimaryPortNumber);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [v54 setObject:v55 forKey:@"lightningPrimaryPortNumber"];
        }
        if (gLogObjects && gNumLogObjects >= 7)
        {
          CFStringRef v56 = *(id *)(gLogObjects + 48);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          CFStringRef v56 = &_os_log_default;
          id v57 = &_os_log_default;
        }
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          CFStringRef v88 = @"com.apple.accessories.endpoint.iap2.featuresSupported";
          __int16 v89 = 2112;
          uint64_t v90 = v54;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "[#EventLogger] CoreAnalytics event: %@\neventDict: %@", buf, 0x16u);
        }

        AnalyticsSendEvent();
      }
    }
  }
}

void _getWeekAndMonth(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v7 = +[NSCalendar calendarWithIdentifier:NSCalendarIdentifierGregorian];
  uint64_t v6 = [v7 components:8200 fromDate:v5];

  *a2 = [v6 weekOfYear];
  *a3 = [v6 month];
}

void ___powerLogQueue_block_invoke(id a1)
{
  _powerLogQueue_powerLogQueue = (uint64_t)dispatch_queue_create("com.apple.accessorydMatchingPlugin.powerLogQueue", 0);

  _objc_release_x1();
}

void ___analyticsQueue_block_invoke(id a1)
{
  _analyticsQueue_analyticsQueue = (uint64_t)dispatch_queue_create("com.apple.accessorydMatchingPlugin.eventLoggerQueue", 0);

  _objc_release_x1();
}

uint64_t acc_protocolParser_iAP2_create(void *a1)
{
  if (!a1) {
    return 0;
  }
  if (*a1) {
    return 0;
  }
  uint64_t v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x10100407125D048uLL);
  *a1 = v2;
  if (!v2) {
    return 0;
  }
  *(_DWORD *)uint64_t v2 = 0;
  v2[2] = 0;
  *((unsigned char *)v2 + 6) = 0;
  *((void *)v2 + 1) = 0;
  v2[8] = 0;
  uint64_t v3 = 1;
  *((unsigned char *)v2 + 18) = 0;
  return v3;
}

BOOL acc_protocolParser_iAP2_reset(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)a1 = 0;
    *(_WORD *)(a1 + 4) = 0;
    *(unsigned char *)(a1 + 6) = 0;
    *(void *)(a1 + 8) = 0;
    *(_WORD *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 18) = 0;
  }
  return a1 != 0;
}

BOOL acc_protocolParser_iAP2_destroy(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      free(v2);
      *a1 = 0;
    }
  }
  return a1 != 0;
}

void acc_protocolParser_iAP2_run(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (*(_DWORD *)a2 == 4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = *(_DWORD *)v5;
    switch(*(_DWORD *)v5)
    {
      case 0:
        if (gLogObjects) {
          BOOL v8 = gNumLogObjects < 16;
        }
        else {
          BOOL v8 = 1;
        }
        if (v8)
        {
          CFStringRef v20 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          CFStringRef v20 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_3();
        }
        int v21 = *a3;
        int v9 = v21 == 255;
        *(unsigned char *)(v5 + 6) += v21;
        goto LABEL_182;
      case 1:
        if (gLogObjects) {
          BOOL v10 = gNumLogObjects < 16;
        }
        else {
          BOOL v10 = 1;
        }
        if (v10)
        {
          uint64_t v22 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          uint64_t v22 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_5();
        }
        int v23 = *a3;
        if (v23 == 90) {
          int v9 = 2;
        }
        else {
          int v9 = 12;
        }
        *(unsigned char *)(v5 + 6) += v23;
        goto LABEL_134;
      case 2:
        if (gLogObjects) {
          BOOL v11 = gNumLogObjects < 16;
        }
        else {
          BOOL v11 = 1;
        }
        if (v11)
        {
          uint64_t v24 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          uint64_t v24 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_7();
        }
        *(_WORD *)(v5 + 4) = *a3 << 8;
        *(unsigned char *)(v5 + 6) += *a3;
        int v9 = 3;
        goto LABEL_182;
      case 3:
        if (gLogObjects) {
          BOOL v12 = gNumLogObjects < 16;
        }
        else {
          BOOL v12 = 1;
        }
        if (v12)
        {
          CFStringRef v25 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          CFStringRef v25 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_13();
        }
        unsigned __int16 v26 = *(_WORD *)(v5 + 4) | *a3;
        *(_WORD *)(v5 + 4) = v26;
        if (v26 < 9u) {
          goto LABEL_133;
        }
        *(_WORD *)(v5 + 16) = v26 - 9;
        if (gLogObjects && gNumLogObjects >= 16)
        {
          CFStringRef v27 = *(NSObject **)(gLogObjects + 120);
        }
        else
        {
          CFStringRef v27 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_11((unsigned __int16 *)(v5 + 4), v27);
        }
        if (gLogObjects && gNumLogObjects >= 16)
        {
          uint64_t v44 = *(NSObject **)(gLogObjects + 120);
        }
        else
        {
          uint64_t v44 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_9((unsigned __int16 *)(v5 + 16), v44);
        }
        *(unsigned char *)(v5 + 6) += *a3;
        int v9 = 4;
        goto LABEL_182;
      case 4:
        if (gLogObjects) {
          BOOL v13 = gNumLogObjects < 16;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          uint64_t v28 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          uint64_t v28 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_15();
        }
        *(unsigned char *)(v5 + 6) += *a3;
        int v9 = 5;
        goto LABEL_182;
      case 5:
        if (gLogObjects) {
          BOOL v14 = gNumLogObjects < 16;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14)
        {
          CFStringRef v29 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          CFStringRef v29 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_17();
        }
        *(unsigned char *)(v5 + 6) += *a3;
        int v9 = 6;
        goto LABEL_182;
      case 6:
        if (gLogObjects) {
          BOOL v15 = gNumLogObjects < 16;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15)
        {
          uint64_t v30 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          uint64_t v30 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_19();
        }
        *(unsigned char *)(v5 + 6) += *a3;
        int v9 = 7;
        goto LABEL_182;
      case 7:
        if (gLogObjects) {
          BOOL v16 = gNumLogObjects < 16;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16)
        {
          CFStringRef v31 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          CFStringRef v31 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_21();
        }
        *(unsigned char *)(v5 + 6) += *a3;
        int v9 = 8;
        goto LABEL_182;
      case 8:
        if (gLogObjects) {
          BOOL v17 = gNumLogObjects < 16;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17)
        {
          uint64_t v32 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          uint64_t v32 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_24();
        }
        if (*(unsigned __int8 *)(v5 + 6) != -*a3) {
          goto LABEL_133;
        }
        if (gLogObjects && gNumLogObjects >= 16)
        {
          CFStringRef v33 = *(NSObject **)(gLogObjects + 120);
        }
        else
        {
          CFStringRef v33 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "iAP2 header checksum validated!", buf, 2u);
        }
        if (*(_WORD *)(v5 + 16) == 1)
        {
          int v9 = 10;
          goto LABEL_182;
        }
        if (*(_WORD *)(v5 + 16))
        {
          int v9 = 9;
          goto LABEL_182;
        }
        *(_DWORD *)(a1 + 28) = *(_DWORD *)a2;
        uint64_t v45 = logObjectForModule_10();
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_INFO)) {
          goto LABEL_181;
        }
        __int16 v49 = 0;
        uint64_t v46 = (uint8_t *)&v49;
        goto LABEL_180;
      case 9:
        if (gLogObjects) {
          BOOL v18 = gNumLogObjects < 16;
        }
        else {
          BOOL v18 = 1;
        }
        if (v18)
        {
          uint64_t v34 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          uint64_t v34 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_26();
        }
        uint64_t v35 = *(void *)(v5 + 8);
        if (!v35)
        {
          *(void *)(v5 + 8) = a3;
          LOWORD(v35) = (_WORD)a3;
        }
        unsigned int v36 = *(unsigned __int16 *)(v5 + 16);
        BOOL v37 = v36 >= 2;
        unsigned int v38 = v36 - 2;
        if (!v37) {
          goto LABEL_133;
        }
        if (v38 == (unsigned __int16)((_WORD)a3 - v35)) {
          int v9 = 10;
        }
        else {
          int v9 = 9;
        }
        *(unsigned char *)(v5 + 18) += *a3;
        goto LABEL_182;
      case 0xA:
        if (gLogObjects) {
          BOOL v19 = gNumLogObjects < 16;
        }
        else {
          BOOL v19 = 1;
        }
        if (v19)
        {
          CFStringRef v39 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          CFStringRef v39 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_30();
        }
        if (*(unsigned __int8 *)(v5 + 18) == -*a3)
        {
          if (gLogObjects && gNumLogObjects >= 16)
          {
            uint64_t v40 = *(NSObject **)(gLogObjects + 120);
          }
          else
          {
            uint64_t v40 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)CFStringRef v48 = 0;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "iAP2 payload checksum validated!", v48, 2u);
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)a2;
          if (gLogObjects && gNumLogObjects >= 16)
          {
            uint64_t v45 = *(NSObject **)(gLogObjects + 120);
          }
          else
          {
            uint64_t v45 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
          {
            __int16 v47 = 0;
            uint64_t v46 = (uint8_t *)&v47;
LABEL_180:
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "iAP2 detected!", v46, 2u);
          }
LABEL_181:
          int v9 = 11;
        }
        else
        {
LABEL_133:
          int v9 = 12;
LABEL_134:
          if (v6 != 12 && v9 == 12)
          {
            ++*(unsigned char *)(a1 + 24);
            if (gLogObjects) {
              BOOL v42 = gNumLogObjects < 16;
            }
            else {
              BOOL v42 = 1;
            }
            if (v42)
            {
              __int16 v43 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            else
            {
              __int16 v43 = *(NSObject **)(gLogObjects + 120);
            }
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
              acc_protocolParser_iAP2_run_cold_1();
            }
            int v9 = 12;
          }
        }
LABEL_182:
        *(_DWORD *)uint64_t v5 = v9;
        break;
      default:
        int v9 = *(_DWORD *)v5;
        goto LABEL_134;
    }
  }
}

void *logObjectForModule_10()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 16;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    return *(void **)(gLogObjects + 120);
  }
  uint64_t v1 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v1;
}

uint64_t iap2_wifisharing_RequestWiFiInformation(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (iAP2MsgGetMsgID(a2) == 22272)
    {
      uint64_t v11 = a1;
      kdebug_trace();
      unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
      if (FirstParam)
      {
        NextParam = (unsigned __int16 *)FirstParam;
        do
        {
          int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
          uint64_t v8 = gLogObjects;
          int v9 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 39)
          {
            BOOL v10 = *(NSObject **)(gLogObjects + 304);
          }
          else
          {
            BOOL v10 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              uint64_t v13 = v8;
              __int16 v14 = 1024;
              int v15 = v9;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              BOOL v10 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v13) = ParamID;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
          }
          NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
        }
        while (NextParam);
      }
      return platform_wifisharing_request_device_wifi_information(*(const void **)(v11 + 8));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *logObjectForModule_11()
{
  if (gLogObjects && gNumLogObjects >= 39) {
    return *(void **)(gLogObjects + 304);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

id iap2_wifisharing_AccessoryWiFiConfigurationInformation(uint64_t a1, uint64_t a2)
{
  id v2 = 0;
  BOOL v43 = 0;
  if (!a1 || !a2) {
    return v2;
  }
  if (iAP2MsgGetMsgID(a2) != 22275) {
    return 0;
  }
  uint64_t v39 = a1;
  kdebug_trace();
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (!FirstParam)
  {
    CFDataRef v11 = 0;
    CFStringRef v10 = 0;
    CFStringRef v9 = 0;
    CFNumberRef v8 = 0;
    CFNumberRef v7 = 0;
LABEL_38:
    int isIdentifiedForWirelessCarPlay = iap2_identification_isIdentifiedForWirelessCarPlay(v39);
    id v2 = platform_wifisharing_accessory_wifi_configuration_information(*(void **)(v39 + 8), (uint64_t)v11, (uint64_t)v10, (uint64_t)v9, (uint64_t)v8, (uint64_t)v7, isIdentifiedForWirelessCarPlay);
    kdebug_trace();
    if (!v11) {
      goto LABEL_40;
    }
LABEL_39:
    CFRelease(v11);
    goto LABEL_40;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  CFNumberRef v7 = 0;
  CFNumberRef v8 = 0;
  CFStringRef v9 = 0;
  CFStringRef v10 = 0;
  CFDataRef v11 = 0;
  CFAllocatorRef v12 = kCFAllocatorDefault;
  while (2)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    switch(ParamID)
    {
      case 0:
        unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
        uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)NextParam, &v43);
        if (!v43)
        {
          BOOL v16 = (const UInt8 *)DataAsData;
          if (v11) {
            CFRelease(v11);
          }
          CFDataRef v11 = CFDataCreate(v12, v16, ParamValueLen);
          goto LABEL_35;
        }
        uint64_t v34 = logObjectForModule_11();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_1(a2);
        }
        goto LABEL_59;
      case 1:
        DataAsString = iAP2MsgGetDataAsString(NextParam, &v43);
        if (v43)
        {
          uint64_t v35 = logObjectForModule_11();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_2(a2);
          }
          goto LABEL_59;
        }
        CFStringRef v25 = (const char *)DataAsString;
        if (v10) {
          CFRelease(v10);
        }
        CFStringRef v10 = CFStringCreateWithCString(v12, v25, 0x8000100u);
        goto LABEL_35;
      case 2:
        unsigned __int16 v26 = iAP2MsgGetDataAsString(NextParam, &v43);
        if (v43)
        {
          unsigned int v36 = logObjectForModule_11();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_3(a2);
          }
          goto LABEL_59;
        }
        CFStringRef v27 = (const char *)v26;
        if (v9) {
          CFRelease(v9);
        }
        CFStringRef v9 = CFStringCreateWithCString(v12, v27, 0x8000100u);
        goto LABEL_35;
      case 3:
        int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v43);
        if (v43)
        {
          BOOL v37 = logObjectForModule_11();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_4(a2);
          }
          goto LABEL_59;
        }
        int v29 = DataAsU8;
        if (v8) {
          CFRelease(v8);
        }
        int valuePtr = v29;
        CFNumberRef v8 = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_35;
      case 4:
        int v30 = iAP2MsgGetDataAsU8(NextParam, &v43);
        if (!v43)
        {
          int v31 = v30;
          if (v7) {
            CFRelease(v7);
          }
          int v41 = v31;
          CFNumberRef v7 = CFNumberCreate(v12, kCFNumberSInt32Type, &v41);
LABEL_35:
          NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
          if (!NextParam) {
            goto LABEL_38;
          }
          continue;
        }
        unsigned int v38 = logObjectForModule_11();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_5(a2);
        }
LABEL_59:
        id v2 = 0;
        if (v11) {
          goto LABEL_39;
        }
LABEL_40:
        if (v10) {
          CFRelease(v10);
        }
        if (v9) {
          CFRelease(v9);
        }
        if (v8) {
          CFRelease(v8);
        }
        if (v7) {
          CFRelease(v7);
        }
        return v2;
      case 5:
      case 6:
        goto LABEL_35;
      default:
        CFDataRef v17 = v11;
        CFStringRef v40 = v10;
        CFStringRef v18 = v9;
        CFNumberRef v19 = v8;
        CFNumberRef v20 = v7;
        uint64_t v21 = gLogObjects;
        int v22 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 39)
        {
          int v23 = *(NSObject **)(gLogObjects + 304);
        }
        else
        {
          int v23 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v45 = v21;
            __int16 v46 = 1024;
            int v47 = v22;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v45) = ParamID;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
        }
        CFNumberRef v7 = v20;
        CFNumberRef v8 = v19;
        CFStringRef v9 = v18;
        CFDataRef v11 = v17;
        CFAllocatorRef v12 = kCFAllocatorDefault;
        CFStringRef v10 = v40;
        goto LABEL_35;
    }
  }
}

CFNumberRef iap2_wifisharing_DeviceWiFiInformation(uint64_t *a1, CFDictionaryRef theDict)
{
  CFNumberRef Value = 0;
  if (a1)
  {
    if (theDict)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, kCFWiFiSharing_WiFiNetworkInformationStatus);
      CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(theDict, kCFWiFiSharing_WiFiNetworkInformationSecurityType);
      CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(theDict, kCFWiFiSharing_WiFiNetworkInformationWifiSSID);
      CFStringRef v7 = (const __CFString *)CFDictionaryGetValue(theDict, kCFWiFiSharing_WiFiNetworkInformationWifiPassphrase);
      iAP2MsgInit((uint64_t)(a1 + 15), 22273, a1[24], 0xFFFF, 0, 0);
      if (Value)
      {
        unsigned __int16 valuePtr = 0;
        CFNumberGetValue(Value, kCFNumberShortType, &valuePtr);
        CFNumberRef Value = (const __CFNumber *)iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0, 0, valuePtr);
        int v8 = valuePtr;
        if (v5) {
          BOOL v9 = valuePtr == 0;
        }
        else {
          BOOL v9 = 0;
        }
        if (v9)
        {
          __int16 v18 = 0;
          CFNumberGetValue(v5, kCFNumberShortType, &v18);
          if (!iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0, 1, v18))
          {
            if (gLogObjects && gNumLogObjects >= 39)
            {
              CFStringRef v10 = *(NSObject **)(gLogObjects + 304);
            }
            else
            {
              CFStringRef v10 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Failed to add security type to message", buf, 2u);
            }
          }
        }
        if (v6) {
          BOOL v11 = v8 == 0;
        }
        else {
          BOOL v11 = 0;
        }
        if (v11 && !iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), 0, 2, v6))
        {
          if (gLogObjects && gNumLogObjects >= 39)
          {
            CFAllocatorRef v12 = *(NSObject **)(gLogObjects + 304);
          }
          else
          {
            CFAllocatorRef v12 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)BOOL v16 = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Failed to add SSID to message", v16, 2u);
          }
        }
        if (v7 && !v8 && !iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), 0, 3, v7))
        {
          if (gLogObjects && gNumLogObjects >= 39)
          {
            uint64_t v13 = *(NSObject **)(gLogObjects + 304);
          }
          else
          {
            uint64_t v13 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int v15 = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Failed to add passphrase to message", v15, 2u);
          }
        }
        if (Value)
        {
          CFNumberRef Value = (const __CFNumber *)iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
          kdebug_trace();
        }
      }
    }
  }
  return Value;
}

uint64_t iap2_wifisharing_RequestAccessoryWiFiConfigurationInformation(uint64_t *a1)
{
  if (!a1) {
    return 0;
  }
  char v4 = 0;
  uint64_t v2 = 0;
  if (iap2_identification_checkRequiredMsgIDs((uint64_t)a1, (uint64_t)&_kMsgAccessoryWiFiCredentialsSharingList, 2, &v4))
  {
    iAP2MsgInit((uint64_t)(a1 + 15), 22274, a1[24], 0xFFFF, 0, 0);
    uint64_t v2 = iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
    kdebug_trace();
  }
  return v2;
}

_WORD *_createFeature_5(_WORD *result)
{
  if (result)
  {
    uint64_t result = malloc_type_calloc(1uLL, 2uLL, 0x1000040BDFB0063uLL);
    if (result) {
      *uint64_t result = 0;
    }
  }
  return result;
}

uint64_t _destroyFeature_5(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      free(v2);
      *a1 = 0;
    }
  }
  return 0;
}

uint64_t _startFeatureFromDevice_2(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    if (gLogObjects && gNumLogObjects >= 39)
    {
      uint64_t v2 = *(NSObject **)(gLogObjects + 304);
    }
    else
    {
      uint64_t v2 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2_WiFiSharing _startFeatureFromDevice", v3, 2u);
    }
    uint64_t result = iap2_feature_getFeature((uint64_t)v1, 0x16u);
    if (result)
    {
      iap2_wifisharing_RequestAccessoryWiFiConfigurationInformation(v1);
      return 1;
    }
  }
  return result;
}

uint64_t _checkIdentificationInfo_4(uint64_t a1)
{
  unsigned __int8 v14 = -86;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_kMsgDeviceWiFiCredentialsSharingList, 2u, &v14);
  if (v2) {
    return v2;
  }
  int v3 = v14;
  uint64_t v4 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_kMsgAccessoryWiFiCredentialsSharingList, 2u, &v14);
  uint64_t v5 = v4;
  int v6 = v14;
  if (v14 | v3) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    iap2_features_createFeature(a1, 0x16u);
    iap2_identification_setIdentifiedForFeature(a1, 0x16u);
    BOOL v8 = v3 != 0;
    BOOL v9 = v6 != 0;
  }
  else
  {
    BOOL v8 = 0;
    BOOL v9 = 0;
  }
  uint64_t Feature = (unsigned char *)iap2_feature_getFeature(a1, 0x16u);
  if (Feature)
  {
    *uint64_t Feature = v8;
    Feature[1] = v9;
  }
  if (!v8) {
    goto LABEL_17;
  }
  if (gLogObjects && gNumLogObjects >= 39)
  {
    BOOL v11 = *(NSObject **)(gLogObjects + 304);
  }
  else
  {
    BOOL v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    _checkIdentificationInfo_cold_3_0(v11);
    if (!v9) {
      return v5;
    }
  }
  else
  {
LABEL_17:
    if (!v9) {
      return v5;
    }
  }
  if (gLogObjects && gNumLogObjects >= 39)
  {
    CFAllocatorRef v12 = *(NSObject **)(gLogObjects + 304);
  }
  else
  {
    CFAllocatorRef v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    _checkIdentificationInfo_cold_1_1(v12);
  }
  return v5;
}

void OUTLINED_FUNCTION_2_10(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xEu);
}

const void *platform_systemInfo_copySystemName()
{
  BOOL v0 = (const void *)MGGetStringAnswer();
  CFRetain(v0);
  return v0;
}

const void *platform_systemInfo_copyBluetoothMACAddress()
{
  BOOL v0 = (const void *)MGGetStringAnswer();
  CFRetain(v0);
  return v0;
}

uint64_t platform_systemInfo_copyBluetoothMACAddressData()
{
  return MGCopyAnswer();
}

uint64_t platform_systemInfo_copyUniqueDeviceID()
{
  CFDictionaryRef v0 = IOServiceMatching("IOUSBDeviceController");
  if (!v0) {
    return 0;
  }
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v0);
  if (!MatchingService) {
    return 0;
  }
  io_object_t v2 = MatchingService;
  CFProperty = (void *)IORegistryEntryCreateCFProperty(MatchingService, @"DeviceDescription", kCFAllocatorDefault, 0);
  uint64_t v4 = CFProperty;
  if (CFProperty)
  {
    uint64_t v5 = [CFProperty objectForKeyedSubscript:@"serialNumber"];
  }
  else
  {
    uint64_t v5 = 0;
  }
  IOObjectRelease(v2);

  return v5;
}

id platform_systemInfo_isIPad()
{
  return _isDeviceClass(@"iPad");
}

id _isDeviceClass(void *a1)
{
  id v1 = a1;
  io_object_t v2 = (void *)systemInfo_copyDeviceClass();
  id v3 = [v2 isEqualToString:v1];

  return v3;
}

id platform_systemInfo_isIPod()
{
  return _isDeviceClass(@"iPod");
}

id platform_systemInfo_isIPhone()
{
  return _isDeviceClass(@"iPhone");
}

id platform_systemInfo_isATV()
{
  return _isDeviceClass(@"AppleTV");
}

id platform_systemInfo_isWatch()
{
  return _isDeviceClass(@"Watch");
}

uint64_t platform_systemInfo_isApplePencilSupported()
{
  return MGGetBoolAnswer();
}

BOOL platform_systemInfo_isApplePencilGen1Supported()
{
  BOOL result = 0;
  if (MGGetBoolAnswer())
  {
    CFStringRef v0 = (const __CFString *)MGCopyAnswer();
    if ((MGGetBoolAnswer() & 1) != 0
      || CFEqual(v0, @"iPad13,18")
      || CFEqual(v0, @"iPad13,19"))
    {
      return 1;
    }
  }
  return result;
}

uint64_t platform_systemInfo_supportsQiAuth()
{
  return 1;
}

uint64_t platform_systemInfo_isLightning()
{
  return MGGetBoolAnswer();
}

uint64_t platform_systemInfo_deviceType()
{
  if (_isDeviceClass(@"Watch")) {
    return 4;
  }
  if (_isDeviceClass(@"iPod")) {
    return 2;
  }
  if (_isDeviceClass(@"iPad")) {
    return 3;
  }
  if (_isDeviceClass(@"iPhone")) {
    return 1;
  }
  if (_isDeviceClass(@"AppleTV")) {
    return 5;
  }
  return 0;
}

uint64_t acc_protocolRouter_initProtocolLayer(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    uint64_t v8 = result;
    if (!*(void *)(result + 56)
      || (BOOL result = acc_protocolRouter_destroyProtocolLayer(result, a2, a3, a4, a5, a6, a7, a8), result))
    {
      switch(*(_DWORD *)(v8 + 28))
      {
        case 3:
          if (*(void *)v8) {
            BOOL isAuthenticated = acc_connection_isAuthenticated(*(void *)v8, 0);
          }
          else {
            BOOL isAuthenticated = 0;
          }
          platform_iapd_bridge_accessory_connected(v8, isAuthenticated);
          return 1;
        case 4:
          BOOL v9 = iap2_endpoint_create((void *)v8);
          goto LABEL_25;
        case 5:
        case 6:
        case 7:
          BOOL v9 = ea_endpoint_create((pthread_mutex_t *)v8);
          goto LABEL_25;
        case 8:
          BOOL v9 = oobPairing_endpoint_create(v8);
          goto LABEL_25;
        case 0xA:
          BOOL v9 = accAuthProtocol_endpoint_create(v8);
          goto LABEL_25;
        case 0xB:
          BOOL v9 = configStream_endpoint_create(v8);
          goto LABEL_25;
        case 0xD:
          BOOL v9 = audioProductCerts_endpoint_create(v8);
          goto LABEL_25;
        case 0xE:
          BOOL v9 = mfi4Auth_endpoint_create(v8);
          goto LABEL_25;
        case 0xF:
          BOOL v9 = accSNTPTimeSync_endpoint_create(v8);
          goto LABEL_25;
        case 0x10:
          BOOL result = platform_systemInfo_supportsQiAuth();
          if (!result) {
            return result;
          }
          BOOL v9 = qiAuth_endpoint_create(v8);
LABEL_25:
          *(void *)(v8 + 56) = v9;
          BOOL result = v9 != 0;
          break;
        case 0x11:
          BOOL v9 = t56_endpoint_create(v8);
          goto LABEL_25;
        default:
          if (gLogObjects) {
            BOOL v11 = gNumLogObjects < 17;
          }
          else {
            BOOL v11 = 1;
          }
          if (v11)
          {
            CFAllocatorRef v12 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          else
          {
            CFAllocatorRef v12 = *(NSObject **)(gLogObjects + 128);
          }
          BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
          BOOL result = 0;
          if (v13)
          {
            int v14 = *(_DWORD *)(v8 + 28);
            v15[0] = 67109120;
            v15[1] = v14;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Unable to initialize protocol: %{coreacc:ACCEndpoint_Protocol_t}d!", (uint8_t *)v15, 8u);
            return 0;
          }
          return result;
      }
    }
  }
  return result;
}

uint64_t acc_protocolRouter_destroyProtocolLayer(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    uint64_t v8 = result;
    switch(*(_DWORD *)(result + 28))
    {
      case 3:
        platform_iapd_bridge_accessory_disconnected(*(void *)(result + 16));
        goto LABEL_8;
      case 4:
        if (!*(void *)(result + 56)) {
          goto LABEL_8;
        }
        BOOL result = iap2_endpoint_destroy((void ***)(result + 56));
        break;
      case 5:
      case 6:
      case 7:
        if (!*(void *)(result + 56)) {
          goto LABEL_8;
        }
        BOOL result = ea_endpoint_destroy(result + 56);
        break;
      case 8:
        if (!*(void *)(result + 56)) {
          goto LABEL_8;
        }
        BOOL result = oobPairing_endpoint_destroy((uint64_t *)(result + 56));
        break;
      case 0xA:
        if (!*(void *)(result + 56)) {
          goto LABEL_8;
        }
        BOOL result = (uint64_t)accAuthProtocol_endpoint_destroy((uint64_t **)(result + 56), a2, a3, a4, a5, a6, a7, a8);
        break;
      case 0xB:
        if (!*(void *)(result + 56)) {
          goto LABEL_8;
        }
        BOOL result = configStream_endpoint_destroy(result + 56);
        break;
      case 0xD:
        if (!*(void *)(result + 56)) {
          goto LABEL_8;
        }
        BOOL result = audioProductCerts_endpoint_destroy(result + 56);
        break;
      case 0xE:
        if (!*(void *)(result + 56)) {
          goto LABEL_8;
        }
        BOOL result = mfi4Auth_endpoint_destroy((uint64_t **)(result + 56));
        break;
      case 0xF:
        if (!*(void *)(result + 56)) {
          goto LABEL_8;
        }
        BOOL result = accSNTPTimeSync_endpoint_destroy(result + 56);
        break;
      case 0x10:
        BOOL result = platform_systemInfo_supportsQiAuth();
        if (!result) {
          return result;
        }
        uint64_t v18 = *(void *)(v8 + 56);
        CFDataRef v17 = (uint64_t *)(v8 + 56);
        if (v18)
        {
          BOOL result = qiAuth_endpoint_destroy(v17, v10, v11, v12, v13, v14, v15, v16);
        }
        else
        {
LABEL_8:
          BOOL result = 1;
        }
        break;
      case 0x11:
        if (!*(void *)(result + 56)) {
          goto LABEL_8;
        }
        BOOL result = t56_endpoint_destroy((uint64_t *)(result + 56), a2, a3, a4, a5, a6, a7, a8);
        break;
      default:
        if (gLogObjects) {
          BOOL v9 = gNumLogObjects < 17;
        }
        else {
          BOOL v9 = 1;
        }
        if (v9)
        {
          CFNumberRef v19 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          CFNumberRef v19 = *(NSObject **)(gLogObjects + 128);
        }
        BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        BOOL result = 0;
        if (v20)
        {
          int v21 = *(_DWORD *)(v8 + 28);
          v22[0] = 67109120;
          v22[1] = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Unable to destroy protocol: %{coreacc:ACCEndpoint_Protocol_t}d!", (uint8_t *)v22, 8u);
          return 0;
        }
        return result;
    }
  }
  return result;
}

BOOL acc_protocolRouter_routeIncomingData(uint64_t a1, CFDataRef theData)
{
  BOOL result = 0;
  if (a1 && theData)
  {
    switch(*(_DWORD *)(a1 + 28))
    {
      case 3:
        if (platform_iapd_bridge_accessory_processIncomingData(a1, (uint64_t)theData)) {
          goto LABEL_33;
        }
        goto LABEL_36;
      case 4:
        kdebug_trace();
        if ((iap2_endpoint_processIncomingData(*(void *)(a1 + 56), theData) & 1) == 0) {
          goto LABEL_36;
        }
        goto LABEL_33;
      case 5:
      case 7:
        if ((platform_externalAccessory_handleIncomingEADataFromAccessoryForEndpointUUID(*(const void **)(a1 + 16), theData) & 1) == 0)goto LABEL_36; {
        goto LABEL_33;
        }
      case 8:
        if (!oobPairing_endpoint_processIncomingData(*(void *)(a1 + 56), theData)) {
          goto LABEL_36;
        }
        goto LABEL_33;
      case 0xA:
        if ((accAuthProtocol_endpoint_processIncomingData(*(void *)(a1 + 56), theData) & 1) == 0) {
          goto LABEL_36;
        }
        goto LABEL_33;
      case 0xB:
        if ((configStream_endpoint_processIncomingData(*(void *)(a1 + 56), theData) & 1) == 0) {
          goto LABEL_36;
        }
        goto LABEL_33;
      case 0xD:
        if ((audioProductCerts_endpoint_processIncomingData(*(void *)(a1 + 56), theData) & 1) == 0) {
          goto LABEL_36;
        }
        goto LABEL_33;
      case 0xE:
        if (!mfi4Auth_endpoint_processIncomingData(*(void **)(a1 + 56), theData)) {
          goto LABEL_36;
        }
        goto LABEL_33;
      case 0xF:
        if ((accSNTPTimeSync_endpoint_processIncomingData(*(void *)(a1 + 56), theData) & 1) == 0) {
          goto LABEL_36;
        }
        goto LABEL_33;
      case 0x10:
        if (!platform_systemInfo_supportsQiAuth()
          || !qiAuth_endpoint_processIncomingData(*(void *)(a1 + 56), theData))
        {
          goto LABEL_36;
        }
        goto LABEL_33;
      case 0x11:
        if ((t56_endpoint_processIncomingData(*(void *)(a1 + 56), theData) & 1) == 0) {
          goto LABEL_36;
        }
LABEL_33:
        BOOL result = 1;
        break;
      default:
        if (gLogObjects) {
          BOOL v5 = gNumLogObjects < 17;
        }
        else {
          BOOL v5 = 1;
        }
        if (v5)
        {
          int v6 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          int v6 = *(NSObject **)(gLogObjects + 128);
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v7 = *(_DWORD *)(a1 + 28);
          v9[0] = 67109120;
          v9[1] = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unable to route data for protocol: %{coreacc:ACCEndpoint_Protocol_t}d, discarding data...", (uint8_t *)v9, 8u);
        }
LABEL_36:
        if (gLogObjects && gNumLogObjects >= 17)
        {
          uint64_t v8 = *(NSObject **)(gLogObjects + 128);
        }
        else
        {
          uint64_t v8 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
        if (result)
        {
          acc_protocolRouter_routeIncomingData_cold_1();
          BOOL result = 0;
        }
        break;
    }
  }
  return result;
}

BOOL acc_protocolRouter_routeOutgoingSecureTunnelDataForClient(uint64_t a1, int a2, const __CFData *a3)
{
  BOOL result = 0;
  if (a1 && a3)
  {
    if (*(_DWORD *)(a1 + 28) == 14)
    {
      if (mfi4Auth_endpoint_processOutgoingSecureTunnelDataForClient(*(void **)(a1 + 56), a2, a3)) {
        return 1;
      }
    }
    else
    {
      if (gLogObjects) {
        BOOL v5 = gNumLogObjects < 17;
      }
      else {
        BOOL v5 = 1;
      }
      if (v5)
      {
        int v6 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        int v6 = *(NSObject **)(gLogObjects + 128);
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(a1 + 28);
        v9[0] = 67109120;
        v9[1] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unable to route secure tunnel data for protocol: %{coreacc:ACCEndpoint_Protocol_t}d, discarding data...", (uint8_t *)v9, 8u);
      }
    }
    if (gLogObjects && gNumLogObjects >= 17)
    {
      uint64_t v8 = *(NSObject **)(gLogObjects + 128);
    }
    else
    {
      uint64_t v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      acc_protocolRouter_routeOutgoingSecureTunnelDataForClient_cold_1();
      return 0;
    }
  }
  return result;
}

uint64_t acc_protocolRouter_setSecureTunnelDataTypeHandler(uint64_t result, uint64_t a2, void *a3)
{
  if (result)
  {
    id v3 = (int *)(result + 28);
    if (*(_DWORD *)(result + 28) == 14)
    {
      if (mfi4Auth_endpoint_setEndpointSecureTunnelDataReceiveTypeHandler(*(const void **)(result + 16), a2, a3)) {
        return 1;
      }
    }
    else
    {
      if (gLogObjects) {
        BOOL v4 = gNumLogObjects < 17;
      }
      else {
        BOOL v4 = 1;
      }
      if (v4)
      {
        BOOL v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        BOOL v5 = *(NSObject **)(gLogObjects + 128);
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *v3;
        v8[0] = 67109120;
        v8[1] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Unable to route handler for protocol: %{coreacc:ACCEndpoint_Protocol_t}d, discarding handler...", (uint8_t *)v8, 8u);
      }
    }
    if (gLogObjects && gNumLogObjects >= 17)
    {
      int v7 = *(NSObject **)(gLogObjects + 128);
    }
    else
    {
      int v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (result)
    {
      acc_protocolRouter_setSecureTunnelDataTypeHandler_cold_1();
      return 0;
    }
  }
  return result;
}

void OUTLINED_FUNCTION_3_10(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_4_9(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void iAP2LinkSignalSendBuffCB(uint64_t a1)
{
}

uint64_t iAP2LinkRunLoopGetBuffSize(unsigned int a1)
{
  return iAP2LinkGetBuffSize(a1) + 96;
}

uint64_t iAP2LinkRunLoopCreateDevice(long long *a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, __int16 a6, uint64_t a7)
{
  return iAP2LinkRunLoopCreate(1, a2, a3, a1, a4, a5, a6, a7);
}

uint64_t iAP2LinkRunLoopCreate(int a1, uint64_t a2, unsigned int a3, long long *a4, int a5, unsigned int a6, __int16 a7, uint64_t a8)
{
  if (!a8) {
    iAP2LinkRunLoopCreate_cold_1();
  }
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(void *)a8 = a8;
  uint64_t v10 = a8 + 96;
  *(void *)(a8 + 16) = a2;
  *(void *)(a8 + 24) = iAP2LinkCreate(a1, a8, a3, a4, a5, a6, a7, (char *)(a8 + 96));
  unsigned int BuffSize = iAP2LinkGetBuffSize(a6);
  uint64_t v12 = *(void *)(a8 + 24);
  if (!v12) {
    iAP2LinkRunLoopCreate_cold_2();
  }
  *(void *)(a8 + 8) = v10 + BuffSize;
  iAP2LinkSetUseiAP2LinkRunLoop(v12);
  iAP2LinkStart(*(void *)(a8 + 24));
  iAP2LinkRunLoopInitImplementation(a8);
  return a8;
}

void iAP2LinkRunLoopShuttingDown(uint64_t a1)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 44) = 1;
    iAP2LinkShuttingDown(*(void *)(a1 + 24));
  }
}

void iAP2LinkRunLoopDelete(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 2) != 0)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 20;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      id v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      id v3 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315394;
      int v7 = "iAP2LinkRunLoopDelete";
      __int16 v8 = 1024;
      int v9 = 293;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "entering %s:%d", (uint8_t *)&v6, 0x12u);
    }
  }
  if (a1)
  {
    *(unsigned char *)(a1 + 44) = 1;
    iAP2LinkRunLoopInitImplementation(a1);
    iAP2LinkDelete(*(void *)(a1 + 24));
    *(void *)(a1 + 24) = 0;
  }
  else if (_iAP2LogEnableMask)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 20;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      BOOL v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v5 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      int v7 = "iAP2LinkRunLoopDelete";
      __int16 v8 = 1024;
      int v9 = 303;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d NULL linkRunLoop!", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t iAP2LinkRunLoopRunOnce(uint64_t result, uint64_t *a2, unsigned char *a3)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 44)) {
    return 0;
  }
  __int16 ResetEventMask = iAP2LinkRunLoopGetResetEventMask(result);
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7) {
    iAP2LinkRunLoopRunOnce_cold_1();
  }
  if (ResetEventMask)
  {
    iAP2LinkAttached(v7);
    if ((ResetEventMask & 2) == 0)
    {
LABEL_7:
      if ((ResetEventMask & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  else if ((ResetEventMask & 2) == 0)
  {
    goto LABEL_7;
  }
  iAP2LinkDetached(*(void *)(v3 + 24));
  if ((ResetEventMask & 4) == 0)
  {
LABEL_8:
    if ((ResetEventMask & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
LABEL_13:
  iAP2LinkHandleSuspend(*(void *)(v3 + 24));
  if ((ResetEventMask & 8) == 0)
  {
LABEL_9:
    if ((ResetEventMask & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }
LABEL_14:
  iAP2LinkHandleResume(*(void *)(v3 + 24));
  if ((ResetEventMask & 0x1000) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  if (a3)
  {
    unsigned int v8 = *a3;
    *a3 = v8 & 0x7F;
    iAP2LinkRenegotiate(*(void *)(v3 + 24), (uint64_t)a3, v8 >> 7);
  }
  else if (_iAP2LogEnableMask)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      int v9 = *(NSObject **)(gLogObjects + 152);
    }
    else
    {
      int v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "ERROR: syn == NULL!", v14, 2u);
    }
  }
LABEL_25:
  if (a2)
  {
    iAP2LinkHandleReadyPacket(*(void *)(v3 + 24), (uint64_t)a2);
    iAP2PacketRelease(a2);
  }
  if ((ResetEventMask & 0x1F0) == 0) {
    goto LABEL_33;
  }
  uint64_t CurTimeMs = iAP2TimeGetCurTimeMs();
  if ((ResetEventMask & 0x40) != 0)
  {
    iAP2LinkHandleTimeout(*(void *)(v3 + 24), CurTimeMs, 0x1Au);
    if ((ResetEventMask & 0x10) == 0)
    {
LABEL_30:
      if ((ResetEventMask & 0x20) == 0) {
        goto LABEL_31;
      }
      goto LABEL_42;
    }
  }
  else if ((ResetEventMask & 0x10) == 0)
  {
    goto LABEL_30;
  }
  iAP2LinkHandleTimeout(*(void *)(v3 + 24), CurTimeMs, 0xCu);
  if ((ResetEventMask & 0x20) == 0)
  {
LABEL_31:
    if ((ResetEventMask & 0x80) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
LABEL_42:
  iAP2LinkHandleTimeout(*(void *)(v3 + 24), CurTimeMs, 0xDu);
  if ((ResetEventMask & 0x80) != 0) {
LABEL_32:
  }
    iAP2LinkHandleTimeout(*(void *)(v3 + 24), CurTimeMs, 0xBu);
LABEL_33:
  iAP2LinkProcessSendBuff(*(void *)(v3 + 24));
  unsigned int v11 = 0;
  do
  {
    SessSendPckListCFIndex Count = iAP2LinkGetSessSendPckListCount(*(void *)(v3 + 24), v11);
    BOOL v13 = SessSendPckListCount == 0;
    BOOL result = SessSendPckListCount != 0;
    BOOL v13 = !v13 || v11++ == 4;
  }
  while (!v13);
  return result;
}

void iAP2LinkRunLoopTimeout(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 && !*(unsigned char *)(a1 + 44))
  {
    if (a3 > 12)
    {
      if (a3 == 13)
      {
        int v4 = 32;
      }
      else
      {
        if (a3 != 26) {
          return;
        }
        int v4 = 64;
      }
    }
    else if (a3 == 11)
    {
      int v4 = 128;
    }
    else
    {
      if (a3 != 12) {
        return;
      }
      int v4 = 16;
    }
    iAP2LinkRunLoopSetEventMaskBit(a1, v4);
    iAP2LinkRunLoopSignal(a1, 0, 0);
  }
}

void iAP2LinkRunLoopAttached(uint64_t a1)
{
  if (a1)
  {
    iAP2LinkRunLoopSetEventMaskBit(a1, 1);
    iAP2LinkRunLoopSignal(a1, 0, 0);
  }
}

void iAP2LinkRunLoopDetached(uint64_t a1)
{
  if (a1)
  {
    iAP2LinkRunLoopSetEventMaskBit(a1, 2);
    iAP2LinkRunLoopSignal(a1, 0, 0);
  }
}

uint64_t iAP2LinkRunLoopHandleSuspend(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    iAP2LinkRunLoopSetEventMaskBit(result, 4);
    return iAP2LinkRunLoopRunOnce(v1, 0, 0);
  }
  return result;
}

uint64_t iAP2LinkRunLoopHandleResume(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    iAP2LinkRunLoopSetEventMaskBit(result, 8);
    return iAP2LinkRunLoopRunOnce(v1, 0, 0);
  }
  return result;
}

void iAP2LinkRunLoopHandleReadyPacket(uint64_t a1, uint64_t *a2)
{
  if (a1 && !*(unsigned char *)(a1 + 44))
  {
    iAP2PacketRetain((uint64_t)a2);
    iAP2LinkRunLoopSignal(a1, a2, 0);
  }
}

BOOL iAP2LinkRunLoopQueueSendDataWithSentCallback(uint64_t a1, char *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t), unsigned __int8 a9)
{
  if (a1 && !*(unsigned char *)(a1 + 44))
  {
    uint64_t v10 = *(void *)(a1 + 24);
    return iAP2LinkQueueSendDataWithSentCallback(v10, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    if (_iAP2LogEnableMask)
    {
      if (gLogObjects) {
        BOOL v9 = gNumLogObjects < 20;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        uint64_t v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        uint64_t v12 = *(NSObject **)(gLogObjects + 152);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "iAP2LinkRunLoopQueueSendDataWithSentCallback";
        __int16 v15 = 1024;
        int v16 = 809;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d NULL linkRunLoop!", (uint8_t *)&v13, 0x12u);
      }
    }
    return 0;
  }
}

BOOL _iAP2TimeCallbackAfter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v6 = *(void *)(*(void *)(iAP2TimeGetContext(a1) + 176) + 16);
    uint64_t v7 = *(id *)(a1 + 24);
    unsigned int v8 = v7;
    if (!v7)
    {
      if (gLogObjects) {
        BOOL v9 = gNumLogObjects < 20;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        unsigned int v11 = &_os_log_default;
        id v10 = &_os_log_default;
      }
      else
      {
        unsigned int v11 = *(id *)(gLogObjects + 152);
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "iAP2 Link Timer doesn't exist, creating a new one...", buf, 2u);
      }

      unsigned int v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v6 + 24));
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = ___iAP2TimeCallbackAfter_block_invoke;
      handler[3] = &__block_descriptor_56_e5_v8__0l;
      handler[4] = v6;
      handler[5] = a3;
      handler[6] = a1;
      dispatch_source_set_event_handler(v8, handler);
    }
    if (gLogObjects) {
      BOOL v12 = gNumLogObjects < 20;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v14 = &_os_log_default;
      id v13 = &_os_log_default;
    }
    else
    {
      uint64_t v14 = *(id *)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Setting iAP2 Link Timer for %ums...", buf, 8u);
    }

    dispatch_time_t v15 = dispatch_time(0, 1000000 * a2);
    dispatch_source_set_timer(v8, v15, 0xFFFFFFFFFFFFFFFFLL, 0);
    if (!v7)
    {
      int v16 = v8;
      *(void *)(a1 + 24) = v16;
      dispatch_resume(v16);
    }
  }
  return a1 != 0;
}

uint64_t ___iAP2TimeCallbackAfter_block_invoke(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 20;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    int v4 = *(id *)(gLogObjects + 152);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = a1[4];
    int v10 = 134217984;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2 Link Timer event handler fired! pEndpoint %p", (uint8_t *)&v10, 0xCu);
  }

  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))a1[5];
  uint64_t v6 = a1[6];
  uint64_t CurTimeMs = iAP2TimeGetCurTimeMs();
  return v7(v6, CurTimeMs);
}

void _iAP2TimeCancelCallback(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 24);
    if (v1) {
      dispatch_source_set_timer(v1, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
  }
}

void _iAP2TimeCleanupCallback(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = *(NSObject **)(a1 + 24);
    if (v2)
    {
      id v3 = v2;
      dispatch_source_cancel(v2);
      BOOL v2 = v3;
      *(void *)(a1 + 24) = 0;
    }
  }
}

uint64_t iap2_navigation_startRouteGuidanceHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    int v4 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    int v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)CFStringRef v52 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2Navigation StartRouteGuidance Handler %@", buf, 0xCu);
  }
  uint64_t v6 = 0;
  if (a1 && a2)
  {
    uint64_t v46 = a1;
    unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
    int v50 = 0;
    CFArrayRef theArray = CFArrayCreateMutable(kCFAllocatorDefault, 1, &kCFTypeArrayCallBacks);
    if (FirstParam)
    {
      char v48 = 0;
      int v49 = 0;
      char v8 = 0;
      char v9 = 0;
      char v10 = 0;
      char v11 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
        switch(ParamID)
        {
          case 0:
            *(_WORD *)buf = -21846;
            *(_WORD *)buf = iAP2MsgGetDataAsU16(FirstParam, &v50);
            if (!v50)
            {
              CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              CFArrayAppendValue(theArray, v13);
              if (v13) {
                CFRelease(v13);
              }
              ++v49;
              goto LABEL_42;
            }
            uint64_t v35 = logObjectForModule_12();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
              iap2_navigation_startRouteGuidanceHandler_cold_4(a2);
            }
            goto LABEL_100;
          case 1:
            if (!iAP2MsgIsDataVoid(FirstParam))
            {
              unsigned int v36 = logObjectForModule_12();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_6(a2);
              }
              goto LABEL_100;
            }
            if (v11)
            {
              int v41 = logObjectForModule_12();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_5(a2);
              }
              goto LABEL_100;
            }
            char v11 = 1;
            goto LABEL_42;
          case 2:
            if (!iAP2MsgIsDataVoid(FirstParam))
            {
              BOOL v37 = logObjectForModule_12();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_8(a2);
              }
              goto LABEL_100;
            }
            if (v10)
            {
              BOOL v42 = logObjectForModule_12();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_7(a2);
              }
              goto LABEL_100;
            }
            char v10 = 1;
            goto LABEL_42;
          case 3:
            if (!iAP2MsgIsDataVoid(FirstParam))
            {
              unsigned int v38 = logObjectForModule_12();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_10(a2);
              }
              goto LABEL_100;
            }
            if (v9)
            {
              BOOL v43 = logObjectForModule_12();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_9(a2);
              }
              goto LABEL_100;
            }
            char v9 = 1;
            goto LABEL_42;
          case 4:
            if (!iAP2MsgIsDataVoid(FirstParam))
            {
              uint64_t v39 = logObjectForModule_12();
              if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_12(a2);
              }
              goto LABEL_100;
            }
            if (v8)
            {
              uint64_t v44 = logObjectForModule_12();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_11(a2);
              }
              goto LABEL_100;
            }
            char v8 = 1;
            goto LABEL_42;
          case 5:
            if (!iAP2MsgIsDataVoid(FirstParam))
            {
              CFStringRef v40 = logObjectForModule_12();
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_14(a2);
              }
              goto LABEL_100;
            }
            if (v48)
            {
              uint64_t v45 = logObjectForModule_12();
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_13(a2);
              }
              goto LABEL_100;
            }
            char v48 = 1;
LABEL_35:
            uint64_t v14 = gLogObjects;
            int v15 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 47)
            {
              int v16 = *(NSObject **)(gLogObjects + 368);
            }
            else
            {
              int v16 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)CFStringRef v52 = v14;
                *(_WORD *)&v52[8] = 1024;
                int v53 = v15;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
            }
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)CFStringRef v52 = ParamID;
              *(_WORD *)&v52[4] = 1024;
              *(_DWORD *)&v52[6] = MsgID;
              _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
            }
LABEL_42:
            unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0, FirstParam);
            if (!FirstParam) {
              goto LABEL_45;
            }
            break;
          default:
            goto LABEL_35;
        }
      }
    }
    char v11 = 0;
    char v10 = 0;
    char v9 = 0;
    char v8 = 0;
    char v48 = 0;
    int v49 = 0;
LABEL_45:
    if (gLogObjects && gNumLogObjects >= 47)
    {
      uint64_t v18 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      uint64_t v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(v46 + 8);
      *(_DWORD *)buf = 138412290;
      *(void *)CFStringRef v52 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "iAP2Navigation StartRouteGuidance: %@", buf, 0xCu);
    }
    uint64_t Feature = iap2_feature_getFeature(v46, 0x11u);
    if (!Feature
      || (int v21 = (unsigned char *)Feature,
          buf[0] = 0,
          !iap2_identification_checkRequiredMsgIDs(v46, (uint64_t)&gskMsgNavigationMainList, 5, buf)))
    {
LABEL_100:
      uint64_t v6 = 0;
      int v23 = theArray;
      if (!theArray) {
        return v6;
      }
      goto LABEL_76;
    }
    v21[16] = v11 & 1;
    v21[17] = v10 & 1;
    v21[18] = v9 & 1;
    v21[19] = iap2_identification_isIdentifiedForOutgoingMessageID(v46, 0x5204u);
    v21[20] = v8 & 1;
    v21[21] = v48 & 1;
    if (gLogObjects && gNumLogObjects >= 47)
    {
      int v22 = *(NSObject **)(gLogObjects + 368);
      int v23 = theArray;
      int v24 = v49;
    }
    else
    {
      int v22 = &_os_log_default;
      int v23 = theArray;
      int v24 = v49;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
      iap2_navigation_startRouteGuidanceHandler_cold_1((uint64_t)v23, v22, v25, v26, v27, v28, v29, v30);
    }
    uint64_t v31 = v21[16];
    if (v21[17]) {
      v31 |= 2uLL;
    }
    if (v21[18]) {
      v31 |= 4uLL;
    }
    if (v21[19]) {
      v31 |= 8uLL;
    }
    if (v21[20]) {
      v31 |= 0x10uLL;
    }
    if (v21[21]) {
      uint64_t v32 = v31 | 0x20;
    }
    else {
      uint64_t v32 = v31;
    }
    if (v24 <= 0) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = (uint64_t)v23;
    }
    platform_navigation_startRouteGuidance(*(void *)(v46 + 8), v33, v32);
    uint64_t v6 = 1;
    if (v23) {
LABEL_76:
    }
      CFRelease(v23);
  }
  return v6;
}

void *logObjectForModule_12()
{
  if (gLogObjects && gNumLogObjects >= 47) {
    return *(void **)(gLogObjects + 368);
  }
  CFStringRef v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t iap2_navigation_stopRouteGuidanceHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    int v4 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    int v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)uint64_t v32 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2Navigation StopRouteGuidance Handler %@", buf, 0xCu);
  }
  uint64_t v6 = 0;
  if (!a1 || !a2) {
    return v6;
  }
  uint64_t v29 = a1;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
  int v30 = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1, &kCFTypeArrayCallBacks);
  for (i = 0; FirstParam; unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0, FirstParam))
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    if (ParamID)
    {
      int v11 = ParamID;
      uint64_t v12 = gLogObjects;
      int v13 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 47)
      {
        uint64_t v14 = *(NSObject **)(gLogObjects + 368);
      }
      else
      {
        uint64_t v14 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v32 = v12;
          *(_WORD *)&v32[8] = 1024;
          int v33 = v13;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          uint64_t v14 = &_os_log_default;
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        int MsgID = iAP2MsgGetMsgID(a2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)uint64_t v32 = v11;
        *(_WORD *)&v32[4] = 1024;
        *(_DWORD *)&v32[6] = MsgID;
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
      }
    }
    else
    {
      *(_WORD *)buf = -21846;
      *(_WORD *)buf = iAP2MsgGetDataAsU16(FirstParam, &v30);
      if (v30)
      {
        uint64_t v28 = logObjectForModule_12();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
          iap2_navigation_startRouteGuidanceHandler_cold_4(a2);
        }
LABEL_51:
        uint64_t v6 = 0;
        if (!Mutable) {
          return v6;
        }
LABEL_47:
        CFRelease(Mutable);
        return v6;
      }
      CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
      CFArrayAppendValue(Mutable, v15);
      if (v15) {
        CFRelease(v15);
      }
      ++i;
    }
  }
  if (gLogObjects && gNumLogObjects >= 47)
  {
    CFDataRef v17 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    CFDataRef v17 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    uint64_t v18 = *(void *)(v29 + 8);
    *(_DWORD *)buf = 138412290;
    *(void *)uint64_t v32 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "iAP2Navigation StopRouteGuidance: %@", buf, 0xCu);
  }
  if (!iap2_feature_getFeature(v29, 0x11u)) {
    goto LABEL_51;
  }
  buf[0] = 0;
  if (!iap2_identification_checkRequiredMsgIDs(v29, (uint64_t)&gskMsgNavigationMainList, 5, buf)) {
    goto LABEL_51;
  }
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v19 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    uint64_t v19 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
    iap2_navigation_stopRouteGuidanceHandler_cold_1((uint64_t)Mutable, v19, v20, v21, v22, v23, v24, v25);
  }
  if (i <= 0) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = (uint64_t)Mutable;
  }
  platform_navigation_stopRouteGuidance(*(void *)(v29 + 8), v26);
  uint64_t v6 = 1;
  if (Mutable) {
    goto LABEL_47;
  }
  return v6;
}

uint64_t iap2_navigation_roadObjectDetectionUpdateHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    int v4 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    int v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2Navigation RoadObjectDetectionUpdate Handler %@", buf, 0xCu);
  }
  uint64_t v6 = 0;
  uint64_t v7 = &off_1001B7000;
  if (!a1 || !a2) {
    goto LABEL_85;
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  int v55 = 0;
  if (!FirstParam)
  {
    CFDictionaryRef ObjectDetectionInfoDict = 0;
LABEL_66:
    if (gLogObjects && gNumLogObjects >= 47)
    {
      int v33 = *(NSObject **)(gLogObjects + 368);
      uint64_t v7 = &off_1001B7000;
    }
    else
    {
      int v33 = &_os_log_default;
      uint64_t v7 = &off_1001B7000;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
      iap2_navigation_roadObjectDetectionUpdateHandler_cold_3(a1, v33, v34, v35, v36, v37, v38, v39);
    }
    if (!iap2_feature_getFeature(a1, 0x11u)) {
      goto LABEL_113;
    }
    buf[0] = 0;
    if (!iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgNavigationMainList, 5, buf)
      || !ObjectDetectionInfoDict)
    {
      goto LABEL_113;
    }
    unsigned int Item = platform_navigation_objectDetectionInfoGetItem(ObjectDetectionInfoDict, 0);
    if (gLogObjects && gNumLogObjects >= 47)
    {
      int v41 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      int v41 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      uint64_t v42 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412802;
      *(void *)&uint8_t buf[4] = v42;
      *(_WORD *)&uint8_t buf[12] = 2112;
      id v57 = Item;
      __int16 v58 = 2112;
      CFDictionaryRef v59 = ObjectDetectionInfoDict;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "iAP2Navigation RoadObjectDetectionUpdate: %@ componentIdList: %@ updateInfo: %@", buf, 0x20u);
    }
    platform_navigation_objectDetectionUpdateInfo(*(void *)(a1 + 8), 0, (uint64_t)ObjectDetectionInfoDict);
    uint64_t v43 = 1;
    goto LABEL_84;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  CFDictionaryRef ObjectDetectionInfoDict = 0;
  while (2)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    uint64_t v12 = gLogObjects;
    int v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 47)
    {
      uint64_t v14 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      uint64_t v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&uint8_t buf[12] = 1024;
        LODWORD(v57) = v13;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        uint64_t v14 = &_os_log_default;
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v31 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&uint8_t buf[12] = 1024;
      LODWORD(v57) = ParamID;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "iAP2Navigation RoadObjectDetectionUpdate Handler %@, process paramID=%d", buf, 0x12u);
    }
    switch(ParamID)
    {
      case 0:
        __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v55);
        if (!v55)
        {
          __int16 v16 = DataAsU16;
          if (!ObjectDetectionInfoDict) {
            CFDictionaryRef ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
          }
          platform_navigation_objectDetectionInfoAddComponentID(ObjectDetectionInfoDict, v16);
          goto LABEL_63;
        }
        int v47 = logObjectForModule_12();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
          iap2_navigation_startRouteGuidanceHandler_cold_4(a2);
        }
        goto LABEL_112;
      case 1:
        unint64_t DataAsU64 = iAP2MsgGetDataAsU64(NextParam, &v55);
        if (v55)
        {
          char v48 = logObjectForModule_12();
          uint64_t v7 = &off_1001B7000;
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG)) {
            iap2_navigation_startRouteGuidanceHandler_cold_6(a2);
          }
          goto LABEL_113;
        }
        uint64_t v21 = DataAsU64;
        if (platform_navigation_objectDetectionInfoGetItem(ObjectDetectionInfoDict, 1)) {
          goto LABEL_112;
        }
        if (!ObjectDetectionInfoDict) {
          CFDictionaryRef ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
        }
        platform_navigation_objectDetectionInfoSetTimestamp(ObjectDetectionInfoDict, v21);
        goto LABEL_63;
      case 2:
        int DataAsU32 = iAP2MsgGetDataAsU32(NextParam, &v55);
        if (v55)
        {
          int v49 = logObjectForModule_12();
          uint64_t v7 = &off_1001B7000;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
            iap2_navigation_startRouteGuidanceHandler_cold_8(a2);
          }
          goto LABEL_113;
        }
        int v23 = DataAsU32;
        if (platform_navigation_objectDetectionInfoGetItem(ObjectDetectionInfoDict, 2)) {
          goto LABEL_112;
        }
        if (!ObjectDetectionInfoDict) {
          CFDictionaryRef ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
        }
        platform_navigation_objectDetectionInfoSetEgoSpeed(ObjectDetectionInfoDict, v23);
        goto LABEL_63;
      case 3:
        *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
        int DataAsArrayI32 = iAP2MsgGetDataAsArrayI32(NextParam, &v55, buf, 2);
        if (v55)
        {
          int v50 = logObjectForModule_12();
          if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_112;
          }
        }
        else
        {
          if (DataAsArrayI32 == 2)
          {
            if (platform_navigation_objectDetectionInfoGetItem(ObjectDetectionInfoDict, 3)) {
              goto LABEL_112;
            }
            int v25 = *(_DWORD *)buf;
            int v26 = *(_DWORD *)&buf[4];
            if (!ObjectDetectionInfoDict) {
              CFDictionaryRef ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
            }
            platform_navigation_objectDetectionInfoSetEgoYawRate(ObjectDetectionInfoDict, (float)v25 / (float)v26);
            goto LABEL_63;
          }
          uint64_t v54 = logObjectForModule_12();
          if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_112;
          }
        }
        iap2_navigation_startRouteGuidanceHandler_cold_10(a2);
        goto LABEL_112;
      case 4:
        uint64_t v27 = _parseRoadSignParameter(a1, a2, NextParam, &v55);
        uint64_t v28 = v27;
        if (v55)
        {
          CFRelease(v27);
          id v51 = logObjectForModule_12();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG)) {
            iap2_navigation_startRouteGuidanceHandler_cold_12(a2);
          }
          goto LABEL_112;
        }
        if (!ObjectDetectionInfoDict) {
          CFDictionaryRef ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
        }
        platform_navigation_objectDetectionInfoAddRoadSign(ObjectDetectionInfoDict, v28);
        goto LABEL_58;
      case 5:
        uint64_t v29 = _parseRoadLaneParameter(a1, a2, NextParam, &v55);
        uint64_t v28 = v29;
        if (v55)
        {
          CFRelease(v29);
          CFStringRef v52 = logObjectForModule_12();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG)) {
            iap2_navigation_startRouteGuidanceHandler_cold_14(a2);
          }
          goto LABEL_112;
        }
        if (!ObjectDetectionInfoDict) {
          CFDictionaryRef ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
        }
        platform_navigation_objectDetectionInfoAddRoadLane(ObjectDetectionInfoDict, v28);
        goto LABEL_58;
      case 6:
        int v30 = _parseRoadObjectParameter(a1, a2, NextParam, &v55);
        uint64_t v28 = v30;
        if (!v55)
        {
          if (!ObjectDetectionInfoDict) {
            CFDictionaryRef ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
          }
          platform_navigation_objectDetectionInfoAddRoadObject(ObjectDetectionInfoDict, v28);
LABEL_58:
          CFRelease(v28);
LABEL_63:
          NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
          if (!NextParam) {
            goto LABEL_66;
          }
          continue;
        }
        CFRelease(v30);
        int v53 = logObjectForModule_12();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG)) {
          iap2_navigation_roadObjectDetectionUpdateHandler_cold_12(a2);
        }
LABEL_112:
        uint64_t v7 = &off_1001B7000;
LABEL_113:
        uint64_t v43 = 0;
        uint64_t v6 = 0;
        if (ObjectDetectionInfoDict)
        {
LABEL_84:
          CFRelease(ObjectDetectionInfoDict);
          uint64_t v6 = v43;
        }
LABEL_85:
        if (gLogObjects && gNumLogObjects >= 47)
        {
          uint64_t v44 = *(NSObject **)(gLogObjects + 368);
        }
        else
        {
          uint64_t v44 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          if (a1) {
            uint64_t v45 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v45 = 0;
          }
          *(_DWORD *)buf = *((void *)v7 + 381);
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&uint8_t buf[12] = 1024;
          LODWORD(v57) = v6;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "iAP2Navigation RoadObjectDetectionUpdate Handler %@, EXIT result=%d", buf, 0x12u);
        }
        return v6;
      default:
        uint64_t v17 = gLogObjects;
        int v18 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 47)
        {
          uint64_t v19 = *(NSObject **)(gLogObjects + 368);
        }
        else
        {
          uint64_t v19 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v17;
            *(_WORD *)&uint8_t buf[12] = 1024;
            LODWORD(v57) = v18;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            uint64_t v19 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = ParamID;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = MsgID;
          _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
        }
        goto LABEL_63;
    }
  }
}

unsigned __int16 *_parseRoadSignParameter(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int *a4)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    char v8 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    char v8 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      uint64_t v22 = *(void *)(a1 + 8);
      if (a2)
      {
LABEL_58:
        int MsgID = iAP2MsgGetMsgID(a2);
        if (a3)
        {
LABEL_59:
          int ParamID = iAP2MsgGetParamID((uint64_t)a3);
LABEL_63:
          int valuePtr = 138412802;
          uint64_t v46 = v22;
          __int16 v47 = 1024;
          int v48 = MsgID;
          __int16 v49 = 1024;
          int v50 = ParamID;
          _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "_parseRoadSignParameter: %@, message 0x%04X, param 0x%04X", (uint8_t *)&valuePtr, 0x18u);
          goto LABEL_7;
        }
LABEL_62:
        int ParamID = 0;
        goto LABEL_63;
      }
    }
    else
    {
      uint64_t v22 = 0;
      if (a2) {
        goto LABEL_58;
      }
    }
    int MsgID = 0;
    if (a3) {
      goto LABEL_59;
    }
    goto LABEL_62;
  }
LABEL_7:
  unint64_t FirstParam = 0;
  int v10 = -1;
  if (!a1 || !a2 || !a3) {
    goto LABEL_55;
  }
  BOOL v44 = 0;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, a3);
  if (!FirstParam) {
    goto LABEL_54;
  }
  CFNumberRef v38 = 0;
  uint64_t v37 = a4;
  CFNumberRef v42 = 0;
  CFNumberRef v43 = 0;
  CFNumberRef v40 = 0;
  CFStringRef v41 = 0;
  CFNumberRef cf = 0;
  while (2)
  {
    int v11 = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v12 = gLogObjects;
    int v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 47)
    {
      uint64_t v14 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      uint64_t v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int valuePtr = 134218240;
        uint64_t v46 = v12;
        __int16 v47 = 1024;
        int v48 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&valuePtr, 0x12u);
        uint64_t v14 = &_os_log_default;
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void *)(a1 + 8);
      int valuePtr = 138412546;
      uint64_t v46 = v16;
      __int16 v47 = 1024;
      int v48 = v11;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "_parseRoadSignParameter: %@, process paramID=%d", (uint8_t *)&valuePtr, 0x12u);
    }
    switch(v11)
    {
      case 0:
        int valuePtr = -1431655766;
        int valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v44);
        if (v44)
        {
          uint64_t v29 = logObjectForModule_12();
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
          goto LABEL_73;
        }
        if (!v38)
        {
          CFNumberRef v38 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_38;
        }
        uint64_t v32 = logObjectForModule_12();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
LABEL_73:
          _parseRoadSignParameter_cold_1();
          goto LABEL_86;
        }
        goto LABEL_86;
      case 1:
        LOBYTE(valuePtr) = -86;
        LOBYTE(valuePtr) = iAP2MsgGetDataAsU8(FirstParam, &v44);
        if (!v44)
        {
          if (!cf)
          {
            CFNumberRef cf = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
            goto LABEL_38;
          }
          uint64_t v34 = logObjectForModule_12();
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
          goto LABEL_67;
        }
        int v26 = logObjectForModule_12();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
LABEL_67:
          _parseRoadSignParameter_cold_3();
          goto LABEL_86;
        }
        goto LABEL_86;
      case 2:
        LOBYTE(valuePtr) = -86;
        LOBYTE(valuePtr) = iAP2MsgGetDataAsU8(FirstParam, &v44);
        if (v44)
        {
          int v25 = logObjectForModule_12();
          if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
LABEL_86:
            a4 = v37;
            goto LABEL_87;
          }
        }
        else
        {
          if (!v40)
          {
            CFNumberRef v40 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
            goto LABEL_38;
          }
          uint64_t v31 = logObjectForModule_12();
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
        }
        _parseRoadSignParameter_cold_5();
        goto LABEL_86;
      case 3:
        CFStringRef v15 = iAP2MsgCopyDataAsCFString(FirstParam, &v44);
        if (v44)
        {
          uint64_t v27 = logObjectForModule_12();
          a4 = v37;
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_87;
          }
        }
        else
        {
          if (!v41)
          {
            CFStringRef v41 = v15;
            goto LABEL_38;
          }
          uint64_t v36 = logObjectForModule_12();
          a4 = v37;
          if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          {
LABEL_87:
            int v18 = 0;
            ObjectDetectionRoadSignDict = 0;
            int v20 = 0;
            unint64_t FirstParam = 0;
            CFNumberRef v19 = v38;
            if (v38)
            {
LABEL_41:
              CFRelease(v19);
              int v20 = v18;
              unint64_t FirstParam = (unsigned __int16 *)ObjectDetectionRoadSignDict;
            }
            goto LABEL_42;
          }
        }
        _parseRoadSignParameter_cold_7();
        goto LABEL_87;
      case 4:
        int valuePtr = -1431655766;
        int valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v44);
        if (v44)
        {
          uint64_t v28 = logObjectForModule_12();
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
        }
        else
        {
          if (!v42)
          {
            CFNumberRef v42 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
            goto LABEL_38;
          }
          int v33 = logObjectForModule_12();
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
        }
        _parseRoadSignParameter_cold_9();
        goto LABEL_86;
      case 5:
        int valuePtr = -1431655766;
        int valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v44);
        if (v44)
        {
          int v30 = logObjectForModule_12();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
LABEL_85:
          _parseRoadSignParameter_cold_11();
          goto LABEL_86;
        }
        if (v43)
        {
          uint64_t v35 = logObjectForModule_12();
          if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
          goto LABEL_85;
        }
        CFNumberRef v43 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
LABEL_38:
        unint64_t FirstParam = iAP2MsgGetNextParam(a2, a3, FirstParam);
        if (FirstParam) {
          continue;
        }
        unint64_t FirstParam = (unsigned __int16 *)v38;
        if (v38)
        {
          ObjectDetectionRoadSignDict = platform_navigation_createObjectDetectionRoadSignDict(*(CFMutableDictionaryRef *)(a1 + 8));
          platform_navigation_objectDetectionRoadSignSetInfo(ObjectDetectionRoadSignDict, 0, v38);
          int v18 = 1;
          platform_navigation_objectDetectionRoadSignSetInfo(ObjectDetectionRoadSignDict, 1, cf);
          platform_navigation_objectDetectionRoadSignSetInfo(ObjectDetectionRoadSignDict, 2, v40);
          platform_navigation_objectDetectionRoadSignSetInfo(ObjectDetectionRoadSignDict, 3, v41);
          platform_navigation_objectDetectionRoadSignSetInfo(ObjectDetectionRoadSignDict, 4, v42);
          platform_navigation_objectDetectionRoadSignSetInfo(ObjectDetectionRoadSignDict, 5, v43);
          a4 = v37;
          CFNumberRef v19 = v38;
          goto LABEL_41;
        }
        int v20 = 0;
        a4 = v37;
LABEL_42:
        if (cf) {
          CFRelease(cf);
        }
        if (v40) {
          CFRelease(v40);
        }
        if (v41) {
          CFRelease(v41);
        }
        if (v42) {
          CFRelease(v42);
        }
        if (v43)
        {
          CFRelease(v43);
          if (v20) {
            goto LABEL_52;
          }
LABEL_54:
          int v10 = -1;
        }
        else
        {
          if (!v20) {
            goto LABEL_54;
          }
LABEL_52:
          int v10 = 0;
        }
LABEL_55:
        *a4 = v10;
        return FirstParam;
      default:
        goto LABEL_38;
    }
  }
}

unsigned __int16 *_parseRoadLaneParameter(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int *a4)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    char v8 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    char v8 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      uint64_t v24 = *(void *)(a1 + 8);
      if (a2)
      {
LABEL_81:
        int MsgID = iAP2MsgGetMsgID(a2);
        if (a3)
        {
LABEL_82:
          int ParamID = iAP2MsgGetParamID((uint64_t)a3);
LABEL_86:
          *(_DWORD *)int valuePtr = 138412802;
          *(void *)&valuePtr[4] = v24;
          __int16 v65 = 1024;
          int v66 = MsgID;
          __int16 v67 = 1024;
          int v68 = ParamID;
          _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "_parseRoadLaneParameter: %@, message 0x%04X, param 0x%04X", valuePtr, 0x18u);
          goto LABEL_7;
        }
LABEL_85:
        int ParamID = 0;
        goto LABEL_86;
      }
    }
    else
    {
      uint64_t v24 = 0;
      if (a2) {
        goto LABEL_81;
      }
    }
    int MsgID = 0;
    if (a3) {
      goto LABEL_82;
    }
    goto LABEL_85;
  }
LABEL_7:
  unint64_t FirstParam = 0;
  int v10 = -1;
  if (!a1 || !a2 || !a3) {
    goto LABEL_78;
  }
  int v63 = 0;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, a3);
  if (!FirstParam) {
    goto LABEL_77;
  }
  uint64_t v51 = a1;
  CFNumberRef v52 = 0;
  int v50 = a4;
  CFNumberRef v54 = 0;
  CFNumberRef v55 = 0;
  CFNumberRef v53 = 0;
  CFNumberRef v60 = 0;
  CFNumberRef v61 = 0;
  CFNumberRef v58 = 0;
  CFNumberRef v59 = 0;
  CFNumberRef cf = 0;
  CFNumberRef v57 = 0;
  while (2)
  {
    int v11 = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v12 = gLogObjects;
    int v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 47)
    {
      uint64_t v14 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      uint64_t v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int valuePtr = 134218240;
        *(void *)&valuePtr[4] = v12;
        __int16 v65 = 1024;
        int v66 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", valuePtr, 0x12u);
        uint64_t v14 = &_os_log_default;
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(v51 + 8);
      *(_DWORD *)int valuePtr = 138412546;
      *(void *)&valuePtr[4] = v18;
      __int16 v65 = 1024;
      int v66 = v11;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "_parseRoadLaneParameter: %@, process paramID=%d", valuePtr, 0x12u);
    }
    switch(v11)
    {
      case 0:
        *(_DWORD *)int valuePtr = -1431655766;
        *(_DWORD *)int valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v63);
        if (v63)
        {
          uint64_t v36 = logObjectForModule_12();
          if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_106;
        }
        if (!v52)
        {
          CFNumberRef v52 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, valuePtr);
          goto LABEL_53;
        }
        uint64_t v37 = logObjectForModule_12();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
LABEL_106:
          _parseRoadSignParameter_cold_1();
          goto LABEL_133;
        }
        goto LABEL_133;
      case 1:
        valuePtr[0] = -86;
        valuePtr[0] = iAP2MsgGetDataAsU8(FirstParam, &v63);
        if (v63)
        {
          uint64_t v28 = logObjectForModule_12();
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_90;
        }
        if (!cf)
        {
          CFNumberRef cf = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, valuePtr);
          goto LABEL_53;
        }
        uint64_t v46 = logObjectForModule_12();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
        {
LABEL_90:
          _parseRoadSignParameter_cold_3();
          goto LABEL_133;
        }
        goto LABEL_133;
      case 2:
        valuePtr[0] = -86;
        valuePtr[0] = iAP2MsgGetDataAsU8(FirstParam, &v63);
        if (v63)
        {
          int v33 = logObjectForModule_12();
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_100;
        }
        if (!v57)
        {
          CFNumberRef v57 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, valuePtr);
          goto LABEL_53;
        }
        BOOL v44 = logObjectForModule_12();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
LABEL_100:
          _parseRoadSignParameter_cold_5();
          goto LABEL_133;
        }
        goto LABEL_133;
      case 3:
        valuePtr[0] = -86;
        valuePtr[0] = iAP2MsgGetDataAsU8(FirstParam, &v63);
        if (v63)
        {
          uint64_t v34 = logObjectForModule_12();
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_102;
        }
        if (!v58)
        {
          CFNumberRef v58 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, valuePtr);
          goto LABEL_53;
        }
        CFStringRef v41 = logObjectForModule_12();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
LABEL_102:
          _parseRoadSignParameter_cold_7();
          goto LABEL_133;
        }
        goto LABEL_133;
      case 4:
        valuePtr[0] = -86;
        valuePtr[0] = iAP2MsgGetDataAsU8(FirstParam, &v63);
        if (v63)
        {
          uint64_t v32 = logObjectForModule_12();
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_98;
        }
        if (!v59)
        {
          CFNumberRef v59 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, valuePtr);
          goto LABEL_53;
        }
        uint64_t v39 = logObjectForModule_12();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
LABEL_98:
          _parseRoadSignParameter_cold_9();
          goto LABEL_133;
        }
        goto LABEL_133;
      case 5:
        valuePtr[0] = -86;
        valuePtr[0] = iAP2MsgGetDataAsU8(FirstParam, &v63);
        if (v63)
        {
          int v30 = logObjectForModule_12();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_94;
        }
        if (!v60)
        {
          CFNumberRef v60 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, valuePtr);
          goto LABEL_53;
        }
        CFNumberRef v38 = logObjectForModule_12();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
LABEL_94:
          _parseRoadSignParameter_cold_11();
          goto LABEL_133;
        }
        goto LABEL_133;
      case 6:
        *(_DWORD *)int valuePtr = -1431655766;
        *(_DWORD *)int valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v63);
        if (v63)
        {
          uint64_t v31 = logObjectForModule_12();
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_96;
        }
        if (!v61)
        {
          CFNumberRef v61 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, valuePtr);
          goto LABEL_53;
        }
        CFNumberRef v43 = logObjectForModule_12();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
        {
LABEL_96:
          _parseRoadLaneParameter_cold_13();
          goto LABEL_133;
        }
        goto LABEL_133;
      case 7:
        *(void *)int valuePtr = 0xAAAAAAAAAAAAAAAALL;
        int DataAsArrayI32 = iAP2MsgGetDataAsArrayI32(FirstParam, &v63, valuePtr, 2);
        if (v63)
        {
          uint64_t v35 = logObjectForModule_12();
          if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_130;
        }
        if (DataAsArrayI32 != 2)
        {
          CFNumberRef v42 = logObjectForModule_12();
          if (!os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_130;
        }
        if (!v53)
        {
          float v62 = (float)*(int *)valuePtr / (float)*(int *)&valuePtr[4];
          CFNumberRef v53 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &v62);
          goto LABEL_53;
        }
        int v48 = logObjectForModule_12();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
LABEL_130:
          _parseRoadLaneParameter_cold_15();
          goto LABEL_133;
        }
        goto LABEL_133;
      case 8:
        *(void *)int valuePtr = 0xAAAAAAAAAAAAAAAALL;
        int v17 = iAP2MsgGetDataAsArrayI32(FirstParam, &v63, valuePtr, 2);
        if (v63)
        {
          uint64_t v27 = logObjectForModule_12();
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
LABEL_128:
          _parseRoadLaneParameter_cold_18();
          goto LABEL_133;
        }
        if (v17 != 2)
        {
          CFNumberRef v40 = logObjectForModule_12();
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_128;
        }
        if (v54)
        {
          __int16 v47 = logObjectForModule_12();
          if (!os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_128;
        }
        float v62 = (float)*(int *)valuePtr / (float)*(int *)&valuePtr[4];
        CFNumberRef v54 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &v62);
LABEL_53:
        unint64_t FirstParam = iAP2MsgGetNextParam(a2, a3, FirstParam);
        if (FirstParam) {
          continue;
        }
        CFNumberRef v19 = v52;
        if (v52)
        {
          ObjectDetectionRoadSignDict = platform_navigation_createObjectDetectionRoadSignDict(*(CFMutableDictionaryRef *)(v51 + 8));
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 0, v52);
          int v21 = 1;
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 1, cf);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 2, v57);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 3, v58);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 4, v59);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 5, v60);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 6, v61);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 7, v53);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 8, v54);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 7, v55);
          a4 = v50;
          goto LABEL_56;
        }
        int v22 = 0;
        unint64_t FirstParam = 0;
        a4 = v50;
LABEL_57:
        if (cf) {
          CFRelease(cf);
        }
        if (v57) {
          CFRelease(v57);
        }
        if (v58) {
          CFRelease(v58);
        }
        if (v59) {
          CFRelease(v59);
        }
        if (v60) {
          CFRelease(v60);
        }
        if (v61) {
          CFRelease(v61);
        }
        if (v53) {
          CFRelease(v53);
        }
        if (v54) {
          CFRelease(v54);
        }
        if (v55)
        {
          CFRelease(v55);
          if (v22) {
            goto LABEL_75;
          }
LABEL_77:
          int v10 = -1;
        }
        else
        {
          if (!v22) {
            goto LABEL_77;
          }
LABEL_75:
          int v10 = 0;
        }
LABEL_78:
        *a4 = v10;
        return FirstParam;
      case 9:
        *(void *)int valuePtr = 0xAAAAAAAAAAAAAAAALL;
        int v15 = iAP2MsgGetDataAsArrayI32(FirstParam, &v63, valuePtr, 2);
        if (v63)
        {
          uint64_t v29 = logObjectForModule_12();
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
        }
        else if (v15 == 2)
        {
          if (!v55)
          {
            float v62 = (float)*(int *)valuePtr / (float)*(int *)&valuePtr[4];
            CFNumberRef v55 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &v62);
            goto LABEL_53;
          }
          __int16 v49 = logObjectForModule_12();
          if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
          {
LABEL_133:
            a4 = v50;
            CFNumberRef v19 = v52;
            int v21 = 0;
            ObjectDetectionRoadSignDict = 0;
            int v22 = 0;
            unint64_t FirstParam = 0;
            if (v52)
            {
LABEL_56:
              CFRelease(v19);
              int v22 = v21;
              unint64_t FirstParam = (unsigned __int16 *)ObjectDetectionRoadSignDict;
            }
            goto LABEL_57;
          }
        }
        else
        {
          uint64_t v45 = logObjectForModule_12();
          if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
        }
        _parseRoadLaneParameter_cold_21();
        goto LABEL_133;
      default:
        goto LABEL_53;
    }
  }
}

unsigned __int16 *_parseRoadObjectParameter(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int *a4)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    char v8 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    char v8 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      uint64_t v21 = *(void *)(a1 + 8);
      if (a2)
      {
LABEL_78:
        int MsgID = iAP2MsgGetMsgID(a2);
        if (a3)
        {
LABEL_79:
          int ParamID = iAP2MsgGetParamID((uint64_t)a3);
LABEL_83:
          int valuePtr = 138412802;
          uint64_t v58 = v21;
          __int16 v59 = 1024;
          int v60 = MsgID;
          __int16 v61 = 1024;
          int v62 = ParamID;
          _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "_parseRoadObjectParameter: %@, message 0x%04X, param 0x%04X", (uint8_t *)&valuePtr, 0x18u);
          goto LABEL_7;
        }
LABEL_82:
        int ParamID = 0;
        goto LABEL_83;
      }
    }
    else
    {
      uint64_t v21 = 0;
      if (a2) {
        goto LABEL_78;
      }
    }
    int MsgID = 0;
    if (a3) {
      goto LABEL_79;
    }
    goto LABEL_82;
  }
LABEL_7:
  unint64_t FirstParam = 0;
  int v10 = -1;
  if (!a1 || !a2 || !a3) {
    goto LABEL_75;
  }
  int v56 = 0;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, a3);
  if (!FirstParam) {
    goto LABEL_74;
  }
  uint64_t v45 = a1;
  CFNumberRef v46 = 0;
  BOOL v44 = a4;
  CFNumberRef v54 = 0;
  CFNumberRef v55 = 0;
  CFNumberRef v52 = 0;
  CFNumberRef v53 = 0;
  CFNumberRef v50 = 0;
  CFNumberRef v51 = 0;
  CFNumberRef v48 = 0;
  CFNumberRef v49 = 0;
  CFNumberRef cf = 0;
  while (2)
  {
    int v11 = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v12 = gLogObjects;
    int v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 47)
    {
      uint64_t v14 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      uint64_t v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int valuePtr = 134218240;
        uint64_t v58 = v12;
        __int16 v59 = 1024;
        int v60 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&valuePtr, 0x12u);
        uint64_t v14 = &_os_log_default;
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(v45 + 8);
      int valuePtr = 138412546;
      uint64_t v58 = v15;
      __int16 v59 = 1024;
      int v60 = v11;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "_parseRoadObjectParameter: %@, process paramID=%d", (uint8_t *)&valuePtr, 0x12u);
    }
    switch(v11)
    {
      case 0:
        int valuePtr = -1431655766;
        int valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          uint64_t v29 = logObjectForModule_12();
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_95;
        }
        if (!v46)
        {
          CFNumberRef v46 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_50;
        }
        uint64_t v39 = logObjectForModule_12();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
LABEL_95:
          _parseRoadSignParameter_cold_1();
          goto LABEL_124;
        }
        goto LABEL_124;
      case 1:
        LOBYTE(valuePtr) = -86;
        LOBYTE(valuePtr) = iAP2MsgGetDataAsU8(FirstParam, &v56);
        if (v56)
        {
          uint64_t v27 = logObjectForModule_12();
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_91;
        }
        if (!cf)
        {
          CFNumberRef cf = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_50;
        }
        CFNumberRef v42 = logObjectForModule_12();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
LABEL_91:
          _parseRoadSignParameter_cold_3();
          goto LABEL_124;
        }
        goto LABEL_124;
      case 2:
        LOBYTE(valuePtr) = -86;
        LOBYTE(valuePtr) = iAP2MsgGetDataAsU8(FirstParam, &v56);
        if (v56)
        {
          int v26 = logObjectForModule_12();
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_89;
        }
        if (!v48)
        {
          CFNumberRef v48 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_50;
        }
        uint64_t v34 = logObjectForModule_12();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
LABEL_89:
          _parseRoadSignParameter_cold_5();
          goto LABEL_124;
        }
        goto LABEL_124;
      case 3:
        LOBYTE(valuePtr) = -86;
        LOBYTE(valuePtr) = iAP2MsgGetDataAsU8(FirstParam, &v56);
        if (v56)
        {
          uint64_t v31 = logObjectForModule_12();
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_99;
        }
        if (!v49)
        {
          CFNumberRef v49 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_50;
        }
        uint64_t v36 = logObjectForModule_12();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
LABEL_99:
          _parseRoadSignParameter_cold_7();
          goto LABEL_124;
        }
        goto LABEL_124;
      case 4:
        int valuePtr = -1431655766;
        int valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          int v33 = logObjectForModule_12();
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_103;
        }
        if (!v50)
        {
          CFNumberRef v50 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_50;
        }
        CFNumberRef v40 = logObjectForModule_12();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
        {
LABEL_103:
          _parseRoadSignParameter_cold_9();
          goto LABEL_124;
        }
        goto LABEL_124;
      case 5:
        int valuePtr = -1431655766;
        int valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          uint64_t v24 = logObjectForModule_12();
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
LABEL_123:
          _parseRoadSignParameter_cold_11();
          goto LABEL_124;
        }
        if (!v51)
        {
          CFNumberRef v51 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_50;
        }
        CFNumberRef v43 = logObjectForModule_12();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_123;
        }
        goto LABEL_124;
      case 6:
        int valuePtr = -1431655766;
        int valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          uint64_t v28 = logObjectForModule_12();
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
        }
        else
        {
          if (!v52)
          {
            CFNumberRef v52 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
            goto LABEL_50;
          }
          CFNumberRef v38 = logObjectForModule_12();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
        }
        _parseRoadLaneParameter_cold_13();
        goto LABEL_124;
      case 7:
        int valuePtr = -1431655766;
        int valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          uint64_t v32 = logObjectForModule_12();
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_101;
        }
        if (!v53)
        {
          CFNumberRef v53 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_50;
        }
        uint64_t v35 = logObjectForModule_12();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
LABEL_101:
          _parseRoadLaneParameter_cold_15();
          goto LABEL_124;
        }
        goto LABEL_124;
      case 8:
        int valuePtr = -1431655766;
        int valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          int v25 = logObjectForModule_12();
          if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_87;
        }
        if (v54)
        {
          uint64_t v37 = logObjectForModule_12();
          if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
LABEL_87:
          _parseRoadLaneParameter_cold_18();
          goto LABEL_124;
        }
        CFNumberRef v54 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
LABEL_50:
        unint64_t FirstParam = iAP2MsgGetNextParam(a2, a3, FirstParam);
        if (FirstParam) {
          continue;
        }
        CFNumberRef v16 = v46;
        if (v46)
        {
          ObjectDetectionRoadSignDict = platform_navigation_createObjectDetectionRoadSignDict(*(CFMutableDictionaryRef *)(v45 + 8));
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 0, v46);
          int v18 = 1;
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 1, cf);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 2, v48);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 3, v49);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 4, v50);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 5, v51);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 6, v52);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 7, v53);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 8, v54);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 9, v55);
          a4 = v44;
          goto LABEL_53;
        }
        int v19 = 0;
        unint64_t FirstParam = 0;
        a4 = v44;
LABEL_54:
        if (cf) {
          CFRelease(cf);
        }
        if (v48) {
          CFRelease(v48);
        }
        if (v49) {
          CFRelease(v49);
        }
        if (v50) {
          CFRelease(v50);
        }
        if (v51) {
          CFRelease(v51);
        }
        if (v52) {
          CFRelease(v52);
        }
        if (v53) {
          CFRelease(v53);
        }
        if (v54) {
          CFRelease(v54);
        }
        if (v55)
        {
          CFRelease(v55);
          if (v19) {
            goto LABEL_72;
          }
LABEL_74:
          int v10 = -1;
        }
        else
        {
          if (!v19) {
            goto LABEL_74;
          }
LABEL_72:
          int v10 = 0;
        }
LABEL_75:
        *a4 = v10;
        return FirstParam;
      case 9:
        int valuePtr = -1431655766;
        int valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          int v30 = logObjectForModule_12();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
        }
        else
        {
          if (!v55)
          {
            CFNumberRef v55 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
            goto LABEL_50;
          }
          CFStringRef v41 = logObjectForModule_12();
          if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
LABEL_124:
            a4 = v44;
            CFNumberRef v16 = v46;
            int v18 = 0;
            ObjectDetectionRoadSignDict = 0;
            int v19 = 0;
            unint64_t FirstParam = 0;
            if (v46)
            {
LABEL_53:
              CFRelease(v16);
              int v19 = v18;
              unint64_t FirstParam = (unsigned __int16 *)ObjectDetectionRoadSignDict;
            }
            goto LABEL_54;
          }
        }
        _parseRoadLaneParameter_cold_21();
        goto LABEL_124;
      default:
        goto LABEL_50;
    }
  }
}

uint64_t iap2_navigation_routeGuidanceUpdateHandler(uint64_t *a1, uint64_t a2)
{
  int v4 = &unk_100239000;
  uint64_t v5 = &unk_100239000;
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v7 = (const char *)a1[1];
    }
    else {
      uint64_t v7 = 0;
    }
    *(_DWORD *)buf = 138412290;
    char v157 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "iAP2Navigation RouteGuidanceUpdate Handler %@", buf, 0xCu);
  }
  if (!a1) {
    return 0;
  }
  uint64_t Feature = (unsigned char *)iap2_feature_getFeature((uint64_t)a1, 0x11u);
  if (gLogObjects && gNumLogObjects >= 47)
  {
    char v9 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    char v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v10 = "exists";
    int v11 = (const char *)a1[1];
    if (!Feature) {
      int v10 = "missing!!";
    }
    *(_DWORD *)buf = 138412546;
    char v157 = v11;
    __int16 v158 = 2080;
    *(void *)v159 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "iAP2Navigation RouteGuidanceUpdate %@ navigation %s", buf, 0x16u);
  }
  uint64_t result = 0;
  if (a2 && Feature)
  {
    if (*(_DWORD *)a2) {
      return 0;
    }
    if (gLogObjects) {
      BOOL v13 = gNumLogObjects <= 46;
    }
    else {
      BOOL v13 = 1;
    }
    int v14 = !v13;
    if (*(void *)(a2 + 16))
    {
      if (v14)
      {
        uint64_t v15 = *(NSObject **)(gLogObjects + 368);
      }
      else
      {
        uint64_t v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = (const char *)a1[1];
        uint64_t v18 = *(void *)(a2 + 8);
        uint64_t v19 = *(void *)(a2 + 16);
        *(_DWORD *)buf = 138412802;
        char v157 = v17;
        __int16 v158 = 2112;
        *(void *)v159 = v18;
        *(_WORD *)&v159[8] = 2112;
        *(void *)&v159[10] = v19;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "iAP2Navigation RouteGuidanceUpdate %@, create msg, componentIDs=%@ updateInfo=%@", buf, 0x20u);
      }
      uint64_t v20 = iAP2MsgInit((uint64_t)(a1 + 15), 20993, a1[24], 0xFFFF, 0, 0);
      CFArrayRef v21 = *(const __CFArray **)(a2 + 8);
      if (v21 && (CFIndex Count = CFArrayGetCount(v21), Count >= 1))
      {
        CFIndex v23 = Count;
        CFIndex v24 = 0;
        int v25 = 0;
        do
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), v24);
          v25 += __addU16NumberParameterToMsg(v20, 0, 0, ValueAtIndex);
          ++v24;
        }
        while (v23 != v24);
      }
      else
      {
        int v25 = 0;
      }
      CFDictionaryRef v27 = *(const __CFDictionary **)(a2 + 16);
      id v28 = platform_navigation_routeGuidanceInfoKeyForType(1);
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v27, v28);
      LODWORD(v27) = __addEnumNumberParameterToMsg(v20, 0, 1, Value, (uint64_t (*)(void))_convertRouteGuidanceStateTypeForFunc);
      CFDictionaryRef v30 = *(const __CFDictionary **)(a2 + 16);
      id v31 = platform_navigation_routeGuidanceInfoKeyForType(2);
      CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(v30, v31);
      int v33 = v25
          + v27
          + __addEnumNumberParameterToMsg(v20, 0, 2, v32, (uint64_t (*)(void))_convertManeuverStateTypeForFunc);
      CFDictionaryRef v34 = *(const __CFDictionary **)(a2 + 16);
      id v35 = platform_navigation_routeGuidanceInfoKeyForType(3);
      CFStringRef v36 = (const __CFString *)CFDictionaryGetValue(v34, v35);
      BOOL v37 = v36 && iAP2MsgAddCFStringParam(v20, 0, 3, v36);
      int v38 = v33 + v37;
      CFDictionaryRef v39 = *(const __CFDictionary **)(a2 + 16);
      id v40 = platform_navigation_routeGuidanceInfoKeyForType(4);
      CFStringRef v41 = (const __CFString *)CFDictionaryGetValue(v39, v40);
      BOOL v42 = v41 && iAP2MsgAddCFStringParam(v20, 0, 4, v41);
      CFDictionaryRef v43 = *(const __CFDictionary **)(a2 + 16);
      id v44 = platform_navigation_routeGuidanceInfoKeyForType(5);
      CFNumberRef v45 = (const __CFNumber *)CFDictionaryGetValue(v43, v44);
      int v46 = v42 + __addU64NumberParameterToMsg(v20, 5, v45);
      CFDictionaryRef v47 = *(const __CFDictionary **)(a2 + 16);
      id v48 = platform_navigation_routeGuidanceInfoKeyForType(6);
      CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue(v47, v48);
      int v50 = v46 + __addU64NumberParameterToMsg(v20, 6, v49);
      CFDictionaryRef v51 = *(const __CFDictionary **)(a2 + 16);
      id v52 = platform_navigation_routeGuidanceInfoKeyForType(7);
      CFNumberRef v53 = (const __CFNumber *)CFDictionaryGetValue(v51, v52);
      int v54 = v38 + v50 + __addU32NumberParameterToMsg(v20, 0, 7, v53);
      CFDictionaryRef v55 = *(const __CFDictionary **)(a2 + 16);
      id v56 = platform_navigation_routeGuidanceInfoKeyForType(8);
      CFStringRef v57 = (const __CFString *)CFDictionaryGetValue(v55, v56);
      BOOL v58 = v57 && iAP2MsgAddCFStringParam(v20, 0, 8, v57);
      CFDictionaryRef v59 = *(const __CFDictionary **)(a2 + 16);
      id v60 = platform_navigation_routeGuidanceInfoKeyForType(9);
      CFNumberRef v61 = (const __CFNumber *)CFDictionaryGetValue(v59, v60);
      int v62 = v58
          + __addEnumNumberParameterToMsg(v20, 0, 9, v61, (uint64_t (*)(void))_convertDistaceUnitTypeForFunc);
      CFDictionaryRef v63 = *(const __CFDictionary **)(a2 + 16);
      id v64 = platform_navigation_routeGuidanceInfoKeyForType(10);
      CFNumberRef v65 = (const __CFNumber *)CFDictionaryGetValue(v63, v64);
      int v66 = v54 + v62 + __addU32NumberParameterToMsg(v20, 0, 10, v65);
      CFDictionaryRef v67 = *(const __CFDictionary **)(a2 + 16);
      id v68 = platform_navigation_routeGuidanceInfoKeyForType(11);
      CFStringRef v69 = (const __CFString *)CFDictionaryGetValue(v67, v68);
      BOOL v70 = v69 && iAP2MsgAddCFStringParam(v20, 0, 11, v69);
      CFDictionaryRef v71 = *(const __CFDictionary **)(a2 + 16);
      id v72 = platform_navigation_routeGuidanceInfoKeyForType(12);
      CFNumberRef v73 = (const __CFNumber *)CFDictionaryGetValue(v71, v72);
      int v74 = v66
          + v70
          + __addEnumNumberParameterToMsg(v20, 0, 12, v73, (uint64_t (*)(void))_convertDistaceUnitTypeForFunc);
      CFDictionaryRef v75 = *(const __CFDictionary **)(a2 + 16);
      id v76 = platform_navigation_routeGuidanceInfoKeyForType(13);
      CFArrayRef v77 = (const __CFArray *)CFDictionaryGetValue(v75, v76);
      BOOL v78 = v77 && iAP2MsgAddCFU16ArrayParam(v20, 0, 13, v77);
      CFDictionaryRef v79 = *(const __CFDictionary **)(a2 + 16);
      id v80 = platform_navigation_routeGuidanceInfoKeyForType(14);
      CFNumberRef v81 = (const __CFNumber *)CFDictionaryGetValue(v79, v80);
      int v82 = v78 + __addU16NumberParameterToMsg(v20, 0, 14, v81);
      CFDictionaryRef v83 = *(const __CFDictionary **)(a2 + 16);
      id v84 = platform_navigation_routeGuidanceInfoKeyForType(15);
      CFNumberRef v85 = (const __CFNumber *)CFDictionaryGetValue(v83, v84);
      int v86 = v82 + __addU8NumberParameterToMsg(v20, 0, 15, v85);
      CFDictionaryRef v87 = *(const __CFDictionary **)(a2 + 16);
      id v88 = platform_navigation_routeGuidanceInfoKeyForType(16);
      CFNumberRef v89 = (const __CFNumber *)CFDictionaryGetValue(v87, v88);
      int v90 = v86 + __addU16NumberParameterToMsg(v20, 0, 16, v89);
      CFDictionaryRef v91 = *(const __CFDictionary **)(a2 + 16);
      id v92 = platform_navigation_routeGuidanceInfoKeyForType(17);
      CFNumberRef v93 = (const __CFNumber *)CFDictionaryGetValue(v91, v92);
      int v94 = v90 + __addU16NumberParameterToMsg(v20, 0, 17, v93);
      CFDictionaryRef v95 = *(const __CFDictionary **)(a2 + 16);
      id v96 = platform_navigation_routeGuidanceInfoKeyForType(18);
      CFNumberRef v97 = (const __CFNumber *)CFDictionaryGetValue(v95, v96);
      int v98 = v74 + v94 + __addU8NumberParameterToMsg(v20, 0, 18, v97);
      if (Feature[16])
      {
        CFDictionaryRef v99 = *(const __CFDictionary **)(a2 + 16);
        id v100 = platform_navigation_routeGuidanceInfoKeyForType(19);
        CFStringRef v101 = (const __CFString *)CFDictionaryGetValue(v99, v100);
        int v102 = v101 && iAP2MsgAddCFStringParam(v20, 0, 19, v101);
        v98 += v102;
      }
      if (Feature[17])
      {
        CFDictionaryRef v103 = *(const __CFDictionary **)(a2 + 16);
        id v104 = platform_navigation_routeGuidanceInfoKeyForType(20);
        CFNumberRef v105 = (const __CFNumber *)CFDictionaryGetValue(v103, v104);
        v98 += __addU8NumberParameterToMsg(v20, 0, 20, v105);
      }
      if (Feature[20])
      {
        CFDictionaryRef v106 = *(const __CFDictionary **)(a2 + 16);
        id v107 = platform_navigation_routeGuidanceInfoKeyForType(21);
        CFNumberRef v108 = (const __CFNumber *)CFDictionaryGetValue(v106, v107);
        v98 += __addU16NumberParameterToMsg(v20, 0, 21, v108);
      }
      if (Feature[21])
      {
        CFDictionaryRef v109 = *(const __CFDictionary **)(a2 + 16);
        id v110 = platform_navigation_routeGuidanceInfoKeyForType(22);
        CFNumberRef v111 = (const __CFNumber *)CFDictionaryGetValue(v109, v110);
        int v112 = v98 + __addU8NumberParameterToMsg(v20, 0, 22, v111);
        CFDictionaryRef v113 = *(const __CFDictionary **)(a2 + 16);
        id v114 = platform_navigation_routeGuidanceInfoKeyForType(23);
        CFArrayRef v115 = (const __CFArray *)CFDictionaryGetValue(v113, v114);
        int v152 = a1;
        if (v115)
        {
          CFArrayRef v116 = v115;
          if (CFArrayGetCount(v115) >= 1)
          {
            CFIndex v154 = CFArrayGetCount(v116);
            if (v154 >= 1)
            {
              CFIndex v117 = 0;
              CFArrayRef v153 = v116;
              do
              {
                unsigned int valuePtr = -1431655766;
                CFDictionaryRef v118 = (const __CFDictionary *)CFArrayGetValueAtIndex(v116, v117);
                uint64_t v119 = v4[49];
                int v120 = v5[100];
                if (v119 && v120 >= 47)
                {
                  id v121 = *(NSObject **)(v119 + 368);
                }
                else
                {
                  id v121 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134218240;
                    char v157 = (const char *)v119;
                    __int16 v158 = 1024;
                    *(_DWORD *)v159 = v120;
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  }
                }
                id v122 = v5;
                if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v123 = v152[1];
                  *(_DWORD *)buf = 136316162;
                  char v157 = "iap2_navigation_routeGuidanceUpdateHandler";
                  __int16 v158 = 1024;
                  *(_DWORD *)v159 = 800;
                  *(_WORD *)&v159[4] = 2112;
                  *(void *)&v159[6] = v123;
                  *(_WORD *)&v159[14] = 2048;
                  *(void *)&v159[16] = v117;
                  __int16 v160 = 2112;
                  CFDictionaryRef v161 = v118;
                  _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "%s:%d %@, index %ld, dict = %@", buf, 0x30u);
                }
                BOOL v124 = iAP2MsgAddGroupParam(v20, 23);
                unsigned int valuePtr = 0;
                CFNumberRef v125 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
                CFNumberRef v126 = (const __CFNumber *)CFDictionaryGetValue(v118, v125);
                if (v125) {
                  CFRelease(v125);
                }
                __int16 v127 = valuePtr;
                if (valuePtr >= 3) {
                  __int16 v127 = -1;
                }
                BOOL v128 = __addU8NumberParameterToMsg(v20, (uint64_t)v124, v127, v126);
                unsigned int valuePtr = 1;
                CFNumberRef v129 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
                CFNumberRef v130 = (const __CFNumber *)CFDictionaryGetValue(v118, v129);
                if (v129) {
                  CFRelease(v129);
                }
                __int16 v131 = valuePtr;
                if (valuePtr >= 3) {
                  __int16 v131 = -1;
                }
                BOOL v132 = __addU16NumberParameterToMsg(v20, (uint64_t)v124, v131, v130);
                unsigned int valuePtr = 2;
                CFNumberRef v133 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
                CFNumberRef v134 = (const __CFNumber *)CFDictionaryGetValue(v118, v133);
                if (v133) {
                  CFRelease(v133);
                }
                int v135 = v112 + v128 + v132;
                __int16 v136 = valuePtr;
                if (valuePtr >= 3) {
                  __int16 v136 = -1;
                }
                int v112 = v135 + __addU32NumberParameterToMsg(v20, (uint64_t)v124, v136, v134);
                ++v117;
                CFArrayRef v116 = v153;
                int v4 = (void *)&unk_100239000;
                uint64_t v5 = v122;
              }
              while (v154 != v117);
            }
          }
        }
        CFDictionaryRef v137 = *(const __CFDictionary **)(a2 + 16);
        id v138 = platform_navigation_routeGuidanceInfoKeyForType(24);
        CFNumberRef v139 = (const __CFNumber *)CFDictionaryGetValue(v137, v138);
        LODWORD(v137) = __addU32NumberParameterToMsg(v20, 0, 24, v139);
        CFDictionaryRef v140 = *(const __CFDictionary **)(a2 + 16);
        id v141 = platform_navigation_routeGuidanceInfoKeyForType(25);
        CFNumberRef v142 = (const __CFNumber *)CFDictionaryGetValue(v140, v141);
        LODWORD(v140) = v137 + __addU32NumberParameterToMsg(v20, 0, 25, v142);
        CFDictionaryRef v143 = *(const __CFDictionary **)(a2 + 16);
        id v144 = platform_navigation_routeGuidanceInfoKeyForType(26);
        CFNumberRef v145 = (const __CFNumber *)CFDictionaryGetValue(v143, v144);
        int v98 = v112 + v140 + __addU32NumberParameterToMsg(v20, 0, 26, v145);
        a1 = v152;
      }
      uint64_t v146 = v4[49];
      if (v146 && (int)v5[100] >= 47)
      {
        uint64_t v147 = *(NSObject **)(v146 + 368);
      }
      else
      {
        uint64_t v147 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v147, OS_LOG_TYPE_INFO))
      {
        CFStringRef v148 = (const char *)a1[1];
        int MsgID = iAP2MsgGetMsgID(v20);
        *(_DWORD *)buf = 138412802;
        char v157 = v148;
        __int16 v158 = 1024;
        *(_DWORD *)v159 = MsgID;
        *(_WORD *)&v159[4] = 1024;
        *(_DWORD *)&v159[6] = v98;
        _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_INFO, "iAP2Navigation RouteGuidanceUpdate %@ send message %xh, paramCount=%d", buf, 0x18u);
      }
      if (v98)
      {
        iap2_sessionControl_sendOutgoingMessage(a1, v20);
        platform_navigation_deleteParams((void *)a2);
        return 1;
      }
      return 0;
    }
    if (v14)
    {
      CFNumberRef v16 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      CFNumberRef v16 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v150 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v150)
    {
      uint64_t v151 = (const char *)a1[1];
      *(_DWORD *)buf = 138412290;
      char v157 = v151;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "iAP2Navigation RouteGuidanceManeuverUpdate %@, no userInfo, message not sent!", buf, 0xCu);
      return 0;
    }
  }
  return result;
}

BOOL __addU16NumberParameterToMsg(uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number)
{
  if (!number) {
    return 0;
  }
  unsigned __int16 valuePtr = -21846;
  return CFNumberGetValue(number, kCFNumberSInt16Type, &valuePtr) && iAP2MsgAddU16Param(a1, a2, a3, valuePtr);
}

BOOL __addEnumNumberParameterToMsg(uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number, uint64_t (*a5)(void))
{
  if (!number) {
    return 0;
  }
  unsigned __int8 valuePtr = -86;
  BOOL result = 0;
  if (CFNumberGetValue(number, kCFNumberSInt8Type, &valuePtr))
  {
    char v9 = a5(valuePtr);
    if (iAP2MsgAddU8Param(a1, a2, a3, v9)) {
      return 1;
    }
  }
  return result;
}

uint64_t _convertRouteGuidanceStateTypeForFunc(unsigned int a1)
{
  unsigned __int8 v1 = a1;
  if (a1 >= 7)
  {
    if (gLogObjects && gNumLogObjects >= 47)
    {
      BOOL v2 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      BOOL v2 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      _convertRouteGuidanceStateTypeForFunc_cold_1();
    }
    return -1;
  }
  return v1;
}

uint64_t _convertManeuverStateTypeForFunc(unsigned int a1)
{
  unsigned __int8 v1 = a1;
  if (a1 >= 4)
  {
    if (gLogObjects && gNumLogObjects >= 47)
    {
      BOOL v2 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      BOOL v2 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      _convertManeuverStateTypeForFunc_cold_1();
    }
    return -1;
  }
  return v1;
}

BOOL __addU64NumberParameterToMsg(uint64_t a1, __int16 a2, CFNumberRef number)
{
  if (!number) {
    return 0;
  }
  unint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  return CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr) && iAP2MsgAddU64Param(a1, 0, a2, valuePtr);
}

BOOL __addU32NumberParameterToMsg(uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number)
{
  if (!number) {
    return 0;
  }
  unsigned int valuePtr = -1431655766;
  return CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr) && iAP2MsgAddU32Param(a1, a2, a3, valuePtr);
}

uint64_t _convertDistaceUnitTypeForFunc(unsigned int a1)
{
  unsigned __int8 v1 = a1;
  if (a1 >= 5)
  {
    if (gLogObjects && gNumLogObjects >= 47)
    {
      BOOL v2 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      BOOL v2 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      _convertDistaceUnitTypeForFunc_cold_1();
    }
    return -1;
  }
  return v1;
}

BOOL __addU8NumberParameterToMsg(uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number)
{
  if (!number) {
    return 0;
  }
  char valuePtr = -86;
  return CFNumberGetValue(number, kCFNumberSInt8Type, &valuePtr) && iAP2MsgAddU8Param(a1, a2, a3, valuePtr);
}

uint64_t iap2_navigation_routeGuidanceManeuverUpdateHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    int v4 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    int v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0;
    }
    int v85 = 138412290;
    uint64_t v86 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2Navigation RouteGuidanceManeuverUpdate Handler %@", (uint8_t *)&v85, 0xCu);
  }
  if (!a1) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x11u);
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v7 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    uint64_t v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    char v8 = "exists";
    uint64_t v9 = a1[1];
    if (!Feature) {
      char v8 = "missing!!";
    }
    int v85 = 138412546;
    uint64_t v86 = v9;
    __int16 v87 = 2080;
    *(void *)id v88 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "iAP2Navigation RouteGuidanceManeuverUpdate %@ navigation %s", (uint8_t *)&v85, 0x16u);
  }
  uint64_t result = 0;
  if (a2 && Feature)
  {
    if (*(_DWORD *)a2 != 1) {
      return 0;
    }
    if (gLogObjects) {
      BOOL v11 = gNumLogObjects <= 46;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = !v11;
    if (*(void *)(a2 + 16))
    {
      if (v12)
      {
        BOOL v13 = *(NSObject **)(gLogObjects + 368);
      }
      else
      {
        BOOL v13 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = a1[1];
        uint64_t v16 = *(void *)(a2 + 8);
        uint64_t v17 = *(void *)(a2 + 16);
        int v85 = 138412802;
        uint64_t v86 = v15;
        __int16 v87 = 2112;
        *(void *)id v88 = v16;
        *(_WORD *)&v88[8] = 2112;
        uint64_t v89 = v17;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "iAP2Navigation RouteGuidanceManeuverUpdate %@, create msg, componentIDs=%@ updateInfo=%@", (uint8_t *)&v85, 0x20u);
      }
      uint64_t v18 = iAP2MsgInit((uint64_t)(a1 + 15), 20994, a1[24], 0xFFFF, 0, 0);
      CFArrayRef v19 = *(const __CFArray **)(a2 + 8);
      if (v19 && (CFIndex Count = CFArrayGetCount(v19), Count >= 1))
      {
        CFIndex v21 = Count;
        CFIndex v22 = 0;
        int v23 = 0;
        do
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), v22);
          v23 += __addU16NumberParameterToMsg(v18, 0, 0, ValueAtIndex);
          ++v22;
        }
        while (v21 != v22);
      }
      else
      {
        int v23 = 0;
      }
      CFDictionaryRef v25 = *(const __CFDictionary **)(a2 + 16);
      id v26 = platform_navigation_maneuverInfoKeyForType(1);
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v25, v26);
      int v28 = v23 + __addU16NumberParameterToMsg(v18, 0, 1, Value);
      CFDictionaryRef v29 = *(const __CFDictionary **)(a2 + 16);
      id v30 = platform_navigation_maneuverInfoKeyForType(2);
      CFStringRef v31 = (const __CFString *)CFDictionaryGetValue(v29, v30);
      BOOL v32 = v31 && iAP2MsgAddCFStringParam(v18, 0, 2, v31);
      CFDictionaryRef v33 = *(const __CFDictionary **)(a2 + 16);
      id v34 = platform_navigation_maneuverInfoKeyForType(3);
      CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(v33, v34);
      int v36 = v28
          + v32
          + __addEnumNumberParameterToMsg(v18, 0, 3, v35, (uint64_t (*)(void))_convertManeuverTypeForFunc);
      CFDictionaryRef v37 = *(const __CFDictionary **)(a2 + 16);
      id v38 = platform_navigation_maneuverInfoKeyForType(4);
      CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(v37, v38);
      BOOL v40 = v39 && iAP2MsgAddCFStringParam(v18, 0, 4, v39);
      CFDictionaryRef v41 = *(const __CFDictionary **)(a2 + 16);
      id v42 = platform_navigation_maneuverInfoKeyForType(5);
      CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(v41, v42);
      int v44 = v36 + v40 + __addU32NumberParameterToMsg(v18, 0, 5, v43);
      CFDictionaryRef v45 = *(const __CFDictionary **)(a2 + 16);
      id v46 = platform_navigation_maneuverInfoKeyForType(6);
      CFStringRef v47 = (const __CFString *)CFDictionaryGetValue(v45, v46);
      BOOL v48 = v47 && iAP2MsgAddCFStringParam(v18, 0, 6, v47);
      CFDictionaryRef v49 = *(const __CFDictionary **)(a2 + 16);
      id v50 = platform_navigation_maneuverInfoKeyForType(7);
      CFNumberRef v51 = (const __CFNumber *)CFDictionaryGetValue(v49, v50);
      int v52 = v48
          + __addEnumNumberParameterToMsg(v18, 0, 7, v51, (uint64_t (*)(void))_convertDistaceUnitTypeForFunc);
      CFDictionaryRef v53 = *(const __CFDictionary **)(a2 + 16);
      id v54 = platform_navigation_maneuverInfoKeyForType(8);
      CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(v53, v54);
      int v56 = v52 + __addEnumNumberParameterToMsg(v18, 0, 8, v55, _convertDrivingSideTypeForFunc);
      CFDictionaryRef v57 = *(const __CFDictionary **)(a2 + 16);
      id v58 = platform_navigation_maneuverInfoKeyForType(9);
      CFNumberRef v59 = (const __CFNumber *)CFDictionaryGetValue(v57, v58);
      int v60 = v44 + v56 + __addEnumNumberParameterToMsg(v18, 0, 9, v59, _convertJunctionTypeForFunc);
      CFDictionaryRef v61 = *(const __CFDictionary **)(a2 + 16);
      id v62 = platform_navigation_maneuverInfoKeyForType(10);
      CFArrayRef v63 = (const __CFArray *)CFDictionaryGetValue(v61, v62);
      if (v63)
      {
        CFArrayRef v64 = v63;
        CFIndex v65 = CFArrayGetCount(v63);
        if (v65 >= 1)
        {
          CFIndex v66 = v65;
          for (CFIndex i = 0; i != v66; ++i)
          {
            CFNumberRef v68 = (const __CFNumber *)CFArrayGetValueAtIndex(v64, i);
            v60 += __addU16NumberParameterToMsg(v18, 0, 10, v68);
          }
        }
      }
      CFDictionaryRef v69 = *(const __CFDictionary **)(a2 + 16);
      id v70 = platform_navigation_maneuverInfoKeyForType(11);
      CFNumberRef v71 = (const __CFNumber *)CFDictionaryGetValue(v69, v70);
      int v72 = v60 + __addU16NumberParameterToMsg(v18, 0, 11, v71);
      if (*(unsigned char *)(Feature + 18))
      {
        CFDictionaryRef v73 = *(const __CFDictionary **)(a2 + 16);
        id v74 = platform_navigation_maneuverInfoKeyForType(13);
        CFStringRef v75 = (const __CFString *)CFDictionaryGetValue(v73, v74);
        int v76 = v75 && iAP2MsgAddCFStringParam(v18, 0, 13, v75);
        v72 += v76;
      }
      if (iap2_identification_isIdentifiedForOutgoingMessageID((uint64_t)a1, 0x5204u))
      {
        CFDictionaryRef v77 = *(const __CFDictionary **)(a2 + 16);
        id v78 = platform_navigation_maneuverInfoKeyForType(12);
        CFNumberRef v79 = (const __CFNumber *)CFDictionaryGetValue(v77, v78);
        if (v79) {
          v72 += __addU16NumberParameterToMsg(v18, 0, 12, v79);
        }
      }
      if (v72)
      {
        if (gLogObjects && gNumLogObjects >= 47)
        {
          id v80 = *(NSObject **)(gLogObjects + 368);
        }
        else
        {
          id v80 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
        {
          uint64_t v81 = a1[1];
          int MsgID = iAP2MsgGetMsgID(v18);
          int v85 = 138412802;
          uint64_t v86 = v81;
          __int16 v87 = 1024;
          *(_DWORD *)id v88 = MsgID;
          *(_WORD *)&v88[4] = 1024;
          *(_DWORD *)&v88[6] = v72;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "iAP2Navigation RouteGuidanceManeuverUpdate %@ send message %xh, paramCount=%d", (uint8_t *)&v85, 0x18u);
        }
        iap2_sessionControl_sendOutgoingMessage(a1, v18);
      }
      platform_navigation_deleteParams((void *)a2);
      return 1;
    }
    if (v12)
    {
      int v14 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      int v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v83 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v83)
    {
      uint64_t v84 = a1[1];
      int v85 = 138412290;
      uint64_t v86 = v84;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "iAP2Navigation RouteGuidanceManeuverUpdate %@, no userInfo, message not sent!", (uint8_t *)&v85, 0xCu);
      return 0;
    }
  }
  return result;
}

uint64_t _convertManeuverTypeForFunc(unsigned int a1)
{
  unsigned __int8 v1 = a1;
  if (a1 >= 0x36)
  {
    if (gLogObjects && gNumLogObjects >= 47)
    {
      BOOL v2 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      BOOL v2 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      _convertManeuverTypeForFunc_cold_1();
    }
    return -1;
  }
  return v1;
}

uint64_t _convertDrivingSideTypeForFunc(uint64_t result)
{
  if (result)
  {
    if (result == 1)
    {
      return 1;
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 47)
      {
        unsigned __int8 v1 = *(NSObject **)(gLogObjects + 368);
      }
      else
      {
        unsigned __int8 v1 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        _convertDrivingSideTypeForFunc_cold_1();
      }
      return 255;
    }
  }
  return result;
}

uint64_t _convertJunctionTypeForFunc(uint64_t result)
{
  if (result)
  {
    if (result == 1)
    {
      return 1;
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 47)
      {
        unsigned __int8 v1 = *(NSObject **)(gLogObjects + 368);
      }
      else
      {
        unsigned __int8 v1 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        _convertJunctionTypeForFunc_cold_1();
      }
      return 255;
    }
  }
  return result;
}

uint64_t iap2_navigation_laneGuidanceInfoUpdateHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    int v4 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    int v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v73 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2Navigation LaneGuidanceInfoUpdate Handler %@", buf, 0xCu);
  }
  if (!a1) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x11u);
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v7 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    uint64_t v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    char v8 = "exists";
    uint64_t v9 = *(void *)(a1 + 8);
    if (!Feature) {
      char v8 = "missing!!";
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v73 = v9;
    __int16 v74 = 2080;
    *(void *)CFStringRef v75 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "iAP2Navigation LaneGuidanceInfoUpdate %@ navigation %s", buf, 0x16u);
  }
  uint64_t result = 0;
  if (a2 && Feature)
  {
    if (*(_DWORD *)a2 != 2) {
      return 0;
    }
    if (gLogObjects) {
      BOOL v11 = gNumLogObjects <= 46;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = !v11;
    if (*(void *)(a2 + 16))
    {
      if (v12)
      {
        BOOL v13 = *(NSObject **)(gLogObjects + 368);
      }
      else
      {
        BOOL v13 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = *(void *)(a1 + 8);
        uint64_t v16 = *(void *)(a2 + 8);
        uint64_t v17 = *(void **)(a2 + 16);
        *(_DWORD *)buf = 138412802;
        uint64_t v73 = v15;
        __int16 v74 = 2112;
        *(void *)CFStringRef v75 = v16;
        *(_WORD *)&v75[8] = 2112;
        int v76 = v17;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "iAP2Navigation LaneGuidanceInfoUpdate %@, create msg, componentIDs=%@ updateInfo=%@", buf, 0x20u);
      }
      uint64_t v18 = iAP2MsgInit(a1 + 120, 20996, *(void *)(a1 + 192), 0xFFFF, 0, 0);
      CFArrayRef v19 = *(const __CFArray **)(a2 + 8);
      if (v19 && (CFIndex Count = CFArrayGetCount(v19), Count >= 1))
      {
        CFIndex v21 = Count;
        CFIndex v22 = 0;
        int v23 = 0;
        do
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), v22);
          v23 += __addU16NumberParameterToMsg(v18, 0, 0, ValueAtIndex);
          ++v22;
        }
        while (v21 != v22);
      }
      else
      {
        int v23 = 0;
      }
      CFDictionaryRef v25 = *(const __CFDictionary **)(a2 + 16);
      id v26 = platform_navigation_laneGuidanceInfoKeyForType(1);
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v25, v26);
      BOOL v28 = __addU16NumberParameterToMsg(v18, 0, 1, Value);
      CFDictionaryRef v29 = *(const __CFDictionary **)(a2 + 16);
      id v30 = platform_navigation_laneGuidanceInfoKeyForType(3);
      CFStringRef v31 = (const __CFString *)CFDictionaryGetValue(v29, v30);
      BOOL v32 = v31 && iAP2MsgAddCFStringParam(v18, 0, 3, v31);
      id v70 = (uint64_t *)a1;
      if (gLogObjects && gNumLogObjects >= 47)
      {
        CFDictionaryRef v33 = *(NSObject **)(gLogObjects + 368);
      }
      else
      {
        CFDictionaryRef v33 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      CFNumberRef v71 = (void *)a2;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v66 = v70[1];
        *(_DWORD *)buf = 138412802;
        uint64_t v73 = v66;
        __int16 v74 = 2112;
        *(void *)CFStringRef v75 = Value;
        *(_WORD *)&v75[8] = 2112;
        int v76 = (void *)v31;
        _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "iAP2Navigation LaneGuidanceInfoUpdate %@, index=%@ instructionText strObj=%@", buf, 0x20u);
      }
      int v34 = v23 + v28;
      CFDictionaryRef v35 = (const __CFDictionary *)v71[2];
      id v36 = platform_navigation_laneGuidanceInfoKeyForType(2);
      CFArrayRef v37 = (const __CFArray *)CFDictionaryGetValue(v35, v36);
      if (gLogObjects && gNumLogObjects >= 47)
      {
        id v38 = *(NSObject **)(gLogObjects + 368);
      }
      else
      {
        id v38 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      int v39 = v34 + v32;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        iap2_navigation_laneGuidanceInfoUpdateHandler_cold_3((uint64_t)v70, (uint64_t)v37, v38);
        if (v37)
        {
LABEL_63:
          CFIndex v40 = CFArrayGetCount(v37);
          if (v40 >= 1)
          {
            CFIndex v41 = v40;
            for (CFIndex i = 0; i != v41; ++i)
            {
              CFDictionaryRef v43 = (const __CFDictionary *)CFArrayGetValueAtIndex(v37, i);
              uint64_t v44 = gLogObjects;
              int v45 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 47)
              {
                id v46 = *(NSObject **)(gLogObjects + 368);
              }
              else
              {
                id v46 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v73 = v44;
                  __int16 v74 = 1024;
                  *(_DWORD *)CFStringRef v75 = v45;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
              }
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v63 = v70[1];
                *(_DWORD *)buf = 138412802;
                uint64_t v73 = v63;
                __int16 v74 = 2048;
                *(void *)CFStringRef v75 = i;
                *(_WORD *)&v75[8] = 2112;
                int v76 = v43;
                _os_log_debug_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "iAP2Navigation LaneGuidanceInfoUpdate %@, laneInfo i=%ld dictObj=%@", buf, 0x20u);
              }
              CFStringRef v47 = iAP2MsgAddGroupParam(v18, 2);
              id v48 = platform_navigation_laneInfoKeyForType(0);
              CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue(v43, v48);
              int v50 = v39 + __addU16NumberParameterToMsg(v18, (uint64_t)v47, 0, v49);
              id v51 = platform_navigation_laneInfoKeyForType(1);
              CFNumberRef v52 = (const __CFNumber *)CFDictionaryGetValue(v43, v51);
              int v53 = v50
                  + __addEnumNumberParameterToMsg(v18, (uint64_t)v47, 1, v52, (uint64_t (*)(void))_convertLaneInfoStatusTypeForFunc);
              id v54 = platform_navigation_laneInfoKeyForType(2);
              CFArrayRef v55 = (const __CFArray *)CFDictionaryGetValue(v43, v54);
              if (v55)
              {
                CFArrayRef v56 = v55;
                CFIndex v57 = CFArrayGetCount(v55);
                if (v57 >= 1)
                {
                  CFIndex v58 = v57;
                  for (CFIndex j = 0; j != v58; ++j)
                  {
                    CFNumberRef v60 = (const __CFNumber *)CFArrayGetValueAtIndex(v56, j);
                    v53 += __addU16NumberParameterToMsg(v18, (uint64_t)v47, 2, v60);
                  }
                }
              }
              id v61 = platform_navigation_laneInfoKeyForType(3);
              CFNumberRef v62 = (const __CFNumber *)CFDictionaryGetValue(v43, v61);
              int v39 = v53 + __addU16NumberParameterToMsg(v18, (uint64_t)v47, 3, v62);
            }
          }
        }
      }
      else if (v37)
      {
        goto LABEL_63;
      }
      if (v39)
      {
        if (gLogObjects && gNumLogObjects >= 47)
        {
          CFDictionaryRef v67 = *(NSObject **)(gLogObjects + 368);
        }
        else
        {
          CFDictionaryRef v67 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
        {
          uint64_t v68 = v70[1];
          int MsgID = iAP2MsgGetMsgID(v18);
          *(_DWORD *)buf = 138412802;
          uint64_t v73 = v68;
          __int16 v74 = 1024;
          *(_DWORD *)CFStringRef v75 = MsgID;
          *(_WORD *)&v75[4] = 1024;
          *(_DWORD *)&v75[6] = v39;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "iAP2Navigation LaneGuidanceInfoUpdate %@ send message %xh, paramCount=%d", buf, 0x18u);
        }
        iap2_sessionControl_sendOutgoingMessage(v70, v18);
      }
      platform_navigation_deleteParams(v71);
      return 1;
    }
    if (v12)
    {
      int v14 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      int v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v64 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v64)
    {
      uint64_t v65 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412290;
      uint64_t v73 = v65;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "iAP2Navigation LaneGuidanceInfoUpdate %@, no userInfo, message not sent!", buf, 0xCu);
      return 0;
    }
  }
  return result;
}

uint64_t _convertLaneInfoStatusTypeForFunc(unsigned int a1)
{
  if (a1 >= 3) {
    return -1;
  }
  else {
    return a1;
  }
}

uint64_t iap2_navigation_startRoadObjectDetectionHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    int v4 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    int v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v45 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2Navigation startRoadObjectDetection Handler %@", buf, 0xCu);
  }
  if (!a1) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x11u);
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v7 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    uint64_t v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    char v8 = "exists";
    uint64_t v9 = *(void *)(a1 + 8);
    if (!Feature) {
      char v8 = "missing!!";
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v45 = v9;
    __int16 v46 = 2080;
    *(void *)CFStringRef v47 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "iAP2Navigation startRoadObjectDetection %@ navigation %s", buf, 0x16u);
  }
  uint64_t result = 0;
  if (a2 && Feature)
  {
    if (*(_DWORD *)a2 != 3) {
      return 0;
    }
    CFArrayRef Mutable = *(const __CFArray **)(a2 + 16);
    if (Mutable)
    {
      CFRetain(*(CFTypeRef *)(a2 + 16));
LABEL_26:
      if (CFArrayGetCount(Mutable) >= 1)
      {
        if (gLogObjects && gNumLogObjects >= 47)
        {
          int v12 = *(NSObject **)(gLogObjects + 368);
        }
        else
        {
          int v12 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 8);
          uint64_t v21 = *(void *)(a2 + 8);
          *(_DWORD *)buf = 138412802;
          uint64_t v45 = v20;
          __int16 v46 = 2112;
          *(void *)CFStringRef v47 = v21;
          *(_WORD *)&v47[8] = 2112;
          CFArrayRef v48 = Mutable;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "iAP2Navigation startRoadObjectDetection %@, create msg, componentIDs=%@ objectTypes=%@", buf, 0x20u);
        }
        uint64_t v22 = iAP2MsgInit(a1 + 120, 3328, *(void *)(a1 + 192), 0xFFFF, 0, 0);
        CFArrayRef v23 = *(const __CFArray **)(a2 + 8);
        CFDictionaryRef v43 = (uint64_t *)a1;
        if (v23 && (CFIndex Count = CFArrayGetCount(v23), Count >= 1))
        {
          CFIndex v25 = Count;
          CFIndex v26 = 0;
          int v27 = 0;
          do
          {
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), v26);
            v27 += __addU16NumberParameterToMsg(v22, 0, 0, ValueAtIndex);
            ++v26;
          }
          while (v25 != v26);
        }
        else
        {
          int v27 = 0;
        }
        CFIndex v29 = CFArrayGetCount(Mutable);
        if (v29 >= 1)
        {
          CFIndex v30 = v29;
          for (CFIndex i = 0; i != v30; ++i)
          {
            CFNumberRef v32 = (const __CFNumber *)CFArrayGetValueAtIndex(Mutable, i);
            uint64_t v33 = gLogObjects;
            int v34 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 47)
            {
              CFDictionaryRef v35 = *(NSObject **)(gLogObjects + 368);
            }
            else
            {
              CFDictionaryRef v35 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v45 = v33;
                __int16 v46 = 1024;
                *(_DWORD *)CFStringRef v47 = v34;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                CFDictionaryRef v35 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v36 = v43[1];
              *(_DWORD *)buf = 138412802;
              uint64_t v45 = v36;
              __int16 v46 = 2048;
              *(void *)CFStringRef v47 = i;
              *(_WORD *)&v47[8] = 2112;
              CFArrayRef v48 = v32;
              _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "iAP2Navigation startRoadObjectDetection %@, laneInfo i=%ld numObj=%@", buf, 0x20u);
            }
            buf[0] = -86;
            CFNumberGetValue(v32, kCFNumberSInt8Type, buf);
            if (buf[0] - 1 <= 2 && iAP2MsgAddVoidParam(v22, 0, (buf[0] - 1) + 1)) {
              ++v27;
            }
          }
        }
        if (v27)
        {
          if (gLogObjects && gNumLogObjects >= 47)
          {
            CFArrayRef v37 = *(NSObject **)(gLogObjects + 368);
          }
          else
          {
            CFArrayRef v37 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
            uint64_t v39 = v43[1];
            int MsgID = iAP2MsgGetMsgID(v22);
            *(_DWORD *)buf = 138412802;
            uint64_t v45 = v39;
            __int16 v46 = 1024;
            *(_DWORD *)CFStringRef v47 = MsgID;
            *(_WORD *)&v47[4] = 1024;
            *(_DWORD *)&v47[6] = v27;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "iAP2Navigation startRoadObjectDetection %@ send message %xh, paramCount=%d", buf, 0x18u);
          }
          iap2_sessionControl_sendOutgoingMessage(v43, v22);
          char v38 = 1;
        }
        else
        {
          char v38 = 1;
        }
LABEL_81:
        CFRelease(Mutable);
        if (v38)
        {
          platform_navigation_deleteParams((void *)a2);
          return 1;
        }
        return 0;
      }
LABEL_73:
      if (gLogObjects && gNumLogObjects >= 47)
      {
        CFIndex v41 = *(NSObject **)(gLogObjects + 368);
      }
      else
      {
        CFIndex v41 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v42 = *(void *)(a1 + 8);
        *(_DWORD *)buf = 138412290;
        uint64_t v45 = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "iAP2Navigation startRoadObjectDetection %@, no objectTypes, message not sent!", buf, 0xCu);
      }
      char v38 = 0;
      if (!Mutable) {
        return 0;
      }
      goto LABEL_81;
    }
    uint64_t v13 = iap2_feature_getFeature(a1, 0x11u);
    if (!v13)
    {
      CFArrayRef Mutable = 0;
      goto LABEL_73;
    }
    uint64_t v14 = v13;
    CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    int64_t v15 = CFDictionaryGetCount(*(CFDictionaryRef *)(v14 + 8));
    uint64_t v16 = (const void **)malloc_type_calloc(v15, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v14 + 8), 0, v16);
    if (v15 < 1)
    {
      if (!v16) {
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v17 = (const __CFDictionary **)v16;
      do
      {
        CFDictionaryRef v18 = *v17++;
        CFDictionaryRef SupportedTypes = platform_navigation_objectDetectionComponentGetSupportedTypes(v18);
        v49.uint64_t length = CFArrayGetCount(SupportedTypes);
        v49.location = 0;
        CFArrayAppendArray(Mutable, SupportedTypes, v49);
        --v15;
      }
      while (v15);
    }
    free(v16);
LABEL_72:
    if (!Mutable) {
      goto LABEL_73;
    }
    goto LABEL_26;
  }
  return result;
}

uint64_t iap2_navigation_stopRoadObjectDetectionHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    int v4 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    int v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0;
    }
    int v24 = 138412290;
    uint64_t v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2Navigation stopRoadObjectDetection Handler %@", (uint8_t *)&v24, 0xCu);
  }
  if (!a1) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x11u);
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v7 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    uint64_t v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = a1[1];
    if (Feature) {
      uint64_t v9 = "exists";
    }
    else {
      uint64_t v9 = "missing!!";
    }
    uint64_t v10 = obfuscatedPointer(a2);
    int v24 = 138412802;
    uint64_t v25 = v8;
    __int16 v26 = 2080;
    int v27 = v9;
    __int16 v28 = 2048;
    uint64_t v29 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "iAP2Navigation stopRoadObjectDetection %@ navigation %s, param=%p", (uint8_t *)&v24, 0x20u);
  }
  uint64_t result = 0;
  if (a2 && Feature)
  {
    if (*(_DWORD *)a2 == 4)
    {
      if (gLogObjects && gNumLogObjects >= 47)
      {
        int v12 = *(NSObject **)(gLogObjects + 368);
      }
      else
      {
        int v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = a1[1];
        uint64_t v14 = *(const char **)(a2 + 8);
        int v24 = 138412546;
        uint64_t v25 = v13;
        __int16 v26 = 2112;
        int v27 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "iAP2Navigation stopRoadObjectDetection %@, create msg, componentIDs=%@", (uint8_t *)&v24, 0x16u);
      }
      uint64_t v15 = iAP2MsgInit((uint64_t)(a1 + 15), 3330, a1[24], 0xFFFF, 0, 0);
      CFArrayRef v16 = *(const __CFArray **)(a2 + 8);
      if (v16)
      {
        CFIndex Count = CFArrayGetCount(v16);
        if (Count >= 1)
        {
          CFIndex v18 = Count;
          for (CFIndex i = 0; i != v18; ++i)
          {
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), i);
            __addU16NumberParameterToMsg(v15, 0, 0, ValueAtIndex);
          }
        }
      }
      if (gLogObjects && gNumLogObjects >= 47)
      {
        uint64_t v21 = *(NSObject **)(gLogObjects + 368);
      }
      else
      {
        uint64_t v21 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        uint64_t v22 = a1[1];
        int MsgID = iAP2MsgGetMsgID(v15);
        int v24 = 138412546;
        uint64_t v25 = v22;
        __int16 v26 = 1024;
        LODWORD(v27) = MsgID;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "iAP2Navigation stopRoadObjectDetection %@ send message %xh", (uint8_t *)&v24, 0x12u);
      }
      iap2_sessionControl_sendOutgoingMessage(a1, v15);
      platform_navigation_deleteParams((void *)a2);
      return 1;
    }
    return 0;
  }
  return result;
}

void *_createFeature_6(void *a1)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    BOOL v2 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    BOOL v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2Navigation _createFeature", v4, 2u);
  }
  if (a1)
  {
    a1 = malloc_type_calloc(1uLL, 0x18uLL, 0x1020040684C9801uLL);
    if (a1)
    {
      *a1 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      a1[1] = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
  }
  return a1;
}

uint64_t _destroyFeature_6(void **a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    int v4 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    int v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v8[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2Navigation _destroyFeature", (uint8_t *)v8, 2u);
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v6 = (CFTypeRef *)*a1;
    if (*a1)
    {
      platform_navigation_accessoryDetached(*(void *)(a2 + 8));
      platform_navigation_decrementUserCount();
      if (*v6)
      {
        CFRelease(*v6);
        CFTypeRef *v6 = 0;
      }
      CFTypeRef v7 = v6[1];
      if (v7)
      {
        CFRelease(v7);
        v6[1] = 0;
      }
      if (*a1)
      {
        free(*a1);
        *a1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL _startFeatureFromDevice_3(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    BOOL v2 = *(NSObject **)(gLogObjects + 368);
  }
  else
  {
    BOOL v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2Navigation _startFeatureFromDevice", buf, 2u);
  }
  uint64_t Feature = (CFDictionaryRef *)iap2_feature_getFeature(a1, 0x11u);
  CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (Feature)
  {
    char v20 = 0;
    if (!iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgNavigationMainList, 5, &v20)) {
      goto LABEL_23;
    }
    if (gLogObjects && gNumLogObjects >= 47)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)CFIndex v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "iAP2Navigation _startFeatureFromDevice: routeGuidance supported, notify accessory attached", v18, 2u);
    }
    int64_t Count = CFDictionaryGetCount(*Feature);
    CFTypeRef v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(*Feature, 0, v7);
    if (Count < 1)
    {
      if (!v7) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v8 = v7;
      do
      {
        uint64_t v9 = *v8++;
        CFArrayAppendValue(Mutable, v9);
        --Count;
      }
      while (Count);
    }
    free(v7);
LABEL_23:
    char v21 = 0;
    if (!iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgRoadObjectDetectionMainList, 3, &v21))goto LABEL_37; {
    if (gLogObjects && gNumLogObjects >= 47)
    }
    {
      uint64_t v10 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      uint64_t v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "iAP2Navigation _startFeatureFromDevice: roadObjectDetection supported, notify accessory attached", v17, 2u);
    }
    int64_t v11 = CFDictionaryGetCount(Feature[1]);
    int v12 = (const void **)malloc_type_calloc(v11, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(Feature[1], 0, v12);
    if (v11 < 1)
    {
      if (!v12) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v13 = v12;
      do
      {
        uint64_t v14 = *v13++;
        CFArrayAppendValue(Mutable, v14);
        --v11;
      }
      while (v11);
    }
    free(v12);
LABEL_37:
    platform_navigation_incrementUserCount();
    if (!a1 || (uint64_t v15 = *(void *)(a1 + 8)) == 0) {
      uint64_t v15 = 0;
    }
    platform_navigation_accessoryAttached(v15, (uint64_t)Mutable);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Feature != 0;
}

uint64_t _checkIdentificationInfo_5(uint64_t a1)
{
  char v8 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgNavigationMainList, 5u, &v8);
  uint64_t v3 = v2;
  if (v8) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    char v7 = 0;
    uint64_t v5 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgRoadObjectDetectionMainList, 3u, &v7);
    if (v7)
    {
      uint64_t v3 = 1;
      iap2_identification_rejectMsgID(a1, 3328, 1, 1u);
      iap2_identification_rejectMsgID(a1, 3329, 0, 1u);
      iap2_identification_rejectMsgID(a1, 3330, 1, 1u);
    }
    else
    {
      uint64_t v3 = v5;
      if (v8 && !v5)
      {
        iap2_features_createFeature(a1, 0x11u);
        iap2_identification_setIdentifiedForFeature(a1, 0x11u);
      }
    }
  }
  return v3;
}

void _handleIdentificationRejection(uint64_t a1)
{
  uint64_t Feature = (const void **)iap2_feature_getFeature(a1, 0x11u);
  if (Feature)
  {
    uint64_t v2 = Feature;
    uint64_t v3 = *Feature;
    if (v3)
    {
      CFRelease(v3);
      NSObject *v2 = 0;
    }
    BOOL v4 = v2[1];
    if (v4)
    {
      CFRelease(v4);
      v2[1] = 0;
    }
  }
}

BOOL _parseIdentificationParams_0(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  if (a1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)a3);
    if (gLogObjects && gNumLogObjects >= 47)
    {
      char v7 = *(NSObject **)(gLogObjects + 368);
    }
    else
    {
      char v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v58) = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "parsing identification paramID 0x%X", buf, 8u);
    }
    if (ParamID == 33)
    {
      uint64_t v19 = a1;
      int v20 = 33;
      unsigned int v21 = 1;
LABEL_107:
      iap2_identification_addRejectParam(v19, v20, v21);
      return 0;
    }
    if (ParamID != 30) {
      return 0;
    }
    int v56 = -1;
    if (iAP2MsgGetParamID((uint64_t)a3) == 30)
    {
      unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
      if (FirstParam)
      {
        NextParam = (unsigned __int16 *)FirstParam;
        CFNumberRef v54 = 0;
        CFNumberRef v55 = 0;
        CFNumberRef v50 = 0;
        CFStringRef cf = 0;
        CFNumberRef v52 = 0;
        CFNumberRef v53 = 0;
        CFNumberRef v10 = 0;
        CFNumberRef v11 = 0;
        CFNumberRef v12 = 0;
        do
        {
          switch(iAP2MsgGetParamID((uint64_t)NextParam))
          {
            case 0u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v56);
              if (!v56)
              {
                if (v12) {
                  CFRelease(v12);
                }
                CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }
              break;
            case 1u:
              DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)&v56);
              if (!v56)
              {
                uint64_t v14 = (const char *)DataAsString;
                if (cf) {
                  CFRelease(cf);
                }
                CFStringRef cf = CFStringCreateWithCString(kCFAllocatorDefault, v14, 0x8000100u);
              }
              break;
            case 2u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v56);
              if (!v56)
              {
                if (v11) {
                  CFRelease(v11);
                }
                CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }
              break;
            case 3u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v56);
              if (!v56)
              {
                if (v10) {
                  CFRelease(v10);
                }
                CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }
              break;
            case 4u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v56);
              if (!v56)
              {
                if (v52) {
                  CFRelease(v52);
                }
                CFNumberRef v52 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }
              break;
            case 5u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v56);
              if (!v56)
              {
                if (v53) {
                  CFRelease(v53);
                }
                CFNumberRef v53 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }
              break;
            case 6u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v56);
              if (!v56)
              {
                if (v54) {
                  CFRelease(v54);
                }
                CFNumberRef v54 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }
              break;
            case 7u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v56);
              if (!v56)
              {
                if (v50) {
                  CFRelease(v50);
                }
                CFNumberRef v50 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }
              break;
            case 8u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v56);
              if (!v56)
              {
                if (v55) {
                  CFRelease(v55);
                }
                CFNumberRef v55 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }
              break;
            default:
              break;
          }
          NextParam = iAP2MsgGetNextParam(a2, a3, NextParam);
        }
        while (NextParam);
        int v15 = 2;
        CFNumberRef v16 = v12;
        if (!v12)
        {
          CFStringRef v17 = cf;
          if (!v11) {
            goto LABEL_91;
          }
          goto LABEL_90;
        }
        CFStringRef v17 = cf;
        if (cf)
        {
          if (gLogObjects && gNumLogObjects >= 47)
          {
            CFIndex v18 = *(NSObject **)(gLogObjects + 368);
          }
          else
          {
            CFIndex v18 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138414338;
            CFNumberRef v58 = v16;
            __int16 v59 = 2112;
            CFStringRef v60 = cf;
            __int16 v61 = 2112;
            CFNumberRef v62 = v11;
            __int16 v63 = 2112;
            CFNumberRef v64 = v10;
            __int16 v65 = 2112;
            CFNumberRef v66 = v52;
            __int16 v67 = 2112;
            CFNumberRef v68 = v53;
            __int16 v69 = 2112;
            CFNumberRef v70 = v54;
            __int16 v71 = 2112;
            CFNumberRef v72 = v50;
            __int16 v73 = 2112;
            CFNumberRef v74 = v55;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Adding Navigation Display Component %@: '%@' maxCurRoadNameLen=%@ maxDestinationRoadNameLen=%@ maxPostManeuverRoadNameLen=%@ maxManeuverDescriptionLen=%@ maxGuidanceManeuverCapacity=%@ maxLaneGuidanceDescriptionLen=%@ maxLaneGuidanceCapacityObj=%@", buf, 0x5Cu);
          }
          if (!iap2_feature_getFeature(a1, 0x11u)) {
            iap2_features_createFeature(a1, 0x11u);
          }
          uint64_t Feature = (CFMutableDictionaryRef *)iap2_feature_getFeature(a1, 0x11u);
          if (!*Feature)
          {
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            *uint64_t Feature = Mutable;
            if (!Mutable)
            {
              if (gLogObjects && gNumLogObjects >= 47)
              {
                __int16 v26 = *(NSObject **)(gLogObjects + 368);
              }
              else
              {
                __int16 v26 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
                _parseIdentificationParams_cold_2_0(v26, v27, v28, v29, v30, v31, v32, v33);
              }
              int v15 = 10;
              if (!v11)
              {
LABEL_91:
                if (v10) {
                  CFRelease(v10);
                }
                if (v52) {
                  CFRelease(v52);
                }
                if (v53) {
                  CFRelease(v53);
                }
                if (v54) {
                  CFRelease(v54);
                }
                if (v55) {
                  CFRelease(v55);
                }
                if (v16) {
                  CFRelease(v16);
                }
                if (v17) {
                  CFRelease(v17);
                }
                if (!v15) {
                  return 1;
                }
                goto LABEL_106;
              }
LABEL_90:
              CFRelease(v11);
              goto LABEL_91;
            }
          }
          *(_WORD *)buf = -21846;
          CFNumberGetValue(v16, kCFNumberSInt16Type, buf);
          if (CFDictionaryContainsKey(*Feature, v16))
          {
            CFDictionaryRemoveAllValues(*Feature);
            int v15 = 3;
            if (!v11) {
              goto LABEL_91;
            }
            goto LABEL_90;
          }
          DisplayComponentDict = platform_navigation_createDisplayComponentDict(*(void *)(a1 + 8), *(__int16 *)buf, cf);
          if (v11)
          {
            CFNumberGetValue(v11, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddMaxCurrentRoadNameLength(DisplayComponentDict, *(__int16 *)buf);
          }
          if (v10)
          {
            CFNumberGetValue(v10, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddMaxDestinationNameLength(DisplayComponentDict, *(__int16 *)buf);
          }
          if (v52)
          {
            CFNumberGetValue(v52, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddMaxAfterManeuverRoadNameLength(DisplayComponentDict, *(__int16 *)buf);
          }
          if (v53)
          {
            CFNumberGetValue(v53, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddManeuverDescriptionLength(DisplayComponentDict, *(__int16 *)buf);
          }
          if (v54)
          {
            CFNumberGetValue(v54, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddGuidanceManeuverCapacity(DisplayComponentDict, *(__int16 *)buf);
          }
          if (v50)
          {
            CFNumberGetValue(v50, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddLaneGuidanceDescriptionLength(DisplayComponentDict, *(__int16 *)buf);
          }
          if (v55)
          {
            CFNumberGetValue(v55, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddLaneGuidanceCapacity(DisplayComponentDict, *(__int16 *)buf);
          }
          CFDictionaryAddValue(*Feature, v16, DisplayComponentDict);
          if (DisplayComponentDict) {
            CFRelease(DisplayComponentDict);
          }
          int v15 = 0;
        }
        if (!v11) {
          goto LABEL_91;
        }
        goto LABEL_90;
      }
      int v15 = 2;
    }
    else
    {
      uint64_t v42 = logObjectForModule_12();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParams_cold_5_0(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      int v15 = 10;
    }
LABEL_106:
    uint64_t v19 = a1;
    int v20 = 30;
    unsigned int v21 = v15;
    goto LABEL_107;
  }
  int v34 = logObjectForModule_12();
  BOOL result = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _parseIdentificationParams_cold_1_0(v34, v35, v36, v37, v38, v39, v40, v41);
    return 0;
  }
  return result;
}

void OUTLINED_FUNCTION_3_11(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x14u);
}

uint64_t OUTLINED_FUNCTION_7_5()
{
  return iAP2MsgGetMsgID(v0);
}

uint64_t acc_auth_protocol_sizeofSessionData()
{
  return _acc_auth_protocol_sizeofSessionImplementationData() + 1360;
}

uint64_t acc_auth_protocol_sizeofMessageData(int a1, int a2, uint64_t a3)
{
  uint64_t v6 = 7;
  switch(a1)
  {
    case 160:
      int v15 = -1431655766;
      uint64_t v6 = _acc_auth_protocol_supportedAuthTypes(1, &v15, 4u) + 6;
      break;
    case 161:
      break;
    case 162:
    case 163:
      uint64_t v6 = 69;
      break;
    case 164:
    case 165:
      LODWORD(v7) = 0;
      switch(a2)
      {
        case 0:
        case 4:
        case 7:
          LODWORD(v7) = 36;
          break;
        case 1:
          break;
        case 2:
        case 5:
          LODWORD(v7) = 1030;
          break;
        case 3:
          LODWORD(v7) = 7;
          break;
        case 6:
          goto LABEL_22;
        case 8:
          LODWORD(v7) = 132;
          break;
        default:
          if (a2 == 128)
          {
            if a3 < 7 && ((0x77u >> a3))
            {
              uint64_t v7 = dword_1001B8298[(int)a3];
            }
            else
            {
              if (gLogObjects && gNumLogObjects >= 55)
              {
                uint64_t v9 = *(NSObject **)(gLogObjects + 432);
              }
              else
              {
                uint64_t v9 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
              {
                int v15 = 67109120;
                int v16 = a3;
                _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[AccAuth] sizeofMessageData: unknown or unsupported encryptedInfoType(%#04x) \n", (uint8_t *)&v15, 8u);
              }
              uint64_t v7 = 0;
            }
            if (gLogObjects && gNumLogObjects >= 55)
            {
              CFNumberRef v11 = *(NSObject **)(gLogObjects + 432);
            }
            else
            {
              CFNumberRef v11 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
              acc_auth_protocol_sizeofMessageData_cold_5(a3, v7, v11);
            }
          }
          else
          {
LABEL_22:
            if (gLogObjects && gNumLogObjects >= 55)
            {
              uint64_t v10 = *(NSObject **)(gLogObjects + 432);
            }
            else
            {
              uint64_t v10 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              int v15 = 67109120;
              int v16 = a2;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccAuth] sizeofMessageData: unknown or unsupported infoType(%#04x) \n", (uint8_t *)&v15, 8u);
            }
            LODWORD(v7) = 0;
          }
          break;
      }
      if (gLogObjects && gNumLogObjects >= 55)
      {
        CFNumberRef v12 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        CFNumberRef v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 67109632;
        int v16 = a2;
        __int16 v17 = 1024;
        int v18 = a3;
        __int16 v19 = 1024;
        int v20 = v7;
        _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[AccAuth] sizeofAuthInfoData: infoType %d, encryptedInfoType %d, dataLen %d \n", (uint8_t *)&v15, 0x14u);
      }
      uint64_t v6 = (v7 + 2);
      break;
    case 166:
    case 167:
      uint64_t v6 = 1;
      break;
    default:
      if (gLogObjects && gNumLogObjects >= 55)
      {
        char v8 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        char v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v15 = 67109120;
        int v16 = a1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[AccAuth] sizeofMessageData: unknown or unsupported message(%#04x) \n", (uint8_t *)&v15, 8u);
      }
      uint64_t v6 = 0;
      break;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v13 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    uint64_t v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 67109888;
    int v16 = a1;
    __int16 v17 = 1024;
    int v18 = a2;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[AccAuth] sizeofMessageData: msgID %#04x, infoType %d, encryptedInfoType %d, messageDataLen %d \n", (uint8_t *)&v15, 0x1Au);
  }
  return v6;
}

void *logObjectForModule_13()
{
  if (gLogObjects && gNumLogObjects >= 55) {
    return *(void **)(gLogObjects + 432);
  }
  uint64_t v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t acc_auth_protocol_maxPayloadSize(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(_DWORD *)(result + 1336);
    BOOL v2 = v1 >= 4;
    unsigned int v3 = v1 - 4;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t acc_auth_protocol_maxSegmentSize(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(_DWORD *)(result + 1336);
    if (v1 <= 4) {
      return 0;
    }
    else {
      return v1 - 10;
    }
  }
  return result;
}

uint64_t acc_auth_protocol_maxSizeofMessageData()
{
  return acc_auth_protocol_sizeofMessageData(164, 2, 255);
}

BOOL acc_auth_protocol_validMessageID(int a1)
{
  return (a1 & 0xFFFFFFF8) == 160;
}

uint64_t acc_auth_protocol_isRespMessage(unsigned char *a1)
{
  if (!a1) {
    return 0;
  }
  if ((*a1 & 0xF8) == 0xA0)
  {
    uint64_t v2 = *a1 & 1;
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      unsigned int v3 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      unsigned int v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    uint64_t v2 = 0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *a1;
      v7[0] = 67109120;
      v7[1] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[AccAuth] isRespMessage: invalid incoming messageID(%#04x) ! \n", (uint8_t *)v7, 8u);
      uint64_t v2 = 0;
    }
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v5 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    uint64_t v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    acc_auth_protocol_isRespMessage_cold_1();
  }
  return v2;
}

uint64_t acc_auth_protocol_sizeofMessage(uint64_t a1, unsigned int a2, int *a3, int *a4)
{
  uint64_t result = 0;
  if (!a1 || a2 < 4) {
    return result;
  }
  int v6 = *(char *)(a1 + 3);
  if (v6 < 0)
  {
    uint64_t v9 = *(unsigned char *)(a1 + 3) & 0x7F;
    if ((v6 & 0x7Fu) <= 3)
    {
      int v8 = v9 + 4;
      if ((int)v9 + 4 <= a2)
      {
        int v7 = 0;
        if ((*(unsigned char *)(a1 + 3) & 0x7F) != 0)
        {
          uint64_t v10 = (unsigned __int8 *)(a1 + 4);
          do
          {
            int v11 = *v10++;
            int v7 = v11 | (v7 << 8);
            --v9;
          }
          while (v9);
        }
        uint64_t result = (v7 + v8);
        if (result <= a2) {
          goto LABEL_6;
        }
      }
    }
    return 0;
  }
  int v7 = *(unsigned __int8 *)(a1 + 3);
  uint64_t result = (v7 + 4);
  if (result > a2) {
    return 0;
  }
  int v8 = 4;
LABEL_6:
  if (a3) {
    *a3 = v8;
  }
  if (a4) {
    *a4 = v7;
  }
  return result;
}

uint64_t acc_auth_protocol_messagePayload(uint64_t result, unsigned int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v12 = 0;
  if (result)
  {
    uint64_t v8 = result;
    int v9 = acc_auth_protocol_sizeofMessage(result, a2, (int *)&v12 + 1, (int *)&v12);
    uint64_t result = 0;
    if (v9)
    {
      int v10 = v12;
      if (v12)
      {
        uint64_t v11 = HIDWORD(v12);
        if (a3) {
          *a3 = v9;
        }
        uint64_t result = v8 + v11;
        if (a4) {
          *a4 = v11;
        }
        if (a5) {
          *a5 = v10;
        }
      }
    }
  }
  return result;
}

BOOL acc_auth_protocol_initMessage(unsigned __int8 *a1, int a2, unsigned __int8 *a3, unsigned int a4)
{
  BOOL result = 1;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4 >= 4)
        {
          int v7 = *((_DWORD *)a1 + 286);
          if (v7)
          {
            if (v7 == 1)
            {
              unsigned __int8 v9 = a1[69];
              unsigned __int8 v8 = v9 & 0xF;
              a1[70] = v9 & 0xF;
              a1[69] = v9 + 1;
            }
            else if (v7 == 2)
            {
              unsigned __int8 v8 = a1[71];
              a1[70] = v8;
            }
            else
            {
              unsigned __int8 v8 = a1[70];
            }
            *a3 = a2;
            a3[1] = 16 * a1[1];
            a3[2] = *a1 & 0xF | (16 * v8);
            a3[3] = 0;
            if (gLogObjects && gNumLogObjects >= 55)
            {
              int v10 = *(NSObject **)(gLogObjects + 432);
            }
            else
            {
              int v10 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
            if (result)
            {
              int v11 = *a1;
              int v12 = *a3;
              int v13 = a3[1];
              int v14 = a3[2];
              int v15 = a3[3];
              v16[0] = 67110400;
              v16[1] = v11;
              __int16 v17 = 1024;
              int v18 = v12;
              __int16 v19 = 1024;
              int v20 = v13;
              __int16 v21 = 1024;
              int v22 = v14;
              __int16 v23 = 1024;
              int v24 = v15;
              __int16 v25 = 1024;
              int v26 = 0;
              _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[AccAuth] initMessage: sessionID %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d, errorNo %d \n", (uint8_t *)v16, 0x26u);
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL acc_auth_protocol_initSetupMessage(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  BOOL result = 1;
  if (a1)
  {
    if (a2)
    {
      if (a3 >= 4)
      {
        int v7 = *((_DWORD *)a1 + 286);
        if (v7)
        {
          if (v7 == 1)
          {
            acc_auth_protocol_initMessage(a1, 160, a2, a3);
            int v7 = *((_DWORD *)a1 + 286);
          }
          if (v7 == 2) {
            acc_auth_protocol_initMessage(a1, 161, a2, a3);
          }
          a2[4] = 0;
          a2[5] = a1[1327];
          a2[6] = *((_WORD *)a1 + 663);
          a2[7] = BYTE1(*((_DWORD *)a1 + 331));
          a2[8] = *((_DWORD *)a1 + 331);
          a2[3] += 5;
          a2[9] = 1;
          int v8 = *((_DWORD *)a1 + 286);
          uint64_t v9 = gLogObjects;
          if (v8 == 1)
          {
            if (gLogObjects && gNumLogObjects >= 55)
            {
              int v10 = *(NSObject **)(gLogObjects + 432);
            }
            else
            {
              int v10 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
              acc_auth_protocol_initSetupMessage_cold_4();
            }
            memcpy(a2 + 11, a1 + 1328, *((unsigned int *)a1 + 333));
            unsigned __int8 v11 = a1[1332];
            a2[10] = v11;
            a2[3] += v11 + 2;
            int v8 = *((_DWORD *)a1 + 286);
            uint64_t v9 = gLogObjects;
          }
          if (v8 == 2)
          {
            if (v9 && gNumLogObjects >= 55)
            {
              int v12 = *(NSObject **)(v9 + 432);
            }
            else
            {
              int v12 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
              acc_auth_protocol_initSetupMessage_cold_2((uint64_t)a2, v12);
            }
            a2[11] = *((_DWORD *)a1 + 289);
            a2[10] = 1;
            a2[3] += 3;
            uint64_t v9 = gLogObjects;
          }
          if (v9 && gNumLogObjects >= 55)
          {
            int v13 = *(NSObject **)(v9 + 432);
          }
          else
          {
            int v13 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
          if (result)
          {
            int v14 = *a1;
            int v15 = *a2;
            int v16 = a2[1];
            int v17 = a2[2];
            int v18 = a2[3];
            if ((char)a2[3] < 0)
            {
              int v19 = a2[4];
              int v20 = a2[5];
            }
            else
            {
              int v19 = 0;
              int v20 = 0;
            }
            int v21 = a2[10];
            unsigned int v22 = _byteswap_ulong(*(_DWORD *)(a2 + 5));
            v23[0] = 67111424;
            v23[1] = v14;
            __int16 v24 = 1024;
            int v25 = v15;
            __int16 v26 = 1024;
            int v27 = v16;
            __int16 v28 = 1024;
            int v29 = v17;
            __int16 v30 = 1024;
            int v31 = v18;
            __int16 v32 = 1024;
            int v33 = v19;
            __int16 v34 = 1024;
            int v35 = v20;
            __int16 v36 = 1024;
            unsigned int v37 = v22;
            __int16 v38 = 1024;
            int v39 = v21;
            __int16 v40 = 1024;
            int v41 = 0;
            _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[AccAuth] initSetupMessage: sessionID %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %02x (%02x %02x), characteristics %#10x, authTypesLen %d, errorNo %d \n", (uint8_t *)v23, 0x3Eu);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t acc_auth_protocol_initStartMessage(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  BOOL v3 = 1;
  if (a1)
  {
    if (a2)
    {
      if (a3 >= 4)
      {
        int v7 = *((_DWORD *)a1 + 286);
        if (v7)
        {
          if (v7 == 1)
          {
            LODWORD(v3) = acc_auth_protocol_initMessage(a1, 162, a2, a3);
            int v7 = *((_DWORD *)a1 + 286);
          }
          if (v7 == 2) {
            LODWORD(v3) = acc_auth_protocol_initMessage(a1, 163, a2, a3);
          }
          if (v3)
          {
            return 1;
          }
          else
          {
            BOOL v3 = *((_DWORD *)a1 + 289) == 1 && acc_auth_protocol_initStartMessage1Way(a1, a2, a3);
            if (gLogObjects && gNumLogObjects >= 55)
            {
              int v8 = *(NSObject **)(gLogObjects + 432);
            }
            else
            {
              int v8 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              int v10 = *a1;
              int v11 = *((_DWORD *)a1 + 289);
              int v12 = *a2;
              int v13 = a2[1];
              int v14 = a2[2];
              int v17 = 0;
              acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v17);
              int v15 = a2[5];
              int v16 = a2[39];
              *(_DWORD *)buf = 67111168;
              int v19 = v10;
              __int16 v20 = 1024;
              int v21 = v11;
              __int16 v22 = 1024;
              int v23 = v12;
              __int16 v24 = 1024;
              int v25 = v13;
              __int16 v26 = 1024;
              int v27 = v14;
              __int16 v28 = 1024;
              int v29 = v17;
              __int16 v30 = 1024;
              int v31 = v15;
              __int16 v32 = 1024;
              int v33 = v16;
              __int16 v34 = 1024;
              BOOL v35 = v3;
              _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[AccAuth] initStartMessage: sessionID %d, negotiatedAuthType %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d, sessionNonceLen %dx, dhPublicKeyLen %d, errorNo %d \n", buf, 0x38u);
            }
          }
        }
      }
    }
  }
  return v3;
}

BOOL acc_auth_protocol_initInfoCommonMessage(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 *a3, unsigned int a4)
{
  BOOL result = 1;
  if (a1 && a3 && a4 >= 4)
  {
    int v9 = *((_DWORD *)a1 + 286);
    if (v9 == 1)
    {
      LODWORD(result) = acc_auth_protocol_initMessage(a1, 164, a3, a4);
      int v9 = *((_DWORD *)a1 + 286);
    }
    if (v9 == 2) {
      LODWORD(result) = acc_auth_protocol_initMessage(a1, 165, a3, a4);
    }
    if (result)
    {
      return 1;
    }
    else
    {
      a3[4] = 0;
      a3[5] = a2;
      a3[3] += 2;
      if (gLogObjects && gNumLogObjects >= 55)
      {
        int v10 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        int v10 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        int v11 = *a1;
        int v12 = *a3;
        int v13 = a3[1];
        int v14 = a3[2];
        int v15 = a3[3];
        int v16 = a3[5];
        if ((char)a3[3] < 0)
        {
          int v17 = a3[4];
          int v18 = a3[5];
        }
        else
        {
          int v17 = 0;
          int v18 = 0;
        }
        v19[0] = 67111168;
        v19[1] = v11;
        __int16 v20 = 1024;
        int v21 = v12;
        __int16 v22 = 1024;
        int v23 = v13;
        __int16 v24 = 1024;
        int v25 = v14;
        __int16 v26 = 1024;
        int v27 = v15;
        __int16 v28 = 1024;
        int v29 = v17;
        __int16 v30 = 1024;
        int v31 = v18;
        __int16 v32 = 1024;
        int v33 = v16;
        __int16 v34 = 1024;
        int v35 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[AccAuth] initInfoCommonMessage: sessionID %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %02x (%02x %02x), infoType %d, errorNo %d \n", (uint8_t *)v19, 0x38u);
        return 0;
      }
    }
  }
  return result;
}

BOOL acc_auth_protocol_initInfoCommonMessageExtendedLength(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 *a3, unsigned int a4, __int16 a5)
{
  if (!a1 || !a3 || a4 < 4) {
    return 1;
  }
  BOOL result = acc_auth_protocol_initInfoCommonMessage(a1, a2, a3, a4);
  a3[3] = -126;
  a3[4] = HIBYTE(a5);
  a3[5] = a5;
  a3[6] = 0;
  a3[7] = a2;
  return result;
}

BOOL acc_auth_protocol_initFinishMessage(unsigned __int8 *a1, int a2, unsigned __int8 *a3, unsigned int a4)
{
  BOOL inited = 1;
  if (a1 && a3 && a4 >= 4)
  {
    int v9 = *((_DWORD *)a1 + 286);
    if (v9 == 1)
    {
      BOOL inited = acc_auth_protocol_initMessage(a1, 166, a3, a4);
      int v9 = *((_DWORD *)a1 + 286);
    }
    if (v9 == 2) {
      BOOL inited = acc_auth_protocol_initMessage(a1, 167, a3, a4);
    }
    if (a2)
    {
      a3[4] = 1;
      a3[5] = HIBYTE(a2);
      a3[6] = BYTE2(a2);
      a3[7] = BYTE1(a2);
      char v10 = 5;
      a3[8] = a2;
    }
    else
    {
      a3[4] = 0;
      char v10 = 1;
    }
    a3[3] += v10;
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v11 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *a1;
      int v14 = *a3;
      int v15 = a3[1];
      int v16 = a3[2];
      int v18 = 0;
      acc_auth_protocol_sizeofMessage((uint64_t)a3, a4, (int *)buf, &v18);
      int v17 = a3[4];
      *(_DWORD *)buf = 67110656;
      int v20 = v13;
      __int16 v21 = 1024;
      int v22 = v14;
      __int16 v23 = 1024;
      int v24 = v15;
      __int16 v25 = 1024;
      int v26 = v16;
      __int16 v27 = 1024;
      int v28 = v18;
      __int16 v29 = 1024;
      int v30 = v17;
      __int16 v31 = 1024;
      BOOL v32 = inited;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[AccAuth] initFinishMessage: sessionID %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d, paramID0 %d, errorNo %d \n", buf, 0x2Cu);
    }
  }
  return inited;
}

uint64_t acc_auth_protocol_initInfoChallengeMessage(unsigned __int8 *a1, const void *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  uint64_t v5 = 1;
  if (a1 && a4 && a5 >= 4)
  {
    if (a2 && (a3 - 1) <= 0x1Fu && !acc_auth_protocol_initInfoCommonMessage(a1, 7u, a4, a5))
    {
      a4[6] = 10;
      a4[7] = a3;
      memcpy(a4 + 8, a2, a3);
      uint64_t v5 = 0;
      a4[3] += a3 + 2;
    }
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v11 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *((_DWORD *)a1 + 286);
      int v14 = *a1;
      int v15 = *a4;
      int v16 = a4[1];
      int v17 = a4[2];
      int v21 = 0;
      acc_auth_protocol_sizeofMessage((uint64_t)a4, a5, (int *)buf, &v21);
      int v18 = a4[5];
      int v19 = a4[6];
      int v20 = a4[7];
      *(_DWORD *)buf = 67111424;
      int v23 = v13;
      __int16 v24 = 1024;
      int v25 = v14;
      __int16 v26 = 1024;
      int v27 = v15;
      __int16 v28 = 1024;
      int v29 = v16;
      __int16 v30 = 1024;
      int v31 = v17;
      __int16 v32 = 1024;
      int v33 = v21;
      __int16 v34 = 1024;
      int v35 = v18;
      __int16 v36 = 1024;
      int v37 = v19;
      __int16 v38 = 1024;
      int v39 = v20;
      __int16 v40 = 1024;
      int v41 = v5;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[AccAuth] initInfoChallengeMessage: role %d, sessionID %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d, infoType %d, paramID1 %d, challengeLen %d, errorNo %d \n", buf, 0x3Eu);
    }
  }
  return v5;
}

uint64_t acc_auth_protocol_determineAuthType(int a1, unsigned __int8 *a2, unsigned int a3, int a4, unsigned __int8 *a5, unsigned int a6, int a7, unsigned char *a8, int *a9)
{
  uint64_t v9 = 1;
  if (a1 && a2 && a3 && a5 && a6 && a8 && a9)
  {
    unint64_t v15 = 0;
    do
    {
      unint64_t v16 = 0;
      do
      {
        if (a5[v16] == a2[v15]) {
          int v17 = a2[v15];
        }
        else {
          int v17 = 4;
        }
        ++v16;
      }
      while (v16 < a6 && v17 == 4);
      ++v15;
    }
    while (v15 < a3 && v17 == 4);
    if (v17 == 4)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      *a8 = v17;
      *a9 = a7 & a4;
    }
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v18 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *a9;
      int v20 = *a2;
      int v21 = a2[1];
      int v22 = a2[2];
      int v23 = a2[3];
      int v24 = *a5;
      int v25 = a5[1];
      int v26 = a5[2];
      int v27 = a5[3];
      int v28 = *a8;
      *(_DWORD *)buf = 67112960;
      int v34 = a1;
      __int16 v35 = 1024;
      int v36 = a4;
      __int16 v37 = 1024;
      int v38 = a7;
      __int16 v39 = 1024;
      int v40 = v19;
      __int16 v41 = 1024;
      unsigned int v42 = a3;
      __int16 v43 = 1024;
      int v44 = v20;
      __int16 v45 = 1024;
      int v46 = v21;
      __int16 v47 = 1024;
      int v48 = v22;
      __int16 v49 = 1024;
      int v50 = v23;
      __int16 v51 = 1024;
      unsigned int v52 = a6;
      __int16 v53 = 1024;
      int v54 = v24;
      __int16 v55 = 1024;
      int v56 = v25;
      __int16 v57 = 1024;
      int v58 = v26;
      __int16 v59 = 1024;
      int v60 = v27;
      __int16 v61 = 1024;
      int v62 = v28;
      __int16 v63 = 1024;
      int v64 = v9;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[AccAuth] determineAuthType: role %d, characteristics %#10x / %#10x -> %#10x, authType (%d)[%d %d %d %d] / (%d)[%d %d %d %d] -> [%d], errorNo %d \n", buf, 0x62u);
    }
  }
  return v9;
}

uint64_t acc_auth_protocol_createSessionWithContext(int a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  if (!a2 || !a3)
  {
    uint64_t SessionImplementation = 1;
    if (!a3) {
      return SessionImplementation;
    }
    goto LABEL_34;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v8 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v8 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(_DWORD *)a2;
    int v11 = *(_DWORD *)(a2 + 8);
    int v12 = *(unsigned __int8 *)(a2 + 4);
    int v13 = *(unsigned __int8 *)(a2 + 5);
    int v14 = *(unsigned __int8 *)(a2 + 6);
    int v15 = *(unsigned __int8 *)(a2 + 7);
    int v29 = 67110656;
    int v30 = a1;
    __int16 v31 = 1024;
    int v32 = v10;
    __int16 v33 = 1024;
    int v34 = v11;
    __int16 v35 = 1024;
    int v36 = v12;
    __int16 v37 = 1024;
    int v38 = v13;
    __int16 v39 = 1024;
    int v40 = v14;
    __int16 v41 = 1024;
    int v42 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[AccAuth] createSession: setupInfo: role %d, characteristics %#10x, authTypes(%d)[%d %d %d %d] \n", (uint8_t *)&v29, 0x2Cu);
  }
  bzero(a3, 0x550uLL);
  *((void *)a3 + 168) = a4;
  a3[1] = 1;
  *((_DWORD *)a3 + 286) = a1;
  *((_DWORD *)a3 + 289) = 4;
  *((_DWORD *)a3 + 287) = 9;
  a3[69] = _acc_auth_protocol_generateRandomUniform(0x10u);
  *((_WORD *)a3 + 35) = 4112;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unint64_t v16 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    unint64_t v16 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  int v17 = a3 + 1144;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
    acc_auth_protocol_createSessionWithContext_cold_4();
  }
  if (*v17 == 2) {
    goto LABEL_22;
  }
  if (*v17 == 1)
  {
    uint64_t v18 = _acc_auth_protocol_reserveFreeSessionID(a3);
    if (*((_DWORD *)a3 + 286) == 2)
    {
LABEL_22:
      *a3 = -1;
      goto LABEL_23;
    }
    uint64_t SessionImplementation = v18;
    if (!v18)
    {
LABEL_23:
      *(_OWORD *)(a3 + 1324) = *(_OWORD *)a2;
      if (gLogObjects && gNumLogObjects >= 55)
      {
        int v19 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        int v19 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
        acc_auth_protocol_createSessionWithContext_cold_2();
      }
      uint64_t SessionImplementation = _acc_auth_protocol_createSessionImplementation(a2, a3);
      if (!SessionImplementation) {
        kdebug_trace();
      }
    }
  }
  else
  {
    uint64_t SessionImplementation = 1;
  }
LABEL_34:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v20 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v20 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = *((_DWORD *)a3 + 286);
    int v22 = *((_DWORD *)a3 + 331);
    int v23 = *((_DWORD *)a3 + 333);
    int v24 = a3[1328];
    int v25 = a3[1329];
    int v26 = a3[1330];
    int v27 = a3[1331];
    int v29 = 67110912;
    int v30 = v21;
    __int16 v31 = 1024;
    int v32 = v22;
    __int16 v33 = 1024;
    int v34 = v23;
    __int16 v35 = 1024;
    int v36 = v24;
    __int16 v37 = 1024;
    int v38 = v25;
    __int16 v39 = 1024;
    int v40 = v26;
    __int16 v41 = 1024;
    int v42 = v27;
    __int16 v43 = 1024;
    int v44 = SessionImplementation;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[AccAuth] createSession: outSession: role %d, characteristics %#10x, authTypes(%d)[%d %d %d %d], errorNo %d \n", (uint8_t *)&v29, 0x32u);
  }
  return SessionImplementation;
}

unsigned __int8 *acc_auth_protocol_endSession(unsigned __int8 *result)
{
  if (result)
  {
    unsigned int v1 = result;
    int v2 = *result;
    if (gLogObjects && gNumLogObjects >= 55)
    {
      BOOL v3 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      BOOL v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109120;
      v4[1] = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[AccAuth] endSession: sessionID %d \n", (uint8_t *)v4, 8u);
    }
    __acc_auth_protocol_cleanupSegmentedTransfer(v1, 1);
    __acc_auth_protocol_cleanupSegmentedTransfer(v1, 0);
    _acc_auth_protocol_endSessionImplementation(v1);
    bzero(v1, 0x550uLL);
    *((_DWORD *)v1 + 289) = 4;
    _acc_auth_protocol_returnSessionID(v2);
    return (unsigned __int8 *)kdebug_trace();
  }
  return result;
}

BOOL acc_auth_protocol_authSetupStart(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  BOOL inited = 1;
  if (a1 && a2 && *((_DWORD *)a1 + 286) == 1 && _acc_auth_protocol_supportsAuthRole(1))
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v7 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *((_DWORD *)a1 + 286);
      int v9 = *a1;
      v11[0] = 67109376;
      v11[1] = v8;
      __int16 v12 = 1024;
      int v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[AccAuth] authSetupStart: authSession: role %d, sessionID %d \n", (uint8_t *)v11, 0xEu);
    }
    BOOL inited = acc_auth_protocol_initSetupMessage(a1, a2, a3);
    kdebug_trace();
  }
  return inited;
}

uint64_t acc_auth_protocol_setupSegmentedSend(unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  return __acc_auth_protocol_setupSegmentedTransfer(a1, 1, a2, a3, a4, a5);
}

uint64_t __acc_auth_protocol_setupSegmentedTransfer(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v11 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    int v28 = a5;
    __int16 v29 = 1024;
    int v30 = a6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[AccAuth] setupSegmentedTransfer: dataLen = %d, segmentSize = %d \n", buf, 0xEu);
  }
  if (a1 && a5 && a6)
  {
    unsigned int v12 = *((_DWORD *)a1 + 334);
    if (v12 <= 4) {
      unsigned int v13 = 0;
    }
    else {
      unsigned int v13 = v12 - 10;
    }
    if (v13 >= a6)
    {
      unsigned int v14 = (a5 + a6 - 1) / a6;
      if ((v14 & 0xFF00) != 0)
      {
        uint64_t v15 = 34;
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v24 = 96;
        if (a2) {
          uint64_t v24 = 72;
        }
        *(void *)&a1[v24] = a3;
        int v25 = a1 + 72;
        if (!a2) {
          int v25 = a1 + 96;
        }
        *((void *)v25 + 1) = a4;
        *((_WORD *)v25 + 8) = a5;
        *((_WORD *)v25 + 9) = 0;
        v25[22] = a6;
        v25[21] = v14;
        unsigned char v25[20] = 0;
      }
LABEL_19:
      if (gLogObjects && gNumLogObjects >= 55)
      {
        unint64_t v16 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        unint64_t v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        int v17 = *((_DWORD *)a1 + 286);
        int v18 = *a1;
        *(_DWORD *)buf = 67110656;
        int v28 = v17;
        __int16 v29 = 1024;
        int v30 = v18;
        __int16 v31 = 1024;
        unsigned int v32 = a2;
        __int16 v33 = 1024;
        int v34 = a5;
        __int16 v35 = 1024;
        unsigned int v36 = a6;
        __int16 v37 = 1024;
        int v38 = (unsigned __int16)v14;
        __int16 v39 = 1024;
        int v40 = v15;
        int v19 = "[AccAuth] setupSegmentedTransfer: authSession: role %d, sessionID %d, send %d, dataLen %d, segmentSize %d,"
              " totalSegments %d, errorNo %d \n";
        int v20 = v16;
        uint32_t v21 = 44;
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, v19, buf, v21);
        return v15;
      }
      return v15;
    }
LABEL_18:
    LOWORD(v14) = 0;
    uint64_t v15 = 1;
    goto LABEL_19;
  }
  if (a1) {
    goto LABEL_18;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v23 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v23 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  uint64_t v15 = 1;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109888;
    int v28 = a2;
    __int16 v29 = 1024;
    int v30 = a5;
    __int16 v31 = 1024;
    unsigned int v32 = a6;
    __int16 v33 = 1024;
    int v34 = 1;
    int v19 = "[AccAuth] setupSegmentedTransfer: authSession: no authSession, send %d, dataLen %d, segmentSize %d, errorNo %d \n";
    int v20 = v23;
    uint32_t v21 = 26;
    goto LABEL_26;
  }
  return v15;
}

void __acc_auth_protocol_cleanupSegmentedTransfer(unsigned __int8 *a1, int a2)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v4 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = *a1;
      v8[0] = 67109376;
      v8[1] = v5;
      __int16 v9 = 1024;
      int v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[AccAuth] cleanupSegmentedTransfer: sessionID %d, send %d \n", (uint8_t *)v8, 0xEu);
    }
    uint64_t v6 = 96;
    if (a2) {
      uint64_t v6 = 72;
    }
    int v7 = &a1[v6];
    *(void *)int v7 = 0;
    *((void *)v7 + 1) = 0;
    *(void *)(v7 + 15) = 0;
  }
}

uint64_t acc_auth_protocol_setupSegmentedRecv(unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  return __acc_auth_protocol_setupSegmentedTransfer(a1, 0, a2, a3, a4, a5);
}

uint64_t acc_auth_protocol_initSegmentedSendMessage(unsigned __int8 *a1, unsigned int a2, int a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects) {
    BOOL v7 = gNumLogObjects <= 54;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = !v7;
  if (a1)
  {
    if (v8)
    {
      unsigned int v12 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      unsigned int v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      unsigned int v14 = *((_DWORD *)a1 + 286);
      int v15 = *a1;
      int v16 = *((unsigned __int16 *)a1 + 45);
      int v17 = a1[92];
      int v18 = a1[93];
      *(_DWORD *)buf = 67110656;
      unsigned int v38 = v14;
      __int16 v39 = 1024;
      int v40 = v15;
      __int16 v41 = 1024;
      int v42 = a2;
      __int16 v43 = 1024;
      int v44 = a3;
      __int16 v45 = 1024;
      int v46 = v16;
      __int16 v47 = 1024;
      int v48 = v17;
      __int16 v49 = 1024;
      int v50 = v18;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[AccAuth] initSegmentedSendMessage: ENTER authSession: role %d, sessionID %d, infoType %d, paramID %#04x, dataSend:[already %d, segment last %d / total %d] \n", buf, 0x2Cu);
    }
    if (*((void *)a1 + 10) && !acc_auth_protocol_initInfoCommonMessage(a1, a2, a4, a5))
    {
      uint64_t v23 = *((unsigned __int16 *)a1 + 45);
      unsigned __int16 v24 = *((_WORD *)a1 + 44) - v23;
      unsigned __int8 v35 = a1[93];
      unsigned __int8 v36 = a1[92];
      if (a1[94] >= v24) {
        unsigned __int8 v25 = v24;
      }
      else {
        unsigned __int8 v25 = a1[94];
      }
      uint64_t v26 = *((void *)a1 + 10);
      int v27 = (unsigned char *)acc_auth_protocol_messagePayload((uint64_t)a4, a5, 0, 0, 0);
      if (a2 <= 8 && ((1 << a2) & 0x124) != 0)
      {
        v27[2] = a3;
        v27[3] = v36;
        v27[4] = v35 - 1;
        v27[5] = v25;
        a4[3] += 4;
        memcpy(v27 + 6, (const void *)(v26 + v23), v25);
      }
      uint64_t v19 = 0;
      a4[3] += v25;
      *((_WORD *)a1 + 45) += v25;
      ++a1[92];
    }
    else
    {
      uint64_t v19 = 1;
    }
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v28 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v28 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      unsigned int v29 = *((_DWORD *)a1 + 286);
      int v30 = *a1;
      int v31 = *((unsigned __int16 *)a1 + 45);
      int v32 = a1[92];
      int v33 = a1[93];
      *(_DWORD *)buf = 67110912;
      unsigned int v38 = v29;
      __int16 v39 = 1024;
      int v40 = v30;
      __int16 v41 = 1024;
      int v42 = a2;
      __int16 v43 = 1024;
      int v44 = a3;
      __int16 v45 = 1024;
      int v46 = v31;
      __int16 v47 = 1024;
      int v48 = v32;
      __int16 v49 = 1024;
      int v50 = v33;
      __int16 v51 = 1024;
      int v52 = v19;
      int v20 = "[AccAuth] initSegmentedSendMessage: EXIT authSession: role %d, sessionID %d, infoType %d, paramID %#04x, dat"
            "aSend:[already %d, segment last %d / total %d], errorNo %d \n";
      uint32_t v21 = v28;
      uint32_t v22 = 50;
      goto LABEL_37;
    }
  }
  else
  {
    if (v8)
    {
      unsigned int v13 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      unsigned int v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    uint64_t v19 = 1;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109632;
      unsigned int v38 = a2;
      __int16 v39 = 1024;
      int v40 = a3;
      __int16 v41 = 1024;
      int v42 = 1;
      int v20 = "[AccAuth] initSegmentedSendMessage: EXIT authSession: no authSession, infoType %d, paramID %#04x, errorNo %d \n";
      uint32_t v21 = v13;
      uint32_t v22 = 20;
LABEL_37:
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, v20, buf, v22);
    }
  }
  return v19;
}

uint64_t acc_auth_protocol_updateSegmentReceive(unsigned __int8 *a1, const void *a2, unsigned int a3, int a4, int a5, int a6, unsigned __int8 *a7, unsigned int a8, BOOL *a9)
{
  if (gLogObjects) {
    BOOL v10 = gNumLogObjects <= 54;
  }
  else {
    BOOL v10 = 1;
  }
  int v11 = !v10;
  if (a1)
  {
    if (v11)
    {
      int v17 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v17 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      int v19 = *((_DWORD *)a1 + 286);
      int v20 = *a1;
      int v21 = *((unsigned __int16 *)a1 + 57);
      int v22 = a1[116];
      int v23 = a1[117];
      *(_DWORD *)buf = 67110912;
      int v48 = v19;
      __int16 v49 = 1024;
      int v50 = v20;
      __int16 v51 = 1024;
      int v52 = a4;
      __int16 v53 = 1024;
      int v54 = a5;
      __int16 v55 = 1024;
      int v56 = a6;
      __int16 v57 = 1024;
      int v58 = v21;
      __int16 v59 = 1024;
      int v60 = v22;
      __int16 v61 = 1024;
      int v62 = v23;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[AccAuth] updateSegmentReceive: authSession: role %d, sessionID %d, infoType %d, paramID %#04x, segmentNum %d, dataRecv:[already %d, segment last %d / total %d] \n", buf, 0x32u);
    }
    unsigned __int8 v24 = a6 + 1;
    uint64_t v25 = *((void *)a1 + 13);
    if (v25 && ((unsigned int v26 = *((_DWORD *)a1 + 334), v26 <= 4) ? (v27 = 0) : (v27 = v26 - 10), v27 >= a3 && a1[116] == a6))
    {
      int v28 = 0;
      uint64_t v29 = *((unsigned __int16 *)a1 + 57);
      uint64_t v30 = 1;
      if (v29 + a3 <= *((unsigned __int16 *)a1 + 56) && v29 + a3 <= 0x400)
      {
        memcpy((void *)(v25 + v29), a2, a3);
        __int16 v31 = *((_WORD *)a1 + 57) + a3;
        *((_WORD *)a1 + 57) = v31;
        a1[116] = v24;
        int v32 = a1[117];
        if (a9) {
          *a9 = v32 == v24;
        }
        if (v32 == v24)
        {
          uint64_t v30 = 0;
          *((_WORD *)a1 + 56) = v31;
          int v28 = 1;
        }
        else if (acc_auth_protocol_initInfoCommonMessage(a1, 3u, a7, a8))
        {
          int v28 = 0;
        }
        else
        {
          __int16 v43 = (unsigned char *)acc_auth_protocol_messagePayload((uint64_t)a7, a8, 0, 0, 0);
          if (v43)
          {
            uint64_t v30 = 0;
            int v28 = 0;
            v43[2] = 6;
            v43[3] = a4;
            v43[4] = a5;
            v43[5] = 7;
            v43[6] = v24;
            a7[3] += 5;
          }
          else
          {
            int v28 = 0;
            uint64_t v30 = 45;
          }
        }
      }
    }
    else
    {
      int v28 = 0;
      uint64_t v30 = 1;
    }
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v33 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v33 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      int v34 = *((_DWORD *)a1 + 286);
      int v35 = *a1;
      int v36 = *((unsigned __int16 *)a1 + 57);
      int v37 = a1[116];
      int v38 = a1[117];
      *(_DWORD *)buf = 67111424;
      int v48 = v34;
      __int16 v49 = 1024;
      int v50 = v35;
      __int16 v51 = 1024;
      int v52 = a4;
      __int16 v53 = 1024;
      int v54 = a5;
      __int16 v55 = 1024;
      int v56 = v24;
      __int16 v57 = 1024;
      int v58 = v36;
      __int16 v59 = 1024;
      int v60 = v37;
      __int16 v61 = 1024;
      int v62 = v38;
      __int16 v63 = 1024;
      int v64 = v28;
      __int16 v65 = 1024;
      int v66 = v30;
      __int16 v39 = "[AccAuth] updateSegmentReceive: authSession: role %d, sessionID %d, infoType %d, paramID %#04x, nextSegment "
            "%d, dataRecv:[already %d, segment last %d / total %d], transferFinished %d, errorNo %d \n";
      int v40 = v33;
      uint32_t v41 = 62;
LABEL_40:
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, v39, buf, v41);
    }
  }
  else
  {
    if (v11)
    {
      int v18 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    uint64_t v30 = 1;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109632;
      int v48 = a4;
      __int16 v49 = 1024;
      int v50 = a5;
      __int16 v51 = 1024;
      int v52 = 1;
      __int16 v39 = "[AccAuth] updateSegmentReceive: authSession: no authSession, infoType %d, paramID %#04x, errorNo %d \n";
      int v40 = v18;
      uint32_t v41 = 20;
      goto LABEL_40;
    }
  }
  return v30;
}

uint64_t acc_auth_protocol_handleMessage(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  uint64_t v6 = a4;
  BOOL v7 = a1;
  uint64_t v8 = 1;
  __int16 v9 = &unk_100239000;
  BOOL v10 = &unk_100239000;
  if (!a1 || !a2 || !a4) {
    goto LABEL_93;
  }
  int isRespMessage = acc_auth_protocol_isRespMessage(a2);
  int v12 = a2[2] >> 4;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v13 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    unsigned int v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *((_DWORD *)v7 + 286);
    int v15 = *v7;
    int v16 = *a2;
    unsigned int v17 = a5;
    int v18 = a2[1];
    int v76 = v7;
    int v19 = v12;
    int v20 = a2[2];
    int v80 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v80);
    *(_DWORD *)buf = 67110912;
    *(_DWORD *)&uint8_t buf[4] = v14;
    __int16 v9 = (void *)&unk_100239000;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v15;
    *(_WORD *)&uint8_t buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = v16;
    __int16 v82 = 1024;
    int v83 = v18;
    a5 = v17;
    BOOL v10 = (_DWORD *)&unk_100239000;
    __int16 v84 = 1024;
    int v85 = v20;
    int v12 = v19;
    BOOL v7 = v76;
    __int16 v86 = 1024;
    int v87 = v80;
    __int16 v88 = 1024;
    int v21 = isRespMessage;
    int v89 = isRespMessage;
    __int16 v90 = 1024;
    int v91 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[AccAuth] handleMessage: authSession: role %d, sessionID %d; inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, inMess"
      "ageIsResp %d, inMsgSeqNum %d \n",
      buf,
      0x32u);
    if (!isRespMessage) {
      goto LABEL_14;
    }
  }
  else
  {
    int v21 = isRespMessage;
    if (!isRespMessage) {
      goto LABEL_14;
    }
  }
  if (v7[70] != v12)
  {
    int v25 = v12;
    unsigned int v26 = v10;
    uint64_t v27 = v9[49];
    int v28 = v26;
    if (v27 && (int)v26[100] >= 55)
    {
      uint64_t v29 = *(NSObject **)(v27 + 432);
    }
    else
    {
      uint64_t v29 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    uint64_t v8 = 1;
    BOOL v10 = v28;
    __int16 v9 = (void *)&unk_100239000;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_55;
    }
    goto LABEL_93;
  }
LABEL_14:
  if (*((_DWORD *)v7 + 286) != 2 || *a2 != 160) {
    goto LABEL_31;
  }
  uint64_t v22 = v9[49];
  int v23 = v10[100];
  if (v22 && v23 >= 55)
  {
    unsigned __int8 v24 = *(NSObject **)(v22 + 432);
  }
  else
  {
    unsigned __int8 v24 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v22;
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&uint8_t buf[14] = v23;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      int v30 = *((_DWORD *)v7 + 286);
      goto LABEL_28;
    }
  }
  int v30 = 2;
LABEL_28:
  __int16 v9 = &unk_100239000;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v30;
    _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "[AccAuth] handleMessage: role %d, Got AuthSetup, reset session \n", buf, 8u);
    int v30 = *((_DWORD *)v7 + 286);
  }
  uint64_t v31 = *((void *)v7 + 168);
  *(_OWORD *)buf = *(_OWORD *)(v7 + 1324);
  acc_auth_protocol_endSession(v7);
  acc_auth_protocol_createSessionWithContext(v30, (uint64_t)buf, v7, v31);
  unsigned __int8 *v7 = a2[2] & 0xF;
  int v21 = isRespMessage;
LABEL_31:
  uint64_t v32 = acc_auth_protocol_messagePayload((uint64_t)a2, a3, 0, 0, 0);
  if (!v21 || (unsigned int v33 = v7[71], v33 > 0xF) || v33 != v12)
  {
    int v77 = v12;
    unsigned __int8 *v6 = 0;
    int v37 = *a2;
    unsigned int v38 = a5;
    if ((v37 & 0xFE) == 0xA4) {
      int v39 = *(unsigned __int8 *)(v32 + 1);
    }
    else {
      int v39 = 255;
    }
    uint64_t v40 = v9[49];
    int v41 = v10[100];
    if (v40 && v41 >= 55)
    {
      int v42 = *(NSObject **)(v40 + 432);
    }
    else
    {
      int v42 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v40;
        *(_WORD *)&uint8_t buf[12] = 1024;
        *(_DWORD *)&uint8_t buf[14] = v41;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        int v37 = *a2;
      }
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      int v48 = *((_DWORD *)v7 + 286);
      __int16 v49 = v6;
      int v50 = v10;
      int v51 = *v7;
      int v80 = 0;
      acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v80);
      *(_DWORD *)buf = 67110656;
      *(_DWORD *)&uint8_t buf[4] = v48;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v51;
      BOOL v10 = v50;
      uint64_t v6 = v49;
      *(_WORD *)&uint8_t buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v37;
      __int16 v82 = 1024;
      int v83 = v80;
      __int16 v84 = 1024;
      int v85 = v39;
      __int16 v86 = 1024;
      int v87 = isRespMessage;
      __int16 v88 = 1024;
      int v89 = v77;
      _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "[AccAuth] handleMessage: authSession: role %d, sessionID %d, inMessage %#04x, len %d, infoType %#04x, inMessageIsResp %d, inMsgSeqNum %d \n", buf, 0x2Cu);
    }
    a5 = v38;
    kdebug_trace();
    kdebug_trace();
    v7[71] = a2[2] >> 4;
    int v43 = *((_DWORD *)v7 + 286);
    __int16 v9 = &unk_100239000;
    if (v43 == 2)
    {
      if (_acc_auth_protocol_supportsAuthRole(2))
      {
        switch(*a2)
        {
          case 0xA0u:
            uint64_t v44 = __acc_auth_protocol_handleAuthSetup(v7, a2, a3, v6, v38);
            break;
          case 0xA2u:
            uint64_t v44 = __acc_auth_protocol_handleAuthStart(v7, a2, a3, v6, v38);
            break;
          case 0xA4u:
            uint64_t v44 = __acc_auth_protocol_handleAuthInfo(v7, a2, a3, v6, v38);
            break;
          case 0xA6u:
            uint64_t v44 = __acc_auth_protocol_handleAuthFinish(v7, a2, a3, v6, v38);
            break;
          default:
            int v52 = logObjectForModule_13();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
            {
              int v53 = *a2;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v53;
              _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "[AccAuth] handleMessage: invalid incoming messageID(%#04x) ! \n", buf, 8u);
            }
            goto LABEL_58;
        }
        uint64_t v8 = v44;
      }
      else
      {
LABEL_58:
        uint64_t v8 = 1;
      }
      int v43 = *((_DWORD *)v7 + 286);
    }
    else
    {
      uint64_t v8 = 1;
    }
    if (v43 == 1 && _acc_auth_protocol_supportsAuthRole(1))
    {
      switch(*a2)
      {
        case 0xA1u:
          uint64_t started = __acc_auth_protocol_handleAuthSetupResp(v7, a2, a3, v6, v38);
          goto LABEL_73;
        case 0xA3u:
          uint64_t started = __acc_auth_protocol_handleAuthStartResp(v7, a2, a3, v6, v38);
          goto LABEL_73;
        case 0xA5u:
          uint64_t started = __acc_auth_protocol_handleAuthInfoResp(v7, a2, a3, v6, v38);
LABEL_73:
          uint64_t v8 = started;
          break;
        case 0xA7u:
          __acc_auth_protocol_handleAuthFinishResp(v7, a2, a3);
          uint64_t v8 = 1;
          break;
        default:
          __int16 v55 = v10;
          int v56 = logObjectForModule_13();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
          {
            int v57 = *a2;
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v57;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "[AccAuth] handleMessage: invalid incoming messageID(%#04x) ! \n", buf, 8u);
          }
          BOOL v10 = v55;
          __int16 v9 = (void *)&unk_100239000;
          break;
      }
    }
    kdebug_trace();
    if (v8) {
      goto LABEL_93;
    }
    uint64_t v8 = *v6;
    if ((v8 - 164) >= 2)
    {
      if (!*v6) {
        goto LABEL_93;
      }
    }
    else
    {
      int v80 = 0;
      *(_DWORD *)buf = 0;
      if (acc_auth_protocol_sizeofMessage((uint64_t)v6, v38, (int *)buf, &v80) && v80)
      {
        int v58 = v6[*(unsigned int *)buf + 1];
        goto LABEL_85;
      }
      if ((isRespMessage & 1) != 0 && v7[70] != v77)
      {
        CFNumberRef v72 = logObjectForModule_13();
        uint64_t v8 = 0;
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "[AccAuth] handleMessage: Cannot get messagePayload ! \n", buf, 2u);
          uint64_t v8 = 0;
        }
        goto LABEL_93;
      }
    }
    int v58 = 0;
LABEL_85:
    kdebug_trace();
    uint64_t v59 = v9[49];
    int v60 = v10;
    int v61 = v10[100];
    if (v59 && v61 >= 55)
    {
      int v62 = *(NSObject **)(v59 + 432);
    }
    else
    {
      int v62 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
    {
      int v73 = *((_DWORD *)v7 + 286);
      int v74 = *v7;
      int v75 = *v6;
      int v80 = 0;
      acc_auth_protocol_sizeofMessage((uint64_t)v6, a5, (int *)buf, &v80);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v73;
      __int16 v9 = (void *)&unk_100239000;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v74;
      *(_WORD *)&uint8_t buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v75;
      __int16 v82 = 1024;
      int v83 = v80;
      __int16 v84 = 1024;
      int v85 = v58;
      _os_log_debug_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "[AccAuth] handleMessage: authSession: role %d, sessionID %d, outMessage %#04x, len %d, infoType %#04x \n", buf, 0x20u);
    }
    uint64_t v8 = 0;
    BOOL v10 = v60;
    goto LABEL_93;
  }
  int v25 = v12;
  int v34 = v10;
  uint64_t v35 = v9[49];
  int v36 = v34;
  if (v35 && (int)v34[100] >= 55)
  {
    uint64_t v29 = *(NSObject **)(v35 + 432);
  }
  else
  {
    uint64_t v29 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  uint64_t v8 = 1;
  BOOL v10 = v36;
  __int16 v9 = (void *)&unk_100239000;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
LABEL_55:
    int v45 = acc_auth_protocol_isRespMessage(a2);
    int v46 = v7[70];
    int v47 = *a2;
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = v45;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = 1;
    *(_WORD *)&uint8_t buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = v46;
    __int16 v82 = 1024;
    int v83 = v25;
    __int16 v84 = 1024;
    int v85 = v47;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[AccAuth] handleMessage: isResponse(%d/%d) and seq#(%d != %d) doesn't match messageID(%#04x) ! \n", buf, 0x20u);
  }
LABEL_93:
  uint64_t v63 = v9[49];
  int v64 = v10[100];
  if (v63 && v64 >= 55)
  {
    __int16 v65 = *(NSObject **)(v63 + 432);
  }
  else
  {
    __int16 v65 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
  {
    int v66 = *((_DWORD *)v7 + 286);
    int v67 = *v7;
    int v68 = *v6;
    int v69 = v6[1];
    int v70 = v6[2];
    int v80 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)v6, a5, (int *)buf, &v80);
    *(_DWORD *)buf = 67110656;
    *(_DWORD *)&uint8_t buf[4] = v66;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v67;
    *(_WORD *)&uint8_t buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = v68;
    __int16 v82 = 1024;
    int v83 = v69;
    __int16 v84 = 1024;
    int v85 = v70;
    __int16 v86 = 1024;
    int v87 = v80;
    __int16 v88 = 1024;
    int v89 = v8;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "[AccAuth] handleMessage: authSession: role %d, sessionID %d, outMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, errorNo %d \n", buf, 0x2Cu);
  }
  return v8;
}

BOOL __acc_auth_protocol_handleAuthSetup(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    BOOL v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v25 = a5;
    int v26 = *a1;
    int v37 = a4;
    unsigned int v27 = a2[1];
    unsigned int v32 = a1[1];
    int v33 = *a2;
    int v35 = a2[2];
    int v39 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v39);
    unsigned int v28 = bswap32(*(_DWORD *)(a2 + 5));
    int v29 = a2[10];
    *(_DWORD *)buf = 67111168;
    int v41 = v26;
    a5 = v25;
    __int16 v42 = 1024;
    unsigned int v43 = v27 >> 4;
    __int16 v44 = 1024;
    unsigned int v45 = v32;
    __int16 v46 = 1024;
    int v47 = v33;
    __int16 v48 = 1024;
    unsigned int v49 = v27;
    a4 = v37;
    __int16 v50 = 1024;
    int v51 = v35;
    __int16 v52 = 1024;
    int v53 = v39;
    __int16 v54 = 1024;
    unsigned int v55 = v28;
    __int16 v56 = 1024;
    int v57 = v29;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[AccAuth] handleAuthSetup: sessionID %d, version %d / %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, characteristics %#10x, authTypesLen %d \n", buf, 0x38u);
  }
  unsigned int v11 = *((_DWORD *)a1 + 333);
  if (!v11)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v16 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v16 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      __acc_auth_protocol_handleAuthSetup_cold_1(v16);
    }
    return 1;
  }
  if (v11 >= 0x100)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      unsigned int v17 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      unsigned int v17 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      __acc_auth_protocol_handleAuthSetup_cold_6(v17);
    }
    return 1;
  }
  if (!a2[10]) {
    return 1;
  }
  int v36 = a4;
  unsigned int v12 = a5;
  unsigned int v13 = a2[1];
  int v14 = v13 >> 4;
  unsigned int v34 = a2[2];
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v15 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    int v41 = v34 & 0xF;
    __int16 v42 = 1024;
    unsigned int v43 = v13 >> 4;
    __int16 v44 = 1024;
    unsigned int v45 = v34 >> 4;
    _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[AccAuth] handleAuthSetup: sessionID %d, version %d, sequence %d \n", buf, 0x14u);
  }
  int v20 = a1[1];
  if ((v13 & 0xF0) != 0x10 || v20 == v14)
  {
    unsigned int v21 = v12;
    if (v20 != v14)
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        int v30 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        int v30 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v31 = a1[1];
        *(_DWORD *)buf = 67109376;
        int v41 = v14;
        __int16 v42 = 1024;
        unsigned int v43 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "[AccAuth] handleAuthSetup: Version mismatch! %d != %d, send back version! \n", buf, 0xEu);
      }
      return acc_auth_protocol_initMessage(a1, 161, v36, v12);
    }
  }
  else
  {
    a1[1] = v14;
    unsigned int v21 = v12;
  }
  int v39 = bswap32(*(_DWORD *)(a2 + 5));
  unsigned __int8 v38 = 4;
  int v22 = acc_auth_protocol_determineAuthType(*((_DWORD *)a1 + 286), a1 + 1328, a1[1332], *((_DWORD *)a1 + 331), a2 + 11, a2[10], v39, &v38, &v39);
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v23 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v23 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    int v41 = v22;
    __int16 v42 = 1024;
    unsigned int v43 = v38;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "[AccAuth] handleAuthSetup: determineAuthType: errorNo %d, authType %d \n", buf, 0xEu);
  }
  if (!v22 && v38 != 4)
  {
    *((_DWORD *)a1 + 289) = v38;
    *((_DWORD *)a1 + 288) = v39;
    return acc_auth_protocol_initSetupMessage(a1, v36, v21);
  }
  BOOL inited = acc_auth_protocol_initFinishMessage(a1, 22, v36, v21);
  _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
  return inited;
}

BOOL __acc_auth_protocol_handleAuthStart(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    BOOL v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *a1;
    int v14 = *a2;
    int v15 = a2[1];
    int v16 = a2[2];
    int v17 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v17);
    *(_DWORD *)buf = 67110144;
    int v19 = v13;
    __int16 v20 = 1024;
    int v21 = v14;
    __int16 v22 = 1024;
    int v23 = v15;
    __int16 v24 = 1024;
    int v25 = v16;
    __int16 v26 = 1024;
    int v27 = v17;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[AccAuth] handleAuthStart: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d \n", buf, 0x20u);
  }
  if (*((_DWORD *)a1 + 289) == 1 && !acc_auth_protocol_handleAuthStart1Way(a1, a2, a3, a4, a5)) {
    return 0;
  }
  BOOL inited = acc_auth_protocol_initFinishMessage(a1, 81, a4, a5);
  _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
  return inited;
}

uint64_t __acc_auth_protocol_handleAuthInfo(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    BOOL v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v15 = *a1;
    int v16 = *a2;
    int v23 = a2[1];
    int v24 = a2[2];
    HIDWORD(v26) = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, (int *)&v26 + 1);
    *(_DWORD *)buf = 67110144;
    int v28 = v15;
    __int16 v29 = 1024;
    int v30 = v16;
    __int16 v31 = 1024;
    int v32 = v23;
    __int16 v33 = 1024;
    int v34 = v24;
    __int16 v35 = 1024;
    int v36 = HIDWORD(v26);
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[AccAuth] handleAuthInfo: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d \n", buf, 0x20u);
  }
  if (*((_DWORD *)a1 + 289) == 1) {
    uint64_t inited = acc_auth_protocol_handleAuthInfo1Way(a1, a2, a3, a4, a5);
  }
  else {
    uint64_t inited = 1;
  }
  uint64_t v26 = 0;
  int v25 = 0;
  uint64_t v12 = acc_auth_protocol_messagePayload((uint64_t)a2, a3, (_DWORD *)&v26 + 1, &v26, &v25);
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v13 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (!inited) {
      return inited;
    }
    goto LABEL_18;
  }
  int v17 = *((_DWORD *)a1 + 286);
  int v18 = *a1;
  int v19 = *a2;
  int v20 = a2[1];
  int v21 = a2[2];
  if (v12) {
    int v22 = *(unsigned __int8 *)(v12 + 1);
  }
  else {
    int v22 = 255;
  }
  *(_DWORD *)buf = 67110912;
  int v28 = v17;
  __int16 v29 = 1024;
  int v30 = v18;
  __int16 v31 = 1024;
  int v32 = v19;
  __int16 v33 = 1024;
  int v34 = v20;
  __int16 v35 = 1024;
  int v36 = v21;
  __int16 v37 = 1024;
  int v38 = HIDWORD(v26);
  __int16 v39 = 1024;
  int v40 = v22;
  __int16 v41 = 1024;
  int v42 = inited;
  _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[AccAuth] handleAuthInfo: role %d, sessionID %d; inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, infoType %d, errorNo %d \n",
    buf,
    0x32u);
  if (inited)
  {
LABEL_18:
    if (inited != 36)
    {
      uint64_t inited = acc_auth_protocol_initFinishMessage(a1, 81, a4, a5);
      _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
    }
  }
  return inited;
}

BOOL __acc_auth_protocol_handleAuthFinish(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    BOOL v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v14 = *a1;
    int v15 = *a2;
    int v16 = a2[1];
    int v17 = a2[2];
    int v18 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v18);
    *(_DWORD *)buf = 67110144;
    int v20 = v14;
    __int16 v21 = 1024;
    int v22 = v15;
    __int16 v23 = 1024;
    int v24 = v16;
    __int16 v25 = 1024;
    int v26 = v17;
    __int16 v27 = 1024;
    int v28 = v18;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[AccAuth] handleAuthFinish: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d \n", buf, 0x20u);
  }
  if (a2[4] == 1) {
    int v11 = bswap32(*(_DWORD *)(a2 + 5));
  }
  else {
    int v11 = 0;
  }
  BOOL inited = acc_auth_protocol_initFinishMessage(a1, v11, a4, a5);
  _acc_auth_protocol_handleSessionAuthenticationState(a1, v11 == 0);
  return inited;
}

uint64_t __acc_auth_protocol_handleAuthSetupResp(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  unsigned int v8 = a2[1];
  unsigned int v9 = v8 >> 4;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    BOOL v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v26 = *a1;
    unsigned int v27 = *a2;
    unsigned int v36 = a2[1];
    int v38 = a2[2];
    int v43 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v43);
    int v28 = a1[1];
    *(_DWORD *)buf = 67110656;
    int v45 = v26;
    __int16 v46 = 1024;
    unsigned int v47 = v27;
    __int16 v48 = 1024;
    unsigned int v49 = v36;
    __int16 v50 = 1024;
    int v51 = v38;
    __int16 v52 = 1024;
    int v53 = v43;
    __int16 v54 = 1024;
    unsigned int v55 = v8 >> 4;
    __int16 v56 = 1024;
    int v57 = v28;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[AccAuth] handleAuthSetupResp: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, msgVersion %d : %d \n", buf, 0x2Cu);
  }
  if (!*((_DWORD *)a1 + 333)) {
    return 1;
  }
  if (a2[3])
  {
    BOOL inited = 1;
    goto LABEL_11;
  }
  if (a1[1] == v9) {
    return 22;
  }
  if ((v8 & 0xF0) != 0x10) {
    return 1;
  }
  a1[1] = v9;
  BOOL inited = acc_auth_protocol_initSetupMessage(a1, a4, a5);
  if (!a2[3]) {
    return inited;
  }
LABEL_11:
  if (gLogObjects) {
    BOOL v12 = gNumLogObjects <= 54;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = !v12;
  if (a2[10] == 1)
  {
    if (v13)
    {
      int v14 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v32 = *a1;
      unsigned int v33 = *a2;
      unsigned int v37 = a2[1];
      int v39 = a2[2];
      int v43 = 0;
      acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v43);
      unsigned int v34 = bswap32(*(_DWORD *)(a2 + 5));
      int v35 = a2[10];
      *(_DWORD *)buf = 67110656;
      int v45 = v32;
      __int16 v46 = 1024;
      unsigned int v47 = v33;
      __int16 v48 = 1024;
      unsigned int v49 = v37;
      __int16 v50 = 1024;
      int v51 = v39;
      __int16 v52 = 1024;
      int v53 = v43;
      __int16 v54 = 1024;
      unsigned int v55 = v34;
      __int16 v56 = 1024;
      int v57 = v35;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[AccAuth] handleAuthSetupResp: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, characteristics %#10x, authTypesLen %d \n", buf, 0x2Cu);
    }
    unsigned int v16 = a2[2];
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v17 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v17 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109632;
      int v45 = v16 & 0xF;
      __int16 v46 = 1024;
      unsigned int v47 = v8 >> 4;
      __int16 v48 = 1024;
      unsigned int v49 = v16 >> 4;
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[AccAuth] handleAuthSetupResp: sessionID %d, version %d, sequence %d \n", buf, 0x14u);
    }
    unsigned int v19 = a1[1];
    if (v8 < 0x10 || v19 <= v9)
    {
      if (v19 != v9)
      {
        if (gLogObjects && gNumLogObjects >= 55)
        {
          __int16 v29 = *(NSObject **)(gLogObjects + 432);
        }
        else
        {
          __int16 v29 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v30 = a1[1];
          *(_DWORD *)buf = 67109376;
          int v45 = v8 >> 4;
          __int16 v46 = 1024;
          unsigned int v47 = v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[AccAuth] handleAuthSetupResp: Version mismatch! %d != %d \n", buf, 0xEu);
        }
        int v24 = a1;
        int v25 = 43;
        goto LABEL_69;
      }
    }
    else
    {
      a1[1] = v9;
    }
    int v43 = bswap32(*(_DWORD *)(a2 + 5));
    unsigned __int8 v42 = 4;
    int v20 = acc_auth_protocol_determineAuthType(*((_DWORD *)a1 + 286), a1 + 1328, a1[1332], *((_DWORD *)a1 + 331), a2 + 11, a2[10], v43, &v42, &v43);
    if (gLogObjects && gNumLogObjects >= 55)
    {
      __int16 v21 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      __int16 v21 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      int v45 = v20;
      __int16 v46 = 1024;
      unsigned int v47 = v42;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[AccAuth] handleAuthSetupResp: determineAuthType: errorNo %d, authType %d \n", buf, 0xEu);
    }
    if (!v20)
    {
      int v22 = v42;
      if (v42 != 4)
      {
        *((_DWORD *)a1 + 289) = v42;
        *((_DWORD *)a1 + 288) = v43;
        if (v22 == 1) {
          return acc_auth_protocol_initInfoCommonMessage(a1, 9u, a4, a5);
        }
        else {
          return acc_auth_protocol_initStartMessage(a1, a4, a5);
        }
      }
    }
    int v24 = a1;
    int v25 = 22;
LABEL_69:
    BOOL inited = acc_auth_protocol_initFinishMessage(v24, v25, a4, a5);
    _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
    return inited;
  }
  if (v13)
  {
    int v15 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = a2[10];
    *(_DWORD *)buf = 67109120;
    int v45 = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[AccAuth] handleAuthSetupResp: invalid # of authTypes(%d) ! \n", buf, 8u);
  }
  return inited;
}

BOOL __acc_auth_protocol_handleAuthStartResp(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    BOOL v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *a1;
    int v14 = *a2;
    int v15 = a2[1];
    int v16 = a2[2];
    int v17 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v17);
    *(_DWORD *)buf = 67110144;
    int v19 = v13;
    __int16 v20 = 1024;
    int v21 = v14;
    __int16 v22 = 1024;
    int v23 = v15;
    __int16 v24 = 1024;
    int v25 = v16;
    __int16 v26 = 1024;
    int v27 = v17;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[AccAuth] handleAuthStartResp: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d \n", buf, 0x20u);
  }
  if (*((_DWORD *)a1 + 289) == 1 && !acc_auth_protocol_handleAuthStartResp1Way(a1, a2, a3, a4, a5)) {
    return 0;
  }
  BOOL inited = acc_auth_protocol_initFinishMessage(a1, 81, a4, a5);
  _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
  return inited;
}

BOOL __acc_auth_protocol_handleAuthInfoResp(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    BOOL v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v15 = *a1;
    int v16 = *a2;
    int v24 = a2[1];
    int v25 = a2[2];
    HIDWORD(v27) = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, (int *)&v27 + 1);
    *(_DWORD *)buf = 67110144;
    int v29 = v15;
    __int16 v30 = 1024;
    int v31 = v16;
    __int16 v32 = 1024;
    int v33 = v24;
    __int16 v34 = 1024;
    int v35 = v25;
    __int16 v36 = 1024;
    int v37 = HIDWORD(v27);
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[AccAuth] handleAuthInfoResp: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d \n", buf, 0x20u);
  }
  if (*((_DWORD *)a1 + 289) == 1) {
    int v11 = acc_auth_protocol_handleAuthInfoResp1Way(a1, a2, a3, a4, a5);
  }
  else {
    int v11 = 1;
  }
  uint64_t v27 = 0;
  int v26 = 0;
  uint64_t v12 = acc_auth_protocol_messagePayload((uint64_t)a2, a3, (_DWORD *)&v27 + 1, &v27, &v26);
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v13 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    int v17 = *((_DWORD *)a1 + 286);
    int v18 = *a1;
    int v19 = *a2;
    int v20 = a2[1];
    int v21 = a2[2];
    if (v12) {
      int v22 = *(unsigned __int8 *)(v12 + 1);
    }
    else {
      int v22 = 255;
    }
    *(_DWORD *)buf = 67110912;
    int v29 = v17;
    __int16 v30 = 1024;
    int v31 = v18;
    __int16 v32 = 1024;
    int v33 = v19;
    __int16 v34 = 1024;
    int v35 = v20;
    __int16 v36 = 1024;
    int v37 = v21;
    __int16 v38 = 1024;
    int v39 = HIDWORD(v27);
    __int16 v40 = 1024;
    int v41 = v22;
    __int16 v42 = 1024;
    int v43 = v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[AccAuth] handleAuthInfoResp: role %d, sessionID %d; inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, infoType %d, errorNo %d \n",
      buf,
      0x32u);
    if (v11) {
      goto LABEL_18;
    }
    return 0;
  }
  if (!v11) {
    return 0;
  }
LABEL_18:
  BOOL inited = acc_auth_protocol_initFinishMessage(a1, 81, a4, a5);
  _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
  return inited;
}

void __acc_auth_protocol_handleAuthFinishResp(void *a1, unsigned __int8 *a2, unsigned int a3)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)a1;
    int v8 = *a2;
    int v9 = a2[1];
    int v10 = a2[2];
    int v11 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v11);
    *(_DWORD *)buf = 67110144;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    __int16 v16 = 1024;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[AccAuth] handleAuthFinishResp: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d \n", buf, 0x20u);
  }
  if (a2[4] == 1)
  {
    if (bswap32(*(_DWORD *)(a2 + 5))) {
      _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
    }
  }
}

uint64_t acc_auth_protocol_checkMessage(unsigned __int8 *a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  unsigned int v6 = 0;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = 0;
    if (a4)
    {
      uint64_t v8 = 0;
      unsigned int v6 = a3;
      uint64_t v9 = a2 + a3;
      while ((*(unsigned char *)(a2 + v8) & 0xF8) != 0xA0)
      {
        if (a3 == ++v8) {
          goto LABEL_10;
        }
      }
      uint64_t v9 = a2 + v8;
      unsigned int v6 = v8;
LABEL_10:
      if (a3 - v6 < 4) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = acc_auth_protocol_sizeofMessage(v9, a3 - v6, 0, 0);
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v10 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v12 = *((_DWORD *)a1 + 286);
    int v13 = *a1;
    v14[0] = 67109888;
    v14[1] = v12;
    __int16 v15 = 1024;
    int v16 = v13;
    __int16 v17 = 1024;
    unsigned int v18 = v6;
    __int16 v19 = 1024;
    int v20 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[AccAuth] handleMessage: authSession: role %d, sessionID %d, skipBytes %d, messageLen %d \n", (uint8_t *)v14, 0x1Au);
    if (!a4) {
      return v7;
    }
    goto LABEL_21;
  }
  if (a4) {
LABEL_21:
  }
    *a4 = v6;
  return v7;
}

void OUTLINED_FUNCTION_2_11(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0xEu);
}

BOOL _parseIdentificationParams_1(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  BOOL v49 = 0;
  if (!a1)
  {
    int v41 = logObjectForModule_14();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      _parseIdentificationParams_cold_1_1(v41);
    }
    return 0;
  }
  uint64_t v5 = a1;
  if (iAP2MsgGetParamID((uint64_t)a3) != 22)
  {
    BOOL v24 = 0;
    LODWORD(v12) = 10;
LABEL_51:
    iap2_identification_addRejectParam(v5, 22, v12);
    return v24;
  }
  uint64_t v42 = v5;
  CFAllocatorRef v6 = kCFAllocatorDefault;
  CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
  uint64_t v9 = &unk_100239000;
  int v10 = &unk_100239000;
  CFArrayRef v45 = Mutable;
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    DataAsString = 0;
    unsigned __int16 DataAsU16 = 0;
    int v46 = 0;
    uint64_t v47 = 0;
    uint64_t v12 = 10;
    while (1)
    {
      __int16 valuePtr = -21846;
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      __int16 valuePtr = ParamID;
      if ((ParamID - 17) >= 7)
      {
        if (ParamID == 1)
        {
          if ((v47 & 0x100000000) != 0)
          {
            uint64_t v12 = 5;
            BOOL v16 = 1;
          }
          else
          {
            DataAsString = iAP2MsgGetDataAsString(NextParam, &v49);
            BOOL v16 = !v49;
          }
          HIDWORD(v47) = v16;
        }
        else if (ParamID)
        {
          CFAllocatorRef v17 = v6;
          uint64_t v18 = v12;
          __int16 v19 = v9;
          uint64_t v20 = v9[49];
          int v21 = v10;
          int v22 = v10[100];
          if (v20 && v22 >= 43)
          {
            int v23 = *(NSObject **)(v20 + 336);
          }
          else
          {
            int v23 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&long long v51 = v20;
              WORD4(v51) = 1024;
              *(_DWORD *)((char *)&v51 + 10) = v22;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
          }
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v51) = 22;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "unhandled sub-paramID:%04X\n", buf, 8u);
          }
          int v10 = v21;
          uint64_t v12 = v18;
          uint64_t v9 = v19;
          CFArrayRef Mutable = v45;
          CFAllocatorRef v6 = v17;
        }
        else
        {
          if (v47)
          {
            uint64_t v12 = 5;
            BOOL v15 = 1;
          }
          else
          {
            unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v49);
            BOOL v15 = !v49;
          }
          LODWORD(v47) = v15;
        }
        goto LABEL_30;
      }
      if (iAP2MsgIsDataVoid(NextParam))
      {
        CFNumberRef v14 = CFNumberCreate(v6, kCFNumberShortType, &valuePtr);
        v65.uint64_t length = CFArrayGetCount(Mutable);
        v65.location = 0;
        if (CFArrayContainsValue(Mutable, v65, v14))
        {
          uint64_t v12 = 5;
          if (!v14) {
            goto LABEL_30;
          }
LABEL_15:
          CFRelease(v14);
          goto LABEL_30;
        }
        CFArrayAppendValue(Mutable, v14);
        int v46 = 1;
        if (v14) {
          goto LABEL_15;
        }
      }
LABEL_30:
      NextParam = iAP2MsgGetNextParam(a2, a3, NextParam);
      if (!NextParam) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v47 = 0;
  int v46 = 0;
  unsigned __int16 DataAsU16 = 0;
  DataAsString = 0;
  LODWORD(v12) = 10;
LABEL_34:
  uint64_t v25 = v9[49];
  if (v25 && (int)v10[100] >= 43)
  {
    int v26 = *(NSObject **)(v25 + 336);
    int v27 = v46;
    int v28 = HIDWORD(v47);
  }
  else
  {
    int v26 = &_os_log_default;
    int v27 = v46;
    int v28 = HIDWORD(v47);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109632;
    LODWORD(v51) = v47 & 1;
    WORD2(v51) = 1024;
    *(_DWORD *)((char *)&v51 + 6) = v28 & 1;
    WORD5(v51) = 1024;
    HIDWORD(v51) = v27 & 1;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "componentIDReceived: %d, componentNameReceived: %d, componentGPRSDataReceived: %d", buf, 0x14u);
  }
  if ((v47 & v28 & v27 & 1) == 0 || v12 == 5)
  {
    int v32 = 0;
    if (v12 == 10) {
      LODWORD(v12) = 2;
    }
    uint64_t v5 = v42;
    if (Mutable) {
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  unsigned __int8 v29 = acc_userDefaults_BOOLForKey(@"RejectionOfMultipleLocation");
  uint64_t v30 = v9[49];
  if (v30 && (int)v10[100] >= 43)
  {
    int v31 = *(NSObject **)(v30 + 336);
  }
  else
  {
    int v31 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109634;
    LODWORD(v51) = DataAsU16;
    WORD2(v51) = 2080;
    *(void *)((char *)&v51 + 6) = DataAsString;
    HIWORD(v51) = 2112;
    CFArrayRef v52 = Mutable;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "All are Valid: componentID: %d, componentName: %s, supportedNMEASentencesArray: %@", buf, 0x1Cu);
  }
  uint64_t v5 = v42;
  if (!iap2_feature_getFeature(v42, 0xCu))
  {
    iap2_features_createFeature(v42, 0xCu);
    iap2_identification_setIdentifiedForFeature(v42, 0xCu);
  }
  if (platform_location_setSupportedNMEASentencesForEndpoint(*(void *)(v42 + 8), (uint64_t)Mutable))
  {
    LODWORD(v12) = 0;
    int v32 = 1;
    if (!Mutable) {
      goto LABEL_50;
    }
LABEL_49:
    CFRelease(Mutable);
    goto LABEL_50;
  }
  __int16 v34 = v9;
  uint64_t v35 = v9[49];
  if (v35 && (int)v10[100] >= 43)
  {
    __int16 v36 = *(NSObject **)(v35 + 336);
  }
  else
  {
    __int16 v36 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    if (v29) {
      goto LABEL_69;
    }
LABEL_72:
    uint64_t v37 = v34[49];
    if (v37 && (int)v10[100] >= 43)
    {
      __int16 v38 = *(NSObject **)(v37 + 336);
    }
    else
    {
      __int16 v38 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    int v32 = 1;
    CFArrayRef Mutable = v45;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v40 = *(void *)(v42 + 8);
      CFArrayRef v39 = *(const __CFArray **)(v42 + 16);
      *(_DWORD *)buf = 136317186;
      *(void *)&long long v51 = "_parseIdentificationParams";
      WORD4(v51) = 1024;
      *(_DWORD *)((char *)&v51 + 10) = 359;
      HIWORD(v51) = 2112;
      CFArrayRef v52 = v39;
      __int16 v53 = 2112;
      uint64_t v54 = v40;
      __int16 v55 = 1024;
      int v56 = 0;
      __int16 v57 = 1024;
      int v58 = 0;
      __int16 v59 = 1024;
      int v60 = 1;
      __int16 v61 = 1024;
      int v62 = v12;
      __int16 v63 = 1024;
      int v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%s:%d %@ - %@, setSupportedNMEASentencesForEndpoint failed, but don't reject!! rejectionOfMultipleLocation %d, result %d -> %d, rejectReason %d -> %d", buf, 0x44u);
    }
    LODWORD(v12) = 0;
    if (v45) {
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  _parseIdentificationParams_cold_3_0(v36);
  if ((v29 & 1) == 0) {
    goto LABEL_72;
  }
LABEL_69:
  int v32 = 0;
  CFArrayRef Mutable = v45;
  if (v45) {
    goto LABEL_49;
  }
LABEL_50:
  BOOL v24 = v32 != 0;
  if (v12) {
    goto LABEL_51;
  }
  return v24;
}

void *logObjectForModule_14()
{
  if (gLogObjects && gNumLogObjects >= 43) {
    return *(void **)(gLogObjects + 336);
  }
  uint64_t v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t iap2_location_update(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  BOOL v34 = 0;
  uint64_t v33 = a1;
  if (!a1) {
    return result;
  }
  uint64_t v4 = a2;
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0xCu);
  if (!result) {
    return result;
  }
  if (!*(unsigned char *)result)
  {
    if (gLogObjects && gNumLogObjects >= 43)
    {
      uint64_t v30 = *(NSObject **)(gLogObjects + 336);
    }
    else
    {
      uint64_t v30 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    uint64_t result = os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
    if (result)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Update received when location not started!\n", buf, 2u);
      return 0;
    }
    return result;
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(v4, 0);
  if (!FirstParam)
  {
    unsigned __int8 v7 = 0;
    return v7 & 1;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  unsigned __int8 v7 = 0;
  uint64_t v32 = v4;
  while (1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    if (!ParamID) {
      break;
    }
    int v9 = ParamID;
    uint64_t v10 = gLogObjects;
    int v11 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 43)
    {
      uint64_t v12 = *(NSObject **)(gLogObjects + 336);
    }
    else
    {
      uint64_t v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        CFStringRef v38 = (CFStringRef)v10;
        __int16 v39 = 1024;
        LODWORD(v40) = v11;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v38) = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Unrecognized paramID: 0x%04X", buf, 8u);
    }
LABEL_51:
    uint64_t v4 = v32;
    NextParam = iAP2MsgGetNextParam(v32, 0, NextParam);
    if (!NextParam) {
      return v7 & 1;
    }
  }
  DataAsString = iAP2MsgGetDataAsString(NextParam, &v34);
  if (!v34)
  {
    CFNumberRef v14 = (const char *)DataAsString;
    if (!DataAsString) {
      return v7 & 1;
    }
    int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
    if (ParamValueLen && !v14[ParamValueLen - 1])
    {
      BOOL v16 = &v14[ParamValueLen];
      do
      {
        size_t v17 = strlen(v14) + 1;
        if (v17 <= 0x800)
        {
          CFStringRef v18 = CFStringCreateWithCString(kCFAllocatorDefault, v14, 0x8000100u);
          uint64_t v19 = gLogObjects;
          int v20 = gNumLogObjects;
          if (gLogObjects) {
            BOOL v21 = gNumLogObjects <= 42;
          }
          else {
            BOOL v21 = 1;
          }
          int v22 = !v21;
          if (v18)
          {
            CFStringRef v23 = v18;
            if (v22)
            {
              BOOL v24 = *(NSObject **)(gLogObjects + 336);
            }
            else
            {
              BOOL v24 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                CFStringRef v38 = (CFStringRef)v19;
                __int16 v39 = 1024;
                LODWORD(v40) = v20;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              CFStringRef v38 = v23;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "nmeaSentenceRef: %@", buf, 0xCu);
            }
            unsigned __int8 v7 = platform_location_update(*(void *)(v33 + 8), (uint64_t)v23);
            if ((v7 & 1) == 0)
            {
              uint64_t v26 = gLogObjects;
              int v27 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 43)
              {
                int v28 = *(NSObject **)(gLogObjects + 336);
              }
              else
              {
                int v28 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  CFStringRef v38 = (CFStringRef)v26;
                  __int16 v39 = 1024;
                  LODWORD(v40) = v27;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
              }
              if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
              {
                uint64_t v29 = *(void *)(v33 + 8);
                *(_DWORD *)buf = 138412546;
                CFStringRef v38 = v23;
                __int16 v39 = 2112;
                uint64_t v40 = v29;
                _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "platform_location_update failed to forward nmeaSentenceRef: %@ on endpoint: %@", buf, 0x16u);
              }
            }
            CFRelease(v23);
          }
          else
          {
            if (v22)
            {
              uint64_t v25 = *(NSObject **)(gLogObjects + 336);
            }
            else
            {
              uint64_t v25 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                CFStringRef v38 = (CFStringRef)v19;
                __int16 v39 = 1024;
                LODWORD(v40) = v20;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
            }
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              iap2_location_update_cold_2(v35, v36, v25);
            }
          }
        }
        v14 += v17;
      }
      while (v14 < v16);
    }
    goto LABEL_51;
  }
  int MsgID = iAP2MsgGetMsgID(v4);
  printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, MsgID);
  return v7 & 1;
}

uint64_t iap2_location_start(uint64_t result, const __CFDictionary *a2)
{
  if (result)
  {
    BOOL v3 = (uint64_t *)result;
    if (gLogObjects && gNumLogObjects >= 43)
    {
      uint64_t v4 = *(NSObject **)(gLogObjects + 336);
    }
    else
    {
      uint64_t v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = v3[1];
      *(_DWORD *)buf = 136315650;
      size_t v17 = "iap2_location_start";
      __int16 v18 = 2112;
      uint64_t v19 = v5;
      __int16 v20 = 2112;
      CFDictionaryRef v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s %@, attributes %@", buf, 0x20u);
    }
    if (!a2) {
      return 0;
    }
    iAP2MsgInit((uint64_t)(v3 + 15), 65530, v3[24], 0xFFFF, 0, 0);
    unsigned int v6 = 0;
    *(_DWORD *)buf = 0;
    while (1)
    {
      int valuePtr = v6 | 0x8000;
      CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, buf);
      CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
      if (!v7) {
        goto LABEL_16;
      }
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, v7);
      if (!Value) {
        goto LABEL_16;
      }
      unsigned int v14 = 0;
      if (!CFNumberGetValue(Value, kCFNumberIntType, &v14)) {
        goto LABEL_16;
      }
      uint64_t v10 = (uint64_t)(v3 + 15);
      if (v14 == 1) {
        break;
      }
      iAP2MsgAddU32Param(v10, 0, *(__int16 *)buf, v14);
      if (v8)
      {
LABEL_17:
        CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a2, v8);
        if (v11)
        {
          unsigned int v14 = 0;
          if (CFNumberGetValue(v11, kCFNumberIntType, &v14))
          {
            uint64_t v12 = (uint64_t)(v3 + 15);
            if (v14 == 1) {
              iAP2MsgAddVoidParam(v12, 0, valuePtr);
            }
            else {
              iAP2MsgAddU32Param(v12, 0, valuePtr, v14);
            }
          }
        }
      }
LABEL_24:
      if (v7) {
        CFRelease(v7);
      }
      if (v8) {
        CFRelease(v8);
      }
      unsigned int v6 = *(_DWORD *)buf + 1;
      *(_DWORD *)buf = v6;
      if (v6 >= 8)
      {
        if (iap2_sessionControl_sendOutgoingMessage(v3, (uint64_t)(v3 + 15)))
        {
          uint64_t Feature = (unsigned char *)iap2_feature_getFeature((uint64_t)v3, 0xCu);
          uint64_t result = 1;
          if (Feature) {
            *uint64_t Feature = 1;
          }
          return result;
        }
        return 0;
      }
    }
    iAP2MsgAddVoidParam(v10, 0, *(__int16 *)buf);
LABEL_16:
    if (v8) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t iap2_location_stop(uint64_t result, uint64_t a2)
{
  if (result)
  {
    BOOL v3 = (uint64_t *)result;
    if (gLogObjects && gNumLogObjects >= 43)
    {
      uint64_t v4 = *(NSObject **)(gLogObjects + 336);
    }
    else
    {
      uint64_t v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = v3[1];
      int v8 = 136315650;
      int v9 = "iap2_location_stop";
      __int16 v10 = 2112;
      uint64_t v11 = v5;
      __int16 v12 = 2112;
      uint64_t v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s %@, attributes %@", (uint8_t *)&v8, 0x20u);
    }
    uint64_t result = iap2_feature_getFeature((uint64_t)v3, 0xCu);
    if (result)
    {
      unsigned int v6 = (unsigned char *)result;
      if (*(unsigned char *)result)
      {
        iAP2MsgInit((uint64_t)(v3 + 15), 65532, v3[24], 0xFFFF, 0, 0);
        uint64_t result = iap2_sessionControl_sendOutgoingMessage(v3, (uint64_t)(v3 + 15));
        if (result)
        {
          unsigned char *v6 = 0;
          return 1;
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 43)
        {
          CFNumberRef v7 = *(NSObject **)(gLogObjects + 336);
        }
        else
        {
          CFNumberRef v7 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        uint64_t result = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
        if (result)
        {
          LOWORD(v8) = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "feature not started", (uint8_t *)&v8, 2u);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t iap2_location_send_gprmc_data_values(uint64_t result, const __CFDictionary *a2)
{
  if (!result) {
    return result;
  }
  BOOL v3 = (uint64_t *)result;
  if (gLogObjects && gNumLogObjects >= 43)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 336);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = v3[1];
    unsigned int v12 = 136315650;
    uint64_t v13 = "iap2_location_send_gprmc_data_values";
    __int16 v14 = 2112;
    uint64_t v15 = v5;
    __int16 v16 = 2112;
    CFDictionaryRef v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s %@, attributes %@", (uint8_t *)&v12, 0x20u);
  }
  if ((iap2_identification_isIdentifiedForOutgoingMessageID((uint64_t)v3, 0xFFF0u) & 1) == 0)
  {
    uint64_t v11 = logObjectForModule_14();
    uint64_t result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    iap2_location_send_gprmc_data_values_cold_2(v11);
    return 0;
  }
  uint64_t result = iap2_feature_getFeature((uint64_t)v3, 0xCu);
  if (!result) {
    return result;
  }
  if (*(unsigned char *)result)
  {
    iAP2MsgInit((uint64_t)(v3 + 15), 65520, v3[24], 0xFFFF, 0, 0);
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a2, @"GPRMCDataStatus");
    if (Value)
    {
      CFArrayRef v7 = Value;
      if (CFArrayGetCount(Value) >= 1)
      {
        CFIndex v8 = 0;
        do
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v7, v8);
          if (ValueAtIndex)
          {
            unsigned int v12 = 3;
            if (CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &v12))
            {
              if (v12 <= 2) {
                iAP2MsgAddVoidParam((uint64_t)(v3 + 15), 0, v12);
              }
            }
          }
          ++v8;
        }
        while (CFArrayGetCount(v7) > v8);
      }
    }
    return iap2_sessionControl_sendOutgoingMessage(v3, (uint64_t)(v3 + 15));
  }
  if (gLogObjects && gNumLogObjects >= 43)
  {
    __int16 v10 = *(NSObject **)(gLogObjects + 336);
  }
  else
  {
    __int16 v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  uint64_t result = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (result)
  {
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "feature not started", (uint8_t *)&v12, 2u);
    return 0;
  }
  return result;
}

unsigned char *_createFeature_7(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  int v2 = malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
  BOOL v3 = v2;
  if (v2)
  {
    unsigned char *v2 = 0;
    platform_location_setSupportedNMEASentencesForEndpoint(*(void *)(a1 + 8), 0);
  }
  return v3;
}

id _destroyFeature_7(void **a1, uint64_t a2)
{
  id v2 = 0;
  if (a1 && a2)
  {
    if (*a1)
    {
      id v2 = platform_location_resetSupportedNMEASentencesForEndpoint(*(void *)(a2 + 8));
      if (*a1)
      {
        free(*a1);
        *a1 = 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

BOOL _startFeatureFromDevice_4(BOOL result)
{
  if (result) {
    return iap2_feature_getFeature(result, 0xCu) != 0;
  }
  return result;
}

uint64_t _checkIdentificationInfo_6(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo__kMsgLocationList, 4u, &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    iap2_features_createFeature(a1, 0xCu);
    iap2_identification_setIdentifiedForFeature(a1, 0xCu);
  }
  return v3;
}

void _handleIdentificationRejection_0(uint64_t a1)
{
  if (!a1 || (uint64_t v2 = *(void *)(a1 + 8)) == 0) {
    uint64_t v2 = 0;
  }
  if ((platform_location_resetSupportedNMEASentencesForEndpoint(v2) & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 43)
    {
      uint64_t v3 = *(NSObject **)(gLogObjects + 336);
    }
    else
    {
      uint64_t v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      _handleIdentificationRejection_cold_1(a1 == 0, a1, v3);
    }
  }
}

uint64_t platform_bluetooth_copyNameForMacAddress(uint64_t a1)
{
  uint64_t v2 = +[ACCPlatformPluginManager sharedManager];
  uint64_t v3 = [v2 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformBluetoothAccessoryInformationPluginProtocol fallbackToTransportPlugins:1];

  if (!v3)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 7;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_bluetooth_copyNameForMacAddress_cold_2();
      }
      CFIndex v8 = &_os_log_default;
      id v6 = &_os_log_default;
    }
    else
    {
      CFIndex v8 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      platform_bluetooth_copyNameForMacAddress_cold_1(v8);
    }

    goto LABEL_24;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      CFArrayRef v7 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_bluetooth_copyNameForMacAddress_cold_2();
      }
      CFArrayRef v7 = &_os_log_default;
      id v9 = &_os_log_default;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v10 = NSStringFromSelector("nameForMacAddress:");
      int v12 = 138412290;
      uint64_t v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[#Bluetooth] Platform plugin does not implement selector %@!", (uint8_t *)&v12, 0xCu);
    }
LABEL_24:
    uint64_t v4 = 0;
    goto LABEL_25;
  }
  uint64_t v4 = [v3 nameForMacAddress:a1];
LABEL_25:

  return v4;
}

void ACCUNManagerPresentNotification(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = a2;
    id v5 = +[ACCUserNotificationManager sharedManager];
    [v5 presentNotification:v3 completionHandler:v4];
  }
}

void ACCUNManagerDismissNotificationsWithGroupIdentifier(uint64_t a1)
{
  if (a1)
  {
    id v2 = +[ACCUserNotificationManager sharedManager];
    [v2 dismissNotificationsWithGroupIdentifier:a1];
  }
}

void sub_100088E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,id a22)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

uint64_t _maximumCurrentAvailableFromDevice(uint64_t **a1)
{
  if (a1 && (unsigned int v1 = *a1) != 0 && *v1 && acc_connection_getType(*v1) == 3) {
    return 500;
  }
  else {
    return 100;
  }
}

BOOL _parseIdentificationParamsPower(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  int v32 = 0;
  if (!iap2_feature_getFeature(a1, 0x10u)) {
    iap2_features_createFeature(a1, 0x10u);
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x10u);
  if (Feature)
  {
    id v6 = (_DWORD *)Feature;
    int ParamID = iAP2MsgGetParamID((uint64_t)a3);
    if (ParamID <= 24)
    {
      if (ParamID != 8)
      {
        if (ParamID != 9) {
          return v32 == 0;
        }
        unsigned int DataAsU16 = iAP2MsgGetDataAsU16(a3, &v32);
        if (v32) {
          return v32 == 0;
        }
        unsigned int v12 = DataAsU16;
        if (DataAsU16 <= _maximumCurrentAvailableFromDevice((uint64_t **)a1))
        {
          v6[3] = v12;
          return v32 == 0;
        }
        int v13 = 6;
        uint64_t v14 = a1;
        int v15 = 9;
LABEL_35:
        unsigned int v23 = 6;
LABEL_53:
        iap2_identification_addRejectParam(v14, v15, v23);
        int v32 = v13;
        return v32 == 0;
      }
      int DataAsU8 = iAP2MsgGetDataAsU8(a3, &v32);
      if (!v32)
      {
        if (DataAsU8 != 1 || (*(_DWORD *)(*(void *)a1 + 24) | 8) != 8)
        {
          v6[1] = DataAsU8;
          return v32 == 0;
        }
        int v13 = 13;
        uint64_t v14 = a1;
        int v15 = 8;
        unsigned int v23 = 13;
        goto LABEL_53;
      }
      if (gLogObjects && gNumLogObjects >= 37)
      {
        uint64_t v25 = *(NSObject **)(gLogObjects + 288);
      }
      else
      {
        uint64_t v25 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParamsPower_cold_3();
      }
      uint64_t v30 = a1;
      int v31 = 8;
    }
    else
    {
      if (ParamID != 25)
      {
        if (ParamID != 240)
        {
          if (ParamID == 241)
          {
            unsigned int v8 = iAP2MsgGetDataAsU8(a3, &v32);
            if (gLogObjects && gNumLogObjects >= 37)
            {
              id v9 = *(NSObject **)(gLogObjects + 288);
            }
            else
            {
              id v9 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109376;
              unsigned int v34 = v8;
              __int16 v35 = 1024;
              int v36 = v32;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "powerDuringSleepType during identification = %d, status = %d", buf, 0xEu);
            }
            if (!v32)
            {
              v6[2] = v8;
              if (v8 <= 1)
              {
                uint64_t v29 = logObjectForModule_1(36);
                if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "identified for power during sleep over iAP2", buf, 2u);
                }
                iap2_identification_setIdentifiedForFeature(a1, 0x10u);
              }
              return v32 == 0;
            }
            if (gLogObjects && gNumLogObjects >= 37)
            {
              uint64_t v26 = *(NSObject **)(gLogObjects + 288);
            }
            else
            {
              uint64_t v26 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
              _parseIdentificationParamsPower_cold_5();
            }
            uint64_t v30 = a1;
            int v31 = 241;
            goto LABEL_73;
          }
          return v32 == 0;
        }
        unsigned int v21 = iAP2MsgGetDataAsU16(a3, &v32);
        if (v32) {
          return v32 == 0;
        }
        unsigned int v22 = v21;
        if (v21 <= platform_power_getUltraHighPowerModeCurrentLimit(*(const void **)(a1 + 8)))
        {
          v6[4] = v22;
          return v32 == 0;
        }
        int v13 = 6;
        uint64_t v14 = a1;
        int v15 = 240;
        goto LABEL_35;
      }
      unsigned int v17 = iAP2MsgGetDataAsU16(a3, &v32);
      if (gLogObjects) {
        BOOL v18 = gNumLogObjects <= 36;
      }
      else {
        BOOL v18 = 1;
      }
      int v19 = !v18;
      if (!v32)
      {
        unsigned int v27 = v17;
        if (v19)
        {
          int v28 = *(NSObject **)(gLogObjects + 288);
        }
        else
        {
          int v28 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          unsigned int v34 = v27;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "maximumSiphoningCurrent: %d!!", buf, 8u);
        }
        return v32 == 0;
      }
      if (v19)
      {
        __int16 v20 = *(NSObject **)(gLogObjects + 288);
      }
      else
      {
        __int16 v20 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParamsPower_cold_9();
      }
      uint64_t v30 = a1;
      int v31 = 25;
    }
LABEL_73:
    iap2_identification_addRejectParam(v30, v31, 0xAu);
    return v32 == 0;
  }
  if (gLogObjects && gNumLogObjects >= 37)
  {
    __int16 v10 = *(NSObject **)(gLogObjects + 288);
  }
  else
  {
    __int16 v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _parseIdentificationParamsPower_cold_1();
    return 0;
  }
  return result;
}

uint64_t iap2_power_checkIdentificationInfo(void **a1, uint64_t a2)
{
  char v13 = 0;
  uint64_t v4 = iap2_identification_checkIdentificationMsgIDs((uint64_t)a1, (uint64_t)&iap2_power_checkIdentificationInfo_skMsgPowerList, 6u, &v13);
  uint64_t v5 = v4;
  if (v13) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x10u);
    if (Feature && (!*(_DWORD *)(Feature + 4) || acc_endpoint_isWireless(*a1)))
    {
      if (CFSetContainsValue(*(CFSetRef *)(a2 + 96), (const void *)0xAE03))
      {
        if (acc_endpoint_isWireless(*a1)) {
          uint64_t v5 = 13;
        }
        else {
          uint64_t v5 = 14;
        }
        uint64_t v8 = (uint64_t)a1;
        uint64_t v9 = 44547;
        unsigned int v10 = v5;
        goto LABEL_16;
      }
      if (CFSetContainsValue(*(CFSetRef *)(a2 + 96), (const void *)0xAE06))
      {
        uint64_t v5 = 11;
        uint64_t v8 = (uint64_t)a1;
        uint64_t v9 = 44550;
        unsigned int v10 = 11;
LABEL_16:
        iap2_identification_rejectMsgID(v8, v9, 0, v10);
        return v5;
      }
    }
    uint64_t v5 = 0;
  }
  if (v13) {
    BOOL v11 = v5 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    iap2_identification_setIdentifiedForFeature((uint64_t)a1, 0x10u);
    return 0;
  }
  return v5;
}

uint64_t _processPowerSourceUpdate(uint64_t *a1, uint64_t a2)
{
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x10u);
  int v5 = *(_DWORD *)(Feature + 36);
  if (gLogObjects && gNumLogObjects >= 37)
  {
    BOOL v6 = *(NSObject **)(gLogObjects + 288);
  }
  else
  {
    BOOL v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    _processPowerSourceUpdate_cold_6((uint64_t)a1, (unsigned __int16 *)a2, v6);
  }
  if (*(unsigned char *)(a2 + 2))
  {
    unsigned __int16 v21 = *(_WORD *)a2;
    uint64_t v7 = v21;
    *(_DWORD *)(Feature + 36) = v21;
    if (_checkRequiresChargingCurrentLimit(a1, v7, &v21))
    {
      if (gLogObjects && gNumLogObjects >= 37)
      {
        uint64_t v8 = *(NSObject **)(gLogObjects + 288);
      }
      else
      {
        uint64_t v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        if (!a1 || (uint64_t v9 = a1[1]) == 0) {
          uint64_t v9 = 0;
        }
        *(_DWORD *)buf = 138412802;
        uint64_t v23 = v9;
        __int16 v24 = 1024;
        int v25 = v7;
        __int16 v26 = 1024;
        int v27 = v21;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "!!!! Overriding availableCurrentForDevice(ChargingCurrentLimit) for accessory %@, %d -> %d", buf, 0x18u);
      }
      uint64_t v7 = v21;
    }
    uint64_t v10 = *(void *)(Feature + 24);
    if ((v10 & 0x40) == 0) {
      platform_power_startPowerUpdates(a1[1], v10 | 0x40, v10);
    }
    platform_power_setAvailableCurrent((const void *)a1[1], v7, v7 != (unsigned __int16)v5);
  }
  else
  {
    LOWORD(v7) = v5;
  }
  if (*(unsigned char *)(a2 + 4)) {
    platform_power_setShouldChargeDeviceBattery((const void *)a1[1], *(unsigned __int8 *)(a2 + 3), (unsigned __int16)v7 != (unsigned __int16)v5);
  }
  if (*(unsigned char *)(a2 + 5))
  {
    if (gLogObjects && gNumLogObjects >= 37)
    {
      BOOL v11 = *(NSObject **)(gLogObjects + 288);
    }
    else
    {
      BOOL v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(unsigned __int16 *)(a2 + 6);
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "siphoningCurrent=%d", buf, 8u);
    }
  }
  if (*(unsigned char *)(a2 + 8))
  {
    if (!*(_WORD *)(a2 + 10) && platform_power_isOvercurrentState(a1[1]))
    {
      if (gLogObjects && gNumLogObjects >= 37)
      {
        char v13 = *(NSObject **)(gLogObjects + 288);
      }
      else
      {
        char v13 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = *(unsigned __int16 *)(a2 + 10);
        *(_DWORD *)buf = 67109120;
        LODWORD(v23) = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "ResetOvercurrentSiphoning(), reserveCurrent=%d", buf, 8u);
      }
      platform_power_resetOvercurrentSiphoning(a1[1]);
    }
    if (gLogObjects && gNumLogObjects >= 37)
    {
      int v15 = *(NSObject **)(gLogObjects + 288);
    }
    else
    {
      int v15 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    int v17 = *(unsigned __int16 *)(a2 + 10);
    if (v16)
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PowerSetReserveCurrent(), reserveCurrent=%d", buf, 8u);
      int v17 = *(unsigned __int16 *)(a2 + 10);
    }
    platform_power_setReserveCurrent((const void *)a1[1], v17);
  }
  if (*(unsigned char *)(a2 + 13))
  {
    if (gLogObjects && gNumLogObjects >= 37)
    {
      BOOL v18 = *(NSObject **)(gLogObjects + 288);
    }
    else
    {
      BOOL v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *(unsigned __int8 *)(a2 + 13);
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "SetOvercurrentSiphoning(), maxNonSiphoningCurrentExceeded=%d", buf, 8u);
    }
    platform_power_setOvercurrentSiphoning(a1[1]);
  }
  return 0;
}

BOOL _checkRequiresChargingCurrentLimit(uint64_t *a1, unsigned int a2, _WORD *a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)*a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v5 = *v4;
  if (!*v4) {
    return 0;
  }
  int v8 = platform_systemInfo_deviceType();
  int v9 = acc_authInfo_isAppleAccessory((id)(v5 + 48));
  unsigned int v10 = platform_power_batteryLevelPercent();
  uint64_t v11 = *a1;

  return acc_policies_endpointRequiresChargingCurrentLimit(v11, v9, v8, a2, v10, a3);
}

uint64_t _cbPowerSourceUpdateParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v16 = 0;
  switch(iAP2MsgGetParamID((uint64_t)a3))
  {
    case 0u:
      __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v16);
      if (!v16)
      {
        __int16 v7 = DataAsU16;
        if (acc_userDefaults_BOOLForKey(@"IgnorePowerSourceUpdateForAvailableCurrent"))
        {
          if (gLogObjects && gNumLogObjects >= 37)
          {
            int v8 = *(NSObject **)(gLogObjects + 288);
          }
          else
          {
            int v8 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            BOOL v18 = "_cbPowerSourceUpdateParams";
            __int16 v19 = 1024;
            int v20 = 491;
            __int16 v21 = 1024;
            int v22 = 0;
            goto LABEL_36;
          }
        }
        else
        {
          *(_WORD *)a4 = v7;
          *(unsigned char *)(a4 + 2) = 1;
        }
      }
      break;
    case 1u:
      BOOL DataAsBool = iAP2MsgGetDataAsBool(a3, (BOOL *)&v16);
      if (!v16)
      {
        BOOL v10 = DataAsBool;
        if (acc_userDefaults_BOOLForKey(@"IgnorePowerSourceUpdateForAvailableCurrent"))
        {
          if (gLogObjects && gNumLogObjects >= 37)
          {
            int v8 = *(NSObject **)(gLogObjects + 288);
          }
          else
          {
            int v8 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            BOOL v18 = "_cbPowerSourceUpdateParams";
            __int16 v19 = 1024;
            int v20 = 507;
            __int16 v21 = 1024;
            int v22 = 1;
LABEL_36:
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s:%d iAP2MsgPowerSourceUpdate ignore paramID:%04X\n", buf, 0x18u);
          }
        }
        else
        {
          *(unsigned char *)(a4 + 3) = v10;
          *(unsigned char *)(a4 + 4) = 1;
        }
      }
      break;
    case 3u:
      __int16 v12 = iAP2MsgGetDataAsU16(a3, &v16);
      if (!v16)
      {
        *(_WORD *)(a4 + 6) = v12;
        *(unsigned char *)(a4 + 5) = 1;
      }
      break;
    case 4u:
      __int16 v13 = iAP2MsgGetDataAsU16(a3, &v16);
      if (!v16)
      {
        *(_WORD *)(a4 + 10) = v13;
        *(unsigned char *)(a4 + 8) = 1;
      }
      break;
    case 5u:
      BOOL IsDataVoid = iAP2MsgIsDataVoid(a3);
      int v16 = !IsDataVoid << 31 >> 31;
      if (IsDataVoid) {
        *(_WORD *)(a4 + 12) = 257;
      }
      break;
    default:
      if (gLogObjects && gNumLogObjects >= 37)
      {
        uint64_t v11 = *(NSObject **)(gLogObjects + 288);
      }
      else
      {
        uint64_t v11 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        _cbPowerSourceUpdateParams_cold_1();
      }
      break;
  }
  return v16;
}

id iap2_power_accessoryResetBaseCurrentHandler(uint64_t a1)
{
  unsigned int v1 = acc_manager_copyConnectionUUIDForEndpointUUID(*(const void **)(a1 + 8));
  id v2 = platform_power_resetBaseCurrent((uint64_t)v1);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

BOOL iap2_power_powerSourceUpdateHandler(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0xEuLL, 0x1000040D1CB851CuLL);
  int v5 = iAP2MsgForEachParamDo(a2, 0, (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))_cbPowerSourceUpdateParams, (uint64_t)v4);
  if (v5)
  {
    if (gLogObjects && gNumLogObjects >= 37)
    {
      BOOL v6 = *(NSObject **)(gLogObjects + 288);
    }
    else
    {
      BOOL v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      iap2_power_powerSourceUpdateHandler_cold_2();
    }
  }
  else
  {
    unint64_t v7 = (unint64_t)acc_userDefaults_copyIntegerForKey(@"PowerSourceUpdateBehavior");
    if ((v7 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    {
      unint64_t v8 = v7;
      if (gLogObjects && gNumLogObjects >= 37)
      {
        int v9 = *(NSObject **)(gLogObjects + 288);
      }
      else
      {
        int v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 134217984;
        unint64_t v12 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PowerSourceUpdate message ignored due to behavior(%ld)!\n", (uint8_t *)&v11, 0xCu);
      }
    }
    else
    {
      _processPowerSourceUpdate(a1, (uint64_t)v4);
    }
  }
  if (v4) {
    free(v4);
  }
  return v5 == 0;
}

uint64_t _cbAccessoryPowerUpdateParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3, _WORD *a4)
{
  unsigned int v10 = 0;
  if (iAP2MsgGetParamID((uint64_t)a3))
  {
    if (gLogObjects && gNumLogObjects >= 37)
    {
      BOOL v6 = *(NSObject **)(gLogObjects + 288);
    }
    else
    {
      BOOL v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      _cbAccessoryPowerUpdateParams_cold_2();
      return 0;
    }
  }
  else
  {
    __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v10);
    if (gLogObjects && gNumLogObjects >= 37)
    {
      unint64_t v8 = *(NSObject **)(gLogObjects + 288);
    }
    else
    {
      unint64_t v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      int v12 = DataAsU16;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "AccessoryPowerUpdate accessoryChargeCurrent:%04X\n", buf, 8u);
    }
    uint64_t result = v10;
    if (!v10) {
      *a4 = DataAsU16;
    }
  }
  return result;
}

BOOL iap2_power_accessoryPowerUpdateHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int16 *)malloc_type_calloc(1uLL, 2uLL, 0x1000040BDFB0063uLL);
  int v5 = iAP2MsgForEachParamDo(a2, 0, (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))_cbAccessoryPowerUpdateParams, (uint64_t)v4);
  if (!v5)
  {
    platform_power_updateAccessoryChargeCurrent(*(void *)(a1 + 8), *v4);
    goto LABEL_10;
  }
  if (gLogObjects && gNumLogObjects >= 37)
  {
    BOOL v6 = *(NSObject **)(gLogObjects + 288);
  }
  else
  {
    BOOL v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    iap2_power_accessoryPowerUpdateHandler_cold_1();
    if (!v4) {
      return v5 == 0;
    }
    goto LABEL_10;
  }
  if (v4) {
LABEL_10:
  }
    free(v4);
  return v5 == 0;
}

uint64_t _cbStartPowerUpdatesParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3, void *a4)
{
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  if (ParamID <= 0xC)
  {
    BOOL IsDataVoid = iAP2MsgIsDataVoid(a3);
    uint64_t result = 1;
    if (!IsDataVoid) {
      return result;
    }
    *a4 |= 1 << ParamID;
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 37)
  {
    int v9 = *(NSObject **)(gLogObjects + 288);
  }
  else
  {
    int v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v10)
  {
    v11[0] = 67109120;
    v11[1] = ParamID;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "StartPowerUpdates unhandled paramID:%04X\n", (uint8_t *)v11, 8u);
    return 0;
  }
  return result;
}

uint64_t _setupPowerUpdateParam(uint64_t a1, int a2, unsigned int a3)
{
  switch(a2)
  {
    case 0:
      __int16 v5 = 0;
      goto LABEL_19;
    case 1:
      char v7 = a3;
      __int16 v8 = 1;
      goto LABEL_11;
    case 2:
      char v7 = a3;
      __int16 v8 = 2;
      goto LABEL_11;
    case 3:
      __int16 v5 = 3;
      goto LABEL_19;
    case 4:
      char v7 = a3;
      __int16 v8 = 4;
      goto LABEL_11;
    case 5:
      char v7 = a3;
      __int16 v8 = 5;
LABEL_11:
      iAP2MsgAddU8Param(a1, 0, v8, v7);
      goto LABEL_20;
    case 6:
      __int16 v5 = 6;
      goto LABEL_19;
    case 7:
      __int16 v5 = 7;
      goto LABEL_19;
    case 8:
      __int16 v5 = 8;
      goto LABEL_19;
    case 9:
      __int16 v5 = 9;
      goto LABEL_19;
    case 10:
      __int16 v5 = 10;
      goto LABEL_19;
    case 11:
      __int16 v5 = 11;
      goto LABEL_19;
    case 12:
      __int16 v5 = 12;
LABEL_19:
      iAP2MsgAddU16Param(a1, 0, v5, a3);
LABEL_20:
      uint64_t v9 = 0;
      break;
    default:
      if (gLogObjects && gNumLogObjects >= 37)
      {
        BOOL v6 = *(NSObject **)(gLogObjects + 288);
      }
      else
      {
        BOOL v6 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      uint64_t v9 = 1;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v11[0] = 67109376;
        v11[1] = 1;
        __int16 v12 = 1024;
        int v13 = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PowerUpdate message processing error: %d. powerUpdateType: %d\n", (uint8_t *)v11, 0xEu);
      }
      break;
  }
  return v9;
}

BOOL iap2_power_startPowerUpdatesHandler(uint64_t a1, uint64_t a2)
{
  __int16 v5 = (uint64_t *)(iap2_feature_getFeature(a1, 0x10u) + 24);
  uint64_t v4 = *v5;
  uint64_t *v5 = 0;
  int v6 = iAP2MsgForEachParamDo(a2, 0, (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))_cbStartPowerUpdatesParams, (uint64_t)v5);
  int v7 = v6;
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects <= 36;
  }
  else {
    BOOL v8 = 1;
  }
  int v9 = !v8;
  if (v6)
  {
    if (v9)
    {
      BOOL v10 = *(NSObject **)(gLogObjects + 288);
    }
    else
    {
      BOOL v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 67109120;
      LODWORD(v15) = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "StartPowerUpdate message processing error: %d\n", (uint8_t *)&v14, 8u);
    }
  }
  else
  {
    if (v9)
    {
      int v11 = *(NSObject **)(gLogObjects + 288);
    }
    else
    {
      int v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *v5;
      int v14 = 134217984;
      uint64_t v15 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "startPowerUpdates: 0x%llx", (uint8_t *)&v14, 0xCu);
    }
    platform_power_startPowerUpdates(*(void *)(a1 + 8), *v5 | 0x40, v4);
  }
  return v7 == 0;
}

uint64_t iap2_power_stopPowerUpdatesHandler(uint64_t a1)
{
  *(void *)(iap2_feature_getFeature(a1, 0x10u) + 24) = 0;
  platform_power_stopPowerUpdates(*(void *)(a1 + 8));
  return 1;
}

uint64_t iap2_power_sendPowerUpdate(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  if (gLogObjects && gNumLogObjects >= 37)
  {
    int v11 = *(NSObject **)(gLogObjects + 288);
  }
  else
  {
    int v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109888;
    LODWORD(v34) = a3;
    WORD2(v34) = 1024;
    *(_DWORD *)((char *)&v34 + 6) = a4;
    WORD5(v34) = 1024;
    HIDWORD(v34) = a5;
    *(_WORD *)__int16 v35 = 1024;
    *(_DWORD *)&v35[2] = a6;
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "SendPowerUpdate: %d, %d, %d, %d\n", buf, 0x1Au);
    if (!a2) {
      goto LABEL_55;
    }
  }
  else if (!a2)
  {
    goto LABEL_55;
  }
  if ((*a2 & (1 << a3)) == 0) {
    goto LABEL_55;
  }
  unsigned int v30 = a6;
  uint64_t v12 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  int v13 = malloc_type_malloc(0xFFFFuLL, 0xDF0E563CuLL);
  if (gLogObjects && gNumLogObjects >= 31)
  {
    int v14 = *(NSObject **)(gLogObjects + 240);
  }
  else
  {
    int v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (a1) {
      CFStringRef v15 = *(const __CFString **)(a1 + 8);
    }
    else {
      CFStringRef v15 = @"Null";
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&long long v34 = "iap2_power_sendPowerUpdate";
    WORD4(v34) = 1024;
    *(_DWORD *)((char *)&v34 + 10) = 865;
    HIWORD(v34) = 2112;
    *(void *)__int16 v35 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s:%d - iAP2MsgInit with cleanupCB - _iap2_power_msgCleanupCB endpointUUID: %@", buf, 0x1Cu);
  }
  uint64_t v16 = iAP2MsgInit((uint64_t)v12, 44545, (uint64_t)v13, 0xFFFF, (uint64_t)_iap2_power_msgCleanupCB, 0);
  if (gLogObjects && gNumLogObjects >= 37)
  {
    int v17 = *(NSObject **)(gLogObjects + 288);
  }
  else
  {
    int v17 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    if (v16) {
      goto LABEL_26;
    }
LABEL_55:
    uint64_t v22 = 0;
    goto LABEL_56;
  }
  uint64_t v23 = iap2_power_sendPowerUpdate_powerUpdateTypeStr[a3];
  if (a5 >= 0xD) {
    int v24 = -1;
  }
  else {
    int v24 = a5;
  }
  if (a5 > 0xC) {
    int v25 = "";
  }
  else {
    int v25 = iap2_power_sendPowerUpdate_powerUpdateTypeStr[a5];
  }
  *(_DWORD *)buf = 67110402;
  LODWORD(v34) = a3;
  WORD2(v34) = 2080;
  *(void *)((char *)&v34 + 6) = v23;
  HIWORD(v34) = 1024;
  *(_DWORD *)__int16 v35 = a4;
  *(_WORD *)&uint8_t v35[4] = 1024;
  *(_DWORD *)&v35[6] = v24;
  __int16 v36 = 2080;
  uint64_t v37 = v25;
  __int16 v38 = 1024;
  unsigned int v39 = a6;
  _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "powerUpdateType=%d(%s) value=%u  powerUpdateType2=%d(%s) value2=%u", buf, 0x2Eu);
  if (!v16) {
    goto LABEL_55;
  }
LABEL_26:
  if (a3 <= 0xC && (*a2 & (1 << a3)) != 0)
  {
    if (_setupPowerUpdateParam(v16, a3, a4))
    {
LABEL_38:
      iAP2MsgCleanup(v16);
      goto LABEL_39;
    }
    int v18 = 1;
  }
  else
  {
    int v18 = 0;
  }
  BOOL v19 = 1;
  if (a5 <= 0xC && (*a2 & (1 << a5)) != 0)
  {
    int updated = _setupPowerUpdateParam(v16, a5, v30);
    BOOL v19 = updated == 0;
    v18 += updated ^ 1;
  }
  if (!v19 || !v18) {
    goto LABEL_38;
  }
  if (iap2_sessionControl_sendOutgoingMessage((uint64_t *)a1, v16)) {
    goto LABEL_55;
  }
LABEL_39:
  if (gLogObjects && gNumLogObjects >= 37)
  {
    __int16 v21 = *(NSObject **)(gLogObjects + 288);
  }
  else
  {
    __int16 v21 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  uint64_t v22 = 1;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v34) = 1;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "PowerUpdate processing error : %d\n", buf, 8u);
  }
LABEL_56:
  if (a3 == 6 || a5 == 6)
  {
    int v26 = *(_DWORD *)(iap2_feature_getFeature(a1, 0x10u) + 36);
    if ((v26 & 0x80000000) == 0)
    {
      unsigned __int16 v32 = v26;
      if (_checkRequiresChargingCurrentLimit((uint64_t *)a1, (unsigned __int16)v26, &v32))
      {
        if (gLogObjects && gNumLogObjects >= 37)
        {
          int v27 = *(NSObject **)(gLogObjects + 288);
        }
        else
        {
          int v27 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          if (!a1 || (uint64_t v28 = *(void *)(a1 + 8)) == 0) {
            uint64_t v28 = 0;
          }
          *(_DWORD *)buf = 138412802;
          *(void *)&long long v34 = v28;
          WORD4(v34) = 1024;
          *(_DWORD *)((char *)&v34 + 10) = (unsigned __int16)v26;
          HIWORD(v34) = 1024;
          *(_DWORD *)__int16 v35 = v32;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "!!!! On re-check, Overriding availableCurrentForDevice(ChargingCurrentLimit) for accessory %@, %d -> %d", buf, 0x18u);
        }
        LOWORD(v26) = v32;
      }
      platform_power_setAvailableCurrent(*(const void **)(a1 + 8), (unsigned __int16)v26, 0);
    }
  }
  return v22;
}

void _iap2_power_msgCleanupCB(void *a1, int a2)
{
  if (a2)
  {
    if (gLogObjects && gNumLogObjects >= 37)
    {
      id v3 = *(NSObject **)(gLogObjects + 288);
    }
    else
    {
      id v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (a1)
      {
        int MsgID = iAP2MsgGetMsgID((uint64_t)a1);
        int MsgLen = iAP2MsgGetMsgLen((uint64_t)a1);
      }
      else
      {
        int MsgID = 0;
        int MsgLen = 0;
      }
      int v7 = 136316418;
      BOOL v8 = "_iap2_power_msgCleanupCB";
      __int16 v9 = 1024;
      int v10 = 833;
      __int16 v11 = 1024;
      int v12 = 1;
      __int16 v13 = 1024;
      int v14 = MsgID;
      __int16 v15 = 1024;
      int v16 = MsgLen;
      __int16 v17 = 2080;
      label = dispatch_queue_get_label(0);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s:%d iAP2 Power MSG Cleanup callback deleting msg! needDelete=%d msgID=%xh msgLen=%d currentDispatchQueue: %s", (uint8_t *)&v7, 0x2Eu);
    }
    if (a1)
    {
      int v6 = (void *)a1[3];
      if (v6) {
        free(v6);
      }
      free(a1);
    }
  }
}

BOOL iap2_power_updateHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 37)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 288);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *(_DWORD *)a2;
    int v6 = *(unsigned __int16 *)(a2 + 4);
    int v7 = *(_DWORD *)(a2 + 8);
    int v8 = *(unsigned __int16 *)(a2 + 12);
    v13[0] = 67109888;
    v13[1] = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    __int16 v16 = 1024;
    int v17 = v7;
    __int16 v18 = 1024;
    int v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending Power Update: %d, %d, %d, %d\n", (uint8_t *)v13, 0x1Au);
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x10u);
  uint64_t v10 = Feature;
  if (Feature)
  {
    iap2_power_sendPowerUpdate(a1, (void *)(Feature + 24), *(_DWORD *)a2, *(unsigned __int16 *)(a2 + 4), *(_DWORD *)(a2 + 8), *(unsigned __int16 *)(a2 + 12));
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 37)
    {
      __int16 v11 = *(NSObject **)(gLogObjects + 288);
    }
    else
    {
      __int16 v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      iap2_power_updateHandler_cold_1();
    }
  }
  return v10 != 0;
}

void iap2_power_registerForSleepNotification(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1) {
      platform_power_registerForSleepWakeUpdate(*(void **)(a1 + 8));
    }
  }
}

void iap2_power_unregisterForSleepNotification(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1) {
      platform_power_unregisterForSleepWakeUpdate(*(void **)(a1 + 8));
    }
  }
}

uint64_t iap2_power_sleepUpdateHandler(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 32);
    if (v1)
    {
      iAP2LinkRunLoopHandleSuspend(v1);
      usleep(0x186A0u);
    }
  }
  return 1;
}

uint64_t iap2_power_wakeUpdateHandler(uint64_t a1)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 0x10u);
  if (a1)
  {
    uint64_t v3 = Feature;
    if (Feature)
    {
      if (*(void *)(a1 + 8))
      {
        if (*(_DWORD *)(Feature + 8) == 1)
        {
          if (gLogObjects && gNumLogObjects >= 37)
          {
            uint64_t v4 = *(NSObject **)(gLogObjects + 288);
          }
          else
          {
            uint64_t v4 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            int v5 = *(_DWORD *)(v3 + 8);
            v8[0] = 67109120;
            v8[1] = v5;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "powerDuringSleepuint64_t Type = %d, toggling acc_pwr on wake", (uint8_t *)v8, 8u);
          }
          platform_system_resetLightningBusForEndpointWithUUID(*(void **)(a1 + 8));
        }
        uint64_t v6 = *(void *)(a1 + 32);
        if (v6) {
          iAP2LinkRunLoopHandleResume(v6);
        }
      }
    }
  }
  return 1;
}

double _createFeature_8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (char *)malloc_type_calloc(1uLL, 0x28uLL, 0x1000040D4D046C0uLL);
    if (v1)
    {
      char *v1 = 0;
      *(void *)&double result = 0x200000003;
      *(_OWORD *)(v1 + 4) = xmmword_1001B82F0;
      *((void *)v1 + 3) = 0;
    }
  }
  return result;
}

uint64_t _destroyFeature_8(_DWORD **a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (v3)
    {
      if (!a2) {
        goto LABEL_7;
      }
      if (v3[2] != 2) {
        platform_power_setPowerDuringSleep(*(const void **)(a2 + 8), 0);
      }
      platform_power_stopPowerUpdates(*(void *)(a2 + 8));
      uint64_t v3 = *a1;
      if (*a1)
      {
LABEL_7:
        free(v3);
        *a1 = 0;
      }
    }
  }
  return 1;
}

uint64_t _startFeatureFromDevice_5(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 0x10u);
    if (Feature)
    {
      uint64_t v3 = Feature;
      *(_DWORD *)(Feature + 36) = -1;
      if ((acc_endpoint_isWireless(*(void **)v1) & 1) == 0 && !*(_DWORD *)(v3 + 4)) {
        platform_power_setAvailableCurrent(*(const void **)(v1 + 8), 0, 1);
      }
      if (*(_DWORD *)(v3 + 8) == 2) {
        return 1;
      }
      unsigned int v4 = platform_power_powerDuringSleepSupported(*(const void **)(v1 + 8));
      if (gLogObjects && gNumLogObjects >= 37)
      {
        int v5 = *(NSObject **)(gLogObjects + 288);
      }
      else
      {
        int v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(v3 + 8);
        v10[0] = 67109376;
        v10[1] = v7;
        __int16 v11 = 1024;
        unsigned int v12 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "powerDuringSleepuint64_t Type = %d, powerDuringSleepSupported = %d", (uint8_t *)v10, 0xEu);
      }
      if (!v4)
      {
        return 1;
      }
      else
      {
        int v8 = *(const void **)(v1 + 8);
        uint64_t v1 = 1;
        platform_power_setPowerDuringSleep(v8, 1);
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 37)
      {
        uint64_t v6 = *(NSObject **)(gLogObjects + 288);
      }
      else
      {
        uint64_t v6 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParamsPower_cold_1();
      }
      return 0;
    }
  }
  return v1;
}

uint64_t iap2_deviceNotifications_deviceInfoUpdateHandler(uint64_t *a1, const __CFString *a2)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  if (!iap2_feature_getFeature((uint64_t)a1, 8u)) {
    return 0;
  }
  iAP2MsgInit((uint64_t)(a1 + 15), 19977, a1[24], 0xFFFF, 0, 0);
  if (!iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), 0, 0, a2)) {
    return 0;
  }

  return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
}

uint64_t iap2_deviceNotifications_deviceLanguageUpdateHandler(uint64_t *a1, const __CFString *a2)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  if (!iap2_feature_getFeature((uint64_t)a1, 8u)) {
    return 0;
  }
  iAP2MsgInit((uint64_t)(a1 + 15), 19978, a1[24], 0xFFFF, 0, 0);
  if (!iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), 0, 0, a2)) {
    return 0;
  }

  return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
}

uint64_t iap2_deviceNotifications_deviceTimeUpdateHandler(uint64_t *a1, const __CFDictionary *a2)
{
  if (a1 && a2 && iap2_feature_getFeature((uint64_t)a1, 8u))
  {
    iAP2MsgInit((uint64_t)(a1 + 15), 19979, a1[24], 0xFFFF, 0, 0);
    unint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"kCFACCDeviceNotifications_DeviceTimeUpdate_UnixTime");
    int v5 = Value
      && CFNumberGetValue(Value, kCFNumberLongLongType, &valuePtr)
      && iAP2MsgAddU64Param((uint64_t)(a1 + 15), 0, 0, valuePtr) != 0;
    __int16 v10 = -21846;
    CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(a2, @"kCFACCDeviceNotifications_DeviceTimeUpdate_TimeZoneOffsetMinutes");
    if (v6 && CFNumberGetValue(v6, kCFNumberShortType, &v10) && iAP2MsgAddI16Param((uint64_t)(a1 + 15), 0, 1, v10)) {
      ++v5;
    }
    char v9 = -86;
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(a2, @"kCFACCDeviceNotifications_DeviceTimeUpdate_DaylightSavingsOffsetMinutes");
    if (v7 && CFNumberGetValue(v7, kCFNumberCharType, &v9) && iAP2MsgAddI8Param((uint64_t)(a1 + 15), 0, 2, v9) || v5) {
      iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
    }
  }
  return 0;
}

uint64_t iap2_deviceNotifications_wirelessCarPlayAvailabilityDidChangeHandler(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(void *)result) {
      return 0;
    }
    double result = iap2_feature_getFeature(result, 8u);
    if (result)
    {
      id v2 = (unsigned char *)result;
      CFTypeRef v3 = iap2_accAuthentication_copyCertificateSerial(v1);
      int isWirelessCarPlayAllowedForCertSerial = platform_CarPlay_isWirelessCarPlayAllowedForCertSerial((uint64_t)v3);
      int isCarPlayPairedWithCertSerial = platform_CarPlay_isCarPlayPairedWithCertSerial((uint64_t)v3);
      if (v3) {
        CFRelease(v3);
      }
      if (gLogObjects && gNumLogObjects >= 28)
      {
        CFNumberRef v6 = *(NSObject **)(gLogObjects + 216);
      }
      else
      {
        CFNumberRef v6 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v7 = v2[4];
        int v8 = v2[2];
        int v9 = v2[1];
        uint64_t v10 = *(void *)(v1 + 8);
        v13[0] = 67110402;
        v13[1] = isWirelessCarPlayAllowedForCertSerial;
        __int16 v14 = 1024;
        int v15 = isCarPlayPairedWithCertSerial;
        __int16 v16 = 1024;
        int v17 = v7;
        __int16 v18 = 1024;
        int v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        __int16 v22 = 2112;
        uint64_t v23 = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "wirelessCarPlayAvailabilityDidChangeHandler: wirelessCarPlayAvailable: %d, carPlayPaired: %d, pfeature->wirelessCarPlayAvailable: %d, pFeature->firstWirelessCarPlayAvailabilityNotificationSeen: %d, requestedDeviceTransportIdentifierNotification: %d, endpoint: %@", (uint8_t *)v13, 0x2Au);
      }
      if (*v2)
      {
        if (v2[4] == isWirelessCarPlayAllowedForCertSerial && v2[2])
        {
          if (gLogObjects && gNumLogObjects >= 28)
          {
            __int16 v11 = *(NSObject **)(gLogObjects + 216);
          }
          else
          {
            __int16 v11 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          int v12 = 1;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            LOWORD(v13[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Wireless CarPlay availability didn't change for this accessory - ignoring notification", (uint8_t *)v13, 2u);
          }
        }
        else
        {
          iAP2MsgInit(v1 + 120, 19981, *(void *)(v1 + 192), 0xFFFF, 0, 0);
          iAP2MsgAddU8Param(v1 + 120, 0, 0, isWirelessCarPlayAllowedForCertSerial);
          int v12 = iap2_sessionControl_sendOutgoingMessage((uint64_t *)v1, v1 + 120);
        }
      }
      else
      {
        int v12 = 1;
      }
      if (!v2[1] || v2[3] || !isWirelessCarPlayAllowedForCertSerial || ((isCarPlayPairedWithCertSerial ^ 1) & 1) != 0)
      {
        if (v12)
        {
LABEL_33:
          double result = 1;
          v2[2] = 1;
LABEL_35:
          v2[4] = isWirelessCarPlayAllowedForCertSerial;
          return result;
        }
      }
      else if ((v12 & _sendTransportIdentifiers(v1)) == 1)
      {
        v2[3] = 1;
        if (!*v2) {
          platform_deviceNotifications_removeSubscriber(3, *(void **)(v1 + 8));
        }
        goto LABEL_33;
      }
      double result = 0;
      goto LABEL_35;
    }
  }
  return result;
}

uint64_t _sendTransportIdentifiers(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    uint64_t v2 = result + 120;
    iAP2MsgInit(result + 120, 19982, *(void *)(result + 192), 0xFFFF, 0, 0);
    CFStringRef v3 = (const __CFString *)platform_systemInfo_copyBluetoothMACAddress();
    CFStringRef v4 = (const __CFString *)platform_systemInfo_copyUniqueDeviceID();
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 28;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      CFNumberRef v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      CFNumberRef v6 = *(NSObject **)(gLogObjects + 216);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138478083;
      CFStringRef v10 = v3;
      __int16 v11 = 2113;
      CFStringRef v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending Device Transport Identifiers (btMAC: %{private}@, udid: %{private}@)", (uint8_t *)&v9, 0x16u);
    }
    unint64_t v7 = (unint64_t)iAP2MsgAddCFStringParam(v2, 0, 0, v3);
    BOOL v8 = ((unint64_t)iAP2MsgAddCFStringParam(v2, 0, 1, v4) | v7) != 0;
    if (v3) {
      CFRelease(v3);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (v8)
    {
      iap2_sessionControl_sendOutgoingMessage(v1, v2);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned char *_createFeature_9(unsigned char *result)
{
  if (result)
  {
    double result = malloc_type_calloc(1uLL, 5uLL, 0x1000040957D8CC4uLL);
    if (result)
    {
      result[4] = 0;
      *(_DWORD *)double result = 0;
    }
  }
  return result;
}

uint64_t _destroyFeature_9(void **a1, uint64_t a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (!v2)
  {
    BOOL v5 = *(void **)(a2 + 8);
    if (v5) {
      platform_deviceNotifications_removeSubscriber(5, v5);
    }
    if (*a1)
    {
      free(*a1);
      *a1 = 0;
    }
  }
  return v3;
}

uint64_t _startFeatureFromDevice_6(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 28;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    uint64_t v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(gLogObjects + 216);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v21[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting Device Notifications...", (uint8_t *)v21, 2u);
  }
  if (!a1) {
    return 0;
  }
  if (!*(void *)a1) {
    return 0;
  }
  if (!**(void **)a1) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 8u);
  if (!Feature) {
    return 0;
  }
  BOOL v5 = (unsigned char *)Feature;
  if (!iap2_identification_isIdentifiedForOutgoingMessageID(a1, 0x4E0Cu)) {
    goto LABEL_19;
  }
  iAP2MsgInit(a1 + 120, 19980, *(void *)(a1 + 192), 0xFFFF, 0, 0);
  CFStringRef v6 = (const __CFString *)acc_manager_copyDeviceUUID();
  unint64_t v7 = iAP2MsgAddCFStringParam(a1 + 120, 0, 0, v6);
  if (v6) {
    CFRelease(v6);
  }
  if (v7)
  {
    iap2_sessionControl_sendOutgoingMessage((uint64_t *)a1, a1 + 120);
LABEL_19:
    uint64_t v8 = 1;
    goto LABEL_20;
  }
  uint64_t v8 = 0;
LABEL_20:
  if (iap2_identification_isIdentifiedForOutgoingMessageID(a1, 0x4E09u)) {
    platform_deviceNotifications_addSubscriber(0, *(void **)(a1 + 8), v9);
  }
  if (iap2_identification_isIdentifiedForOutgoingMessageID(a1, 0x4E0Au)) {
    platform_deviceNotifications_addSubscriber(1u, *(void **)(a1 + 8), v10);
  }
  if (iap2_identification_isIdentifiedForOutgoingMessageID(a1, 0x4E0Bu)) {
    platform_deviceNotifications_addSubscriber(2u, *(void **)(a1 + 8), v11);
  }
  if (iap2_identification_isIdentifiedForOutgoingMessageID(a1, 0x4E0Du))
  {
    platform_deviceNotifications_addSubscriber(3u, *(void **)(a1 + 8), v12);
    unsigned char *v5 = 1;
  }
  if (iap2_identification_isIdentifiedForOutgoingMessageID(a1, 0x4E0Eu))
  {
    v5[1] = 1;
    if (gLogObjects && gNumLogObjects >= 28)
    {
      __int16 v13 = *(NSObject **)(gLogObjects + 216);
    }
    else
    {
      __int16 v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      int isIdentifiedForCarPlay = iap2_identification_isIdentifiedForCarPlay(a1);
      int isIdentifiedForUSBCarPlay = iap2_identification_isIdentifiedForUSBCarPlay(a1);
      int isIdentifiedForWirelessCarPlay = iap2_identification_isIdentifiedForWirelessCarPlay(a1);
      v21[0] = 67109632;
      v21[1] = isIdentifiedForCarPlay;
      __int16 v22 = 1024;
      int v23 = isIdentifiedForUSBCarPlay;
      __int16 v24 = 1024;
      int v25 = isIdentifiedForWirelessCarPlay;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "identifiedForCarPlay: %d, identifiedForUSBCarPlay: %d, identifiedForWirelessCarPlay: %d", (uint8_t *)v21, 0x14u);
    }
    int Type = acc_connection_getType(**(void **)a1);
    if (iap2_identification_isIdentifiedForUSBCarPlay(a1) && (Type == 6 || Type == 1))
    {
      if ((v8 & _sendTransportIdentifiers(a1)) == 1)
      {
        uint64_t v8 = 1;
        v5[3] = 1;
        return v8;
      }
      return 0;
    }
    if (iap2_identification_isIdentifiedForWirelessCarPlay(a1))
    {
      platform_deviceNotifications_addSubscriber(3u, *(void **)(a1 + 8), v18);
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 28)
      {
        int v19 = *(NSObject **)(gLogObjects + 216);
      }
      else
      {
        int v19 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v21[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Non-CarPlay accessory requested Device Transport Identifiers, ignoring...", (uint8_t *)v21, 2u);
      }
    }
  }
  return v8;
}

uint64_t _checkIdentificationInfo_7(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgDeviceNotificationsList, 6u, &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    iap2_identification_setIdentifiedForFeature(a1, 8u);
  }
  return v3;
}

id _getUSBBillboardDevicePluginInstance()
{
  uint64_t v0 = +[ACCPlatformPluginManager sharedManager];
  uint64_t v1 = [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformUSBBillboardDevicePluginProtocol fallbackToTransportPlugins:1];

  return v1;
}

int main(int argc, const char **argv, const char **envp)
{
  kdebug_trace();
  init_logging();
  id v4 = &_dispatch_main_q;
  uint64_t v101 = 0;
  int v102 = &v101;
  uint64_t v103 = 0x3032000000;
  id v104 = __Block_byref_object_copy__2;
  CFNumberRef v105 = __Block_byref_object_dispose__2;
  dispatch_source_t v106 = (dispatch_source_t)0xAAAAAAAAAAAAAAAALL;
  dispatch_source_t v106 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  dispatch_source_set_event_handler((dispatch_source_t)v102[5], &__block_literal_global_14);
  BOOL v5 = v102[5];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = __main_block_invoke_56;
  handler[3] = &unk_100217220;
  handler[4] = &v101;
  dispatch_source_set_cancel_handler(v5, handler);
  dispatch_resume((dispatch_object_t)v102[5]);
  kdebug_trace();
  for (uint64_t i = 0; i != 6; ++i)
  {
    unint64_t v7 = (&off_100217718)[i];
    uint64_t v8 = +[NSFileManager defaultManager];
    __n128 v9 = +[NSString stringWithUTF8String:v7];
    [v8 removeItemAtPath:v9 error:0];
  }
  __n128 v10 = dispatch_get_global_queue(0, 0);
  xpc_set_event_stream_handler("com.apple.accessoryd.digitalIDMatching", v10, &__block_literal_global_60);

  xpc_set_event_stream_handler("com.apple.accessoryd.cableTypeMatching", v10, &__block_literal_global_64);
  xpc_set_event_stream_handler("com.apple.accessoryd.btServiceMatching", v10, &__block_literal_global_68);

  xpc_set_event_stream_handler("com.apple.iokit.matching", v10, &__block_literal_global_72);
  if (gLogObjects && gNumLogObjects >= 1)
  {
    __n128 v11 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __n128 v11 = &_os_log_default;
    id v12 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = platform_system_unlockedSinceBoot();
    *(_DWORD *)buf = 136315650;
    int v112 = "main";
    __int16 v113 = 1024;
    int v114 = 193;
    __int16 v115 = 1024;
    int v116 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s:%d unlockedSinceBoot %d", buf, 0x18u);
  }

  kdebug_trace();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    __int16 v14 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v14 = &_os_log_default;
    id v15 = &_os_log_default;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Starting daemon...", buf, 2u);
  }

  __resetiAP2ShimServerState();
  kdebug_trace();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    __int16 v16 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v16 = &_os_log_default;
    id v17 = &_os_log_default;
  }
  BOOL v18 = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);

  if (v18)
  {
    int v19 = +[NSBundle mainBundle];
    __int16 v20 = [v19 infoDictionary];
    int v21 = [v20 objectForKeyedSubscript:@"GitCommitHash"];

    __int16 v22 = +[NSBundle mainBundle];
    int v23 = [v22 infoDictionary];
    __int16 v24 = [v23 objectForKeyedSubscript:@"GitStatus"];

    if (v21 && ([v24 isEqualToString:@"Clean"] & 1) == 0)
    {
      uint64_t v25 = +[NSString stringWithFormat:@"%@ (%@)", v21, v24, context];
    }
    else
    {
      uint64_t v25 = +[NSString stringWithFormat:@"%@", v21];
    }
    int v26 = (char *)v25;
    if (gLogObjects && gNumLogObjects >= 1)
    {
      int v27 = *(id *)gLogObjects;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v27 = &_os_log_default;
      id v28 = &_os_log_default;
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      int v112 = v26;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Commit Hash: %@", buf, 0xCu);
    }

    uint64_t v29 = +[NSString stringWithCString:*argv encoding:4];
    unsigned int v30 = +[NSFileManager defaultManager];
    int v31 = [v30 attributesOfItemAtPath:v29 error:0];

    unsigned __int16 v32 = [v31 objectForKey:NSFileCreationDate];
    id v33 = objc_alloc_init((Class)NSDateFormatter);
    long long v34 = +[NSTimeZone localTimeZone];
    [v33 setTimeZone:v34];

    [v33 setDateStyle:1];
    [v33 setTimeStyle:3];
    if (gLogObjects && gNumLogObjects >= 1)
    {
      __int16 v35 = *(id *)gLogObjects;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v35 = &_os_log_default;
      id v36 = &_os_log_default;
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      uint64_t v37 = [v33 stringFromDate:v32];
      *(_DWORD *)buf = 138412290;
      int v112 = v37;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Binary date: %@", buf, 0xCu);
    }
    if (gLogObjects && gNumLogObjects >= 1)
    {
      __int16 v38 = *(id *)gLogObjects;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v38 = &_os_log_default;
      id v39 = &_os_log_default;
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      int isInternalBuild = platform_systemInfo_isInternalBuild();
      int v41 = "NO";
      if (isInternalBuild) {
        int v41 = "YES";
      }
      *(_DWORD *)buf = 136315138;
      int v112 = v41;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Internal Build: %s", buf, 0xCu);
    }
  }
  if (gLogObjects && gNumLogObjects >= 1)
  {
    uint64_t v42 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v42 = &_os_log_default;
    id v43 = &_os_log_default;
  }
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
  {
    __int16 v44 = +[NSBundle mainBundle];
    main_cold_24(v44, (uint64_t)v110);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    CFArrayRef v45 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFArrayRef v45 = &_os_log_default;
    id v46 = &_os_log_default;
  }
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
  {
    +[NSBundle mainBundle];
    uint64_t v47 = [(id)objc_claimAutoreleasedReturnValue() bundlePath];
    main_cold_22(v47);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    __int16 v48 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v48 = &_os_log_default;
    id v49 = &_os_log_default;
  }
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
  {
    +[NSBundle mainBundle];
    __int16 v50 = [(id)objc_claimAutoreleasedReturnValue() bundleIdentifier];
    main_cold_20(v50);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    long long v51 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    long long v51 = &_os_log_default;
    id v52 = &_os_log_default;
  }
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
  {
    +[NSBundle mainBundle];
    __int16 v53 = [(id)objc_claimAutoreleasedReturnValue() builtInPlugInsPath];
    main_cold_18(v53);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    uint64_t v54 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v54 = &_os_log_default;
    id v55 = &_os_log_default;
  }
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
  {
    int v56 = +[NSBundle mainBundle];
    __int16 v57 = [v56 localizations];
    main_cold_16(v57, v109, v54, v56);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v58 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v58 = &_os_log_default;
    id v59 = &_os_log_default;
  }
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
  {
    int v60 = +[NSBundle mainBundle];
    __int16 v61 = [v60 preferredLocalizations];
    main_cold_14(v61, v108, v58, v60);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v62 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v62 = &_os_log_default;
    id v63 = &_os_log_default;
  }
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
  {
    int v64 = acc_strings_bundle();
    main_cold_12(v64, (uint64_t)v107);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    CFRange v65 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFRange v65 = &_os_log_default;
    id v66 = &_os_log_default;
  }
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    int v112 = "main";
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "%s: initIdentityCertStates ... ", buf, 0xCu);
  }

  int inited = mfi4Auth_protocol_initIdentityCertStates();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v68 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v68 = &_os_log_default;
    id v69 = &_os_log_default;
  }
  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v112 = "main";
    __int16 v113 = 1024;
    int v114 = inited;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "%s: initIdentityCertStates ... errNo %d", buf, 0x12u);
  }

  kdebug_trace();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v70 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v70 = &_os_log_default;
    id v71 = &_os_log_default;
  }
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Loading platform plugins...", buf, 2u);
  }

  CFNumberRef v72 = +[ACCPlatformPluginManager sharedManager];
  [v72 loadAllBundles];

  kdebug_trace();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v73 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v73 = &_os_log_default;
    id v74 = &_os_log_default;
  }
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "Initializing platform plugins...", buf, 2u);
  }

  int v75 = +[ACCPlatformPluginManager sharedManager];
  [v75 initAllPlugIns];

  kdebug_trace();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v76 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v76 = &_os_log_default;
    id v77 = &_os_log_default;
  }
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "Starting EA XPC server...", buf, 2u);
  }

  id v78 = +[ACCExternalAccessoryServer sharedServer];
  [v78 startServer];

  if (gLogObjects && gNumLogObjects >= 1)
  {
    CFNumberRef v79 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFNumberRef v79 = &_os_log_default;
    id v80 = &_os_log_default;
  }
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Starting accessory transport server...", buf, 2u);
  }

  uint64_t v81 = +[ACCTransportServer sharedServer];
  [v81 startServer];

  kdebug_trace();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    __int16 v82 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v82 = &_os_log_default;
    id v83 = &_os_log_default;
  }
  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "Loading transport plugins...", buf, 2u);
  }

  __int16 v84 = +[ACCTransportPluginManager sharedManager];
  [v84 loadAllBundles];

  kdebug_trace();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v85 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v85 = &_os_log_default;
    id v86 = &_os_log_default;
  }
  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "Initializing transport plugins...", buf, 2u);
  }

  int v87 = +[ACCTransportPluginManager sharedManager];
  [v87 initAllPlugIns];

  kdebug_trace();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    __int16 v88 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v88 = &_os_log_default;
    id v89 = &_os_log_default;
  }
  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "Starting transport plugins...", buf, 2u);
  }

  __int16 v90 = +[ACCTransportPluginManager sharedManager];
  [v90 startAllPlugIns];

  kdebug_trace();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v91 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v91 = &_os_log_default;
    id v92 = &_os_log_default;
  }
  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "Loading feature plugins...", buf, 2u);
  }

  CFNumberRef v93 = +[ACCFeaturePluginManager sharedManager];
  [v93 loadAllBundles];

  kdebug_trace();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v94 = *(id *)gLogObjects;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v94 = &_os_log_default;
    id v95 = &_os_log_default;
  }
  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "Initializing feature plugins...", buf, 2u);
  }

  id v96 = +[ACCFeaturePluginManager sharedManager];
  [v96 initAllPlugIns];

  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  if (_isDeviceAnalyticsEnabled_onceToken != -1) {
    dispatch_once(&_isDeviceAnalyticsEnabled_onceToken, &__block_literal_global_114);
  }
  _Block_object_dispose(&v101, 8);

  CFNumberRef v97 = +[NSRunLoop currentRunLoop];
  [v97 run];

  __resetiAP2ShimServerState();
  return 0;
}

void sub_10008F348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __main_block_invoke(id a1)
{
  uint64_t v1 = gLogObjects;
  int v2 = gNumLogObjects;
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects < 1;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v6 = 134218240;
      uint64_t v7 = v1;
      __int16 v8 = 1024;
      int v9 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v6, 0x12u);
    }
    BOOL v5 = &_os_log_default;
    id v4 = &_os_log_default;
  }
  else
  {
    BOOL v5 = *(id *)gLogObjects;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SIGTERM received, shutting down.", (uint8_t *)&v6, 2u);
  }

  __resetiAP2ShimServerState();
  exit(0);
}

void __resetiAP2ShimServerState()
{
  strcpy(name, "com.apple.iap2d.notify.availability");
  int out_token = -1;
  if (notify_register_check(name, &out_token))
  {
    if (gLogObjects) {
      BOOL v0 = gNumLogObjects < 1;
    }
    else {
      BOOL v0 = 1;
    }
    if (v0)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v5 = &_os_log_default;
      id v1 = &_os_log_default;
    }
    else
    {
      BOOL v5 = *(id *)gLogObjects;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "__resetiAP2ShimServerState: failed register check!!!", buf, 2u);
    }
  }
  else
  {
    uint64_t v13 = 0;
    notify_get_state(out_token, &v13);
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects <= 0;
    }
    else {
      BOOL v2 = 1;
    }
    int v3 = !v2;
    if (v13 == 1)
    {
      if (v3)
      {
        id v4 = *(id *)gLogObjects;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v4 = &_os_log_default;
        id v7 = &_os_log_default;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v16) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "__resetiAP2ShimServerState: set kIAP2AvailableNotification state: %d", buf, 8u);
      }

      notify_set_state(out_token, 0);
      if (gLogObjects && gNumLogObjects >= 1)
      {
        __int16 v8 = *(id *)gLogObjects;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v8 = &_os_log_default;
        id v10 = &_os_log_default;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "__resetiAP2ShimServerState: post kIAP2AvailableNotification notification: ", buf, 2u);
      }

      notify_post(name);
    }
    else
    {
      if (v3)
      {
        int v6 = *(id *)gLogObjects;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v6 = &_os_log_default;
        id v9 = &_os_log_default;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v16 = v13;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "__resetiAP2ShimServerState: kIAP2AvailableNotification state %llu, skip post", buf, 0xCu);
      }
    }
    if (gLogObjects && gNumLogObjects >= 1)
    {
      __n128 v11 = *(id *)gLogObjects;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __n128 v11 = &_os_log_default;
      id v12 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "__resetiAP2ShimServerState: cancel notify token", buf, 2u);
    }

    notify_cancel(out_token);
  }
}

void __main_block_invoke_56(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

void __main_block_invoke_2(id a1, OS_xpc_object *a2)
{
  string = xpc_dictionary_get_string(a2, _xpc_event_key_name);
  if (string)
  {
    int v3 = string;
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 1;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    else
    {
      int v6 = *(id *)gLogObjects;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      __int16 v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received %s", (uint8_t *)&v7, 0xCu);
    }
  }
}

void __main_block_invoke_62(id a1, OS_xpc_object *a2)
{
  string = xpc_dictionary_get_string(a2, _xpc_event_key_name);
  if (string)
  {
    int v3 = string;
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 1;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    else
    {
      int v6 = *(id *)gLogObjects;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      __int16 v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received %s", (uint8_t *)&v7, 0xCu);
    }
  }
}

void __main_block_invoke_66(id a1, OS_xpc_object *a2)
{
  string = xpc_dictionary_get_string(a2, _xpc_event_key_name);
  if (string)
  {
    int v3 = string;
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 1;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    else
    {
      int v6 = *(id *)gLogObjects;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      __int16 v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received %s", (uint8_t *)&v7, 0xCu);
    }
  }
}

void __main_block_invoke_70(id a1, OS_xpc_object *a2)
{
  string = xpc_dictionary_get_string(a2, _xpc_event_key_name);
  if (string)
  {
    int v3 = string;
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 1;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    else
    {
      int v6 = *(id *)gLogObjects;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315138;
      __int16 v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received %s", (uint8_t *)&v13, 0xCu);
    }

    int v7 = +[NSString stringWithCString:v3 encoding:4];
    if ([v7 isEqualToString:@"com.apple.accessoryd.matching.A2868.billboard"])
    {
      __int16 v8 = _getUSBBillboardDevicePluginInstance();

      if (!v8)
      {
LABEL_19:

        return;
      }
      id v9 = _getUSBBillboardDevicePluginInstance();
      id v10 = v9;
      uint64_t v11 = 5904;
    }
    else
    {
      if (![v7 isEqualToString:@"com.apple.accessoryd.matching.A2869.billboard"]) {
        goto LABEL_19;
      }
      id v12 = _getUSBBillboardDevicePluginInstance();

      if (!v12) {
        goto LABEL_19;
      }
      id v9 = _getUSBBillboardDevicePluginInstance();
      id v10 = v9;
      uint64_t v11 = 5905;
    }
    [v9 startDetectUSBBillboardDeviceWithVID:1452 PID:v11];

    goto LABEL_19;
  }
}

void ___isDeviceAnalyticsEnabled_block_invoke(id a1)
{
  _isDeviceAnalyticsEnabled_dataCollectionEnabled = DiagnosticLogSubmissionEnabled();
}

void OUTLINED_FUNCTION_2_12(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_debug_impl(a1, v4, OS_LOG_TYPE_DEBUG, a4, v5, 0xCu);
}

id OUTLINED_FUNCTION_3_13(id a1)
{
  return a1;
}

void OUTLINED_FUNCTION_4_10(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_debug_impl(a1, v4, OS_LOG_TYPE_DEBUG, a4, v5, 0xCu);
}

void platform_voiceOver_accessoryAttached(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v2 = *(id *)(gLogObjects + 280);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412290;
    uint64_t v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "voiceOver accessoryAttached: %@", (uint8_t *)&v6, 0xCu);
  }

  BOOL v4 = +[ACCVoiceOverServer sharedServer];
  [v4 incrementUserCount];

  id v5 = +[ACCVoiceOverServer sharedServer];
  [v5 accessoryVoiceOverAttached:a1];
}

void platform_voiceOver_accessoryDetached(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v2 = *(id *)(gLogObjects + 280);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412290;
    uint64_t v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "voiceOver accessoryDetached: %@", (uint8_t *)&v6, 0xCu);
  }

  BOOL v4 = +[ACCVoiceOverServer sharedServer];
  [v4 accessoryVoiceOverDetached:a1];

  id v5 = +[ACCVoiceOverServer sharedServer];
  [v5 decrementUserCount];
}

void platform_VoiceOver_setEnabled(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v4 = *(id *)(gLogObjects + 280);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412546;
    uint64_t v8 = a1;
    __int16 v9 = 1024;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "voiceOver setState: %@ enabled: %d", (uint8_t *)&v7, 0x12u);
  }

  int v6 = +[ACCVoiceOverServer sharedServer];
  [v6 accessoryVoiceOver:a1 setEnabled:a2];
}

void platform_voiceOver_performAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    int v6 = *(id *)(gLogObjects + 280);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v19 = a1;
    __int16 v20 = 1024;
    int v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "voiceOver performAction: %@, action=%d", buf, 0x12u);
  }

  __int16 v9 = 0;
  switch((int)a2)
  {
    case 10:
    case 18:
      goto LABEL_14;
    case 11:
    case 23:
      if (!a3 || *(_DWORD *)a3 != a2) {
        return;
      }
      int v10 = +[NSString stringWithUTF8String:*(void *)(a3 + 8)];
      uint64_t v11 = &ACCVoiceOverActionParameterTextKey;
      goto LABEL_23;
    case 12:
    case 13:
    case 14:
    case 15:
    case 19:
    case 20:
    case 21:
    case 22:
      goto LABEL_26;
    case 16:
      if (!a3 || *(_DWORD *)a3 != 16) {
        goto LABEL_25;
      }
      LODWORD(v8) = *(_DWORD *)(a3 + 8);
      int v10 = +[NSNumber numberWithFloat:v8];
      LODWORD(v14) = *(_DWORD *)(a3 + 12);
      id v15 = +[NSNumber numberWithFloat:v14];
      uint64_t v16 = +[NSNumber numberWithInt:*(unsigned int *)(a3 + 16)];
      __int16 v9 = +[NSDictionary dictionaryWithObjectsAndKeys:v10, @"ACCVoiceOverActionParameterPointXKey", v15, @"ACCVoiceOverActionParameterPointYKey", v16, @"ACCVoiceOverActionParameterTouchTypeKey", 0];

      goto LABEL_24;
    case 17:
      if (a3 && *(_DWORD *)a3 == 17)
      {
        LODWORD(v8) = *(_DWORD *)(a3 + 8);
        int v10 = +[NSNumber numberWithFloat:v8];
        uint64_t v11 = &ACCVoiceOverActionParameterScaleKey;
LABEL_23:
        __int16 v9 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v10, *v11, 0);
LABEL_24:
      }
      else
      {
LABEL_25:
        __int16 v9 = 0;
      }
LABEL_26:
      id v17 = +[ACCVoiceOverServer sharedServer];
      [v17 accessoryVoiceOver:a1 performAction:a2 parameters:v9];

      return;
    default:
      if (a2 != 1) {
        goto LABEL_26;
      }
LABEL_14:
      if (!a3 || *(_DWORD *)a3 != a2) {
        return;
      }
      LODWORD(v8) = *(_DWORD *)(a3 + 8);
      int v10 = +[NSNumber numberWithFloat:v8];
      LODWORD(v12) = *(_DWORD *)(a3 + 12);
      int v13 = +[NSNumber numberWithFloat:v12];
      __int16 v9 = +[NSDictionary dictionaryWithObjectsAndKeys:v10, @"ACCVoiceOverActionParameterPointXKey", v13, @"ACCVoiceOverActionParameterPointYKey", 0];

      goto LABEL_24;
  }
}

void platform_voiceOver_setConfiguration(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    int v6 = *(id *)(gLogObjects + 280);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v13 = 138412546;
    uint64_t v14 = a1;
    __int16 v15 = 1024;
    int v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "voiceOver setConfiguration: %@ type: %d", (uint8_t *)&v13, 0x12u);
  }

  if (a2 <= 1)
  {
    if (a3)
    {
      LODWORD(v8) = *a3;
      uint64_t v9 = +[NSNumber numberWithFloat:v8];
      if (!v9) {
        return;
      }
      int v10 = v9;
      uint64_t v11 = +[ACCVoiceOverServer sharedServer];
      [v11 accessoryVoiceOver:a1 requestConfiguration:a2 param:v10];
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 36)
      {
        int v10 = *(id *)(gLogObjects + 280);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v10 = &_os_log_default;
        id v12 = &_os_log_default;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 138412546;
        uint64_t v14 = a1;
        __int16 v15 = 1024;
        int v16 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "voiceOver setConfiguration: %@ type: %d, NO REQUIRED VALUE!!!", (uint8_t *)&v13, 0x12u);
      }
    }
  }
}

void platform_voiceOver_startInformationUpdate(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v2 = *(id *)(gLogObjects + 280);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "voiceOver startInformationUpdate: %@", (uint8_t *)&v5, 0xCu);
  }

  BOOL v4 = +[ACCVoiceOverServer sharedServer];
  [v4 accessoryVoiceOverStartInformationUpdate:a1];
}

void platform_voiceOver_stopInformationUpdate(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v2 = *(id *)(gLogObjects + 280);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "voiceOver stopInformationUpdate: %@", (uint8_t *)&v5, 0xCu);
  }

  BOOL v4 = +[ACCVoiceOverServer sharedServer];
  [v4 accessoryVoiceOverStopInformationUpdate:a1];
}

void platform_voiceOver_startCursorInformationUpdate(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v2 = *(id *)(gLogObjects + 280);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "voiceOver startCursorInformationUpdate: %@", (uint8_t *)&v5, 0xCu);
  }

  BOOL v4 = +[ACCVoiceOverServer sharedServer];
  [v4 accessoryVoiceOverStartCursorInformationUpdate:a1];
}

void platform_voiceOver_stopCursorInformationUpdate(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v2 = *(id *)(gLogObjects + 280);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "voiceOver stopCursorInformationUpdate: %@", (uint8_t *)&v5, 0xCu);
  }

  BOOL v4 = +[ACCVoiceOverServer sharedServer];
  [v4 accessoryVoiceOverStopCursorInformationUpdate:a1];
}

void platform_voiceOver_informationUpdateHandler(int a1, int a2, float a3, float a4)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    double v8 = *(id *)(gLogObjects + 280);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    double v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v11[0] = 67109888;
    v11[1] = a1;
    __int16 v12 = 2048;
    double v13 = a3;
    __int16 v14 = 2048;
    double v15 = a4;
    __int16 v16 = 1024;
    int v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "voiceOver informationUpdateHandler: validMask=%xh volume=%f rate=%f enabled=%d", (uint8_t *)v11, 0x22u);
  }

  if (a1)
  {
    int v10 = (float *)malloc_type_malloc(0x30uLL, 0x1062040AB4C578FuLL);
    *int v10 = 0.0;
    *((_DWORD *)v10 + 2) = a1;
    void v10[3] = a3;
    v10[4] = a4;
    *((unsigned char *)v10 + 20) = a2;
    if ((accFeatureHandlers_invokeHandler(0, 21, (uint64_t)v10) & 1) == 0) {
      platform_voiceOver_deleteParams(v10);
    }
  }
}

void platform_voiceOver_deleteParams(void *a1)
{
  if (a1)
  {
    if (*(_DWORD *)a1 == 1)
    {
      BOOL v2 = (const void *)a1[2];
      if (v2) {
        CFRelease(v2);
      }
      id v3 = (const void *)a1[3];
      if (v3) {
        CFRelease(v3);
      }
      BOOL v4 = (const void *)a1[4];
      if (v4) {
        CFRelease(v4);
      }
    }
    free(a1);
  }
}

void platform_voiceOver_cursorInformationUpdateHandler(int a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  if (gLogObjects && gNumLogObjects >= 36)
  {
    __int16 v12 = *(id *)(gLogObjects + 280);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v12 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v15[0] = 67110146;
    v15[1] = a1;
    __int16 v16 = 2112;
    id v17 = v9;
    __int16 v18 = 2112;
    id v19 = v10;
    __int16 v20 = 2112;
    id v21 = v11;
    __int16 v22 = 2048;
    uint64_t v23 = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "voiceOver cursorInformationUpdateHandler: validMask=%xh label=%@ value=%@ hint=%@ traitsMask=%llx", (uint8_t *)v15, 0x30u);
  }

  if (a1)
  {
    __int16 v14 = malloc_type_malloc(0x30uLL, 0x1062040AB4C578FuLL);
    *__int16 v14 = 1;
    _DWORD v14[2] = a1;
    *((void *)v14 + 2) = v9;
    *((void *)v14 + 3) = v10;
    *((void *)v14 + 4) = v11;
    *((void *)v14 + 5) = a5;
    if ((accFeatureHandlers_invokeHandler(0, 22, (uint64_t)v14) & 1) == 0) {
      platform_voiceOver_deleteParams(v14);
    }
  }
}

void platform_externalAccessory_addEAAccessoryForPrimaryEndpoint(const char *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 10;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 72);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = 138412290;
    __int16 v18 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "platform_externalAccessory_addEAAccessoryForPrimaryEndpoint endpointUUID: %@", (uint8_t *)&v17, 0xCu);
  }

  if (platform_externalAccessory_addEAAccessoryForPrimaryEndpoint_onceToken != -1) {
    dispatch_once(&platform_externalAccessory_addEAAccessoryForPrimaryEndpoint_onceToken, &__block_literal_global_15);
  }
  int v5 = acc_manager_copyConnectionUUIDForEndpointUUID(a1);
  if (v5)
  {
    uint64_t v6 = v5;
    CFSetRef ConnectionWithUUID = (char *)acc_manager_getConnectionWithUUID(v5);
    if (!ConnectionWithUUID)
    {
      CFRelease(v6);
LABEL_28:
      id v13 = [[ACCExternalAccessory alloc] initWithEndpointUUIDs:0 primaryEndpointUUID:a1];
      if (v13)
      {
        p_super = &v13->super;
        [(id)gConnectedExternalAccessories addObject:v13];
        _postFindAppAlert(p_super);
        platform_digitalAudio_eaAccessoryAttached();
        double v15 = +[ACCExternalAccessoryServer sharedServer];
        [v15 externalAccessoryArrived:p_super];
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 10)
        {
          p_super = *(id *)(gLogObjects + 72);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          p_super = &_os_log_default;
          id v16 = &_os_log_default;
        }
        if (os_log_type_enabled(p_super, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v17) = 0;
          _os_log_impl((void *)&_mh_execute_header, p_super, OS_LOG_TYPE_DEFAULT, "Could not create ACCExternalAccessory object for EA endpoints", (uint8_t *)&v17, 2u);
        }
      }

      return;
    }
    double v8 = acc_connection_copyProperty(ConnectionWithUUID, kCFACCProperties_Connection_HideFromEA);
    id v9 = v8;
    if (v8) {
      CFRelease(v8);
    }
    if (gLogObjects && gNumLogObjects >= 10)
    {
      id v10 = *(id *)(gLogObjects + 72);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v10 = &_os_log_default;
      id v11 = &_os_log_default;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = "no";
      if (!v9) {
        __int16 v12 = "yes";
      }
      int v17 = 136315138;
      __int16 v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "connectionSupportsEA = %s", (uint8_t *)&v17, 0xCu);
    }

    CFRelease(v6);
    if (!v9) {
      goto LABEL_28;
    }
  }
}

void __platform_externalAccessory_addEAAccessoryForPrimaryEndpoint_block_invoke(id a1)
{
  if (!gConnectedExternalAccessories)
  {
    gConnectedExternalAccessories = (uint64_t)objc_alloc_init((Class)NSMutableArray);
    _objc_release_x1();
  }
}

void platform_externalAccessory_addEAAccessoryForEAEndpoints(void *a1, uint64_t a2)
{
  if (platform_externalAccessory_addEAAccessoryForEAEndpoints_onceToken != -1) {
    dispatch_once(&platform_externalAccessory_addEAAccessoryForEAEndpoints_onceToken, &__block_literal_global_6);
  }
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 10;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    uint64_t v6 = *(id *)(gLogObjects + 72);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    platform_externalAccessory_addEAAccessoryForEAEndpoints_cold_2((uint64_t)a1, a2, v6);
  }

  id v7 = a1;
  if ([v7 count])
  {
    double v8 = [[ACCExternalAccessory alloc] initWithEndpointUUIDs:v7 primaryEndpointUUID:a2];
    if (v8)
    {
      [(id)gConnectedExternalAccessories addObject:v8];
      _postFindAppAlert(v8);
      platform_digitalAudio_eaAccessoryAttached();
      id v9 = +[ACCExternalAccessoryServer sharedServer];
      [v9 externalAccessoryArrived:v8];
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 10)
      {
        id v9 = *(id *)(gLogObjects + 72);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v9 = &_os_log_default;
        id v10 = &_os_log_default;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Could not create ACCExternalAccessory object for EA endpoints", v11, 2u);
      }
    }
  }
}

void __platform_externalAccessory_addEAAccessoryForEAEndpoints_block_invoke(id a1)
{
  if (!gConnectedExternalAccessories)
  {
    gConnectedExternalAccessories = (uint64_t)objc_alloc_init((Class)NSMutableArray);
    _objc_release_x1();
  }
}

void _postFindAppAlert(void *a1)
{
  id v1 = a1;
  BOOL v2 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = ___postFindAppAlert_block_invoke;
  block[3] = &unk_1002158C8;
  id v5 = v1;
  id v3 = v1;
  dispatch_async(v2, block);
}

CFDictionaryRef _findiAP2EndpointForConnection(uint64_t a1)
{
  CFDictionaryRef CreationTimestampMS = (const __CFDictionary *)acc_endpoint_getCreationTimestampMS(a1);
  CFDictionaryRef v2 = CreationTimestampMS;
  if (CreationTimestampMS)
  {
    CFIndex Count = CFDictionaryGetCount(CreationTimestampMS);
    if (Count < 1) {
      goto LABEL_10;
    }
    uint64_t v4 = Count;
    __chkstk_darwin(Count);
    uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    memset(v6, 170, v5);
    CFDictionaryGetKeysAndValues(v2, (const void **)v6, 0);
    uint64_t v7 = 0;
    CFDictionaryRef v2 = 0;
    unsigned int v8 = 1;
    do
    {
      CFDictionaryRef EndpointWithUUID = (const __CFDictionary *)acc_manager_getEndpointWithUUID(*(const void **)&v6[8 * v7]);
      if (EndpointWithUUID && *((_DWORD *)EndpointWithUUID + 7) == 4) {
        CFDictionaryRef v2 = EndpointWithUUID;
      }
      uint64_t v7 = v8;
      BOOL v10 = v4 <= v8++;
    }
    while (!v10);
    if (!v2)
    {
LABEL_10:
      if (gLogObjects) {
        BOOL v10 = gNumLogObjects < 10;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v12 = &_os_log_default;
        id v11 = &_os_log_default;
      }
      else
      {
        __int16 v12 = *(id *)(gLogObjects + 72);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        _findiAP2EndpointForConnection_cold_1(v12);
      }

      return 0;
    }
  }
  return v2;
}

void _sendEAPowerSourceUpdate(uint64_t a1, int a2)
{
  if (!a1)
  {
    unsigned int v8 = 0;
    goto LABEL_44;
  }
  uint64_t v4 = (void *)gWiredConnectionSessionCountDict;
  if (!gWiredConnectionSessionCountDict)
  {
    uint64_t v5 = +[NSMutableDictionary dictionary];
    uint64_t v6 = (void *)gWiredConnectionSessionCountDict;
    gWiredConnectionSessionCountDict = v5;

    uint64_t v4 = (void *)gWiredConnectionSessionCountDict;
  }
  uint64_t v7 = [v4 objectForKey:*(void *)(a1 + 8)];
  unsigned int v8 = v7;
  if (a2 == 2)
  {
    if (!v7)
    {
      unsigned int v8 = &off_1002233B0;
      goto LABEL_14;
    }
    int v9 = 1;
    goto LABEL_10;
  }
  if (a2 == 1 && v7)
  {
    int v9 = -1;
LABEL_10:
    uint64_t v10 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v7 unsignedIntValue] + v9);

    unsigned int v8 = (_UNKNOWN **)v10;
  }
  if (!v8)
  {
    char v11 = 0;
    goto LABEL_19;
  }
LABEL_14:
  if ([v8 unsignedIntValue])
  {
    if ([v8 unsignedIntValue]) {
      [(id)gWiredConnectionSessionCountDict setObject:v8 forKey:*(void *)(a1 + 8)];
    }
  }
  else
  {
    [(id)gWiredConnectionSessionCountDict removeObjectForKey:*(void *)(a1 + 8)];
  }
  char v11 = 1;
LABEL_19:
  if (gLogObjects && gNumLogObjects >= 10)
  {
    __int16 v12 = *(id *)(gLogObjects + 72);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v12 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v19 = 138412290;
    uint64_t v20 = gWiredConnectionSessionCountDict;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "gWiredConnectionSessionCountDict: %@", (uint8_t *)&v19, 0xCu);
  }

  if (a2 == 2)
  {
    if ([v8 unsignedIntValue] != 1) {
      goto LABEL_44;
    }
    goto LABEL_34;
  }
  char v14 = v11 ^ 1;
  if (a2 != 1) {
    char v14 = 1;
  }
  if ((v14 & 1) == 0 && ![v8 unsignedIntValue])
  {
LABEL_34:
    id v16 = *(const void **)(a1 + 16);
    double v15 = (uint64_t *)(a1 + 16);
    if ((platform_power_setExternalAccessoryPowerMode(v16, 1, a2 == 2) & 1) == 0)
    {
      if (gLogObjects && gNumLogObjects >= 10)
      {
        int v17 = *(id *)(gLogObjects + 72);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v17 = &_os_log_default;
        id v18 = &_os_log_default;
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        _sendEAPowerSourceUpdate_cold_1(v15, v17);
      }
    }
  }
LABEL_44:
}

void platform_externalAccessory_removeEAAccessoryForPrimaryEndpoint(void *a1)
{
  id v1 = a1;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v2 = (id)gConnectedExternalAccessories;
  id v3 = [v2 countByEnumeratingWithState:&v18 objects:v24 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v19;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v19 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void **)(*((void *)&v18 + 1) + 8 * v6);
      unsigned int v8 = objc_msgSend(v7, "primaryEndpointUUID", (void)v18);
      unsigned __int8 v9 = [v8 isEqualToString:v1];

      if (v9) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v18 objects:v24 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    id v10 = v7;

    if (!v10) {
      goto LABEL_14;
    }
    if (gLogObjects && gNumLogObjects >= 10)
    {
      char v11 = *(id *)(gLogObjects + 72);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      char v11 = &_os_log_default;
      id v14 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      platform_externalAccessory_removeEAAccessoryForPrimaryEndpoint_cold_3(v10, v11);
    }

    platform_digitalAudio_eaAccessoryDetached();
    [(id)gConnectedExternalAccessories removeObject:v10];
    __int16 v12 = +[ACCExternalAccessoryServer sharedServer];
    [v12 externalAccessoryLeft:v10];
  }
  else
  {
LABEL_9:

LABEL_14:
    if (gLogObjects && gNumLogObjects >= 10)
    {
      __int16 v12 = *(id *)(gLogObjects + 72);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v12 = &_os_log_default;
      id v13 = &_os_log_default;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v23 = (uint64_t)v1;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Couldn't find EA accessory to remove with primary endpointUUID %@", buf, 0xCu);
    }
    id v10 = 0;
  }

  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(v1);
  if (EndpointWithUUID && *EndpointWithUUID && EndpointWithUUID[1])
  {
    objc_msgSend((id)gWiredConnectionSessionCountDict, "removeObjectForKey:");
    if (gLogObjects && gNumLogObjects >= 10)
    {
      id v16 = *(id *)(gLogObjects + 72);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v16 = &_os_log_default;
      id v17 = &_os_log_default;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v23 = gWiredConnectionSessionCountDict;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "gWiredConnectionSessionCountDict: %@", buf, 0xCu);
    }
  }
}

void platform_externalAccessory_removeEAASessionCountForConnection(uint64_t a1)
{
  if (a1)
  {
    [(id)gWiredConnectionSessionCountDict removeObjectForKey:a1];
    if (gLogObjects) {
      BOOL v1 = gNumLogObjects < 10;
    }
    else {
      BOOL v1 = 1;
    }
    if (v1)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v3 = &_os_log_default;
      id v2 = &_os_log_default;
    }
    else
    {
      id v3 = *(id *)(gLogObjects + 72);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = 138412290;
      uint64_t v5 = gWiredConnectionSessionCountDict;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "gWiredConnectionSessionCountDict: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void platform_externalAccessory_removeEAAccessoryForPrimaryEndpoints(void *a1)
{
  id v1 = a1;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        platform_externalAccessory_removeEAAccessoryForPrimaryEndpoint(*(void **)(*((void *)&v6 + 1) + 8 * (void)v5));
        uint64_t v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void platform_externalAccessory_updateEAAccessoryInfoForEndpointWithUUID(void *a1)
{
  id v1 = a1;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = (id)gConnectedExternalAccessories;
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v17;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v17 != v5) {
        objc_enumerationMutation(v2);
      }
      long long v7 = *(void **)(*((void *)&v16 + 1) + 8 * v6);
      long long v8 = objc_msgSend(v7, "primaryEndpointUUID", (void)v16);
      unsigned __int8 v9 = [v8 isEqualToString:v1];

      if (v9) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    id v10 = v7;

    if (!v10) {
      goto LABEL_14;
    }
    if (gLogObjects && gNumLogObjects >= 10)
    {
      char v11 = *(id *)(gLogObjects + 72);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      char v11 = &_os_log_default;
      id v13 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v14 = [v10 primaryEndpointUUID];
      *(_DWORD *)buf = 138412290;
      id v21 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Updating accessory primaryEndpointUUID %@", buf, 0xCu);
    }
    [v10 updateAccessoryInfo];
    double v15 = +[ACCExternalAccessoryServer sharedServer];
    [v15 updateExternalAccessoryInfo:v10];
  }
  else
  {
LABEL_9:

LABEL_14:
    if (gLogObjects && gNumLogObjects >= 10)
    {
      id v10 = *(id *)(gLogObjects + 72);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v10 = &_os_log_default;
      id v12 = &_os_log_default;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v21 = v1;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Couldn't find EA accessory to update with primary endpointUUID %@", buf, 0xCu);
    }
  }
}

uint64_t platform_externalAccessory_verifyPrimaryEndpointConnected(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  id v27 = [a2 unsignedLongLongValue];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v3 = (id)gConnectedExternalAccessories;
  id v4 = [v3 countByEnumeratingWithState:&v28 objects:v36 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v29;
    *(void *)&long long v5 = 134218240;
    long long v26 = v5;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(v3);
        }
        unsigned __int8 v9 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        id v10 = objc_msgSend(v9, "primaryEndpointUUID", v26);
        unsigned int v11 = [v10 isEqualToString:a1];

        if (v11)
        {
          id v12 = [v9 EAConnectionID];
          id v13 = [v12 unsignedLongLongValue];

          uint64_t v14 = gLogObjects;
          int v15 = gNumLogObjects;
          if (gLogObjects) {
            BOOL v16 = gNumLogObjects <= 9;
          }
          else {
            BOOL v16 = 1;
          }
          int v17 = !v16;
          if (v27 == v13)
          {
            if (v17)
            {
              __int16 v22 = *(id *)(gLogObjects + 72);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              __int16 v22 = &_os_log_default;
              id v23 = &_os_log_default;
            }
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v24 = [v9 primaryEndpointUUID];
              *(_DWORD *)buf = 138412546;
              uint64_t v33 = (uint64_t)v24;
              __int16 v34 = 2048;
              id v35 = v27;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%@ primaryEndpointUUID, legacy EAConnectionID %llu is currently connected", buf, 0x16u);
            }
            uint64_t v21 = 1;
            goto LABEL_34;
          }
          if (v17)
          {
            long long v18 = *(id *)(gLogObjects + 72);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v26;
              uint64_t v33 = v14;
              __int16 v34 = 1024;
              LODWORD(v35) = v15;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
            id v19 = &_os_log_default;
            long long v18 = &_os_log_default;
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            long long v20 = [v9 primaryEndpointUUID];
            *(_DWORD *)buf = 138412546;
            uint64_t v33 = (uint64_t)v20;
            __int16 v34 = 2048;
            id v35 = v13;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "found %@ primaryEndpointUUID, but legacy EAConnectionID that is currently connected is %llu", buf, 0x16u);
          }
        }
      }
      id v6 = [v3 countByEnumeratingWithState:&v28 objects:v36 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
  uint64_t v21 = 0;
LABEL_34:

  return v21;
}

id platform_externalAccesory_legacyConnectionUUIDForPrimaryEndpointUUID(void *a1)
{
  id v1 = a1;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = (id)gConnectedExternalAccessories;
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        uint64_t v7 = objc_msgSend(v6, "primaryEndpointUUID", (void)v11);
        unsigned int v8 = [v7 isEqualToString:v1];

        if (v8)
        {
          unsigned __int8 v9 = [v6 EAConnectionID];
          id v3 = [v9 unsignedIntValue];

          goto LABEL_11;
        }
      }
      id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v3;
}

id platform_externalAccessory_copyVehicleInformationForEndpointUUID(uint64_t a1)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v2 = (id)gConnectedExternalAccessories;
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        unsigned int v8 = objc_msgSend(v7, "primaryEndpointUUID", (void)v14);
        unsigned int v9 = [v8 isEqualToString:a1];

        if (v9)
        {
          long long v11 = [v7 EAAccessoryDictionary];
          long long v12 = [v11 objectForKey:kACCVehicleInfoLegacyInitialDataKey];
          id v10 = [v12 copy];

          goto LABEL_11;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  id v10 = 0;
LABEL_11:

  return v10;
}

id platform_externalAccessory_copyEAProtocolsForEndpointUUID(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = (id)gConnectedExternalAccessories;
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        unsigned int v8 = objc_msgSend(v7, "primaryEndpointUUID", (void)v12);
        unsigned int v9 = [v8 isEqualToString:a1];

        if (v9)
        {
          id v10 = [v7 copyExternalAccessoryProtocols];
          goto LABEL_11;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  id v10 = 0;
LABEL_11:

  return v10;
}

id platform_externalAccessory_retrieveMutableEADataFromAppForSessionUUID(uint64_t a1, uint64_t a2)
{
  id v4 = +[ACCExternalAccessorySessionManager sharedManager];
  id v5 = [v4 returnAppToAccessoryDataForSession:a1 maxBufferSize:a2];

  return v5;
}

void platform_externalAccessory_stopIncomingDataNotificationsForEASessionUUID(uint64_t a1)
{
  id v2 = +[ACCExternalAccessorySessionManager sharedManager];
  [v2 stopIncomingDataNotificationsForEASessionUUID:a1];
}

void platform_externalAccessory_startIncomingDataNotificationsForEASessionUUID(uint64_t a1)
{
  id v2 = +[ACCExternalAccessorySessionManager sharedManager];
  [v2 startIncomingDataNotificationsForEASessionUUID:a1];
}

id platform_externalAccessory_handleIncomingEADataFromAccessoryForSessionID(uint64_t a1, uint64_t a2)
{
  id v4 = +[ACCExternalAccessorySessionManager sharedManager];
  id v5 = [v4 handleIncomingExternalAccessoryData:a2 forSessionID:a1];

  return v5;
}

id platform_externalAccessory_handleIncomingEADataFromAccessoryForEndpointUUID(const void *a1, void *a2)
{
  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  id v5 = +[ACCExternalAccessorySessionManager sharedManager];
  id v6 = [v5 eaSessionUUIDForEndpointUUID:a1];

  acc_platform_packetLogging_logEAData((uint64_t)EndpointWithUUID, (uint64_t)v6, a2, 1);
  uint64_t v7 = +[ACCExternalAccessorySessionManager sharedManager];
  id v8 = [v7 handleIncomingExternalAccessoryData:a2 forEndpointUUID:a1];

  return v8;
}

id platform_externalAccessory_copyEndpointUUIDForEASessionID(uint64_t a1)
{
  id v2 = +[ACCExternalAccessorySessionManager sharedManager];
  id v3 = [v2 eaSessionUUIDForSessionID:a1];
  id v4 = [v3 copy];

  if (a1) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }

  return v5;
}

id platform_externalAccessory_accessoryCloseExternalAccessorySession(uint64_t a1)
{
  id v2 = +[ACCExternalAccessorySessionManager sharedManager];
  id v3 = [v2 eaSessionUUIDForSessionID:a1];

  id v4 = +[ACCExternalAccessorySessionManager sharedManager];
  id v5 = [v4 accessoryCloseSessionforEASessionID:a1];

  if (v5) {
    _platform_externalAccessory_EASessionClosed(v3);
  }

  return v5;
}

void _platform_externalAccessory_EASessionClosed(void *a1)
{
  id v1 = a1;
  if (v1 && gWiredEASessionUUIDs && [(id)gWiredEASessionUUIDs containsObject:v1])
  {
    [(id)gWiredEASessionUUIDs removeObject:v1];
    if (gLogObjects && gNumLogObjects >= 10)
    {
      id v2 = *(id *)(gLogObjects + 72);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v2 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v6 = 134217984;
      id v7 = [(id)gWiredEASessionUUIDs count];
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "after close EA session, gWiredEASessionUUIDs count = %lu", (uint8_t *)&v6, 0xCu);
    }

    if (![(id)gWiredEASessionUUIDs count])
    {
      if (gLogObjects && gNumLogObjects >= 10)
      {
        id v4 = *(id *)(gLogObjects + 72);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v4 = &_os_log_default;
        id v5 = &_os_log_default;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v6) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Have no more EA sessions requiring sleep assertion", (uint8_t *)&v6, 2u);
      }

      platform_sleepAssertion_destroyEA();
    }
  }
}

id platform_externalAccessory_clientHasOpenEASession(uint64_t a1)
{
  id v2 = +[ACCExternalAccessorySessionManager sharedManager];
  id v3 = [v2 eaClientHasOpenEASession:a1];

  return v3;
}

void platform_externalAccessory_openExternalAccessorySession(__CFString *a1, void *a2)
{
  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  CFStringRef Copy = (__CFString *)CFStringCreateCopy(kCFAllocatorDefault, a1);
  acc_manager_protectedEndpointCall(a1, 0, 0, &__block_literal_global_15);
  uint64_t v6 = kACCExternalAccessorySessionUUIDKey;
  id v7 = a2;
  [v7 objectForKey:v6];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _DWORD v16[2] = __platform_externalAccessory_openExternalAccessorySession_block_invoke_2;
  v16[3] = &unk_1002177F0;
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  id v17 = v8;
  acc_manager_protectedEndpointCall(a1, 0, 0, v16);
  if (gLogObjects && gNumLogObjects >= 10)
  {
    unsigned int v9 = *(id *)(gLogObjects + 72);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v9 = &_os_log_default;
    id v10 = &_os_log_default;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v19 = Copy;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Opening EA session for endpoint %@...", buf, 0xCu);
  }

  acc_platform_packetLogging_logEvent((uint64_t)EndpointWithUUID, "OPEN_EA_SESSION", (uint64_t)"Open EA sessionUUID %@", v11, v12, v13, v14, v15, (uint64_t)v8);
  accFeatureHandlers_invokeHandler(a1, 26, (uint64_t)v7);
}

BOOL __platform_externalAccessory_openExternalAccessorySession_block_invoke(id a1, ACCEndpoint_s *a2, void *a3)
{
  return 1;
}

void _handleEAPowerSourceChange(uint64_t *a1, int a2)
{
  if (a1)
  {
    id v3 = a1;
    if ((acc_endpoint_isWireless(a1) & 1) == 0)
    {
      int Protocol = acc_endpoint_getProtocol((uint64_t)v3);
      if (Protocol == 4 || Protocol == 6 && (id v3 = (uint64_t *)_findiAP2EndpointForConnection(*v3)) != 0)
      {
        _sendEAPowerSourceUpdate((uint64_t)v3, a2);
      }
    }
  }
}

uint64_t __platform_externalAccessory_openExternalAccessorySession_block_invoke_2(uint64_t a1, int *a2)
{
  id v3 = *(id *)(a1 + 32);
  if (_platform_externalAccessory_EASessionOpened_onceToken != -1) {
    dispatch_once(&_platform_externalAccessory_EASessionOpened_onceToken, &__block_literal_global_69);
  }
  if (platform_sleepAssertion_connectionTypeRequiresAssertion(*(_DWORD *)(*(void *)a2 + 8))
    && platform_sleepAssertion_endpointProtocolAllowsAssertion(a2[7]))
  {
    [(id)gWiredEASessionUUIDs addObject:v3];
    if (gLogObjects && gNumLogObjects >= 10)
    {
      id v4 = *(id *)(gLogObjects + 72);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v4 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v9 = 134217984;
      id v10 = [(id)gWiredEASessionUUIDs count];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "after open EA session, gWiredEASessionUUIDs count = %lu", (uint8_t *)&v9, 0xCu);
    }

    if ([(id)gWiredEASessionUUIDs count] == (id)1)
    {
      if (gLogObjects && gNumLogObjects >= 10)
      {
        uint64_t v6 = *(id *)(gLogObjects + 72);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v6 = &_os_log_default;
        id v7 = &_os_log_default;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v9) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Have first EA session requiring sleep assertion", (uint8_t *)&v9, 2u);
      }

      platform_sleepAssertion_createEA();
    }
  }

  return 1;
}

void platform_externalAccessory_notifyClientsOOBBTPairingCompletionStatus(void *a1, uint64_t a2, unsigned int a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 10;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v8 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  else
  {
    id v8 = *(id *)(gLogObjects + 72);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v40 = "platform_externalAccessory_notifyClientsOOBBTPairingCompletionStatus";
    __int16 v41 = 2112;
    *(void *)uint64_t v42 = a1;
    *(_WORD *)&v42[8] = 2112;
    *(void *)&v42[10] = a2;
    __int16 v43 = 1024;
    LODWORD(v44) = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s protocolEndpointUUID %@ macAddr %@ result %u", buf, 0x26u);
  }
  uint64_t v34 = a2;
  unsigned int v33 = a3;

  id v9 = a1;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v10 = (id)gConnectedExternalAccessories;
  id v11 = [v10 countByEnumeratingWithState:&v35 objects:v45 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v36;
LABEL_13:
    uint64_t v14 = 0;
    while (1)
    {
      if (*(void *)v36 != v13) {
        objc_enumerationMutation(v10);
      }
      uint64_t v15 = *(void **)(*((void *)&v35 + 1) + 8 * v14);
      long long v16 = [v15 primaryEndpointUUID];
      unsigned int v17 = [v16 isEqualToString:v9];

      if (v17) {
        break;
      }
      if (v12 == (id)++v14)
      {
        id v12 = [v10 countByEnumeratingWithState:&v35 objects:v45 count:16];
        if (v12) {
          goto LABEL_13;
        }
        goto LABEL_19;
      }
    }
    if (gLogObjects && gNumLogObjects >= 10)
    {
      long long v18 = *(id *)(gLogObjects + 72);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      long long v18 = &_os_log_default;
      id v19 = &_os_log_default;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      long long v20 = [v15 primaryEndpointUUID];
      *(_DWORD *)buf = 138412546;
      uint64_t v40 = v20;
      __int16 v41 = 2112;
      *(void *)uint64_t v42 = v9;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "eaAccessory.primaryEndpointUUID %@ matches protocolEndpointUUID %@", buf, 0x16u);
    }
    id v21 = v15;

    if (v21)
    {
      unsigned int v22 = platform_externalAccesory_legacyConnectionUUIDForPrimaryEndpointUUID(v9);
      if (gLogObjects && gNumLogObjects >= 46)
      {
        id v23 = *(id *)(gLogObjects + 360);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v23 = &_os_log_default;
        id v26 = &_os_log_default;
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v40 = "platform_externalAccessory_notifyClientsOOBBTPairingCompletionStatus";
        __int16 v41 = 1024;
        *(_DWORD *)uint64_t v42 = v22;
        *(_WORD *)&v42[4] = 2112;
        *(void *)&v42[6] = v9;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%s connectionID %u for protocolEndpointUUID %@", buf, 0x1Cu);
      }

      if (v34)
      {
        __int16 v24 = +[NSMutableDictionary dictionary];
        id v27 = +[NSNumber numberWithUnsignedInt:v33];
        [v24 setObject:v27 forKey:@"IAPAppAccessoryOOBBTPairingCompletionStatusKey"];

        long long v28 = +[NSNumber numberWithUnsignedLongLong:v22];
        [v24 setObject:v28 forKey:@"IAPAppAccessoryOOBBTPairingConnectionIDKey"];

        [v24 setObject:v34 forKey:@"IAPAppAccessoryOOBBTPairingCompletionMACAddressKey"];
        if (gLogObjects && gNumLogObjects >= 10)
        {
          long long v29 = *(id *)(gLogObjects + 72);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          long long v29 = &_os_log_default;
          id v30 = &_os_log_default;
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          uint64_t v40 = "platform_externalAccessory_notifyClientsOOBBTPairingCompletionStatus";
          __int16 v41 = 2112;
          *(void *)uint64_t v42 = @"IAPAppAccessoryOOBBTPairingCompletionNotification";
          *(_WORD *)&v42[8] = 2112;
          *(void *)&v42[10] = v24;
          __int16 v43 = 2112;
          id v44 = v21;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%s sending to clients notification %@ with payload %@ about accessory on %@", buf, 0x2Au);
        }

        long long v31 = +[ACCExternalAccessoryServer sharedServer];
        [v31 sendToClientsNotification:@"IAPAppAccessoryOOBBTPairingCompletionNotification" withPayload:v24 aboutAccessory:v21];
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 10)
        {
          __int16 v24 = *(id *)(gLogObjects + 72);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          __int16 v24 = &_os_log_default;
          id v32 = &_os_log_default;
        }
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
          platform_externalAccessory_notifyClientsOOBBTPairingCompletionStatus_cold_3(v33, v22, v24);
        }
      }
      goto LABEL_64;
    }
  }
  else
  {
LABEL_19:
  }
  if (gLogObjects && gNumLogObjects >= 10)
  {
    __int16 v24 = *(id *)(gLogObjects + 72);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v24 = &_os_log_default;
    id v25 = &_os_log_default;
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
    platform_externalAccessory_notifyClientsOOBBTPairingCompletionStatus_cold_1((uint64_t)v9, v24);
  }
  id v21 = 0;
LABEL_64:
}

void platform_externalAccessory_closeExternalAccessorySession(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 objectForKey:kACCExternalAccessorySessionUUIDKey];
  _platform_externalAccessory_EASessionClosed(v4);
  uint64_t v15 = 0;
  long long v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = __platform_externalAccessory_closeExternalAccessorySession_block_invoke;
  v6[3] = &unk_100217818;
  id v8 = &v11;
  id v5 = v4;
  id v9 = &v15;
  id v10 = a1;
  id v7 = v5;
  acc_manager_protectedEndpointCall(a1, 0, 0, v6);
  if (*((unsigned char *)v16 + 24)) {
    accFeatureHandlers_invokeHandler(a1, 27, (uint64_t)v3);
  }
  if (*((unsigned char *)v12 + 24)) {
    acc_manager_protectedEndpointCall(a1, 0, 0, &__block_literal_global_22);
  }

  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
}

void sub_100093B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __platform_externalAccessory_closeExternalAccessorySession_block_invoke(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
  acc_platform_packetLogging_logEvent(a2, "CLOSE_EA_SESSION", (uint64_t)"Close EA sessionUUID %@", a4, a5, a6, a7, a8, a1[4]);
  int Protocol = acc_endpoint_getProtocol(a2);
  uint64_t v11 = *(void *)(a2 + 56);
  if (Protocol == 4)
  {
    if (v11)
    {
      BOOL isInitialized = iap2_endpoint_isInitialized(v11);
      if (gLogObjects) {
        BOOL v13 = gNumLogObjects <= 9;
      }
      else {
        BOOL v13 = 1;
      }
      int v14 = !v13;
      if (isInitialized)
      {
        if (v14)
        {
          uint64_t v15 = *(id *)(gLogObjects + 72);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v15 = &_os_log_default;
          id v21 = &_os_log_default;
        }
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_31;
        }
        uint64_t v22 = a1[7];
        *(_DWORD *)buf = 138412290;
        uint64_t v26 = v22;
        long long v20 = "Closing EA session for iAP2 endpoint %@...";
LABEL_30:
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
LABEL_31:

        *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
        return 1;
      }
      if (v14)
      {
        char v18 = *(id *)(gLogObjects + 72);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        char v18 = &_os_log_default;
        id v23 = &_os_log_default;
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Trying to close EA session for uninitialized iAP2 endpoint", buf, 2u);
      }
    }
  }
  else if (v11)
  {
    if (gLogObjects) {
      BOOL v16 = gNumLogObjects < 10;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v15 = &_os_log_default;
      id v17 = &_os_log_default;
    }
    else
    {
      uint64_t v15 = *(id *)(gLogObjects + 72);
    }
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    uint64_t v19 = a1[7];
    *(_DWORD *)buf = 138412290;
    uint64_t v26 = v19;
    long long v20 = "Closing EA session for endpoint %@...";
    goto LABEL_30;
  }
  return 1;
}

BOOL __platform_externalAccessory_closeExternalAccessorySession_block_invoke_20(id a1, ACCEndpoint_s *a2, void *a3)
{
  return 1;
}

BOOL platform_externalAccessory_openSocketFromAccessoryToApp(const void *a1, void *a2)
{
  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  int Protocol = acc_endpoint_getProtocol((uint64_t)EndpointWithUUID);
  if (Protocol == 6)
  {
    uint64_t v5 = kACCExternalAccessoryProtocolEndpointUUIDKey;
    id v6 = a2;
    id v7 = [v6 objectForKey:v5];
    if (gLogObjects) {
      BOOL v8 = gNumLogObjects < 10;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v10 = &_os_log_default;
      id v9 = &_os_log_default;
    }
    else
    {
      id v10 = *(id *)(gLogObjects + 72);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Opening socket from Accessory to App for EA Native USB protocol endpointUUID %@", buf, 0xCu);
    }

    v19[0] = v7;
    uint64_t v11 = objc_msgSend(v6, "objectForKey:", kACCExternalAccessoryProtocolNameKey, ACCTransportEANative_EndpointUUID, ACCTransportEANative_ProtocolName);
    v19[1] = v11;
    _DWORD v18[2] = ACCTransportEANative_ProtocolNumber;
    id v12 = [v6 objectForKey:kACCExternalAccessoryProtocolIndexKey];
    _DWORD v19[2] = v12;
    v18[3] = ACCTransportEANative_LegacyConnectionID;
    BOOL v13 = [v6 objectForKey:kACCExternalAccessoryLegacyConnectionIDKey];
    v19[3] = v13;
    v18[4] = ACCTransportEANative_EASessionUUID;
    int v14 = [v6 objectForKey:kACCExternalAccessorySessionUUIDKey];

    v19[4] = v14;
    uint64_t v15 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:5];

    BOOL v16 = +[NSNotificationCenter defaultCenter];
    [v16 postNotificationName:ACCTransportEANative_OpenSocketFromAccessoryToAppNotification object:0 userInfo:v15];
  }
  return Protocol == 6;
}

BOOL platform_externalAccessory_openSocketFromAppToAccessory(const void *a1, void *a2)
{
  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  int Protocol = acc_endpoint_getProtocol((uint64_t)EndpointWithUUID);
  if (Protocol == 6)
  {
    uint64_t v5 = kACCExternalAccessoryProtocolEndpointUUIDKey;
    id v6 = a2;
    id v7 = [v6 objectForKey:v5];
    if (gLogObjects) {
      BOOL v8 = gNumLogObjects < 10;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v10 = &_os_log_default;
      id v9 = &_os_log_default;
    }
    else
    {
      id v10 = *(id *)(gLogObjects + 72);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Opening socket from App to Accessory for EA Native USB protocol endpointUUID %@", buf, 0xCu);
    }

    v19[0] = v7;
    uint64_t v11 = objc_msgSend(v6, "objectForKey:", kACCExternalAccessoryProtocolNameKey, ACCTransportEANative_EndpointUUID, ACCTransportEANative_ProtocolName);
    v19[1] = v11;
    _DWORD v18[2] = ACCTransportEANative_ProtocolNumber;
    id v12 = [v6 objectForKey:kACCExternalAccessoryProtocolIndexKey];
    _DWORD v19[2] = v12;
    v18[3] = ACCTransportEANative_LegacyConnectionID;
    BOOL v13 = [v6 objectForKey:kACCExternalAccessoryLegacyConnectionIDKey];
    v19[3] = v13;
    v18[4] = ACCTransportEANative_EASessionUUID;
    int v14 = [v6 objectForKey:kACCExternalAccessorySessionUUIDKey];

    v19[4] = v14;
    uint64_t v15 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:5];

    BOOL v16 = +[NSNotificationCenter defaultCenter];
    [v16 postNotificationName:ACCTransportEANative_OpenSocketFromAppToAccessoryNotification object:0 userInfo:v15];
  }
  return Protocol == 6;
}

uint64_t platform_externalAccessory_sendOutgoingEADataFromClient(const __CFString *a1, void *a2)
{
  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  uint64_t v5 = (uint64_t)EndpointWithUUID;
  if (!EndpointWithUUID) {
    return v5;
  }
  if (EndpointWithUUID[120]) {
    return 0;
  }
  if (acc_endpoint_getProtocol((uint64_t)EndpointWithUUID) != 4
    || (uint64_t v6 = *(void *)(v5 + 56)) == 0
    || !iap2_endpoint_isInitialized(v6))
  {
    if (acc_endpoint_getProtocol(v5) == 5 || acc_endpoint_getProtocol(v5) == 7)
    {
      id v8 = a2;
      CFStringRef Copy = (__CFString *)CFStringCreateCopy(kCFAllocatorDefault, a1);
      id v10 = [v8 objectForKey:kACCExternalAccessorySessionUUIDKey];
      if (gLogObjects && gNumLogObjects >= 10)
      {
        uint64_t v11 = *(id *)(gLogObjects + 72);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v11 = &_os_log_default;
        id v12 = &_os_log_default;
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 138412290;
        uint64_t v15 = Copy;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending outgoing EA data to endpointUUID %@", (uint8_t *)&v14, 0xCu);
      }

      BOOL v13 = [v8 objectForKey:kACCExternalAccessorySessionDataKey];
      acc_platform_packetLogging_logEAData(v5, (uint64_t)v10, v13, 0);
      uint64_t v5 = acc_endpoint_sendOutgoingData(v5, (const __CFData *)v13);

      return v5;
    }
    return 0;
  }

  return accFeatureHandlers_invokeHandler(a1, 28, (uint64_t)a2);
}

uint64_t platform_externalAccessory_outgoingEADataFromClientAvailable(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  if (!EndpointWithUUID) {
    return 0;
  }
  uint64_t v5 = EndpointWithUUID;
  if (EndpointWithUUID[120] || acc_endpoint_getProtocol((uint64_t)EndpointWithUUID) != 4) {
    return 0;
  }
  uint64_t v6 = *((void *)v5 + 7);
  if (!v6 || !iap2_endpoint_isInitialized(v6))
  {
    if (gLogObjects && gNumLogObjects >= 10)
    {
      id v8 = *(id *)(gLogObjects + 72);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v8 = &_os_log_default;
      id v9 = &_os_log_default;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412546;
      uint64_t v11 = a1;
      __int16 v12 = 2080;
      BOOL v13 = "NO";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Skip sending outgoingEADataFromClientAvailable to endpointUUID %@, iAP2_Initialized=%s", (uint8_t *)&v10, 0x16u);
    }

    return 0;
  }

  return accFeatureHandlers_invokeHandler(a1, 29, a2);
}

BOOL _isEAProtocolContainedInAllowList(void *a1)
{
  uint64_t v5 = 0;
  id v1 = a1;
  id v2 = +[NSRegularExpression regularExpressionWithPattern:@"com.apple.accessory.updater.*" options:1 error:&v5];
  id v3 = objc_msgSend(v2, "numberOfMatchesInString:options:range:", v1, 0, 0, objc_msgSend(v1, "length"));

  return v3 != 0;
}

void ___postFindAppAlert_block_invoke(uint64_t a1)
{
  if (!platform_system_isApplicationVisible(@"com.apple.AppStore")
    || (platform_systemInfo_isATV() & 1) != 0)
  {
    return;
  }
  id v2 = (void *)CFPreferencesCopyAppValue(@"OptionalSDKProtocolsShownKey", @"com.apple.iapd");
  id v3 = objc_alloc_init((Class)NSMutableArray);
  id v4 = [*(id *)(a1 + 32) EAProtocolsAppMatching];
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v51 objects:v56 count:16];
  if (!v5) {
    goto LABEL_39;
  }
  id v6 = v5;
  uint64_t v40 = a1;
  id v7 = v3;
  char v8 = 0;
  char v42 = 0;
  uint64_t v9 = *(void *)v52;
  do
  {
    for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v52 != v9) {
        objc_enumerationMutation(v4);
      }
      uint64_t v11 = *(void **)(*((void *)&v51 + 1) + 8 * i);
      if (!_isEAProtocolContainedInAllowList(v11))
      {
        __int16 v12 = [v11 lowercaseString];
        if (v2 && (CFTypeID v13 = CFGetTypeID(v2), v13 != CFArrayGetTypeID()))
        {
LABEL_14:
          int v14 = (void *)platform_system_copyInstalledApplicationsForExternalAccessoryProtocol((uint64_t)v11);
          uint64_t v15 = v14;
          if (!v14 || ![v14 count]) {
            char v42 = 1;
          }
        }
        else if (([v2 containsObject:v12] & 1) == 0 {
               && ([v7 containsObject:v12] & 1) == 0)
        }
        {
          [v7 addObject:v12];
          char v8 = 1;
          goto LABEL_14;
        }

        continue;
      }
    }
    id v6 = [v4 countByEnumeratingWithState:&v51 objects:v56 count:16];
  }
  while (v6);
  if (v8)
  {
    id v16 = +[NSMutableArray arrayWithArray:v2];
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    id v17 = v7;
    id v18 = [v17 countByEnumeratingWithState:&v47 objects:v55 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v48;
      do
      {
        for (CFIndex j = 0; j != v19; CFIndex j = (char *)j + 1)
        {
          if (*(void *)v48 != v20) {
            objc_enumerationMutation(v17);
          }
          [v16 addObject:*(void *)(*((void *)&v47 + 1) + 8 * (void)j)];
        }
        id v19 = [v17 countByEnumeratingWithState:&v47 objects:v55 count:16];
      }
      while (v19);
    }

    uint64_t v22 = v40;
    if (v42)
    {
      id v3 = v7;
      goto LABEL_33;
    }
    _updatePlistForSeenEAProtocols(v16);
    id v3 = v7;
LABEL_38:
  }
  else
  {
    id v3 = v7;
    uint64_t v22 = v40;
    if (v42)
    {
      id v16 = 0;
LABEL_33:
      id v23 = [*(id *)(v22 + 32) EAName];
      __int16 v24 = v23;
      if (v23)
      {
        id v43 = v23;
      }
      else
      {
        id v25 = acc_strings_bundle();
        id v43 = [v25 localizedStringForKey:@"Unknown" value:&stru_10021CEF8 table:0];
      }
      uint64_t v26 = [*(id *)(v22 + 32) primaryEndpointUUID];
      __int16 v41 = acc_manager_copyConnectionUUIDForEndpointUUID(v26);

      id v27 = objc_alloc_init(ACCUserNotification);
      [(ACCUserNotification *)v27 setType:1];
      long long v28 = acc_strings_bundle();
      long long v29 = [v28 localizedStringForKey:@"App Not Installed" value:&stru_10021CEF8 table:0];
      [(ACCUserNotification *)v27 setTitle:v29];

      id v30 = acc_strings_bundle();
      long long v31 = [v30 localizedStringForKey:@"The accessory “%@” uses an app you do not have installed. Would you like to get it from the App Store?" value:&stru_10021CEF8 table:0];
      id v32 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v31, v43);
      [(ACCUserNotification *)v27 setMessage:v32];

      unsigned int v33 = acc_strings_bundle();
      uint64_t v34 = [v33 localizedStringForKey:@"Ignore" value:&stru_10021CEF8 table:0];
      [(ACCUserNotification *)v27 setDefaultButtonName:v34];

      long long v35 = acc_strings_bundle();
      long long v36 = [v35 localizedStringForKey:@"App Store" value:&stru_10021CEF8 table:0];
      [(ACCUserNotification *)v27 setOtherButtonName:v36];

      [(ACCUserNotification *)v27 setIsModal:0];
      long long v37 = [*(id *)(v22 + 32) primaryEndpointUUID];
      long long v38 = acc_userNotifications_generateIdentifier(@"ea-app-launch", (uint64_t)v37);
      [(ACCUserNotification *)v27 setIdentifier:v38];

      [(ACCUserNotification *)v27 setGroupIdentifier:v41];
      id v39 = +[ACCUserNotificationManager sharedManager];
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472;
      v44[2] = ___postFindAppAlert_block_invoke_2;
      v44[3] = &unk_100217860;
      id v45 = v16;
      id v46 = *(id *)(v22 + 32);
      id v16 = v16;
      [v39 presentNotification:v27 completionHandler:v44];

      goto LABEL_38;
    }
  }
LABEL_39:
  if (v2) {
    CFRelease(v2);
  }
}

const void *_updatePlistForSeenEAProtocols(const void *value)
{
  if (value)
  {
    CFPreferencesSetAppValue(@"OptionalSDKProtocolsShownKey", value, @"com.apple.iapd");
    return (const void *)CFPreferencesSynchronize(@"com.apple.iapd", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  }
  return value;
}

void ___postFindAppAlert_block_invoke_2(uint64_t a1, int a2)
{
  _updatePlistForSeenEAProtocols(*(const void **)(a1 + 32));
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects <= 9;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = !v4;
  if (a2)
  {
    if (v5)
    {
      id v6 = *(id *)(gLogObjects + 72);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v6 = &_os_log_default;
      id v8 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = [*(id *)(a1 + 40) EAName];
      *(_DWORD *)buf = 138412290;
      id v63 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "User wants to find app for accessory %@", buf, 0xCu);
    }
    id v50 = *(id *)(a1 + 40);
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    id obj = [v50 copyExternalAccessoryProtocols];
    id v10 = [obj countByEnumeratingWithState:&v54 objects:buf count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v55;
      CFTypeID v13 = &stru_10021CEF8;
      uint64_t v14 = 1;
      do
      {
        uint64_t v15 = 0;
        id v16 = v13;
        do
        {
          if (*(void *)v55 != v12) {
            objc_enumerationMutation(obj);
          }
          id v17 = +[NSString stringWithFormat:@"&id%d=%@", (char *)v15 + v14, *(void *)(*((void *)&v54 + 1) + 8 * (void)v15)];
          id v18 = +[NSCharacterSet URLPathAllowedCharacterSet];
          id v19 = [v17 stringByAddingPercentEncodingWithAllowedCharacters:v18];

          CFTypeID v13 = [(__CFString *)v16 stringByAppendingString:v19];

          uint64_t v15 = (char *)v15 + 1;
          id v16 = v13;
        }
        while (v11 != v15);
        id v11 = [obj countByEnumeratingWithState:&v54 objects:buf count:16];
        uint64_t v14 = (v14 + v15);
      }
      while (v11);
    }
    else
    {
      CFTypeID v13 = &stru_10021CEF8;
    }

    uint64_t v20 = [v50 EAFirmwareRevisionActive];
    uint64_t v21 = [v50 EAFirmwareRevisionPending];
    if (v21)
    {
      uint64_t v22 = (void *)v21;
      id v23 = [v50 EAFirmwareRevisionPending];
      id v24 = [v23 length];

      if (v24)
      {
        uint64_t v25 = [v50 EAFirmwareRevisionPending];

        uint64_t v20 = (void *)v25;
      }
    }
    long long v49 = [v50 EAPreferredApp];
    long long v48 = +[NSCharacterSet URLPathAllowedCharacterSet];
    long long v52 = [v49 stringByAddingPercentEncodingWithAllowedCharacters:v48];
    long long v47 = [v50 EAName];
    id v46 = +[NSCharacterSet URLPathAllowedCharacterSet];
    __int16 v41 = [v47 stringByAddingPercentEncodingWithAllowedCharacters:v46];
    id v45 = [v50 EAManufacturer];
    id v44 = +[NSCharacterSet URLPathAllowedCharacterSet];
    long long v51 = [v45 stringByAddingPercentEncodingWithAllowedCharacters:v44];
    id v43 = [v50 EAModelNumber];
    char v42 = +[NSCharacterSet URLPathAllowedCharacterSet];
    id v39 = [v43 stringByAddingPercentEncodingWithAllowedCharacters:v42];
    uint64_t v40 = +[NSCharacterSet URLPathAllowedCharacterSet];
    long long v38 = v20;
    uint64_t v26 = [v20 stringByAddingPercentEncodingWithAllowedCharacters:v40];
    id v27 = [v50 EAHardwareRevision];
    long long v28 = +[NSCharacterSet URLPathAllowedCharacterSet];
    long long v29 = [v27 stringByAddingPercentEncodingWithAllowedCharacters:v28];
    id v30 = [v50 EASerialNumber];
    long long v31 = +[NSCharacterSet URLPathAllowedCharacterSet];
    id v32 = [v30 stringByAddingPercentEncodingWithAllowedCharacters:v31];
    unsigned int v33 = +[NSString stringWithFormat:@"itms-apps://?action=accessory-lookup%@&bid=%@&accessoryName=%@&manufacturer=%@&modelNumber=%@&firmwareVersion=%@&hardwareVersion=%@&serialNumber=%@", v13, v52, v41, v51, v39, v26, v29, v32];

    uint64_t v34 = +[NSURL URLWithString:v33];
    if (gLogObjects && gNumLogObjects >= 10)
    {
      long long v35 = *(id *)(gLogObjects + 72);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      long long v35 = &_os_log_default;
      id v36 = &_os_log_default;
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v58 = 138412546;
      id v59 = v34;
      __int16 v60 = 2112;
      __int16 v61 = v33;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "opening app store URL = %@ (%@)", v58, 0x16u);
    }

    platform_system_launchURL((uint64_t)v33);
  }
  else
  {
    if (v5)
    {
      id v7 = *(id *)(gLogObjects + 72);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v7 = &_os_log_default;
      id v37 = &_os_log_default;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "User did not approve Find App for Accessory - ignoring", buf, 2u);
    }
  }
}

uint64_t platform_auth_verifyPublicCertificate()
{
  return _MFAAVerifyPublicCertificate();
}

BOOL platform_auth_verifyBAACertificateChain(const void *a1, const void *a2)
{
  return platform_auth_verifyCertificateChain(a1, a2, 0);
}

BOOL platform_auth_verifyCertificateChain(const void *a1, const void *a2, unsigned int a3)
{
  if (a3 >= 5) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = a3;
  }
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (!Mutable) {
    return 0;
  }
  id v7 = Mutable;
  CFArrayAppendValue(Mutable, a1);
  if (a2) {
    CFArrayAppendValue(v7, a2);
  }
  id v8 = +[MFAACertificateManager sharedManager];
  unsigned int v9 = [v8 validateCertificateChain:v7 type:v5 realtime:1 error:0];

  BOOL v10 = v9 == 1;
  CFRelease(v7);
  return v10;
}

uint64_t platform_auth_verifyCertificateSerialNumber()
{
  return _MFAAVerifyCertificateSerialNumber();
}

id platform_auth_verifyNonceSignature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return platform_auth_verifyNonceSignatureForType(a1, a2, a3, 0xFFFFFFFF);
}

id platform_auth_verifyNonceSignatureForType(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (acc_userDefaults_BOOLForKey(@"ForceAuthFail")) {
    return 0;
  }
  if (a4 >= 5) {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v9 = a4;
  }
  BOOL v10 = +[MFAACertificateManager sharedManager];
  id v11 = [v10 copyParsedCertificateChainInfo:a1 assumeType:v9];
  if (v11)
  {
    id v8 = [v10 verifyNonceSignature:v11 nonce:a2 signature:a3];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_auth_verifyNonceSignatureForType_cold_1();
    }
    id v8 = 0;
  }

  return v8;
}

uint64_t platform_auth_createRandomNonce()
{
  return _MFAACreateRandomNonce();
}

uint64_t platform_auth_certificateAuthVersionNumber()
{
  return MFAACertificateAuthVersionNumber();
}

uint64_t platform_auth_deallocCertificateCache()
{
  return _MFAADeallocCertificateCache();
}

uint64_t platform_auth_addCertDataEntryToCacheForSerialNumber()
{
  return _MFAAAddCertDataEntryToCacheForSerialNumber();
}

uint64_t platform_auth_removeCertDataEntryFromCache()
{
  return _MFAARemoveCertDataEntryFromCache();
}

uint64_t platform_auth_createSerialNumberStringFromData()
{
  return _MFAACreateSerialNumberStringFromData();
}

uint64_t platform_auth_createCapsFromAuthCert()
{
  return _MFAACreateCapsFromAuthCert();
}

uint64_t platform_auth_deallocAuthCertCaps()
{
  return _MFAADeallocAuthCertCaps();
}

id platform_auth_isAppleAccessory(uint64_t a1)
{
  id result = acc_userDefaultsIapd_copyIntegerForKey(@"PretendAccessoryType");
  if (result != (id)1)
  {
    if (result == (id)2)
    {
      return 0;
    }
    else
    {
      return (id)_MFAAIsAppleAccessory(a1);
    }
  }
  return result;
}

uint64_t platform_auth_createDeviceDataCertificate()
{
  return _MFAACreateDeviceDataCertificate();
}

uint64_t platform_auth_createDeviceNonceSignature()
{
  return _MFAACreateDeviceNonceSignature();
}

uint64_t platform_auth_isInternalBuild()
{
  return _MFAAIsInternalBuild();
}

uint64_t platform_auth_isDesenseBuild()
{
  return _MFAAIsDesenseBuild();
}

uint64_t platform_deviceNotifications_deviceTimeUpdate(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[0] = @"kCFACCDeviceNotifications_DeviceTimeUpdate_UnixTime";
  id v7 = +[NSNumber numberWithLongLong:a2];
  v14[0] = v7;
  v13[1] = @"kCFACCDeviceNotifications_DeviceTimeUpdate_TimeZoneOffsetMinutes";
  id v8 = +[NSNumber numberWithShort:a3];
  v14[1] = v8;
  _DWORD v13[2] = @"kCFACCDeviceNotifications_DeviceTimeUpdate_DaylightSavingsOffsetMinutes";
  uint64_t v9 = +[NSNumber numberWithChar:a4];
  _DWORD v14[2] = v9;
  BOOL v10 = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:3];

  uint64_t v11 = accFeatureHandlers_invokeHandler(a1, 2, (uint64_t)v10);
  return v11;
}

void platform_deviceNotifications_addSubscriber(unsigned int a1, void *a2, __n128 a3)
{
  if (platform_deviceNotifications_addSubscriber_onceToken != -1) {
    dispatch_once(&platform_deviceNotifications_addSubscriber_onceToken, &__block_literal_global_16);
  }
  if (a2)
  {
    BOOL v4 = !_gSubscriberList || a1 > 5;
    if (!v4 && ((0x2Fu >> a1) & 1) != 0)
    {
      uint64_t v5 = dword_1001B839C[a1];
      unsigned int v52 = dword_1001B83B4[a1];
      id v6 = (id *)&unk_100238000;
      CFStringRef name = (const __CFString *)kLockdownNotificationDeviceNameChanged;
      a3.n128_u64[0] = 67109378;
      __n128 v50 = a3;
      do
      {
        uint64_t v7 = gLogObjects;
        int v8 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v9 = gNumLogObjects < 8;
        }
        else {
          BOOL v9 = 1;
        }
        if (v9)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)long long v55 = v7;
            *(_WORD *)&v55[8] = 1024;
            *(_DWORD *)&unsigned char v55[10] = v8;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
          id v10 = &_os_log_default;
          uint64_t v11 = &_os_log_default;
        }
        else
        {
          uint64_t v11 = *(id *)(gLogObjects + 56);
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)long long v55 = a2;
          *(_WORD *)&v55[8] = 1024;
          *(_DWORD *)&unsigned char v55[10] = v5;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[#Device Notifications] Adding subscriber %@ for notification type: %{coreacc:ACCDeviceNotification_t}d", buf, 0x12u);
        }

        uint64_t v12 = +[NSNumber numberWithInt:v5];
        id v13 = a2;
        [v6[106] lock];
        uint64_t v14 = [(id)_gSubscriberList objectForKey:v12];
        if ((v14
           || (+[NSMutableSet set],
               uint64_t v14 = objc_claimAutoreleasedReturnValue(),
               [(id)_gSubscriberList setObject:v14 forKey:v12],
               v14))
          && !objc_msgSend(v14, "count", *(_OWORD *)&v50))
        {
          uint64_t v16 = gLogObjects;
          int v17 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 8)
          {
            id v18 = *(id *)(gLogObjects + 56);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)long long v55 = v16;
              *(_WORD *)&v55[8] = 1024;
              *(_DWORD *)&unsigned char v55[10] = v17;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
            id v19 = &_os_log_default;
            id v18 = &_os_log_default;
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)long long v55 = v5;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[#Device Notifications] First endpoint added for %{coreacc:ACCDeviceNotification_t}d, addObservers", buf, 8u);
          }

          int v15 = 1;
        }
        else
        {
          int v15 = 0;
        }
        objc_msgSend(v14, "addObject:", v13, *(_OWORD *)&v50);
        uint64_t v20 = gLogObjects;
        int v21 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 8)
        {
          uint64_t v22 = *(id *)(gLogObjects + 56);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)long long v55 = v20;
            *(_WORD *)&v55[8] = 1024;
            *(_DWORD *)&unsigned char v55[10] = v21;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
          id v23 = &_os_log_default;
          uint64_t v22 = &_os_log_default;
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          id v24 = [v14 count];
          *(_DWORD *)buf = 134218240;
          *(void *)long long v55 = v24;
          *(_WORD *)&v55[8] = 1024;
          *(_DWORD *)&unsigned char v55[10] = v5;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "[#Device Notifications] There are now %lu subscribers for notification type: %{coreacc:ACCDeviceNotification_t}d", buf, 0x12u);
        }

        uint64_t v25 = gLogObjects;
        int v26 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v27 = gNumLogObjects <= 7;
        }
        else {
          BOOL v27 = 1;
        }
        int v28 = !v27;
        if (v15)
        {
          if (v28)
          {
            long long v29 = *(id *)(gLogObjects + 56);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)long long v55 = v25;
              *(_WORD *)&v55[8] = 1024;
              *(_DWORD *)&unsigned char v55[10] = v26;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
            id v31 = &_os_log_default;
            long long v29 = &_os_log_default;
          }
          id v6 = (id *)&unk_100238000;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)long long v55 = v5;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "[#Device Notifications] Adding observers for notification type: %{coreacc:ACCDeviceNotification_t}d...", buf, 8u);
          }

          switch((int)v5)
          {
            case 0:
              DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
              CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)_deviceNameChanged, name, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
              goto LABEL_78;
            case 1:
              id v30 = +[NSNotificationCenter defaultCenter];
              uint64_t v36 = [v30 addObserverForName:NSCurrentLocaleDidChangeNotification object:0 queue:0 usingBlock:&__block_literal_global_35];
              id v37 = (void *)_gLocaleDidChangeObserver;
              _gLocaleDidChangeObserver = v36;
              goto LABEL_71;
            case 2:
              long long v38 = +[NSNotificationCenter defaultCenter];
              uint64_t v39 = [v38 addObserverForName:NSSystemClockDidChangeNotification object:0 queue:0 usingBlock:&__block_literal_global_38];
              uint64_t v40 = (void *)_gSystemClockDidChangeObserver;
              _gSystemClockDidChangeObserver = v39;

              __int16 v41 = +[NSNotificationCenter defaultCenter];
              uint64_t v42 = [v41 addObserverForName:NSSystemTimeZoneDidChangeNotification object:0 queue:0 usingBlock:&__block_literal_global_41];
              id v43 = (void *)_gTimeZoneDidChangeObserver;
              _gTimeZoneDidChangeObserver = v42;

              _setDaylightSavingsTimer();
              goto LABEL_78;
            case 3:
              id v30 = +[NSDistributedNotificationCenter defaultCenter];
              uint64_t v44 = [v30 addObserverForName:@"CRPairedVehiclesDidChangeNotification" object:0 queue:0 usingBlock:&__block_literal_global_48];
              id v37 = (void *)_gCarPlayPairedVehiclesDidChangeObserver;
              _gCarPlayPairedVehiclesDidChangeObserver = v44;
LABEL_71:

              break;
            default:
              uint64_t v34 = gLogObjects;
              int v35 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 8)
              {
                id v30 = *(id *)(gLogObjects + 56);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)long long v55 = v34;
                  *(_WORD *)&v55[8] = 1024;
                  *(_DWORD *)&unsigned char v55[10] = v35;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
                id v45 = &_os_log_default;
                id v30 = &_os_log_default;
              }
              if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)long long v55 = v5;
                _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "[#Device Notifications] Add observers for unknown notification type: %{coreacc:ACCDeviceNotification_t}d!", buf, 8u);
              }
              break;
          }
        }
        else
        {
          if (v28)
          {
            id v30 = *(id *)(gLogObjects + 56);
            id v6 = (id *)&unk_100238000;
          }
          else
          {
            id v6 = (id *)&unk_100238000;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)long long v55 = v25;
              *(_WORD *)&v55[8] = 1024;
              *(_DWORD *)&unsigned char v55[10] = v26;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
            id v33 = &_os_log_default;
            id v30 = &_os_log_default;
          }
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)long long v55 = v5;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "[#Device Notifications] There is already an observer registered for %{coreacc:ACCDeviceNotification_t}d, skip adding observers for notification", buf, 8u);
          }
        }

LABEL_78:
        [v6[106] unlock];
        uint64_t v46 = gLogObjects;
        int v47 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 8)
        {
          long long v48 = *(id *)(gLogObjects + 56);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)long long v55 = v46;
            *(_WORD *)&v55[8] = 1024;
            *(_DWORD *)&unsigned char v55[10] = v47;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
          id v49 = &_os_log_default;
          long long v48 = &_os_log_default;
        }
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v50.n128_u32[0];
          *(_DWORD *)long long v55 = v5;
          *(_WORD *)&v55[4] = 2112;
          *(void *)&v55[6] = a2;
          _os_log_debug_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "[#Device Notifications] Sending initial update for notification type: %{coreacc:ACCDeviceNotification_t}d to endpoint %@...", buf, 0x12u);
        }

        _sendUpdateForUUID(v13, v5);
        uint64_t v5 = (v5 + 1);
      }
      while (v5 <= v52);
    }
  }
}

void __platform_deviceNotifications_addSubscriber_block_invoke(id a1)
{
  id v1 = [&__NSDictionary0__struct mutableCopy];
  id v2 = (void *)_gSubscriberList;
  _gSubscriberList = (uint64_t)v1;

  _gSubscriberListLock = (uint64_t)objc_alloc_init((Class)NSLock);

  _objc_release_x1();
}

void _sendUpdateForUUID(const void *a1, int a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 8;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    id v6 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    _sendUpdateForUUID_cold_1((uint64_t)a1, a2, v6);
  }

  if (a1)
  {
    CFRetain(a1);
    uint64_t v7 = dispatch_get_global_queue(0, 0);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = ___sendUpdateForUUID_block_invoke;
    v8[3] = &__block_descriptor_44_e5_v8__0l;
    int v9 = a2;
    v8[4] = a1;
    dispatch_async(v7, v8);
  }
}

void platform_deviceNotifications_removeSubscriber(signed int a1, void *a2)
{
  if (a2)
  {
    BOOL v2 = !_gSubscriberList || a1 > 5;
    if (!v2 && ((0x2Fu >> a1) & 1) != 0)
    {
      uint64_t v4 = dword_1001B839C[a1];
      unsigned int v33 = dword_1001B83B4[a1];
      CFStringRef name = (const __CFString *)kLockdownNotificationDeviceNameChanged;
      do
      {
        uint64_t v5 = gLogObjects;
        int v6 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v7 = gNumLogObjects < 8;
        }
        else {
          BOOL v7 = 1;
        }
        if (v7)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v35 = v5;
            __int16 v36 = 1024;
            int v37 = v6;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
          id v8 = &_os_log_default;
          int v9 = &_os_log_default;
        }
        else
        {
          int v9 = *(id *)(gLogObjects + 56);
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          uint64_t v35 = (uint64_t)a2;
          __int16 v36 = 1024;
          int v37 = v4;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[#Device Notifications] Removing subscriber %@ for notification type: %{coreacc:ACCDeviceNotification_t}d", buf, 0x12u);
        }

        id v10 = +[NSNumber numberWithInt:v4];
        id v11 = a2;
        [(id)_gSubscriberListLock lock];
        uint64_t v12 = [(id)_gSubscriberList objectForKey:v10];
        [v12 removeObject:v11];
        uint64_t v13 = gLogObjects;
        int v14 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 8)
        {
          int v15 = *(id *)(gLogObjects + 56);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v35 = v13;
            __int16 v36 = 1024;
            int v37 = v14;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
          id v16 = &_os_log_default;
          int v15 = &_os_log_default;
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          id v17 = [v12 count];
          *(_DWORD *)buf = 134218240;
          uint64_t v35 = (uint64_t)v17;
          __int16 v36 = 1024;
          int v37 = v4;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[#Device Notifications] There are now %lu subscribers for notification type: %{coreacc:ACCDeviceNotification_t}d", buf, 0x12u);
        }

        if (v12 && ![v12 count])
        {
          [(id)_gSubscriberList removeObjectForKey:v10];
          uint64_t v18 = gLogObjects;
          int v19 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 8)
          {
            uint64_t v20 = *(id *)(gLogObjects + 56);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              uint64_t v35 = v18;
              __int16 v36 = 1024;
              int v37 = v19;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
            id v21 = &_os_log_default;
            uint64_t v20 = &_os_log_default;
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v35) = v4;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "[#Device Notifications] Removing observers for notification type: %{coreacc:ACCDeviceNotification_t}d...", buf, 8u);
          }

          switch((int)v4)
          {
            case 0:
              DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
              CFNotificationCenterRemoveObserver(DarwinNotifyCenter, 0, name, 0);
              break;
            case 1:
              id v23 = +[NSNotificationCenter defaultCenter];
              id v24 = v23;
              uint64_t v25 = _gLocaleDidChangeObserver;
              goto LABEL_43;
            case 2:
              int v26 = +[NSNotificationCenter defaultCenter];
              [v26 removeObserver:_gSystemClockDidChangeObserver];

              BOOL v27 = +[NSNotificationCenter defaultCenter];
              [v27 removeObserver:_gTimeZoneDidChangeObserver];

              if (_gDaylightSavingsTimerSource)
              {
                dispatch_source_cancel((dispatch_source_t)_gDaylightSavingsTimerSource);
                int v28 = (void *)_gDaylightSavingsTimerSource;
                _gDaylightSavingsTimerSource = 0;
              }
              break;
            case 3:
              id v23 = +[NSDistributedNotificationCenter defaultCenter];
              id v24 = v23;
              uint64_t v25 = _gCarPlayPairedVehiclesDidChangeObserver;
LABEL_43:
              [v23 removeObserver:v25];
              goto LABEL_52;
            default:
              uint64_t v29 = gLogObjects;
              int v30 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 8)
              {
                id v24 = *(id *)(gLogObjects + 56);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v35 = v29;
                  __int16 v36 = 1024;
                  int v37 = v30;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
                id v31 = &_os_log_default;
                id v24 = &_os_log_default;
              }
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                LODWORD(v35) = v4;
                _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "[#Device Notifications] Remove observers for unknown notification type: %{coreacc:ACCDeviceNotification_t}d!", buf, 8u);
              }
LABEL_52:

              break;
          }
        }
        [(id)_gSubscriberListLock unlock];

        uint64_t v4 = (v4 + 1);
      }
      while (v4 <= v33);
    }
  }
}

void _deviceNameChanged()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 8;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v1 = &_os_log_default;
  }
  else
  {
    BOOL v2 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[#Device Notifications] Device name changed! Sending updates...", v3, 2u);
  }

  _sendUpdateForNotification(0);
}

void ___addObserversForNotification_block_invoke(id a1, NSNotification *a2)
{
  BOOL v2 = a2;
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects < 8;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v5 = &_os_log_default;
    id v4 = &_os_log_default;
  }
  else
  {
    uint64_t v5 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[#Device Notifications] System locale changed! Sending updates...", v14, 2u);
  }

  if (gLogObjects && gNumLogObjects >= 8)
  {
    int v6 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    ___addObserversForNotification_block_invoke_cold_1((uint64_t)v2, v6, v8, v9, v10, v11, v12, v13);
  }

  _sendUpdateForNotification(1);
}

void _sendUpdateForNotification(uint64_t a1)
{
  if (_gSubscriberList)
  {
    [(id)_gSubscriberListLock lock];
    BOOL v2 = (void *)_gSubscriberList;
    BOOL v3 = +[NSNumber numberWithInt:a1];
    id v4 = [v2 objectForKey:v3];
    id v5 = [v4 copy];

    [(id)_gSubscriberListLock unlock];
    if (v5)
    {
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      id v6 = v5;
      id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v12;
        do
        {
          uint64_t v10 = 0;
          do
          {
            if (*(void *)v12 != v9) {
              objc_enumerationMutation(v6);
            }
            _sendUpdateForUUID(*(const void **)(*((void *)&v11 + 1) + 8 * (void)v10), a1);
            uint64_t v10 = (char *)v10 + 1;
          }
          while (v8 != v10);
          id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
        }
        while (v8);
      }
    }
  }
}

void ___addObserversForNotification_block_invoke_36(id a1, NSNotification *a2)
{
  BOOL v2 = a2;
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects < 8;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v5 = &_os_log_default;
    id v4 = &_os_log_default;
  }
  else
  {
    id v5 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[#Device Notifications] System clock changed! Sending updates...", v14, 2u);
  }

  if (gLogObjects && gNumLogObjects >= 8)
  {
    id v6 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    ___addObserversForNotification_block_invoke_cold_1((uint64_t)v2, v6, v8, v9, v10, v11, v12, v13);
  }

  _sendUpdateForNotification(2);
  _setDaylightSavingsTimer();
}

void _setDaylightSavingsTimer()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 28;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v1 = &_os_log_default;
  }
  else
  {
    BOOL v2 = *(id *)(gLogObjects + 216);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v3 = +[NSTimeZone localTimeZone];
    id v4 = [v3 name];
    *(_DWORD *)buf = 138412290;
    uint64_t v23 = (uint64_t)v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[#Device Notifications] Updating DST timer for timezone: %@", buf, 0xCu);
  }
  if (_gDaylightSavingsTimerSource) {
    dispatch_source_set_timer((dispatch_source_t)_gDaylightSavingsTimerSource, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  }
  id v5 = +[NSTimeZone localTimeZone];
  id v6 = [v5 nextDaylightSavingTimeTransition];

  if (v6)
  {
    id v7 = +[NSDate date];
    [v6 timeIntervalSinceDate:v7];
    uint64_t v9 = (uint64_t)v8;
    if (gLogObjects && gNumLogObjects >= 8)
    {
      uint64_t v10 = *(id *)(gLogObjects + 56);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v10 = &_os_log_default;
      id v11 = &_os_log_default;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[#Device Notifications] Setting timer for next daylight savings time event in %ld seconds...", buf, 0xCu);
    }

    if (v9 < 1)
    {
      if (gLogObjects && gNumLogObjects >= 8)
      {
        long long v14 = *(id *)(gLogObjects + 56);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        long long v14 = &_os_log_default;
        id v20 = &_os_log_default;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218498;
        uint64_t v23 = v9;
        __int16 v24 = 2112;
        uint64_t v25 = v6;
        __int16 v26 = 2112;
        BOOL v27 = v7;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[#Device Notifications] WARNING: secondsUntilNextDSTTransition was %ld second(s)! nextDSTTransition: %@, currentDate: %@", buf, 0x20u);
      }

      getpid();
      id v21 = +[NSString stringWithFormat:@"secondsUntilNextDSTTransition was %ld second(s)! nextDSTTransition: %@, currentDate: %@", v9, v6, v7];
      SimulateCrash();
    }
    else
    {
      uint64_t v12 = _gDaylightSavingsTimerSource;
      if (_gDaylightSavingsTimerSource)
      {
        dispatch_time_t v13 = dispatch_time(0, 1000000000 * v9);
        dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
      }
      else
      {
        dispatch_source_t v16 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)&_dispatch_main_q);
        id v17 = (void *)_gDaylightSavingsTimerSource;
        _gDaylightSavingsTimerSource = (uint64_t)v16;

        dispatch_source_set_event_handler((dispatch_source_t)_gDaylightSavingsTimerSource, &__block_literal_global_52);
        uint64_t v18 = _gDaylightSavingsTimerSource;
        dispatch_time_t v19 = dispatch_time(0, 1000000000 * v9);
        dispatch_source_set_timer(v18, v19, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        dispatch_resume((dispatch_object_t)_gDaylightSavingsTimerSource);
      }
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 28)
    {
      id v7 = *(id *)(gLogObjects + 216);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v7 = &_os_log_default;
      id v15 = &_os_log_default;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[#Device Notifications] Device does not observe daylight savings time, not setting DST timer.", buf, 2u);
    }
  }
}

void ___addObserversForNotification_block_invoke_39(id a1, NSNotification *a2)
{
  BOOL v2 = a2;
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects < 8;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v5 = &_os_log_default;
    id v4 = &_os_log_default;
  }
  else
  {
    id v5 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[#Device Notifications] System time zone changed! Sending updates...", v14, 2u);
  }

  if (gLogObjects && gNumLogObjects >= 8)
  {
    id v6 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    ___addObserversForNotification_block_invoke_cold_1((uint64_t)v2, v6, v8, v9, v10, v11, v12, v13);
  }

  _sendUpdateForNotification(2);
  _setDaylightSavingsTimer();
}

void ___addObserversForNotification_block_invoke_46(id a1, NSNotification *a2)
{
  BOOL v2 = a2;
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects < 8;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v5 = &_os_log_default;
    id v4 = &_os_log_default;
  }
  else
  {
    id v5 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    uint64_t v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[#Device Notifications] Notification received:\n%@", (uint8_t *)&v8, 0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 8)
  {
    id v6 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#Device Notifications] CarPlay paired vehicles changed! Sending updates...", (uint8_t *)&v8, 2u);
  }

  _sendUpdateForNotification(3);
}

void ___setDaylightSavingsTimer_block_invoke(id a1)
{
  if (gLogObjects) {
    BOOL v1 = gNumLogObjects < 8;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v3 = &_os_log_default;
    id v2 = &_os_log_default;
  }
  else
  {
    BOOL v3 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[#Device Notifications] Daylight savings time changed! Sending time update...", v4, 2u);
  }

  _sendUpdateForNotification(2);
  _setDaylightSavingsTimer();
}

void ___sendUpdateForUUID_block_invoke(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      id v2 = platform_systemInfo_copySystemName();
      accFeatureHandlers_invokeHandler(*(const void **)(a1 + 32), 0, (uint64_t)v2);
      if (v2) {
        CFRelease(v2);
      }
      break;
    case 1:
      BOOL v3 = +[NSLocale preferredLanguages];
      id v4 = [v3 objectAtIndex:0];
      id v5 = +[NSLocale localeWithLocaleIdentifier:v4];
      id v6 = [v5 languageCode];

      accFeatureHandlers_invokeHandler(*(const void **)(a1 + 32), 1, (uint64_t)v6);
      break;
    case 2:
      id v7 = +[NSDate date];
      [v7 timeIntervalSince1970];
      uint64_t v9 = (unint64_t)v8;

      uint64_t v10 = +[NSTimeZone localTimeZone];
      uint64_t v11 = (uint64_t)[v10 secondsFromGMT];
      unint64_t v12 = ((unsigned __int128)(v11 * (__int128)(uint64_t)0x8888888888888889) >> 64) + v11;
      int v13 = (v12 >> 63) + (v12 >> 5);

      long long v14 = +[NSTimeZone localTimeZone];
      [v14 daylightSavingTimeOffset];
      unint64_t v16 = ((unsigned __int128)((uint64_t)v15 * (__int128)(uint64_t)0x8888888888888889) >> 64) + (uint64_t)v15;
      int v17 = (v16 >> 63) + (v16 >> 5);

      platform_deviceNotifications_deviceTimeUpdate(*(const void **)(a1 + 32), v9, (__int16)v13, (char)v17);
      break;
    case 3:
      accFeatureHandlers_invokeHandler(*(const void **)(a1 + 32), 3, 0);
      break;
    default:
      break;
  }
  uint64_t v18 = *(const void **)(a1 + 32);
  if (v18)
  {
    CFRelease(v18);
  }
}

uint64_t acc_protocolParser_iAP1_create(void *a1)
{
  if (!a1) {
    return 0;
  }
  if (*a1) {
    return 0;
  }
  id v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x10100408DD85393uLL);
  *a1 = v2;
  if (!v2) {
    return 0;
  }
  *(_DWORD *)id v2 = 0;
  v2[2] = 0;
  *((void *)v2 + 1) = 0;
  v2[8] = 0;
  uint64_t v3 = 1;
  *((unsigned char *)v2 + 18) = 0;
  return v3;
}

BOOL acc_protocolParser_iAP1_reset(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)a1 = 0;
    *(_WORD *)(a1 + 4) = 0;
    *(void *)(a1 + 8) = 0;
    *(_WORD *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 18) = 0;
  }
  return a1 != 0;
}

void acc_protocolParser_iAP1_run(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (*(_DWORD *)a2 == 3)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = *(_DWORD *)v5;
    switch(*(_DWORD *)v5)
    {
      case 0:
        if (gLogObjects) {
          BOOL v8 = gNumLogObjects < 16;
        }
        else {
          BOOL v8 = 1;
        }
        if (v8)
        {
          uint64_t v18 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          uint64_t v18 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_3();
        }
        int v9 = *a3 == 85;
        goto LABEL_132;
      case 1:
        if (gLogObjects) {
          BOOL v10 = gNumLogObjects < 16;
        }
        else {
          BOOL v10 = 1;
        }
        if (v10)
        {
          dispatch_time_t v19 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          dispatch_time_t v19 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_6();
        }
        unsigned int v20 = *a3;
        if (!*a3)
        {
          int v9 = 2;
          goto LABEL_116;
        }
        if (v20 == 1 || v20 > 0xFC) {
          goto LABEL_83;
        }
        *(_WORD *)(v5 + 16) = v20;
        id v21 = logObjectForModule_10();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_113;
        }
        goto LABEL_112;
      case 2:
        if (gLogObjects) {
          BOOL v11 = gNumLogObjects < 16;
        }
        else {
          BOOL v11 = 1;
        }
        if (v11)
        {
          uint64_t v22 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          uint64_t v22 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_8();
        }
        *(_WORD *)(v5 + 16) = *a3 << 8;
        *(unsigned char *)(v5 + 18) += *a3;
        int v9 = 3;
        goto LABEL_132;
      case 3:
        if (gLogObjects) {
          BOOL v12 = gNumLogObjects < 16;
        }
        else {
          BOOL v12 = 1;
        }
        if (v12)
        {
          uint64_t v23 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          uint64_t v23 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_11();
        }
        __int16 v24 = *(_WORD *)(v5 + 16) | *a3;
        *(_WORD *)(v5 + 16) = v24;
        if ((unsigned __int16)(v24 + 6) >= 8u)
        {
          id v21 = logObjectForModule_10();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
LABEL_112:
          }
            acc_protocolParser_iAP1_run_cold_5((unsigned __int16 *)(v5 + 16), v21);
LABEL_113:
          int v9 = 4;
        }
        else
        {
LABEL_83:
          int v9 = 12;
        }
LABEL_116:
        *(unsigned char *)(v5 + 18) += *a3;
        goto LABEL_117;
      case 4:
        if (gLogObjects) {
          BOOL v13 = gNumLogObjects < 16;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          uint64_t v25 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          uint64_t v25 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_13();
        }
        if (*a3 == 4) {
          int v9 = 5;
        }
        else {
          int v9 = 6;
        }
        *(void *)(v5 + 8) = a3;
        *(unsigned char *)(v5 + 18) += *a3;
        *(unsigned char *)(v5 + 4) = *a3;
        goto LABEL_132;
      case 5:
        if (gLogObjects) {
          BOOL v14 = gNumLogObjects < 16;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14)
        {
          __int16 v26 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          __int16 v26 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_15();
        }
        *(unsigned char *)(v5 + 18) += *a3;
        int v9 = 6;
        goto LABEL_132;
      case 6:
        if (gLogObjects) {
          BOOL v15 = gNumLogObjects < 16;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15)
        {
          BOOL v27 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          BOOL v27 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_17();
        }
        if (*(unsigned __int16 *)(v5 + 16) - 1 > (unsigned __int16)((_WORD)a3 - *(_DWORD *)(v5 + 8))) {
          int v9 = 7;
        }
        else {
          int v9 = 8;
        }
        *(unsigned char *)(v5 + 18) += *a3;
        *(unsigned char *)(v5 + 5) = *a3;
        goto LABEL_132;
      case 7:
        if (gLogObjects) {
          BOOL v16 = gNumLogObjects < 16;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16)
        {
          int v28 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          int v28 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_19();
        }
        if (*(unsigned __int16 *)(v5 + 16) - 1 == (unsigned __int16)((_WORD)a3 - *(_DWORD *)(v5 + 8))) {
          int v9 = 8;
        }
        else {
          int v9 = 7;
        }
        *(unsigned char *)(v5 + 18) += *a3;
        goto LABEL_132;
      case 8:
        if (gLogObjects) {
          BOOL v17 = gNumLogObjects < 16;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17)
        {
          uint64_t v29 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          uint64_t v29 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_22();
        }
        if (*(unsigned __int8 *)(v5 + 18) == -*a3)
        {
          if (gLogObjects && gNumLogObjects >= 16)
          {
            int v30 = *(NSObject **)(gLogObjects + 120);
          }
          else
          {
            int v30 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "iAP1 checksum validated!", buf, 2u);
          }
          if (*(unsigned char *)(v5 + 4) || *(unsigned __int8 *)(v5 + 5) != 238)
          {
            if (acc_policies_allowACCAuthProtocolOnAllTransport()
              && !*(unsigned char *)(v5 + 4)
              && *(unsigned __int8 *)(v5 + 5) == 170)
            {
              *(_DWORD *)(a1 + 28) = 10;
              uint64_t v35 = logObjectForModule_10();
              if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)long long v38 = 0;
                _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "AccAuth detected! (detect packet)", v38, 2u);
              }
              int v9 = 11;
            }
            else
            {
              *(_DWORD *)(a1 + 28) = *(_DWORD *)a2;
              __int16 v36 = logObjectForModule_10();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)int v37 = 0;
                _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "iAP1 detected!", v37, 2u);
              }
              int v9 = 9;
            }
          }
          else
          {
            *(_DWORD *)(a1 + 28) = 4;
            uint64_t v34 = logObjectForModule_10();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint64_t v39 = 0;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "iAP2 detected! (detect packet)", v39, 2u);
            }
            int v9 = 10;
          }
        }
        else
        {
          int v9 = 12;
LABEL_117:
          if (v6 != 12 && v9 == 12)
          {
            ++*(unsigned char *)(a1 + 24);
            if (gLogObjects) {
              BOOL v32 = gNumLogObjects < 16;
            }
            else {
              BOOL v32 = 1;
            }
            if (v32)
            {
              unsigned int v33 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            else
            {
              unsigned int v33 = *(NSObject **)(gLogObjects + 120);
            }
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
              acc_protocolParser_iAP1_run_cold_1();
            }
            int v9 = 12;
          }
        }
LABEL_132:
        *(_DWORD *)uint64_t v5 = v9;
        break;
      default:
        int v9 = *(_DWORD *)v5;
        goto LABEL_117;
    }
  }
}

id __receivedNotification(uint64_t a1, void *a2)
{
  return [a2 update];
}

void sub_1000986E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100098788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

BOOL mfi4Auth_protocol_supportsRelay(uint64_t a1)
{
  return *(void *)(a1 + 72) != 0;
}

uint64_t loggingProtocol_handleMessage(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 0;
  if (a1 && a3)
  {
    int v7 = *(_DWORD *)(a3 + 8);
    if (v7 != 2)
    {
      if (v7 == 1) {
        return 1;
      }
      if (!v7 && a2 >= 2 && __rev16(*a1) == 2)
      {
        if (a2 >= 5)
        {
          if (*((unsigned char *)a1 + 4) == 1)
          {
            uint64_t CurrentTimeInNanoseconds = loggingProtocol_getCurrentTimeInNanoseconds();
            if (a2 >= 0x1E)
            {
              int v9 = 0;
              uint64_t v10 = *((unsigned __int8 *)a1 + 29);
              if (!*((unsigned char *)a1 + 29))
              {
                BOOL v11 = 0;
                BOOL v12 = 0;
                goto LABEL_156;
              }
              BOOL v11 = 0;
              BOOL v12 = 0;
              if ((int)v10 + 30 > a2)
              {
LABEL_156:
                free(v9);
                free(v11);
                free(v12);
                return 0;
              }
              uint64_t v13 = CurrentTimeInNanoseconds;
              unint64_t v14 = *(void *)((char *)a1 + 5);
              long long v160 = *(_OWORD *)((char *)a1 + 13);
              int v9 = strndup((const char *)a1 + 30, v10 - 1);
              uint64_t v15 = v10 + 30;
              if ((int)v10 + 30 < a2)
              {
                BOOL v11 = 0;
                uint64_t v16 = *((unsigned __int8 *)a1 + v15);
                if (!*((unsigned char *)a1 + v15) || (unsigned int v17 = v10 + 31, v16 + v17 > a2))
                {
                  BOOL v12 = 0;
                  goto LABEL_156;
                }
                BOOL v11 = strndup((const char *)a1 + v17, v16 - 1);
                unsigned int v18 = v17 + v16;
                if (v17 + v16 < a2)
                {
                  BOOL v12 = 0;
                  uint64_t v19 = *((unsigned __int8 *)a1 + v18);
                  if (*((unsigned char *)a1 + v18))
                  {
                    unsigned int v20 = v18 + 1;
                    if (v19 + v18 + 1 <= a2)
                    {
                      id v21 = strndup((const char *)a1 + v20, v19 - 1);
                      BOOL v12 = v21;
                      if (v20 + v19 == a2 && v9 && v11 && v21)
                      {
                        *(void *)(a3 + 40) = v13;
                        *(void *)(a3 + 48) = bswap64(v14);
                        *(unsigned char *)(a3 + 56) = 1;
                        *(_OWORD *)(a3 + 57) = v160;
                        free(*(void **)(a3 + 80));
                        *(void *)(a3 + 80) = v9;
                        free(*(void **)(a3 + 96));
                        *(void *)(a3 + 96) = v11;
                        free(*(void **)(a3 + 88));
                        *(void *)(a3 + 88) = v12;
                        char v163 = 1;
                        if (!gLogObjects) {
                          goto LABEL_41;
                        }
                        if (gNumLogObjects >= 53)
                        {
                          uint64_t v22 = *(NSObject **)(gLogObjects + 416);
                        }
                        else
                        {
LABEL_41:
                          uint64_t v22 = &_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }
                        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
                          loggingProtocol_handleMessage_cold_1();
                        }
                        if (loggingProtocol_sendMessage(3, (uint64_t)&v163, a3)) {
                          *(_DWORD *)(a3 + 8) = 1;
                        }
                        uint64_t v37 = *(void *)(a3 + 32);
                        if (v37)
                        {
                          if (*(void *)v37)
                          {
                            CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)v37);
                            if (EndpointWithUUID)
                            {
                              uint64_t v39 = EndpointWithUUID[7];
                              if (v39)
                              {
                                uint64_t v40 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v39 + 24));
                                *(void *)(v37 + 72) = v40;
                                *(void *)&long long handler = _NSConcreteStackBlock;
                                *((void *)&handler + 1) = 0x40000000;
                                *(void *)char v165 = __handleMessage_sessionSync_block_invoke;
                                *(void *)&v165[8] = &__block_descriptor_tmp_5;
                                *(void *)&v165[16] = a3;
                                dispatch_source_set_event_handler(v40, &handler);
                                __int16 v41 = *(NSObject **)(v37 + 72);
                                dispatch_time_t v42 = dispatch_time(0, 5000000000);
                                dispatch_source_set_timer(v41, v42, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
                                dispatch_activate(*(dispatch_object_t *)(v37 + 72));
                                iap2_sessionLog_writeSessionSyncToFile(a3);
                                return 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_156;
                }
                goto LABEL_155;
              }
LABEL_154:
              BOOL v11 = 0;
LABEL_155:
              BOOL v12 = 0;
              goto LABEL_156;
            }
          }
          else
          {
            LOBYTE(v166[0]) = 1;
            loggingProtocol_sendMessage(3, (uint64_t)v166, a3);
          }
        }
        int v9 = 0;
        goto LABEL_154;
      }
      return 0;
    }
    if (a2 < 2) {
      return 0;
    }
    uint64_t v3 = 0;
    switch(__rev16(*a1))
    {
      case 0u:
        *(void *)&v165[32] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)char v165 = v23;
        *(_OWORD *)&v165[16] = v23;
        long long handler = v23;
        if ((unsigned __int16)(a2 - 513) < 0xFE07u) {
          goto LABEL_160;
        }
        unsigned int v24 = bswap32(*((_DWORD *)a1 + 1));
        uint64_t v25 = *(void *)(a3 + 32);
        int v27 = *(_DWORD *)(v25 + 16);
        int v26 = *(_DWORD *)(v25 + 20);
        if (v27 == v26 || v24 - v27 > v26 + ~v27)
        {
          uint64_t v29 = 0;
          int v30 = 0;
          id v31 = 0;
          goto LABEL_136;
        }
        if (a2 <= 0x10) {
          goto LABEL_160;
        }
        uint64_t v3 = 0;
        uint64_t v29 = 0;
        if (a2 < 0x12)
        {
          int v30 = 0;
          id v31 = 0;
        }
        else
        {
          int v30 = 0;
          id v31 = 0;
          if (*((unsigned __int8 *)a1 + 16) > 1u) {
            goto LABEL_137;
          }
          uint64_t v32 = *((unsigned __int8 *)a1 + 17);
          if ((int)v32 + 18 > a2)
          {
LABEL_160:
            uint64_t v29 = 0;
          }
          else
          {
            int v159 = *((unsigned __int8 *)a1 + 16);
            unsigned int v161 = v24;
            unint64_t v33 = *((void *)a1 + 1);
            uint64_t v29 = strndup((const char *)a1 + 18, v32 - 1);
            uint64_t v34 = v32 + 19;
            if ((int)v32 + 19 <= a2)
            {
              uint64_t v35 = *((unsigned __int8 *)a1 + v32 + 18);
              unsigned int v36 = v34 + v35;
              if ((int)v34 + (int)v35 <= a2)
              {
                int v30 = strndup((const char *)a1 + v34, v35 - 1);
                if (v36 >= a2) {
                  id v31 = 0;
                }
                else {
                  id v31 = strndup((const char *)a1 + v36, (unsigned __int16)(a2 - v36) - 1);
                }
                uint64_t v3 = 0;
                if (v29 && v30)
                {
                  unint64_t v97 = *(void *)(a3 + 40) + bswap64(v33) - *(void *)(a3 + 48);
                  LODWORD(handler) = v161;
                  *((void *)&handler + 1) = v97;
                  *(_DWORD *)char v165 = v159;
                  v165[4] = v32;
                  *(void *)&v165[8] = v29;
                  v165[16] = v35;
                  *(void *)&v165[24] = v30;
                  *(void *)&v165[32] = v31;
                  iap2_sessionLog_writeLogEntryToFile(&handler, a3);
LABEL_136:
                  uint64_t v3 = 1;
                  goto LABEL_137;
                }
                goto LABEL_137;
              }
            }
          }
          int v30 = 0;
          id v31 = 0;
          uint64_t v3 = 0;
        }
LABEL_137:
        free(v29);
        free(v30);
        int v94 = v31;
LABEL_142:
        free(v94);
        return v3;
      case 1u:
        v166[0] = 0;
        v166[1] = 0;
        *(void *)&v165[16] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v43 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long handler = v43;
        *(_OWORD *)char v165 = v43;
        if (*(_OWORD *)(a3 + 57) == 0)
        {
          uint64_t v44 = 0;
          goto LABEL_140;
        }
        if ((unsigned __int16)(a2 - 513) < 0xFE07u) {
          goto LABEL_150;
        }
        uint64_t v44 = 0;
        uint64_t v45 = *(void *)(a3 + 32);
        int v46 = *(_DWORD *)(v45 + 16);
        int v47 = *(_DWORD *)(v45 + 20);
        uint64_t v3 = 1;
        if (v46 == v47) {
          goto LABEL_141;
        }
        unsigned int v48 = bswap32(*((_DWORD *)a1 + 1));
        if (v48 - v46 > v47 + ~v46) {
          goto LABEL_141;
        }
        if (a2 <= 0x10) {
          goto LABEL_150;
        }
        uint64_t v3 = 0;
        uint64_t v44 = 0;
        if (a2 < 0x15) {
          goto LABEL_141;
        }
        unsigned int v49 = *((unsigned __int8 *)a1 + 16);
        if (v49 > 1) {
          goto LABEL_141;
        }
        if (a2 == 21 || (uint64_t v50 = *((unsigned __int8 *)a1 + 21), 8 * v50 + 22 != a2))
        {
LABEL_150:
          uint64_t v44 = 0;
        }
        else
        {
          unint64_t v51 = *((void *)a1 + 1);
          unsigned int v52 = *(_DWORD *)((char *)a1 + 17);
          if (!*((unsigned char *)a1 + 21))
          {
            uint64_t v44 = 0;
LABEL_139:
            unint64_t v98 = *(void *)(a3 + 40) + bswap64(v51) - *(void *)(a3 + 48);
            LODWORD(handler) = v48;
            *((void *)&handler + 1) = v98;
            *(_DWORD *)char v165 = v49;
            *(_DWORD *)&v165[4] = bswap32(v52);
            v165[8] = v50;
            *(void *)&v165[16] = v44;
            iap2_sessionLog_writeIndexBasedLogEntryToFile(&handler, a3);
LABEL_140:
            uint64_t v3 = 1;
            goto LABEL_141;
          }
          long long v53 = (char *)malloc_type_malloc(8 * v50, 0xC4F7D366uLL);
          uint64_t v44 = v53;
          if (v53)
          {
            uint64_t v54 = 0;
            unsigned __int16 v55 = 11;
            do
            {
              *(void *)&v53[v54] = bswap64(*(void *)&a1[v55]);
              v55 += 4;
              v54 += 8;
            }
            while (8 * v50 != v54);
            goto LABEL_139;
          }
        }
        uint64_t v3 = 0;
LABEL_141:
        int v94 = v44;
        goto LABEL_142;
      case 6u:
        if (a2 != 12) {
          return 0;
        }
        unsigned int v56 = bswap32(*((_DWORD *)a1 + 1));
        unsigned int v57 = bswap32(*((_DWORD *)a1 + 2));
        unsigned int v58 = v57 + 1;
        uint64_t v59 = *(void *)(a3 + 32);
        int v60 = *(_DWORD *)(v59 + 36);
        if (v57 + 1 != *(_DWORD *)(v59 + 40)
          || ((v61 = v57 - v60, v56 != v60) ? (BOOL v62 = v56 - v60 > v61) : (BOOL v62 = 1), v62))
        {
          *(unsigned char *)(v59 + 9) = 1;
        }
        *(_DWORD *)(v59 + 32) = v60;
        *(_DWORD *)(v59 + 36) = v56;
        *(_DWORD *)(v59 + 40) = v58;
        logFetcher_processAvailabilityUpdate(a3);
        return 1;
      case 8u:
        logFetcher_performFetch(a3);
        return 1;
      case 9u:
        if (*(unsigned char *)(a3 + 112))
        {
          uint64_t v101 = logObjectForModule_15();
          if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_7(v101, v102, v103, v104, v105, v106, v107, v108);
          }
          return 0;
        }
        if (a2 < bswap32(a1[1]) >> 16)
        {
          CFDictionaryRef v109 = logObjectForModule_15();
          if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_3();
          }
          return 0;
        }
        unsigned int v63 = bswap32(*((_DWORD *)a1 + 2));
        if (v63 - 524289 <= 0xFFF7FFFF)
        {
          id v110 = logObjectForModule_15();
          if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_4();
          }
          return 0;
        }
        int v64 = *((unsigned __int8 *)a1 + 28);
        if (*((unsigned char *)a1 + 28))
        {
          CFNumberRef v111 = logObjectForModule_15();
          if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_6(v111, v112, v113, v114, v115, v116, v117, v118);
          }
          return 0;
        }
        unsigned int v65 = *((_DWORD *)a1 + 1);
        unint64_t v66 = *(void *)(a1 + 6);
        unint64_t v67 = *(void *)(a1 + 10);
        if (gLogObjects && gNumLogObjects >= 53)
        {
          int v68 = *(NSObject **)(gLogObjects + 416);
        }
        else
        {
          int v68 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        int v92 = bswap32(v65);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(handler) = 67110144;
          DWORD1(handler) = v92;
          WORD4(handler) = 1024;
          *(_DWORD *)((char *)&handler + 10) = v63;
          HIWORD(handler) = 2048;
          *(void *)char v165 = bswap64(v66);
          *(_WORD *)&v165[8] = 2048;
          *(void *)&v165[10] = bswap64(v67);
          *(_WORD *)&v165[18] = 1024;
          *(_DWORD *)&v165[20] = v64;
          CFNumberRef v93 = "BinaryLogNotification received. LogFileID: %u, FileLen: %u, TimeStampStart: %llu, TimeStampEnd: %llu, FilePriority: %u";
          goto LABEL_149;
        }
        goto LABEL_115;
      case 0xBu:
        if (!*(unsigned char *)(a3 + 104))
        {
          uint64_t v119 = logObjectForModule_15();
          if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_8(v119, v120, v121, v122, v123, v124, v125, v126);
          }
          return 0;
        }
        if (a2 < bswap32(a1[1]) >> 16)
        {
          __int16 v127 = logObjectForModule_15();
          if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_9();
          }
          return 0;
        }
        unsigned int v69 = bswap32(*((_DWORD *)a1 + 2));
        if (v69 - 524289 <= 0xFFF7FFFF)
        {
          BOOL v128 = logObjectForModule_15();
          if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_10();
          }
          return 0;
        }
        int v64 = *((unsigned __int8 *)a1 + 28);
        if (*(_DWORD *)(a3 + 108) != v64)
        {
          CFNumberRef v129 = logObjectForModule_15();
          if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_12(v129, v130, v131, v132, v133, v134, v135, v136);
          }
          return 0;
        }
        unsigned int v70 = *((_DWORD *)a1 + 1);
        unint64_t v71 = *(void *)(a1 + 6);
        unint64_t v72 = *(void *)(a1 + 10);
        if (gLogObjects && gNumLogObjects >= 53)
        {
          int v68 = *(NSObject **)(gLogObjects + 416);
        }
        else
        {
          int v68 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        int v92 = bswap32(v70);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(handler) = 67110144;
          DWORD1(handler) = v92;
          WORD4(handler) = 1024;
          *(_DWORD *)((char *)&handler + 10) = v69;
          HIWORD(handler) = 2048;
          *(void *)char v165 = bswap64(v71);
          *(_WORD *)&v165[8] = 2048;
          *(void *)&v165[10] = bswap64(v72);
          *(_WORD *)&v165[18] = 1024;
          *(_DWORD *)&v165[20] = v64;
          CFNumberRef v93 = "BinaryLogAvailable message received. LogFileID: %u, FileLen: %u, TimeStampStart: %llu, TimeStampEnd: %ll"
                "u, FilePriority: %u";
LABEL_149:
          _os_log_debug_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, v93, (uint8_t *)&handler, 0x28u);
        }
LABEL_115:
        sendMessage_requestBinaryLogFileInfo(a3, v92, v64);
        return 1;
      case 0xDu:
        if (a2 < bswap32(a1[1]) >> 16)
        {
          CFDictionaryRef v137 = logObjectForModule_15();
          if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_13();
          }
        }
        else
        {
          int v162 = bswap32(*((_DWORD *)a1 + 1));
          if (*(unsigned char *)(a3 + 112))
          {
            sendMessage_stopBinaryLogFile(a3, v162, 2);
          }
          else
          {
            unsigned int v73 = bswap32(*((_DWORD *)a1 + 2));
            if (v73 - 524289 > 0xFFF7FFFF)
            {
              unint64_t v74 = *(void *)(a1 + 6);
              unint64_t v75 = *(void *)(a1 + 10);
              uint64_t v76 = *((unsigned __int8 *)a1 + 29);
              id v77 = strndup((const char *)a1 + 30, v76 - 1);
              uint64_t v78 = (uint64_t)v77;
              int v79 = *((unsigned __int8 *)a1 + v76 + 30);
              if (*((unsigned char *)a1 + v76 + 30))
              {
                CFNumberRef v139 = logObjectForModule_15();
                if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR)) {
                  loggingProtocol_handleMessage_cold_16(v139, v140, v141, v142, v143, v144, v145, v146);
                }
                uint64_t v3 = 0;
              }
              else
              {
                unint64_t v80 = bswap64(v74);
                unint64_t v81 = bswap64(v75);
                *(void *)(a3 + 128) = v80;
                *(void *)(a3 + 136) = v81;
                *(_WORD *)(a3 + 144) = v76;
                *(void *)(a3 + 152) = v77;
                *(_DWORD *)(a3 + 160) = v79;
                *(_DWORD *)(a3 + 120) = v162;
                *(_DWORD *)(a3 + 124) = v73;
                *(_DWORD *)(a3 + 116) = 0;
                *(unsigned char *)(a3 + 112) = 1;
                if (gLogObjects && gNumLogObjects >= 53)
                {
                  __int16 v82 = *(NSObject **)(gLogObjects + 416);
                }
                else
                {
                  __int16 v82 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
                {
                  LODWORD(handler) = 67110402;
                  DWORD1(handler) = v162;
                  WORD4(handler) = 1024;
                  *(_DWORD *)((char *)&handler + 10) = v73;
                  HIWORD(handler) = 2048;
                  *(void *)char v165 = v80;
                  *(_WORD *)&v165[8] = 2048;
                  *(void *)&v165[10] = v81;
                  *(_WORD *)&v165[18] = 1024;
                  *(_DWORD *)&v165[20] = v79;
                  *(_WORD *)&v165[24] = 2080;
                  *(void *)&v165[26] = v78;
                  _os_log_debug_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "BinaryLogFileInfo message received. LogFileID: %u, FileLen: %u, TimeStampStart: %llu, TimeStampEnd: %llu, FilePriority: %u, \n tag: %s \n", (uint8_t *)&handler, 0x32u);
                }
                writeMessage_binaryBlock(v78, (unsigned __int16)(v76 - 1));
                sendMessage_requestBinaryLogSegment(a3, v162, 0);
                uint64_t v78 = 0;
                uint64_t v3 = 1;
              }
LABEL_122:
              int v94 = (void *)v78;
              goto LABEL_142;
            }
            id v138 = logObjectForModule_15();
            if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR)) {
              loggingProtocol_handleMessage_cold_14();
            }
          }
        }
        uint64_t v3 = 0;
        uint64_t v78 = 0;
        goto LABEL_122;
      case 0x10u:
        if (a2 < bswap32(a1[1]) >> 16)
        {
          uint64_t v147 = logObjectForModule_15();
          if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_17();
          }
          LODWORD(v83) = 0;
        }
        else
        {
          uint64_t v83 = bswap32(*((_DWORD *)a1 + 1));
          if (v83 == *(_DWORD *)(a3 + 120))
          {
            if (*(unsigned char *)(a3 + 112))
            {
              size_t v84 = bswap32(*((_DWORD *)a1 + 3));
              if (v84)
              {
                unsigned int v85 = *(_DWORD *)(a3 + 124);
                unsigned int v86 = *(_DWORD *)(a3 + 116);
                BOOL v87 = v85 >= v86;
                unsigned int v88 = v85 - v86;
                if (v88 != 0 && v87 && v84 <= v88)
                {
                  *(_DWORD *)(a3 + 116) = v86 + v84;
                  id v89 = malloc_type_malloc(v84, 0xCDAFC873uLL);
                  if (v89)
                  {
                    uint64_t v90 = (uint64_t)v89;
                    memcpy(v89, a1 + 8, v84);
                    if (gLogObjects && gNumLogObjects >= 53)
                    {
                      int v91 = *(NSObject **)(gLogObjects + 416);
                    }
                    else
                    {
                      int v91 = &_os_log_default;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }
                    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG)) {
                      loggingProtocol_handleMessage_cold_23(v90, v83, v91);
                    }
                    writeMessage_binaryBlock(v90, (unsigned __int16)v84);
                    int v95 = *(_DWORD *)(a3 + 116);
                    if (v95 == *(_DWORD *)(a3 + 124))
                    {
                      if (gLogObjects && gNumLogObjects >= 53)
                      {
                        id v96 = *(NSObject **)(gLogObjects + 416);
                      }
                      else
                      {
                        id v96 = &_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }
                      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG)) {
                        loggingProtocol_handleMessage_cold_21(v96);
                      }
                      sendMessage_stopBinaryLogFile(a3, v83, 0);
                    }
                    else
                    {
                      sendMessage_requestBinaryLogSegment(a3, v83, v95);
                    }
                    return 1;
                  }
                  uint64_t v151 = logObjectForModule_15();
                  if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR)) {
                    loggingProtocol_handleMessage_cold_20(v151, v152, v153, v154, v155, v156, v157, v158);
                  }
                  int v150 = 2;
LABEL_201:
                  sendMessage_stopBinaryLogFile(a3, v83, v150);
                  return 0;
                }
              }
              id v100 = logObjectForModule_15();
              if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR)) {
                loggingProtocol_handleMessage_cold_19();
              }
            }
            else
            {
              long long v149 = logObjectForModule_15();
              if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR)) {
                loggingProtocol_handleMessage_cold_18();
              }
            }
          }
          else
          {
            CFStringRef v148 = logObjectForModule_15();
            if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR)) {
              loggingProtocol_handleMessage_cold_25();
            }
          }
        }
        int v150 = 1;
        goto LABEL_201;
      default:
        return v3;
    }
  }
  return v3;
}

BOOL loggingProtocol_sendMessageData(char *a1, unsigned int a2, uint64_t a3)
{
  return iap2_sessionLog_sendOutgoingMessage(a3, a1, a2);
}

uint64_t loggingProtocol_requestAccessoryLogs(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    int v3 = result;
    *(unsigned char *)(a2 + 104) = 1;
    *(_DWORD *)(a2 + 108) = result;
    long long v5 = xmmword_1001B83D0;
    LODWORD(v5) = result;
    uint64_t v6 = -1;
    if (gLogObjects && gNumLogObjects >= 53)
    {
      id v4 = *(NSObject **)(gLogObjects + 416);
    }
    else
    {
      id v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      loggingProtocol_requestAccessoryLogs_cold_1(v3, v4);
    }
    return loggingProtocol_sendMessage(10, (uint64_t)&v5, a2);
  }
  return result;
}

uint64_t loggingProtocol_stopAccessoryLogTransfer(unsigned int a1, uint64_t a2)
{
  if (a1 > 2) {
    int v2 = 1;
  }
  else {
    int v2 = a1;
  }
  return sendMessage_stopBinaryLogFile(a2, *(_DWORD *)(a2 + 120), v2);
}

uint64_t sendMessage_stopBinaryLogFile(uint64_t result, int a2, int a3)
{
  if (result)
  {
    uint64_t v3 = result;
    *(unsigned char *)(result + 112) = 0;
    *(unsigned char *)(result + 104) = 0;
    *(_DWORD *)(result + 116) = 0;
    v5[0] = a2;
    v5[1] = a3;
    if (gLogObjects && gNumLogObjects >= 53)
    {
      id v4 = *(NSObject **)(gLogObjects + 416);
    }
    else
    {
      id v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sendMessage_stopBinaryLogFile_cold_1();
    }
    return loggingProtocol_sendMessage(14, (uint64_t)v5, v3);
  }
  return result;
}

void *logObjectForModule_15()
{
  if (gLogObjects && gNumLogObjects >= 53) {
    return *(void **)(gLogObjects + 416);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void __handleMessage_sessionSync_block_invoke(uint64_t a1)
{
  loggingProtocol_sendMessage(4, 0, *(void *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 32);
  *(_DWORD *)(v2 + 8) = 2;
  uint64_t v3 = gLogObjects;
  int v4 = gNumLogObjects;
  if (gLogObjects && gNumLogObjects >= 53)
  {
    long long v5 = *(NSObject **)(gLogObjects + 416);
  }
  else
  {
    long long v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134218240;
      uint64_t v8 = v3;
      __int16 v9 = 1024;
      int v10 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v7, 0x12u);
      uint64_t v2 = *(void *)(a1 + 32);
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(_DWORD *)(v2 + 8);
    int v7 = 67109120;
    LODWORD(v8) = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Logging Protocol Session Established. endpointState: %u", (uint8_t *)&v7, 8u);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  iap2_sessionLog_registerForNotifications(v2);
}

void logFetcher_processAvailabilityUpdate(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 8) && *(unsigned char *)(v1 + 9))
  {
    int v2 = *(_DWORD *)(v1 + 40);
    int v3 = *(_DWORD *)(v1 + 28);
    unsigned int v4 = v2 - v3;
    if (v2 != v3)
    {
      int v7 = *(_DWORD *)(v1 + 36);
      unsigned int v8 = (v3 ^ 0x7FFFFFFF) + v7 + 1;
      unsigned int v9 = *(_DWORD *)(v1 + 32) + (v3 ^ 0x7FFFFFFF);
      unsigned int v10 = v3 - v2;
      if (v7 - v3 < (v3 - v7)) {
        int v3 = *(_DWORD *)(v1 + 36);
      }
      if (v10 < v4 && v7 - v2 > v10) {
        int v3 = *(_DWORD *)(v1 + 36);
      }
      if (v8 <= v9) {
        int v3 = *(_DWORD *)(v1 + 36);
      }
      *(_DWORD *)(v1 + 24) = v3;
      *(_DWORD *)(v1 + 28) = v2;
      goto LABEL_18;
    }
    int v5 = *(_DWORD *)(v1 + 36);
    int v6 = *(_DWORD *)(v1 + 24);
    if (v5 == v6)
    {
LABEL_18:
      *(_DWORD *)(v1 + 12) = v2;
      *(_WORD *)(v1 + 8) = 1;
      logFetcher_performFetch(a1);
      return;
    }
    if (v5 - v6 > (v2 + ~v6))
    {
      *(_DWORD *)(v1 + 24) = v5;
      goto LABEL_18;
    }
  }
}

void logFetcher_performFetch(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 56) || !*(void *)(v2 + 48))
  {
    int v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v2 + 64));
    *(void *)(v2 + 56) = v3;
    dispatch_source_set_timer(v3, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    unsigned int v4 = *(NSObject **)(v2 + 56);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = __logFetcher_initTimers_block_invoke;
    handler[3] = &__block_descriptor_tmp_1_0;
    handler[4] = a1;
    dispatch_source_set_event_handler(v4, handler);
    dispatch_resume(*(dispatch_object_t *)(v2 + 56));
    int v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v2 + 64));
    *(void *)(v2 + 48) = v5;
    dispatch_source_set_timer(v5, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    int v6 = *(NSObject **)(v2 + 48);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 0x40000000;
    _DWORD v14[2] = __logFetcher_initTimers_block_invoke_2;
    void v14[3] = &__block_descriptor_tmp_2_1;
    v14[4] = v2 + 8;
    v14[5] = a1;
    dispatch_source_set_event_handler(v6, v14);
    dispatch_resume(*(dispatch_object_t *)(v2 + 48));
    uint64_t v2 = *(void *)(a1 + 32);
  }
  int v7 = *(_DWORD *)(v2 + 12);
  int v8 = *(_DWORD *)(v2 + 24);
  unsigned int v9 = v7 - v8;
  if (v7 == v8)
  {
    *(unsigned char *)(v2 + 8) = 0;
    logFetcher_processAvailabilityUpdate(a1);
  }
  else
  {
    unsigned int v10 = rand() / 0x151D07Fu + 32;
    if (v9 < v10) {
      unsigned int v10 = v9;
    }
    int v11 = *(_DWORD *)(v2 + 12);
    *(_DWORD *)(v2 + 16) = v11 - v10;
    *(_DWORD *)(v2 + 20) = v11;
    BOOL v12 = *(NSObject **)(v2 + 48);
    dispatch_time_t v13 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
}

uint64_t __logFetcher_initTimers_block_invoke(uint64_t a1)
{
  return logFetcher_performFetch(*(void *)(a1 + 32));
}

void __logFetcher_initTimers_block_invoke_2(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  int v4 = *(_DWORD *)(v3 + 8);
  LODWORD(v3) = *(_DWORD *)(v3 + 12) - 1;
  v9[0] = v4;
  v9[1] = v3;
  int v5 = loggingProtocol_sendMessage(7, (uint64_t)v9, v2);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v5)
  {
    *(_DWORD *)(v6 + 4) += *(_DWORD *)(v6 + 8) - *(_DWORD *)(v6 + 12);
  }
  else
  {
    int v7 = *(NSObject **)(v6 + 48);
    dispatch_time_t v8 = dispatch_time(0, 3000000000);
    dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
}

uint64_t sendMessage_requestBinaryLogFileInfo(uint64_t a1, int a2, int a3)
{
  v6[0] = a2;
  v6[1] = a3;
  if (gLogObjects && gNumLogObjects >= 53)
  {
    int v4 = *(NSObject **)(gLogObjects + 416);
  }
  else
  {
    int v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sendMessage_requestBinaryLogFileInfo_cold_1();
  }
  return loggingProtocol_sendMessage(12, (uint64_t)v6, a1);
}

void writeMessage_binaryBlock(uint64_t a1, int a2)
{
  if (a1)
  {
    if (a2)
    {
      iap2_sessionLog_writeBinaryBlockToFile();
    }
    else
    {
      uint64_t v3 = logObjectForModule_15();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        writeMessage_binaryBlock_cold_2(v3);
      }
    }
  }
  else
  {
    uint64_t v2 = logObjectForModule_15();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      writeMessage_binaryBlock_cold_1(v2);
    }
  }
}

uint64_t sendMessage_requestBinaryLogSegment(uint64_t a1, int a2, int a3)
{
  v9[0] = a2;
  v9[1] = a3;
  if ((*(_DWORD *)(a1 + 124) - *(_DWORD *)(a1 + 116)) >= 0x200) {
    int v6 = 512;
  }
  else {
    int v6 = *(_DWORD *)(a1 + 124) - *(_DWORD *)(a1 + 116);
  }
  _DWORD v9[2] = v6;
  if (gLogObjects && gNumLogObjects >= 53)
  {
    int v7 = *(NSObject **)(gLogObjects + 416);
  }
  else
  {
    int v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    int v11 = a2;
    __int16 v12 = 1024;
    int v13 = a3;
    __int16 v14 = 1024;
    int v15 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Sending RequestBinaryLogSegment. LogFileID: %u, SegmentOffset: %u, SegmentLength: %u", buf, 0x14u);
  }
  return loggingProtocol_sendMessage(15, (uint64_t)v9, a1);
}

BOOL acc_auth_protocol_initStartMessage1Way(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  BOOL result = 1;
  if (a1 && a2 && a3 >= 4)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v7 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = *a1;
      int v9 = *((_DWORD *)a1 + 286);
      int v10 = *((_DWORD *)a1 + 289);
      v12[0] = 67109632;
      v12[1] = v8;
      __int16 v13 = 1024;
      int v14 = v9;
      __int16 v15 = 1024;
      int v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[AccAuth][1Way] initStartMessage1Way: sessionID %d, role %d, negotiatedAuthType %d \n", (uint8_t *)v12, 0x14u);
    }
    int v11 = *((_DWORD *)a1 + 286);
    if (v11 && *((_DWORD *)a1 + 289) == 1)
    {
      if (v11 == 1)
      {
        BOOL result = acc_auth_protocol_initMessage(a1, 162, a2, a3);
        int v11 = *((_DWORD *)a1 + 286);
      }
      else
      {
        BOOL result = 1;
      }
      if (v11 == 2) {
        return acc_auth_protocol_initMessage(a1, 163, a2, a3);
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t acc_auth_protocol_handleAuthStart1Way(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5)
{
  uint64_t result = 1;
  if (a1 && a2 && a4 && a5 >= 4)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v10 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v11 = *a1;
      int v12 = *((_DWORD *)a1 + 286);
      int v13 = *((_DWORD *)a1 + 289);
      int v14 = *a2;
      int v15 = a2[1];
      int v16 = a2[2];
      int v17 = a2[3];
      v18[0] = 67110656;
      v18[1] = v11;
      __int16 v19 = 1024;
      int v20 = v12;
      __int16 v21 = 1024;
      int v22 = v13;
      __int16 v23 = 1024;
      int v24 = v14;
      __int16 v25 = 1024;
      int v26 = v15;
      __int16 v27 = 1024;
      int v28 = v16;
      __int16 v29 = 1024;
      int v30 = v17;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleAuthStart1Way: sessionID %d, role %d, negotiatedAuthType %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d \n", (uint8_t *)v18, 0x2Cu);
    }
    if (*a2 == 162 && *((_DWORD *)a1 + 289) == 1 && *((_DWORD *)a1 + 286) == 2)
    {
      LODWORD(result) = acc_auth_protocol_initStartMessage(a1, a4, a5);
      if (*((_DWORD *)a1 + 289)) {
        return result;
      }
      else {
        return 45;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL acc_auth_protocol_handleAuthStartResp1Way(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5)
{
  BOOL result = 1;
  if (a1 && a2 && a4)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v10 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v11 = *a1;
      int v12 = *((_DWORD *)a1 + 286);
      int v13 = *((_DWORD *)a1 + 289);
      int v14 = *a2;
      int v15 = a2[1];
      int v16 = a2[2];
      int v17 = a2[3];
      v18[0] = 67110656;
      v18[1] = v11;
      __int16 v19 = 1024;
      int v20 = v12;
      __int16 v21 = 1024;
      int v22 = v13;
      __int16 v23 = 1024;
      int v24 = v14;
      __int16 v25 = 1024;
      int v26 = v15;
      __int16 v27 = 1024;
      int v28 = v16;
      __int16 v29 = 1024;
      int v30 = v17;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleAuthStartResp1Way: sessionID %d, role %d, negotiatedAuthType %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d \n", (uint8_t *)v18, 0x2Cu);
    }
    return *a2 != 163
        || *((_DWORD *)a1 + 289) != 1
        || *((_DWORD *)a1 + 286) != 1
        || acc_auth_protocol_initInfoCommonMessage(a1, 9u, a4, a5);
  }
  return result;
}

uint64_t acc_auth_protocol_handleAuthInfo1Way(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  uint64_t result = 1;
  if (!a1 || !a2 || !a4) {
    return result;
  }
  uint64_t v23 = 0;
  int v10 = (unsigned char *)acc_auth_protocol_messagePayload((uint64_t)a2, a3, (_DWORD *)&v23 + 1, 0, &v23);
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v11 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    int v17 = *a1;
    int v18 = *((_DWORD *)a1 + 286);
    int v19 = *((_DWORD *)a1 + 289);
    int v20 = *a2;
    int v21 = a2[1];
    int v22 = a2[2];
    *(_DWORD *)buf = 67110656;
    int v25 = v17;
    __int16 v26 = 1024;
    int v27 = v18;
    __int16 v28 = 1024;
    int v29 = v19;
    __int16 v30 = 1024;
    int v31 = v20;
    __int16 v32 = 1024;
    int v33 = v21;
    __int16 v34 = 1024;
    int v35 = v22;
    __int16 v36 = 1024;
    int v37 = HIDWORD(v23);
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[AccAuth][1Way] handleAuthInfo1Way: sessionID %d, role %d, negotiatedAuthType %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d \n", buf, 0x2Cu);
    if (v10) {
      goto LABEL_11;
    }
    return 1;
  }
  if (!v10) {
    return 1;
  }
LABEL_11:
  if (*a2 != 164 || *((_DWORD *)a1 + 289) != 1 || *((_DWORD *)a1 + 286) != 2 || *v10) {
    return 1;
  }
  int v12 = v10[1];
  int v13 = logObjectForModule_13();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = *a1;
    int v15 = *((_DWORD *)a1 + 286);
    int v16 = *((_DWORD *)a1 + 289);
    *(_DWORD *)buf = 67109888;
    int v25 = v14;
    __int16 v26 = 1024;
    int v27 = v15;
    __int16 v28 = 1024;
    int v29 = v16;
    __int16 v30 = 1024;
    int v31 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleAuthInfo1Way: sessionID %d, role %d, negotiatedAuthType %d, infoType %d \n", buf, 0x1Au);
  }
  uint64_t result = 1;
  switch(v12)
  {
    case 1:
      uint64_t result = __acc_auth_protocol_handleNotInCache(a1, a4, a5);
      break;
    case 3:
      uint64_t result = __acc_auth_protocol_handlContinueWithSegment(a1, (uint64_t)v10, a4, a5);
      break;
    case 4:
      uint64_t result = __acc_auth_protocol_handleCertificateChainInfoRequest(a1, (uint64_t)v10, a4, a5);
      break;
    case 7:
      uint64_t result = __acc_auth_protocol_handleChallenge(a1, v10, a4, a5);
      break;
    case 9:
      uint64_t result = __acc_auth_protocol_handleNotGoingFirst(a1, a4, a5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t __acc_auth_protocol_handleNotGoingFirst(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  int v17 = 0;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v6 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v7 = *a1;
    int v8 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67109376;
    int v19 = v7;
    __int16 v20 = 1024;
    int v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleNotGoingFirst: sessionID %d, role %d \n", buf, 0xEu);
  }
  BOOL inited = acc_auth_protocol_initInfoCommonMessage(a1, 0, a2, a3);
  if (inited)
  {
    uint64_t CertificateChainHashList = inited;
    int v11 = 0;
  }
  else
  {
    int v12 = (unsigned char *)acc_auth_protocol_messagePayload((uint64_t)a2, a3, 0, 0, 0);
    _DWORD v12[2] = 1;
    int v17 = 0;
    int v11 = 32;
    uint64_t CertificateChainHashList = _acc_auth_protocol_getCertificateChainHashList((uint64_t)a1, v12 + 4, 0x20u, 1, &v17);
    v12[3] = 32;
    a2[3] += 34;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v13 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = *a1;
    int v15 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67110144;
    int v19 = v14;
    __int16 v20 = 1024;
    int v21 = v15;
    __int16 v22 = 1024;
    int v23 = v11;
    __int16 v24 = 1024;
    int v25 = v17;
    __int16 v26 = 1024;
    int v27 = CertificateChainHashList;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleNotGoingFirst: sessionID %d, role %d, certificateHashSize %d, certificateHashCount %d, errorNo %d \n", buf, 0x20u);
  }
  return CertificateChainHashList;
}

uint64_t __acc_auth_protocol_handleNotInCache(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v6 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    __acc_auth_protocol_handleNotInCache_cold_3();
  }
  NewCertificateStruct = _acc_auth_protocol_getNewCertificateStruct();
  if (!NewCertificateStruct)
  {
    uint64_t v9 = 12;
    goto LABEL_28;
  }
  uint64_t Certificate = _acc_auth_protocol_getCertificate((uint64_t)a1, 0, 0, (uint64_t)NewCertificateStruct);
  if (Certificate)
  {
    uint64_t v9 = Certificate;
    goto LABEL_28;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v10 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v11 = NewCertificateStruct[2];
    int v20 = 67109632;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = acc_auth_protocol_maxPayloadSize((uint64_t)a1);
    __int16 v24 = 1024;
    int v25 = acc_auth_protocol_maxSegmentSize((uint64_t)a1);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleAuthInfo1Way: certificateDataLen %d, maxPayladSize %d, maxSegmentSize %d \n", (uint8_t *)&v20, 0x14u);
  }
  unsigned int v12 = NewCertificateStruct[2];
  if (v12 <= acc_auth_protocol_maxPayloadSize((uint64_t)a1) - 6)
  {
    uint64_t v9 = __acc_auth_protocol_prepareMessageWithExtLenForCertificateData(a1, (uint64_t)NewCertificateStruct, 2, 2u, a2, a3);
    goto LABEL_26;
  }
  unsigned int v13 = acc_auth_protocol_maxSegmentSize((uint64_t)a1);
  if (v13 > 0xFF || HIWORD(NewCertificateStruct[2]))
  {
    uint64_t v9 = 22;
    goto LABEL_28;
  }
  uint64_t v9 = acc_auth_protocol_setupSegmentedSend(a1, (uint64_t)NewCertificateStruct, *(void *)NewCertificateStruct, (unsigned __int16)NewCertificateStruct[2], v13);
  if (!v9)
  {
    if (acc_auth_protocol_initSegmentedSendMessage(a1, 2u, 130, a2, a3) || !*((void *)a1 + 9))
    {
      uint64_t v9 = 1;
      goto LABEL_28;
    }
    uint64_t v9 = 0;
LABEL_26:
    NewCertificateStruct = 0;
  }
LABEL_28:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v14 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    int v15 = *a1;
    int v16 = *((_DWORD *)a1 + 286);
    if (NewCertificateStruct) {
      int v17 = NewCertificateStruct[2];
    }
    else {
      int v17 = -1;
    }
    int v18 = acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, 0, 0);
    int v20 = 67110144;
    int v21 = v15;
    __int16 v22 = 1024;
    int v23 = v16;
    __int16 v24 = 1024;
    int v25 = v17;
    __int16 v26 = 1024;
    int v27 = v18;
    __int16 v28 = 1024;
    int v29 = v9;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleNotInCache: sessionID %d, role %d, certificateDataLen %d, msgSize %d, errorNo %d \n", (uint8_t *)&v20, 0x20u);
  }
  if (NewCertificateStruct) {
    _acc_auth_protocol_returnCertificateStruct(NewCertificateStruct);
  }
  return v9;
}

uint64_t __acc_auth_protocol_handlContinueWithSegment(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v8 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v8 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    __acc_auth_protocol_handlContinueWithSegment_cold_2();
  }
  uint64_t v9 = (_DWORD *)*((void *)a1 + 9);
  int v10 = *(unsigned __int8 *)(a2 + 3);
  if (v9)
  {
    uint64_t inited = acc_auth_protocol_initSegmentedSendMessage(a1, *(unsigned __int8 *)(a2 + 3), *(unsigned __int8 *)(a2 + 4), a3, a4);
    if (inited) {
      unsigned int v12 = v9;
    }
    else {
      unsigned int v12 = 0;
    }
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t inited = 2;
  }
  BOOL v14 = v10 == 2 || v10 == 5;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v15 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    int v16 = *a1;
    int v17 = *((_DWORD *)a1 + 286);
    if (v12 && (v10 == 5 || v10 == 2)) {
      int v18 = v12[2];
    }
    else {
      int v18 = -1;
    }
    int v19 = a1[1321];
    v21[0] = 67110656;
    v21[1] = v16;
    __int16 v22 = 1024;
    int v23 = v17;
    __int16 v24 = 1024;
    BOOL v25 = v14;
    __int16 v26 = 1024;
    BOOL v27 = v10 == 8;
    __int16 v28 = 1024;
    int v29 = v18;
    __int16 v30 = 1024;
    int v31 = v19;
    __int16 v32 = 1024;
    int v33 = inited;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handlContinueWithSegment: sessionID %d, role %d, certType %d, respType %d, certificateDataLen %d, authResponseDataLen %d, errorNo %d \n", (uint8_t *)v21, 0x2Cu);
  }
  if (v12)
  {
    if (v10 == 5 || v10 == 2)
    {
      _acc_auth_protocol_returnCertificateStruct(v12);
    }
    else if (v10 == 8)
    {
      *(_OWORD *)(a1 + 1289) = 0u;
      *(_OWORD *)(a1 + 1305) = 0u;
      *(_OWORD *)(a1 + 1257) = 0u;
      *(_OWORD *)(a1 + 1273) = 0u;
      *(_OWORD *)(a1 + 1225) = 0u;
      *(_OWORD *)(a1 + 1241) = 0u;
      *(_OWORD *)(a1 + 1193) = 0u;
      *(_OWORD *)(a1 + 1209) = 0u;
      a1[1321] = 0;
    }
  }
  return inited;
}

uint64_t __acc_auth_protocol_handleCertificateChainInfoRequest(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  if (*(unsigned char *)(a2 + 2) != 4)
  {
    NewCertificateStruct = 0;
LABEL_6:
    uint64_t v10 = 1;
    goto LABEL_25;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v8 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v8 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    __acc_auth_protocol_handleCertificateChainInfoRequest_cold_2();
  }
  NewCertificateStruct = _acc_auth_protocol_getNewCertificateStruct();
  if (!NewCertificateStruct)
  {
    uint64_t v10 = 12;
    goto LABEL_25;
  }
  uint64_t Certificate = _acc_auth_protocol_getCertificate((uint64_t)a1, (const void *)(a2 + 4), 0x20u, (uint64_t)NewCertificateStruct);
  if (Certificate)
  {
    uint64_t v10 = Certificate;
    goto LABEL_25;
  }
  unsigned int v12 = NewCertificateStruct[2];
  if (v12 <= acc_auth_protocol_maxPayloadSize((uint64_t)a1) - 6)
  {
    uint64_t v10 = __acc_auth_protocol_prepareMessageWithExtLenForCertificateData(a1, (uint64_t)NewCertificateStruct, 5, 5u, a3, a4);
    goto LABEL_23;
  }
  unsigned int v13 = acc_auth_protocol_maxSegmentSize((uint64_t)a1);
  if (v13 > 0xFF || HIWORD(NewCertificateStruct[2]))
  {
    uint64_t v10 = 22;
    goto LABEL_25;
  }
  uint64_t v10 = acc_auth_protocol_setupSegmentedSend(a1, (uint64_t)NewCertificateStruct, *(void *)NewCertificateStruct, (unsigned __int16)NewCertificateStruct[2], v13);
  if (!v10)
  {
    if (!acc_auth_protocol_initSegmentedSendMessage(a1, 5u, 133, a3, a4) && *((void *)a1 + 9))
    {
      uint64_t v10 = 0;
LABEL_23:
      NewCertificateStruct = 0;
      goto LABEL_25;
    }
    goto LABEL_6;
  }
LABEL_25:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v14 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    BOOL v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    int v15 = *a1;
    int v16 = *((_DWORD *)a1 + 286);
    if (NewCertificateStruct) {
      int v17 = NewCertificateStruct[2];
    }
    else {
      int v17 = -1;
    }
    v19[0] = 67110144;
    v19[1] = v15;
    __int16 v20 = 1024;
    int v21 = v16;
    __int16 v22 = 1024;
    int v23 = v17;
    __int16 v24 = 1024;
    int v25 = acc_auth_protocol_sizeofMessage((uint64_t)a3, a4, 0, 0);
    __int16 v26 = 1024;
    int v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleCertificateChainInfoRequest: sessionID %d, role %d, certificateDataLen %d, msgSize %d, errorNo %d \n", (uint8_t *)v19, 0x20u);
  }
  if (NewCertificateStruct) {
    _acc_auth_protocol_returnCertificateStruct(NewCertificateStruct);
  }
  return v10;
}

uint64_t __acc_auth_protocol_handleChallenge(unsigned __int8 *a1, unsigned char *a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v23 = 0;
  memset(__n_1, 0, sizeof(__n_1));
  size_t v8 = a2[3];
  unsigned __int8 __n = 0;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v9 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    uint64_t v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    __acc_auth_protocol_handleChallenge_cold_2();
    if (!v8) {
      goto LABEL_20;
    }
  }
  else if (!v8)
  {
    goto LABEL_20;
  }
  if (a2[2] != 10) {
    goto LABEL_20;
  }
  uint64_t Certificate = _acc_auth_protocol_getCertificate((uint64_t)a1, 0, 0, (uint64_t)__n_1);
  if (Certificate) {
    goto LABEL_21;
  }
  if (a4 < 0x88) {
    goto LABEL_20;
  }
  unsigned __int8 __n = 0x80;
  a1[1321] = 0;
  a3[6] = 11;
  uint64_t Certificate = _acc_auth_protocol_generateChallengeResponse((uint64_t)a1, (uint64_t)__n_1, a2 + 4, v8, a1 + 1193, 128, &__n);
  if (Certificate) {
    goto LABEL_21;
  }
  unsigned int v11 = __n;
  a1[1321] = __n;
  if (acc_auth_protocol_maxPayloadSize((uint64_t)a1) - 4 >= v11)
  {
    unsigned __int8 v17 = __n;
    if (__n > 0x7Bu)
    {
      uint64_t Certificate = acc_auth_protocol_initInfoCommonMessageExtendedLength(a1, 8u, a3, a4, __n + 6);
      if (Certificate) {
        goto LABEL_21;
      }
      uint64_t v20 = acc_auth_protocol_messagePayload((uint64_t)a3, a4, 0, 0, 0);
      *(_WORD *)(v20 + 2) = -32245;
      *(unsigned char *)(v20 + 4) = 0;
      unsigned int v19 = __n;
      *(unsigned char *)(v20 + 5) = __n;
      int v18 = (void *)(v20 + 6);
    }
    else
    {
      uint64_t Certificate = acc_auth_protocol_initInfoCommonMessage(a1, 8u, a3, a4);
      if (Certificate) {
        goto LABEL_21;
      }
      int v18 = a3 + 8;
      a3[3] += v17 + 4;
      a3[6] = 11;
      unsigned int v19 = __n;
      a3[7] = __n;
    }
    memcpy(v18, a1 + 1193, v19);
    uint64_t Certificate = 0;
    *(_OWORD *)(a1 + 1193) = 0u;
    *(_OWORD *)(a1 + 1209) = 0u;
    *(_OWORD *)(a1 + 1225) = 0u;
    *(_OWORD *)(a1 + 1241) = 0u;
    *(_OWORD *)(a1 + 1257) = 0u;
    *(_OWORD *)(a1 + 1273) = 0u;
    *(_OWORD *)(a1 + 1289) = 0u;
    *(_OWORD *)(a1 + 1305) = 0u;
    a1[1321] = 0;
    goto LABEL_21;
  }
  unsigned int v12 = acc_auth_protocol_maxSegmentSize((uint64_t)a1);
  if (v12 > 0xFF)
  {
LABEL_20:
    uint64_t Certificate = 22;
    goto LABEL_21;
  }
  uint64_t Certificate = acc_auth_protocol_setupSegmentedSend(a1, (uint64_t)(a1 + 1193), (uint64_t)(a1 + 1193), __n, v12);
  if (!Certificate)
  {
    uint64_t Certificate = acc_auth_protocol_initSegmentedSendMessage(a1, 8u, 139, a3, a4);
    if (!Certificate)
    {
      if (*((void *)a1 + 9)) {
        uint64_t Certificate = 0;
      }
      else {
        uint64_t Certificate = 45;
      }
    }
  }
LABEL_21:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v13 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    unsigned int v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = *a1;
    int v15 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67110400;
    int v25 = v14;
    __int16 v26 = 1024;
    int v27 = v15;
    __int16 v28 = 1024;
    int v29 = v8;
    __int16 v30 = 1024;
    int v31 = __n;
    __int16 v32 = 1024;
    int v33 = DWORD2(__n_1[0]);
    __int16 v34 = 1024;
    int v35 = Certificate;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleChallenge: sessionID %d, role %d, challengeLen %d, responseLen=%d, certificateDataLen %d, errorNo %d \n", buf, 0x26u);
  }
  _acc_auth_protocol_cleanupCertificateData((uint64_t)__n_1);
  return Certificate;
}

uint64_t acc_auth_protocol_handleAuthInfoResp1Way(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  uint64_t result = 1;
  if (a1 && a2 && a4)
  {
    uint64_t v18 = 0;
    uint64_t v10 = (unsigned __int8 *)acc_auth_protocol_messagePayload((uint64_t)a2, a3, (_DWORD *)&v18 + 1, 0, &v18);
    if (gLogObjects && gNumLogObjects >= 55)
    {
      unsigned int v11 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      unsigned int v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v12 = *a1;
      int v13 = *((_DWORD *)a1 + 286);
      int v14 = *((_DWORD *)a1 + 289);
      int v15 = *a2;
      int v16 = a2[1];
      int v17 = a2[2];
      *(_DWORD *)buf = 67110656;
      int v20 = v12;
      __int16 v21 = 1024;
      int v22 = v13;
      __int16 v23 = 1024;
      int v24 = v14;
      __int16 v25 = 1024;
      int v26 = v15;
      __int16 v27 = 1024;
      int v28 = v16;
      __int16 v29 = 1024;
      int v30 = v17;
      __int16 v31 = 1024;
      int v32 = HIDWORD(v18);
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleAuthInfoResp1Way: sessionID %d, role %d, negotiatedAuthType %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d \n", buf, 0x2Cu);
    }
    if (*a2 == 165 && *((_DWORD *)a1 + 289) == 1 && *((_DWORD *)a1 + 286) == 1 && !*v10)
    {
      uint64_t result = 1;
      switch(v10[1])
      {
        case 0u:
          uint64_t result = __acc_auth_protocol_handleCertificateHash(a1, (uint64_t)v10, a4, a5);
          break;
        case 2u:
          uint64_t result = __acc_auth_protocol_handleCertificate(a1, v10, a4, a5);
          break;
        case 5u:
          uint64_t result = __acc_auth_protocol_handleCertificateChainCert(a1, v10, a4, a5);
          break;
        case 8u:
          uint64_t result = __acc_auth_protocol_handleResponse(a1, v10, a4, a5);
          break;
        default:
          return result;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t __acc_auth_protocol_handleCertificateHash(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  int v8 = *(unsigned __int8 *)(a2 + 3);
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v9 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    uint64_t v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    __acc_auth_protocol_handleCertificateHash_cold_2();
  }
  if (v8 == 32)
  {
    uint64_t v10 = (const void *)(a2 + 4);
    if (_acc_auth_protocol_certificateCacheGetCert((uint64_t)a1, (const void *)(a2 + 4), 0x20u, (uint64_t)&v19))
    {
      uint64_t inited = acc_auth_protocol_initInfoCommonMessage(a1, 1u, a3, a4);
    }
    else
    {
      _acc_auth_protocol_setPeerLeafCertificateData(a1, (uint64_t)&v19);
      *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)buf = v16;
      long long v23 = v16;
      unsigned __int8 v18 = 0;
      uint64_t inited = _acc_auth_protocol_getSigningCertificateHash((uint64_t)a1, (uint64_t)&v19, buf, 0x20u, &v18);
      if ((inited & 0xFFFFFFFD) == 0)
      {
        if (!v18
          || _acc_auth_protocol_certificateCacheGetCert((uint64_t)a1, v10, 0x20u, (uint64_t)&v19)
          || (_acc_auth_protocol_cleanupCertificateData((uint64_t)&v19),
              _acc_auth_protocol_certificateCacheGetCert((uint64_t)a1, buf, v18, (uint64_t)&v19)))
        {
          uint64_t inited = _acc_auth_protocol_validatePeerCertificateChain((uint64_t)a1);
          if (inited) {
            goto LABEL_12;
          }
          int v17 = 0;
        }
        else
        {
          int v17 = 1;
        }
        uint64_t inited = __acc_auth_protocol_sendCertChainRequestOrChallenge(a1, (uint64_t)&v19, v17, buf, v18, a3, a4);
        long long v19 = 0u;
        long long v20 = 0u;
        uint64_t v21 = 0;
      }
    }
  }
  else
  {
    uint64_t inited = 22;
  }
LABEL_12:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v12 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v13 = *a1;
    int v14 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v13;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v14;
    *(_WORD *)&uint8_t buf[14] = 1024;
    LODWORD(v23) = DWORD2(v19);
    WORD2(v23) = 1024;
    *(_DWORD *)((char *)&v23 + 6) = inited;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleCertificateHash: sessionID %d, role %d, certificateDataLen %d, errorNo %d \n", buf, 0x1Au);
  }
  _acc_auth_protocol_cleanupCertificateData((uint64_t)&v19);
  return inited;
}

uint64_t __acc_auth_protocol_handleCertificate(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  unsigned __int8 v33 = 0;
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  int v6 = a2[3];
  unsigned __int8 v7 = a2[4] + 1;
  unsigned int v8 = a2[5];
  unsigned int v9 = v7 * v8;
  unsigned int v10 = (v8 + 1023) / v8;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v11 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    unsigned int v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *a1;
    int v23 = *((_DWORD *)a1 + 286);
    unsigned int v12 = (unsigned __int16)(v10 * v8);
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = v22;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v23;
    *(_WORD *)&uint8_t buf[14] = 1024;
    LODWORD(v35) = v7 * v8;
    WORD2(v35) = 1024;
    *(_DWORD *)((char *)&v35 + 6) = (v8 + 1023) / v8;
    WORD5(v35) = 1024;
    HIDWORD(v35) = v12;
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[AccAuth][1Way] handleCertificate: sessionID %d, role %d, maxDataLen %d, maxCertSegments %d, maxCertSegmentedLen %d. \n", buf, 0x20u);
  }
  else
  {
    unsigned int v12 = (unsigned __int16)(v10 * v8);
  }
  if (v12 >= v9)
  {
    if (v6)
    {
      if (v8 > a1[118])
      {
        uint64_t v14 = 1;
        int v13 = 1;
        goto LABEL_13;
      }
      int v15 = (_DWORD *)&unk_100239000;
      if (a1[117] != v7)
      {
        uint64_t v14 = 1;
LABEL_26:
        int v13 = 1;
        goto LABEL_27;
      }
    }
    else
    {
      int v15 = (int *)&unk_100239000;
      if (gLogObjects && gNumLogObjects >= 55)
      {
        long long v16 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        long long v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        __acc_auth_protocol_handleCertificate_cold_2();
      }
      uint64_t CertificateData = acc_auth_protocol_setupSegmentedRecv(a1, 0, (uint64_t)(a1 + 120), v9, v8);
      if (CertificateData)
      {
LABEL_25:
        uint64_t v14 = CertificateData;
        goto LABEL_26;
      }
    }
    uint64_t CertificateData = __acc_auth_protocol_processCertificateSegment(a1, a2, a3, a4, (char *)&v33);
    if (!CertificateData)
    {
      if (!v33)
      {
        uint64_t v14 = 0;
        goto LABEL_26;
      }
      uint64_t CertificateData = _acc_auth_protocol_createCertificateData(*((const void **)a1 + 13), *((unsigned __int16 *)a1 + 56), (uint64_t)v31);
      if (!CertificateData)
      {
        uint64_t CertificateData = _acc_auth_protocol_setPeerLeafCertificateData(a1, (uint64_t)v31);
        if (!CertificateData)
        {
          *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v37[0] = v24;
          v37[1] = v24;
          unsigned __int8 v30 = 0;
          uint64_t SigningCertificateHash = _acc_auth_protocol_getSigningCertificateHash((uint64_t)a1, (uint64_t)v31, v37, 0x20u, &v30);
          if ((SigningCertificateHash & 0xFFFFFFFD) == 0)
          {
            if (v30
              && (uint64_t v36 = 0,
                  *(_OWORD *)buf = 0u,
                  long long v35 = 0u,
                  int Cert = _acc_auth_protocol_certificateCacheGetCert((uint64_t)a1, v37, v30, (uint64_t)buf),
                  _acc_auth_protocol_cleanupCertificateData((uint64_t)buf),
                  Cert))
            {
              int v27 = 1;
            }
            else
            {
              uint64_t v14 = _acc_auth_protocol_validatePeerCertificateChain((uint64_t)a1);
              int v27 = 0;
              int v13 = 0;
              if (v14) {
                goto LABEL_27;
              }
            }
            uint64_t SigningCertificateHash = __acc_auth_protocol_sendCertChainRequestOrChallenge(a1, (uint64_t)v31, v27, v37, v30, a3, a4);
          }
          uint64_t v14 = SigningCertificateHash;
          int v13 = 0;
          goto LABEL_27;
        }
      }
    }
    goto LABEL_25;
  }
  int v13 = 1;
  uint64_t v14 = 12;
LABEL_13:
  int v15 = (_DWORD *)&unk_100239000;
LABEL_27:
  if (gLogObjects && v15[100] >= 55)
  {
    unsigned __int8 v18 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    unsigned __int8 v18 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v19 = *a1;
    int v20 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67110400;
    *(_DWORD *)&uint8_t buf[4] = v19;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v20;
    *(_WORD *)&uint8_t buf[14] = 1024;
    LODWORD(v35) = v13;
    WORD2(v35) = 1024;
    *(_DWORD *)((char *)&v35 + 6) = DWORD2(v31[0]);
    WORD5(v35) = 1024;
    HIDWORD(v35) = v33;
    LOWORD(v36) = 1024;
    *(_DWORD *)((char *)&v36 + 2) = v14;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleCertificate: sessionID %d, role %d, cleanupCertData %d, certificateDataLen %d, transferFinished %d, errorNo %d \n", buf, 0x26u);
  }
  if (v13) {
    _acc_auth_protocol_cleanupCertificateData((uint64_t)v31);
  }
  return v14;
}

uint64_t __acc_auth_protocol_handleCertificateChainCert(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  unsigned __int8 v31 = 0;
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  int v6 = a2[3];
  unsigned __int8 v7 = a2[4] + 1;
  unsigned int v8 = a2[5];
  unsigned int v9 = v7 * v8;
  unsigned int v10 = (v8 + 1023) / v8;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v11 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    unsigned int v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    int v23 = *a1;
    int v24 = *((_DWORD *)a1 + 286);
    unsigned int v12 = (unsigned __int16)(v10 * v8);
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = v23;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v24;
    *(_WORD *)&uint8_t buf[14] = 1024;
    LODWORD(v33) = v7 * v8;
    WORD2(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 6) = (v8 + 1023) / v8;
    WORD5(v33) = 1024;
    HIDWORD(v33) = v12;
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[AccAuth][1Way] handleCertificateChainCert: sessionID %d, role %d, maxDataLen %d, maxCertSegments %d, maxCertSegmentedLen %d. \n", buf, 0x20u);
  }
  else
  {
    unsigned int v12 = (unsigned __int16)(v10 * v8);
  }
  if (v12 < v9)
  {
    uint64_t CertificateData = 12;
LABEL_13:
    uint64_t v14 = (int *)&unk_100239000;
    goto LABEL_14;
  }
  if (v6)
  {
    if (v8 > a1[118])
    {
      uint64_t CertificateData = 1;
      goto LABEL_13;
    }
    uint64_t v14 = (_DWORD *)&unk_100239000;
    if (a1[117] != v7)
    {
      uint64_t CertificateData = 1;
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v14 = (int *)&unk_100239000;
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v19 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v19 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      __acc_auth_protocol_handleCertificateChainCert_cold_2();
    }
    uint64_t CertificateData = acc_auth_protocol_setupSegmentedRecv(a1, 0, (uint64_t)(a1 + 120), v9, v8);
    if (CertificateData) {
      goto LABEL_14;
    }
  }
  uint64_t CertificateData = __acc_auth_protocol_processCertificateSegment(a1, a2, a3, a4, (char *)&v31);
  if (!CertificateData)
  {
    if (v31)
    {
      uint64_t CertificateData = _acc_auth_protocol_createCertificateData(*((const void **)a1 + 13), *((unsigned __int16 *)a1 + 56), (uint64_t)&v28);
      if (!CertificateData)
      {
        uint64_t CertificateData = _acc_auth_protocol_addPeerIntermediateCertificateData(a1, (uint64_t)&v28);
        if (!CertificateData)
        {
          *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v35[0] = v20;
          v35[1] = v20;
          unsigned __int8 v27 = 0;
          uint64_t CertificateData = _acc_auth_protocol_getSigningCertificateHash((uint64_t)a1, (uint64_t)&v28, v35, 0x20u, &v27);
          if ((CertificateData & 0xFFFFFFFD) == 0)
          {
            if (v27
              && (uint64_t v34 = 0,
                  *(_OWORD *)buf = 0u,
                  long long v33 = 0u,
                  int Cert = _acc_auth_protocol_certificateCacheGetCert((uint64_t)a1, v35, v27, (uint64_t)buf),
                  _acc_auth_protocol_cleanupCertificateData((uint64_t)buf),
                  Cert))
            {
              int v22 = 1;
            }
            else
            {
              uint64_t CertificateData = _acc_auth_protocol_validatePeerCertificateChain((uint64_t)a1);
              if (CertificateData) {
                goto LABEL_14;
              }
              int v22 = 0;
            }
            uint64_t CertificateData = __acc_auth_protocol_sendCertChainRequestOrChallenge(a1, (uint64_t)&v28, v22, v35, v27, a3, a4);
            long long v28 = 0u;
            long long v29 = 0u;
            uint64_t v30 = 0;
          }
        }
      }
    }
    else
    {
      uint64_t CertificateData = 0;
    }
  }
LABEL_14:
  if (gLogObjects && v14[100] >= 55)
  {
    int v15 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    int v16 = *a1;
    int v17 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = v16;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v17;
    *(_WORD *)&uint8_t buf[14] = 1024;
    LODWORD(v33) = DWORD2(v28);
    WORD2(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 6) = v31;
    WORD5(v33) = 1024;
    HIDWORD(v33) = CertificateData;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleCertificateChainCert: sessionID %d, role %d, certificateDataLen %d, transferFinished %d, errorNo %d \n", buf, 0x20u);
  }
  _acc_auth_protocol_cleanupCertificateData((uint64_t)&v28);
  return CertificateData;
}

uint64_t __acc_auth_protocol_handleResponse(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  int v6 = &unk_100239000;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned __int8 v7 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    unsigned __int8 v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    __acc_auth_protocol_handleResponse_cold_10();
  }
  int v8 = a2[2];
  long long v53 = a1;
  if (v8 == 139)
  {
    unsigned int v10 = a2 + 4;
    int v11 = a2[3];
    unsigned __int8 v12 = a2[4] + 1;
    unsigned int v13 = a2[5];
    unsigned int v14 = v13 * v12;
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v15 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v15 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      int v22 = v53;
      int v41 = *v53;
      int v42 = *((_DWORD *)v53 + 286);
      unsigned int v21 = (unsigned __int16)((v13 + 127) / v13 * v13);
      *(_DWORD *)buf = 67110656;
      int v56 = v41;
      __int16 v57 = 1024;
      int v58 = v42;
      __int16 v59 = 1024;
      int v60 = v11;
      __int16 v61 = 1024;
      int v62 = v12;
      __int16 v63 = 1024;
      int v64 = v13;
      __int16 v65 = 1024;
      int v66 = v13 * v12;
      __int16 v67 = 1024;
      int v68 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[AccAuth][1Way] handleResponse: sessionID %d, role %d, process responseDataSegment, seg (%d / %d), segLen %d, maxDataLen %d, maxResponseDataLen %d \n", buf, 0x2Cu);
    }
    else
    {
      unsigned int v21 = (unsigned __int16)((v13 + 127) / v13 * v13);
      int v22 = v53;
    }
    if (v21 < v14)
    {
      int v17 = 0;
      LOBYTE(v18) = 0;
      uint64_t updated = 12;
LABEL_32:
      int v6 = (void *)&unk_100239000;
      goto LABEL_65;
    }
    if (v11)
    {
      if (v13 > v22[118])
      {
        int v17 = 0;
        LOBYTE(v18) = 0;
        uint64_t updated = 1;
        goto LABEL_32;
      }
      int v6 = &unk_100239000;
      if (v22[117] != v12)
      {
        int v17 = 0;
        LOBYTE(v18) = 0;
        uint64_t updated = 1;
        goto LABEL_65;
      }
    }
    else
    {
      int v6 = &unk_100239000;
      if (gLogObjects && gNumLogObjects >= 55)
      {
        __int16 v25 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        __int16 v25 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      int v22 = v53;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
        __acc_auth_protocol_handleResponse_cold_7();
      }
      uint64_t v31 = acc_auth_protocol_setupSegmentedRecv(v53, 0, (uint64_t)(v53 + 120), v14, v13);
      if (v31)
      {
        uint64_t updated = v31;
        int v17 = 0;
        LOBYTE(v18) = 0;
        goto LABEL_65;
      }
    }
    char v54 = 0;
    int v37 = a2[3];
    int v50 = a2[2];
    if (v50 == 139)
    {
      unsigned int v38 = a2[5];
      uint64_t updated = acc_auth_protocol_updateSegmentReceive(v22, a2 + 6, v38, a2[1], 139, v37, a3, a4, (BOOL *)&v54);
    }
    else
    {
      if ((v37 & 0x80) != 0)
      {
        uint64_t v39 = v37 & 0x7F;
        if ((v37 & 0x7F) != 0)
        {
          int v37 = 0;
          do
          {
            int v40 = *v10++;
            int v37 = v40 | (v37 << 8);
            --v39;
          }
          while (v39);
        }
        else
        {
          int v37 = 0;
        }
      }
      uint64_t updated = 0;
      char v54 = 1;
      unsigned int v38 = v37;
      int v37 = 0;
    }
    if (gLogObjects && gNumLogObjects >= 55)
    {
      long long v43 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      long long v43 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v44 = os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG);
    int v17 = v54;
    if (v44)
    {
      int v48 = *v53;
      int v49 = *((_DWORD *)v53 + 286);
      *(_DWORD *)buf = 67110400;
      int v56 = v48;
      __int16 v57 = 1024;
      int v58 = v49;
      __int16 v59 = 1024;
      int v60 = v50 == 139;
      __int16 v61 = 1024;
      int v62 = v37;
      __int16 v63 = 1024;
      int v64 = v38;
      __int16 v65 = 1024;
      int v66 = v54;
      _os_log_debug_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "[AccAuth][1Way] processResponseSegment: sessionID %d, role %d, segmented %d, segment %d, inSegmentLen %d, transferFinished %d \n", buf, 0x26u);
      int v17 = v54;
    }
    if (gLogObjects && gNumLogObjects >= 55)
    {
      uint64_t v45 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      uint64_t v45 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      int v46 = *v53;
      int v47 = *((_DWORD *)v53 + 286);
      *(_DWORD *)buf = 67110656;
      int v56 = v46;
      __int16 v57 = 1024;
      int v58 = v47;
      __int16 v59 = 1024;
      int v60 = v50 == 139;
      __int16 v61 = 1024;
      int v62 = v37;
      __int16 v63 = 1024;
      int v64 = v38;
      __int16 v65 = 1024;
      int v66 = v54;
      __int16 v67 = 1024;
      int v68 = updated;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "[AccAuth][1Way] processResponseSegment: sessionID %d, role %d, segmented %d, segment %d, inSegmentLen %d, transferFinished %d, errorNo %d \n", buf, 0x2Cu);
    }
    LOBYTE(v18) = 0;
    int v16 = 0;
    if (updated || !v17) {
      goto LABEL_45;
    }
    uint64_t updated = 0;
    int v16 = (const UInt8 *)*((void *)v53 + 13);
    LOBYTE(v18) = v53[112];
    goto LABEL_44;
  }
  if (v8 != 11)
  {
    int v16 = 0;
    int v17 = 0;
    LOBYTE(v18) = 0;
    uint64_t updated = 22;
    goto LABEL_45;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v9 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    unsigned int v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    __acc_auth_protocol_handleResponse_cold_3();
  }
  long long v20 = a2 + 3;
  int v18 = (char)a2[3];
  int v16 = a2 + 4;
  if (v18 < 0)
  {
    uint64_t v23 = v18 & 0x7F;
    if ((v18 & 0x7F) != 0)
    {
      uint64_t v24 = v18 & 0x7F;
      do
      {
        ++v20;
        --v24;
      }
      while (v24);
      LOBYTE(v18) = *v20;
    }
    else
    {
      uint64_t v23 = 0;
      LOBYTE(v18) = 0;
    }
    uint64_t updated = 0;
    v16 += v23;
  }
  else
  {
    uint64_t updated = 0;
  }
LABEL_44:
  int v17 = 1;
LABEL_45:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v26 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v26 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  int v22 = v53;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    int v28 = *v53;
    int v29 = *((_DWORD *)v53 + 286);
    int v30 = a2[2];
    *(_DWORD *)buf = 67110144;
    int v56 = v28;
    __int16 v57 = 1024;
    int v58 = v29;
    __int16 v59 = 1024;
    int v60 = v30;
    __int16 v61 = 1024;
    int v62 = v18;
    __int16 v63 = 1024;
    int v64 = updated;
    _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "[AccAuth][1Way] handleResponse: sessionID %d, role %d, paramID1 %02x, responseLen %d, errorNo %d \n", buf, 0x20u);
    if (updated) {
      goto LABEL_65;
    }
  }
  else if (updated)
  {
    goto LABEL_65;
  }
  if (v17)
  {
    uint64_t inited = _acc_auth_protocol_verifyChallengeResponse((uint64_t)v53, v53 + 1160, v53[1192], v16, v18);
    if (!inited) {
      uint64_t inited = acc_auth_protocol_initFinishMessage(v53, 0, a3, a4);
    }
    uint64_t updated = inited;
    int v17 = 1;
  }
  else
  {
    uint64_t updated = 0;
  }
LABEL_65:
  uint64_t v32 = v6[49];
  if (v32 && gNumLogObjects >= 55)
  {
    long long v33 = *(NSObject **)(v32 + 432);
  }
  else
  {
    long long v33 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    int v34 = *v22;
    int v35 = *((_DWORD *)v22 + 286);
    *(_DWORD *)buf = 67110144;
    int v56 = v34;
    __int16 v57 = 1024;
    int v58 = v35;
    __int16 v59 = 1024;
    int v60 = v18;
    __int16 v61 = 1024;
    int v62 = v17;
    __int16 v63 = 1024;
    int v64 = updated;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "[AccAuth][1Way] handleResponse: sessionID %d, role %d, responseLen %d, transferFinished %d, errorNo %d \n", buf, 0x20u);
  }
  if (v17)
  {
    _acc_auth_protocol_handleSessionAuthenticationState(v22, updated == 0);
    *(_OWORD *)(v22 + 1289) = 0u;
    *(_OWORD *)(v22 + 1305) = 0u;
    *(_OWORD *)(v22 + 1257) = 0u;
    *(_OWORD *)(v22 + 1273) = 0u;
    *(_OWORD *)(v22 + 1225) = 0u;
    *(_OWORD *)(v22 + 1241) = 0u;
    *(_OWORD *)(v22 + 1193) = 0u;
    *(_OWORD *)(v22 + 1209) = 0u;
  }
  return updated;
}

uint64_t __acc_auth_protocol_prepareMessageWithExtLenForCertificateData(unsigned __int8 *a1, uint64_t a2, int a3, unsigned __int8 a4, unsigned __int8 *a5, unsigned int a6)
{
  unsigned int v10 = *(_DWORD *)(a2 + 8) + 6;
  if (HIWORD(v10))
  {
    uint64_t inited = 22;
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      unsigned int v13 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      unsigned int v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v23 = *a1;
      int v24 = *((_DWORD *)a1 + 286);
      int v25 = *(_DWORD *)(a2 + 8);
      int v26 = 67109888;
      int v27 = v23;
      __int16 v28 = 1024;
      int v29 = v24;
      __int16 v30 = 1024;
      int v31 = v25;
      __int16 v32 = 1024;
      unsigned int v33 = v10;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[AccAuth][1Way] prepareMessageWithExtLenForCertificateData: sessionID %d, role %d, certLen %d, payloadLen %d \n", (uint8_t *)&v26, 0x1Au);
    }
    uint64_t inited = acc_auth_protocol_initInfoCommonMessageExtendedLength(a1, a4, a5, a6, v10);
    if (!inited)
    {
      int v15 = (unsigned char *)acc_auth_protocol_messagePayload((uint64_t)a5, a6, 0, 0, 0);
      if (a3 == 2)
      {
        char v16 = 2;
      }
      else
      {
        if (a3 != 5)
        {
LABEL_16:
          uint64_t inited = 0;
          goto LABEL_17;
        }
        char v16 = 5;
      }
      _DWORD v15[2] = v16;
      v15[3] = -126;
      uint8_t v15[4] = BYTE1(*(_DWORD *)(a2 + 8));
      v15[5] = *(_DWORD *)(a2 + 8);
      memcpy(v15 + 6, *(const void **)a2, *(unsigned int *)(a2 + 8));
      goto LABEL_16;
    }
  }
LABEL_17:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v17 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v17 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    int v18 = *a1;
    int v19 = *((_DWORD *)a1 + 286);
    int v20 = *(_DWORD *)(a2 + 8);
    unsigned int v21 = acc_auth_protocol_sizeofMessage((uint64_t)a5, a6, 0, 0);
    int v26 = 67110144;
    int v27 = v18;
    __int16 v28 = 1024;
    int v29 = v19;
    __int16 v30 = 1024;
    int v31 = v20;
    __int16 v32 = 1024;
    unsigned int v33 = v21;
    __int16 v34 = 1024;
    int v35 = inited;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[AccAuth][1Way] prepareMessageWithExtLenForCertificateData: sessionID %d, role %d, certificateDataLen %d, msgSize %d, errorNo %d \n", (uint8_t *)&v26, 0x20u);
  }
  return inited;
}

uint64_t __acc_auth_protocol_sendCertChainRequestOrChallenge(unsigned __int8 *a1, uint64_t a2, int a3, const void *a4, unsigned int a5, unsigned __int8 *a6, unsigned int a7)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v14 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    unsigned int v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    __acc_auth_protocol_sendCertChainRequestOrChallenge_cold_2();
    if (a3) {
      goto LABEL_8;
    }
  }
  else if (a3)
  {
LABEL_8:
    uint64_t inited = acc_auth_protocol_initInfoCommonMessage(a1, 4u, a6, a7);
    char v16 = (unsigned char *)acc_auth_protocol_messagePayload((uint64_t)a6, a7, 0, 0, 0);
    _DWORD v16[2] = 4;
    v16[3] = a5;
    memcpy(v16 + 4, a4, a5);
    a6[3] += 34;
    goto LABEL_14;
  }
  if (a2)
  {
    size_t v17 = _acc_auth_protocol_challengeSizeForCertificate((uint64_t)a1, a2);
    a1[1192] = v17;
    uint64_t inited = _acc_auth_protocol_generateChallenge((uint64_t)a1, a2, a1 + 1160, v17);
    if (!inited) {
      uint64_t inited = acc_auth_protocol_initInfoChallengeMessage(a1, a1 + 1160, a1[1192], a6, a7);
    }
  }
  else
  {
    uint64_t inited = 1;
  }
LABEL_14:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v18 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v18 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v19 = *a1;
    int v20 = *((_DWORD *)a1 + 286);
    v22[0] = 67109632;
    v22[1] = v19;
    __int16 v23 = 1024;
    int v24 = v20;
    __int16 v25 = 1024;
    int v26 = inited;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[AccAuth][1Way] sendCertChainRequestOrChallenge: sessionID %d, role %d, errorNo %d \n", (uint8_t *)v22, 0x14u);
  }
  return inited;
}

uint64_t __acc_auth_protocol_processCertificateSegment(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4, char *a5)
{
  char v25 = 0;
  int v7 = a2[3];
  int v8 = a2[2];
  BOOL v9 = v8 == 130;
  if (v8 == 133) {
    BOOL v9 = 1;
  }
  BOOL v24 = v9;
  if (v8 == 133 || v8 == 130)
  {
    unsigned int v10 = a2[5];
    uint64_t updated = acc_auth_protocol_updateSegmentReceive(a1, a2 + 6, v10, a2[1], v8, v7, a3, a4, (BOOL *)&v25);
  }
  else
  {
    unsigned __int8 v12 = a2 + 4;
    if ((v7 & 0x80) != 0)
    {
      uint64_t v13 = v7 & 0x7F;
      if ((v7 & 0x7F) != 0)
      {
        int v7 = 0;
        unsigned int v14 = a2 + 4;
        uint64_t v15 = v13;
        do
        {
          int v16 = *v14++;
          int v7 = v16 | (v7 << 8);
          --v15;
        }
        while (v15);
      }
      else
      {
        uint64_t v13 = 0;
        int v7 = 0;
      }
      v12 += v13;
    }
    uint64_t updated = 0;
    *((void *)a1 + 13) = v12;
    *((_WORD *)a1 + 56) = v7;
    char v25 = 1;
    unsigned int v10 = v7;
    int v7 = 0;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    size_t v17 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    size_t v17 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *a1;
    int v23 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67110400;
    int v27 = v22;
    __int16 v28 = 1024;
    int v29 = v23;
    __int16 v30 = 1024;
    BOOL v31 = v24;
    __int16 v32 = 1024;
    int v33 = v7;
    __int16 v34 = 1024;
    unsigned int v35 = v10;
    __int16 v36 = 1024;
    int v37 = v25;
    _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[AccAuth][1Way] processCertificateSegment: sessionID %d, role %d, segmented %d, segment %d, inCertDataLen %d, transferFinished %d \n", buf, 0x26u);
    if (!a5) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (a5) {
LABEL_21:
  }
    *a5 = v25;
LABEL_22:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v18 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v18 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v19 = *a1;
    int v20 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67110656;
    int v27 = v19;
    __int16 v28 = 1024;
    int v29 = v20;
    __int16 v30 = 1024;
    BOOL v31 = v24;
    __int16 v32 = 1024;
    int v33 = v7;
    __int16 v34 = 1024;
    unsigned int v35 = v10;
    __int16 v36 = 1024;
    int v37 = v25;
    __int16 v38 = 1024;
    int v39 = updated;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[AccAuth][1Way] processCertificateSegment: sessionID %d, role %d, segmented %d, segment %d, inCertDataLen %d, transferFinished %d, errorNo %d \n", buf, 0x2Cu);
  }
  return updated;
}

void OUTLINED_FUNCTION_3_14(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_5_6(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x14u);
}

void OUTLINED_FUNCTION_6_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xEu);
}

void OUTLINED_FUNCTION_8_4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void requestAuthorizationForCertSerial(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = __requestAuthorizationForCertSerial_block_invoke;
  v8[3] = &unk_100217DA0;
  id v9 = a4;
  id v7 = v9;
  +[ACCAuthorizationManager requestAuthorizationForCertSerial:a1 withName:a2 providesPower:a3 completionHandler:v8];
}

uint64_t __requestAuthorizationForCertSerial_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t platform_hid_register_descriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = +[ACCHIDServer sharedServer];
  [v6 registerHIDDescriptor:a1 componentID:a2 dictionary:a3];

  return 1;
}

uint64_t platform_hid_unregister_descriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[ACCHIDServer sharedServer];
  [v4 unregisterHIDDescriptor:a1 componentID:a2];

  return 1;
}

uint64_t platform_hid_unregister_all_descriptors(uint64_t a1)
{
  uint64_t v2 = +[ACCHIDServer sharedServer];
  [v2 unregisterAllDescriptors:a1];

  return 1;
}

uint64_t platform_hid_in_report(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = +[ACCHIDServer sharedServer];
  [v6 inReport:a1 componentID:a2 report:a3];

  return 1;
}

uint64_t platform_hid_get_report_response(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10 = +[ACCHIDServer sharedServer];
  [v10 getReportResponse:a1 componentID:a2 reportType:a3 reportID:a4 report:a5];

  return 1;
}

uint64_t platform_hid_send_out_report(const void *a1, const void *a2, const void *a3)
{
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, @"ComponentID", a2);
  CFDictionaryAddValue(Mutable, @"Report", a3);
  uint64_t v7 = accFeatureHandlers_invokeHandler(a1, 9, (uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v7;
}

uint64_t platform_hid_send_get_report(const void *a1, const void *a2, const void *a3, const void *a4)
{
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, @"ComponentID", a2);
  CFDictionaryAddValue(Mutable, @"ReportType", a3);
  CFDictionaryAddValue(Mutable, @"ReportID", a4);
  uint64_t v9 = accFeatureHandlers_invokeHandler(a1, 10, (uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v9;
}

uint64_t platform_hid_send_component_update(const void *a1, const void *a2, char a3)
{
  char valuePtr = a3;
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
  CFDictionaryAddValue(Mutable, @"ComponentID", a2);
  CFDictionaryAddValue(Mutable, @"Enabled", v6);
  uint64_t v7 = accFeatureHandlers_invokeHandler(a1, 11, (uint64_t)Mutable);
  if (v6) {
    CFRelease(v6);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v7;
}

void platform_hid_incrementUserCount()
{
  BOOL v0 = +[ACCHIDServer sharedServer];
  [v0 incrementUserCount];

  uint64_t v1 = +[ACCHIDServer sharedServer];
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = +[ACCFeaturePluginManager sharedManager];
    [v3 startPlugInsWithClasses:&off_100223290];
  }
}

void platform_hid_decrementUserCount()
{
  id v0 = +[ACCHIDServer sharedServer];
  [v0 decrementUserCount];
}

pthread_mutex_t **ea_control_openSessionHandler(pthread_mutex_t **result, CFDictionaryRef theDict)
{
  if (result)
  {
    unsigned int v2 = result;
    uint64_t result = 0;
    if (theDict)
    {
      if (*v2)
      {
        uint64_t result = (pthread_mutex_t **)CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionUUIDKey);
        if (result)
        {
          CFNullRef v3 = (const __CFNull *)result;
          if (gLogObjects && gNumLogObjects >= 54)
          {
            uint64_t v4 = *(NSObject **)(gLogObjects + 424);
          }
          else
          {
            uint64_t v4 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_bluetooth_copyNameForMacAddress_cold_2();
            }
          }
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v5 = *(void *)&(*v2)->__opaque[8];
            int v7 = 138412546;
            uint64_t v8 = v5;
            __int16 v9 = 2112;
            CFNullRef v10 = v3;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Opening EA session for endpoint: %@ (sessionUUID: %@)", (uint8_t *)&v7, 0x16u);
          }
          int v6 = acc_endpoint_setProperty(*v2, kCFACCProperties_Endpoint_EA_SessionUUID, v3);
          return (pthread_mutex_t **)(v6 & acc_endpoint_setProperty(*v2, kCFACCProperties_Endpoint_EA_SessionOpen, kCFBooleanTrue));
        }
      }
    }
  }
  return result;
}

pthread_mutex_t **ea_control_closeSessionHandler(pthread_mutex_t **result, CFDictionaryRef theDict)
{
  if (result)
  {
    unsigned int v2 = result;
    if (*result)
    {
      uint64_t result = (pthread_mutex_t **)CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionUUIDKey);
      if (result)
      {
        CFNullRef v3 = result;
        if (gLogObjects && gNumLogObjects >= 54)
        {
          uint64_t v4 = *(NSObject **)(gLogObjects + 424);
        }
        else
        {
          uint64_t v4 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_bluetooth_copyNameForMacAddress_cold_2();
          }
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v5 = *(void *)&(*v2)->__opaque[8];
          int v6 = 138412546;
          uint64_t v7 = v5;
          __int16 v8 = 2112;
          __int16 v9 = v3;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Closing EA session for endpoint: %@ (sessionUUID: %@)", (uint8_t *)&v6, 0x16u);
        }
        return (pthread_mutex_t **)acc_endpoint_setProperty(*v2, kCFACCProperties_Endpoint_EA_SessionOpen, kCFBooleanFalse);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t iap2_CarPlayStartSession(uint64_t a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableArrayRef v5 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFStringRef v6 = 0;
  uint64_t v7 = 0;
  if (!a1)
  {
    CFStringRef cf = 0;
    CFNumberRef v86 = 0;
    CFStringRef v82 = 0;
    CFStringRef v79 = 0;
    CFStringRef v80 = 0;
    CFStringRef v8 = 0;
    CFStringRef v9 = 0;
    CFNumberRef v10 = 0;
    goto LABEL_101;
  }
  uint64_t v75 = a1;
  CFStringRef cf = 0;
  CFNumberRef v86 = 0;
  CFStringRef v82 = 0;
  CFStringRef v79 = 0;
  CFStringRef v80 = 0;
  CFStringRef v8 = 0;
  CFStringRef v9 = 0;
  CFNumberRef v10 = 0;
  if (!a2) {
    goto LABEL_101;
  }
  if (iAP2MsgGetMsgID(a2) != 17153)
  {
    uint64_t v7 = 0;
    CFStringRef v6 = 0;
    CFStringRef cf = 0;
    CFNumberRef v86 = 0;
    CFStringRef v82 = 0;
    CFStringRef v79 = 0;
    CFStringRef v80 = 0;
    CFStringRef v8 = 0;
    CFStringRef v9 = 0;
    CFNumberRef v10 = 0;
    goto LABEL_101;
  }
  unint64_t v81 = v5;
  CFArrayRef theArray = Mutable;
  kdebug_trace();
  if (gLogObjects && gNumLogObjects >= 52)
  {
    int v11 = *(NSObject **)(gLogObjects + 408);
  }
  else
  {
    int v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 17153;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "iap2_CarPlayStartSession: Received message 0x%x", buf, 8u);
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  int v90 = -1431655766;
  if (!FirstParam)
  {
    CFStringRef v84 = 0;
    CFStringRef cf = 0;
    CFNumberRef v86 = 0;
    CFStringRef v82 = 0;
    CFNumberRef v83 = 0;
    CFNumberRef v77 = 0;
    CFStringRef v78 = 0;
    CFStringRef v79 = 0;
    CFStringRef v80 = 0;
    CFNumberRef v88 = 0;
    CFStringRef v89 = 0;
    uint64_t v76 = 0;
LABEL_93:
    unsigned int v53 = platform_externalAccesory_legacyConnectionUUIDForPrimaryEndpointUUID(*(void **)(v75 + 8));
    if (gLogObjects && gNumLogObjects >= 52)
    {
      char v54 = *(NSObject **)(gLogObjects + 408);
      CFMutableArrayRef Mutable = theArray;
      CFNumberRef v10 = v88;
      uint64_t v55 = (uint64_t)v80;
      CFMutableArrayRef v5 = v81;
      uint64_t v56 = (uint64_t)v79;
    }
    else
    {
      char v54 = &_os_log_default;
      CFMutableArrayRef Mutable = theArray;
      CFNumberRef v10 = v88;
      uint64_t v55 = (uint64_t)v80;
      CFMutableArrayRef v5 = v81;
      uint64_t v56 = (uint64_t)v79;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    CFStringRef v9 = v89;
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138415618;
      *(void *)&uint8_t buf[4] = Mutable;
      __int16 v92 = 2112;
      CFMutableArrayRef v93 = v5;
      __int16 v94 = 2112;
      CFStringRef v95 = v84;
      __int16 v96 = 2112;
      CFStringRef v97 = cf;
      __int16 v98 = 2112;
      CFNumberRef v99 = v86;
      __int16 v100 = 2112;
      CFNumberRef v101 = v83;
      __int16 v102 = 2112;
      CFNumberRef v103 = v77;
      __int16 v104 = 2112;
      CFStringRef v105 = v82;
      __int16 v106 = 2112;
      uint64_t v107 = v56;
      __int16 v108 = 2112;
      uint64_t v109 = v55;
      __int16 v110 = 2112;
      CFStringRef v111 = v78;
      __int16 v112 = 2112;
      CFStringRef v113 = v89;
      __int16 v114 = 2112;
      CFNumberRef v115 = v10;
      __int16 v116 = 2112;
      uint64_t v117 = v76;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "iap2_CarPlayStartSession: call platform_CarPlay_startSession, usbIP %@, wifiIP %@, ssid %@, pass %@, securityType %@, channel %@, port %@, deviceID %@, pubKey %@, srcVer %@, sdkVer %@, assetID %@, assetVer %@, mutualAuth %@", buf, 0x8Eu);
    }
    unsigned int v57 = v53;
    CFStringRef v8 = v78;
    platform_CarPlay_startSession(v57, (uint64_t)Mutable, (uint64_t)v5, (uint64_t)v84, (uint64_t)cf, (uint64_t)v86, (uint64_t)v83, (uint64_t)v77, (uint64_t)v82, v56, v55, (uint64_t)v78, (uint64_t)v89, (uint64_t)v10, v76);
    CFStringRef v6 = v84;
    uint64_t v7 = 1;
    goto LABEL_101;
  }
  uint64_t v13 = (unsigned __int16 *)FirstParam;
  uint64_t v76 = 0;
  CFNumberRef v77 = 0;
  CFNumberRef v88 = 0;
  CFStringRef v89 = 0;
  CFStringRef v78 = 0;
  CFStringRef v79 = 0;
  CFStringRef v80 = 0;
  CFStringRef v82 = 0;
  CFNumberRef v83 = 0;
  CFStringRef cf = 0;
  CFNumberRef v86 = 0;
  CFStringRef v84 = 0;
  while (2)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)v13);
    switch(ParamID)
    {
      case 0:
        unint64_t v15 = iAP2MsgGetFirstParam(a2, v13);
        if (!v15) {
          goto LABEL_90;
        }
        NextParam = (unsigned __int16 *)v15;
        while (2)
        {
          int v17 = iAP2MsgGetParamID((uint64_t)NextParam);
          if (v17)
          {
            int v18 = v17;
            uint64_t v19 = gLogObjects;
            int v20 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 52)
            {
              unsigned int v21 = *(NSObject **)(gLogObjects + 408);
            }
            else
            {
              unsigned int v21 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)&uint8_t buf[4] = v19;
                __int16 v92 = 1024;
                LODWORD(v93) = v20;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                unsigned int v21 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v18;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Unrecognized USB group paramID:0x%04X", buf, 8u);
            }
          }
          else
          {
            DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)&v90);
            if (v90)
            {
              __int16 v61 = logObjectForModule_0();
              if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
                iap2_CarPlayStartSession_cold_2(a2);
              }
              goto LABEL_152;
            }
            CFStringRef v23 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
            if (v23)
            {
              CFStringRef v24 = v23;
              CFArrayAppendValue(theArray, v23);
              CFRelease(v24);
            }
          }
          NextParam = iAP2MsgGetNextParam(a2, v13, NextParam);
          if (!NextParam) {
            goto LABEL_90;
          }
          continue;
        }
      case 1:
        unint64_t v28 = iAP2MsgGetFirstParam(a2, v13);
        if (!v28) {
          goto LABEL_90;
        }
        int v29 = (unsigned __int16 *)v28;
        while (2)
        {
          int v30 = iAP2MsgGetParamID((uint64_t)v29);
          switch(v30)
          {
            case 0:
              BOOL v31 = iAP2MsgGetDataAsString(v29, (BOOL *)&v90);
              if (!v90)
              {
                CFStringRef v84 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v31, 0x8000100u);
                goto LABEL_53;
              }
              int v64 = logObjectForModule_0();
              if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
                iap2_CarPlayStartSession_cold_3(a2);
              }
              goto LABEL_152;
            case 1:
              unsigned int v35 = iAP2MsgGetDataAsString(v29, (BOOL *)&v90);
              if (v90)
              {
                __int16 v65 = logObjectForModule_0();
                if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
                  iap2_CarPlayStartSession_cold_4(a2);
                }
                goto LABEL_152;
              }
              CFStringRef cf = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v35, 0x8000100u);
              goto LABEL_53;
            case 2:
              *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
              *(void *)buf = iAP2MsgGetDataAsU8(v29, &v90);
              if (v90)
              {
                int v66 = logObjectForModule_0();
                if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
                  iap2_CarPlayStartSession_cold_5(a2);
                }
                goto LABEL_152;
              }
              CFNumberRef v83 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, buf);
              goto LABEL_53;
            case 3:
              __int16 v36 = iAP2MsgGetDataAsString(v29, (BOOL *)&v90);
              if (v90)
              {
                __int16 v67 = logObjectForModule_0();
                if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
                  iap2_CarPlayStartSession_cold_6(a2);
                }
                goto LABEL_152;
              }
              CFStringRef v37 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v36, 0x8000100u);
              if (v37)
              {
                CFStringRef v38 = v37;
                CFArrayAppendValue(v81, v37);
                CFRelease(v38);
              }
              goto LABEL_53;
            case 4:
              buf[0] = -86;
              buf[0] = iAP2MsgGetDataAsU8(v29, &v90);
              if (!v90)
              {
                CFNumberRef v86 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
LABEL_53:
                int v29 = iAP2MsgGetNextParam(a2, v13, v29);
                if (!v29) {
                  goto LABEL_90;
                }
                continue;
              }
              int v68 = logObjectForModule_0();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
                iap2_CarPlayStartSession_cold_7(a2);
              }
              break;
            default:
              uint64_t v32 = gLogObjects;
              int v33 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 52)
              {
                __int16 v34 = *(NSObject **)(gLogObjects + 408);
              }
              else
              {
                __int16 v34 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = v32;
                  __int16 v92 = 1024;
                  LODWORD(v93) = v33;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  __int16 v34 = &_os_log_default;
                }
              }
              if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v30;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Unrecognized Wireless group paramID:0x%04X", buf, 8u);
              }
              goto LABEL_53;
          }
          goto LABEL_152;
        }
      case 2:
        *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
        *(void *)buf = iAP2MsgGetDataAsU32(v13, &v90);
        if (v90)
        {
          unsigned int v69 = logObjectForModule_0();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_3(a2);
          }
          goto LABEL_152;
        }
        CFNumberRef v77 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, buf);
        goto LABEL_90;
      case 3:
        int v39 = iAP2MsgGetDataAsString(v13, (BOOL *)&v90);
        if (v90)
        {
          unsigned int v70 = logObjectForModule_0();
          if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_4(a2);
          }
          goto LABEL_152;
        }
        CFStringRef v82 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v39, 0x8000100u);
        goto LABEL_90;
      case 4:
        int v40 = iAP2MsgGetDataAsString(v13, (BOOL *)&v90);
        if (v90)
        {
          unint64_t v71 = logObjectForModule_0();
          if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_5(a2);
          }
          goto LABEL_152;
        }
        CFStringRef v79 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v40, 0x8000100u);
        goto LABEL_90;
      case 5:
        int v41 = iAP2MsgGetDataAsString(v13, (BOOL *)&v90);
        if (v90)
        {
          unint64_t v72 = logObjectForModule_0();
          if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR)) {
            iap2_CarPlayStartSession_cold_11(a2);
          }
          goto LABEL_152;
        }
        CFStringRef v80 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v41, 0x8000100u);
        goto LABEL_90;
      case 6:
        int v42 = iAP2MsgGetDataAsString(v13, (BOOL *)&v90);
        if (v90)
        {
          unsigned int v73 = logObjectForModule_0();
          if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
            iap2_CarPlayStartSession_cold_12(a2);
          }
          goto LABEL_152;
        }
        CFStringRef v78 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v42, 0x8000100u);
        goto LABEL_90;
      case 7:
        unint64_t v43 = iAP2MsgGetFirstParam(a2, v13);
        if (!v43) {
          goto LABEL_90;
        }
        BOOL v44 = (unsigned __int16 *)v43;
        while (2)
        {
          int v45 = iAP2MsgGetParamID((uint64_t)v44);
          if (v45 == 1)
          {
            *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
            *(void *)buf = iAP2MsgGetDataAsU32(v44, &v90);
            if (v90)
            {
              __int16 v63 = logObjectForModule_0();
              if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
                iap2_CarPlayStartSession_cold_14(a2);
              }
              goto LABEL_152;
            }
            CFNumberRef v88 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, buf);
          }
          else
          {
            int v46 = v45;
            if (v45)
            {
              uint64_t v48 = gLogObjects;
              int v49 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 52)
              {
                int v50 = *(NSObject **)(gLogObjects + 408);
              }
              else
              {
                int v50 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = v48;
                  __int16 v92 = 1024;
                  LODWORD(v93) = v49;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  int v50 = &_os_log_default;
                }
              }
              if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v46;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "Unrecognized asset group paramID:0x%04X", buf, 8u);
              }
            }
            else
            {
              int v47 = iAP2MsgGetDataAsString(v44, (BOOL *)&v90);
              if (v90)
              {
                int v62 = logObjectForModule_0();
                if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
                  iap2_CarPlayStartSession_cold_13(a2);
                }
                goto LABEL_152;
              }
              CFStringRef v89 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v47, 0x8000100u);
            }
          }
          BOOL v44 = iAP2MsgGetNextParam(a2, v13, v44);
          if (!v44) {
            goto LABEL_90;
          }
          continue;
        }
      case 8:
        BOOL DataAsBool = iAP2MsgGetDataAsBool(v13, (BOOL *)&v90);
        if (!v90)
        {
          CFBooleanRef v52 = kCFBooleanTrue;
          if (!DataAsBool) {
            CFBooleanRef v52 = kCFBooleanFalse;
          }
          uint64_t v76 = (uint64_t)v52;
LABEL_90:
          uint64_t v13 = iAP2MsgGetNextParam(a2, 0, v13);
          if (!v13) {
            goto LABEL_93;
          }
          continue;
        }
        unint64_t v74 = logObjectForModule_0();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
          iap2_CarPlayStartSession_cold_15(a2);
        }
LABEL_152:
        uint64_t v7 = 0;
        CFMutableArrayRef Mutable = theArray;
        CFNumberRef v10 = v88;
        CFMutableArrayRef v5 = v81;
        CFStringRef v9 = v89;
        CFStringRef v8 = v78;
        CFStringRef v6 = v84;
LABEL_101:
        if (Mutable)
        {
          CFStringRef v58 = v6;
          CFRelease(Mutable);
          CFStringRef v6 = v58;
        }
        if (v5)
        {
          CFStringRef v59 = v6;
          CFRelease(v5);
          CFStringRef v6 = v59;
        }
        if (v6) {
          CFRelease(v6);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (v86) {
          CFRelease(v86);
        }
        if (v82) {
          CFRelease(v82);
        }
        if (v79) {
          CFRelease(v79);
        }
        if (v80) {
          CFRelease(v80);
        }
        if (v8) {
          CFRelease(v8);
        }
        if (v9) {
          CFRelease(v9);
        }
        if (v10) {
          CFRelease(v10);
        }
        return v7;
      default:
        uint64_t v25 = gLogObjects;
        int v26 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 52)
        {
          int v27 = *(NSObject **)(gLogObjects + 408);
        }
        else
        {
          int v27 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v25;
            __int16 v92 = 1024;
            LODWORD(v93) = v26;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            int v27 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = ParamID;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
        }
        goto LABEL_90;
    }
  }
}

uint64_t iap2_CarPlayAvailability(uint64_t *a1, const __CFDictionary *a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (gLogObjects && gNumLogObjects >= 52)
    {
      CFMutableArrayRef v5 = *(NSObject **)(gLogObjects + 408);
    }
    else
    {
      CFMutableArrayRef v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[1];
      int v18 = 138412546;
      uint64_t v19 = v6;
      __int16 v20 = 2112;
      CFDictionaryRef v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "iap2_CarPlayAvailability: %@, parameters %@", (uint8_t *)&v18, 0x16u);
    }
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a2, @"wiredAvailable");
    CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(a2, @"usbIdentifier");
    CFBooleanRef v9 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"wirelessAvailable");
    CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(a2, @"bluetoothIdentifier");
    CFBooleanRef v11 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"themeAssetsAvailable");
    if (gLogObjects && gNumLogObjects >= 52)
    {
      unsigned __int8 v12 = *(NSObject **)(gLogObjects + 408);
    }
    else
    {
      unsigned __int8 v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = a1[1];
      int v18 = 138413570;
      uint64_t v19 = v13;
      __int16 v20 = 2112;
      CFDictionaryRef v21 = Value;
      __int16 v22 = 2112;
      CFStringRef v23 = v8;
      __int16 v24 = 2112;
      CFBooleanRef v25 = v9;
      __int16 v26 = 2112;
      CFStringRef v27 = v10;
      __int16 v28 = 2112;
      CFBooleanRef v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "iap2_CarPlayAvailability: %@, wiredAvailable %@, usbIdentifier %@, wirelessAvailable %@, bluetoothIdentifier %@, themeAssetsAvailable %@", (uint8_t *)&v18, 0x3Eu);
    }
    if ((unint64_t)Value | (unint64_t)v9)
    {
      iAP2MsgInit((uint64_t)(a1 + 15), 17152, a1[24], 0xFFFF, 0, 0);
      if (Value)
      {
        unsigned int v14 = iAP2MsgAddGroupParam((uint64_t)(a1 + 15), 0);
        iAP2MsgAddCFBooleanParam((uint64_t)(a1 + 15), (uint64_t)v14, 0, Value);
        if (v8) {
          iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), (uint64_t)v14, 1, v8);
        }
      }
      if (v9)
      {
        unint64_t v15 = iAP2MsgAddGroupParam((uint64_t)(a1 + 15), 1);
        iAP2MsgAddCFBooleanParam((uint64_t)(a1 + 15), (uint64_t)v15, 0, v9);
        if (v10) {
          iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), (uint64_t)v15, 1, v10);
        }
      }
      if (v11)
      {
        int v16 = iAP2MsgAddGroupParam((uint64_t)(a1 + 15), 2);
        iAP2MsgAddCFBooleanParam((uint64_t)(a1 + 15), (uint64_t)v16, 0, v11);
      }
      uint64_t v2 = iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
      kdebug_trace();
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t iAP2_carPlayConnectionType(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(int *)(*(void *)result + 24);
    if (v1 > 8) {
      return 0;
    }
    else {
      return dword_1001B8400[v1];
    }
  }
  return result;
}

void iAP2_carPlaySendAllConnectionEvents(uint64_t a1)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 0);
  int v3 = iAP2_carPlayConnectionType(a1);
  if (gLogObjects && gNumLogObjects >= 52)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 408);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 456);
    uint64_t v6 = *(void *)(Feature + 80);
    uint64_t v7 = *(void *)(Feature + 88);
    int v8 = 134218496;
    uint64_t v9 = v5;
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    __int16 v12 = 2048;
    uint64_t v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Accessory identification accepted and identified for CarPlay. Sending iAP connection times: %f, %f, %f", (uint8_t *)&v8, 0x20u);
  }
  platform_CarPlay_sendConnectionEvent(0, v3);
  platform_CarPlay_sendConnectionEvent(1, v3);
  platform_CarPlay_sendConnectionEvent(2, v3);
}

unsigned char *_createFeature_10(unsigned char *result)
{
  if (result)
  {
    uint64_t result = malloc_type_calloc(1uLL, 2uLL, 0x1000040BDFB0063uLL);
    if (result) {
      result[1] = 0;
    }
  }
  return result;
}

uint64_t _destroyFeature_10(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      free(v2);
      *a1 = 0;
    }
  }
  return 0;
}

uint64_t _checkIdentificationInfo_8(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&kMsgCarPlayConnectionRequestList, 2u, &v6);
  if (v2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v6 == 0;
  }
  if (!v3)
  {
    iap2_features_createFeature(a1, 0x1Au);
    iap2_identification_setIdentifiedForFeature(a1, 0x1Au);
    if (gLogObjects && gNumLogObjects >= 52)
    {
      uint64_t v4 = *(NSObject **)(gLogObjects + 408);
    }
    else
    {
      uint64_t v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      _checkIdentificationInfo_cold_1_2(v4);
    }
  }
  return v2;
}

void OUTLINED_FUNCTION_1_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x14u);
}

id _getPowerPluginInstance()
{
  id v0 = +[ACCPlatformPluginManager sharedManager];
  uint64_t v1 = [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformPowerPluginProtocol fallbackToTransportPlugins:1];

  return v1;
}

id _getIOKitPowerPluginInstance()
{
  id v0 = +[ACCPlatformPluginManager sharedManager];
  uint64_t v1 = [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformIOKitPowerPluginProtocol fallbackToTransportPlugins:1];

  return v1;
}

BOOL _isModelNumberConnected(const void *a1, void *a2)
{
  BOOL v3 = a2;
  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  BOOL v9 = EndpointWithUUID
    && *EndpointWithUUID
    && (uint64_t v5 = (const void *)EndpointWithUUID[1]) != 0
    && (CFSetRef ConnectionWithUUID = acc_manager_getConnectionWithUUID(v5)) != 0
    && (uint64_t AccessoryInfo = acc_connection_getAccessoryInfo((uint64_t)ConnectionWithUUID)) != 0
    && (CFStringRef v8 = *(const __CFString **)(AccessoryInfo + 16)) != 0
    && CFEqual(v8, v3);

  return v9;
}

void _isPowerDuringSleepForApplePencil(const void *a1)
{
  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  if (EndpointWithUUID
    && (BOOL v3 = (const void *)EndpointWithUUID[2]) != 0
    && _isModelNumberConnected(v3, @"A1603")
    && platform_systemInfo_isApplePencilSupported())
  {
    uint64_t v4 = +[ACCPlatformPowerManager sharedManager];
    [v4 addAccessoryForEndpointUID:a1 andBitmask:0 andOldBitmask:0];

    uint64_t v5 = +[ACCPlatformPowerManager sharedManager];
    char v6 = [v5 powerAccessories];
    uint64_t v7 = [v6 objectForKey:a1];

    if (!v7)
    {
      int v18 = logObjectForModule_16();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        _isPowerDuringSleepForApplePencil_cold_1(v18);
      }
      uint64_t v7 = 0;
      goto LABEL_26;
    }
    CFStringRef v8 = _getPowerPluginInstance();
    BOOL v9 = [v7 connectionUID];
    unsigned int v10 = [v8 sleepPowerCurrentLimitInmA:v9];

    uint64_t v11 = _getIOKitPowerPluginInstance();
    unsigned int v12 = [v11 getBatteryChargeLevel];

    if (gLogObjects && gNumLogObjects >= 8)
    {
      uint64_t v13 = *(id *)(gLogObjects + 56);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v13 = &_os_log_default;
      id v14 = &_os_log_default;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      int v21 = 67109376;
      LODWORD(v22[0]) = v10;
      WORD2(v22[0]) = 1024;
      *(_DWORD *)((char *)v22 + 6) = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[#Power] sleepPowerCurrentLimitInmA: %d, current iOS battery level percentage: %d", (uint8_t *)&v21, 0xEu);
    }

    if (v10 == 100 && v12 >= 0xB)
    {
      platform_sleepAssertion_createForApplePencil();
      [v7 setHoldingApplePencilSleepAssertion:1];
      unint64_t v15 = +[NSNotificationCenter defaultCenter];
      [v15 addObserver:v7 selector:"powerInfoChangeNotificationHandler:" name:ACCPlatformIOKitPowerPlugin_BatteryChargeLevel object:0];

      int v16 = _getIOKitPowerPluginInstance();
      int v17 = [v16 createBatteryNotificationClient];
      [v7 setApplePencilBatteryNotificationClientUUID:v17];

      if (gLogObjects && gNumLogObjects >= 8)
      {
        int v18 = *(id *)(gLogObjects + 56);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v18 = &_os_log_default;
        id v19 = &_os_log_default;
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        __int16 v20 = [v7 applePencilBatteryNotificationClientUUID];
        int v21 = 138412290;
        v22[0] = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[#Power] Created applePencilBatteryNotificationClientUUID: %@", (uint8_t *)&v21, 0xCu);
      }
LABEL_26:
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
}

id logObjectForModule_16()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 8;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    BOOL v1 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v1) {
      logObjectForModule_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
    }
    id v10 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  else
  {
    id v10 = *(id *)(gLogObjects + 56);
  }

  return v10;
}

void _isDisablingPowerDuringSleepForApplePencil(uint64_t a1)
{
  uint64_t v2 = +[ACCPlatformPowerManager sharedManager];
  uint64_t v3 = [v2 powerAccessories];
  id v7 = [v3 objectForKey:a1];

  if ([v7 holdingApplePencilSleepAssertion])
  {
    platform_sleepAssertion_destroyForApplePencil();
    [v7 setHoldingApplePencilSleepAssertion:0];
  }
  uint64_t v4 = [v7 applePencilBatteryNotificationClientUUID];

  if (v4)
  {
    uint64_t v5 = _getIOKitPowerPluginInstance();
    uint64_t v6 = [v7 applePencilBatteryNotificationClientUUID];
    [v5 destroyBatteryNotificationsForClient:v6];

    [v7 setApplePencilBatteryNotificationClientUUID:0];
  }
}

uint64_t platform_power_sendPowerUpdate(const void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v34 = 0;
  unsigned int v35 = &v34;
  uint64_t v36 = 0x2020000000;
  char v37 = 1;
  if (gLogObjects) {
    BOOL v10 = gNumLogObjects < 8;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v12 = &_os_log_default;
    id v11 = &_os_log_default;
  }
  else
  {
    unsigned int v12 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316674;
    int v39 = "platform_power_sendPowerUpdate";
    __int16 v40 = 1024;
    *(_DWORD *)int v41 = 286;
    *(_WORD *)&v41[4] = 2112;
    *(void *)&v41[6] = a1;
    __int16 v42 = 1024;
    int v43 = a2;
    __int16 v44 = 1024;
    int v45 = a3;
    __int16 v46 = 1024;
    int v47 = a4;
    __int16 v48 = 1024;
    int v49 = a5;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[#Power] %s:%d endpointUID %@, powerUpdateType %d: %d, powerUpdateType2 %d: %d", buf, 0x34u);
  }

  if (!acc_userDefaults_BOOLForKey(@"DisablePowerUpdateForCurrentDraw"))
  {
LABEL_54:
    int v21 = a4;
    int v22 = a5;
    a5 = a3;
    a4 = a2;
    if (!a1) {
      goto LABEL_72;
    }
    goto LABEL_70;
  }
  if (a4)
  {
    if (a2)
    {
      if (a4 != 1) {
        goto LABEL_50;
      }
      if (gLogObjects && gNumLogObjects >= 8)
      {
        uint64_t v13 = *(id *)(gLogObjects + 56);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v13 = &_os_log_default;
        id v19 = &_os_log_default;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316418;
        int v39 = "platform_power_sendPowerUpdate";
        __int16 v40 = 2112;
        *(void *)int v41 = a1;
        *(_WORD *)&v41[8] = 1024;
        *(_DWORD *)&v41[10] = 1;
        __int16 v42 = 1024;
        int v43 = 13;
        __int16 v44 = 1024;
        int v45 = a5;
        __int16 v46 = 1024;
        int v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[#Power] %s: endpoint: %@, updateType2: %d -> %d, updateValue2: %u -> %d", buf, 0x2Eu);
      }
      a4 = a2;
      a5 = a3;
      goto LABEL_49;
    }
LABEL_27:
    if (gLogObjects && gNumLogObjects >= 8)
    {
      int v16 = *(id *)(gLogObjects + 56);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v16 = &_os_log_default;
      id v17 = &_os_log_default;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316418;
      int v39 = "platform_power_sendPowerUpdate";
      __int16 v40 = 2112;
      *(void *)int v41 = a1;
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)&v41[10] = 0;
      __int16 v42 = 1024;
      int v43 = a4;
      __int16 v44 = 1024;
      int v45 = a3;
      __int16 v46 = 1024;
      int v47 = a5;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[#Power] %s: endpoint: %@, updateType: %d -> %d, updateValue: %u -> %d", buf, 0x2Eu);
    }

    if (gLogObjects && gNumLogObjects >= 8)
    {
      uint64_t v13 = *(id *)(gLogObjects + 56);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v13 = &_os_log_default;
      id v18 = &_os_log_default;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316418;
      int v39 = "platform_power_sendPowerUpdate";
      __int16 v40 = 2112;
      *(void *)int v41 = a1;
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)&v41[10] = a4;
      __int16 v42 = 1024;
      int v43 = 13;
      __int16 v44 = 1024;
      int v45 = a5;
      __int16 v46 = 1024;
      int v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[#Power] %s: endpoint: %@, updateType2: %d -> %d, updateValue2: %u -> %d", buf, 0x2Eu);
    }
LABEL_49:

    a2 = a4;
    a3 = a5;
    a4 = 13;
    a5 = 0;
    goto LABEL_50;
  }
  if (gLogObjects && gNumLogObjects >= 8)
  {
    id v14 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v14 = &_os_log_default;
    id v15 = &_os_log_default;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316418;
    int v39 = "platform_power_sendPowerUpdate";
    __int16 v40 = 2112;
    *(void *)int v41 = a1;
    *(_WORD *)&v41[8] = 1024;
    *(_DWORD *)&v41[10] = 0;
    __int16 v42 = 1024;
    int v43 = 13;
    __int16 v44 = 1024;
    int v45 = a5;
    __int16 v46 = 1024;
    int v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[#Power] %s: endpoint: %@, updateType2: %d -> %d, updateValue2: %u -> %d", buf, 0x2Eu);
  }

  a5 = 0;
  a4 = 13;
  if (!a2) {
    goto LABEL_27;
  }
LABEL_50:
  if (a2 != 1) {
    goto LABEL_54;
  }
  if (gLogObjects && gNumLogObjects >= 8)
  {
    __int16 v20 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v20 = &_os_log_default;
    id v23 = &_os_log_default;
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316418;
    int v39 = "platform_power_sendPowerUpdate";
    __int16 v40 = 2112;
    *(void *)int v41 = a1;
    *(_WORD *)&v41[8] = 1024;
    *(_DWORD *)&v41[10] = 1;
    __int16 v42 = 1024;
    int v43 = a4;
    __int16 v44 = 1024;
    int v45 = a3;
    __int16 v46 = 1024;
    int v47 = a5;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[#Power] %s: endpoint: %@, updateType: %d -> %d, updateValue: %u -> %d", buf, 0x2Eu);
  }

  if (gLogObjects && gNumLogObjects >= 8)
  {
    __int16 v24 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v24 = &_os_log_default;
    id v25 = &_os_log_default;
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316418;
    int v39 = "platform_power_sendPowerUpdate";
    __int16 v40 = 2112;
    *(void *)int v41 = a1;
    *(_WORD *)&v41[8] = 1024;
    *(_DWORD *)&v41[10] = a4;
    __int16 v42 = 1024;
    int v43 = 13;
    __int16 v44 = 1024;
    int v45 = a5;
    __int16 v46 = 1024;
    int v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[#Power] %s: endpoint: %@, updateType2: %d -> %d, updateValue2: %u -> %d", buf, 0x2Eu);
  }

  int v22 = 0;
  int v21 = 13;
  if (a1)
  {
LABEL_70:
    if (a4 != 13)
    {
      CFRetain(a1);
      __int16 v26 = dispatch_get_global_queue(0, 0);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = __platform_power_sendPowerUpdate_block_invoke;
      v29[3] = &unk_100217E28;
      int v30 = a4;
      int v31 = a5;
      int v32 = v21;
      int v33 = v22;
      v29[4] = &v34;
      v29[5] = a1;
      dispatch_async(v26, v29);
    }
  }
LABEL_72:
  uint64_t v27 = *((unsigned __int8 *)v35 + 24);
  _Block_object_dispose(&v34, 8);
  return v27;
}

void sub_1000A0410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __platform_power_sendPowerUpdate_block_invoke(uint64_t a1)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  int v2 = *(_DWORD *)(a1 + 52);
  int v12 = *(_DWORD *)(a1 + 48);
  LOWORD(v13) = v2;
  int v3 = *(_DWORD *)(a1 + 60);
  HIDWORD(v13) = *(_DWORD *)(a1 + 56);
  __int16 v15 = -21846;
  __int16 v14 = v3;
  if (gLogObjects && gNumLogObjects >= 8)
  {
    uint64_t v4 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 48);
    int v8 = *(_DWORD *)(a1 + 52);
    int v9 = *(_DWORD *)(a1 + 56);
    int v10 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)buf = 138413314;
    uint64_t v17 = v6;
    __int16 v18 = 1024;
    int v19 = v7;
    __int16 v20 = 1024;
    int v21 = v8;
    __int16 v22 = 1024;
    int v23 = v9;
    __int16 v24 = 1024;
    int v25 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#Power] PowerUpdate: endpoint: %@, updateType: %d, updateValue: %u, updateType2: %d, updateValue2: %u", buf, 0x24u);
  }

  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = accFeatureHandlers_invokeHandler(*(const void **)(a1 + 40), 18, (uint64_t)&v12);
  id v11 = *(const void **)(a1 + 40);
  if (v11) {
    CFRelease(v11);
  }
}

uint64_t platform_power_sendEAPowerUpdate(const void *a1, int a2, int a3, int a4, int a5)
{
  if (!a1) {
    return 1;
  }
  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  if (!EndpointWithUUID) {
    return 1;
  }
  id v11 = EndpointWithUUID;
  if (acc_endpoint_getProtocol((uint64_t)EndpointWithUUID) == 4 && !iap2_endpoint_isInitialized(v11[7]))
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      __int16 v15 = *(id *)(gLogObjects + 56);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v15 = &_os_log_default;
      id v16 = &_os_log_default;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v24 = "NO";
      __int16 v25 = 1024;
      int v26 = 4;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[#Power] Not sending EA Power Update: iap2initialized = %s, protocol = %{coreacc:ACCEndpoint_Protocol_t}d", buf, 0x12u);
    }

    return 1;
  }
  __int16 v19 = -21846;
  int v17 = a2;
  __int16 v18 = a3;
  int v20 = a4;
  __int16 v22 = -21846;
  __int16 v21 = a5;
  if (gLogObjects && gNumLogObjects >= 8)
  {
    int v12 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v12 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138413314;
    __int16 v24 = (const char *)a1;
    __int16 v25 = 1024;
    int v26 = a2;
    __int16 v27 = 1024;
    int v28 = a3;
    __int16 v29 = 1024;
    int v30 = a4;
    __int16 v31 = 1024;
    int v32 = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[#Power] EAPowerUpdate: endpoint: %@, updateType: %d, updateValue: %u, updateType2: %d, updateValue2: %u", buf, 0x24u);
  }

  return accFeatureHandlers_invokeHandler(a1, 18, (uint64_t)&v17);
}

BOOL platform_power_sendSleepUpdate(const void *a1)
{
  uint64_t v6 = 0;
  int v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v1 = 1;
  char v9 = 1;
  if (a1)
  {
    CFRetain(a1);
    int v3 = dispatch_get_global_queue(0, 0);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = __platform_power_sendSleepUpdate_block_invoke;
    v5[3] = &unk_100217E50;
    v5[4] = &v6;
    v5[5] = a1;
    dispatch_async(v3, v5);

    BOOL v1 = *((unsigned char *)v7 + 24) != 0;
  }
  _Block_object_dispose(&v6, 8);
  return v1;
}

void sub_1000A08D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __platform_power_sendSleepUpdate_block_invoke(uint64_t a1)
{
  char v2 = accFeatureHandlers_invokeHandler(*(const void **)(a1 + 40), 19, 0);
  int v3 = *(const void **)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
  if (v3)
  {
    CFRelease(v3);
  }
}

BOOL platform_power_sendWakeUpdate(const void *a1)
{
  uint64_t v6 = 0;
  int v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v1 = 1;
  char v9 = 1;
  if (a1)
  {
    CFRetain(a1);
    int v3 = dispatch_get_global_queue(0, 0);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = __platform_power_sendWakeUpdate_block_invoke;
    v5[3] = &unk_100217E50;
    v5[4] = &v6;
    v5[5] = a1;
    dispatch_async(v3, v5);

    BOOL v1 = *((unsigned char *)v7 + 24) != 0;
  }
  _Block_object_dispose(&v6, 8);
  return v1;
}

void sub_1000A0A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __platform_power_sendWakeUpdate_block_invoke(uint64_t a1)
{
  char v2 = accFeatureHandlers_invokeHandler(*(const void **)(a1 + 40), 20, 0);
  int v3 = *(const void **)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
  if (v3)
  {
    CFRelease(v3);
  }
}

id platform_power_powerDuringSleepSupported(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  if (!EndpointWithUUID) {
    return 0;
  }
  char v2 = EndpointWithUUID;
  if (!*EndpointWithUUID || !EndpointWithUUID[1]) {
    return 0;
  }
  int v3 = _getPowerPluginInstance();
  id v4 = [v3 isPowerDuringSleepSupported:v2[1]];

  if (gLogObjects && gNumLogObjects >= 8)
  {
    id v5 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v5 = &_os_log_default;
    id v6 = &_os_log_default;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = v2[1];
    v9[0] = 67109378;
    v9[1] = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[#Power] bPowerDuringSleepSupported = %d for connectionUUID %@", (uint8_t *)v9, 0x12u);
  }

  return v4;
}

id platform_power_setPowerDuringSleep(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  if (a2) {
    _isPowerDuringSleepForApplePencil(a1);
  }
  else {
    _isDisablingPowerDuringSleepForApplePencil((uint64_t)a1);
  }
  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  if (!EndpointWithUUID) {
    return 0;
  }
  id v5 = EndpointWithUUID;
  if (!*EndpointWithUUID || !EndpointWithUUID[1]) {
    return 0;
  }
  id v6 = _getPowerPluginInstance();
  id v7 = [v6 setPowerDuringSleepEnabled:a2 forConnectionUUID:v5[1]];

  if (gLogObjects && gNumLogObjects >= 8)
  {
    uint64_t v8 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = v5[1];
    v12[0] = 67109378;
    v12[1] = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[#Power] platform_power_setPowerDuringSleep success = %d, connectionUUID %@", (uint8_t *)v12, 0x12u);
  }

  return v7;
}

id platform_power_powerDuringSleepEnabled(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  if (!EndpointWithUUID) {
    return 0;
  }
  char v2 = EndpointWithUUID;
  if (!*EndpointWithUUID || !EndpointWithUUID[1]) {
    return 0;
  }
  int v3 = _getPowerPluginInstance();
  id v4 = [v3 isPowerDuringSleepEnabled:v2[1]];

  if (gLogObjects && gNumLogObjects >= 8)
  {
    id v5 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v5 = &_os_log_default;
    id v6 = &_os_log_default;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = v2[1];
    v9[0] = 67109378;
    v9[1] = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[#Power] bPowerDuringSleepEnabled = %d, connectionUUID %@", (uint8_t *)v9, 0x12u);
  }

  return v4;
}

uint64_t platform_power_setAccessoryPowerMode(const void *a1, uint64_t a2, uint64_t a3)
{
  int v5 = -1431655766;
  if (_platformPowerUpdateAvailable((uint64_t)a1, a2, a3, &v5)) {
    return platform_power_sendPowerUpdate(a1, 2, v5, 13, 0);
  }
  else {
    return 1;
  }
}

BOOL _platformPowerUpdateAvailable(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = +[ACCPlatformPowerManager sharedManager];
  id v9 = [v8 powerAccessories];
  __int16 v10 = [v9 objectForKey:a1];

  if (a4)
  {
    BOOL v11 = v10 != 0;
    if (!v10)
    {
      [v8 addAccessoryForEndpointUID:a1 andBitmask:0 andOldBitmask:0];
      int v12 = [v8 powerAccessories];
      __int16 v10 = [v12 objectForKey:a1];
    }
    __int16 v13 = [v10 accessoryPowerManager];
    uint64_t v14 = v13;
    if (a2 > 1) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = [v13 connectionPowerModeChangedForFeaturePowerModeUpdate:a2 withObject:a3];
    }
    if (a2 == 3 || v15)
    {
      if ([v14 getCurrentConnectionIsHighPowerMode]) {
        int v16 = 2;
      }
      else {
        int v16 = 1;
      }
      *a4 = v16;
    }
    else
    {
      BOOL v11 = 0;
    }
  }
  else
  {
    BOOL v11 = 0;
    uint64_t v14 = 0;
  }

  return v11;
}

uint64_t platform_power_setExternalAccessoryPowerMode(const void *a1, uint64_t a2, uint64_t a3)
{
  int v5 = -1431655766;
  if (_platformPowerUpdateAvailable((uint64_t)a1, a2, a3, &v5)) {
    return platform_power_sendEAPowerUpdate(a1, 2, v5, 13, 0);
  }
  else {
    return 1;
  }
}

id platform_power_resetBaseCurrent(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  char v2 = _getPowerPluginInstance();
  id v3 = [v2 resetAccessoryBaseCurrent:a1];

  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 8;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    id v6 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    CFStringRef v7 = @"no";
    if (v3) {
      CFStringRef v7 = @"yes";
    }
    int v9 = 138412546;
    CFStringRef v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[#Power] successfully reset base current = %@ for connectionUUID %@", (uint8_t *)&v9, 0x16u);
  }

  return v3;
}

id platform_power_batteryLevelPercent()
{
  BOOL v0 = _getIOKitPowerPluginInstance();
  id v1 = [v0 getBatteryChargeLevel];

  return v1;
}

void platform_power_registerForSleepWakeUpdate(void *a1)
{
  id v6 = a1;
  id v1 = +[ACCPlatformPowerManager sharedManager];
  char v2 = [v1 powerAccessories];
  id v3 = [v2 objectForKey:v6];

  if (v3)
  {
    if ([(ACCPlatformPowerInfo *)v3 requestSleepUpdate]) {
      goto LABEL_6;
    }
    [(ACCPlatformPowerInfo *)v3 stopPowerUpdates];
    [(ACCPlatformPowerInfo *)v3 setRequestSleepUpdate:1];
  }
  else
  {
    id v3 = [[ACCPlatformPowerInfo alloc] initWithEndpointUID:v6 andBitmask:0 andOldBitmask:0];
    [(ACCPlatformPowerInfo *)v3 setRequestSleepUpdate:1];
    BOOL v4 = +[ACCPlatformPowerManager sharedManager];
    id v5 = [v4 powerAccessories];
    [v5 setObject:v3 forKey:v6];
  }
  [(ACCPlatformPowerInfo *)v3 startPowerUpdates];
LABEL_6:
}

void platform_power_unregisterForSleepWakeUpdate(void *a1)
{
  id v5 = a1;
  id v1 = +[ACCPlatformPowerManager sharedManager];
  char v2 = [v1 powerAccessories];
  id v3 = [v2 objectForKey:v5];

  if (v3)
  {
    if ([v3 requestSleepUpdate])
    {
      [v3 stopPowerUpdates];
      [v3 setRequestSleepUpdate:0];
      [v3 startPowerUpdates];
    }
    if (![v3 updateTypesBitmask])
    {
      BOOL v4 = +[ACCPlatformPowerManager sharedManager];
      [v4 removeAccessoryForEndpointUID:v5];
    }
  }
}

void platform_power_startPowerUpdates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = +[ACCPlatformPowerManager sharedManager];
  [v6 addAccessoryForEndpointUID:a1 andBitmask:a2 andOldBitmask:a3];
}

void platform_power_stopPowerUpdates(uint64_t a1)
{
  id v2 = +[ACCPlatformPowerManager sharedManager];
  [v2 removeAccessoryForEndpointUID:a1];
}

void platform_power_setAvailableCurrent(const void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = _getPowerPluginInstance();
  CFStringRef v7 = acc_manager_copyConnectionUUIDForEndpointUUID(a1);
  LODWORD(a3) = [v6 setUSBCurrentLimitBase:a2 forConnectionUUID:v7 forceResponse:a3];

  if (a3)
  {
    CFDictionaryRef EndpointWithUUID = (uint64_t *)acc_manager_getEndpointWithUUID(a1);
    platform_analytics_availableCurrentNegotiated(EndpointWithUUID, a2);
  }
}

id platform_power_getCurrentLimit(uint64_t a1)
{
  id v2 = _getPowerPluginInstance();
  id v3 = [v2 USBCurrentLimitInmA:a1];

  return v3;
}

id platform_power_getCableType(uint64_t a1)
{
  id v2 = _getPowerPluginInstance();
  id v3 = [v2 CableType:a1];

  return v3;
}

void platform_power_setShouldChargeDeviceBattery(const void *a1, int a2, uint64_t a3)
{
  _getPowerPluginInstance();
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  id v6 = acc_manager_copyConnectionUUIDForEndpointUUID(a1);
  [v7 setBatteryPackMode:a2 ^ 1u forConnectionUUID:v6 forceResponse:a3];
}

uint64_t platform_power_getUltraHighPowerModeCurrentLimit(const void *a1)
{
  id v2 = _getPowerPluginInstance();
  id v3 = acc_manager_copyConnectionUUIDForEndpointUUID(a1);
  unsigned __int16 v4 = (unsigned __int16)[v2 accessoryPowerModeCurrentLimitInmA:4 forConnectionUUID:v3];

  return v4;
}

void platform_power_setReserveCurrent(const void *a1, int a2)
{
  _getPowerPluginInstance();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  unsigned __int16 v4 = acc_manager_copyConnectionUUIDForEndpointUUID(a1);
  [v5 setUSBCurrentOffset:-a2 forConnectionUUID:v4];
}

id platform_power_isOvercurrentState(uint64_t a1)
{
  id v2 = +[ACCPlatformPowerManager sharedManager];
  id v3 = [v2 powerAccessories];
  unsigned __int16 v4 = [v3 objectForKey:a1];

  id v5 = [v4 siphoningControl];

  if (v5)
  {
    id v6 = [v4 siphoningControl];
    id v5 = [v6 getOverCurrentState];
  }
  return v5;
}

void platform_power_resetOvercurrentSiphoning(uint64_t a1)
{
  id v6 = +[ACCPlatformPowerManager sharedManager];
  id v2 = [v6 powerAccessories];
  id v3 = [v2 objectForKey:a1];

  unsigned __int16 v4 = [v3 siphoningControl];

  if (v4)
  {
    id v5 = [v3 siphoningControl];
    [v5 resetOverCurrentSiphoning];
  }
}

void platform_power_setOvercurrentSiphoning(uint64_t a1)
{
  id v6 = +[ACCPlatformPowerManager sharedManager];
  id v2 = [v6 powerAccessories];
  id v3 = [v2 objectForKey:a1];

  unsigned __int16 v4 = [v3 siphoningControl];

  if (v4)
  {
    id v5 = [v3 siphoningControl];
    [v5 setOverCurrentSiphoning];
  }
}

void platform_power_updateAccessoryChargeCurrent(uint64_t a1, unsigned int a2)
{
  id v12 = +[ACCPlatformPowerManager sharedManager];
  unsigned __int16 v4 = [v12 powerAccessories];
  id v5 = [v4 objectForKey:a1];

  if (v5)
  {
    id v6 = [v5 endpointUID];
    BOOL isModelNumberConnected = _isModelNumberConnected(v6, @"A1603");

    if (isModelNumberConnected)
    {
      if (platform_systemInfo_isApplePencilSupported())
      {
        unsigned int v8 = [v5 holdingApplePencilSleepAssertion];
        if (a2 <= 9)
        {
          if (v8)
          {
            platform_sleepAssertion_destroyForApplePencil();
            [v5 setHoldingApplePencilSleepAssertion:0];
          }
        }
      }
      if ([v5 powerUpdateSentDueToSleep])
      {
        int v9 = [v5 sleepNotificationClientUUID];

        if (v9)
        {
          CFStringRef v10 = _getIOKitPowerPluginInstance();
          __int16 v11 = [v5 sleepNotificationClientUUID];
          [v10 clientHandledSleepNotification:v11];

          [v5 setPowerUpdateSentDueToSleep:0];
        }
      }
    }
  }
}

CFSetRef iap2_sessionControl_init(const __CFSet *result)
{
  if (result)
  {
    CFSetRef v1 = result;
    id v2 = (void *)*((void *)result + 24);
    if (!v2)
    {
      id v2 = malloc_type_malloc(0xFFFFuLL, 0x11CB4564uLL);
      *((void *)v1 + 24) = v2;
    }
    int v3 = iap2_features_registerMessageHandlers();
    int v4 = iap2_features_registerIdentificationParamHandlers();
    unsigned int v5 = v3 & v4 & iap2_features_createFeatures(v1, 1);
    if (v2) {
      return (const __CFSet *)v5;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t iap2_sessionControl_cleanup(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = *(void **)a1;
  if (!v2 || !*v2) {
    return 0;
  }
  if (acc_endpoint_getTransportType((uint64_t)v2) == 8) {
    platform_usb_lockUSBHostInterfaces(*(void *)(a1 + 16));
  }
  iap2_endpoint_setInitialized(a1, 0);
  platform_externalAccessory_removeEAAccessoryForPrimaryEndpoint(*(void **)(a1 + 8));
  if (iap2_identification_isIdentifiedForWirelessCarPlay(a1)) {
    platform_iapd_bridge_accessory_disconnected(*(void *)(a1 + 8));
  }
  int v3 = iap2_features_destroyFeatures(a1, 0);
  uint64_t v4 = v3 & iap2_features_destroyFeatures(a1, 1);
  unsigned int v5 = *(void **)(a1 + 192);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 192) = 0;
  }
  return v4;
}

uint64_t iap2_sessionControl_start(unsigned __int8 *a1)
{
  if (a1)
  {
    unsigned int Version = iap2_sessionControl_getVersion(a1);
    if (gLogObjects) {
      BOOL v3 = gNumLogObjects < 23;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3)
    {
      uint64_t v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v4 = *(NSObject **)(gLogObjects + 176);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v12[0] = 67109120;
      v12[1] = Version;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Starting control session (version = %d)...", (uint8_t *)v12, 8u);
    }
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects <= 22;
    }
    else {
      BOOL v5 = 1;
    }
    int v6 = !v5;
    if (Version == 2)
    {
      if (v6)
      {
        id v7 = *(NSObject **)(gLogObjects + 176);
      }
      else
      {
        id v7 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v12[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Control session version = 2, starting Identification...", (uint8_t *)v12, 2u);
      }
      unsigned int v9 = 1;
    }
    else
    {
      if (v6)
      {
        unsigned int v8 = *(NSObject **)(gLogObjects + 176);
      }
      else
      {
        unsigned int v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      BOOL v10 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      unsigned int v9 = 0;
      if (v10)
      {
        LOWORD(v12[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Control session version != 2, starting Authentication...", (uint8_t *)v12, 2u);
        unsigned int v9 = 0;
      }
    }
    iap2_features_startFeatureFromDevice((const __CFSet *)a1, v9);
  }
  return 0;
}

unsigned __int8 *iap2_sessionControl_getVersion(unsigned __int8 *result)
{
  if (result)
  {
    uint64_t v1 = *((void *)result + 4);
    if (v1 && (id v2 = *(unsigned __int8 **)(v1 + 24)) != 0)
    {
      int SessionForService = iAP2LinkGetSessionForService(*(void *)(v1 + 24), 0);
      uint64_t result = iAP2LinkGetSessionInfo(v2, SessionForService);
      if (result) {
        return (unsigned __int8 *)result[2];
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t iap2_sessionControl_parseIncomingMessage(uint64_t a1, char *a2, unsigned int a3)
{
  char v3 = 0;
  if (a1)
  {
    uint64_t v4 = a2;
    if (a2)
    {
      unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v34[2] = v7;
      v34[3] = v7;
      v34[0] = v7;
      v34[1] = v7;
      iAP2MsgInit((uint64_t)v34, 0, 0, 0, 0, 0);
      char v3 = 0;
      if (a3)
      {
        uint64_t v8 = a3;
        while (1)
        {
          char v9 = *v4++;
          uint64_t v10 = iAP2MsgParserConsumeByte(*(unsigned __int16 **)(a1 + 112), v9, (uint64_t)v34);
          if (v10) {
            break;
          }
LABEL_19:
          if (!--v8) {
            return v3 & 1;
          }
        }
        uint64_t v11 = v10;
        if (!*(void *)a1) {
          goto LABEL_41;
        }
        int MsgID = (void *)iAP2MsgGetMsgID(v10);
        int MsgLen = iAP2MsgGetMsgLen(v11);
        uint64_t v14 = gLogObjects;
        int v15 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 21)
        {
          int v16 = *(NSObject **)(gLogObjects + 160);
        }
        else
        {
          int v16 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)char v37 = v14;
            *(_WORD *)&v37[8] = 1024;
            *(_DWORD *)&unsigned char v37[10] = v15;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            int v16 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          uint64_t v17 = *(void *)(a1 + 8);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)char v37 = MsgID;
          *(_WORD *)&v37[4] = 1024;
          *(_DWORD *)&v37[6] = MsgLen;
          *(_WORD *)&unsigned char v37[10] = 2112;
          *(void *)&v37[12] = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Incoming Message ID: 0x%04X (%d bytes) for endpoint %@", buf, 0x18u);
        }
        if (iap2_identification_isIdentifiedForIncomingMessageID(a1, (int)MsgID))
        {
          Handler = (uint64_t (*)(uint64_t, uint64_t))iap2_messageHandlers_getHandler(MsgID);
          if (!Handler)
          {
            uint64_t v22 = gLogObjects;
            int v23 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 23)
            {
              __int16 v24 = *(NSObject **)(gLogObjects + 176);
            }
            else
            {
              __int16 v24 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)char v37 = v22;
                *(_WORD *)&v37[8] = 1024;
                *(_DWORD *)&unsigned char v37[10] = v23;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                __int16 v24 = &_os_log_default;
              }
            }
            if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              goto LABEL_41;
            }
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)char v37 = MsgID;
            __int16 v29 = v24;
            int v30 = "No message handler found for incoming message ID: 0x%04X!";
            uint32_t v31 = 8;
            goto LABEL_44;
          }
          if (Handler(a1, v11))
          {
            char v3 = 1;
LABEL_18:
            iAP2MsgCleanup(v11);
            goto LABEL_19;
          }
          uint64_t v25 = gLogObjects;
          int v26 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 23)
          {
            __int16 v27 = *(NSObject **)(gLogObjects + 176);
          }
          else
          {
            __int16 v27 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)char v37 = v25;
              *(_WORD *)&v37[8] = 1024;
              *(_DWORD *)&unsigned char v37[10] = v26;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              __int16 v27 = &_os_log_default;
            }
          }
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
LABEL_41:
            char v3 = 0;
            goto LABEL_18;
          }
          uint64_t v32 = *(void *)(a1 + 8);
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)char v37 = MsgID;
          *(_WORD *)&v37[4] = 2112;
          *(void *)&v37[6] = v32;
          __int16 v29 = v27;
          int v30 = "Message handler returned false! (0x%04X for endpoint %@)";
        }
        else
        {
          uint64_t v19 = gLogObjects;
          int v20 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 23)
          {
            __int16 v21 = *(NSObject **)(gLogObjects + 176);
          }
          else
          {
            __int16 v21 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)char v37 = v19;
              *(_WORD *)&v37[8] = 1024;
              *(_DWORD *)&unsigned char v37[10] = v20;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              __int16 v21 = &_os_log_default;
            }
          }
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            goto LABEL_41;
          }
          uint64_t v28 = *(void *)(a1 + 8);
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)char v37 = MsgID;
          *(_WORD *)&v37[4] = 2112;
          *(void *)&v37[6] = v28;
          __int16 v29 = v21;
          int v30 = "Not identified for incoming message ID: 0x%04X! (endpoint %@)";
        }
        uint32_t v31 = 18;
LABEL_44:
        _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, v30, buf, v31);
        goto LABEL_41;
      }
    }
  }
  return v3 & 1;
}

uint64_t iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(uint64_t *a1, uint64_t a2)
{
  return _sendOutgoingMessage(a1, a2, 1);
}

uint64_t _sendOutgoingMessage(uint64_t *a1, uint64_t a2, int a3)
{
  if (a1 && a2 && *a1)
  {
    unsigned int MsgID = iAP2MsgGetMsgID(a2);
    int MsgLen = iAP2MsgGetMsgLen(a2);
    if (iap2_identification_isIdentifiedForOutgoingMessageID((uint64_t)a1, MsgID))
    {
      uint64_t v8 = a1[4];
      if (a3) {
        iAP2MsgSendControlAndCallbackOnAck(v8, a2);
      }
      else {
        iAP2MsgSendControl(v8, a2);
      }
      if (gLogObjects && gNumLogObjects >= 21)
      {
        char v9 = *(NSObject **)(gLogObjects + 160);
      }
      else
      {
        char v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      uint64_t v10 = 1;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = a1[1];
        int v19 = 67109634;
        unsigned int v20 = MsgID;
        __int16 v21 = 1024;
        int v22 = MsgLen;
        __int16 v23 = 2112;
        uint64_t v24 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Outgoing Message ID: 0x%04X (%d bytes) for endpoint %@", (uint8_t *)&v19, 0x18u);
      }
      return v10;
    }
    __int16 v13 = logObjectForModule_1(22);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      _sendOutgoingMessage_cold_3(MsgID, (uint64_t)a1, v13);
    }
  }
  if (gLogObjects) {
    BOOL v14 = gNumLogObjects < 21;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    int v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    int v15 = *(NSObject **)(gLogObjects + 160);
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    unsigned int v16 = iAP2MsgGetMsgID(a2);
    int v17 = iAP2MsgGetMsgLen(a2);
    if (a1)
    {
      uint64_t v18 = *a1;
      if (*a1) {
        uint64_t v18 = a1[1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    int v19 = 67109634;
    unsigned int v20 = v16;
    __int16 v21 = 1024;
    int v22 = v17;
    __int16 v23 = 2112;
    uint64_t v24 = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Failed to send, Outgoing Message ID: 0x%04X (%d bytes) for endpoint %@", (uint8_t *)&v19, 0x18u);
  }
  return 0;
}

uint64_t iap2_sessionControl_sendOutgoingMessage(uint64_t *a1, uint64_t a2)
{
  return _sendOutgoingMessage(a1, a2, 0);
}

void iap2_sessionControl_accAuthenticationStateChanged(const __CFSet *a1, int a2)
{
  if (a1 && a2 == 2 && *(void *)a1)
  {
    if (iap2_identification_getState((uint64_t)a1))
    {
      if (iap2_identification_getState((uint64_t)a1) == 6)
      {
        if (gLogObjects && gNumLogObjects >= 23)
        {
          char v3 = *(NSObject **)(gLogObjects + 176);
        }
        else
        {
          char v3 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          uint64_t v4 = *((void *)a1 + 1);
          int v5 = 138412290;
          uint64_t v6 = v4;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "ID & Auth passed for endpoint %@!", (uint8_t *)&v5, 0xCu);
        }
        _authAndIDComplete((uint64_t)a1);
      }
    }
    else
    {
      iap2_features_startFeatureFromDevice(a1, 1u);
    }
  }
}

void _authAndIDComplete(uint64_t a1)
{
  if (a1 && *(void *)a1)
  {
    iap2_endpoint_setInitialized(a1, 1);
    platform_analytics_connectionPassedAuth(**(CFStringRef ***)a1);
    iap2_features_createFeatures((const __CFSet *)a1, 0);
    iap2_features_startFeaturesFromDevice((const __CFSet *)a1, 0);
    platform_analytics_iap2_featuresSupportedDidChange((const __CFSet *)a1);
    if (iap2_identification_isIdentifiedForWirelessCarPlay(a1)) {
      platform_iapd_bridge_accessory_connected(*(void *)a1, 0);
    }
    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 24);
    if ((~*(_DWORD *)(v2 + 272) & 3) == 0) {
      iAP2TimeSyncStart(v2);
    }
    char v3 = *(const char **)(a1 + 8);
    platform_externalAccessory_addEAAccessoryForPrimaryEndpoint(v3);
  }
}

void iap2_sessionControl_identificationStateChanged(uint64_t a1, int a2)
{
  if (a1)
  {
    char v3 = *(BOOL **)a1;
    if (v3)
    {
      Transportint Type = acc_endpoint_getTransportType((uint64_t)v3);
      if (a2 == 6)
      {
        if (**(void **)a1)
        {
          if (TransportType
            && (TransportType == 8
             || acc_connection_getType(**(void **)a1) == 6 && *(void *)a1 && **(void **)a1))
          {
            if (gLogObjects && gNumLogObjects >= 23)
            {
              uint64_t v6 = *(NSObject **)(gLogObjects + 176);
            }
            else
            {
              uint64_t v6 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v16) = 0;
              _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Configuring and unlocking USB Host interfaces...", (uint8_t *)&v16, 2u);
            }
            acc_connection_isAuthenticated(**(void **)a1, 6);
            if (gLogObjects && gNumLogObjects >= 23)
            {
              long long v7 = *(NSObject **)(gLogObjects + 176);
            }
            else
            {
              long long v7 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
            {
              int v8 = *(_DWORD *)(*(void *)a1 + 24);
              int v16 = 67109120;
              LODWORD(v17) = v8;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Transport type is %{coreacc:ACCEndpoint_TransportType_t}d, looking for USBHost identification component...", (uint8_t *)&v16, 8u);
            }
            TransportComponent = iap2_identification_getTransportComponent((void *)a1, 2);
            if (TransportComponent)
            {
              uint64_t v10 = TransportComponent;
              if (gLogObjects && gNumLogObjects >= 23)
              {
                uint64_t v11 = *(NSObject **)(gLogObjects + 176);
              }
              else
              {
                uint64_t v11 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
              {
                LOWORD(v16) = 0;
                _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Found USB Host identification component!", (uint8_t *)&v16, 2u);
              }
              if (v10[53])
              {
                if (!v10[55])
                {
                  if (gLogObjects && gNumLogObjects >= 23)
                  {
                    id v12 = *(NSObject **)(gLogObjects + 176);
                  }
                  else
                  {
                    id v12 = &_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }
                  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
                  {
                    LOWORD(v16) = 0;
                    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "isCarPlay is not set, but treating it as such anyways", (uint8_t *)&v16, 2u);
                  }
                }
                if (iap2_identification_isIdentifiedForCarPlay(a1))
                {
                  int v13 = iAP2_carPlayConnectionType(a1);
                  CFAbsoluteTimeGetCurrent();
                  platform_CarPlay_sendConnectionEvent(3, v13);
                }
                platform_usb_configureUSBHostNCMInterface(*(void *)(a1 + 16), v10[54], 1);
              }
            }
            platform_usb_unlockUSBHostInterfaces(*(void *)(a1 + 16));
          }
          if (iap2_accAuthentication_getState((unsigned int *)a1))
          {
            if (iap2_accAuthentication_getState((unsigned int *)a1) == 2)
            {
              if (gLogObjects && gNumLogObjects >= 23)
              {
                BOOL v14 = *(NSObject **)(gLogObjects + 176);
              }
              else
              {
                BOOL v14 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
              {
                uint64_t v15 = *(void *)(a1 + 8);
                int v16 = 138412290;
                uint64_t v17 = v15;
                _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Auth & ID passed for endpoint %@!", (uint8_t *)&v16, 0xCu);
              }
              _authAndIDComplete(a1);
            }
          }
          else
          {
            iap2_features_startFeatureFromDevice((const __CFSet *)a1, 0);
          }
        }
      }
    }
  }
}

void iap2_sessionControl_authorizationHook_authentication(unsigned int *a1, uint64_t a2)
{
  if (!a1 || !*(void *)a1 || !**(void **)a1) {
    return;
  }
  int State = iap2_identification_getState((uint64_t)a1);
  if (gLogObjects && gNumLogObjects >= 23)
  {
    int v5 = *(NSObject **)(gLogObjects + 176);
  }
  else
  {
    int v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = "YES";
    if (!State) {
      uint64_t v6 = "NO";
    }
    int v12 = 136315138;
    int v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "authorizationHook from Authentication triggered... (startedIdentification: %s)", (uint8_t *)&v12, 0xCu);
  }
  if (gLogObjects && gNumLogObjects >= 23)
  {
    long long v7 = *(NSObject **)(gLogObjects + 176);
  }
  else
  {
    long long v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    iap2_sessionControl_authorizationHook_authentication_cold_1(a1);
    if (State) {
      goto LABEL_20;
    }
LABEL_25:
    (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1);
    return;
  }
  if (!State) {
    goto LABEL_25;
  }
LABEL_20:
  CFTypeRef v8 = iap2_accAuthentication_copyCertificateSerialString((uint64_t)a1);
  uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo(*(void *)a1);
  uint64_t v10 = (const void *)acc_strings_copyPlaceholder_Unknown();
  CFTypeRef v11 = acc_accInfo_retainedProperty(AccessoryInfo, 0, v10);
  _requestAuthorization((uint64_t)a1, v8, v11, a2);
  if (v8) {
    CFRelease(v8);
  }
  if (v11) {
    CFRelease(v11);
  }
}

void _requestAuthorization(uint64_t a1, CFTypeRef a2, CFTypeRef a3, uint64_t a4)
{
  if (a1)
  {
    int v5 = *(void **)a1;
    if (v5)
    {
      if (*v5)
      {
        if (acc_policies_endpointRequiresUserAuthorization((uint64_t)v5))
        {
          CFTypeRef v9 = CFRetain(*(CFTypeRef *)(a1 + 8));
          if (a2) {
            a2 = CFRetain(a2);
          }
          if (a3) {
            a3 = CFRetain(a3);
          }
          unsigned int v10 = acc_endpoint_isWireless(*(void **)a1);
          if (v10)
          {
            BOOL v11 = 0;
            unsigned int CurrentLimit = 0;
          }
          else
          {
            unsigned int CurrentLimit = platform_power_getCurrentLimit(*(void *)(a1 + 16));
            BOOL v11 = CurrentLimit != 0;
          }
          if (gLogObjects && gNumLogObjects >= 23)
          {
            BOOL v14 = *(NSObject **)(gLogObjects + 176);
          }
          else
          {
            BOOL v14 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            int v16 = "NO";
            if (v11) {
              uint64_t v17 = "YES";
            }
            else {
              uint64_t v17 = "NO";
            }
            *(_DWORD *)buf = 136315650;
            __int16 v21 = v17;
            if (v10) {
              int v16 = "YES";
            }
            __int16 v22 = 2080;
            __int16 v23 = v16;
            __int16 v24 = 1024;
            unsigned int v25 = CurrentLimit;
            _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "providesPower: %s, isWireless: %s, currentLimit: %uma", buf, 0x1Cu);
          }
          global_queue = dispatch_get_global_queue(0, 0);
          block[0] = _NSConcreteStackBlock;
          block[1] = 0x40000000;
          block[2] = ___requestAuthorization_block_invoke;
          block[3] = &unk_100217EA0;
          BOOL v19 = v11;
          void block[6] = a3;
          void block[7] = v9;
          void block[4] = a4;
          block[5] = a2;
          dispatch_async(global_queue, block);
        }
        else
        {
          int v13 = *(void (**)(uint64_t, uint64_t))(a4 + 16);
          v13(a4, 1);
        }
      }
    }
  }
}

void iap2_sessionControl_authorizationHook_identification(unsigned int *a1, const void *a2, uint64_t a3)
{
  if (a1 && *(void *)a1 && **(void **)a1)
  {
    unsigned int State = iap2_accAuthentication_getState(a1);
    if (gLogObjects && gNumLogObjects >= 23)
    {
      long long v7 = *(NSObject **)(gLogObjects + 176);
    }
    else
    {
      long long v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v8 = "YES";
      if (!State) {
        CFTypeRef v8 = "NO";
      }
      int v11 = 136315138;
      int v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "authorizationHook from Identification triggered... (startedAuthentication: %s)", (uint8_t *)&v11, 0xCu);
    }
    if (gLogObjects && gNumLogObjects >= 23)
    {
      CFTypeRef v9 = *(NSObject **)(gLogObjects + 176);
    }
    else
    {
      CFTypeRef v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      iap2_sessionControl_authorizationHook_authentication_cold_1(a1);
      if (State)
      {
LABEL_20:
        CFTypeRef v10 = iap2_accAuthentication_copyCertificateSerialString((uint64_t)a1);
        _requestAuthorization((uint64_t)a1, v10, a2, a3);
        if (v10) {
          CFRelease(v10);
        }
        return;
      }
    }
    else if (State)
    {
      goto LABEL_20;
    }
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, 1);
  }
}

void ___requestAuthorization_block_invoke(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 23;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    char v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    char v3 = *(NSObject **)(gLogObjects + 176);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Checking accessory authorization...", buf, 2u);
  }
  if (gLogObjects && gNumLogObjects >= 23)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 176);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    ___requestAuthorization_block_invoke_cold_1(a1, v4);
  }
  unint64_t CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 64);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 0x40000000;
  _DWORD v12[2] = ___requestAuthorization_block_invoke_2;
  v12[3] = &unk_100217E78;
  uint64_t v9 = *(void *)(a1 + 56);
  v12[5] = CurrentUnixTimeMS;
  v12[6] = v9;
  v12[4] = *(void *)(a1 + 32);
  requestAuthorizationForCertSerial(v7, v6, v8, v12);
  CFTypeRef v10 = *(const void **)(a1 + 40);
  if (v10) {
    CFRelease(v10);
  }
  int v11 = *(const void **)(a1 + 48);
  if (v11) {
    CFRelease(v11);
  }
}

void ___requestAuthorization_block_invoke_2(uint64_t a1, int a2)
{
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects <= 22;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  if (a2)
  {
    if (v4)
    {
      int v5 = *(NSObject **)(gLogObjects + 176);
    }
    else
    {
      int v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Accessory is authorized!", v12, 2u);
    }
    unint64_t CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
    uint64_t v8 = *(void *)(a1 + 40);
    if (gLogObjects && gNumLogObjects >= 23)
    {
      uint64_t v9 = *(NSObject **)(gLogObjects + 176);
    }
    else
    {
      uint64_t v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    unint64_t v10 = CurrentUnixTimeMS - v8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int v12 = 134217984;
      *(void *)&v12[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Authorization response time: %llums", v12, 0xCu);
    }
    if (v10 >= 0x2EF) {
      platform_system_resetLightningBusForEndpointWithUUID(*(void **)(a1 + 48));
    }
    *(void *)int v12 = *(void *)(a1 + 32);
    acc_manager_callbackForEndpoint(*(const void **)(a1 + 48), (void (*)(uint64_t, uint64_t))_iap2_session_control_endpointCallback, (uint64_t)v12, 0);
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = *(NSObject **)(gLogObjects + 176);
    }
    else
    {
      uint64_t v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Accessory is not authorized!", v12, 2u);
    }
  }
  int v11 = *(const void **)(a1 + 48);
  if (v11) {
    CFRelease(v11);
  }
}

uint64_t _iap2_session_control_endpointCallback(uint64_t a1, uint64_t *a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 56);
    if (v2)
    {
      if (*(_DWORD *)(a1 + 28) == 4)
      {
        uint64_t v3 = *a2;
        int v4 = *(NSObject **)(v2 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000;
        block[2] = ___iap2_session_control_endpointCallback_block_invoke;
        block[3] = &unk_100217EC8;
        void block[4] = v3;
        dispatch_async(v4, block);
      }
    }
  }
  return 0;
}

uint64_t ___iap2_session_control_endpointCallback_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id platform_destinationSharing_startDestinationInformation(uint64_t a1, uint64_t a2)
{
  int v4 = +[ACCExternalAccessoryServer sharedServer];
  int v5 = v4;
  if (v4) {
    id v6 = [v4 startDestinationSharing:a1 options:a2];
  }
  else {
    id v6 = 0;
  }

  return v6;
}

id platform_destinationSharing_stopDestinationInformation(uint64_t a1)
{
  uint64_t v2 = +[ACCExternalAccessoryServer sharedServer];
  uint64_t v3 = v2;
  if (v2) {
    id v4 = [v2 stopDestinationSharing:a1];
  }
  else {
    id v4 = 0;
  }

  return v4;
}

id platform_destinationSharing_destinationInformationStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = +[ACCExternalAccessoryServer sharedServer];
  uint64_t v9 = v8;
  if (v8) {
    id v10 = [v8 destinationSharingStatus:a2 success:a3 successfulParams:a4 forAccessoryUUID:a1];
  }
  else {
    id v10 = 0;
  }

  return v10;
}

uint64_t platform_destinationSharing_destinationInformation(const void *a1, uint64_t a2)
{
  return accFeatureHandlers_invokeHandler(a1, 39, a2);
}

void platform_mediaLibrary_accessoryAttached(void *a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 31;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    id v6 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v10 = 138412546;
    int v11 = a1;
    __int16 v12 = 1024;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "accessoryAttached: UID=%@ windowPerLibrary=%d", (uint8_t *)&v10, 0x12u);
  }

  if (a1)
  {
    id v7 = a1;
    uint64_t v8 = +[ACCMediaLibraryServer sharedServer];
    [v8 accessoryMediaLibraryAttached:v7 windowPerLibrary:a2];
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 31)
    {
      uint64_t v8 = *(id *)(gLogObjects + 240);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v8 = &_os_log_default;
      id v9 = &_os_log_default;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "ERROR: Invalid NULL accessoryUID", (uint8_t *)&v10, 2u);
    }
  }
}

void platform_mediaLibrary_accessoryDetached(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 31;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    id v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "accessoryDetached: UID=%@", (uint8_t *)&v8, 0xCu);
  }

  if (a1)
  {
    id v5 = a1;
    id v6 = +[ACCMediaLibraryServer sharedServer];
    [v6 accessoryMediaLibraryDetached:v5];
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 31)
    {
      id v6 = *(id *)(gLogObjects + 240);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v6 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ERROR: Invalid NULL accessoryUID", (uint8_t *)&v8, 2u);
    }
  }
}

void platform_mediaLibrary_accessoryUpdate(void *a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 31;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    id v6 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v10 = 138412546;
    int v11 = a1;
    __int16 v12 = 1024;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "accessoryUpdate: UID=%@ windowPerLibrary=%d", (uint8_t *)&v10, 0x12u);
  }

  if (a1)
  {
    id v7 = a1;
    int v8 = +[ACCMediaLibraryServer sharedServer];
    [v8 accessoryMediaLibraryUpdate:v7 windowPerLibrary:a2];
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 31)
    {
      int v8 = *(id *)(gLogObjects + 240);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v8 = &_os_log_default;
      id v9 = &_os_log_default;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "ERROR: Invalid NULL accessoryUID", (uint8_t *)&v10, 2u);
    }
  }
}

void platform_mediaLibrary_requestLibraryInfoUpdate(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 31;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    int v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "requestLibraryInfoUpdate: UID=%@", (uint8_t *)&v7, 0xCu);
  }

  id v5 = a1;
  id v6 = +[ACCMediaLibraryServer sharedServer];
  [v6 requestMediaLibraryUpdate:v5];
}

void platform_mediaLibrary_confirmLibraryUpdate(void *a1, void *a2, void *a3, uint64_t a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 31;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v10 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  else
  {
    int v10 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v15 = 138413058;
    int v16 = a1;
    __int16 v17 = 2112;
    uint64_t v18 = a2;
    __int16 v19 = 2112;
    unsigned int v20 = a3;
    __int16 v21 = 1024;
    int v22 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "confirmLibraryUpdate: accessoryUID=%@ libraryUID=%@ lastRevision=%@ updateCount=%d", (uint8_t *)&v15, 0x26u);
  }

  if (a1 && a2)
  {
    if (a4)
    {
      id v11 = a3;
      id v12 = a2;
      id v13 = a1;
      BOOL v14 = +[ACCMediaLibraryServer sharedServer];
      [v14 confirmUpdate:v13 library:v12 lastRevision:v11 updateCount:a4];
    }
  }
}

void platform_mediaLibrary_confirmLibraryPlaylistContentUpdate(void *a1, void *a2, void *a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 31;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v8 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  else
  {
    BOOL v8 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v13 = 138412802;
    BOOL v14 = a1;
    __int16 v15 = 2112;
    int v16 = a2;
    __int16 v17 = 2112;
    uint64_t v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "confirmLibraryPlaylistContentUpdate: accessoryUID=%@ libraryUID=%@ lastRevision=%@", (uint8_t *)&v13, 0x20u);
  }

  if (a1)
  {
    if (a2)
    {
      id v9 = a3;
      id v10 = a2;
      id v11 = a1;
      id v12 = +[ACCMediaLibraryServer sharedServer];
      [v12 confirmPlaylistContentUpdate:v11 library:v10 lastRevision:v9];
    }
  }
}

uint64_t platform_mediaLibrary_startMediaLibraryUpdate(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, unsigned int a9, uint64_t a10)
{
  if (a8) {
    int v16 = 2;
  }
  else {
    int v16 = 0;
  }
  if (gLogObjects) {
    BOOL v17 = gNumLogObjects < 31;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v19 = &_os_log_default;
    id v18 = &_os_log_default;
  }
  else
  {
    __int16 v19 = *(id *)(gLogObjects + 240);
  }
  uint64_t v20 = v16 | a7;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138414082;
    __int16 v27 = a1;
    __int16 v28 = 2112;
    __int16 v29 = a2;
    __int16 v30 = 2112;
    uint32_t v31 = a3;
    __int16 v32 = 2048;
    uint64_t v33 = a4;
    __int16 v34 = 2048;
    uint64_t v35 = a5;
    __int16 v36 = 2048;
    uint64_t v37 = a10;
    __int16 v38 = 1024;
    unsigned int v39 = a9;
    __int16 v40 = 1024;
    int v41 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "startMediaLibraryUpdate: accessoryUID=%@ libraryUID=%@ lastRevision=%@ itemProp=%llxh playlistProp=%llxh playlistContentProp=%llxh contentStyle=%d reqOptions=%xh", buf, 0x4Au);
  }

  id v21 = a3;
  id v22 = a2;
  id v23 = a1;
  __int16 v24 = +[ACCMediaLibraryServer sharedServer];
  [v24 startMediaLibraryUpdate:v23 library:v22 lastRevision:v21 mediaItemProperties:a4 playlistProperties:a5 playlistContentStyle:a9 playlistContentProperties:a10 reqOptions:v20];

  return 1;
}

uint64_t platform_mediaLibrary_stopMediaLibraryUpdate(void *a1, void *a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 31;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    BOOL v6 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412546;
    id v12 = a1;
    __int16 v13 = 2112;
    BOOL v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "stopMediaLibraryUpdate: accessoryUID=%@ libraryUID=%@", (uint8_t *)&v11, 0x16u);
  }

  id v7 = a2;
  id v8 = a1;
  id v9 = +[ACCMediaLibraryServer sharedServer];
  [v9 stopMediaLibraryUpdate:v8 library:v7];

  return 1;
}

uint64_t platform_mediaLibrary_playCurrentSelection(void *a1, void *a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 31;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    BOOL v6 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412546;
    id v12 = a1;
    __int16 v13 = 2112;
    BOOL v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "playCurrentSelection: accessoryUID=%@ libraryUID=%@", (uint8_t *)&v11, 0x16u);
  }

  id v7 = a2;
  id v8 = a1;
  id v9 = +[ACCMediaLibraryServer sharedServer];
  [v9 playCurrentSelection:v8 library:v7];

  return 1;
}

uint64_t platform_mediaLibrary_playItems(void *a1, void *a2, uint64_t *a3, unsigned int a4, uint64_t a5)
{
  if (gLogObjects) {
    BOOL v10 = gNumLogObjects < 31;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v12 = &_os_log_default;
    id v11 = &_os_log_default;
  }
  else
  {
    id v12 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v21 = 138413058;
    id v22 = a1;
    __int16 v23 = 2112;
    __int16 v24 = a2;
    __int16 v25 = 1024;
    unsigned int v26 = a4;
    __int16 v27 = 1024;
    int v28 = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "playItems: accessoryUID=%@ libraryUID=%@ itemPersistentIDCount=%u startingIndex=%u", (uint8_t *)&v21, 0x22u);
  }

  uint64_t v13 = a4;
  id v14 = [objc_alloc((Class)NSMutableArray) initWithCapacity:a4];
  if (a4)
  {
    do
    {
      uint64_t v15 = *a3++;
      int v16 = +[NSNumber numberWithUnsignedLongLong:v15];
      [v14 addObject:v16];

      --v13;
    }
    while (v13);
  }
  id v17 = a2;
  id v18 = a1;
  __int16 v19 = +[ACCMediaLibraryServer sharedServer];
  [v19 playItems:v18 library:v17 itemList:v14 startIndex:a5];

  return 1;
}

uint64_t platform_mediaLibrary_playCollection(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (gLogObjects) {
    BOOL v12 = gNumLogObjects < 31;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v14 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  else
  {
    id v14 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    int v20 = 138413570;
    int v21 = a1;
    __int16 v22 = 2112;
    __int16 v23 = a2;
    __int16 v24 = 2048;
    uint64_t v25 = a3;
    __int16 v26 = 1024;
    int v27 = a4;
    __int16 v28 = 1024;
    int v29 = a5;
    __int16 v30 = 2048;
    uint64_t v31 = a6;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "playCollection: accessoryUID=%@ libraryUID=%@ collectionPersistentID=%llu collectionType=%d startingIndex=%u startingItemPersistentID=%llu", (uint8_t *)&v20, 0x36u);
  }

  id v15 = a2;
  id v16 = a1;
  id v17 = +[ACCMediaLibraryServer sharedServer];
  id v18 = v17;
  if (a6) {
    [v17 playCollection:v16 library:v15 collection:a3 type:a4 startItem:a6];
  }
  else {
    [v17 playCollection:v16 library:v15 collection:a3 type:a4 startIndex:a5];
  }

  return 1;
}

uint64_t platform_mediaLibrary_playAllSongs(void *a1, void *a2, uint64_t a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 31;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v8 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  else
  {
    id v8 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v13 = 138412802;
    id v14 = a1;
    __int16 v15 = 2112;
    id v16 = a2;
    __int16 v17 = 2048;
    uint64_t v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "playAllSongs: accessoryUID=%@ libraryUID=%@ startingItemPersistentID=%llu", (uint8_t *)&v13, 0x20u);
  }

  id v9 = a2;
  id v10 = a1;
  id v11 = +[ACCMediaLibraryServer sharedServer];
  [v11 playAllSongs:v10 library:v9 startItem:a3];

  return 1;
}

uint64_t platform_mediaLibrary_infoUpdateHandler(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 31;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v7 = &_os_log_default;
    id v6 = &_os_log_default;
  }
  else
  {
    id v7 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    if (v4) {
      CFStringRef v8 = @".";
    }
    else {
      CFStringRef v8 = @"nil ";
    }
    if (v4) {
      id v9 = [v4 count];
    }
    else {
      id v9 = 0;
    }
    int v13 = 138412802;
    id v14 = v3;
    __int16 v15 = 2112;
    CFStringRef v16 = v8;
    __int16 v17 = 2048;
    id v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "infoUpdateHandler %@ libraryInfoList(%@count=%lu)", (uint8_t *)&v13, 0x20u);
  }

  id v10 = malloc_type_malloc(0x38uLL, 0x10E204079BD9B99uLL);
  *(_DWORD *)id v10 = 0;
  v10[6] = 0;
  v10[1] = v4;
  uint64_t v11 = accFeatureHandlers_invokeHandler(v3, 13, (uint64_t)v10);
  if ((v11 & 1) == 0) {
    platform_mediaLibrary_deleteParams(v10);
  }

  return v11;
}

void platform_mediaLibrary_deleteParams(void *a1)
{
  if (a1)
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
      case 1:
        id v3 = (char *)(a1 + 1);
        BOOL v2 = (const void *)a1[1];
        if (v2) {
          goto LABEL_4;
        }
        break;
      case 2:
        BOOL v5 = (const void *)a1[1];
        if (v5)
        {
          CFRelease(v5);
          a1[1] = 0;
        }
        id v3 = (char *)(a1 + 3);
        BOOL v2 = (const void *)a1[3];
        if (v2) {
          goto LABEL_4;
        }
        break;
      case 3:
        id v6 = (const void *)a1[1];
        if (v6)
        {
          CFRelease(v6);
          a1[1] = 0;
        }
        id v7 = (const void *)a1[2];
        if (v7)
        {
          CFRelease(v7);
          a1[2] = 0;
        }
        id v3 = (char *)(a1 + 5);
        BOOL v2 = (const void *)a1[5];
        if (v2)
        {
LABEL_4:
          CFRelease(v2);
          *(void *)id v3 = 0;
        }
        break;
      default:
        break;
    }
    id v4 = (void *)a1[6];
    if (v4)
    {
      a1[6] = 0;
    }
    free(a1);
  }
}

uint64_t platform_mediaLibrary_libraryStateUpdateHandler(void *a1, void *a2, int a3, int a4)
{
  id v7 = a1;
  id v8 = a2;
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects < 31;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v11 = &_os_log_default;
    id v10 = &_os_log_default;
  }
  else
  {
    uint64_t v11 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    int v15 = 138413058;
    id v16 = v7;
    __int16 v17 = 2112;
    id v18 = v8;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = a4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "libraryStateUpdateHandler %@ library:%@ statetype=%d enabled=%d", (uint8_t *)&v15, 0x22u);
  }

  BOOL v12 = malloc_type_malloc(0x38uLL, 0x10E204079BD9B99uLL);
  *(_DWORD *)BOOL v12 = 1;
  v12[6] = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = a3;
  *((unsigned char *)v12 + 20) = a4;
  uint64_t v13 = accFeatureHandlers_invokeHandler(v7, 14, (uint64_t)v12);
  if ((v13 & 1) == 0) {
    platform_mediaLibrary_deleteParams(v12);
  }

  return v13;
}

uint64_t platform_mediaLibrary_updateHandler(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (gLogObjects) {
    BOOL v10 = gNumLogObjects < 31;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v12 = &_os_log_default;
    id v11 = &_os_log_default;
  }
  else
  {
    BOOL v12 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    if (v9) {
      CFStringRef v13 = @".";
    }
    else {
      CFStringRef v13 = @"nil ";
    }
    int v17 = 138413314;
    id v18 = v7;
    __int16 v19 = 2112;
    id v20 = v8;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 2112;
    CFStringRef v24 = v13;
    __int16 v25 = 2048;
    id v26 = [v9 count];
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "updateHandler %@ library:%@ startFull=%d data:(%@count=%lu)", (uint8_t *)&v17, 0x30u);
  }

  id v14 = malloc_type_malloc(0x38uLL, 0x10E204079BD9B99uLL);
  *(_DWORD *)id v14 = 2;
  void v14[6] = 0;
  v14[1] = v8;
  *((unsigned char *)v14 + 16) = a3;
  void v14[3] = v9;
  uint64_t v15 = accFeatureHandlers_invokeHandler(v7, 15, (uint64_t)v14);
  if ((v15 & 1) == 0) {
    platform_mediaLibrary_deleteParams(v14);
  }

  return v15;
}

uint64_t platform_mediaLibrary_updatePlaylistContentHandler(void *a1, void *a2, void *a3, uint64_t a4, int a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a6;
  if (gLogObjects) {
    BOOL v15 = gNumLogObjects < 31;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v17 = &_os_log_default;
    id v16 = &_os_log_default;
  }
  else
  {
    int v17 = *(id *)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    if (v14) {
      CFStringRef v18 = @".";
    }
    else {
      CFStringRef v18 = @"nil ";
    }
    int v22 = 138413826;
    id v23 = v11;
    __int16 v24 = 2112;
    id v25 = v12;
    __int16 v26 = 2112;
    id v27 = v13;
    __int16 v28 = 2048;
    uint64_t v29 = a4;
    __int16 v30 = 1024;
    int v31 = a5;
    __int16 v32 = 2112;
    CFStringRef v33 = v18;
    __int16 v34 = 2048;
    id v35 = [v14 count];
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "updatePlaylistContentHandler %@ library:%@ revision:%@ persistentID=%llu style=%d data:(%@count=%lu)", (uint8_t *)&v22, 0x44u);
  }

  __int16 v19 = malloc_type_malloc(0x38uLL, 0x10E204079BD9B99uLL);
  *(_DWORD *)__int16 v19 = 3;
  v19[1] = v12;
  _DWORD v19[2] = v13;
  v19[3] = a4;
  *((_DWORD *)v19 + 8) = a5;
  void v19[5] = v14;
  void v19[6] = 0;
  uint64_t v20 = accFeatureHandlers_invokeHandler(v11, 16, (uint64_t)v19);
  if ((v20 & 1) == 0) {
    platform_mediaLibrary_deleteParams(v19);
  }

  return v20;
}

uint64_t platform_mediaLibrary_getStructUpdateItem(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = 0;
    if (a3)
    {
      if (a2 && *(_DWORD *)v4 == 2)
      {
        id v6 = *(void **)(v4 + 48);
        if (v6)
        {
          *(void *)(v4 + 48) = 0;
        }
        id v7 = [[ACCMediaLibraryUpdateItem alloc] initWithMediaLibrary:*(void *)(v4 + 8) dict:a2];
        [(ACCMediaLibraryUpdateItem *)v7 fillStruct:a3];
        *(void *)(v4 + 48) = v7;
        return 1;
      }
    }
  }
  return result;
}

uint64_t platform_mediaLibrary_getStructUpdatePlaylist(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = 0;
    if (a3)
    {
      if (a2 && *(_DWORD *)v4 == 2)
      {
        id v6 = *(void **)(v4 + 48);
        if (v6)
        {
          *(void *)(v4 + 48) = 0;
        }
        id v7 = [[ACCMediaLibraryUpdatePlaylist alloc] initWithMediaLibrary:*(void *)(v4 + 8) dict:a2];
        [(ACCMediaLibraryUpdatePlaylist *)v7 fillStruct:a3];
        *(void *)(v4 + 48) = v7;
        return 1;
      }
    }
  }
  return result;
}

uint64_t platform_mediaLibrary_getStructPlaylistContentItem(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = 0;
    if (a3)
    {
      if (a2 && *(_DWORD *)v4 == 3)
      {
        id v6 = *(void **)(v4 + 48);
        if (v6)
        {
          *(void *)(v4 + 48) = 0;
        }
        id v7 = [[ACCMediaLibraryUpdatePlaylistContentItem alloc] initWithMediaLibrary:*(void *)(v4 + 8) playlistPersistentID:*(void *)(v4 + 24) dict:a2];
        [(ACCMediaLibraryUpdatePlaylistContentItem *)v7 fillStruct:a3];
        *(void *)(v4 + 48) = v7;
        return 1;
      }
    }
  }
  return result;
}

void platform_mediaLibrary_incrementUserCount()
{
  BOOL v0 = +[ACCMediaLibraryServer sharedServer];
  [v0 incrementUserCount];

  uint64_t v1 = +[ACCMediaLibraryServer sharedServer];
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = +[ACCFeaturePluginManager sharedManager];
    [v3 startPlugInsWithClasses:&off_1002232A8];
  }
}

void platform_mediaLibrary_decrementUserCount()
{
  id v0 = +[ACCMediaLibraryServer sharedServer];
  [v0 decrementUserCount];
}

id _statusUpdateHandler(uint64_t a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 34, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  id v5 = 0;
  if (!a1 || !a2) {
    goto LABEL_118;
  }
  id v6 = &unk_100239000;
  if (gLogObjects && gNumLogObjects >= 41)
  {
    id v7 = *(NSObject **)(gLogObjects + 320);
  }
  else
  {
    id v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)__int16 v112 = iAP2MsgGetMsgID(a2);
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received Vehicle Status Update message (0x%04X)!", buf, 8u);
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x14u);
  if (!Feature)
  {
LABEL_183:
    id v5 = 0;
    if (!Mutable) {
      return v5;
    }
    goto LABEL_119;
  }
  if (!*(unsigned char *)(Feature + 137) || !*(unsigned char *)(Feature + 138))
  {
    int v49 = logObjectForModule_17();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
      _statusUpdateHandler_cold_1();
    }
    goto LABEL_183;
  }
  uint64_t v107 = a1;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (FirstParam)
  {
    BOOL v10 = (unsigned __int16 *)FirstParam;
    CFStringRef v105 = (const void *)kCFACCVehicleInfoMaxRangeDieselKey;
    __int16 v106 = (const void *)kCFACCVehicleInfoMaxRangeCNGKey;
    CFNumberRef v103 = (const void *)kCFACCVehicleInfoMaxRangeElectricKey;
    __int16 v104 = (const void *)kCFACCVehicleInfoMaxRangeGasolineKey;
    __int16 v102 = (const void *)kCFACCVehicleInfoActiveConnectorKey;
    CFNumberRef v101 = (const void *)kCFACCVehicleInfoConsumptionParameterKey;
    CFNumberRef v99 = (const void *)kCFACCVehicleInfoIsChargingKey;
    __int16 v100 = (const void *)kCFACCVehicleInfoChargingParameterKey;
    CFStringRef v97 = (const void *)kCFACCVehicleInfoMaxBatteryChargeKey;
    __int16 v98 = (const void *)kCFACCVehicleInfoDisplayedBatteryPercentageKey;
    CFStringRef v95 = (const void *)kCFACCVehicleInfoMinBatteryChargeKey;
    __int16 v96 = (const void *)kCFACCVehicleInfoCurrentBatteryChargeKey;
    CFMutableArrayRef v93 = (void *)kCFACCVehicleInfoAlerts;
    __int16 v94 = (const void *)kCFACCVehicleInfoPassengerSeatStatus;
    __int16 v92 = (const void *)kCFACCVehicleInfoBarometricPressure;
    key = (void *)kCFACCVehicleInfoWiperStatusWasherOn;
    CFNumberRef v77 = (void *)kCFACCVehicleInfoWiperStatusWaitDurationMs;
    CFStringRef v78 = (void *)kCFACCVehicleInfoWiperStatusWipeDurationMs;
    CFStringRef v80 = (void *)kCFACCVehicleInfoWiperStatus;
    int v91 = (const void *)kCFACCVehicleInfoHasLowDistanceRangeCNGKey;
    CFStringRef v89 = (const void *)kCFACCVehicleInfoHasLowDistanceRangeDieselKey;
    int v90 = (const void *)kCFACCVehicleInfoHasLowDistanceRangeElectricKey;
    BOOL v87 = (const void *)kCFACCVehicleInfoRangeCNGKey;
    CFNumberRef v88 = (const void *)kCFACCVehicleInfoHasLowDistanceRangeGasolineKey;
    unsigned int v85 = (const void *)kCFACCVehicleInfoRangeDieselKey;
    CFNumberRef v86 = (const void *)kCFACCVehicleInfoRangeElectricKey;
    CFNumberRef v83 = (const void *)kCFACCVehicleInfoHasLowDistanceRangeKey;
    CFStringRef v84 = (const void *)kCFACCVehicleInfoRangeGasolineKey;
    CFStringRef v82 = (const void *)kCFACCVehicleInfoOutsideTemperatureKey;
    unint64_t v81 = (const void *)kCFACCVehicleInfoRangeKey;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)v10);
      uint64_t v12 = v6[49];
      int v13 = gNumLogObjects;
      if (v12 && gNumLogObjects >= 41)
      {
        id v14 = *(NSObject **)(v12 + 320);
      }
      else
      {
        id v14 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)__int16 v112 = v12;
          *(_WORD *)&v112[8] = 1024;
          int v113 = v13;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)__int16 v112 = ParamID;
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
      }
      switch(ParamID)
      {
        case 3:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (!*(_DWORD *)buf)
          {
            BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
            id v16 = Mutable;
            int v17 = v81;
            goto LABEL_106;
          }
          int v50 = logObjectForModule_17();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_4(a2);
          }
          goto LABEL_183;
        case 4:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsI16(v10, buf);
          if (*(_DWORD *)buf)
          {
            unint64_t v51 = logObjectForModule_17();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
              iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_5(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v82;
          goto LABEL_106;
        case 6:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            CFBooleanRef v52 = logObjectForModule_17();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
              iap2_CarPlayStartSession_cold_12(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v83;
          goto LABEL_106;
        case 9:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            unsigned int v53 = logObjectForModule_17();
            if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_5(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v84;
          goto LABEL_106;
        case 10:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            char v54 = logObjectForModule_17();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_6(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v85;
          goto LABEL_106;
        case 11:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            uint64_t v55 = logObjectForModule_17();
            if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_7(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v86;
          goto LABEL_106;
        case 12:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            uint64_t v56 = logObjectForModule_17();
            if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_8(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v87;
          goto LABEL_106;
        case 13:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            unsigned int v57 = logObjectForModule_17();
            if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_9(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v88;
          goto LABEL_106;
        case 14:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            CFStringRef v58 = logObjectForModule_17();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_10(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v89;
          goto LABEL_106;
        case 15:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            CFStringRef v59 = logObjectForModule_17();
            if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_11(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v90;
          goto LABEL_106;
        case 16:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            int v60 = logObjectForModule_17();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_12(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v91;
          goto LABEL_106;
        case 17:
          *(_DWORD *)buf = -1431655766;
          unint64_t v18 = iAP2MsgGetFirstParam(a2, v10);
          if (v18)
          {
            NextParam = (unsigned __int16 *)v18;
            int v20 = 0;
            int v21 = 0;
            int v22 = 0;
            BOOL v23 = 0;
            __int16 v110 = 0;
            int valuePtr = 0;
            while (1)
            {
              int v24 = iAP2MsgGetParamID((uint64_t)NextParam);
              switch(v24)
              {
                case 2:
                  int DataAsU32 = iAP2MsgGetDataAsU32(NextParam, buf);
                  if (*(_DWORD *)buf)
                  {
                    int v47 = logObjectForModule_17();
                    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
                      _statusUpdateHandler_cold_16(a2);
                    }
                    goto LABEL_183;
                  }
                  int valuePtr = DataAsU32;
                  int v20 = 1;
                  break;
                case 1:
                  __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, buf);
                  if (*(_DWORD *)buf)
                  {
                    __int16 v48 = logObjectForModule_17();
                    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
                      _statusUpdateHandler_cold_15(a2);
                    }
                    goto LABEL_183;
                  }
                  __int16 v110 = DataAsU16;
                  int v21 = 1;
                  break;
                case 0:
                  int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, buf);
                  if (*(_DWORD *)buf)
                  {
                    __int16 v46 = logObjectForModule_17();
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
                      _statusUpdateHandler_cold_14(a2);
                    }
                    goto LABEL_183;
                  }
                  BOOL v23 = DataAsU8 != 0;
                  int v22 = 1;
                  break;
              }
              NextParam = iAP2MsgGetNextParam(a2, v10, NextParam);
              if (!NextParam)
              {
                if ((v22 | v21 | v20))
                {
                  __int16 v28 = CFDictionaryCreateMutable(kCFAllocatorDefault, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                  if (v22)
                  {
                    BOOL v108 = v23;
                    CFNumberRef v29 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &v108);
                    CFDictionaryAddValue(v28, key, v29);
                    if (v29) {
                      CFRelease(v29);
                    }
                  }
                  if (v21)
                  {
                    CFNumberRef v30 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v110);
                    CFDictionaryAddValue(v28, v78, v30);
                    if (v30) {
                      CFRelease(v30);
                    }
                  }
                  if (v20)
                  {
                    CFNumberRef v31 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
                    CFDictionaryAddValue(v28, v77, v31);
                    if (v31) {
                      CFRelease(v31);
                    }
                  }
                  CFDictionarySetValue(Mutable, v80, v28);
                  if (v28)
                  {
                    __int16 v32 = v28;
                    goto LABEL_78;
                  }
                }
                goto LABEL_79;
              }
            }
          }
          __int16 v61 = logObjectForModule_17();
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
            _statusUpdateHandler_cold_13(a2);
          }
          goto LABEL_183;
        case 18:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            int v62 = logObjectForModule_17();
            if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_17(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v92;
          goto LABEL_106;
        case 19:
          *(_DWORD *)buf = -1431655766;
          uint64_t DataAsData = (char *)iAP2MsgGetDataAsData((uint64_t)v10, buf);
          unsigned int ParamValueLen = iAP2MsgGetParamValueLen(v10);
          if (*(_DWORD *)buf)
          {
            __int16 v63 = logObjectForModule_17();
            if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_18(a2);
            }
            goto LABEL_183;
          }
          unsigned int v35 = ParamValueLen;
          uint64_t v36 = ParamValueLen;
          uint64_t v37 = CFArrayCreateMutable(kCFAllocatorDefault, ParamValueLen, &kCFTypeArrayCallBacks);
          if (v35)
          {
            do
            {
              CFNumberRef v38 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, DataAsData);
              CFArrayAppendValue(v37, v38);
              if (v38) {
                CFRelease(v38);
              }
              ++DataAsData;
              --v36;
            }
            while (v36);
          }
          CFDictionarySetValue(Mutable, v93, v37);
          if (v37)
          {
            __int16 v32 = v37;
LABEL_78:
            CFRelease(v32);
          }
LABEL_79:
          id v6 = (void *)&unk_100239000;
          goto LABEL_108;
        case 20:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            int v64 = logObjectForModule_17();
            if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_19(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v94;
          goto LABEL_106;
        case 21:
          *(_DWORD *)buf = -1431655766;
          int valuePtr = -1431655766;
          int valuePtr = iAP2MsgGetDataAsU32(v10, buf);
          if (*(_DWORD *)buf)
          {
            __int16 v65 = logObjectForModule_17();
            if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_20(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v95;
          goto LABEL_106;
        case 22:
          *(_DWORD *)buf = -1431655766;
          int valuePtr = -1431655766;
          int valuePtr = iAP2MsgGetDataAsU32(v10, buf);
          if (*(_DWORD *)buf)
          {
            int v66 = logObjectForModule_17();
            if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_21(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v96;
          goto LABEL_106;
        case 23:
          *(_DWORD *)buf = -1431655766;
          int valuePtr = -1431655766;
          int valuePtr = iAP2MsgGetDataAsU32(v10, buf);
          if (*(_DWORD *)buf)
          {
            __int16 v67 = logObjectForModule_17();
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_22(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v97;
          goto LABEL_106;
        case 24:
          *(_DWORD *)buf = -1431655766;
          int valuePtr = -1431655766;
          int valuePtr = iAP2MsgGetDataAsU32(v10, buf);
          if (*(_DWORD *)buf)
          {
            int v68 = logObjectForModule_17();
            if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_23(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v98;
          goto LABEL_106;
        case 25:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            unsigned int v69 = logObjectForModule_17();
            if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_24(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v99;
          goto LABEL_106;
        case 26:
          *(_DWORD *)buf = -1431655766;
          DataAsString = iAP2MsgGetDataAsString(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            unsigned int v70 = logObjectForModule_17();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_25(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
          id v16 = Mutable;
          int v17 = v100;
          goto LABEL_106;
        case 27:
          *(_DWORD *)buf = -1431655766;
          __int16 v40 = iAP2MsgGetDataAsString(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            unint64_t v71 = logObjectForModule_17();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_26(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v40, 0x8000100u);
          id v16 = Mutable;
          int v17 = v101;
          goto LABEL_106;
        case 28:
          *(_DWORD *)buf = -1431655766;
          int valuePtr = -1431655766;
          int valuePtr = iAP2MsgGetDataAsU8(v10, buf);
          if (*(_DWORD *)buf)
          {
            unint64_t v72 = logObjectForModule_17();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_27(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
          id v16 = Mutable;
          int v17 = v102;
          goto LABEL_106;
        case 30:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            unsigned int v73 = logObjectForModule_17();
            if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_28(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v103;
          goto LABEL_106;
        case 31:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            unint64_t v74 = logObjectForModule_17();
            if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_29(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v104;
          goto LABEL_106;
        case 32:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            uint64_t v75 = logObjectForModule_17();
            if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_30(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v105;
          goto LABEL_106;
        case 33:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            uint64_t v76 = logObjectForModule_17();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_31(a2);
            }
            goto LABEL_183;
          }
          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v106;
LABEL_106:
          CFDictionarySetValue(v16, v17, v15);
          if (v15) {
            CFRelease(v15);
          }
LABEL_108:
          BOOL v10 = iAP2MsgGetNextParam(a2, 0, v10);
          if (!v10) {
            goto LABEL_117;
          }
          break;
        default:
          uint64_t v41 = v6[49];
          int v42 = gNumLogObjects;
          if (v41 && gNumLogObjects >= 41)
          {
            int v43 = *(NSObject **)(v41 + 320);
          }
          else
          {
            int v43 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)__int16 v112 = v41;
              *(_WORD *)&v112[8] = 1024;
              int v113 = v42;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
          }
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            int MsgID = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)__int16 v112 = ParamID;
            *(_WORD *)&v112[4] = 1024;
            *(_DWORD *)&v112[6] = MsgID;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
          }
          goto LABEL_108;
      }
    }
  }
LABEL_117:
  id v5 = platform_vehicle_vehicleStatusChanged(*(void *)(v107 + 8), Mutable);
LABEL_118:
  if (Mutable) {
LABEL_119:
  }
    CFRelease(Mutable);
  return v5;
}

void *logObjectForModule_17()
{
  if (gLogObjects && gNumLogObjects >= 41) {
    return *(void **)(gLogObjects + 320);
  }
  id v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t iap2_vehicle_startStatusUpdatesHandler(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = (uint64_t *)result;
  if (!*(void *)result) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 41)
  {
    unsigned int v2 = *(NSObject **)(gLogObjects + 320);
  }
  else
  {
    unsigned int v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = v1[1];
    *(_DWORD *)buf = 138412290;
    uint64_t v27 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting vehicle status updates for endpoint %@!", buf, 0xCu);
  }
  uint64_t result = iap2_feature_getFeature((uint64_t)v1, 0x14u);
  if (result)
  {
    uint64_t v4 = result;
    if (*(unsigned char *)(result + 137))
    {
      if (!*(unsigned char *)(result + 138))
      {
        *(unsigned char *)(result + 138) = 1;
        iAP2MsgInit((uint64_t)(v1 + 15), 41216, v1[24], 0xFFFF, 0, 0);
        CFArrayRef v5 = *(const __CFArray **)(v4 + 16);
        if (v5)
        {
          CFIndex Count = CFArrayGetCount(v5);
          buf[0] = 0;
          CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, buf);
          buf[0] = 1;
          CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, buf);
          buf[0] = 2;
          CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, buf);
          buf[0] = 3;
          CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, buf);
          v28.location = 0;
          v28.uint64_t length = Count;
          BOOL v25 = CFArrayContainsValue(*(CFArrayRef *)(v4 + 16), v28, v7) != 0;
          v29.location = 0;
          v29.uint64_t length = Count;
          BOOL v11 = CFArrayContainsValue(*(CFArrayRef *)(v4 + 16), v29, v8) != 0;
          v30.location = 0;
          v30.uint64_t length = Count;
          BOOL v12 = CFArrayContainsValue(*(CFArrayRef *)(v4 + 16), v30, v9) != 0;
          v31.location = 0;
          v31.uint64_t length = Count;
          BOOL v13 = CFArrayContainsValue(*(CFArrayRef *)(v4 + 16), v31, v10) != 0;
          if (v7) {
            CFRelease(v7);
          }
          if (v8) {
            CFRelease(v8);
          }
          if (v9) {
            CFRelease(v9);
          }
          if (v10) {
            CFRelease(v10);
          }
          BOOL v14 = v25;
        }
        else
        {
          BOOL v14 = 0;
          BOOL v11 = 0;
          BOOL v12 = 0;
          BOOL v13 = 0;
        }
        if (*(unsigned char *)(v4 + 120)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 3);
        }
        if (*(unsigned char *)(v4 + 121)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 4);
        }
        if (*(unsigned char *)(v4 + 122)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 6);
        }
        if (*(unsigned char *)(v4 + 123)) {
          BOOL v15 = v14;
        }
        else {
          BOOL v15 = 0;
        }
        if (v15) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 9);
        }
        if (*(unsigned char *)(v4 + 124)) {
          BOOL v16 = v11;
        }
        else {
          BOOL v16 = 0;
        }
        if (v16) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 10);
        }
        if (*(unsigned char *)(v4 + 125)) {
          BOOL v17 = v12;
        }
        else {
          BOOL v17 = 0;
        }
        if (v17) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 11);
        }
        if (*(unsigned char *)(v4 + 126)) {
          BOOL v18 = v13;
        }
        else {
          BOOL v18 = 0;
        }
        if (v18) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 12);
        }
        if (*(unsigned char *)(v4 + 131)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 17);
        }
        if (*(unsigned char *)(v4 + 127)) {
          BOOL v19 = v14;
        }
        else {
          BOOL v19 = 0;
        }
        if (v19) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 13);
        }
        if (*(unsigned char *)(v4 + 128)) {
          BOOL v20 = v11;
        }
        else {
          BOOL v20 = 0;
        }
        if (v20) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 14);
        }
        if (*(unsigned char *)(v4 + 129)) {
          BOOL v21 = v12;
        }
        else {
          BOOL v21 = 0;
        }
        if (v21) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 15);
        }
        if (*(unsigned char *)(v4 + 130)) {
          BOOL v22 = v13;
        }
        else {
          BOOL v22 = 0;
        }
        if (v22) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 16);
        }
        if (*(unsigned char *)(v4 + 132)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 18);
        }
        if (*(unsigned char *)(v4 + 133)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 19);
        }
        if (*(unsigned char *)(v4 + 134)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 20);
        }
        if (*(unsigned char *)(v4 + 135)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 21);
        }
        if (*(unsigned char *)(v4 + 136)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, 30);
        }
        return iap2_sessionControl_sendOutgoingMessage(v1, (uint64_t)(v1 + 15));
      }
      int v24 = logObjectForModule_17();
      uint64_t result = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      iap2_vehicle_startStatusUpdatesHandler_cold_2();
    }
    else
    {
      BOOL v23 = logObjectForModule_17();
      uint64_t result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      iap2_vehicle_startStatusUpdatesHandler_cold_1();
    }
    return 0;
  }
  return result;
}

double _createFeature_11(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (char *)malloc_type_calloc(1uLL, 0x90uLL, 0x1060040318D9E5CuLL);
    if (v1)
    {
      *(_WORD *)uint64_t v1 = 0;
      v1[96] = 0;
      *((_WORD *)v1 + 52) = 0;
      *((void *)v1 + 2) = 0;
      *((void *)v1 + 3) = 0;
      *((void *)v1 + 1) = 0;
      double result = 0.0;
      *(_OWORD *)(v1 + 40) = 0u;
      *(_OWORD *)(v1 + 56) = 0u;
      *(_OWORD *)(v1 + 72) = 0u;
      *((void *)v1 + 15) = 0;
      *((void *)v1 + 16) = 0;
      *((void *)v1 + 14) = 0;
      *((_WORD *)v1 + 68) = 0;
    }
  }
  return result;
}

uint64_t _destroyFeature_11(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    unsigned int v2 = *(void **)result;
    if (*(void *)result)
    {
      uint64_t v3 = (const void *)v2[1];
      if (v3)
      {
        CFRelease(v3);
        v2[1] = 0;
      }
      uint64_t v4 = (const void *)v2[2];
      if (v4)
      {
        CFRelease(v4);
        v2[2] = 0;
      }
      CFArrayRef v5 = (const void *)v2[3];
      if (v5)
      {
        CFRelease(v5);
        v2[3] = 0;
      }
      id v6 = (const void *)v2[4];
      if (v6)
      {
        CFRelease(v6);
        v2[4] = 0;
      }
      CFNumberRef v7 = (const void *)v2[14];
      if (v7)
      {
        CFRelease(v7);
        v2[14] = 0;
      }
      CFNumberRef v8 = (const void *)v2[5];
      if (v8)
      {
        CFRelease(v8);
        v2[5] = 0;
      }
      CFNumberRef v9 = (const void *)v2[6];
      if (v9)
      {
        CFRelease(v9);
        v2[6] = 0;
      }
      if (*v1)
      {
        free(*v1);
        char *v1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _checkIdentificationInfo_9(uint64_t a1)
{
  if (!iap2_feature_getFeature(a1, 0x14u)) {
    iap2_features_createFeature(a1, 0x14u);
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x14u);
  if (!Feature) {
    return 17;
  }
  uint64_t v3 = Feature;
  char v8 = 0;
  uint64_t v4 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgVehicleStatusList, 3u, &v8);
  uint64_t v5 = v4;
  if (!v8 || v4)
  {
    if (!v8 && *(unsigned char *)(v3 + 137))
    {
      uint64_t v5 = 14;
      iap2_identification_addRejectGroup(a1, 21, *(unsigned __int16 *)(v3 + 104), 0xEu);
    }
  }
  else if (*(unsigned char *)(v3 + 137))
  {
    iap2_features_createFeature(a1, 0x14u);
    iap2_identification_setIdentifiedForFeature(a1, 0x14u);
    return 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 14;
    do
    {
      iap2_identification_rejectMsgID(a1, *(unsigned __int16 *)((char *)&_checkIdentificationInfo_kMsgVehicleStatusList + v6), *(_DWORD *)((char *)&_checkIdentificationInfo_kMsgVehicleStatusList + v6 + 4), 0xEu);
      v6 += 12;
    }
    while (v6 != 36);
  }
  return v5;
}

void _handleIdentificationRejection_1(uint64_t a1)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 0x14u);
  if (Feature)
  {
    unsigned int v2 = (void *)Feature;
    uint64_t v3 = *(const void **)(Feature + 8);
    if (v3)
    {
      CFRelease(v3);
      v2[1] = 0;
    }
    uint64_t v4 = (const void *)v2[2];
    if (v4)
    {
      CFRelease(v4);
      v2[2] = 0;
    }
    uint64_t v5 = (const void *)v2[3];
    if (v5)
    {
      CFRelease(v5);
      v2[3] = 0;
    }
    uint64_t v6 = (const void *)v2[4];
    if (v6)
    {
      CFRelease(v6);
      v2[4] = 0;
    }
    CFNumberRef v7 = (const void *)v2[14];
    if (v7)
    {
      CFRelease(v7);
      v2[14] = 0;
    }
    char v8 = (const void *)v2[5];
    if (v8)
    {
      CFRelease(v8);
      v2[5] = 0;
    }
    CFNumberRef v9 = (const void *)v2[6];
    if (v9)
    {
      CFRelease(v9);
      v2[6] = 0;
    }
  }
}

uint64_t _parseIdentificationParams_2(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t Feature = 0;
  BOOL v94 = 0;
  if (!a1 || !a2 || !a3) {
    return Feature;
  }
  uint64_t v6 = a1;
  if (!iap2_feature_getFeature(a1, 0x14u)) {
    iap2_features_createFeature(v6, 0x14u);
  }
  uint64_t Feature = iap2_feature_getFeature(v6, 0x14u);
  if (!Feature) {
    return Feature;
  }
  int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  int v8 = ParamID;
  if (ParamID != 21)
  {
    if (ParamID != 20)
    {
      if (gLogObjects && gNumLogObjects >= 41)
      {
        uint64_t v36 = *(NSObject **)(gLogObjects + 320);
      }
      else
      {
        uint64_t v36 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParams_cold_1_2(a2);
      }
      uint64_t Feature = 0;
      unsigned __int16 v37 = 0;
      unsigned int v27 = 10;
      goto LABEL_206;
    }
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
    if (!FirstParam)
    {
      uint64_t Feature = 0;
      unsigned __int16 v37 = 0;
      unsigned int v27 = 2;
LABEL_206:
      iap2_identification_addRejectGroup(v6, v8, v37, v27);
      return Feature;
    }
    NextParam = (unsigned __int16 *)FirstParam;
    uint64_t v63 = Feature;
    uint64_t v60 = v6;
    uint64_t v79 = 0;
    uint64_t v71 = 0;
    uint64_t v73 = 0;
    uint64_t v67 = 0;
    uint64_t v69 = 0;
    uint64_t v65 = 0;
    CFStringRef v87 = 0;
    CFMutableArrayRef v89 = 0;
    CFStringRef v83 = 0;
    CFStringRef v85 = 0;
    CFMutableArrayRef Mutable = 0;
    CFStringRef v82 = 0;
    unsigned __int16 DataAsU16 = 0;
    do
    {
      int v11 = iAP2MsgGetParamID((uint64_t)NextParam);
      uint64_t v12 = gLogObjects;
      int v13 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 41)
      {
        BOOL v14 = *(NSObject **)(gLogObjects + 320);
      }
      else
      {
        BOOL v14 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)__int16 v96 = v12;
          *(_WORD *)&v96[8] = 1024;
          v97[0] = v13;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          BOOL v14 = &_os_log_default;
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        _parseIdentificationParams_cold_4_0(v98, v99, v14);
      }
      switch(v11)
      {
        case 0:
          unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v94);
          LODWORD(v79) = !v94 | v79;
          break;
        case 1:
          if (v82) {
            CFRelease(v82);
          }
          CFStringRef v82 = iAP2MsgCopyDataAsCFString(NextParam, &v94);
          HIDWORD(v79) |= !v94;
          break;
        case 2:
          if (!Mutable) {
            CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
          }
          int valuePtr = -1431655766;
          unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v94);
          int valuePtr = DataAsU8;
          if (!v94)
          {
            if (DataAsU8 <= 3)
            {
              CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
              BOOL v17 = Mutable;
              goto LABEL_41;
            }
            uint64_t v22 = gLogObjects;
            int v23 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 41)
            {
              int v24 = *(NSObject **)(gLogObjects + 320);
            }
            else
            {
              int v24 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)__int16 v96 = v22;
                *(_WORD *)&v96[8] = 1024;
                v97[0] = v23;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                int v24 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              _parseIdentificationParams_cold_3_1(&v91, v92, v24);
            }
          }
          break;
        case 6:
          if (v83) {
            CFRelease(v83);
          }
          CFStringRef v83 = iAP2MsgCopyDataAsCFString(NextParam, &v94);
          break;
        case 8:
          if (v85) {
            CFRelease(v85);
          }
          CFStringRef v85 = iAP2MsgCopyDataAsCFString(NextParam, &v94);
          break;
        case 10:
          if (v87) {
            CFRelease(v87);
          }
          CFStringRef v87 = iAP2MsgCopyDataAsCFString(NextParam, &v94);
          break;
        case 11:
          if (!v89) {
            CFMutableArrayRef v89 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
          }
          *(_DWORD *)buf = -1431655766;
          *(_DWORD *)buf = iAP2MsgGetDataAsU8(NextParam, &v94);
          if (!v94)
          {
            CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, buf);
            BOOL v17 = v89;
LABEL_41:
            CFArrayAppendValue(v17, v16);
            CFRelease(v16);
          }
          break;
        case 12:
          LODWORD(v65) = iAP2MsgGetDataAsU32(NextParam, &v94);
          break;
        case 13:
          HIDWORD(v65) = iAP2MsgGetDataAsU32(NextParam, &v94);
          break;
        case 14:
          LODWORD(v67) = iAP2MsgGetDataAsU32(NextParam, &v94);
          break;
        case 15:
          LODWORD(v69) = iAP2MsgGetDataAsU32(NextParam, &v94);
          break;
        case 16:
          HIDWORD(v69) = iAP2MsgGetDataAsU32(NextParam, &v94);
          break;
        case 17:
          LODWORD(v71) = iAP2MsgGetDataAsU32(NextParam, &v94);
          break;
        case 18:
          HIDWORD(v71) = iAP2MsgGetDataAsU32(NextParam, &v94);
          break;
        case 19:
          LODWORD(v73) = iAP2MsgGetDataAsU32(NextParam, &v94);
          HIDWORD(v67) = iAP2MsgGetDataAsU32(NextParam, &v94);
          break;
        case 20:
          HIDWORD(v73) = iAP2MsgGetDataAsU32(NextParam, &v94);
          break;
        default:
          uint64_t v18 = gLogObjects;
          int v19 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 41)
          {
            BOOL v20 = *(NSObject **)(gLogObjects + 320);
          }
          else
          {
            BOOL v20 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)__int16 v96 = v18;
              *(_WORD *)&v96[8] = 1024;
              v97[0] = v19;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              BOOL v20 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            int MsgID = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)__int16 v96 = v11;
            *(_WORD *)&v96[4] = 1024;
            *(_DWORD *)&v96[6] = 20;
            LOWORD(v97[0]) = 1024;
            *(_DWORD *)((char *)v97 + 2) = MsgID;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Unknown Subparam ID: %d in Param ID: %d for Msg ID: 0x%04X - ignoring subparam", buf, 0x14u);
          }
          break;
      }
      NextParam = iAP2MsgGetNextParam(a2, a3, NextParam);
    }
    while (NextParam);
    if (v79 & HIDWORD(v79))
    {
      unsigned __int16 v37 = DataAsU16;
      *(_WORD *)uint64_t v63 = DataAsU16;
      CFNumberRef v38 = *(const void **)(v63 + 8);
      unsigned int v39 = v89;
      CFMutableArrayRef v40 = Mutable;
      if (v38)
      {
        CFRelease(v38);
        *(void *)(v63 + 8) = 0;
      }
      if (v82) {
        *(void *)(v63 + 8) = CFRetain(v82);
      }
      uint64_t v41 = *(const void **)(v63 + 16);
      if (v41)
      {
        CFRelease(v41);
        *(void *)(v63 + 16) = 0;
      }
      if (Mutable) {
        *(void *)(v63 + 16) = CFRetain(Mutable);
      }
      int v42 = *(const void **)(v63 + 24);
      if (v42)
      {
        CFRelease(v42);
        *(void *)(v63 + 24) = 0;
      }
      if (v83) {
        *(void *)(v63 + 24) = CFRetain(v83);
      }
      int v43 = *(const void **)(v63 + 32);
      if (v43)
      {
        CFRelease(v43);
        *(void *)(v63 + 32) = 0;
      }
      if (v85) {
        *(void *)(v63 + 32) = CFRetain(v85);
      }
      __int16 v44 = *(const void **)(v63 + 40);
      if (v44)
      {
        CFRelease(v44);
        *(void *)(v63 + 40) = 0;
      }
      if (v87) {
        *(void *)(v63 + 40) = CFRetain(v87);
      }
      int v45 = *(const void **)(v63 + 48);
      if (v45)
      {
        CFRelease(v45);
        *(void *)(v63 + 48) = 0;
      }
      if (v89) {
        *(void *)(v63 + 48) = CFRetain(v89);
      }
      unsigned int v27 = 0;
      *(void *)(v63 + 56) = v65;
      *(_DWORD *)(v63 + 64) = v67;
      *(void *)(v63 + 68) = v69;
      *(void *)(v63 + 76) = v71;
      *(_DWORD *)(v63 + 84) = v73;
      *(_DWORD *)(v63 + 88) = HIDWORD(v67);
      *(_DWORD *)(v63 + 92) = HIDWORD(v73);
      *(unsigned char *)(v63 + 96) = 1;
    }
    else
    {
      unsigned int v27 = 2;
      unsigned int v39 = v89;
      unsigned __int16 v37 = DataAsU16;
      CFMutableArrayRef v40 = Mutable;
    }
    if (v82) {
      CFRelease(v82);
    }
    uint64_t v6 = v60;
    int v8 = 20;
    if (v40) {
      CFRelease(v40);
    }
    if (v83) {
      CFRelease(v83);
    }
    if (v85) {
      CFRelease(v85);
    }
    if (v87) {
      CFRelease(v87);
    }
    goto LABEL_203;
  }
  uint64_t v64 = Feature;
  unint64_t v25 = iAP2MsgGetFirstParam(a2, a3);
  if (!v25)
  {
    unsigned int v39 = 0;
LABEL_201:
    unsigned int v27 = 2;
    goto LABEL_202;
  }
  __int16 v26 = (unsigned __int16 *)v25;
  char v84 = 0;
  uint64_t v81 = 0;
  char v80 = 0;
  uint64_t v77 = 0;
  char allocator = 0;
  uint64_t v72 = 0;
  uint64_t v74 = 0;
  BOOL v59 = 0;
  BOOL v57 = 0;
  BOOL v55 = 0;
  BOOL IsDataVoid = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v68 = 0;
  uint64_t v70 = 0;
  uint64_t v66 = 0;
  BOOL v86 = 0;
  BOOL v88 = 0;
  CFStringRef v90 = 0;
  BOOL v62 = 0;
  BOOL v61 = 0;
  BOOL v58 = 0;
  BOOL v56 = 0;
  BOOL v54 = 0;
  BOOL v52 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  unsigned int v27 = 10;
  do
  {
    int v28 = iAP2MsgGetParamID((uint64_t)v26);
    uint64_t v29 = gLogObjects;
    int v30 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 41)
    {
      CFRange v31 = *(NSObject **)(gLogObjects + 320);
    }
    else
    {
      CFRange v31 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)__int16 v96 = v29;
        *(_WORD *)&v96[8] = 1024;
        v97[0] = v30;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        CFRange v31 = &_os_log_default;
      }
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
      _parseIdentificationParams_cold_5_1(v98, v99, v31);
    }
    switch(v28)
    {
      case 0:
        if (v88)
        {
          BOOL v88 = 1;
          goto LABEL_118;
        }
        LOWORD(v48) = iAP2MsgGetDataAsU16(v26, &v94);
        BOOL v88 = !v94;
        break;
      case 1:
        if (v86)
        {
          BOOL v86 = 1;
          goto LABEL_118;
        }
        if (v90) {
          CFRelease(v90);
        }
        CFStringRef v90 = iAP2MsgCopyDataAsCFString(v26, &v94);
        BOOL v86 = !v94;
        break;
      case 3:
        if (v66)
        {
          LOBYTE(v66) = 1;
          goto LABEL_118;
        }
        BYTE4(v48) = iAP2MsgIsDataVoid(v26);
        LOBYTE(v66) = 1;
        break;
      case 4:
        if ((v66 & 0x100000000) != 0)
        {
          BYTE4(v66) = 1;
          goto LABEL_118;
        }
        LOBYTE(v49) = iAP2MsgIsDataVoid(v26);
        BYTE4(v66) = 1;
        break;
      case 6:
        if (v68)
        {
          LOBYTE(v68) = 1;
          goto LABEL_118;
        }
        BYTE4(v49) = iAP2MsgIsDataVoid(v26);
        LOBYTE(v68) = 1;
        break;
      case 9:
        if ((v74 & 0x100000000) != 0)
        {
          BYTE4(v74) = 1;
          goto LABEL_118;
        }
        LOBYTE(v50) = iAP2MsgIsDataVoid(v26);
        BYTE4(v74) = 1;
        break;
      case 10:
        if (allocator)
        {
          char allocator = 1;
          goto LABEL_118;
        }
        BYTE4(v50) = iAP2MsgIsDataVoid(v26);
        char allocator = 1;
        break;
      case 11:
        if (v77)
        {
          LOBYTE(v77) = 1;
          goto LABEL_118;
        }
        LOBYTE(v51) = iAP2MsgIsDataVoid(v26);
        LOBYTE(v77) = 1;
        break;
      case 12:
        if ((v77 & 0x100000000) != 0)
        {
          BYTE4(v77) = 1;
          goto LABEL_118;
        }
        BYTE4(v51) = iAP2MsgIsDataVoid(v26);
        BYTE4(v77) = 1;
        break;
      case 13:
        if (v80)
        {
          char v80 = 1;
          goto LABEL_118;
        }
        BOOL IsDataVoid = iAP2MsgIsDataVoid(v26);
        char v80 = 1;
        break;
      case 14:
        if (v81)
        {
          LOBYTE(v81) = 1;
          goto LABEL_118;
        }
        BOOL v55 = iAP2MsgIsDataVoid(v26);
        LOBYTE(v81) = 1;
        break;
      case 15:
        if ((v81 & 0x100000000) != 0)
        {
          BYTE4(v81) = 1;
          goto LABEL_118;
        }
        BOOL v57 = iAP2MsgIsDataVoid(v26);
        BYTE4(v81) = 1;
        break;
      case 16:
        if (v84)
        {
          char v84 = 1;
          goto LABEL_118;
        }
        BOOL v59 = iAP2MsgIsDataVoid(v26);
        char v84 = 1;
        break;
      case 17:
        if ((v68 & 0x100000000) != 0)
        {
          BYTE4(v68) = 1;
          goto LABEL_118;
        }
        BOOL v52 = iAP2MsgIsDataVoid(v26);
        BYTE4(v68) = 1;
        break;
      case 18:
        if (v70)
        {
          LOBYTE(v70) = 1;
          goto LABEL_118;
        }
        BOOL v54 = iAP2MsgIsDataVoid(v26);
        LOBYTE(v70) = 1;
        break;
      case 19:
        if ((v70 & 0x100000000) != 0)
        {
          BYTE4(v70) = 1;
          goto LABEL_118;
        }
        BOOL v56 = iAP2MsgIsDataVoid(v26);
        BYTE4(v70) = 1;
        break;
      case 20:
        if (v72)
        {
          LOBYTE(v72) = 1;
          goto LABEL_118;
        }
        BOOL v58 = iAP2MsgIsDataVoid(v26);
        LOBYTE(v72) = 1;
        break;
      case 21:
        if ((v72 & 0x100000000) != 0)
        {
          BYTE4(v72) = 1;
          goto LABEL_118;
        }
        BOOL v61 = iAP2MsgIsDataVoid(v26);
        BYTE4(v72) = 1;
        break;
      case 30:
        if (v74)
        {
          LOBYTE(v74) = 1;
LABEL_118:
          unsigned int v27 = 5;
        }
        else
        {
          BOOL v62 = iAP2MsgIsDataVoid(v26);
          LOBYTE(v74) = 1;
        }
        break;
      default:
        uint64_t v32 = gLogObjects;
        int v33 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 41)
        {
          __int16 v34 = *(NSObject **)(gLogObjects + 320);
        }
        else
        {
          __int16 v34 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)__int16 v96 = v32;
            *(_WORD *)&v96[8] = 1024;
            v97[0] = v33;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            __int16 v34 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          int v35 = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)__int16 v96 = v28;
          *(_WORD *)&v96[4] = 1024;
          *(_DWORD *)&v96[6] = 21;
          LOWORD(v97[0]) = 1024;
          *(_DWORD *)((char *)v97 + 2) = v35;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Unknown Subparam ID: %d in Param ID: %d for Msg ID: 0x%04X - ignoring subparam", buf, 0x14u);
        }
        break;
    }
    __int16 v26 = iAP2MsgGetNextParam(a2, a3, v26);
  }
  while (v26);
  if (v88 && v86 && v27 != 5)
  {
    *(_WORD *)(v64 + 104) = v48;
    __int16 v46 = *(const void **)(v64 + 112);
    unsigned int v39 = v90;
    if (v46)
    {
      CFRelease(v46);
      *(void *)(v64 + 112) = 0;
    }
    if (v90) {
      *(void *)(v64 + 112) = CFRetain(v90);
    }
    unsigned int v27 = 0;
    *(unsigned char *)(v64 + 120) = BYTE4(v48) & 1;
    *(unsigned char *)(v64 + 121) = v49 & 1;
    *(unsigned char *)(v64 + 122) = BYTE4(v49) & 1;
    *(unsigned char *)(v64 + 123) = v50 & 1;
    *(unsigned char *)(v64 + 124) = BYTE4(v50) & 1;
    *(unsigned char *)(v64 + 125) = v51 & 1;
    *(unsigned char *)(v64 + 126) = BYTE4(v51) & 1;
    *(unsigned char *)(v64 + 127) = IsDataVoid;
    *(unsigned char *)(v64 + 128) = v55;
    *(unsigned char *)(v64 + 129) = v57;
    *(unsigned char *)(v64 + 130) = v59;
    *(unsigned char *)(v64 + 131) = v52;
    *(unsigned char *)(v64 + 132) = v54;
    *(unsigned char *)(v64 + 133) = v56;
    *(unsigned char *)(v64 + 134) = v58;
    *(unsigned char *)(v64 + 135) = v61;
    *(unsigned char *)(v64 + 136) = v62;
    *(unsigned char *)(v64 + 137) = 1;
    goto LABEL_202;
  }
  unsigned int v39 = v90;
  if (v27 == 10) {
    goto LABEL_201;
  }
LABEL_202:
  unsigned __int16 v37 = 0;
LABEL_203:
  if (v39) {
    CFRelease(v39);
  }
  uint64_t Feature = (v94 | v27) == 0;
  if (v27) {
    goto LABEL_206;
  }
  return Feature;
}

uint64_t iap2_oobBtPairing2_accessoryInfoHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 400);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)uint64_t v63 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 AccessoryInfo Handler %@", buf, 0xCu);
  }
  uint64_t v6 = 0;
  if (!a1 || !a2) {
    return v6;
  }
  uint64_t v58 = a1;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  int v61 = 0;
  if (!FirstParam)
  {
    CFDataRef v60 = 0;
    CFDataRef v10 = 0;
    unsigned __int16 v9 = 0;
    char v59 = 0;
LABEL_56:
    if (gLogObjects && gNumLogObjects >= 51)
    {
      int v35 = *(NSObject **)(gLogObjects + 400);
      CFDataRef v36 = v60;
      char v37 = v59;
    }
    else
    {
      int v35 = &_os_log_default;
      CFDataRef v36 = v60;
      char v37 = v59;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
LABEL_68:
      uint64_t Feature = iap2_feature_getFeature(v58, 0x19u);
      if (!Feature) {
        goto LABEL_107;
      }
      if (v61) {
        goto LABEL_107;
      }
      int v42 = (CFDictionaryRef *)Feature;
      if (!*(unsigned char *)(Feature + 16)) {
        goto LABEL_107;
      }
      buf[0] = 0;
      if (!iap2_identification_checkRequiredMsgIDs(v58, (uint64_t)&gskMsgOOBBTPairing2MainList, 4, buf)) {
        goto LABEL_107;
      }
      if ((v37 & (v36 != 0)) != 1)
      {
        if (gLogObjects && gNumLogObjects >= 51)
        {
          __int16 v46 = *(NSObject **)(gLogObjects + 400);
        }
        else
        {
          __int16 v46 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v49 = *(void *)(v58 + 8);
          if (v36) {
            CFIndex Length = CFDataGetLength(v36);
          }
          else {
            CFIndex Length = 0;
          }
          *(_DWORD *)buf = 138413314;
          *(void *)uint64_t v63 = v49;
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = v9;
          *(_WORD *)&v63[14] = 1024;
          *(_DWORD *)&v63[16] = v37 & 1;
          *(_WORD *)&v63[20] = 1024;
          *(_DWORD *)&v63[22] = v36 != 0;
          *(_WORD *)&v63[26] = 2048;
          CFIndex v64 = Length;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "iAP2OOBBTPairing2 AccessoryInfo: %@, no componentID (%d / %d) or no pairingDataP192 (%d / %ld) parameter, ignore message", buf, 0x28u);
        }
        goto LABEL_107;
      }
      int v43 = _copyUUIDForComponentID(v42, v9);
      CFDataRef v44 = iap2_identification_copyMacAddressForComponentID(v58, v9);
      if (gLogObjects && gNumLogObjects >= 51)
      {
        int v45 = *(NSObject **)(gLogObjects + 400);
      }
      else
      {
        int v45 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)uint64_t v63 = v9;
        *(_WORD *)&v63[4] = 2112;
        *(void *)&v63[6] = v43;
        *(_WORD *)&v63[14] = 2112;
        *(void *)&v63[16] = v44;
        _os_log_debug_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "iAP2OOBBTPairing2 AccessoryInfo: for componentID=%d, uuid=%@ accessoryMacAddr=%@", buf, 0x1Cu);
      }
      if (v43) {
        BOOL v47 = v44 == 0;
      }
      else {
        BOOL v47 = 1;
      }
      uint64_t v48 = !v47;
      if (v47)
      {
        if (gLogObjects && gNumLogObjects >= 51)
        {
          uint64_t v51 = *(NSObject **)(gLogObjects + 400);
        }
        else
        {
          uint64_t v51 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v52 = *(void *)(v58 + 8);
          *(_DWORD *)buf = 138413058;
          *(void *)uint64_t v63 = v52;
          *(_WORD *)&v63[8] = 2112;
          *(void *)&v63[10] = v43;
          *(_WORD *)&v63[18] = 2112;
          *(void *)&v63[20] = v44;
          LOWORD(v64) = 1024;
          *(_DWORD *)((char *)&v64 + 2) = v9;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "iAP2OOBBTPairing2 AccessoryInfo: %@, no uuid(%@) or accesoryMacAddr(%@) for componentID %d, ignore message", buf, 0x26u);
        }
        CFDataRef v36 = v60;
        if (!v44)
        {
          uint64_t v48 = 0;
          goto LABEL_112;
        }
      }
      else
      {
        CFDataRef v36 = v60;
        platform_oobBtPairing2_accessoryInfo(*(void *)(v58 + 8), (uint64_t)v43, (uint64_t)v44, (uint64_t)v60, (uint64_t)v10);
        CFRelease(v43);
      }
      CFRelease(v44);
      goto LABEL_112;
    }
    uint64_t v38 = *(void *)(v58 + 8);
    if (v36)
    {
      CFIndex v39 = CFDataGetLength(v36);
      if (v10)
      {
LABEL_64:
        CFIndex v40 = CFDataGetLength(v10);
LABEL_67:
        *(_DWORD *)buf = 138412802;
        *(void *)uint64_t v63 = v38;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = v39;
        *(_WORD *)&v63[18] = 2048;
        *(void *)&v63[20] = v40;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 AccessoryInfo: %@, P192 %ld bytes, P256 %ld bytes", buf, 0x20u);
        goto LABEL_68;
      }
    }
    else
    {
      CFIndex v39 = 0;
      if (v10) {
        goto LABEL_64;
      }
    }
    CFIndex v40 = 0;
    goto LABEL_67;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  char v59 = 0;
  unsigned __int16 v9 = 0;
  CFDataRef v10 = 0;
  CFDataRef v60 = 0;
  while (1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    if (ParamID != 2) {
      break;
    }
    uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)NextParam, &v61);
    if (v61)
    {
      BOOL v54 = logObjectForModule_18();
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_121;
      }
      int MsgID = iAP2MsgGetMsgID(a2);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)uint64_t v63 = 2;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)&v63[6] = MsgID;
      goto LABEL_120;
    }
    BOOL v15 = (const UInt8 *)DataAsData;
    char ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
    if (!v15 || ParamValueLen != 32 || v10)
    {
      int v61 = 1;
      uint64_t v25 = gLogObjects;
      int v26 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 51)
      {
        unsigned int v27 = *(NSObject **)(gLogObjects + 400);
      }
      else
      {
        unsigned int v27 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v63 = v25;
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = v26;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          unsigned int v27 = &_os_log_default;
        }
      }
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_53;
      }
      uint64_t v31 = *(void *)(v58 + 8);
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v63 = v31;
      uint64_t v32 = v27;
      int v33 = "iAP2OOBBTPairing2 AccessoryInfo: %@, more than one pairDataP256";
LABEL_52:
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v33, buf, 0xCu);
      goto LABEL_53;
    }
    CFDataRef v10 = CFDataCreate(kCFAllocatorDefault, v15, 32);
LABEL_53:
    NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
    if (!NextParam) {
      goto LABEL_56;
    }
  }
  int v12 = ParamID;
  if (ParamID != 1)
  {
    if (ParamID)
    {
      CFDataRef v20 = v10;
      uint64_t v21 = gLogObjects;
      int v22 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 51)
      {
        int v23 = *(NSObject **)(gLogObjects + 400);
      }
      else
      {
        int v23 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v63 = v21;
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = v22;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          int v23 = &_os_log_default;
        }
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = iAP2MsgGetMsgID(a2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)uint64_t v63 = v12;
        *(_WORD *)&v63[4] = 1024;
        *(_DWORD *)&v63[6] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
      }
      CFDataRef v10 = v20;
    }
    else
    {
      unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v61);
      if (v61)
      {
        BOOL v54 = logObjectForModule_18();
        if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_121;
        }
        int v55 = iAP2MsgGetMsgID(a2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)uint64_t v63 = 0;
        *(_WORD *)&v63[4] = 1024;
        *(_DWORD *)&v63[6] = v55;
        goto LABEL_120;
      }
      unsigned __int16 v9 = DataAsU16;
      char v59 = 1;
    }
    goto LABEL_53;
  }
  uint64_t v17 = iAP2MsgGetDataAsData((uint64_t)NextParam, &v61);
  if (!v61)
  {
    uint64_t v18 = (const UInt8 *)v17;
    char v19 = iAP2MsgGetParamValueLen(NextParam);
    if (!v18 || v19 != 32 || v60)
    {
      int v61 = 1;
      uint64_t v28 = gLogObjects;
      int v29 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 51)
      {
        int v30 = *(NSObject **)(gLogObjects + 400);
      }
      else
      {
        int v30 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v63 = v28;
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = v29;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          int v30 = &_os_log_default;
        }
      }
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_53;
      }
      uint64_t v34 = *(void *)(v58 + 8);
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v63 = v34;
      uint64_t v32 = v30;
      int v33 = "iAP2OOBBTPairing2 AccessoryInfo: %@, more than one pairDataP192";
      goto LABEL_52;
    }
    CFDataRef v60 = CFDataCreate(kCFAllocatorDefault, v18, 32);
    goto LABEL_53;
  }
  BOOL v54 = logObjectForModule_18();
  if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_121;
  }
  int v57 = iAP2MsgGetMsgID(a2);
  *(_DWORD *)buf = 67109376;
  *(_DWORD *)uint64_t v63 = 1;
  *(_WORD *)&v63[4] = 1024;
  *(_DWORD *)&v63[6] = v57;
LABEL_120:
  _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", buf, 0xEu);
LABEL_121:
  CFDataRef v36 = v60;
LABEL_107:
  uint64_t v48 = 0;
  uint64_t v6 = 0;
  if (!v36)
  {
    if (v10) {
      goto LABEL_109;
    }
    return v6;
  }
LABEL_112:
  CFRelease(v36);
  uint64_t v6 = v48;
  if (v10) {
LABEL_109:
  }
    CFRelease(v10);
  return v6;
}

void *logObjectForModule_18()
{
  if (gLogObjects && gNumLogObjects >= 51) {
    return *(void **)(gLogObjects + 400);
  }
  id v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

const void *_copyUUIDForComponentID(CFDictionaryRef *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  CFBooleanRef Value = CFDictionaryGetValue(*a1, v3);
  uint64_t v5 = Value;
  if (Value) {
    CFRetain(Value);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v5;
}

uint64_t iap2_oobBtPairing2_statusHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 400);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)CFIndex v39 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 Status Handler %@", buf, 0xCu);
  }
  uint64_t v6 = 0;
  if (!a1 || !a2) {
    return v6;
  }
  uint64_t v35 = a1;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  BOOL v37 = 0;
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    unsigned __int16 v9 = 0;
    int v36 = 0;
    unsigned __int16 v10 = 0;
    int v11 = 0;
    uint64_t v12 = 0;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      if (ParamID == 2)
      {
        DataAsString = iAP2MsgGetDataAsString(NextParam, &v37);
        if (v37)
        {
          uint64_t v31 = logObjectForModule_18();
          uint64_t v6 = 0;
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
            return v6;
          }
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)CFIndex v39 = 2;
          *(_WORD *)&v39[4] = 1024;
          *(_DWORD *)&v39[6] = MsgID;
          goto LABEL_64;
        }
        unsigned __int16 v9 = DataAsString;
        int v11 = 1;
        uint64_t v12 = 4;
      }
      else
      {
        int v14 = ParamID;
        if (ParamID == 1)
        {
          if (!iAP2MsgIsDataVoid(NextParam))
          {
            uint64_t v31 = logObjectForModule_18();
            uint64_t v6 = 0;
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
              return v6;
            }
            int v34 = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)CFIndex v39 = 1;
            *(_WORD *)&v39[4] = 1024;
            *(_DWORD *)&v39[6] = v34;
LABEL_64:
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", buf, 0xEu);
            return 0;
          }
          int v11 = 1;
          uint64_t v12 = 2;
        }
        else if (ParamID)
        {
          uint64_t v17 = gLogObjects;
          int v18 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 51)
          {
            char v19 = *(NSObject **)(gLogObjects + 400);
          }
          else
          {
            char v19 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)CFIndex v39 = v17;
              *(_WORD *)&v39[8] = 1024;
              int v40 = v18;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
          }
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            int v20 = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)CFIndex v39 = v14;
            *(_WORD *)&v39[4] = 1024;
            *(_DWORD *)&v39[6] = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
          }
        }
        else
        {
          unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v37);
          if (v37)
          {
            uint64_t v31 = logObjectForModule_18();
            uint64_t v6 = 0;
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
              return v6;
            }
            int v32 = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)CFIndex v39 = 0;
            *(_WORD *)&v39[4] = 1024;
            *(_DWORD *)&v39[6] = v32;
            goto LABEL_64;
          }
          unsigned __int16 v10 = DataAsU16;
          int v36 = 1;
        }
      }
      NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      if (!NextParam) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v12 = 0;
  int v11 = 0;
  unsigned __int16 v10 = 0;
  int v36 = 0;
  unsigned __int16 v9 = 0;
LABEL_34:
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v21 = *(NSObject **)(gLogObjects + 400);
    uint64_t v22 = v35;
  }
  else
  {
    uint64_t v21 = &_os_log_default;
    uint64_t v22 = v35;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    uint64_t v23 = *(void *)(v22 + 8);
    int v24 = "(nil)";
    *(_DWORD *)buf = 138413058;
    if (v9) {
      int v24 = (const char *)v9;
    }
    *(void *)CFIndex v39 = v23;
    *(_WORD *)&v39[8] = 1024;
    int v40 = v12;
    __int16 v41 = 1024;
    int v42 = v11 & 1;
    __int16 v43 = 2080;
    *(void *)CFDataRef v44 = v24;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 Status: %@, resultCode %d (valid %d), cancelReason %s", buf, 0x22u);
  }
  uint64_t Feature = iap2_feature_getFeature(v22, 0x19u);
  if (!Feature) {
    return 0;
  }
  int v26 = (CFDictionaryRef *)Feature;
  if (!*(unsigned char *)(Feature + 16)) {
    return 0;
  }
  buf[0] = 0;
  if (!iap2_identification_checkRequiredMsgIDs(v22, (uint64_t)&gskMsgOOBBTPairing2MainList, 4, buf)) {
    return 0;
  }
  unsigned int v27 = _copyUUIDForComponentID(v26, v10);
  uint64_t v6 = v36 & v11 & (v27 != 0);
  if (v6 == 1)
  {
    platform_oobBtPairing2_completionStatus(*(void *)(v22 + 8), (uint64_t)v27, v12);
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 51)
    {
      uint64_t v28 = *(NSObject **)(gLogObjects + 400);
    }
    else
    {
      uint64_t v28 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = *(void *)(v22 + 8);
      *(_DWORD *)buf = 138413570;
      *(void *)CFIndex v39 = v29;
      *(_WORD *)&v39[8] = 1024;
      int v40 = v12;
      __int16 v41 = 1024;
      int v42 = v11 & 1;
      __int16 v43 = 1024;
      *(_DWORD *)CFDataRef v44 = v10;
      *(_WORD *)&void v44[4] = 1024;
      *(_DWORD *)&v44[6] = v36 & 1;
      __int16 v45 = 2112;
      __int16 v46 = v27;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "iAP2OOBBTPairing2 Status: %@, no resultCode (%d / %d) parameter or no componenID (%d, valid=%d)... or can't find uuid (%@), ignore message", buf, 0x2Eu);
    }
    if (!v27) {
      return 0;
    }
  }
  CFRelease(v27);
  return v6;
}

uint64_t iap2_oobBtPairing2_startPairingHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 400);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0;
    }
    int v23 = 138412290;
    uint64_t v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 StartPairing Handler %@", (uint8_t *)&v23, 0xCu);
  }
  if (!a1) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x19u);
  if (gLogObjects && gNumLogObjects >= 51)
  {
    CFNumberRef v7 = *(NSObject **)(gLogObjects + 400);
  }
  else
  {
    CFNumberRef v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = a1[1];
    unsigned __int16 v9 = "exists";
    if (!Feature) {
      unsigned __int16 v9 = "missing!!";
    }
    int v23 = 138412546;
    uint64_t v24 = v8;
    __int16 v25 = 2080;
    int v26 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 StartPairing %@ oobBtPairing2 %s", (uint8_t *)&v23, 0x16u);
  }
  uint64_t result = 0;
  if (a2 && Feature)
  {
    if (!*(_DWORD *)a2)
    {
      int v11 = *(const void **)(a2 + 8);
      if (v11)
      {
        int ComponentIDForUUID = _getComponentIDForUUID(Feature, v11);
        if ((ComponentIDForUUID & 0x80000000) == 0)
        {
          int v13 = ComponentIDForUUID;
          if (gLogObjects && gNumLogObjects >= 51)
          {
            int v14 = *(NSObject **)(gLogObjects + 400);
          }
          else
          {
            int v14 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            uint64_t v15 = a1[1];
            int v23 = 138412546;
            uint64_t v24 = v15;
            __int16 v25 = 1024;
            LODWORD(v26) = v13;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 StartPairing %@, create msg, componentID %d", (uint8_t *)&v23, 0x12u);
          }
          uint64_t v16 = iAP2MsgInit((uint64_t)(a1 + 15), 2816, a1[24], 0xFFFF, 0, 0);
          iAP2MsgAddU16Param(v16, 0, 0, (unsigned __int16)v13);
          CFDataRef v17 = *(const __CFData **)(a2 + 16);
          if (v17)
          {
            BytePtr = CFDataGetBytePtr(v17);
            unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 16));
            iAP2MsgAddDataParam(v16, 0, 1, BytePtr, Length);
          }
          *(unsigned char *)(Feature + 16) = 1;
          if (gLogObjects && gNumLogObjects >= 51)
          {
            int v20 = *(NSObject **)(gLogObjects + 400);
          }
          else
          {
            int v20 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            uint64_t v21 = a1[1];
            int MsgID = iAP2MsgGetMsgID(v16);
            int v23 = 138412546;
            uint64_t v24 = v21;
            __int16 v25 = 1024;
            LODWORD(v26) = MsgID;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 StartPairing %@ send message %xh", (uint8_t *)&v23, 0x12u);
          }
          iap2_sessionControl_sendOutgoingMessage(a1, v16);
          platform_oobBtPairing2_deleteParams((void *)a2);
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t _getComponentIDForUUID(uint64_t a1, const void *a2)
{
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), a2);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    return valuePtr;
  }
  return v2;
}

uint64_t iap2_oobBtPairing2_stopPairingHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 400);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0;
    }
    int v23 = 138412290;
    uint64_t v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 StopPairing Handler %@", (uint8_t *)&v23, 0xCu);
  }
  if (!a1) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x19u);
  if (gLogObjects && gNumLogObjects >= 51)
  {
    CFNumberRef v7 = *(NSObject **)(gLogObjects + 400);
  }
  else
  {
    CFNumberRef v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = a1[1];
    unsigned __int16 v9 = "exists";
    if (!Feature) {
      unsigned __int16 v9 = "missing!!";
    }
    int v23 = 138412546;
    uint64_t v24 = v8;
    __int16 v25 = 2080;
    *(void *)int v26 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 StopPairing %@ oobBtPairing2 %s", (uint8_t *)&v23, 0x16u);
  }
  uint64_t result = 0;
  if (a2 && Feature)
  {
    if (*(_DWORD *)a2 == 1)
    {
      int v11 = *(const void **)(a2 + 8);
      if (v11)
      {
        int ComponentIDForUUID = _getComponentIDForUUID(Feature, v11);
        if ((ComponentIDForUUID & 0x80000000) == 0)
        {
          int v13 = ComponentIDForUUID;
          if (gLogObjects && gNumLogObjects >= 51)
          {
            int v14 = *(NSObject **)(gLogObjects + 400);
          }
          else
          {
            int v14 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            uint64_t v15 = a1[1];
            int v23 = 138412546;
            uint64_t v24 = v15;
            __int16 v25 = 1024;
            *(_DWORD *)int v26 = v13;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 StopPairing %@, create msg, componentID %d", (uint8_t *)&v23, 0x12u);
          }
          uint64_t v16 = iAP2MsgInit((uint64_t)(a1 + 15), 2819, a1[24], 0xFFFF, 0, 0);
          iAP2MsgAddU16Param(v16, 0, 0, (unsigned __int16)v13);
          if ((*(_DWORD *)(a2 + 16) - 2) >= 3)
          {
            if (gLogObjects && gNumLogObjects >= 51)
            {
              CFDataRef v17 = *(NSObject **)(gLogObjects + 400);
            }
            else
            {
              CFDataRef v17 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v18 = a1[1];
              int v19 = *(_DWORD *)(a2 + 16);
              int v23 = 138412802;
              uint64_t v24 = v18;
              __int16 v25 = 1024;
              *(_DWORD *)int v26 = v13;
              *(_WORD *)&_OWORD v26[4] = 1024;
              *(_DWORD *)&v26[6] = v19;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "iAP2OOBBTPairing2 StopPairing %@, componentID %d, unknown result! %d", (uint8_t *)&v23, 0x18u);
            }
          }
          else
          {
            iAP2MsgAddVoidParam(v16, 0, *(_WORD *)(a2 + 16) - 1);
          }
          *(unsigned char *)(Feature + 16) = 0;
          if (gLogObjects && gNumLogObjects >= 51)
          {
            int v20 = *(NSObject **)(gLogObjects + 400);
          }
          else
          {
            int v20 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            uint64_t v21 = a1[1];
            int MsgID = iAP2MsgGetMsgID(v16);
            int v23 = 138412546;
            uint64_t v24 = v21;
            __int16 v25 = 1024;
            *(_DWORD *)int v26 = MsgID;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 StopPairing %@ send message %xh", (uint8_t *)&v23, 0x12u);
          }
          iap2_sessionControl_sendOutgoingMessage(a1, v16);
          platform_oobBtPairing2_deleteParams((void *)a2);
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

unsigned char *_createFeature_12(unsigned char *a1)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 400);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v5[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 _createFeature", (uint8_t *)v5, 2u);
  }
  if (a1)
  {
    CFNumberRef v3 = malloc_type_calloc(1uLL, 0x18uLL, 0x1020040A95220FAuLL);
    a1 = v3;
    if (v3)
    {
      uint8_t v3[16] = 0;
      *(void *)CFNumberRef v3 = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      *((void *)a1 + 1) = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
  }
  return a1;
}

uint64_t _destroyFeature_12(void **a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 400);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v8[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 _destroyFeature", (uint8_t *)v8, 2u);
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v6 = (CFTypeRef *)*a1;
    if (*a1)
    {
      platform_oobBtPairing2_accessoryDetached(*(void *)(a2 + 8));
      platform_oobBTPairing_decrementUserCount();
      if (*v6)
      {
        CFRelease(*v6);
        CFTypeRef *v6 = 0;
      }
      CFTypeRef v7 = v6[1];
      if (v7)
      {
        CFRelease(v7);
        v6[1] = 0;
      }
      if (*a1)
      {
        free(*a1);
        *a1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL _startFeatureFromDevice_8(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 400);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 _startFeatureFromDevice", buf, 2u);
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x19u);
  if (Feature)
  {
    buf[0] = 0;
    if (iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgOOBBTPairing2MainList, 4, buf))
    {
      uint64_t v4 = iap2_feature_getFeature(a1, 0);
      uint64_t v5 = iap2_feature_getFeature(a1, 1u);
      uint64_t v6 = iap2_feature_getFeature(a1, 0x14u);
      if (v6)
      {
        CFTypeRef v7 = *(const void **)(v6 + 24);
        if (v4)
        {
LABEL_12:
          CFTypeRef v8 = iap2_accAuthentication_copyCertificate(a1);
          CFTypeRef v9 = iap2_accAuthentication_copyCertificateSerial(a1);
LABEL_15:
          CFAllocatorRef v60 = kCFAllocatorDefault;
          CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1, &kCFTypeArrayCallBacks);
          CFDictionaryRef v11 = (const __CFDictionary *)iap2_identification_transportComponents(a1);
          uint64_t v57 = v5;
          if (v11)
          {
            CFDictionaryRef v12 = v11;
            CFIndex Count = CFDictionaryGetCount(v11);
            if (Count)
            {
              uint64_t v14 = Count;
              unsigned int v53 = v7;
              CFTypeRef v54 = v8;
              CFMutableArrayRef v59 = Mutable;
              CFTypeRef v55 = v9;
              uint64_t v56 = a1;
              uint64_t v52 = &v48;
              __chkstk_darwin(Count);
              uint64_t v16 = (uint64_t *)((char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
              memset(v16, 170, v15);
              CFDictionaryGetKeysAndValues(v12, 0, (const void **)v16);
              if (v14 >= 1)
              {
                uint64_t v49 = v62;
                *(void *)&long long v17 = 134218240;
                long long v50 = v17;
                *(void *)&long long v17 = 67111426;
                long long v51 = v17;
                uint64_t v58 = (CFMutableDictionaryRef *)Feature;
                do
                {
                  uint64_t v18 = (_WORD *)*v16;
                  if (*v16)
                  {
                    int v19 = *((_DWORD *)v18 + 5);
                    if (v19 == 5 || v19 == 3)
                    {
                      CFAllocatorRef v21 = v60;
                      CFUUIDRef v22 = CFUUIDCreate(v60);
                      CFStringRef v23 = CFUUIDCreateString(v21, v22);
                      CFNumberRef v24 = CFNumberCreate(v21, kCFNumberSInt16Type, v18);
                      CFDataRef v25 = CFDataCreate(v21, (const UInt8 *)v18 + 24, 6);
                      uint64_t v26 = gLogObjects;
                      int v27 = gNumLogObjects;
                      if (gLogObjects && gNumLogObjects >= 51)
                      {
                        uint64_t v28 = *(NSObject **)(gLogObjects + 400);
                      }
                      else
                      {
                        uint64_t v28 = &_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = v50;
                          *(void *)CFIndex v64 = v26;
                          *(_WORD *)&v64[8] = 1024;
                          *(_DWORD *)&unsigned char v64[10] = v27;
                          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                        }
                      }
                      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                      {
                        int v33 = (unsigned __int16)*v18;
                        int v34 = *((unsigned __int8 *)v18 + 24);
                        int v35 = *((unsigned __int8 *)v18 + 25);
                        int v36 = *((unsigned __int8 *)v18 + 26);
                        int v37 = *((unsigned __int8 *)v18 + 27);
                        int v38 = *((unsigned __int8 *)v18 + 28);
                        int v39 = *((unsigned __int8 *)v18 + 29);
                        *(_DWORD *)buf = v51;
                        *(_DWORD *)CFIndex v64 = v33;
                        *(_WORD *)&v64[4] = 2112;
                        *(void *)&v64[6] = v24;
                        __int16 v65 = 2112;
                        CFStringRef v66 = v23;
                        char v67 = 0;
                        char v68 = 4;
                        int v69 = v34;
                        __int16 v70 = 1024;
                        int v71 = v35;
                        __int16 v72 = 1024;
                        int v73 = v36;
                        __int16 v74 = 1024;
                        int v75 = v37;
                        __int16 v76 = 1024;
                        int v77 = v38;
                        __int16 v78 = 1024;
                        int v79 = v39;
                        __int16 v80 = 2112;
                        CFDataRef v81 = v25;
                        _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "iAP2OOBBTPairing2 _startFeatureFromDevice: add transportComponent: componentID=%d componentIDObj=%@ uuidStr=%@ macAddr=(%02X %02X %02X %02X %02X %02X) (%@)", buf, 0x4Au);
                      }
                      uint64_t Feature = (uint64_t)v58;
                      CFDictionarySetValue(*v58, v24, v23);
                      CFDictionarySetValue(*(CFMutableDictionaryRef *)(Feature + 8), v23, v24);
                      BtComponentMutableDict = platform_oobBtPairing2_createBtComponentMutableDict(*v18, v23, *((const void **)v18 + 1), v25);
                      CFArrayAppendValue(v59, BtComponentMutableDict);
                      if (v22) {
                        CFRelease(v22);
                      }
                      if (v23) {
                        CFRelease(v23);
                      }
                      if (v24) {
                        CFRelease(v24);
                      }
                      if (v25) {
                        CFRelease(v25);
                      }
                      if (BtComponentMutableDict) {
                        CFRelease(BtComponentMutableDict);
                      }
                    }
                  }
                  else
                  {
                    uint64_t v29 = gLogObjects;
                    int v30 = gNumLogObjects;
                    if (gLogObjects && gNumLogObjects >= 51)
                    {
                      uint64_t v31 = *(NSObject **)(gLogObjects + 400);
                    }
                    else
                    {
                      uint64_t v31 = &_os_log_default;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = v50;
                        *(void *)CFIndex v64 = v29;
                        *(_WORD *)&v64[8] = 1024;
                        *(_DWORD *)&unsigned char v64[10] = v30;
                        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                      }
                    }
                    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                      _startFeatureFromDevice_cold_5(&v61, v49, v31);
                    }
                  }
                  ++v16;
                  --v14;
                }
                while (v14);
              }
              CFTypeRef v9 = v55;
              a1 = v56;
              CFTypeRef v7 = v53;
              CFTypeRef v8 = v54;
              CFMutableArrayRef Mutable = v59;
            }
          }
          else
          {
            if (gLogObjects && gNumLogObjects >= 51)
            {
              int v40 = *(NSObject **)(gLogObjects + 400);
            }
            else
            {
              int v40 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Couldn't get transportComponents!", buf, 2u);
            }
          }
          char isIdentifiedForCarPlay = iap2_identification_isIdentifiedForCarPlay(a1);
          int v42 = *(const void ***)(v57 + 8);
          AccInfoMutableDict = platform_oobBtPairing2_createAccInfoMutableDict(v42[2], v42[3], v42[1], v42[4], v42[5], v42[6], v7, v8, v9, isIdentifiedForCarPlay);
          if (gLogObjects && gNumLogObjects >= 51)
          {
            CFDataRef v44 = *(NSObject **)(gLogObjects + 400);
          }
          else
          {
            CFDataRef v44 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)) {
            _startFeatureFromDevice_cold_2((uint64_t)AccInfoMutableDict, v44);
          }
          if (gLogObjects && gNumLogObjects >= 51)
          {
            __int16 v45 = *(NSObject **)(gLogObjects + 400);
          }
          else
          {
            __int16 v45 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)CFIndex v64 = Mutable;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "iAP2OOBBTPairing2 _startFeatureFromDevice: componentList = %@", buf, 0xCu);
          }
          platform_oobBTPairing2_incrementUserCount();
          if (!a1 || (uint64_t v46 = *(void *)(a1 + 8)) == 0) {
            uint64_t v46 = 0;
          }
          platform_oobBtPairing2_accessoryAttached(v46, (uint64_t)AccInfoMutableDict, Mutable);
          if (AccInfoMutableDict) {
            CFRelease(AccInfoMutableDict);
          }
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (v8) {
            CFRelease(v8);
          }
          if (v9) {
            CFRelease(v9);
          }
          return Feature != 0;
        }
      }
      else
      {
        CFTypeRef v7 = 0;
        if (v4) {
          goto LABEL_12;
        }
      }
      CFTypeRef v8 = 0;
      CFTypeRef v9 = 0;
      goto LABEL_15;
    }
  }
  return Feature != 0;
}

uint64_t _checkIdentificationInfo_10(uint64_t a1)
{
  char v9 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgOOBBTPairing2MainList, 4u, &v9);
  uint64_t v3 = v2;
  if (v9) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = v4;
  if (v9) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && v2 == 0)
  {
    iap2_features_createFeature(a1, 0x19u);
    iap2_identification_setIdentifiedForFeature(a1, 0x19u);
  }
  return v3;
}

dispatch_object_t *mfi4Auth_endpoint_create(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_create", buf, 2u);
  }
  if (!a1)
  {
    uint64_t v16 = logObjectForModule_1(55);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
    return 0;
  }
  CFStringRef v3 = *(const __CFString **)(a1 + 16);
  if (!v3 || (CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v3)) == 0)
  {
    uint64_t v14 = logObjectForModule_1(55);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_2();
    }
    return 0;
  }
  CFStringRef v5 = Copy;
  BOOL v6 = (dispatch_object_t *)malloc_type_calloc(1uLL, 0x28uLL, 0x10200403D3F9D26uLL);
  if (!v6) {
    goto LABEL_16;
  }
  dispatch_queue_t v7 = dispatch_queue_create("mfi4AuthProtocolQ", 0);
  _DWORD v6[2] = v7;
  if (!v7) {
    goto LABEL_16;
  }
  dispatch_object_t *v6 = (dispatch_object_t)a1;
  if (acc_endpoint_getTransportType(a1) == 13)
  {
    int v13 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v6[2]);
    void v6[4] = v13;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = __mfi4Auth_endpoint_create_block_invoke;
    handler[3] = &__block_descriptor_tmp_7;
    handler[4] = v6;
    dispatch_source_set_event_handler(v13, handler);
    dispatch_source_set_timer(v6[4], 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_set_context(v6[2], v6);
    dispatch_set_finalizer_f(v6[2], (dispatch_function_t)_mfi4Auth_endpoint_dispatchQueueFinalizer);
    dispatch_resume(v6[4]);
  }
  acc_platform_packetLogging_logEvent((uint64_t)*v6, "ATTACH", (uint64_t)"MFi4Auth accessory attached!", v8, v9, v10, v11, v12, v17);
  if (!_mfi4Auth_endpoint_initSession((CFAbsoluteTime *)v6, (uint64_t)v5)) {
LABEL_16:
  }
    CFRelease(v5);
  return v6;
}

uint64_t __mfi4Auth_endpoint_create_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "timerSource: close NFC session", v4, 2u);
  }
  return acc_endpoint_setProperty(**(pthread_mutex_t ***)(a1 + 32), kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanFalse);
}

void _mfi4Auth_endpoint_dispatchQueueFinalizer(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 19;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    CFStringRef v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    CFStringRef v3 = *(NSObject **)(gLogObjects + 144);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    CFStringRef v5 = "_mfi4Auth_endpoint_dispatchQueueFinalizer";
    __int16 v6 = 2048;
    dispatch_queue_t v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s: protocolEndpoint %p", (uint8_t *)&v4, 0x16u);
  }
  if (a1)
  {
    _mfi4Auth_endpoint_cleanupSession((uint64_t)a1);
    free(a1);
  }
}

BOOL _mfi4Auth_endpoint_initSession(CFAbsoluteTime *a1, uint64_t a2)
{
  int v4 = malloc_type_calloc(1uLL, 0x2D0uLL, 0x10B0040BEFBFFB3uLL);
  *((void *)a1 + 1) = v4;
  CFAbsoluteTime v5 = *a1;
  LOBYTE(valuePtr) = 0;
  int v6 = MFAADeviceIdentityCertsExist();
  if (v5 == 0.0)
  {
    int v8 = 0;
  }
  else
  {
    dispatch_queue_t v7 = acc_endpoint_copyProperty(*(pthread_mutex_t **)&v5, kCFACCProperties_Endpoint_MFi4Auth_OneWayOnly);
    int v8 = v6;
    if (v7)
    {
      CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt8Type, &valuePtr);
      if ((_BYTE)valuePtr) {
        int v8 = 0;
      }
      else {
        int v8 = v6;
      }
    }
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v9 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    uint64_t v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (v5 == 0.0) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = *(void *)(*(void *)&v5 + 16);
    }
    *(_DWORD *)buf = 136316162;
    int v37 = "_mfi4Auth_endpoint_isEndpointSupportsMutualAuth";
    __int16 v38 = 2112;
    *(void *)int v39 = v10;
    *(_WORD *)&v39[8] = 1024;
    *(_DWORD *)int v40 = v8;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)__int16 v41 = valuePtr;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)int v42 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s: endpointUUID %@, EndpointSupportsMutualAuth %d, (bOneWayOnly %d, deviceIdentityCertsExist %d)", buf, 0x28u);
  }
  uint64_t v11 = gLogObjects;
  int v12 = gNumLogObjects;
  if ((v6 & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v13 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      int v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v37 = "_mfi4Auth_endpoint_isEndpointSupportsMutualAuth";
      __int16 v38 = 1024;
      *(_DWORD *)int v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s: deviceIdentityCertsExist %d, trigger re-init for next time.", buf, 0x12u);
    }
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &__block_literal_global_16_0);
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
  }
  if (v11 && v12 >= 56)
  {
    size_t v15 = *(NSObject **)(v11 + 440);
  }
  else
  {
    size_t v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
    _mfi4Auth_endpoint_initSession_cold_4(a2, v8, v15);
  }
  int valuePtr = 0;
  char v34 = 0;
  unsigned int v16 = acc_userDefaults_BOOLForKey(@"MFi4ECDSADisallow");
  unsigned int v17 = acc_userDefaults_BOOLForKey(@"MFi4SigmaIRequired");
  unsigned int v18 = acc_userDefaults_BOOLForKey(@"MFi4ECDSAOnly");
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v19 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    int v19 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136316674;
    int v37 = "_mfi4Auth_endpoint_initSession";
    __int16 v38 = 1024;
    *(_DWORD *)int v39 = (v17 | v8) & ~v18;
    *(_WORD *)&v39[4] = 1024;
    *(_DWORD *)&v39[6] = v16 ^ 1;
    *(_WORD *)int v40 = 1024;
    *(_DWORD *)&v40[2] = v8;
    *(_WORD *)__int16 v41 = 1024;
    *(_DWORD *)&v41[2] = v17;
    *(_WORD *)int v42 = 1024;
    *(_DWORD *)&v42[2] = v18;
    __int16 v43 = 1024;
    int v44 = v16;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s: allowSigmaI %d, allowOneWay %d, (endpointSupportsMutualAuth %d, mfi4SigmaIRequired %d, mfi4ECDSAOnly %d, mfi4ECDSADisallow %d)", buf, 0x30u);
  }
  if (((v17 | v8) & ~v18) != 0)
  {
    LOBYTE(valuePtr) = 2;
    unsigned int v20 = 1;
  }
  else
  {
    unsigned int v20 = 0;
  }
  if ((v16 & 1) == 0) {
    *(unsigned char *)((unint64_t)&valuePtr | v20++) = 0;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    CFAllocatorRef v21 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    CFAllocatorRef v21 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = BYTE1(valuePtr);
    if (v20 <= 1) {
      int v22 = -1;
    }
    *(_DWORD *)buf = 136316674;
    int v37 = "_mfi4Auth_endpoint_initSession";
    __int16 v38 = 1024;
    *(_DWORD *)int v39 = valuePtr;
    *(_WORD *)&v39[4] = 1024;
    *(_DWORD *)&v39[6] = v22;
    *(_WORD *)int v40 = 1024;
    *(_DWORD *)&v40[2] = -1;
    *(_WORD *)__int16 v41 = 1024;
    *(_DWORD *)&v41[2] = 0;
    *(_WORD *)int v42 = 1024;
    *(_DWORD *)&v42[2] = -1;
    __int16 v43 = 1024;
    int v44 = -1;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%s: supportedAuthTypes [%d %d %d], supportedCapabilities [%d %d %d]", buf, 0x30u);
  }
  BOOL inited = mfi4Auth_protocol_initSessionCommon((uint64_t)v4, a2, 0x400u, &valuePtr, v20, &v34, 1u);
  if (inited)
  {
    CFNumberRef v24 = malloc_type_calloc(1uLL, 0xD0uLL, 0x1070040080AB579uLL);
    v4[89] = v24;
    v24[6] = CFDictionaryCreateMutable(kCFAllocatorDefault, 64, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    a1[3] = CFAbsoluteTimeGetCurrent();
  }
  else
  {
    uint64_t v26 = logObjectForModule_1(55);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_endpoint_initSession_cold_1(v26, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  return inited;
}

uint64_t mfi4Auth_endpoint_publish(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    BOOL v2 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    BOOL v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v18) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "mfi4Auth endpoint_publish", (uint8_t *)&v18, 2u);
  }
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)a1;
  if (!*(void *)a1) {
    return v3;
  }
  uint64_t v4 = gLogObjects;
  int v5 = gNumLogObjects;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v6 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    int v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v18 = 134218240;
      int v19 = (const char *)v4;
      __int16 v20 = 1024;
      int v21 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v18, 0x12u);
      uint64_t v3 = *(void *)a1;
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(v3 + 24);
    int v18 = 67109120;
    LODWORD(v19) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "mfi4Auth publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d", (uint8_t *)&v18, 8u);
    uint64_t v3 = *(void *)a1;
  }
  if (acc_endpoint_isPublished(v3))
  {
    if (*(void *)a1 && (CFStringRef v8 = *(const __CFString **)(*(void *)a1 + 16)) != 0) {
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v8);
    }
    else {
      CFStringRef Copy = 0;
    }
    _mfi4Auth_endpoint_cleanupSession(a1);
    _mfi4Auth_endpoint_initSession((CFAbsoluteTime *)a1, (uint64_t)Copy);
  }
  if (mfi4Auth_endpoint_publish_onceToken != -1) {
    dispatch_once(&mfi4Auth_endpoint_publish_onceToken, &__block_literal_global_17);
  }
  uint64_t v10 = acc_endpoint_copyProperty(*(pthread_mutex_t **)a1, kCFACCProperties_Endpoint_NFC_TagId);
  if (acc_policies_nfcTagUseKeys((const __CFData *)v10))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v11 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      uint64_t v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 136315138;
      int v19 = "mfi4Auth_endpoint_publish";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s: Checking if device has been unlocked since first boot", (uint8_t *)&v18, 0xCu);
    }
    if ((platform_system_unlockedSinceBoot() & 1) == 0)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        int v12 = *(NSObject **)(gLogObjects + 440);
      }
      else
      {
        int v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = 136315138;
        int v19 = "mfi4Auth_endpoint_publish";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s: Device has not been unlocked since last boot. Setting up observer", (uint8_t *)&v18, 0xCu);
      }
      platform_system_startObservingFirstUnlockNotification();
      CFNotificationCenterRef LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)_mfi4Auth_endpoint_firstUnlockHandler, @"ACCPlatformApplicationFirstUnlockNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      if (!platform_system_unlockedSinceBoot())
      {
        uint64_t v3 = 0;
        if (!v10) {
          return v3;
        }
        goto LABEL_71;
      }
    }
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v14 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    uint64_t v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 136315138;
    int v19 = "mfi4Auth_endpoint_publish";
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s: Setting sleep assertion", (uint8_t *)&v18, 0xCu);
  }
  platform_sleepAssertion_createForMFi4();
  if (acc_endpoint_getTransportType(*(void *)a1) == 13)
  {
    if (!acc_userDefaults_BOOLForKey(@"SkipNFCAuth"))
    {
      *(_DWORD *)(*(void *)(a1 + 8) + 32) = 1;
      uint64_t v3 = acc_endpoint_setProperty(*(pthread_mutex_t **)a1, kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanTrue);
      if (!v10) {
        return v3;
      }
      goto LABEL_71;
    }
    if (gLogObjects && gNumLogObjects >= 56)
    {
      size_t v15 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      size_t v15 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 136315138;
      int v19 = "mfi4Auth_endpoint_publish";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%s: SkipNFCAuth!!!", (uint8_t *)&v18, 0xCu);
    }
  }
  else
  {
    uint64_t v3 = 1;
    if (acc_connection_isAuthenticated(**(void **)a1, 1)) {
      goto LABEL_70;
    }
    if (gLogObjects && gNumLogObjects >= 56)
    {
      unsigned int v16 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      unsigned int v16 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v18) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_publish: sendAuthSetupStart", (uint8_t *)&v18, 2u);
    }
    _mfi4Auth_endpoint_sendAuthSetupStart((void *)a1);
  }
  uint64_t v3 = 1;
LABEL_70:
  if (v10) {
LABEL_71:
  }
    CFRelease(v10);
  return v3;
}

void _mfi4Auth_endpoint_cleanupSession(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    BOOL v2 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    BOOL v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 67109120;
    int v9 = 509;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "_mfi4Auth_endpoint_cleanupSession: %d", (uint8_t *)&v8, 8u);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    *(unsigned char *)(v3 + 30) = 1;
    mfi4Auth_protocol_cleanupSessionCommon((void *)v3);
    uint64_t v4 = *(const void **)v3;
    *(void *)uint64_t v3 = 0;
    if (v4) {
      CFRelease(v4);
    }
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v5 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      int v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 67109120;
      int v9 = 521;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "_mfi4Auth_endpoint_cleanupSession: %d", (uint8_t *)&v8, 8u);
    }
    mfi4Auth_protocol_cleanupNVMContext(*(void *)(v3 + 712));
    int v6 = *(void **)(v3 + 712);
    if (v6)
    {
      free(v6);
      *(void *)(v3 + 712) = 0;
    }
    int v7 = *(void **)(a1 + 8);
    if (v7)
    {
      free(v7);
      *(void *)(a1 + 8) = 0;
    }
  }
}

void __mfi4Auth_endpoint_publish_block_invoke(id a1)
{
  CFNotificationCenterRef LocalCenter = CFNotificationCenterGetLocalCenter();
  CFStringRef v2 = (const __CFString *)CFACCTransportPlugin_EndpointPropertiesDidChangeNotification;

  CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)_mfi4Auth_endpoint_handlePropertiesDidChange, v2, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void _mfi4Auth_endpoint_handlePropertiesDidChange(int a1, int a2, CFTypeRef cf1, uint64_t a4, const __CFDictionary *a5)
{
  if (CFEqual(cf1, CFACCTransportPlugin_EndpointPropertiesDidChangeNotification))
  {
    int v6 = (const void *)CFACCTransportPlugin_EndpointPropertiesDidChangeNotification_EndpointUUID;
    CFNumberRef Value = CFDictionaryGetValue(a5, CFACCTransportPlugin_EndpointPropertiesDidChangeNotification_EndpointUUID);
    CFRetain(Value);
    CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(Value);
    if (acc_endpoint_getTransportType((uint64_t)EndpointWithUUID) == 13)
    {
      int v9 = CFDictionaryGetValue(a5, CFACCTransportPlugin_PropertiesDidChangeNotification_ConnectionUUID);
      uint64_t v10 = CFDictionaryGetValue(a5, v6);
      if (v9)
      {
        uint64_t v11 = v10;
        CFTypeID v12 = CFGetTypeID(v9);
        if (v12 == CFStringGetTypeID() && v11 != 0)
        {
          CFTypeID v14 = CFGetTypeID(v11);
          if (v14 == CFStringGetTypeID())
          {
            size_t v15 = acc_manager_getEndpointWithUUID(v11);
            if (v15)
            {
              uint64_t v16 = (uint64_t)v15;
              if (*((_DWORD *)v15 + 7) == 14)
              {
                if (v15[7])
                {
                  CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(a5, CFACCTransportPlugin_PropertiesDidChangeNotification_PropertiesOld);
                  CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(a5, CFACCTransportPlugin_PropertiesDidChangeNotification_PropertiesNew);
                  if (gLogObjects && gNumLogObjects >= 56)
                  {
                    int v19 = *(NSObject **)(gLogObjects + 440);
                  }
                  else
                  {
                    int v19 = &_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }
                  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412546;
                    CFDictionaryRef v39 = v18;
                    __int16 v40 = 2112;
                    CFDictionaryRef v41 = v17;
                    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "PropertiesDidchange: new %@, old %@", buf, 0x16u);
                  }
                  if (v18)
                  {
                    __int16 v20 = (const void *)kCFACCProperties_Endpoint_NFC_SessionOpen;
                    CFBooleanRef v21 = (const __CFBoolean *)CFDictionaryGetValue(v17, kCFACCProperties_Endpoint_NFC_SessionOpen);
                    BOOL v24 = v21
                       && (CFBooleanRef v22 = v21, v23 = CFGetTypeID(v21), v23 == CFBooleanGetTypeID())
                       && CFBooleanGetValue(v22) == 1;
                    CFBooleanRef v25 = (const __CFBoolean *)CFDictionaryGetValue(v18, v20);
                    if (v25 && (v31 = v25, CFTypeID v32 = CFGetTypeID(v25), v32 == CFBooleanGetTypeID()))
                    {
                      int v33 = CFBooleanGetValue(v31);
                      int v34 = v33 == 1 && !v24;
                      if ((!v24 ^ (v33 == 1)))
                      {
                        if (!v34) {
                          return;
                        }
                        goto LABEL_36;
                      }
                      if (v33 == 1)
                      {
                        acc_platform_packetLogging_logEvent(v16, "NFC Session Opened", (uint64_t)"MFi4Auth NFC session opened", v26, v27, v28, v29, v30, v36);
                        if ((v34 & 1) == 0) {
                          return;
                        }
LABEL_36:
                        int v35 = *(NSObject **)(EndpointWithUUID[7] + 16);
                        block[0] = _NSConcreteStackBlock;
                        block[1] = 0x40000000;
                        block[2] = ___mfi4Auth_endpoint_handlePropertiesDidChange_block_invoke;
                        block[3] = &__block_descriptor_tmp_18;
                        void block[4] = Value;
                        dispatch_async(v35, block);
                        return;
                      }
                    }
                    else if (!v24)
                    {
                      return;
                    }
                    acc_platform_packetLogging_logEvent(v16, "NFC Session Closed", (uint64_t)"MFi4Auth NFC session closed", v26, v27, v28, v29, v30, v36);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void _mfi4Auth_endpoint_firstUnlockHandler()
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v0 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    id v0 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "_mfi4Auth_endpoint_firstUnlockHandler FIRED!!", buf, 2u);
  }
  CFDictionaryRef v1 = acc_manager_copyAllEndpoints();
  CFIndex Count = CFDictionaryGetCount(v1);
  size_t v3 = 8 * Count;
  unint64_t v4 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
  int v5 = (const void **)((char *)&v12 - v4);
  if (__chkstk_darwin(Count))
  {
    int v6 = memset((char *)&v12 - v4, 170, v3);
    __chkstk_darwin(v6);
    int v7 = (char *)&v12 - v4;
    memset(v7, 170, v3);
  }
  else
  {
    int v7 = &v13;
  }
  CFDictionaryGetKeysAndValues(v1, v5, (const void **)v7);
  if (v1) {
    CFRelease(v1);
  }
  if (Count >= 1)
  {
    while (acc_endpoint_getTransportType(*(void *)v7) != 13
         || acc_endpoint_getProtocol(*(void *)v7) != 14)
    {
      ++v5;
      v7 += 8;
      if (!--Count) {
        goto LABEL_27;
      }
    }
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v8 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      int v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = *v5;
      *(_DWORD *)buf = 138412290;
      size_t v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "_mfi4Auth_endpoint_firstUnlockHandler endpoint Found: %@", buf, 0xCu);
    }
    uint64_t v10 = *((void *)acc_manager_getEndpointWithUUID(*v5) + 7);
    *(_DWORD *)(*(void *)(v10 + 8) + 32) = 1;
    if (acc_endpoint_getTransportType(*(void *)v10) == 13) {
      acc_endpoint_setProperty(*(pthread_mutex_t **)v10, kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanTrue);
    }
  }
LABEL_27:
  CFNotificationCenterRef LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, 0, @"ACCPlatformApplicationFirstUnlockNotification", 0);
}

void _mfi4Auth_endpoint_sendAuthSetupStart(void *a1)
{
  if (a1)
  {
    if (*a1
      && (CFStringRef v2 = *(const __CFString **)(*a1 + 16)) != 0
      && (CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v2)) != 0)
    {
      CFStringRef v4 = Copy;
      dispatch_time_t v5 = dispatch_time(0, 1000000);
      int v6 = a1[2];
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = ___mfi4Auth_endpoint_sendAuthSetupStart_block_invoke;
      block[3] = &__block_descriptor_tmp_17;
      void block[4] = v4;
      dispatch_after(v5, v6, block);
    }
    else
    {
      int v7 = logObjectForModule_1(55);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        _mfi4Auth_endpoint_sendAuthSetupStart_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
      }
    }
  }
}

BOOL mfi4Auth_endpoint_destroy(uint64_t **a1)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    CFStringRef v2 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    CFStringRef v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_destroy", buf, 2u);
  }
  if (a1)
  {
    BOOL v8 = *a1 != 0;
    if (*a1)
    {
      acc_platform_packetLogging_logEvent(**a1, "DETACH", (uint64_t)"MFi4Auth accessory detached!", v3, v4, v5, v6, v7, v11);
      if (acc_endpoint_getTransportType(**a1) == 13)
      {
        dispatch_source_cancel((dispatch_source_t)(*a1)[4]);
        dispatch_release((dispatch_object_t)(*a1)[4]);
      }
      dispatch_sync((dispatch_queue_t)(*a1)[2], &__block_literal_global_10);
      dispatch_release((dispatch_object_t)(*a1)[2]);
      (*a1)[2] = 0;
      *a1 = 0;
    }
    notify_post("com.apple.accessories.connection.MFi4AccessoryDisconnected");
  }
  else
  {
    BOOL v8 = 0;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v9 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    uint64_t v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_destroy: destroyed", (uint8_t *)&v11, 2u);
  }
  return v8;
}

BOOL mfi4Auth_endpoint_processIncomingData(void *a1, const void *a2)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_processIncomingData", buf, 2u);
  }
  if (!a1)
  {
    uint64_t v9 = logObjectForModule_1(55);
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    mfi4Auth_endpoint_processIncomingData_cold_1();
    return 0;
  }
  if (!*a1)
  {
    uint64_t v10 = logObjectForModule_1(55);
    BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    mfi4Auth_endpoint_processIncomingData_cold_2();
    return 0;
  }
  if (!a2)
  {
    uint64_t v11 = logObjectForModule_1(55);
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    mfi4Auth_endpoint_processIncomingData_cold_3();
    return 0;
  }
  if (*(_DWORD *)(*a1 + 24) == 13
    && (acc_userDefaults_BOOLForKey(@"PretendNoNFCResponse") & 1) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = acc_userDefaults_BOOLForKey(@"PretendNoNFCResponse");
      *(_DWORD *)buf = 136315394;
      uint64_t v14 = "mfi4Auth_endpoint_processIncomingData";
      __int16 v15 = 1024;
      unsigned int v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s: PretendNoNFCResponse %d, ignore incomingData!", buf, 0x12u);
    }
  }
  else
  {
    CFRetain(a2);
    uint64_t v6 = a1[2];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 0x40000000;
    _DWORD v12[2] = __mfi4Auth_endpoint_processIncomingData_block_invoke;
    v12[3] = &__block_descriptor_tmp_12_0;
    v12[4] = a1;
    v12[5] = a2;
    dispatch_async(v6, v12);
  }
  return 1;
}

void __mfi4Auth_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  mfi4Auth_protocol_messageHandler_receiveIncomingData(*(void *)(*(void *)(a1 + 32) + 8), *(const void **)(a1 + 40));
  CFStringRef v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

BOOL mfi4Auth_endpoint_processOutgoingSecureTunnelDataForClient(void *a1, int a2, const __CFData *a3)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    int v15 = a2;
    __int16 v16 = 2048;
    CFIndex Length = CFDataGetLength(a3);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_processOutgoingSecureTunnelDataForClient: type %d, dataOut %ld bytes", buf, 0x12u);
  }
  if (!a1)
  {
    uint64_t v9 = logObjectForModule_1(55);
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    mfi4Auth_endpoint_processIncomingData_cold_1();
    return 0;
  }
  if (!*a1)
  {
    uint64_t v10 = logObjectForModule_1(55);
    BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    mfi4Auth_endpoint_processIncomingData_cold_2();
    return 0;
  }
  if (a3)
  {
    CFRetain(a3);
    uint64_t v7 = a1[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __mfi4Auth_endpoint_processOutgoingSecureTunnelDataForClient_block_invoke;
    block[3] = &__block_descriptor_tmp_13_0;
    char v13 = a2;
    void block[4] = a1;
    void block[5] = a3;
    dispatch_async(v7, block);
    return 1;
  }
  uint64_t v11 = logObjectForModule_1(55);
  BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (result)
  {
    mfi4Auth_endpoint_processIncomingData_cold_3();
    return 0;
  }
  return result;
}

void __mfi4Auth_endpoint_processOutgoingSecureTunnelDataForClient_block_invoke(uint64_t a1)
{
  mfi4Auth_protocol_messageHandler_handleOutgoingSecureTunnelDataForClient(*(void *)(*(void *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 48), *(const __CFData **)(a1 + 40));
  CFStringRef v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t mfi4Auth_endpoint_sendOutgoingData(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v4 = *(pthread_mutex_t **)a1;
      unsigned int Som = iAP2MsgGetSom(a2);
      acc_platform_packetLogging_logMFi4AuthProtocolMsg((uint64_t)v4, Som, a2, 0, 0);
      if (mfi4Auth_protocol_encryptOutgoingData(*(void *)(a1 + 8), a2))
      {
        if (mfi4Auth_util_packetLoggingEncryptedData())
        {
          uint64_t v6 = *(void *)a1;
          unsigned int v7 = iAP2MsgGetSom(a2);
          acc_platform_packetLogging_logMFi4AuthProtocolMsg(v6, v7, a2, 0, 1);
        }
        unsigned int v8 = *(const UInt8 **)(a2 + 24);
        unsigned int MsgLen = iAP2MsgGetMsgLen(a2);
        CFDataRef v10 = CFDataCreate(kCFAllocatorDefault, v8, MsgLen);
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v11 = *(NSObject **)(gLogObjects + 440);
        }
        else
        {
          uint64_t v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = 138412290;
          CFDataRef v17 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_sendOutgoingData: %@", (uint8_t *)&v16, 0xCu);
        }
        char v12 = acc_endpoint_sendOutgoingData((uint64_t)v4, v10);
        if (v10) {
          CFRelease(v10);
        }
        if (v12) {
          return 1;
        }
      }
    }
    else
    {
      int v15 = logObjectForModule_1(55);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_endpoint_sendOutgoingData_cold_2();
      }
    }
  }
  else
  {
    uint64_t v14 = logObjectForModule_1(55);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_processIncomingData_cold_1();
    }
  }
  if (acc_endpoint_getTransportType(*(void *)a1) == 13) {
    acc_endpoint_setProperty(*(pthread_mutex_t **)a1, kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanFalse);
  }
  return 0;
}

uint64_t mfi4Auth_endpoint_setEndpointSecureTunnelDataReceiveTypeHandler(const void *a1, uint64_t a2, void *a3)
{
  if (!a1)
  {
    unsigned int v7 = logObjectForModule_1(55);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_processIncomingData_cold_1();
    }
    return 0;
  }
  if (!a3)
  {
    unsigned int v8 = logObjectForModule_1(55);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_setEndpointSecureTunnelDataReceiveTypeHandler_cold_2();
    }
    return 0;
  }
  uint64_t v5 = *(void *)(*((void *)acc_manager_getEndpointWithUUID(a1) + 7) + 8);

  return mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler(v5, a2, a3);
}

void ___mfi4Auth_endpoint_isEndpointSupportsMutualAuth_block_invoke(id a1)
{
  if (gLogObjects) {
    BOOL v1 = gNumLogObjects < 1;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1)
  {
    CFStringRef v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    CFStringRef v2 = *(NSObject **)gLogObjects;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = "_mfi4Auth_endpoint_isEndpointSupportsMutualAuth_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s: initIdentityCertStates ... ", (uint8_t *)&v5, 0xCu);
  }
  int inited = mfi4Auth_protocol_initIdentityCertStates();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    uint64_t v4 = *(NSObject **)gLogObjects;
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    uint64_t v6 = "_mfi4Auth_endpoint_isEndpointSupportsMutualAuth_block_invoke";
    __int16 v7 = 1024;
    int v8 = inited;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: initIdentityCertStates ... errNo %d", (uint8_t *)&v5, 0x12u);
  }
}

void ___mfi4Auth_endpoint_sendAuthSetupStart_block_invoke(uint64_t a1)
{
  CFBooleanRef v21 = 0;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    CFStringRef v2 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    CFStringRef v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    CFTypeID v23 = "_mfi4Auth_endpoint_sendAuthSetupStart_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  uint64_t v3 = (CFTypeRef *)(a1 + 32);
  CFDictionaryRef EndpointWithUUID = acc_manager_getEndpointWithUUID(v4);
  if (EndpointWithUUID)
  {
    uint64_t v6 = EndpointWithUUID;
    if (*((_DWORD *)EndpointWithUUID + 7))
    {
      uint64_t v7 = EndpointWithUUID[7];
      if (v7)
      {
        if (mfi4Auth_protocol_authSetupStart(*(void *)(v7 + 8), (uint64_t *)&v21))
        {
          char v13 = logObjectForModule_1(55);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
            ___mfi4Auth_endpoint_sendAuthSetupStart_block_invoke_cold_4(v13, v14, v15, v16, v17, v18, v19, v20);
          }
        }
        else
        {
          mfi4Auth_endpoint_sendOutgoingData(v7, (uint64_t)v21);
          if (*((_DWORD *)v6 + 6) == 13
            && (acc_userDefaults_BOOLForKey(@"DisableNFCAuthTimer") & 1) == 0)
          {
            int v8 = *(NSObject **)(v7 + 32);
            dispatch_time_t v9 = dispatch_time(0, 3000000000);
            dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0);
          }
        }
      }
      else
      {
        char v12 = logObjectForModule_1(55);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          ___mfi4Auth_endpoint_sendAuthSetupStart_block_invoke_cold_3();
        }
      }
    }
    else
    {
      uint64_t v11 = logObjectForModule_1(55);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        ___mfi4Auth_endpoint_sendAuthSetupStart_block_invoke_cold_2();
      }
    }
  }
  else
  {
    CFDataRef v10 = logObjectForModule_1(55);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      ___mfi4Auth_endpoint_sendAuthSetupStart_block_invoke_cold_1();
    }
  }
  if (v21)
  {
    free(v21);
    CFBooleanRef v21 = 0;
  }
  if (*v3) {
    CFRelease(*v3);
  }
}

void ___mfi4Auth_endpoint_handlePropertiesDidChange_block_invoke(uint64_t a1)
{
  CFDictionaryRef EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(*(const void **)(a1 + 32));
  if (EndpointWithUUID)
  {
    uint64_t v3 = EndpointWithUUID;
    if (*(_DWORD *)&EndpointWithUUID->__opaque[20] == 14)
    {
      if (*(void *)&EndpointWithUUID->__opaque[48])
      {
        uint64_t v4 = acc_endpoint_copyProperty(EndpointWithUUID, kCFACCProperties_Endpoint_NFC_SessionOpen);
        if (v4)
        {
          CFBooleanRef v5 = (const __CFBoolean *)v4;
          CFTypeID v6 = CFGetTypeID(v4);
          if (v6 == CFBooleanGetTypeID() && CFBooleanGetValue(v5) == 1)
          {
            if (gLogObjects && gNumLogObjects >= 56)
            {
              uint64_t v7 = *(NSObject **)(gLogObjects + 440);
            }
            else
            {
              uint64_t v7 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)int v8 = 0;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "_mfi4Auth_endpoint_handlePropertiesDidChange: sendAuthSetupStart", v8, 2u);
            }
            _mfi4Auth_endpoint_sendAuthSetupStart(*(void **)&v3->__opaque[48]);
          }
        }
      }
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void *qiAuth_endpoint_create(uint64_t a1)
{
  if (a1)
  {
    CFStringRef v2 = malloc_type_calloc(1uLL, 0x840uLL, 0x10F00402A901282uLL);
    uint64_t v3 = v2;
    if (v2)
    {
      void *v2 = a1;
      CFStringRef v4 = *(const __CFString **)(a1 + 16);
      CFStringRef v5 = v4 ? CFStringCreateCopy(kCFAllocatorDefault, v4) : 0;
      void v3[2] = v5;
      CFStringRef v6 = *(const __CFString **)(a1 + 8);
      CFStringRef v7 = v6 ? CFStringCreateCopy(kCFAllocatorDefault, v6) : 0;
      v3[1] = v7;
      *((_WORD *)v3 + 1052) = 128;
      int v8 = malloc_type_calloc(1uLL, 0x80uLL, 0x7B3FCA75uLL);
      v3[262] = v8;
      *((_WORD *)v3 + 1053) = 0;
      *((_OWORD *)v3 + 129) = 0u;
      *((_OWORD *)v3 + 130) = 0u;
      *(_OWORD *)(v3 + 249) = 0u;
      *(_OWORD *)(v3 + 251) = 0u;
      *(_OWORD *)(v3 + 253) = 0u;
      *(_OWORD *)(v3 + 255) = 0u;
      *((_DWORD *)v3 + 514) = 0;
      if (v8)
      {
        CFStringRef Copy = (const __CFString *)v3[2];
        if (Copy)
        {
          CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, Copy);
          uint64_t v10 = v3[262];
        }
        else
        {
          uint64_t v10 = (uint64_t)v8;
        }
        v3[248] = v3 + 5;
        if (!qiAuth_protocol_init((uint64_t)(v3 + 5), (uint64_t)Copy, 0, 1, 1u, 1, v10, *((_WORD *)v3 + 1052)))
        {
          uint64_t v11 = dispatch_queue_create("QiAuthEndpoint", 0);
          v3[4] = v11;
          if (v11)
          {
            dispatch_set_context(v11, v3);
            dispatch_set_finalizer_f((dispatch_object_t)v3[4], (dispatch_function_t)_qiAuth_endpoint_dispatchQueueFinalizer);
            uint64_t v12 = 0;
            while (1)
            {
              char v13 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)v3[4]);
              uint64_t v14 = &v3[v12];
              v14[249] = v13;
              if (!v13) {
                break;
              }
              dispatch_source_set_timer(v13, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
              uint64_t v15 = v14[249];
              handler[0] = _NSConcreteStackBlock;
              handler[1] = 0x40000000;
              handler[2] = __qiAuth_endpoint_create_block_invoke;
              handler[3] = &__block_descriptor_tmp_8;
              handler[4] = v3;
              int v30 = v12;
              dispatch_source_set_event_handler(v15, handler);
              dispatch_activate((dispatch_object_t)v14[249]);
              if (++v12 == 4)
              {
                acc_platform_packetLogging_logEvent(*v3, "ATTACH", (uint64_t)"QiAuth accessory attached!", v16, v17, v18, v19, v20, v28);
                return v3;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    CFBooleanRef v22 = logObjectForModule_19();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
    uint64_t v3 = 0;
  }
  if (v3[248])
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      CFTypeID v23 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      CFTypeID v23 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v28) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Cleaning up pQiAuthProtocol in create", (uint8_t *)&v28, 2u);
    }
    qiAuth_protocol_cleanup(v3[248], 0, 0);
    v3[248] = 0;
  }
  for (uint64_t i = 249; i != 253; ++i)
  {
    CFBooleanRef v25 = v3[i];
    if (v25)
    {
      dispatch_release(v25);
      v3[i] = 0;
    }
  }
  uint64_t v26 = v3[4];
  if (v26)
  {
    v3[4] = 0;
    dispatch_release(v26);
  }
  else
  {
    uint64_t v27 = (void *)v3[262];
    if (v27) {
      free(v27);
    }
    free(v3);
  }
  return 0;
}

void *logObjectForModule_19()
{
  if (gLogObjects && gNumLogObjects >= 60) {
    return *(void **)(gLogObjects + 472);
  }
  id v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void _qiAuth_endpoint_dispatchQueueFinalizer(uint64_t *a1)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      CFStringRef v2 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      CFStringRef v2 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFStringRef v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cleaning up pQiAuthProtocol in queue finalizer", v7, 2u);
    }
    qiAuth_protocol_cleanup(a1[248], 0, 0);
    a1[248] = 0;
    for (uint64_t i = 249; i != 253; ++i)
    {
      CFStringRef v4 = a1[i];
      if (v4)
      {
        dispatch_release(v4);
        a1[i] = 0;
      }
    }
    CFStringRef v5 = (void *)a1[262];
    if (v5) {
      free(v5);
    }
    free(a1);
  }
  else
  {
    CFStringRef v6 = logObjectForModule_19();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
  }
}

void __qiAuth_endpoint_create_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    CFStringRef v2 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    CFStringRef v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(int *)(a1 + 40);
    BOOL v4 = *(void *)(*(void *)(a1 + 32) + 8 * v3 + 2024) != 0;
    v7[0] = 67109376;
    v7[1] = v4;
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "QiAuth timer source fired!!! qiAuthTimerCallback(%d), timerID %d", (uint8_t *)v7, 0xEu);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  CFStringRef v6 = *(void (**)(void))(v5 + 8 * *(int *)(a1 + 40) + 2024);
  if (v6)
  {
    v6(*(void *)(v5 + 1984));
    *(void *)(*(void *)(a1 + 32) + 8 * *(int *)(a1 + 40) + 2024) = 0;
  }
}

uint64_t qiAuth_endpoint_publish(uint64_t *a1)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    CFStringRef v2 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    CFStringRef v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "QiAuth endpoint_publish", buf, 2u);
  }
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *a1;
  if (!*a1 || !a1[262] || !*((_WORD *)a1 + 1052)) {
    return 0;
  }
  uint64_t v4 = gLogObjects;
  int v5 = gNumLogObjects;
  if (gLogObjects && gNumLogObjects >= 60)
  {
    CFStringRef v6 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    CFStringRef v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      uint64_t v18 = v4;
      __int16 v19 = 1024;
      int v20 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      uint64_t v3 = *a1;
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)buf = 67109120;
    LODWORD(v18) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "QiAuth publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d", buf, 8u);
    uint64_t v3 = *a1;
  }
  if (!acc_endpoint_isPublished(v3)) {
    goto LABEL_31;
  }
  CFStringRef v8 = (const __CFString *)a1[2];
  CFStringRef v9 = v8 ? CFStringCreateCopy(kCFAllocatorDefault, v8) : 0;
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v10 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    uint64_t v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Cleaning up pQiAuthProtocol in publish", buf, 2u);
  }
  qiAuth_protocol_cleanup(a1[248], 0, 0);
  uint64_t result = qiAuth_protocol_init(a1[248], (uint64_t)v9, 0, 1, 1u, 1, a1[262], *((_WORD *)a1 + 1052));
  if (result)
  {
LABEL_31:
    if (gLogObjects && gNumLogObjects >= 60)
    {
      uint64_t v12 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      uint64_t v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(_DWORD *)(*a1 + 24);
      *(_DWORD *)buf = 67109120;
      LODWORD(v18) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "QiAuth publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, start protocol!!!", buf, 8u);
    }
    dispatch_time_t v14 = dispatch_time(0, 100000000);
    uint64_t v15 = a1[4];
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __qiAuth_endpoint_publish_block_invoke;
    block[3] = &__block_descriptor_tmp_4_2;
    void block[4] = a1;
    dispatch_after(v14, v15, block);
    return 1;
  }
  return result;
}

uint64_t __qiAuth_endpoint_publish_block_invoke(uint64_t a1)
{
  return qiAuth_protocol_start(*(void *)(*(void *)(a1 + 32) + 1984));
}

uint64_t qiAuth_endpoint_destroy(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v9 = *a1;
    if (*a1)
    {
      acc_platform_packetLogging_logEvent(*(void *)v9, "DETACH", (uint64_t)"QiAuth accessory detached!", a4, a5, a6, a7, a8, v16);
      dispatch_release(*(dispatch_object_t *)(v9 + 32));
      *a1 = 0;
      return 1;
    }
    if (gLogObjects && gNumLogObjects >= 60)
    {
      uint64_t v11 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      uint64_t v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v12)
    {
      LOWORD(v16) = 0;
      int v13 = "QiAuth Endpoint Destroy. *ppProtocolEndpoint is null!";
      dispatch_time_t v14 = (uint8_t *)&v16;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v13, v14, 2u);
      return 0;
    }
  }
  else
  {
    uint64_t v11 = logObjectForModule_19();
    BOOL v15 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v15)
    {
      __int16 v17 = 0;
      int v13 = "QiAuth Endpoint Destroy. NULL ppProtocolEndpoint!";
      dispatch_time_t v14 = (uint8_t *)&v17;
      goto LABEL_11;
    }
  }
  return result;
}

BOOL qiAuth_endpoint_processIncomingData(BOOL result, CFDataRef theData)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t result = 0;
    if (theData)
    {
      if (v3[248])
      {
        unsigned int Length = CFDataGetLength(theData);
        if (Length < 2)
        {
          return 0;
        }
        else
        {
          CFRetain(theData);
          unsigned int v5 = *CFDataGetBytePtr(theData);
          acc_platform_packetLogging_logQiAuthMsg(*v3, theData, 1);
          uint64_t result = qiAuth_protocol_checkValidMessageHeaderAndSize(v3[248], v5, Length);
          if (result)
          {
            CFStringRef v6 = v3[4];
            block[0] = _NSConcreteStackBlock;
            block[1] = 0x40000000;
            block[2] = __qiAuth_endpoint_processIncomingData_block_invoke;
            block[3] = &__block_descriptor_tmp_7_0;
            void block[4] = v3;
            void block[5] = theData;
            char v9 = v5;
            unsigned int v8 = Length;
            dispatch_async(v6, block);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

void __qiAuth_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  CFStringRef v2 = (uint64_t *)(a1 + 40);
  if (!_qiAuth_endpoint_handleMessage(*(void *)(a1 + 32), *(CFDataRef *)(a1 + 40)))
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      uint64_t v3 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      uint64_t v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      __qiAuth_endpoint_processIncomingData_block_invoke_cold_1(a1, v2, v3);
    }
  }
  CFRelease((CFTypeRef)*v2);
}

BOOL _qiAuth_endpoint_handleMessage(uint64_t a1, CFDataRef theData)
{
  if (a1)
  {
    if (*(void *)(a1 + 2096) && *(_WORD *)(a1 + 2104))
    {
      uint64_t v3 = *(void *)(a1 + 1984);
      BytePtr = (char *)CFDataGetBytePtr(theData);
      unsigned __int16 Length = CFDataGetLength(theData);
      return qiAuth_protocol_processIncomingData(v3, BytePtr, Length) < 2;
    }
    int v7 = logObjectForModule_19();
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (result)
    {
      _qiAuth_endpoint_handleMessage_cold_2();
      return 0;
    }
  }
  else
  {
    unsigned int v8 = logObjectForModule_19();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      mfi4Auth_endpoint_create_cold_1();
      return 0;
    }
  }
  return result;
}

uint64_t qiAuth_endpoint_sendOutgoingData(uint64_t *a1, const UInt8 *a2, CFIndex length)
{
  if (a1)
  {
    CFDataRef v4 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, a2, length, kCFAllocatorNull);
    acc_platform_packetLogging_logQiAuthMsg(*a1, v4, 0);
    uint64_t v5 = acc_endpoint_sendOutgoingData(*a1, v4);
    if (v4) {
      CFRelease(v4);
    }
  }
  else
  {
    int v7 = logObjectForModule_19();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
    return 0;
  }
  return v5;
}

uint64_t qiAuth_endpoint_setAuthState(uint64_t **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    dispatch_time_t v14 = logObjectForModule_19();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
    return 0;
  }
  if (!a2)
  {
    BOOL v15 = logObjectForModule_19();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      qiAuth_endpoint_setAuthState_cold_2();
    }
    return 0;
  }
  char v9 = *a1;
  if (!v9)
  {
    uint64_t v16 = logObjectForModule_19();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      qiAuth_endpoint_setAuthState_cold_3();
    }
    return 0;
  }
  uint64_t v10 = *v9;
  if (!*v9)
  {
    __int16 v17 = logObjectForModule_19();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      qiAuth_endpoint_setAuthState_cold_4();
    }
    return 0;
  }
  switch(a2)
  {
    case 1:
      uint64_t v11 = "AUTH FAILED";
      BOOL v12 = "QiAuth accessory authentication Failed!";
      goto LABEL_11;
    case 3:
      uint64_t v11 = "AUTH TIMEOUT";
      BOOL v12 = "QiAuth accessory authentication Timed Out!";
      goto LABEL_11;
    case 2:
      uint64_t v11 = "AUTH PASSED";
      BOOL v12 = "QiAuth accessory authentication Passed!";
LABEL_11:
      acc_platform_packetLogging_logEvent((uint64_t)v9, v11, (uint64_t)v12, a4, a5, a6, a7, a8, v18);
      break;
  }

  return acc_connection_setAuthStatus(v10, 3, a2);
}

uint64_t _pingHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t Feature = (int *)iap2_feature_getFeature(a1, 0x12u);
      if (Feature
        || (iap2_features_createFeature(a1, 0x12u),
            uint64_t result = iap2_feature_getFeature(a1, 0x12u),
            (uint64_t Feature = (int *)result) != 0))
      {
        if (gLogObjects && gNumLogObjects >= 27)
        {
          CFStringRef v6 = *(NSObject **)(gLogObjects + 208);
        }
        else
        {
          CFStringRef v6 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = 67109120;
          int MsgID = iAP2MsgGetMsgID(a2);
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received Ping message (0x%04X)!", (uint8_t *)&v12, 8u);
        }
        ++*Feature;
        if (gLogObjects && gNumLogObjects >= 27)
        {
          int v7 = *(NSObject **)(gLogObjects + 208);
        }
        else
        {
          int v7 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          int v8 = *Feature;
          int v12 = 67109120;
          int MsgID = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Received %d ping message(s) total.", (uint8_t *)&v12, 8u);
        }
        if (gLogObjects && gNumLogObjects >= 27)
        {
          char v9 = *(NSObject **)(gLogObjects + 208);
        }
        else
        {
          char v9 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = iAP2MsgGetMsgID(a2);
          int v12 = 67109120;
          int MsgID = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending Ping message (0x%04X)!", (uint8_t *)&v12, 8u);
        }
        iAP2MsgInit(a1 + 120, 0, *(void *)(a1 + 192), 0xFFFF, 0, 0);
        memcpy(*(void **)(a1 + 144), *(const void **)(a2 + 24), *(unsigned int *)(a2 + 16));
        uint64_t v11 = *(void *)(a1 + 144);
        *(void *)(a1 + 152) = v11 + iAP2MsgGetMsgLen(a2);
        return iap2_sessionControl_sendOutgoingMessage((uint64_t *)a1, a1 + 120);
      }
    }
  }
  return result;
}

void *logObjectForModule_20()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 27;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    return *(void **)(gLogObjects + 208);
  }
  BOOL v1 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v1;
}

uint64_t _sendPingAccHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t Feature = iap2_feature_getFeature(a1, 0x12u);
      if (Feature
        || (iap2_features_createFeature(a1, 0x12u), uint64_t result = iap2_feature_getFeature(a1, 0x12u), (Feature = result) != 0))
      {
        if (gLogObjects && gNumLogObjects >= 27)
        {
          CFStringRef v6 = *(NSObject **)(gLogObjects + 208);
        }
        else
        {
          CFStringRef v6 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 67109120;
          int MsgID = iAP2MsgGetMsgID(a2);
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received SendPingAcc message (0x%04X)!", (uint8_t *)&v11, 8u);
        }
        ++*(_DWORD *)(Feature + 4);
        if (gLogObjects && gNumLogObjects >= 27)
        {
          int v7 = *(NSObject **)(gLogObjects + 208);
        }
        else
        {
          int v7 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          int v8 = *(_DWORD *)(Feature + 4);
          int v11 = 67109120;
          int MsgID = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Received %d SendPingAcc message(s) total.", (uint8_t *)&v11, 8u);
        }
        iAP2MsgInit(a1 + 120, 5, *(void *)(a1 + 192), 0xFFFF, 0, 0);
        memcpy(*(void **)(a1 + 144), *(const void **)(a2 + 24), *(unsigned int *)(a2 + 16));
        *(void *)(a1 + 152) = *(void *)(a1 + 144) + *(unsigned int *)(a2 + 16);
        iAP2MsgSetMsgID(a1 + 120, 5);
        if (gLogObjects && gNumLogObjects >= 27)
        {
          char v9 = *(NSObject **)(gLogObjects + 208);
        }
        else
        {
          char v9 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = iAP2MsgGetMsgID(a1 + 120);
          int v11 = 67109120;
          int MsgID = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending PingAcc message (0x%04X)!", (uint8_t *)&v11, 8u);
        }
        return iap2_sessionControl_sendOutgoingMessage((uint64_t *)a1, a1 + 120);
      }
    }
  }
  return result;
}

uint64_t _pingAccHandler(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t Feature = iap2_feature_getFeature(a1, 0x12u);
      if (Feature || (iap2_features_createFeature(a1, 0x12u), (uint64_t Feature = iap2_feature_getFeature(a1, 0x12u)) != 0))
      {
        if (gLogObjects && gNumLogObjects >= 27)
        {
          uint64_t v5 = *(NSObject **)(gLogObjects + 208);
        }
        else
        {
          uint64_t v5 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          int v9 = 67109120;
          int MsgID = iAP2MsgGetMsgID(a2);
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received PingAcc message (0x%04X)!", (uint8_t *)&v9, 8u);
        }
        ++*(_DWORD *)(Feature + 8);
        if (gLogObjects && gNumLogObjects >= 27)
        {
          CFStringRef v6 = *(NSObject **)(gLogObjects + 208);
        }
        else
        {
          CFStringRef v6 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v7 = *(_DWORD *)(Feature + 8);
          int v9 = 67109120;
          int MsgID = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Received %d PingAcc message(s) total.", (uint8_t *)&v9, 8u);
        }
      }
    }
  }
  return 0;
}

uint64_t _userNotificationHandler(void *a1, uint64_t a2)
{
  if (!a1 || !*a1) {
    return 0;
  }
  uint64_t v3 = 0;
  if (a2 && *(void *)*a1)
  {
    unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
    if (gLogObjects && gNumLogObjects >= 27)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 208);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)CFTypeRef v54 = iAP2MsgGetMsgID(a2);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received User Notification message (0x%04X)!", buf, 8u);
    }
    if (!FirstParam)
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      CFStringRef v47 = 0;
      CFStringRef cf = 0;
      CFStringRef v45 = 0;
      CFStringRef v46 = 0;
      double v6 = 0.0;
      unsigned int v42 = 1;
LABEL_63:
      CFStringRef Identifier = acc_userNotifications_createIdentifier(@"test", a1[1]);
      CFStringRef v23 = v47;
      CFStringRef v25 = v45;
      CFStringRef v24 = v46;
      uint64_t v26 = ACCUNCreate(v42, (uint64_t)cf, (uint64_t)v45, (uint64_t)v46, (uint64_t)v47, 0, v43 & 1, (uint64_t)Identifier, v6, a1[2]);
      if (Identifier) {
        CFRelease(Identifier);
      }
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 0x40000000;
      uint8_t v49[2] = ___userNotificationHandler_block_invoke;
      v49[3] = &__block_descriptor_tmp_9;
      char v51 = v44 & 1;
      v49[4] = a1;
      char v52 = BYTE4(v43) & 1;
      __int16 v50 = WORD2(v44);
      ACCUNManagerPresentNotification(v26, v49);
      if (v26) {
        CFRelease(v26);
      }
      uint64_t v3 = 1;
      goto LABEL_68;
    }
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    CFStringRef v46 = 0;
    CFStringRef v47 = 0;
    CFStringRef v45 = 0;
    CFStringRef cf = 0;
    unsigned int v42 = 1;
    double v6 = 0.0;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
      uint64_t v8 = gLogObjects;
      int v9 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v10 = gNumLogObjects < 27;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10)
      {
        int v11 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)CFTypeRef v54 = v8;
          *(_WORD *)&v54[8] = 1024;
          int v55 = v9;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          int v11 = &_os_log_default;
        }
      }
      else
      {
        int v11 = *(NSObject **)(gLogObjects + 208);
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)CFTypeRef v54 = ParamID;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
      }
      switch(ParamID)
      {
        case 0:
          *(_DWORD *)buf = -1431655766;
          __int16 DataAsU16 = iAP2MsgGetDataAsU16(FirstParam, buf);
          if (!*(_DWORD *)buf)
          {
            WORD2(v44) = DataAsU16;
            BYTE4(v43) = 1;
            goto LABEL_60;
          }
          uint64_t v28 = logObjectForModule_20();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            _userNotificationHandler_cold_1(a2);
          }
          goto LABEL_96;
        case 1:
          *(_DWORD *)buf = -1431655766;
          unsigned int DataAsU8 = iAP2MsgGetDataAsU8(FirstParam, buf);
          if (*(_DWORD *)buf)
          {
            uint64_t v29 = logObjectForModule_20();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
              iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_2(a2);
            }
            goto LABEL_96;
          }
          if (DataAsU8 > 3) {
            int v17 = 1;
          }
          else {
            int v17 = DataAsU8;
          }
          unsigned int v42 = v17;
          goto LABEL_60;
        case 2:
          *(_DWORD *)buf = -1431655766;
          if (cf) {
            CFRelease(cf);
          }
          CFStringRef cf = iAP2MsgCopyDataAsCFString(FirstParam, (BOOL *)buf);
          if (!*(_DWORD *)buf) {
            goto LABEL_60;
          }
          int v30 = logObjectForModule_20();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_3(a2);
          }
          goto LABEL_96;
        case 3:
          *(_DWORD *)buf = -1431655766;
          if (v45) {
            CFRelease(v45);
          }
          CFStringRef v45 = iAP2MsgCopyDataAsCFString(FirstParam, (BOOL *)buf);
          if (!*(_DWORD *)buf) {
            goto LABEL_60;
          }
          CFTypeID v32 = logObjectForModule_20();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_4(a2);
          }
          goto LABEL_96;
        case 4:
          *(_DWORD *)buf = -1431655766;
          if (v46) {
            CFRelease(v46);
          }
          CFStringRef v46 = iAP2MsgCopyDataAsCFString(FirstParam, (BOOL *)buf);
          if (!*(_DWORD *)buf) {
            goto LABEL_60;
          }
          int v34 = logObjectForModule_20();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_5(a2);
          }
          goto LABEL_96;
        case 5:
          *(_DWORD *)buf = -1431655766;
          if (v47) {
            CFRelease(v47);
          }
          CFStringRef v47 = iAP2MsgCopyDataAsCFString(FirstParam, (BOOL *)buf);
          if (!*(_DWORD *)buf) {
            goto LABEL_60;
          }
          uint64_t v36 = logObjectForModule_20();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
            iap2_CarPlayStartSession_cold_11(a2);
          }
          goto LABEL_96;
        case 6:
          *(_DWORD *)buf = -1431655766;
          BOOL DataAsBool = iAP2MsgGetDataAsBool(FirstParam, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            __int16 v38 = logObjectForModule_20();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
              iap2_CarPlayStartSession_cold_12(a2);
            }
            goto LABEL_96;
          }
          LOBYTE(v43) = DataAsBool;
          goto LABEL_60;
        case 7:
          *(_DWORD *)buf = -1431655766;
          unsigned int v19 = iAP2MsgGetDataAsU16(FirstParam, buf);
          if (*(_DWORD *)buf)
          {
            CFDictionaryRef v39 = logObjectForModule_20();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
              _userNotificationHandler_cold_8(a2);
            }
            goto LABEL_96;
          }
          double v6 = (double)v19;
          goto LABEL_60;
        case 8:
          *(_DWORD *)buf = -1431655766;
          BOOL v20 = iAP2MsgGetDataAsBool(FirstParam, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            __int16 v40 = logObjectForModule_20();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
              iap2_CarPlayStartSession_cold_15(a2);
            }
LABEL_96:
            uint64_t v3 = 0;
            CFStringRef v24 = v46;
            CFStringRef v23 = v47;
            CFStringRef v25 = v45;
LABEL_68:
            if (cf) {
              CFRelease(cf);
            }
            if (v25) {
              CFRelease(v25);
            }
            if (v24) {
              CFRelease(v24);
            }
            if (v23) {
              CFRelease(v23);
            }
            return v3;
          }
          LOBYTE(v44) = v20;
LABEL_60:
          unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0, FirstParam);
          if (!FirstParam) {
            goto LABEL_63;
          }
          break;
        default:
          uint64_t v13 = gLogObjects;
          int v14 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 27)
          {
            BOOL v15 = *(NSObject **)(gLogObjects + 208);
          }
          else
          {
            BOOL v15 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)CFTypeRef v54 = v13;
              *(_WORD *)&v54[8] = 1024;
              int v55 = v14;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              BOOL v15 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            int MsgID = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)CFTypeRef v54 = ParamID;
            *(_WORD *)&v54[4] = 1024;
            *(_DWORD *)&v54[6] = MsgID;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
          }
          goto LABEL_60;
      }
    }
  }
  return v3;
}

void ___userNotificationHandler_block_invoke(uint64_t a1, unsigned int a2)
{
  char v2 = a2;
  if (a2 > 2) {
    CFStringRef v4 = @"[Unknown]";
  }
  else {
    CFStringRef v4 = (const __CFString *)*((void *)&off_100218498 + (int)a2);
  }
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 27;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    double v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    double v6 = *(NSObject **)(gLogObjects + 208);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    CFStringRef v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "User notification response: %@", (uint8_t *)&v11, 0xCu);
  }
  CFRelease(v4);
  if (*(unsigned char *)(a1 + 42))
  {
    if (gLogObjects && gNumLogObjects >= 27)
    {
      int v7 = *(NSObject **)(gLogObjects + 208);
    }
    else
    {
      int v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 67109120;
      LODWORD(v12) = 2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending user notification response message (0x%04X)!", (uint8_t *)&v11, 8u);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = v8 + 120;
    iAP2MsgInit(v8 + 120, 2, *(void *)(v8 + 192), 0xFFFF, 0, 0);
    if (*(unsigned char *)(a1 + 43)) {
      BOOL v10 = iAP2MsgAddU16Param(v9, 0, 0, *(unsigned __int16 *)(a1 + 40)) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (iAP2MsgAddU8Param(v9, 0, 1, v2) || !v10) {
      iap2_sessionControl_sendOutgoingMessage(*(uint64_t **)(a1 + 32), v9);
    }
  }
}

uint64_t _setTransportLockoutHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a1 || !a2) {
    return result;
  }
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 27;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    int v7 = *(NSObject **)(gLogObjects + 208);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v20) = iAP2MsgGetMsgID(a2);
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received Set Transport Lockout message (0x%04X)!", buf, 8u);
  }
  if (!FirstParam)
  {
LABEL_31:
    acc_manager_disableLockoutForAllTransportTypes();
    return 1;
  }
  unsigned int v8 = 0;
  unsigned int v9 = 17;
  do
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
    if (gLogObjects) {
      BOOL v13 = gNumLogObjects < 27;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      int v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v20 = v11;
        __int16 v21 = 1024;
        int v22 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        int v14 = &_os_log_default;
      }
    }
    else
    {
      int v14 = *(NSObject **)(gLogObjects + 208);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v20) = ParamID;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
    }
    if (ParamID == 1)
    {
      *(_DWORD *)buf = -1431655766;
      unsigned int DataAsU32 = iAP2MsgGetDataAsU32(FirstParam, buf);
      if (*(_DWORD *)buf)
      {
        uint64_t v18 = logObjectForModule_20();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_2(a2);
        }
        return 0;
      }
      unsigned int v8 = DataAsU32;
    }
    else
    {
      if (ParamID) {
        goto LABEL_29;
      }
      *(_DWORD *)buf = -1431655766;
      unsigned int DataAsU8 = iAP2MsgGetDataAsU8(FirstParam, buf);
      if (*(_DWORD *)buf)
      {
        int v17 = logObjectForModule_20();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          _userNotificationHandler_cold_1(a2);
        }
        return 0;
      }
      unsigned int v9 = DataAsU8;
    }
LABEL_29:
    unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0, FirstParam);
  }
  while (FirstParam);
  if (v9 == 17) {
    goto LABEL_31;
  }
  if (v8) {
    acc_manager_enableLockoutForTransportType(v9, v8);
  }
  else {
    acc_manager_disableLockoutForTransportType(v9);
  }
  return 1;
}

_DWORD *_createFeature_13(_DWORD *result)
{
  if (result)
  {
    uint64_t result = malloc_type_calloc(1uLL, 0xCuLL, 0x10000403E1C8BA9uLL);
    if (result)
    {
      *(void *)uint64_t result = 0;
      result[2] = 0;
    }
  }
  return result;
}

BOOL _destroyFeature_13(void **a1)
{
  if (a1)
  {
    char v2 = *a1;
    if (*a1)
    {
      free(v2);
      *a1 = 0;
    }
  }
  return a1 != 0;
}

uint64_t _checkIdentificationInfo_11(uint64_t a1)
{
  uint64_t result = platform_systemInfo_isInternalBuild();
  if (result)
  {
    char v4 = 0;
    uint64_t result = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgTestList, 5u, &v4);
    if (v4) {
      BOOL v3 = result == 0;
    }
    else {
      BOOL v3 = 0;
    }
    if (v3)
    {
      iap2_identification_setIdentifiedForFeature(a1, 0x12u);
      return 0;
    }
  }
  return result;
}

double ACCAuthProtocol_PrintMessage(unsigned __int8 *a1, unsigned int a2, const char *a3, int a4, int a5)
{
  if (a1)
  {
    memset(v49, 0, sizeof(v49));
    int v24 = 0;
    int v10 = acc_auth_protocol_sizeofMessage((uint64_t)a1, a2, 0, &v24);
    __acc_auth_protocol_getMessagePayloadString(a1, a2, (char *)v49, 256);
    if (a4)
    {
      uint64_t v11 = "";
      if (a3) {
        int v12 = a3;
      }
      else {
        int v12 = "";
      }
      if (a3) {
        uint64_t v11 = " ";
      }
      int v13 = *a1;
      if ((v13 & 0xF8) == 0xA0) {
        int v14 = off_1002184B0[v13 - 160];
      }
      else {
        int v14 = "Unknown";
      }
      printf("%s%smsg: hdr: %02X %02X %02X %02X \n    id [%s], ver %d, seq %d, sess %d, len %d \n    { %s } \n", v12, v11, v13, a1[1], a1[2], a1[3], v14, a1[1] >> 4, a1[2] >> 4, a1[2] & 0xF, v24, (const char *)v49);
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        BOOL v15 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        BOOL v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_bluetooth_copyNameForMacAddress_cold_2();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        if (a3) {
          int v17 = a3;
        }
        else {
          int v17 = "";
        }
        if (a3) {
          uint64_t v18 = " ";
        }
        else {
          uint64_t v18 = "";
        }
        int v19 = *a1;
        unsigned int v20 = a1[1];
        unsigned int v21 = a1[2];
        int v22 = a1[3];
        if ((v19 & 0xF8) == 0xA0) {
          CFStringRef v23 = off_1002184B0[v19 - 160];
        }
        else {
          CFStringRef v23 = "Unknown";
        }
        *(_DWORD *)buf = 136317954;
        uint64_t v26 = v17;
        __int16 v27 = 2080;
        uint64_t v28 = v18;
        __int16 v29 = 1024;
        int v30 = v19;
        __int16 v31 = 1024;
        unsigned int v32 = v20;
        __int16 v33 = 1024;
        unsigned int v34 = v21;
        __int16 v35 = 1024;
        int v36 = v22;
        __int16 v37 = 2080;
        __int16 v38 = v23;
        __int16 v39 = 1024;
        unsigned int v40 = v20 >> 4;
        __int16 v41 = 1024;
        unsigned int v42 = v21 >> 4;
        __int16 v43 = 1024;
        int v44 = v21 & 0xF;
        __int16 v45 = 1024;
        int v46 = v24;
        __int16 v47 = 2080;
        uint64_t v48 = v49;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s%smsg: hdr: %02X %02X %02X %02X \n    id [%s], ver %d, seq %d, sess %d, len %d \n    { %s } \n", buf, 0x5Au);
      }
    }
    if (a5) {
      *(void *)&double result = ACCAuthProtocol_PrintData(a1, v10).n128_u64[0];
    }
  }
  return result;
}

const char *__acc_auth_protocol_getMessagePayloadString(unsigned char *a1, unsigned int a2, char *a3, int a4)
{
  uint64_t v10 = 0;
  unsigned int v9 = 0;
  int v7 = (unsigned __int8 *)acc_auth_protocol_messagePayload((uint64_t)a1, a2, (_DWORD *)&v10 + 1, &v10, &v9);
  if (a1)
  {
    switch(*a1)
    {
      case 0xA0:
      case 0xA1:
        if (v9 < 9)
        {
          if (v9 == 8)
          {
            snprintf(a3, a4, "characteristics[0x%08X], authTypes(%d)[%02X %02X]");
          }
          else if (v9 < 7)
          {
            if (v9 >= 5) {
              snprintf(a3, a4, "characteristics[0x%08X], authTypes - insufficient bytes");
            }
          }
          else
          {
            snprintf(a3, a4, "characteristics[0x%08X], authTypes(%d)[%02X]");
          }
        }
        else
        {
          snprintf(a3, a4, "characteristics[0x%08X], authTypes(%d)[%02X %02X %02X]");
        }
        return a3;
      case 0xA2:
      case 0xA3:
        if (v9 < 0x45)
        {
          if (v9 < 0x22 || *v7) {
            goto LABEL_25;
          }
        }
        else
        {
          if (*v7) {
            goto LABEL_25;
          }
          if (v7[34] == 1)
          {
            snprintf(a3, a4, "nonce(%d bytes)[%02X %02X %02X ...], ecdhKey(%d bytes)[%02X %02X %02X ...]", v7[1], v7[2]);
            return a3;
          }
        }
        snprintf(a3, a4, "nonce(%d bytes)[%02X %02X %02X ...], ecdhKey - cannot parse parameter");
        return a3;
      case 0xA4:
      case 0xA5:
        if (v9 < 6)
        {
          if (v9 < 4)
          {
            if (v9 >= 2) {
              snprintf(a3, a4, "info(%02X)[%02X %s]");
            }
          }
          else
          {
            snprintf(a3, a4, "info(%02X)[%02X %s], param1(%02X)[%02X]");
          }
        }
        else
        {
          snprintf(a3, a4, "info(%02X)[%02X %s], param1(%02X)[%02X %02X %02X%s]", *v7, v7[1]);
        }
        return a3;
      case 0xA6:
      case 0xA7:
        if (!v9) {
          goto LABEL_25;
        }
        if (*v7)
        {
          if (v9 >= 5 && *v7 == 1) {
            snprintf(a3, a4, "FAILED: %#10x");
          }
          else {
LABEL_25:
          }
            snprintf(a3, a4, "no parameters");
        }
        else
        {
          snprintf(a3, a4, "SUCCESS");
        }
        return a3;
      default:
        snprintf(a3, a4, "Unknown messageID !!");
        return a3;
    }
  }
  return "";
}

__n128 ACCAuthProtocol_PrintData(unsigned __int8 *a1, int a2)
{
  memset(__b, 170, sizeof(__b));
  __sprintf_chk(__b, 0, 0x3E8uLL, "data: \n");
  if (a2)
  {
    unsigned int v5 = 0;
    BOOL v6 = &a1[a2];
    int v7 = __b;
    do
    {
      int v8 = *a1++;
      sprintf(v7, "%02x ", v8);
      v7 += 3;
      v5 += 3;
      if (v5 >= 0x3D5)
      {
        char *v7 = 0;
        uint64_t v9 = gLogObjects;
        int v10 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 55)
        {
          uint64_t v11 = *(NSObject **)(gLogObjects + 432);
        }
        else
        {
          uint64_t v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            BOOL v15 = (char *)v9;
            __int16 v16 = 1024;
            int v17 = v10;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            uint64_t v11 = &_os_log_default;
          }
        }
        int v7 = __b;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          BOOL v15 = __b;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
        }
        unsigned int v5 = 0;
      }
    }
    while (a1 < v6);
    if (v5)
    {
      char *v7 = 0;
      if (gLogObjects && gNumLogObjects >= 55)
      {
        int v12 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        int v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_bluetooth_copyNameForMacAddress_cold_2();
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        BOOL v15 = __b;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s \n", buf, 0xCu);
      }
    }
  }
  return result;
}

uint64_t *iAP2LinkActionStartTimeSync(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 264);
  *a2 = 29;
  __darwin_time_t CurTimeMsInt64 = iAP2TimeGetCurTimeMsInt64();
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)uint64_t v3 = CurTimeMsInt64;
  TimeSyncPacket = (uint64_t *)iAP2PacketCreateTimeSyncPacket(v2, 84, *(unsigned char *)(v2 + 190), (unsigned char *)(v2 + 188), CurTimeMsInt64, 0, 0);
  iAP2LinkSendPacket(v2, (uint64_t)TimeSyncPacket, 0);

  return iAP2PacketRelease(TimeSyncPacket);
}

void iAP2LinkActionHandleTimeSyncResponse(uint64_t a1, unsigned char *a2)
{
  *a2 = 29;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 264);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(v2 + 280) + 72);
    if (bswap64(*(void *)(v4 + 1)) == *(void *)v3)
    {
      uint64_t v5 = bswap64(*(void *)(v4 + 9));
      double v72 = NAN;
      double v73 = NAN;
      __darwin_time_t CurTimeMsInt64 = iAP2TimeGetCurTimeMsInt64();
      uint64_t v7 = 2 * v5;
      if ((_iAP2LogEnableMask & 4) == 0) {
        goto LABEL_22;
      }
      if (gLogObjects && gNumLogObjects >= 20)
      {
        int v8 = *(id *)(gLogObjects + 152);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v8 = &_os_log_default;
        id v9 = &_os_log_default;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        iAP2LinkActionHandleTimeSyncResponse_cold_12(v3, v8, v10, v11, v12, v13, v14, v15);
      }

      if ((_iAP2LogEnableMask & 4) == 0) {
        goto LABEL_22;
      }
      if (gLogObjects && gNumLogObjects >= 20)
      {
        __int16 v16 = *(id *)(gLogObjects + 152);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v16 = &_os_log_default;
        id v17 = &_os_log_default;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        iAP2LinkActionHandleTimeSyncResponse_cold_10(v5, v16, v18, v19, v20, v21, v22, v23);
      }

      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          unsigned int v40 = *(id *)(gLogObjects + 152);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          unsigned int v40 = &_os_log_default;
          id v53 = &_os_log_default;
        }
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
          iAP2LinkActionHandleTimeSyncResponse_cold_8(CurTimeMsInt64, v40, v54, v55, v56, v57, v58, v59);
        }

        uint64_t v24 = (v7 - (CurTimeMsInt64 + *(void *)v3)) / 2;
        if ((_iAP2LogEnableMask & 4) != 0)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            CFAllocatorRef v60 = *(id *)(gLogObjects + 152);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            CFAllocatorRef v60 = &_os_log_default;
            id v61 = &_os_log_default;
          }
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG)) {
            iAP2LinkActionHandleTimeSyncResponse_cold_6(v24, v60, v62, v63, v64, v65, v66, v67);
          }
        }
      }
      else
      {
LABEL_22:
        uint64_t v24 = (v7 - (CurTimeMsInt64 + *(void *)v3)) / 2;
      }
      CFStringRef v25 = _getFilterList();
      uint64_t v26 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v3 + 64)];
      __int16 v27 = [v25 objectForKey:v26];

      if (!v27)
      {
        if (_iAP2LogEnableMask)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            __int16 v31 = *(id *)(gLogObjects + 152);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            __int16 v31 = &_os_log_default;
            id v41 = &_os_log_default;
          }
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            v71[0] = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "ERROR: ERROR: No kalman filter!", (uint8_t *)v71, 2u);
          }
        }
        goto LABEL_66;
      }
      [v27 iAP2KalmanFilterUpdateDeviceTime:&v73 Offset:&v72 FilteredOffset:(double)CurTimeMsInt64 / 1000.0 OffsetUncertainty:(double)v24 / 1000.0];
      uint64_t v28 = (uint64_t)(v73 * 1000.0);
      unint64_t v29 = (unint64_t)(v72 * 1000.0);
      *(void *)(v3 + 16) = v29;
      *(void *)(v3 + 8) = v28;
      if (*(void *)(v3 + 24) < v29) {
        *(unsigned char *)(v3 + 72) = 0;
      }
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          int v30 = *(id *)(gLogObjects + 152);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          int v30 = &_os_log_default;
          id v32 = &_os_log_default;
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
          iAP2LinkActionHandleTimeSyncResponse_cold_4(v3 + 8, v30, v33, v34, v35, v36, v37, v38);
        }

        if ((_iAP2LogEnableMask & 4) != 0)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            __int16 v39 = *(id *)(gLogObjects + 152);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            __int16 v39 = &_os_log_default;
            id v42 = &_os_log_default;
          }
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
            iAP2LinkActionHandleTimeSyncResponse_cold_2(v3 + 16, v39, v43, v44, v45, v46, v47, v48);
          }
        }
      }
      if (*(unsigned char *)(v3 + 72) || !*(void *)(v3 + 40))
      {
        iAP2TimeCallbackAfter(*(void *)(v2 + 200), 11, *(_DWORD *)(*(void *)(v2 + 264) + 32));
LABEL_66:

        return;
      }
      *(void *)uint64_t v3 = CurTimeMsInt64;
      TimeSyncPacket = (uint64_t *)iAP2PacketCreateTimeSyncPacket(v2, 84, *(unsigned char *)(v2 + 190), (unsigned char *)(v2 + 191), CurTimeMsInt64, 0, *(void *)(v3 + 8));
      iAP2LinkSendPacket(v2, (uint64_t)TimeSyncPacket, 0);
      iAP2PacketRelease(TimeSyncPacket);
      if (*(void *)(v3 + 16) >= *(void *)(v3 + 24))
      {
        if (!*(unsigned char *)(v3 + 72))
        {
          unint64_t v68 = CurTimeMsInt64 - *(void *)(v3 + 40);
          unint64_t v69 = *(unsigned int *)(v3 + 52);
          unsigned int v70 = *(_DWORD *)(v3 + 48) + 1;
          *(_DWORD *)(v3 + 48) = v70;
          if (v68 <= v69 && v70 <= *(_DWORD *)(v3 + 56)) {
            goto LABEL_66;
          }
          uint64_t v50 = v2;
          uint64_t v51 = CurTimeMsInt64;
          int v52 = 0;
          goto LABEL_65;
        }
      }
      else
      {
        *(unsigned char *)(v3 + 72) = 1;
      }
      uint64_t v50 = v2;
      uint64_t v51 = CurTimeMsInt64;
      int v52 = 1;
LABEL_65:
      __iAP2TimeSyncDeviceSendTimeSyncMeasurement(v50, v51, v52);
      *(void *)(v3 + 40) = 0;
      *(_DWORD *)(v3 + 48) = 0;
      goto LABEL_66;
    }
  }
}

void __iAP2TimeSyncDeviceSendTimeSyncMeasurement(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = *(void *)(a1 + 264);
  if (gLogObjects && gNumLogObjects >= 48)
  {
    int v8 = *(id *)(gLogObjects + 376);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(v7 + 8);
    int v29 = 134217984;
    uint64_t v30 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "TimeSync: Filtered Time Offset = %lld", (uint8_t *)&v29, 0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 48)
  {
    uint64_t v11 = *(id *)(gLogObjects + 376);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v11 = &_os_log_default;
    id v12 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *(void *)(v7 + 16);
    uint64_t v14 = *(void *)(v7 + 24);
    int v29 = 134218240;
    uint64_t v30 = v13;
    __int16 v31 = 2048;
    *(void *)id v32 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "TimeSync: Offset Uncertainty = %lld (threshold %lld)", (uint8_t *)&v29, 0x16u);
  }

  if (gLogObjects) {
    BOOL v15 = gNumLogObjects <= 47;
  }
  else {
    BOOL v15 = 1;
  }
  int v16 = !v15;
  if (a3)
  {
    if (v16)
    {
      id v17 = *(id *)(gLogObjects + 376);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v17 = &_os_log_default;
      id v18 = &_os_log_default;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = a2 - *(void *)(v7 + 40);
      int v20 = *(_DWORD *)(v7 + 48);
      int v29 = 134218240;
      uint64_t v30 = v19;
      __int16 v31 = 1024;
      *(_DWORD *)id v32 = v20;
      uint64_t v21 = "TimeSync: timeSync converged in %llu ms and %d measurements";
      uint64_t v22 = v17;
      uint32_t v23 = 18;
LABEL_38:
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, v21, (uint8_t *)&v29, v23);
    }
  }
  else
  {
    if (v16)
    {
      id v17 = *(id *)(gLogObjects + 376);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v17 = &_os_log_default;
      id v24 = &_os_log_default;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = a2 - *(void *)(v7 + 40);
      int v27 = *(_DWORD *)(v7 + 48);
      int v26 = *(_DWORD *)(v7 + 52);
      int v28 = *(_DWORD *)(v7 + 56);
      int v29 = 134218752;
      uint64_t v30 = v25;
      __int16 v31 = 1024;
      *(_DWORD *)id v32 = v26;
      *(_WORD *)&v32[4] = 1024;
      *(_DWORD *)&v32[6] = v27;
      __int16 v33 = 1024;
      int v34 = v28;
      uint64_t v21 = "TimeSync: timeSync FAILED to converge in %llu/%u ms and %u/%u measurements";
      uint64_t v22 = v17;
      uint32_t v23 = 30;
      goto LABEL_38;
    }
  }

  iAP2TimeCallbackAfter(*(void *)(a1 + 200), 11, *(_DWORD *)(*(void *)(a1 + 264) + 32));
}

void iAP2TimeSyncStart(uint64_t a1)
{
  BOOL v1 = *(NSObject **)(*(void *)(*(void *)(a1 + 176) + 16) + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = __iAP2TimeSyncStart_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = a1;
  dispatch_async(v1, block);
}

uint64_t *__iAP2TimeSyncStart_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 264);
  __darwin_time_t CurTimeMsInt64 = iAP2TimeGetCurTimeMsInt64();
  *(void *)uint64_t v2 = CurTimeMsInt64;
  if (!*(void *)(v2 + 40))
  {
    *(void *)(v2 + 40) = CurTimeMsInt64;
    *(_DWORD *)(v2 + 48) = 0;
  }
  TimeSyncPacket = (uint64_t *)iAP2PacketCreateTimeSyncPacket(v1, 84, *(unsigned char *)(v1 + 190), (unsigned char *)(v1 + 188), CurTimeMsInt64, 0, 0);
  iAP2LinkSendPacket(v1, (uint64_t)TimeSyncPacket, 0);

  return iAP2PacketRelease(TimeSyncPacket);
}

uint64_t iAP2TimeSyncInit(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1001B84F0;
  *(_DWORD *)(a1 + 32) = 60000;
  *(void *)(a1 + 40) = 0;
  int v2 = __defaultTimeout;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v2;
  *(_DWORD *)(a1 + 56) = __defaultMaxAttempts;
  *(void *)(a1 + 64) = arc4random();
  uint64_t v3 = [[iAP2KalmanFilter alloc] initWithReseedTimeout:20 AndCountForNoiseTraining:61.0];
  if (v3)
  {
    uint64_t v4 = _getFilterList();
    uint64_t v5 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 64)];
    [v4 setObject:v3 forKey:v5];
  }
  *(unsigned char *)(a1 + 72) = 0;

  return a1;
}

void iAP2TimeSyncCleanup(uint64_t a1)
{
  if (*(void *)(a1 + 64))
  {
    int v2 = _getFilterList();
    uint64_t v3 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 64)];
    [v2 removeObjectForKey:v3];

    *(void *)(a1 + 64) = 0;
  }
}

uint64_t iAP2TimeSyncGetBuffSize()
{
  return 80;
}

id _getFilterList()
{
  if (_getFilterList_onceToken != -1) {
    dispatch_once(&_getFilterList_onceToken, &__block_literal_global_18);
  }
  BOOL v0 = (void *)_getFilterList_filterList;

  return v0;
}

void ___getFilterList_block_invoke(id a1)
{
  _getFilterList_filterList = (uint64_t)objc_alloc_init((Class)NSMutableDictionary);

  _objc_release_x1();
}

void iAP2MsgSendControl(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4 = iAP2MsgCalcMessageLen(a2);
  iAP2MsgPreSendCtlProcess();
  *(unsigned char *)(*(void *)(a2 + 24) + 2) = HIBYTE(v4);
  *(unsigned char *)(*(void *)(a2 + 24) + 3) = v4;
  if (v4)
  {
    *(void *)a2 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 8) = v4;
    *(_DWORD *)(a2 + 12) = 0;
    *(unsigned char *)(a2 + 56) = 0;
    uint64_t v5 = *(void *)(a1 + 24);
    __iAP2LinkDataSentCB(v5, a2);
  }
}

void __iAP2LinkDataSentCB(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unsigned int v3 = *(_DWORD *)(a2 + 8);
    if (!v3)
    {
LABEL_18:
      iAP2MsgCleanup(a2);
      return;
    }
    if (*(_DWORD *)(a2 + 12) == v3)
    {
      if (_iAP2LogEnableMask)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          unsigned __int16 v4 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          unsigned __int16 v4 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          int v8 = *(_DWORD *)(a2 + 8);
          int v9 = *(_DWORD *)(a2 + 12);
          int v14 = 136316418;
          BOOL v15 = "__iAP2LinkDataSentCB";
          __int16 v16 = 1024;
          int v17 = 159;
          __int16 v18 = 2080;
          *(void *)uint64_t v19 = "";
          *(_WORD *)&v19[8] = 1024;
          *(_DWORD *)&v19[10] = MsgID;
          __int16 v20 = 1024;
          int v21 = v8;
          __int16 v22 = 1024;
          int v23 = v9;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d !!!!!! No bytes were sent! Skipping sending! !!!!!! msgID %s0x%04X ->toSend=%u ->lastToSend=%u\n", (uint8_t *)&v14, 0x2Eu);
        }
      }
      goto LABEL_18;
    }
    uint64_t v5 = *(void *)(a1 + 176);
    *(_DWORD *)(a2 + 12) = v3;
    if (iAP2MsgSendCtlDataWithSentCallback(v5, *(char **)a2, v3, a2, (uint64_t)__iAP2LinkDataSentOutCB, (uint64_t)__iAP2LinkDataSentCB, (void (*)(uint64_t, uint64_t))__iAP2LinkDeleteContextCB, *(unsigned __int8 *)(a2 + 56)))
    {
      *(void *)a2 += (unsigned __int16)v3;
      *(_DWORD *)(a2 + 8) -= (unsigned __int16)v3;
    }
    else
    {
      if ((_iAP2LogEnableMask & 2) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          BOOL v6 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          BOOL v6 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v10 = *(_DWORD *)(a2 + 16);
          int v14 = 136315906;
          BOOL v15 = "__iAP2LinkDataSentCB";
          __int16 v16 = 1024;
          int v17 = 141;
          __int16 v18 = 1024;
          *(_DWORD *)uint64_t v19 = v10;
          *(_WORD *)&v19[4] = 2080;
          *(void *)&void v19[6] = "Valid";
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s:%d iAP2MsgSendCtlDataWithSentCallback returned false - msgBufLen: %d msg: %s .", (uint8_t *)&v14, 0x22u);
        }
      }
      if (_iAP2LogEnableMask)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          uint64_t v11 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          uint64_t v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = iAP2MsgGetMsgID(a2);
          int v13 = *(_DWORD *)(a2 + 8);
          int v14 = 136316418;
          BOOL v15 = "__iAP2LinkDataSentCB";
          __int16 v16 = 1024;
          int v17 = 147;
          __int16 v18 = 1024;
          *(_DWORD *)uint64_t v19 = (unsigned __int16)v3;
          *(_WORD *)&v19[4] = 2080;
          *(void *)&void v19[6] = "";
          __int16 v20 = 1024;
          int v21 = v12;
          __int16 v22 = 1024;
          int v23 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Failed to queue up control session packet! reset tracking values, sendSize=%u msgID %s0x%04X ->toSend=%u\n", (uint8_t *)&v14, 0x2Eu);
        }
      }
    }
  }
}

void iAP2MsgSendControlAndCallbackOnAck(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4 = iAP2MsgCalcMessageLen(a2);
  iAP2MsgPreSendCtlProcess();
  *(unsigned char *)(*(void *)(a2 + 24) + 2) = HIBYTE(v4);
  *(unsigned char *)(*(void *)(a2 + 24) + 3) = v4;
  if (v4)
  {
    *(void *)a2 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 8) = v4;
    *(unsigned char *)(a2 + 56) = 1;
    uint64_t v5 = *(void *)(a1 + 24);
    __iAP2LinkDataSentCB(v5, a2);
  }
}

uint64_t __iAP2LinkDataSentOutCB(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 64);
    if (v2) {
      return v2(a2, result);
    }
  }
  return result;
}

uint64_t __iAP2LinkDeleteContextCB(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (!*(_DWORD *)(a2 + 8)) {
      return iAP2MsgCleanup(a2);
    }
  }
  return result;
}

void sub_1000B4A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t iap2_mediaLibrary_startMediaLibraryInformationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "StartMediaLibraryInformation", v8, 2u);
    }
    uint64_t Feature = (unsigned char *)iap2_feature_getFeature(a1, 0xDu);
    if (Feature)
    {
      uint64_t v2 = 1;
      *uint64_t Feature = 1;
      platform_mediaLibrary_requestLibraryInfoUpdate(*(void **)(a1 + 8));
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t iap2_mediaLibrary_stopMediaLibraryInformationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)BOOL v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "StopMediaLibraryInformation", v6, 2u);
    }
    uint64_t result = iap2_feature_getFeature(a1, 0xDu);
    if (result)
    {
      *(unsigned char *)uint64_t result = 0;
      return 1;
    }
  }
  return result;
}

uint64_t iap2_mediaLibrary_startMediaLibraryUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  uint64_t v102 = a1;
  if (!a1 || !a2) {
    return result;
  }
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 21;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    BOOL v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    BOOL v6 = *(NSObject **)(gLogObjects + 160);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "StartMediaLibraryUpdates", buf, 2u);
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  int v107 = 0;
  if (FirstParam)
  {
    int v8 = (unsigned __int16 *)FirstParam;
    uint64_t v9 = 0;
    unsigned int v106 = 0;
    uint64_t v97 = 0;
    cStr = 0;
    char v96 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    DataAsString = 0;
    while (2)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)v8);
      switch(ParamID)
      {
        case 0:
          DataAsString = iAP2MsgGetDataAsString(v8, (BOOL *)&v107);
          if (!v107) {
            goto LABEL_93;
          }
          CFStringRef v90 = logObjectForModule_1(30);
          uint64_t result = os_log_type_enabled(v90, OS_LOG_TYPE_ERROR);
          if (result)
          {
            iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
            return 0;
          }
          return result;
        case 1:
          __int16 v18 = iAP2MsgGetDataAsString(v8, (BOOL *)&v107);
          if (!v107)
          {
            cStr = (char *)v18;
            goto LABEL_93;
          }
          uint8_t v91 = logObjectForModule_1(30);
          uint64_t result = os_log_type_enabled(v91, OS_LOG_TYPE_ERROR);
          if (result)
          {
            iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
            return 0;
          }
          return result;
        case 2:
          unint64_t v19 = iAP2MsgGetFirstParam(a2, v8);
          if (!v19) {
            goto LABEL_93;
          }
          NextParam = (unsigned __int16 *)v19;
          uint64_t v99 = v9;
          while (2)
          {
            unsigned int v21 = iAP2MsgGetParamID((uint64_t)NextParam);
            unsigned int v22 = v21;
            if (v21 < 0x14 || v21 == 27 || v21 == 25)
            {
              BOOL IsDataVoid = iAP2MsgIsDataVoid(NextParam);
              int v107 = !IsDataVoid;
              if (!IsDataVoid)
              {
                BOOL v86 = logObjectForModule_1(30);
                uint64_t result = os_log_type_enabled(v86, OS_LOG_TYPE_ERROR);
                if (result)
                {
                  iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_5();
                  return 0;
                }
                return result;
              }
              v11 |= 1 << _convertiAP2ToACCItemProperty__itemPropertyLookup[v22];
            }
            else
            {
              uint64_t v24 = gLogObjects;
              int v25 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 31)
              {
                int v26 = *(NSObject **)(gLogObjects + 240);
              }
              else
              {
                int v26 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)CFStringRef v111 = v24;
                  *(_WORD *)&v111[8] = 1024;
                  *(_DWORD *)__int16 v112 = v25;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
              }
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                int MsgID = iAP2MsgGetMsgID(a2);
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)CFStringRef v111 = v22;
                *(_WORD *)&v111[4] = 1024;
                *(_DWORD *)&v111[6] = 2;
                *(_WORD *)__int16 v112 = 1024;
                *(_DWORD *)&v112[2] = MsgID;
                _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Unknown Subparam ID: %d in Param ID: %d for Msg ID: 0x%04X - ignoring subparam", buf, 0x14u);
              }
              uint64_t v9 = v99;
            }
            NextParam = iAP2MsgGetNextParam(a2, v8, NextParam);
            if (!NextParam) {
              goto LABEL_93;
            }
            continue;
          }
        case 3:
          unint64_t v28 = iAP2MsgGetFirstParam(a2, v8);
          if (!v28) {
            goto LABEL_93;
          }
          int v29 = (unsigned __int16 *)v28;
          while (2)
          {
            unsigned int v30 = iAP2MsgGetParamID((uint64_t)v29);
            unsigned int v31 = v30;
            if (v30 > 8)
            {
              uint64_t v103 = v10;
              uint64_t v35 = v9;
              uint64_t v36 = gLogObjects;
              int v37 = gNumLogObjects;
              if (gLogObjects) {
                BOOL v38 = gNumLogObjects < 31;
              }
              else {
                BOOL v38 = 1;
              }
              if (v38)
              {
                __int16 v39 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)CFStringRef v111 = v36;
                  *(_WORD *)&v111[8] = 1024;
                  *(_DWORD *)__int16 v112 = v37;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
              }
              else
              {
                __int16 v39 = *(NSObject **)(gLogObjects + 240);
              }
              if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
              {
                int v40 = iAP2MsgGetMsgID(a2);
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)CFStringRef v111 = v31;
                *(_WORD *)&v111[4] = 1024;
                *(_DWORD *)&v111[6] = 3;
                *(_WORD *)__int16 v112 = 1024;
                *(_DWORD *)&v112[2] = v40;
                _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Unknown Subparam ID: %d in Param ID: %d for Msg ID: 0x%04X - ignoring subparam", buf, 0x14u);
              }
              uint64_t v9 = v35;
              uint64_t v10 = v103;
            }
            else
            {
              if (((1 << v30) & 0x15F) != 0)
              {
                BOOL v32 = iAP2MsgIsDataVoid(v29);
                int v107 = !v32;
                if (v32)
                {
                  v10 |= 1 << _convertiAP2ToACCPlaylistProperty__playlistPropertyLookup[v31];
                  goto LABEL_64;
                }
                BOOL v88 = logObjectForModule_1(30);
                uint64_t result = os_log_type_enabled(v88, OS_LOG_TYPE_ERROR);
                if (!result) {
                  return result;
                }
LABEL_178:
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_6();
                return 0;
              }
              if (v30 == 5) {
                int v33 = 1;
              }
              else {
                int v33 = 2;
              }
              BOOL v34 = iAP2MsgIsDataVoid(v29);
              int v107 = !v34;
              if (!v34)
              {
                CFMutableArrayRef v89 = logObjectForModule_1(30);
                uint64_t result = os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
                if (!result) {
                  return result;
                }
                goto LABEL_178;
              }
              v106 |= v33;
              v10 |= 0x20uLL;
            }
LABEL_64:
            int v29 = iAP2MsgGetNextParam(a2, v8, v29);
            if (!v29) {
              goto LABEL_93;
            }
            continue;
          }
        case 4:
          BOOL v41 = iAP2MsgIsDataVoid(v8);
          int v107 = !v41;
          if (!v41)
          {
            __int16 v92 = logObjectForModule_1(30);
            uint64_t result = os_log_type_enabled(v92, OS_LOG_TYPE_ERROR);
            if (result)
            {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_8(a2);
              return 0;
            }
            return result;
          }
          char v96 = 1;
          goto LABEL_93;
        case 5:
          BOOL v42 = iAP2MsgIsDataVoid(v8);
          int v107 = !v42;
          if (!v42)
          {
            CFMutableArrayRef v93 = logObjectForModule_1(30);
            uint64_t result = os_log_type_enabled(v93, OS_LOG_TYPE_ERROR);
            if (result)
            {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_9(a2);
              return 0;
            }
            return result;
          }
          LOBYTE(v97) = 1;
          goto LABEL_93;
        case 6:
          BOOL v43 = iAP2MsgIsDataVoid(v8);
          int v107 = !v43;
          if (!v43)
          {
            BOOL v94 = logObjectForModule_1(30);
            uint64_t result = os_log_type_enabled(v94, OS_LOG_TYPE_ERROR);
            if (result)
            {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_10(a2);
              return 0;
            }
            return result;
          }
          BYTE4(v97) = 1;
LABEL_93:
          int v8 = iAP2MsgGetNextParam(a2, 0, v8);
          if (!v8) {
            goto LABEL_96;
          }
          continue;
        case 7:
          unint64_t v44 = iAP2MsgGetFirstParam(a2, v8);
          if (!v44) {
            goto LABEL_93;
          }
          uint64_t v45 = (unsigned __int16 *)v44;
          uint64_t v104 = v10;
          while (2)
          {
            unsigned int v46 = iAP2MsgGetParamID((uint64_t)v45);
            unsigned int v47 = v46;
            if (v46 <= 0x12 && ((1 << v46) & 0x55043) != 0)
            {
              BOOL v48 = iAP2MsgIsDataVoid(v45);
              int v107 = !v48;
              if (!v48)
              {
                CFStringRef v87 = logObjectForModule_1(30);
                uint64_t result = os_log_type_enabled(v87, OS_LOG_TYPE_ERROR);
                if (result)
                {
                  iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_11();
                  return 0;
                }
                return result;
              }
              v9 |= 1 << _convertiAP2ToACCPlaylistContentItemProperty__itemPropertyLookup[v47];
            }
            else
            {
              uint64_t v49 = v9;
              uint64_t v50 = gLogObjects;
              int v51 = gNumLogObjects;
              if (gLogObjects) {
                BOOL v52 = gNumLogObjects < 31;
              }
              else {
                BOOL v52 = 1;
              }
              if (v52)
              {
                id v53 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)CFStringRef v111 = v50;
                  *(_WORD *)&v111[8] = 1024;
                  *(_DWORD *)__int16 v112 = v51;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
              }
              else
              {
                id v53 = *(NSObject **)(gLogObjects + 240);
              }
              if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
              {
                int v54 = iAP2MsgGetMsgID(a2);
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)CFStringRef v111 = v47;
                *(_WORD *)&v111[4] = 1024;
                *(_DWORD *)&v111[6] = 7;
                *(_WORD *)__int16 v112 = 1024;
                *(_DWORD *)&v112[2] = v54;
                _os_log_error_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "Unknown Subparam ID: %d in Param ID: %d for Msg ID: 0x%04X - ignoring subparam", buf, 0x14u);
              }
              uint64_t v9 = v49;
              uint64_t v10 = v104;
            }
            uint64_t v45 = iAP2MsgGetNextParam(a2, v8, v45);
            if (!v45) {
              goto LABEL_93;
            }
            continue;
          }
        default:
          uint64_t v13 = v9;
          uint64_t v14 = v11;
          uint64_t v15 = gLogObjects;
          int v16 = gNumLogObjects;
          if (gLogObjects) {
            BOOL v17 = gNumLogObjects < 31;
          }
          else {
            BOOL v17 = 1;
          }
          if (v17)
          {
            uint64_t v55 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)CFStringRef v111 = v15;
              *(_WORD *)&v111[8] = 1024;
              *(_DWORD *)__int16 v112 = v16;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
          }
          else
          {
            uint64_t v55 = *(NSObject **)(gLogObjects + 240);
          }
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            int v56 = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)CFStringRef v111 = ParamID;
            *(_WORD *)&v111[4] = 1024;
            *(_DWORD *)&v111[6] = v56;
            _os_log_error_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
          }
          uint64_t v11 = v14;
          uint64_t v9 = v13;
          goto LABEL_93;
      }
    }
  }
  DataAsString = 0;
  uint64_t v97 = 0;
  cStr = 0;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  char v96 = 0;
  unsigned int v106 = 0;
  uint64_t v9 = 0;
LABEL_96:
  uint64_t v95 = v11;
  if (gLogObjects && gNumLogObjects >= 21)
  {
    uint64_t v57 = *(NSObject **)(gLogObjects + 160);
  }
  else
  {
    uint64_t v57 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  uint64_t v58 = (const char *)DataAsString;
  if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
  {
    uint64_t v59 = "(nil)";
    *(_DWORD *)buf = 134219010;
    CFAllocatorRef v60 = cStr;
    if (!cStr) {
      CFAllocatorRef v60 = "(nil)";
    }
    *(void *)CFStringRef v111 = v11;
    *(_WORD *)&v111[8] = 2048;
    if (DataAsString) {
      uint64_t v59 = (const char *)DataAsString;
    }
    *(void *)__int16 v112 = v10;
    *(_WORD *)&v112[8] = 2048;
    *(void *)int v113 = v9;
    *(_WORD *)&v113[8] = 2080;
    *(void *)&v113[10] = v60;
    *(_WORD *)__int16 v114 = 2080;
    *(void *)&v114[2] = v59;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "StartMediaLibraryUpdates: mediaItemProperties=%llxh playlistProperties=%llxh playlistContentMediaItemProperties=%llxh lastRevision=%s libraryUID=%s", buf, 0x34u);
  }
  uint64_t v105 = v10;
  uint64_t v61 = v102;
  if (!DataAsString) {
    return 0;
  }
  uint64_t result = _iap2_mediaLibrary_findMediaLibraryForUID(v102, (const char *)DataAsString);
  if (result)
  {
    *(unsigned char *)uint64_t result = 1;
    *(void *)(result + 136) = v11;
    *(void *)(result + 144) = v105;
    uint64_t Feature = iap2_feature_getFeature(v102, 0xDu);
    if (Feature)
    {
      int v63 = *(_DWORD *)(Feature + 48);
      if (v63)
      {
        CFNumberRef v101 = (_DWORD *)Feature;
        if (v63 < 1)
        {
          uint64_t v68 = 0;
          unsigned int v67 = 0;
          unsigned int v66 = 0;
          unsigned int v65 = 0;
        }
        else
        {
          uint64_t v64 = 0;
          unsigned int v65 = 0;
          unsigned int v66 = 0;
          unsigned int v67 = 0;
          LODWORD(v68) = 0;
          do
          {
            uint64_t v69 = *(void *)(*(void *)(Feature + 40) + 8 * v64);
            uint64_t v108 = 0;
            uint64_t v109 = 0;
            _calcWindowSize(v61, v69, (int *)&v109 + 1, (unsigned int *)&v109, (unsigned int *)&v108 + 1, (int *)&v108);
            uint64_t v70 = gLogObjects;
            int v71 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v72 = gNumLogObjects < 31;
            }
            else {
              BOOL v72 = 1;
            }
            if (v72)
            {
              double v73 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)CFStringRef v111 = v70;
                *(_WORD *)&v111[8] = 1024;
                *(_DWORD *)__int16 v112 = v71;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
            }
            else
            {
              double v73 = *(NSObject **)(gLogObjects + 240);
            }
            uint64_t v61 = v102;
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v74 = *(void *)(v102 + 8);
              *(_DWORD *)buf = 138414594;
              *(void *)CFStringRef v111 = v74;
              *(_WORD *)&v111[8] = 2080;
              *(void *)__int16 v112 = v69 + 65;
              *(_WORD *)&v112[8] = 1024;
              *(_DWORD *)int v113 = v68;
              *(_WORD *)&v113[4] = 1024;
              *(_DWORD *)&v113[6] = HIDWORD(v109);
              *(_WORD *)&v113[10] = 1024;
              *(_DWORD *)&v113[12] = v67;
              *(_WORD *)&v113[16] = 1024;
              *(_DWORD *)__int16 v114 = v109;
              *(_WORD *)&v114[4] = 1024;
              *(_DWORD *)&v114[6] = v66;
              __int16 v115 = 1024;
              int v116 = HIDWORD(v108);
              __int16 v117 = 1024;
              unsigned int v118 = v65;
              __int16 v119 = 1024;
              int v120 = v108;
              _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "iAP2MediaLibrary _recalcWindowSize: %@ - %s, window=%d->%d recordsPerMessage=%d->%d maxUpdateMessagesInFlight=%d->%d maxUpdateMessagesPendingSend=%d->%d", buf, 0x46u);
            }
            if (v68 <= HIDWORD(v109)) {
              unsigned int v75 = HIDWORD(v109);
            }
            else {
              unsigned int v75 = v68;
            }
            if (HIDWORD(v109)) {
              uint64_t v68 = v75;
            }
            else {
              uint64_t v68 = v68;
            }
            if (v67 <= v109) {
              unsigned int v76 = v109;
            }
            else {
              unsigned int v76 = v67;
            }
            if (v109) {
              unsigned int v67 = v76;
            }
            if (v66 <= HIDWORD(v108)) {
              unsigned int v77 = HIDWORD(v108);
            }
            else {
              unsigned int v77 = v66;
            }
            if (HIDWORD(v108)) {
              unsigned int v66 = v77;
            }
            if (v65 <= v108) {
              unsigned int v78 = v108;
            }
            else {
              unsigned int v78 = v65;
            }
            if (v108) {
              unsigned int v65 = v78;
            }
            ++v64;
            uint64_t Feature = (uint64_t)v101;
          }
          while (v64 < (int)v101[12]);
        }
        if (gLogObjects && gNumLogObjects >= 31)
        {
          int v79 = *(NSObject **)(gLogObjects + 240);
          uint64_t v58 = (const char *)DataAsString;
        }
        else
        {
          int v79 = &_os_log_default;
          uint64_t v58 = (const char *)DataAsString;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v80 = *(void *)(v61 + 8);
          int v81 = v101[1];
          int v82 = v101[2];
          int v83 = v101[3];
          *(_DWORD *)buf = 138413826;
          *(void *)CFStringRef v111 = v80;
          *(_WORD *)&v111[8] = 1024;
          *(_DWORD *)__int16 v112 = v81;
          *(_WORD *)&v112[4] = 1024;
          *(_DWORD *)&v112[6] = v68;
          *(_WORD *)int v113 = 1024;
          *(_DWORD *)&v113[2] = v82;
          *(_WORD *)&v113[6] = 1024;
          *(_DWORD *)&v113[8] = v67;
          *(_WORD *)&v113[12] = 1024;
          *(_DWORD *)&v113[14] = v83;
          *(_WORD *)__int16 v114 = 1024;
          *(_DWORD *)&v114[2] = v66;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "iAP2MediaLibrary _recalcWindowSize: %@, for all library: window=%d->%d recordsPerMessage=%d->%d maxUpdateMessagesInFlight=%d->%d", buf, 0x30u);
        }
        if (v67 && v101[2] != v67) {
          v101[2] = v67;
        }
        if (v66 && v101[3] != v66) {
          v101[3] = v66;
        }
        if (v65 && v101[4] != v65) {
          v101[4] = v65;
        }
        if (v68 && v101[1] != v68)
        {
          v101[1] = v68;
          platform_mediaLibrary_accessoryUpdate(*(void **)(v61 + 8), v68);
        }
      }
    }
    char v84 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, v58, 0x8000100u);
    if (cStr) {
      CFStringRef v85 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
    }
    else {
      CFStringRef v85 = 0;
    }
    platform_mediaLibrary_startMediaLibraryUpdate(*(void **)(v61 + 8), v84, v85, v95, v105, v96 & 1, v97 & 1, BYTE4(v97) & 1, v106, v9);
    if (v84) {
      CFRelease(v84);
    }
    if (v85) {
      CFRelease(v85);
    }
    return 1;
  }
  return result;
}

uint64_t _iap2_mediaLibrary_findMediaLibraryForUID(uint64_t a1, const char *a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 0xDu);
    if (Feature && (uint64_t v5 = *(unsigned int *)(Feature + 48), (int)v5 >= 1))
    {
      for (uint64_t i = *(uint64_t **)(Feature + 40); ; ++i)
      {
        uint64_t v2 = *i;
        if (!strncmp((const char *)(*i + 65), a2, 0x40uLL)) {
          break;
        }
        if (!--v5) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t iap2_mediaLibrary_stopMediaLibraryUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a1 || !a2) {
    return result;
  }
  uint64_t v22 = a1;
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 21;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    BOOL v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    BOOL v6 = *(NSObject **)(gLogObjects + 160);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "StopMediaLibraryUpdates", buf, 2u);
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  BOOL v23 = 0;
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    uint64_t v9 = 0;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      if (ParamID)
      {
        int v11 = ParamID;
        uint64_t v12 = gLogObjects;
        int v13 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v14 = gNumLogObjects < 31;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14)
        {
          int v16 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)int v25 = v12;
            *(_WORD *)&unsigned char v25[8] = 1024;
            int v26 = v13;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            int v16 = &_os_log_default;
          }
        }
        else
        {
          int v16 = *(NSObject **)(gLogObjects + 240);
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)int v25 = v11;
          *(_WORD *)&v25[4] = 1024;
          *(_DWORD *)&v25[6] = MsgID;
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
        }
      }
      else
      {
        DataAsString = iAP2MsgGetDataAsString(NextParam, &v23);
        if (v23)
        {
          unsigned int v21 = logObjectForModule_1(30);
          uint64_t result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
          if (result)
          {
            iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
            return 0;
          }
          return result;
        }
        uint64_t v9 = (const char *)DataAsString;
      }
      NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      if (!NextParam) {
        goto LABEL_29;
      }
    }
  }
  uint64_t v9 = 0;
LABEL_29:
  if (gLogObjects && gNumLogObjects >= 21)
  {
    __int16 v18 = *(NSObject **)(gLogObjects + 160);
  }
  else
  {
    __int16 v18 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    unint64_t v19 = "(nil)";
    if (v9) {
      unint64_t v19 = v9;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)int v25 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "StopMediaLibraryUpdates: libraryUID=%s", buf, 0xCu);
  }
  if (!v9) {
    return 0;
  }
  uint64_t result = _iap2_mediaLibrary_findMediaLibraryForUID(v22, v9);
  if (result)
  {
    *(unsigned char *)uint64_t result = 0;
    *(void *)(result + 136) = 0;
    *(void *)(result + 144) = 0;
    __int16 v20 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, v9, 0x8000100u);
    platform_mediaLibrary_stopMediaLibraryUpdate(*(void **)(v22 + 8), v20);
    if (v20) {
      CFRelease(v20);
    }
    return 1;
  }
  return result;
}

uint64_t iap2_mediaLibrary_playMediaLibraryCurrentSelectionHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 21;
    }
    else {
      BOOL v5 = 1;
    }
    uint64_t v22 = a1;
    if (v5)
    {
      BOOL v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v6 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "PlayMediaLibraryCurrentSelection", buf, 2u);
    }
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      uint64_t v9 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID)
        {
          int v11 = ParamID;
          uint64_t v12 = gLogObjects;
          int v13 = gNumLogObjects;
          if (gLogObjects) {
            BOOL v14 = gNumLogObjects < 31;
          }
          else {
            BOOL v14 = 1;
          }
          if (v14)
          {
            int v16 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)uint64_t v24 = v12;
              *(_WORD *)&void v24[8] = 1024;
              int v25 = v13;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              int v16 = &_os_log_default;
            }
          }
          else
          {
            int v16 = *(NSObject **)(gLogObjects + 240);
          }
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            int MsgID = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)uint64_t v24 = v11;
            *(_WORD *)&v24[4] = 1024;
            *(_DWORD *)&v24[6] = MsgID;
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
          }
        }
        else
        {
          *(_DWORD *)buf = -1431655766;
          DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            unsigned int v21 = logObjectForModule_1(30);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
            }
            return 0;
          }
          uint64_t v9 = (const char *)DataAsString;
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
        if (!NextParam) {
          goto LABEL_29;
        }
      }
    }
    uint64_t v9 = 0;
LABEL_29:
    if (gLogObjects && gNumLogObjects >= 21)
    {
      __int16 v18 = *(NSObject **)(gLogObjects + 160);
    }
    else
    {
      __int16 v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      unint64_t v19 = "(nil)";
      if (v9) {
        unint64_t v19 = v9;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)uint64_t v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "PlayMediaLibraryCurrentSelection: libraryUID=%s", buf, 0xCu);
    }
    if (v9)
    {
      __int16 v20 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, v9, 0x8000100u);
      platform_mediaLibrary_playCurrentSelection(*(void **)(v22 + 8), v20);
      if (v20) {
        CFRelease(v20);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t iap2_mediaLibrary_playMediaLibraryItemsHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a1 || !a2) {
    return result;
  }
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 21;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v34 = a1;
  if (v5)
  {
    BOOL v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    BOOL v6 = *(NSObject **)(gLogObjects + 160);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "PlayMediaLibraryItems", buf, 2u);
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    LODWORD(v35) = 0;
    int v11 = 0;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      if (ParamID == 2)
      {
        *(_DWORD *)buf = -1431655766;
        DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)buf);
        if (*(_DWORD *)buf)
        {
          BOOL v32 = logObjectForModule_1(30);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
          }
LABEL_55:
          uint64_t v30 = 0;
          uint64_t result = 0;
          unint64_t v19 = v11;
          if (v11) {
            goto LABEL_56;
          }
          return result;
        }
        uint64_t v9 = (const char *)DataAsString;
        goto LABEL_35;
      }
      int v13 = ParamID;
      if (ParamID == 1) {
        break;
      }
      if (ParamID)
      {
        uint64_t v23 = gLogObjects;
        int v24 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 31)
        {
          int v25 = *(NSObject **)(gLogObjects + 240);
        }
        else
        {
          int v25 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)int v37 = v23;
            *(_WORD *)&v37[8] = 1024;
            *(_DWORD *)&unsigned char v37[10] = v24;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)int v37 = v13;
          *(_WORD *)&v37[4] = 1024;
          *(_DWORD *)&v37[6] = MsgID;
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
        }
LABEL_35:
        unint64_t v19 = v11;
        goto LABEL_36;
      }
      *(_DWORD *)buf = -1431655766;
      unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
      size_t v15 = ParamValueLen;
      *(_DWORD *)buf = (ParamValueLen & 7) != 0;
      if ((ParamValueLen & 7) != 0)
      {
        unsigned int v31 = logObjectForModule_1(30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
        }
        goto LABEL_55;
      }
      unsigned int v16 = ParamValueLen;
      uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)NextParam, buf);
      __int16 v18 = (uint64_t *)malloc_type_malloc(v15, 0xAEAA82EuLL);
      unint64_t v19 = v18;
      if (v16)
      {
        uint64_t v20 = 0;
        do
        {
          v18[v20] = bswap64(*(void *)(DataAsData + v20 * 8));
          ++v20;
        }
        while ((v20 * 8) < v16);
      }
      if (v11) {
        free(v11);
      }
      size_t v35 = v15 >> 3;
LABEL_36:
      NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      int v11 = v19;
      if (!NextParam) {
        goto LABEL_39;
      }
    }
    *(_DWORD *)buf = -1431655766;
    uint64_t DataAsU32 = iAP2MsgGetDataAsU32(NextParam, buf);
    if (*(_DWORD *)buf)
    {
      int v33 = logObjectForModule_1(30);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
      }
      goto LABEL_55;
    }
    uint64_t v10 = DataAsU32;
    goto LABEL_35;
  }
  unint64_t v19 = 0;
  LODWORD(v35) = 0;
  uint64_t v10 = 0;
  uint64_t v9 = 0;
LABEL_39:
  if (gLogObjects && gNumLogObjects >= 21)
  {
    int v27 = *(NSObject **)(gLogObjects + 160);
  }
  else
  {
    int v27 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    unint64_t v28 = "(nil)";
    if (v9) {
      unint64_t v28 = v9;
    }
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)int v37 = v35;
    *(_WORD *)&v37[4] = 2080;
    *(void *)&v37[6] = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "PlayMediaLibraryItems: itemPersistentIDCount=%d libraryUID=%s", buf, 0x12u);
  }
  if (!v19 || !v35 || !v9)
  {
    int v11 = v19;
    goto LABEL_55;
  }
  int v29 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, v9, 0x8000100u);
  platform_mediaLibrary_playItems(*(void **)(v34 + 8), v29, v19, v35, v10);
  if (v29) {
    CFRelease(v29);
  }
  uint64_t v30 = 1;
LABEL_56:
  free(v19);
  return v30;
}

uint64_t iap2_mediaLibrary_playMediaLibraryCollectionHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a1) {
    return result;
  }
  uint64_t v31 = a1;
  if (!a2) {
    return result;
  }
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 21;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    BOOL v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    BOOL v6 = *(NSObject **)(gLogObjects + 160);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "PlayMediaLibraryCollection", buf, 2u);
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (!FirstParam)
  {
    uint64_t v10 = 0;
    unsigned int v32 = 0;
    uint64_t v33 = 0;
    uint64_t v9 = 0;
    uint64_t v11 = 8;
LABEL_37:
    if (gLogObjects && gNumLogObjects >= 21)
    {
      uint64_t v23 = *(NSObject **)(gLogObjects + 160);
    }
    else
    {
      uint64_t v23 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      int v24 = "(nil)";
      if (v9) {
        int v24 = v9;
      }
      *(_DWORD *)buf = 134218242;
      *(void *)size_t v35 = v10;
      *(_WORD *)&void v35[8] = 2080;
      uint64_t v36 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "PlayMediaLibraryCollection: collectionPersistentID=%llu libraryUID=%s", buf, 0x16u);
    }
    uint64_t result = 0;
    if (v10 && v11 != 8 && v9)
    {
      int v25 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, v9, 0x8000100u);
      platform_mediaLibrary_playCollection(*(void **)(v31 + 8), v25, v10, v11, v32, v33);
      if (v25) {
        CFRelease(v25);
      }
      return 1;
    }
    return result;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  uint64_t v9 = 0;
  uint64_t v33 = 0;
  unsigned int v32 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 8;
  while (2)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    switch(ParamID)
    {
      case 0:
        *(_DWORD *)buf = -1431655766;
        unint64_t DataAsU64 = iAP2MsgGetDataAsU64(NextParam, buf);
        if (!*(_DWORD *)buf)
        {
          uint64_t v10 = DataAsU64;
          goto LABEL_34;
        }
        int v26 = logObjectForModule_1(30);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
        }
        return 0;
      case 1:
        *(_DWORD *)buf = -1431655766;
        uint64_t DataAsU8 = iAP2MsgGetDataAsU8(NextParam, buf);
        if (*(_DWORD *)buf)
        {
          int v27 = logObjectForModule_1(30);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
            iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
          }
          return 0;
        }
        uint64_t v11 = DataAsU8;
        goto LABEL_34;
      case 2:
        *(_DWORD *)buf = -1431655766;
        unsigned int DataAsU32 = iAP2MsgGetDataAsU32(NextParam, buf);
        if (*(_DWORD *)buf)
        {
          unint64_t v28 = logObjectForModule_1(30);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
          }
          return 0;
        }
        unsigned int v32 = DataAsU32;
        goto LABEL_34;
      case 3:
        *(_DWORD *)buf = -1431655766;
        DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)buf);
        if (*(_DWORD *)buf)
        {
          int v29 = logObjectForModule_1(30);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            iap2_mediaLibrary_playMediaLibraryCollectionHandler_cold_5(a2);
          }
          return 0;
        }
        uint64_t v9 = (const char *)DataAsString;
        goto LABEL_34;
      case 4:
        *(_DWORD *)buf = -1431655766;
        unint64_t v20 = iAP2MsgGetDataAsU64(NextParam, buf);
        if (!*(_DWORD *)buf)
        {
          uint64_t v33 = v20;
LABEL_34:
          NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
          if (!NextParam) {
            goto LABEL_37;
          }
          continue;
        }
        uint64_t v30 = logObjectForModule_1(30);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_8(a2);
        }
        return 0;
      default:
        uint64_t v14 = gLogObjects;
        int v15 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v16 = gNumLogObjects < 31;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16)
        {
          unsigned int v21 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)size_t v35 = v14;
            *(_WORD *)&void v35[8] = 1024;
            LODWORD(v36) = v15;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        else
        {
          unsigned int v21 = *(NSObject **)(gLogObjects + 240);
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)size_t v35 = ParamID;
          *(_WORD *)&uint8_t v35[4] = 1024;
          *(_DWORD *)&v35[6] = MsgID;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
        }
        goto LABEL_34;
    }
  }
}

BOOL iap2_mediaLibrary_playMediaLibrarySpecialHandler(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 21;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      BOOL v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v6 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "PlayMediaLibrarySpecial", buf, 2u);
    }
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      uint64_t v28 = a1;
      uint64_t v9 = 0;
      char v10 = 0;
      uint64_t v11 = 0;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID == 2)
        {
          *(_DWORD *)buf = -1431655766;
          unint64_t DataAsU64 = iAP2MsgGetDataAsU64(NextParam, buf);
          if (*(_DWORD *)buf)
          {
            int v24 = logObjectForModule_1(30);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
            }
            return 0;
          }
          if (v9)
          {
            int v27 = logObjectForModule_1(30);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_playMediaLibrarySpecialHandler_cold_6(a2);
            }
            return 0;
          }
          uint64_t v9 = DataAsU64;
        }
        else
        {
          int v13 = ParamID;
          if (ParamID == 1)
          {
            if (!iAP2MsgIsDataVoid(NextParam))
            {
              int v25 = logObjectForModule_1(30);
              BOOL result = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
              if (!result) {
                return result;
              }
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
              return 0;
            }
            char v10 = 1;
          }
          else if (ParamID)
          {
            uint64_t v16 = gLogObjects;
            int v17 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 31)
            {
              __int16 v18 = *(NSObject **)(gLogObjects + 240);
            }
            else
            {
              __int16 v18 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)uint64_t v30 = v16;
                *(_WORD *)&v30[8] = 1024;
                *(_DWORD *)&v30[10] = v17;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
            }
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)uint64_t v30 = v13;
              *(_WORD *)&v30[4] = 1024;
              *(_DWORD *)&v30[6] = MsgID;
              _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
            }
          }
          else
          {
            *(_DWORD *)buf = -1431655766;
            DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)buf);
            if (*(_DWORD *)buf)
            {
              uint64_t v23 = logObjectForModule_1(30);
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              return 0;
            }
            if (v11)
            {
              int v26 = logObjectForModule_1(30);
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_playMediaLibrarySpecialHandler_cold_3(a2);
              }
              return 0;
            }
            uint64_t v11 = (const char *)DataAsString;
          }
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      }
      while (NextParam);
      if (!v11) {
        goto LABEL_37;
      }
      if (gLogObjects && gNumLogObjects >= 21)
      {
        unint64_t v20 = *(NSObject **)(gLogObjects + 160);
      }
      else
      {
        unint64_t v20 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)uint64_t v30 = v10 & 1;
        *(_WORD *)&v30[4] = 2048;
        *(void *)&v30[6] = v9;
        __int16 v31 = 2080;
        unsigned int v32 = v11;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "PlayMediaLibrarySpecial: allSongsSeen=%d startingItemPersistentID=%llu libraryUID=%s", buf, 0x1Cu);
      }
      if (v10)
      {
        uint64_t v22 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, v11, 0x8000100u);
        platform_mediaLibrary_playAllSongs(*(void **)(v28 + 8), v22, v9);
        if (v22) {
          CFRelease(v22);
        }
        return 1;
      }
    }
    else
    {
LABEL_37:
      unsigned int v21 = logObjectForModule_1(30);
      BOOL result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      iap2_mediaLibrary_playMediaLibrarySpecialHandler_cold_1(a2);
    }
    return 0;
  }
  return result;
}

uint64_t iap2_mediaLibrary_infoUpdateHandler(uint64_t result, uint64_t a2)
{
  uint64_t v59 = (uint64_t *)result;
  if (!result) {
    return result;
  }
  BOOL result = 0;
  if (!a2) {
    return result;
  }
  uint64_t v58 = v59[1];
  if (!v58) {
    return result;
  }
  if (*(_DWORD *)a2) {
    return 0;
  }
  CFArrayRef v3 = *(const __CFArray **)(a2 + 8);
  if (v3) {
    CFIndex Count = CFArrayGetCount(v3);
  }
  else {
    CFIndex Count = 0;
  }
  int v56 = (void *)a2;
  if (gLogObjects && gNumLogObjects >= 31)
  {
    BOOL v5 = *(NSObject **)(gLogObjects + 240);
  }
  else
  {
    BOOL v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(_DWORD *)buf = 138412802;
    if (v6) {
      uint64_t v7 = ".";
    }
    else {
      uint64_t v7 = "nil ";
    }
    uint64_t v62 = v58;
    __int16 v63 = 2080;
    *(void *)uint64_t v64 = v7;
    *(_WORD *)&v64[8] = 2048;
    *(void *)&unsigned char v64[10] = Count;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "iap2_mediaLibrary_infoUpdateHandler %@ libraryInfoList(%scount=%ld)", buf, 0x20u);
  }
  BOOL result = iap2_feature_getFeature((uint64_t)v59, 0xDu);
  if (!result) {
    return result;
  }
  if (!*(unsigned char *)result) {
    return 0;
  }
  uint64_t v57 = result;
  if (gLogObjects && gNumLogObjects >= 31)
  {
    int v8 = *(NSObject **)(gLogObjects + 240);
    uint64_t v9 = a2;
  }
  else
  {
    int v8 = &_os_log_default;
    uint64_t v9 = a2;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v62 = v58;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "iap2_mediaLibrary_infoUpdateHandler %@ update library list", buf, 0xCu);
  }
  if (Count >= 1)
  {
    CFIndex v10 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 8), v10);
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryTypeKey");
      int valuePtr = 4;
      if (!Value) {
        break;
      }
      if (CFNumberGetValue(Value, kCFNumberCharType, &valuePtr)) {
        goto LABEL_43;
      }
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 31)
      {
        int v15 = *(NSObject **)(gLogObjects + 240);
      }
      else
      {
        int v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v62 = v13;
          __int16 v63 = 1024;
          *(_DWORD *)uint64_t v64 = v14;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v62 = v58;
        __int16 v63 = 2112;
        *(void *)uint64_t v64 = ValueAtIndex;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "iap2_mediaLibrary_infoUpdateHandler %@, ERROR: failed to get type from typeObj! entry=%@", buf, 0x16u);
      }
LABEL_56:
      if (Count == ++v10)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFDictionaryRef v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 8), i);
          CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(v27, @"ACCMediaLibraryTypeKey");
          int valuePtr = 4;
          if (v28)
          {
            if (!CFNumberGetValue(v28, kCFNumberCharType, &valuePtr))
            {
              uint64_t v29 = gLogObjects;
              int v30 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 31)
              {
                __int16 v31 = *(NSObject **)(gLogObjects + 240);
              }
              else
              {
                __int16 v31 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v62 = v29;
                  __int16 v63 = 1024;
                  *(_DWORD *)uint64_t v64 = v30;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  __int16 v31 = &_os_log_default;
                }
              }
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                uint64_t v62 = v58;
                __int16 v63 = 2112;
                *(void *)uint64_t v64 = v27;
                _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "iap2_mediaLibrary_infoUpdateHandler %@, ERROR: failed to get type from typeObj! entry=%@", buf, 0x16u);
              }
              int valuePtr = 4;
            }
          }
          else
          {
            uint64_t v32 = gLogObjects;
            int v33 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v34 = gNumLogObjects < 31;
            }
            else {
              BOOL v34 = 1;
            }
            if (v34)
            {
              size_t v35 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v62 = v32;
                __int16 v63 = 1024;
                *(_DWORD *)uint64_t v64 = v33;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                size_t v35 = &_os_log_default;
              }
            }
            else
            {
              size_t v35 = *(NSObject **)(gLogObjects + 240);
            }
            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              uint64_t v62 = v58;
              __int16 v63 = 2112;
              *(void *)uint64_t v64 = v27;
              _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "iap2_mediaLibrary_infoUpdateHandler %@, ERROR: no Type object in libraryDictionary! entry=%@", buf, 0x16u);
            }
          }
          if ((valuePtr & 0xFFFFFFFB) != 0)
          {
            uint64_t v36 = gLogObjects;
            int v37 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 31)
            {
              BOOL v38 = *(NSObject **)(gLogObjects + 240);
            }
            else
            {
              BOOL v38 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v62 = v36;
                __int16 v63 = 1024;
                *(_DWORD *)uint64_t v64 = v37;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                BOOL v38 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
            {
              __int16 v39 = CFDictionaryGetValue(v27, @"ACCMediaLibraryNameKey");
              int v40 = CFDictionaryGetValue(v27, @"ACCMediaLibraryUIDKey");
              BOOL v41 = CFDictionaryGetValue(v27, @"ACCMediaLibraryTypeKey");
              *(_DWORD *)buf = 138413314;
              uint64_t v62 = v58;
              __int16 v63 = 2048;
              *(void *)uint64_t v64 = i;
              *(_WORD *)&v64[8] = 2112;
              *(void *)&unsigned char v64[10] = v39;
              *(_WORD *)&v64[18] = 2112;
              *(void *)&v64[20] = v40;
              *(_WORD *)&v64[28] = 2112;
              unsigned int v65 = v41;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "iap2_mediaLibrary_infoUpdateHandler %@ i=%ld addUpdateLibrary name=%@ uid=%@ type=%@", buf, 0x34u);
            }
            iap2_mediaLibrary_addUpdateLibrary((uint64_t)v59, v27);
          }
        }
        goto LABEL_87;
      }
    }
    uint64_t v16 = gLogObjects;
    int v17 = gNumLogObjects;
    if (gLogObjects) {
      BOOL v18 = gNumLogObjects < 31;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18)
    {
      unint64_t v19 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v62 = v16;
        __int16 v63 = 1024;
        *(_DWORD *)uint64_t v64 = v17;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
    }
    else
    {
      unint64_t v19 = *(NSObject **)(gLogObjects + 240);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v62 = v58;
      __int16 v63 = 2112;
      *(void *)uint64_t v64 = ValueAtIndex;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "iap2_mediaLibrary_infoUpdateHandler %@, ERROR: no Type object in libraryDictionary! entry=%@", buf, 0x16u);
    }
LABEL_43:
    if (!valuePtr)
    {
      uint64_t v20 = gLogObjects;
      int v21 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 31)
      {
        uint64_t v22 = *(NSObject **)(gLogObjects + 240);
      }
      else
      {
        uint64_t v22 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v62 = v20;
          __int16 v63 = 1024;
          *(_DWORD *)uint64_t v64 = v21;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryNameKey");
        int v24 = CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUIDKey");
        int v25 = CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryTypeKey");
        *(_DWORD *)buf = 138413314;
        uint64_t v62 = v58;
        __int16 v63 = 2048;
        *(void *)uint64_t v64 = v10;
        *(_WORD *)&v64[8] = 2112;
        *(void *)&unsigned char v64[10] = v23;
        *(_WORD *)&v64[18] = 2112;
        *(void *)&v64[20] = v24;
        *(_WORD *)&v64[28] = 2112;
        unsigned int v65 = v25;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "iap2_mediaLibrary_infoUpdateHandler %@ i=%ld addUpdateLibrary name=%@ uid=%@ type=%@", buf, 0x34u);
      }
      iap2_mediaLibrary_addUpdateLibrary((uint64_t)v59, ValueAtIndex);
    }
    goto LABEL_56;
  }
LABEL_87:
  uint64_t v42 = iAP2MsgInit((uint64_t)(v59 + 15), 19457, v59[24], 0xFFFF, 0, 0);
  if (gLogObjects && gNumLogObjects >= 31)
  {
    BOOL v43 = *(NSObject **)(gLogObjects + 240);
    uint64_t v44 = v57;
  }
  else
  {
    BOOL v43 = &_os_log_default;
    uint64_t v44 = v57;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
  {
    int v45 = *(_DWORD *)(v44 + 48);
    *(_DWORD *)buf = 138412546;
    uint64_t v62 = v58;
    __int16 v63 = 1024;
    *(_DWORD *)uint64_t v64 = v45;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "iap2_mediaLibrary_infoUpdateHandler %@ mediaLibraryInfoCount=%d", buf, 0x12u);
  }
  if (*(int *)(v44 + 48) >= 1)
  {
    uint64_t v46 = 0;
    do
    {
      unsigned int v47 = *(char **)(*(void *)(v44 + 40) + 8 * v46);
      BOOL v48 = iAP2MsgAddGroupParam(v42, 0);
      uint64_t v49 = gLogObjects;
      int v50 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v51 = gNumLogObjects < 31;
      }
      else {
        BOOL v51 = 1;
      }
      if (v51)
      {
        BOOL v52 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v62 = v49;
          __int16 v63 = 1024;
          *(_DWORD *)uint64_t v64 = v50;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          BOOL v52 = &_os_log_default;
        }
      }
      else
      {
        BOOL v52 = *(NSObject **)(gLogObjects + 240);
      }
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        int v53 = *((_DWORD *)v47 + 33);
        *(_DWORD *)buf = 138413314;
        uint64_t v62 = v58;
        __int16 v63 = 1024;
        *(_DWORD *)uint64_t v64 = v46;
        *(_WORD *)&v64[4] = 2080;
        *(void *)&v64[6] = v47 + 1;
        *(_WORD *)&unsigned char v64[14] = 2080;
        *(void *)&v64[16] = v47 + 65;
        *(_WORD *)&v64[24] = 1024;
        *(_DWORD *)&v64[26] = v53;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "iap2_mediaLibrary_infoUpdateHandler %@ index=%d name=%s uid=%s type=%d", buf, 0x2Cu);
      }
      iAP2MsgAddStringParam(v42, (uint64_t)v48, 0, v47 + 1);
      iAP2MsgAddStringParam(v42, (uint64_t)v48, 1, v47 + 65);
      iAP2MsgAddU8Param(v42, (uint64_t)v48, 2, v47[132]);
      ++v46;
      uint64_t v44 = v57;
    }
    while (v46 < *(int *)(v57 + 48));
  }
  if (gLogObjects && gNumLogObjects >= 31)
  {
    int v54 = *(NSObject **)(gLogObjects + 240);
  }
  else
  {
    int v54 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
  {
    int MsgID = iAP2MsgGetMsgID(v42);
    *(_DWORD *)buf = 138412546;
    uint64_t v62 = v58;
    __int16 v63 = 1024;
    *(_DWORD *)uint64_t v64 = MsgID;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "iap2_mediaLibrary_infoUpdateHandler %@ send message %xh", buf, 0x12u);
  }
  iap2_sessionControl_sendOutgoingMessage(v59, v42);
  platform_mediaLibrary_deleteParams(v56);
  return 1;
}

uint64_t iap2_mediaLibrary_addUpdateLibrary(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v2 = 1;
  if (a1 && theDict)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"ACCMediaLibraryNameKey");
    CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(theDict, @"ACCMediaLibraryUIDKey");
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ACCMediaLibraryTypeKey");
    unsigned __int8 valuePtr = -86;
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      return 1;
    }
    CFNumberGetValue(v7, kCFNumberSInt8Type, &valuePtr);
    CStringPtr = CFStringGetCStringPtr(v6, 0x8000100u);
    uint64_t MediaLibraryForUID = _iap2_mediaLibrary_findMediaLibraryForUID(a1, CStringPtr);
    uint64_t v11 = (_DWORD *)MediaLibraryForUID;
    if (MediaLibraryForUID || (uint64_t v2 = 1, (v11 = malloc_type_calloc(1uLL, 0xC8uLL, 0x102004001C2AE80uLL)) != 0))
    {
      GetCStringFromCFString(v6);
      __strlcpy_chk();
      if (Value)
      {
        GetCStringFromCFString(Value);
        __strlcpy_chk();
      }
      v11[33] = valuePtr;
      if (MediaLibraryForUID)
      {
        uint64_t v2 = 1;
LABEL_45:
        if (gLogObjects) {
          BOOL v27 = gNumLogObjects < 31;
        }
        else {
          BOOL v27 = 1;
        }
        if (v27)
        {
          CFNumberRef v28 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          CFNumberRef v28 = *(NSObject **)(gLogObjects + 240);
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v29 = "failed to insert";
          if (v2) {
            uint64_t v29 = "inserted";
          }
          int v30 = v11[33];
          uint64_t v42 = *(void *)(a1 + 8);
          __int16 v31 = "updated";
          *(_DWORD *)buf = 138413314;
          __int16 v43 = 2080;
          if (!MediaLibraryForUID) {
            __int16 v31 = v29;
          }
          *(void *)uint64_t v44 = v31;
          *(_WORD *)&v44[8] = 2080;
          *(void *)&unsigned char v44[10] = (char *)v11 + 1;
          *(_WORD *)&v44[18] = 2080;
          *(void *)&v44[20] = (char *)v11 + 65;
          *(_WORD *)&v44[28] = 1024;
          int v45 = v30;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "iap2_mediaLibrary_addUpdateLibrary %@ %s MediaLibraryInfo name=%s uid=%s type=%d", buf, 0x30u);
        }
        return v2;
      }
      uint64_t Feature = iap2_feature_getFeature(a1, 0xDu);
      uint64_t v2 = Feature;
      if (!Feature) {
        goto LABEL_45;
      }
      int v13 = *(_DWORD *)(Feature + 52);
      if (v13 && *(void *)(Feature + 40))
      {
        if (v13 == *(_DWORD *)(Feature + 48))
        {
          int v39 = 2 * v13;
          *(_DWORD *)(Feature + 52) = 2 * v13;
          if (gLogObjects && gNumLogObjects >= 31)
          {
            int v14 = *(NSObject **)(gLogObjects + 240);
          }
          else
          {
            int v14 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            uint64_t v33 = *(void *)(a1 + 8);
            int v34 = *(_DWORD *)(v2 + 52);
            *(_DWORD *)buf = 138412802;
            uint64_t v42 = v33;
            __int16 v43 = 1024;
            *(_DWORD *)uint64_t v44 = v34;
            *(_WORD *)&void v44[4] = 1024;
            *(_DWORD *)&v44[6] = v39;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "_iap2_mediaLibrary_insertMediaLibrary %@ re-allocate buffer for mediaLibraryInfo list, mediaLibraryAllocCount=%d->%d", buf, 0x18u);
          }
          size_t v35 = (char *)malloc_type_realloc(*(void **)(v2 + 40), 8 * v39, 0x2004093837F09uLL);
          if (v35)
          {
            *(void *)(v2 + 40) = v35;
            *(_DWORD *)(v2 + 52) = v39;
            bzero(&v35[8 * *(int *)(v2 + 48)], 8 * (v39 - *(_DWORD *)(v2 + 48)));
          }
          else
          {
            if (gLogObjects && gNumLogObjects >= 31)
            {
              uint64_t v36 = *(NSObject **)(gLogObjects + 240);
            }
            else
            {
              uint64_t v36 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              uint64_t v37 = *(void *)(a1 + 8);
              int v38 = *(_DWORD *)(v2 + 52);
              *(_DWORD *)buf = 138412802;
              uint64_t v42 = v37;
              __int16 v43 = 1024;
              *(_DWORD *)uint64_t v44 = v38;
              *(_WORD *)&void v44[4] = 1024;
              *(_DWORD *)&v44[6] = v39;
              _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "_iap2_mediaLibrary_insertMediaLibrary %@ FAILED to re-allocate buffer for mediaLibraryInfo list, mediaLibraryAllocCount=%d->%d", buf, 0x18u);
            }
          }
        }
        goto LABEL_28;
      }
      *(_DWORD *)(Feature + 52) = 2;
      uint64_t v15 = gLogObjects;
      int v16 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 31)
      {
        int v17 = *(NSObject **)(gLogObjects + 240);
      }
      else
      {
        int v17 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v42 = v15;
          __int16 v43 = 1024;
          *(_DWORD *)uint64_t v44 = v16;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          int v18 = *(_DWORD *)(v2 + 52);
          goto LABEL_25;
        }
      }
      int v18 = 2;
LABEL_25:
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = *(void *)(a1 + 8);
        *(_DWORD *)buf = 138412546;
        uint64_t v42 = v19;
        __int16 v43 = 1024;
        *(_DWORD *)uint64_t v44 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "_iap2_mediaLibrary_insertMediaLibrary %@ allocate new buffer for mediaLibraryInfo list, mediaLibraryAllocCount=%d", buf, 0x12u);
        int v18 = *(_DWORD *)(v2 + 52);
      }
      *(void *)(v2 + 40) = malloc_type_calloc(v18, 8uLL, 0x2004093837F09uLL);
LABEL_28:
      uint64_t v20 = *(void *)(v2 + 40);
      if (v20 && (uint64_t v21 = *(unsigned int *)(v2 + 52), (int)v21 >= 1))
      {
        uint64_t v22 = 0;
        while (*(void *)(v20 + 8 * v22))
        {
          if (v21 == ++v22)
          {
            uint64_t v2 = 0;
            goto LABEL_45;
          }
        }
        if (gLogObjects) {
          BOOL v23 = gNumLogObjects < 31;
        }
        else {
          BOOL v23 = 1;
        }
        if (v23)
        {
          int v24 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          int v24 = *(NSObject **)(gLogObjects + 240);
        }
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          uint64_t v25 = *(void *)(a1 + 8);
          int v26 = v11[33];
          *(_DWORD *)buf = 138413314;
          uint64_t v42 = v25;
          __int16 v43 = 1024;
          *(_DWORD *)uint64_t v44 = v22;
          *(_WORD *)&void v44[4] = 2080;
          *(void *)&v44[6] = (char *)v11 + 1;
          *(_WORD *)&v44[14] = 2080;
          *(void *)&v44[16] = (char *)v11 + 65;
          *(_WORD *)&v44[24] = 1024;
          *(_DWORD *)&v44[26] = v26;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "_iap2_mediaLibrary_insertMediaLibrary %@ found empty spot, insert MediaLibraryInfo @ index=%d name=%s uid=%s type=%d", buf, 0x2Cu);
        }
        *(void *)(*(void *)(v2 + 40) + 8 * v22) = v11;
        ++*(_DWORD *)(v2 + 48);
        uint64_t v2 = 1;
      }
      else
      {
        uint64_t v2 = 0;
      }
      goto LABEL_45;
    }
  }
  return v2;
}

uint64_t iap2_mediaLibrary_libraryStateUpdateHandler(uint64_t result, uint64_t a2)
{
  if (result)
  {
    CFArrayRef v3 = (uint64_t *)result;
    BOOL result = 0;
    if (a2)
    {
      uint64_t v4 = v3[1];
      if (v4)
      {
        if (*(_DWORD *)a2 != 1) {
          return 0;
        }
        CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(a2 + 8), 0x8000100u);
        BOOL result = _iap2_mediaLibrary_findMediaLibraryForUID((uint64_t)v3, CStringPtr);
        if (!result) {
          return result;
        }
        if (!*(unsigned char *)result) {
          return 0;
        }
        if (gLogObjects && gNumLogObjects >= 31)
        {
          CFStringRef v6 = *(NSObject **)(gLogObjects + 240);
        }
        else
        {
          CFStringRef v6 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          uint64_t v7 = *(void *)(a2 + 8);
          int v8 = *(_DWORD *)(a2 + 16);
          int v9 = *(unsigned __int8 *)(a2 + 20);
          int v19 = 138413058;
          uint64_t v20 = v4;
          __int16 v21 = 2112;
          uint64_t v22 = v7;
          __int16 v23 = 1024;
          int v24 = v8;
          __int16 v25 = 1024;
          int v26 = v9;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "iap2_mediaLibrary_libraryStateUpdateHandler %@ libraryUID=%@ statetype=%d enabled=%d", (uint8_t *)&v19, 0x22u);
        }
        uint64_t v10 = iAP2MsgInit((uint64_t)(v3 + 15), 19460, v3[24], 0xFFFF, 0, 0);
        iAP2MsgAddCFStringParam(v10, 0, 0, *(CFStringRef *)(a2 + 8));
        int v11 = *(_DWORD *)(a2 + 16);
        if (v11 == 1)
        {
          char v12 = *(unsigned char *)(a2 + 20);
          uint64_t v13 = v10;
          __int16 v14 = 9;
        }
        else
        {
          if (v11)
          {
            if (gLogObjects && gNumLogObjects >= 31)
            {
              uint64_t v15 = *(NSObject **)(gLogObjects + 240);
            }
            else
            {
              uint64_t v15 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              uint64_t v16 = *(void *)(a2 + 8);
              int v17 = *(_DWORD *)(a2 + 16);
              int v18 = *(unsigned __int8 *)(a2 + 20);
              int v19 = 138413058;
              uint64_t v20 = v4;
              __int16 v21 = 2112;
              uint64_t v22 = v16;
              __int16 v23 = 1024;
              int v24 = v17;
              __int16 v25 = 1024;
              int v26 = v18;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "iap2_mediaLibrary_libraryStateUpdateHandler %@ libraryUID=%@ INVALID statetype=%d enabled=%d", (uint8_t *)&v19, 0x22u);
            }
            goto LABEL_19;
          }
          char v12 = *(unsigned char *)(a2 + 20);
          uint64_t v13 = v10;
          __int16 v14 = 8;
        }
        iAP2MsgAddU8Param(v13, 0, v14, v12);
LABEL_19:
        iap2_sessionControl_sendOutgoingMessage(v3, v10);
        platform_mediaLibrary_deleteParams((void *)a2);
        return 1;
      }
    }
  }
  return result;
}

uint64_t iap2_mediaLibrary_updateHandler(uint64_t result, _DWORD *a2)
{
  if (result)
  {
    uint64_t v2 = (uint64_t)a2;
    uint64_t v3 = result;
    BOOL result = 0;
    if (a2)
    {
      CFStringRef v189 = *(const __CFString **)(v3 + 8);
      if (v189)
      {
        if (*a2 != 2) {
          return 0;
        }
        uint64_t Feature = iap2_feature_getFeature(v3, 0xDu);
        CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(v2 + 8), 0x8000100u);
        uint64_t MediaLibraryForUID = _iap2_mediaLibrary_findMediaLibraryForUID(v3, CStringPtr);
        BOOL result = 0;
        v192 = (_DWORD *)Feature;
        if (Feature && MediaLibraryForUID)
        {
          if (*(unsigned char *)MediaLibraryForUID)
          {
            CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v2 + 24));
            uint64_t v7 = (int *)&unk_100239000;
            if (gLogObjects && gNumLogObjects >= 31)
            {
              int v8 = *(NSObject **)(gLogObjects + 240);
            }
            else
            {
              int v8 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            v190 = (uint64_t *)v3;
            if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
            {
              uint64_t v9 = *(void *)(v2 + 8);
              int v10 = *(unsigned __int8 *)(v2 + 16);
              if (*(void *)(v2 + 24)) {
                int v11 = ".";
              }
              else {
                int v11 = "nil ";
              }
              *(_DWORD *)buf = 138413314;
              *(void *)&uint8_t buf[4] = v189;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&uint8_t buf[14] = v9;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&uint8_t buf[24] = v10;
              *(_WORD *)&buf[28] = 2080;
              *(void *)&buf[30] = v11;
              *(_WORD *)&buf[38] = 2048;
              *(void *)&buf[40] = Count;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "iap2_mediaLibrary_updateHandler %@ libraryUID=%@ startFull=%d data(%scount=%ld)", buf, 0x30u);
            }
            uint64_t v203 = *(void *)(MediaLibraryForUID + 152);
            unsigned __int8 v205 = 0;
            int v12 = *(unsigned __int8 *)(v2 + 16);
            int v199 = *(_DWORD *)(MediaLibraryForUID + 192);
            unsigned int MaxSendPayloadSizeWithOverride = iap2_endpoint_getMaxSendPayloadSizeWithOverride((uint64_t)v190);
            uint64_t v195 = MediaLibraryForUID;
            __int16 v14 = &unk_100239000;
            unsigned int v188 = MaxSendPayloadSizeWithOverride;
            unsigned int v186 = MaxSendPayloadSizeWithOverride >> 1;
            BOOL v198 = v12 != 0;
            if (Count >= 1)
            {
              uint64_t v15 = MediaLibraryForUID;
              CFIndex v16 = 0;
              BOOL v193 = 0;
              uint64_t v17 = 0;
              LOBYTE(MediaLibraryForUID) = 0;
              unsigned int v196 = 0;
              CFStringRef v18 = 0;
              int v185 = (unsigned __int16)v15;
              cStr = (char *)(v15 + 160);
              unsigned int v187 = (MaxSendPayloadSizeWithOverride >> 1) + (MaxSendPayloadSizeWithOverride >> 2);
              LOBYTE(v202) = v12 != 0;
              while (1)
              {
                uint64_t v200 = v17;
                CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 24), v16);
                uint64_t v20 = v14[49];
                int v21 = v7[100];
                CFStringRef v22 = v18;
                if (v20) {
                  BOOL v23 = v21 < 31;
                }
                else {
                  BOOL v23 = 1;
                }
                if (v23)
                {
                  int v24 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134218240;
                    *(void *)&uint8_t buf[4] = v20;
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&uint8_t buf[14] = v21;
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  }
                }
                else
                {
                  int v24 = *(NSObject **)(v20 + 240);
                }
                __int16 v25 = v7;
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v42 = *(void *)(v2 + 8);
                  *(_DWORD *)buf = 138413314;
                  *(void *)&uint8_t buf[4] = v189;
                  *(_WORD *)&unsigned char buf[12] = 2112;
                  *(void *)&uint8_t buf[14] = v42;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&uint8_t buf[24] = v200;
                  *(_WORD *)&buf[28] = 2048;
                  *(void *)&buf[30] = Count;
                  *(_WORD *)&buf[38] = 2112;
                  *(void *)&buf[40] = ValueAtIndex;
                  _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "iap2_mediaLibrary_updateHandler %@ libraryUID=%@, uint64_t i = %d / %ld, entry=%@", buf, 0x30u);
                }
                uint64_t v26 = v2;
                CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUpdateTypeKey");
                CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUpdateProgressKey");
                CFStringRef cf = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUpdateRevisionKey");
                uint64_t v29 = v14[49];
                int v30 = v25[100];
                if (v29 && v30 >= 31)
                {
                  __int16 v31 = *(NSObject **)(v29 + 240);
                }
                else
                {
                  __int16 v31 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134218240;
                    *(void *)&uint8_t buf[4] = v29;
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&uint8_t buf[14] = v30;
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  }
                }
                uint64_t v2 = v26;
                if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v43 = *(void *)(v26 + 8);
                  *(_DWORD *)buf = 138413570;
                  *(void *)&uint8_t buf[4] = v189;
                  *(_WORD *)&unsigned char buf[12] = 2112;
                  *(void *)&uint8_t buf[14] = v43;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&uint8_t buf[24] = v200;
                  *(_WORD *)&buf[28] = 2112;
                  *(void *)&buf[30] = Value;
                  *(_WORD *)&buf[38] = 2112;
                  *(void *)&buf[40] = v28;
                  LOWORD(v210) = 2112;
                  *(void *)((char *)&v210 + 2) = cf;
                  _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "iap2_mediaLibrary_updateHandler %@ libraryUID=%@ update[%d]=(type=%@ progress=%@ revision=%@)", buf, 0x3Au);
                }
                unsigned __int8 valuePtr = -86;
                CFNumberGetValue(Value, kCFNumberSInt8Type, &valuePtr);
                uint64_t v7 = v25;
                if (v28) {
                  CFNumberGetValue(v28, kCFNumberSInt8Type, &v205);
                }
                __int16 v14 = &unk_100239000;
                if (v22) {
                  CFRelease(v22);
                }
                CFStringRef v18 = (const __CFString *)CFRetain(cf);
                unsigned int v32 = valuePtr - 3;
                int v202 = v202 & (v32 < 2);
                if (v202 == 1)
                {
                  uint64_t v33 = gLogObjects;
                  int v34 = v7[100];
                  if (gLogObjects && v34 >= 31)
                  {
                    size_t v35 = *(NSObject **)(gLogObjects + 240);
                  }
                  else
                  {
                    size_t v35 = &_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 134218240;
                      *(void *)&uint8_t buf[4] = v33;
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&uint8_t buf[14] = v34;
                      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                    }
                  }
                  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v57 = *(void *)(v2 + 8);
                    *(_DWORD *)buf = 138413058;
                    *(void *)&uint8_t buf[4] = v189;
                    *(_WORD *)&unsigned char buf[12] = 2112;
                    *(void *)&uint8_t buf[14] = v57;
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&uint8_t buf[24] = 1;
                    *(_WORD *)&buf[28] = 1024;
                    *(_DWORD *)&buf[30] = valuePtr;
                    _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "iap2_mediaLibrary_updateHandler %@ libraryUID=%@ bFullUpdateWaitForNonDelete=%d type=%d, skip deletes", buf, 0x22u);
                  }
                  ++v196;
                  if (MediaLibraryForUID)
                  {
                    int v38 = v199;
                    LODWORD(MediaLibraryForUID) = v198;
                    uint64_t v17 = v200;
                    goto LABEL_258;
                  }
                  LOBYTE(MediaLibraryForUID) = 0;
                  uint64_t v17 = (v200 + 1);
                  int v202 = 1;
                }
                else
                {
                  if (valuePtr - 1 < 2)
                  {
                    int v37 = 2;
                    uint64_t MediaLibraryForUID = v195;
                    int v36 = v199;
                  }
                  else
                  {
                    uint64_t MediaLibraryForUID = v195;
                    int v36 = v199;
                    if (v32 >= 2)
                    {
                      int v37 = v199;
                      if (valuePtr)
                      {
                        uint64_t v39 = gLogObjects;
                        int v40 = v7[100];
                        if (gLogObjects && v40 >= 31)
                        {
                          BOOL v41 = *(NSObject **)(gLogObjects + 240);
                        }
                        else
                        {
                          BOOL v41 = &_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)&uint8_t buf[4] = v39;
                            *(_WORD *)&unsigned char buf[12] = 1024;
                            *(_DWORD *)&uint8_t buf[14] = v40;
                            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                          }
                        }
                        BOOL v44 = os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
                        int v36 = v199;
                        int v37 = v199;
                        if (v44)
                        {
                          *(_DWORD *)buf = 67109120;
                          *(_DWORD *)&uint8_t buf[4] = valuePtr;
                          _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Invalid media library update type: %d\n", buf, 8u);
                          int v36 = v199;
                          int v37 = v199;
                        }
                      }
                    }
                    else
                    {
                      int v37 = 1;
                    }
                  }
                  if (v36) {
                    BOOL v45 = v36 == v37;
                  }
                  else {
                    BOOL v45 = 1;
                  }
                  int v46 = !v45;
                  int v199 = v37;
                  *(_DWORD *)(MediaLibraryForUID + 192) = v37;
                  if (v45)
                  {
                    if (!v203)
                    {
                      BOOL v48 = malloc_type_malloc(0x20uLL, 0x106004082FC22AAuLL);
                      void *v48 = CFStringCreateCopy(kCFAllocatorDefault, v189);
                      v48[1] = CFRetain(*(CFTypeRef *)(v2 + 8));
                      v48[2] = CFRetain(cf);
                      *((_DWORD *)v48 + 6) = 0;
                      *((unsigned char *)v48 + 28) = 0;
                      *(_DWORD *)(MediaLibraryForUID + 196) = 0;
                      uint64_t v49 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
                      int v50 = malloc_type_malloc(0xFFFFuLL, 0xCFFF38EFuLL);
                      uint64_t v203 = iAP2MsgInit((uint64_t)v49, 19460, (uint64_t)v50, 0xFFFF, (uint64_t)_iAP2MediaLibraryMsgCleanupCB, (uint64_t)v48);
                      if ((void *)v203 == v49)
                      {
                        *(void *)(MediaLibraryForUID + 152) = v49;
                        uint64_t v54 = gLogObjects;
                        int v55 = v7[100];
                        if (gLogObjects && v55 >= 31)
                        {
                          int v56 = *(NSObject **)(gLogObjects + 240);
                        }
                        else
                        {
                          int v56 = &_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)&uint8_t buf[4] = v54;
                            *(_WORD *)&unsigned char buf[12] = 1024;
                            *(_DWORD *)&uint8_t buf[14] = v55;
                            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                          }
                        }
                        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v158 = *(void *)(v2 + 8);
                          int MsgID = iAP2MsgGetMsgID((uint64_t)v49);
                          long long v160 = (uint64_t *)v49[6];
                          uint64_t v161 = *v160;
                          uint64_t v162 = v160[1];
                          uint64_t v163 = v160[2];
                          int v164 = *((_DWORD *)v160 + 6);
                          LODWORD(v160) = *((unsigned __int8 *)v160 + 28);
                          *(_DWORD *)buf = 138414082;
                          *(void *)&uint8_t buf[4] = v189;
                          *(_WORD *)&unsigned char buf[12] = 2112;
                          *(void *)&uint8_t buf[14] = v158;
                          *(_WORD *)&buf[22] = 1024;
                          *(_DWORD *)&uint8_t buf[24] = MsgID;
                          *(_WORD *)&buf[28] = 2112;
                          *(void *)&buf[30] = v161;
                          *(_WORD *)&buf[38] = 2112;
                          *(void *)&buf[40] = v162;
                          LOWORD(v210) = 2112;
                          *(void *)((char *)&v210 + 2) = v163;
                          WORD5(v210) = 1024;
                          HIDWORD(v210) = v164;
                          LOWORD(v211) = 1024;
                          *(_DWORD *)((char *)&v211 + 2) = v160;
                          _os_log_debug_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "init outMsg: %@ libraryUID=%@ message(%04xh): context=(accessoryUID=%@ libraryUID=%@ lastRevision=%@ updatesInMsg=%d confirmed=%d)", buf, 0x46u);
                        }
                      }
                      else
                      {
                        uint64_t v51 = gLogObjects;
                        int v52 = v7[100];
                        if (gLogObjects && v52 >= 31)
                        {
                          int v53 = *(NSObject **)(gLogObjects + 240);
                        }
                        else
                        {
                          int v53 = &_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)&uint8_t buf[4] = v51;
                            *(_WORD *)&unsigned char buf[12] = 1024;
                            *(_DWORD *)&uint8_t buf[14] = v52;
                            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                          }
                        }
                        uint64_t MediaLibraryForUID = v195;
                        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                        {
                          uint64_t v58 = *(void *)(v2 + 8);
                          int v59 = iAP2MsgGetMsgID((uint64_t)v49);
                          uint64_t v60 = *v48;
                          uint64_t v61 = v48[1];
                          uint64_t v62 = v48[2];
                          int v63 = *((_DWORD *)v48 + 6);
                          int v64 = *((unsigned __int8 *)v48 + 28);
                          *(_DWORD *)buf = 138414082;
                          *(void *)&uint8_t buf[4] = v189;
                          *(_WORD *)&unsigned char buf[12] = 2112;
                          *(void *)&uint8_t buf[14] = v58;
                          *(_WORD *)&buf[22] = 1024;
                          *(_DWORD *)&uint8_t buf[24] = v59;
                          *(_WORD *)&buf[28] = 2112;
                          *(void *)&buf[30] = v60;
                          *(_WORD *)&buf[38] = 2112;
                          *(void *)&buf[40] = v61;
                          LOWORD(v210) = 2112;
                          *(void *)((char *)&v210 + 2) = v62;
                          WORD5(v210) = 1024;
                          HIDWORD(v210) = v63;
                          LOWORD(v211) = 1024;
                          *(_DWORD *)((char *)&v211 + 2) = v64;
                          _os_log_error_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "ERROR: Failed init outMsg: %@ libraryUID=%@ message(%04xh): context=(accessoryUID=%@ libraryUID=%@ lastRevision=%@ updatesInMsg=%d confirmed=%d)", buf, 0x46u);
                        }
                      }
                      iAP2MsgSetCallbackOnSend(v203, (uint64_t)__MsgSentOutCB);
                      iAP2MsgAddCFStringParam(v203, 0, 0, *(CFStringRef *)(v2 + 8));
                      __int16 v14 = &unk_100239000;
                    }
                    switch(valuePtr)
                    {
                      case 1u:
                        unsigned int v65 = CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUpdateItemDictionary");
                        uint64_t v66 = gLogObjects;
                        int v67 = v7[100];
                        if (gLogObjects && v67 >= 31)
                        {
                          uint64_t v68 = *(NSObject **)(gLogObjects + 240);
                          int v47 = v46;
                        }
                        else
                        {
                          uint64_t v68 = &_os_log_default;
                          int v47 = v46;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)&uint8_t buf[4] = v66;
                            *(_WORD *)&unsigned char buf[12] = 1024;
                            *(_DWORD *)&uint8_t buf[14] = v67;
                            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                          }
                        }
                        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 67109888;
                          *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v190;
                          *(_WORD *)&buf[8] = 1024;
                          *(_DWORD *)&buf[10] = v185;
                          *(_WORD *)&uint8_t buf[14] = 1024;
                          *(_DWORD *)&uint8_t buf[16] = (unsigned __int16)v203;
                          *(_WORD *)&unsigned char buf[20] = 1024;
                          *(_DWORD *)&buf[22] = (unsigned __int16)v65;
                          _os_log_debug_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "_iap2_mediaLibrary_mediaItemUpdateHandler: endpoint=%hxh mediaLibraryInfo=%hxh pOutMsg=%hxh data=%hxh", buf, 0x1Au);
                        }
                        char v81 = 0;
                        __int16 v14 = &unk_100239000;
                        if (!v203 || !v65) {
                          goto LABEL_222;
                        }
                        if (!*(unsigned char *)MediaLibraryForUID) {
                          goto LABEL_221;
                        }
                        CFStringRef v82 = v18;
                        *(void *)&long long v83 = 0xAAAAAAAAAAAAAAAALL;
                        *((void *)&v83 + 1) = 0xAAAAAAAAAAAAAAAALL;
                        long long v214 = v83;
                        long long v212 = v83;
                        long long v213 = v83;
                        long long v210 = v83;
                        long long v211 = v83;
                        *(_OWORD *)&uint8_t buf[16] = v83;
                        *(_OWORD *)&unsigned char buf[32] = v83;
                        *(_OWORD *)buf = v83;
                        char v84 = iAP2MsgAddGroupParam(v203, 2);
                        platform_mediaLibrary_getStructUpdateItem(v2, (uint64_t)v65, (uint64_t)buf);
                        for (uint64_t i = 0; i != 28; ++i)
                        {
                          if (((unint64_t)*(unsigned int *)buf >> i))
                          {
                            switch((int)i)
                            {
                              case 0:
                                unint64_t v86 = *(void *)&buf[8];
                                uint64_t v87 = v203;
                                uint64_t v88 = (uint64_t)v84;
                                __int16 v89 = 0;
                                goto LABEL_131;
                              case 1:
                                CFStringRef v90 = *(char **)&buf[16];
                                uint64_t v91 = v203;
                                uint64_t v92 = (uint64_t)v84;
                                __int16 v93 = 1;
                                goto LABEL_133;
                              case 2:
                                char v94 = buf[24];
                                uint64_t v95 = v203;
                                uint64_t v96 = (uint64_t)v84;
                                __int16 v97 = 2;
                                goto LABEL_136;
                              case 3:
                                char v94 = buf[25];
                                uint64_t v95 = v203;
                                uint64_t v96 = (uint64_t)v84;
                                __int16 v97 = 3;
                                goto LABEL_136;
                              case 4:
                                iAP2MsgAddU32Param(v203, (uint64_t)v84, 4, *(unsigned int *)&buf[28]);
                                continue;
                              case 5:
                                unint64_t v86 = *(void *)&buf[32];
                                uint64_t v87 = v203;
                                uint64_t v88 = (uint64_t)v84;
                                __int16 v89 = 5;
                                goto LABEL_131;
                              case 6:
                                CFStringRef v90 = *(char **)&buf[40];
                                uint64_t v91 = v203;
                                uint64_t v92 = (uint64_t)v84;
                                __int16 v93 = 6;
                                goto LABEL_133;
                              case 7:
                                unsigned int v98 = (unsigned __int16)v210;
                                uint64_t v99 = v203;
                                uint64_t v100 = (uint64_t)v84;
                                __int16 v101 = 7;
                                goto LABEL_138;
                              case 8:
                                unsigned int v98 = WORD1(v210);
                                uint64_t v99 = v203;
                                uint64_t v100 = (uint64_t)v84;
                                __int16 v101 = 8;
                                goto LABEL_138;
                              case 9:
                                unsigned int v98 = WORD2(v210);
                                uint64_t v99 = v203;
                                uint64_t v100 = (uint64_t)v84;
                                __int16 v101 = 9;
                                goto LABEL_138;
                              case 10:
                                unsigned int v98 = WORD3(v210);
                                uint64_t v99 = v203;
                                uint64_t v100 = (uint64_t)v84;
                                __int16 v101 = 10;
                                goto LABEL_138;
                              case 11:
                                unint64_t v86 = *((void *)&v210 + 1);
                                uint64_t v87 = v203;
                                uint64_t v88 = (uint64_t)v84;
                                __int16 v89 = 11;
                                goto LABEL_131;
                              case 12:
                                CFStringRef v90 = (char *)v211;
                                uint64_t v91 = v203;
                                uint64_t v92 = (uint64_t)v84;
                                __int16 v93 = 12;
                                goto LABEL_133;
                              case 13:
                                unint64_t v86 = *((void *)&v211 + 1);
                                uint64_t v87 = v203;
                                uint64_t v88 = (uint64_t)v84;
                                __int16 v89 = 13;
                                goto LABEL_131;
                              case 14:
                                CFStringRef v90 = (char *)v212;
                                uint64_t v91 = v203;
                                uint64_t v92 = (uint64_t)v84;
                                __int16 v93 = 14;
                                goto LABEL_133;
                              case 15:
                                unint64_t v86 = *((void *)&v212 + 1);
                                uint64_t v87 = v203;
                                uint64_t v88 = (uint64_t)v84;
                                __int16 v89 = 15;
                                goto LABEL_131;
                              case 16:
                                CFStringRef v90 = (char *)v213;
                                uint64_t v91 = v203;
                                uint64_t v92 = (uint64_t)v84;
                                __int16 v93 = 16;
                                goto LABEL_133;
                              case 17:
                                unint64_t v86 = *((void *)&v213 + 1);
                                uint64_t v87 = v203;
                                uint64_t v88 = (uint64_t)v84;
                                __int16 v89 = 17;
LABEL_131:
                                iAP2MsgAddU64Param(v87, v88, v89, v86);
                                continue;
                              case 18:
                                CFStringRef v90 = (char *)v214;
                                uint64_t v91 = v203;
                                uint64_t v92 = (uint64_t)v84;
                                __int16 v93 = 18;
LABEL_133:
                                iAP2MsgAddStringParam(v91, v92, v93, v90);
                                continue;
                              case 19:
                                char v94 = BYTE8(v214);
                                uint64_t v95 = v203;
                                uint64_t v96 = (uint64_t)v84;
                                __int16 v97 = 19;
                                goto LABEL_136;
                              case 25:
                                char v94 = BYTE9(v214);
                                uint64_t v95 = v203;
                                uint64_t v96 = (uint64_t)v84;
                                __int16 v97 = 25;
LABEL_136:
                                iAP2MsgAddU8Param(v95, v96, v97, v94);
                                break;
                              case 27:
                                unsigned int v98 = WORD5(v214);
                                uint64_t v99 = v203;
                                uint64_t v100 = (uint64_t)v84;
                                __int16 v101 = 27;
LABEL_138:
                                iAP2MsgAddU16Param(v99, v100, v101, v98);
                                break;
                              default:
                                continue;
                            }
                          }
                        }
                        char v81 = 1;
                        CFStringRef v18 = v82;
                        goto LABEL_222;
                      case 2u:
                        BOOL v72 = CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUpdatePlaylistDictionary");
                        uint64_t v73 = gLogObjects;
                        int v74 = v7[100];
                        if (gLogObjects && v74 >= 31)
                        {
                          unsigned int v75 = *(NSObject **)(gLogObjects + 240);
                          int v47 = v46;
                        }
                        else
                        {
                          unsigned int v75 = &_os_log_default;
                          int v47 = v46;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)&uint8_t buf[4] = v73;
                            *(_WORD *)&unsigned char buf[12] = 1024;
                            *(_DWORD *)&uint8_t buf[14] = v74;
                            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                          }
                        }
                        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 67109888;
                          *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v190;
                          *(_WORD *)&buf[8] = 1024;
                          *(_DWORD *)&buf[10] = v185;
                          *(_WORD *)&uint8_t buf[14] = 1024;
                          *(_DWORD *)&uint8_t buf[16] = (unsigned __int16)v203;
                          *(_WORD *)&unsigned char buf[20] = 1024;
                          *(_DWORD *)&buf[22] = (unsigned __int16)v72;
                          _os_log_debug_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "_iap2_mediaLibrary_playlistUpdateHandler: endpoint=%hxh mediaLibraryInfo=%hxh pOutMsg=%hxh data=%hxh", buf, 0x1Au);
                        }
                        uint64_t v102 = iap2_feature_getFeature((uint64_t)v190, 0xDu);
                        char v81 = 0;
                        __int16 v14 = &unk_100239000;
                        if (!v72 || !v203 || !v102) {
                          goto LABEL_222;
                        }
                        uint64_t v103 = v190[4];
                        if (v103 && (uint64_t v104 = *(unsigned __int8 **)(v103 + 24)) != 0 && *(unsigned char *)MediaLibraryForUID)
                        {
                          *(void *)&unsigned char buf[32] = 0xAAAAAAAAAAAAAAAALL;
                          *(void *)&long long v105 = 0xAAAAAAAAAAAAAAAALL;
                          *((void *)&v105 + 1) = 0xAAAAAAAAAAAAAAAALL;
                          *(_OWORD *)buf = v105;
                          *(_OWORD *)&uint8_t buf[16] = v105;
                          unsigned int v106 = iAP2MsgAddGroupParam(v203, 3);
                          platform_mediaLibrary_getStructUpdatePlaylist(v2, (uint64_t)v72, (uint64_t)buf);
                          uint64_t v107 = 0;
                          v194 = v104;
                          do
                          {
                            if (((unint64_t)*(unsigned int *)buf >> v107))
                            {
                              char v108 = buf[33];
                              switch((int)v107)
                              {
                                case 0:
                                  unint64_t v109 = *(void *)&buf[8];
                                  uint64_t v110 = v203;
                                  uint64_t v111 = (uint64_t)v106;
                                  __int16 v112 = 0;
                                  goto LABEL_161;
                                case 1:
                                  iAP2MsgAddStringParam(v203, (uint64_t)v106, 1, *(char **)&buf[16]);
                                  break;
                                case 2:
                                  unint64_t v109 = *(void *)&buf[24];
                                  uint64_t v110 = v203;
                                  uint64_t v111 = (uint64_t)v106;
                                  __int16 v112 = 2;
LABEL_161:
                                  iAP2MsgAddU64Param(v110, v111, v112, v109);
                                  break;
                                case 3:
                                  char v108 = buf[32];
                                  uint64_t v113 = v203;
                                  uint64_t v114 = (uint64_t)v106;
                                  __int16 v115 = 3;
                                  goto LABEL_171;
                                case 4:
                                  uint64_t v113 = v203;
                                  uint64_t v114 = (uint64_t)v106;
                                  __int16 v115 = 4;
                                  goto LABEL_171;
                                case 5:
                                  if ((buf[0] & 0x10) != 0 && buf[33])
                                  {
                                    uint64_t v116 = v14[49];
                                    int v117 = v7[100];
                                    if (v116 && v117 >= 31)
                                    {
                                      unsigned int v118 = *(NSObject **)(v116 + 240);
                                    }
                                    else
                                    {
                                      unsigned int v118 = &_os_log_default;
                                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                      {
                                        int v215 = 134218240;
                                        *(void *)v216 = v116;
                                        *(_WORD *)&v216[8] = 1024;
                                        *(_DWORD *)&v216[10] = v117;
                                        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v215, 0x12u);
                                      }
                                    }
                                    __int16 v14 = (void *)&unk_100239000;
                                    uint64_t v104 = v194;
                                    if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
                                    {
                                      LOWORD(v215) = 0;
                                      uint64_t v124 = v118;
                                      os_log_type_t v125 = OS_LOG_TYPE_DEFAULT;
                                      uint64_t v126 = "_iap2_mediaLibrary_playlistUpdateHandler: Playlist is a folder, no need to send content.";
                                      uint32_t v127 = 2;
LABEL_200:
                                      _os_log_impl((void *)&_mh_execute_header, v124, v125, v126, (uint8_t *)&v215, v127);
                                      break;
                                    }
                                  }
                                  else if (buf[34] == 2)
                                  {
                                    int SessionForService = iAP2LinkGetSessionForService((uint64_t)v104, 1);
                                    SessionInfo = iAP2LinkGetSessionInfo(v104, SessionForService);
                                    if (SessionInfo)
                                    {
                                      if (SessionInfo[2] >= 2u && buf[34] != 1) {
                                        iAP2MsgAddVoidParam(v203, (uint64_t)v106, 7);
                                      }
                                    }
                                  }
                                  else if (buf[34] == 1)
                                  {
                                    int v119 = iAP2LinkGetSessionForService((uint64_t)v104, 1);
                                    unsigned __int8 v208 = 0;
                                    if (iAP2FileTransferAllocateBufferID((uint64_t)v104, v119, &v208))
                                    {
                                      int v120 = malloc_type_malloc(0x38uLL, 0x102004091BE1796uLL);
                                      v120[8] = v208;
                                      *(void *)int v120 = MediaLibraryForUID;
                                      *((void *)v120 + 2) = *(void *)&buf[8];
                                      long long v184 = v120;
                                      CFStringGetCString(cf, v120 + 24, 32, 0x8000100u);
                                      long long v183 = malloc_type_malloc(0x130uLL, 0x10B0040038BA21DuLL);
                                      iAP2FileTransferCreate(v104, v119, v208, 0, 0, 0, (uint64_t)v183);
                                      uint64_t v121 = v14[49];
                                      int v122 = v7[100];
                                      if (v121 && v122 >= 31)
                                      {
                                        uint64_t v123 = *(NSObject **)(v121 + 240);
                                      }
                                      else
                                      {
                                        uint64_t v123 = &_os_log_default;
                                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                        {
                                          int v215 = 134218240;
                                          *(void *)v216 = v121;
                                          *(_WORD *)&v216[8] = 1024;
                                          *(_DWORD *)&v216[10] = v122;
                                          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v215, 0x12u);
                                        }
                                      }
                                      if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
                                      {
                                        int v215 = 67109632;
                                        *(_DWORD *)v216 = 5;
                                        *(_WORD *)&v216[4] = 2048;
                                        *(void *)&v216[6] = *(void *)&buf[8];
                                        __int16 v217 = 1024;
                                        int v218 = v208;
                                        _os_log_debug_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEBUG, "_iap2_mediaLibrary_playlistUpdateHandler: i=%d, iap2_sessionFileTransfer_addTransferForFeature, persistentID=%llu bufferID=%u", (uint8_t *)&v215, 0x18u);
                                      }
                                      __int16 v14 = &unk_100239000;
                                      if (iap2_sessionFileTransfer_addTransferForFeature((uint64_t)v190, 13, (uint64_t)v183, (uint64_t)v184))
                                      {
                                        iAP2MsgAddU8Param(v203, (uint64_t)v106, 5, v208);
                                        uint64_t v104 = v194;
                                      }
                                      else
                                      {
                                        uint64_t v137 = gLogObjects;
                                        int v138 = v7[100];
                                        if (gLogObjects && v138 >= 31)
                                        {
                                          CFNumberRef v139 = *(NSObject **)(gLogObjects + 240);
                                        }
                                        else
                                        {
                                          CFNumberRef v139 = &_os_log_default;
                                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                          {
                                            int v215 = 134218240;
                                            *(void *)v216 = v137;
                                            *(_WORD *)&v216[8] = 1024;
                                            *(_DWORD *)&v216[10] = v138;
                                            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v215, 0x12u);
                                          }
                                        }
                                        if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
                                        {
                                          int v215 = 67109376;
                                          *(_DWORD *)v216 = v208;
                                          *(_WORD *)&v216[4] = 1024;
                                          *(_DWORD *)&v216[6] = v208;
                                          _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEFAULT, "_iap2_mediaLibrary_playlistUpdateHandler: failed to add fileXfer for bufferID %u(%x) !!!!!!!!", (uint8_t *)&v215, 0xEu);
                                        }
                                        __int16 v14 = (void *)&unk_100239000;
                                        uint64_t v104 = v194;
                                        if (v183)
                                        {
                                          iAP2FileTransferRelease((uint64_t)v183);
                                          free(v183);
                                        }
                                        free(v184);
                                      }
                                    }
                                    else
                                    {
                                      uint64_t v134 = v14[49];
                                      int v135 = v7[100];
                                      if (v134 && v135 >= 31)
                                      {
                                        uint64_t v136 = *(NSObject **)(v134 + 240);
                                      }
                                      else
                                      {
                                        uint64_t v136 = &_os_log_default;
                                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                        {
                                          int v215 = 134218240;
                                          *(void *)v216 = v134;
                                          *(_WORD *)&v216[8] = 1024;
                                          *(_DWORD *)&v216[10] = v135;
                                          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v215, 0x12u);
                                        }
                                      }
                                      __int16 v14 = (void *)&unk_100239000;
                                      uint64_t v104 = v194;
                                      if (os_log_type_enabled(v136, OS_LOG_TYPE_FAULT)) {
                                        iap2_mediaLibrary_updateHandler_cold_3(&v206, v207, v136);
                                      }
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v131 = v14[49];
                                    int v132 = v7[100];
                                    if (v131 && v132 >= 31)
                                    {
                                      uint64_t v133 = *(NSObject **)(v131 + 240);
                                    }
                                    else
                                    {
                                      uint64_t v133 = &_os_log_default;
                                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                      {
                                        int v215 = 134218240;
                                        *(void *)v216 = v131;
                                        *(_WORD *)&v216[8] = 1024;
                                        *(_DWORD *)&v216[10] = v132;
                                        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v215, 0x12u);
                                      }
                                    }
                                    __int16 v14 = (void *)&unk_100239000;
                                    uint64_t v104 = v194;
                                    if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
                                    {
                                      int v215 = 67109120;
                                      *(_DWORD *)v216 = buf[34];
                                      uint64_t v124 = v133;
                                      os_log_type_t v125 = OS_LOG_TYPE_INFO;
                                      uint64_t v126 = "_iap2_mediaLibrary_playlistUpdateHandler: Invalid content style(%d)!";
                                      uint32_t v127 = 8;
                                      goto LABEL_200;
                                    }
                                  }
                                  break;
                                case 6:
                                  char v108 = buf[35];
                                  uint64_t v113 = v203;
                                  uint64_t v114 = (uint64_t)v106;
                                  __int16 v115 = 6;
                                  goto LABEL_171;
                                case 8:
                                  char v108 = buf[36];
                                  uint64_t v113 = v203;
                                  uint64_t v114 = (uint64_t)v106;
                                  __int16 v115 = 8;
LABEL_171:
                                  iAP2MsgAddU8Param(v113, v114, v115, v108);
                                  break;
                                default:
                                  break;
                              }
                            }
                            ++v107;
                          }
                          while (v107 != 10);
                          char v81 = 1;
                          int v47 = v46;
                        }
                        else
                        {
LABEL_221:
                          char v81 = 0;
                        }
LABEL_222:
                        BOOL v193 = v81;
LABEL_223:
                        ++*(_DWORD *)(MediaLibraryForUID + 196);
                        CFStringGetCString(v18, cStr, 32, 0x8000100u);
                        break;
                      case 3u:
                        *(void *)buf = 0;
                        CFNumberRef v76 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUpdateItemDeletePersistentID");
                        CFNumberGetValue(v76, kCFNumberSInt64Type, buf);
                        unint64_t v77 = *(void *)buf;
                        uint64_t v78 = v203;
                        __int16 v79 = 4;
                        goto LABEL_102;
                      case 4u:
                        *(void *)buf = 0;
                        CFNumberRef v80 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUpdatePlaylistDeletePersistentID");
                        CFNumberGetValue(v80, kCFNumberSInt64Type, buf);
                        unint64_t v77 = *(void *)buf;
                        uint64_t v78 = v203;
                        __int16 v79 = 5;
LABEL_102:
                        BOOL v193 = iAP2MsgAddI64Param(v78, 0, v79, v77) != 0;
                        int v47 = v46;
                        goto LABEL_223;
                      default:
                        uint64_t v69 = gLogObjects;
                        int v70 = v7[100];
                        if (gLogObjects && v70 >= 31)
                        {
                          int v71 = *(NSObject **)(gLogObjects + 240);
                          int v47 = v46;
                        }
                        else
                        {
                          int v71 = &_os_log_default;
                          int v47 = v46;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)&uint8_t buf[4] = v69;
                            *(_WORD *)&unsigned char buf[12] = 1024;
                            *(_DWORD *)&uint8_t buf[14] = v70;
                            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                          }
                        }
                        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 67109120;
                          *(_DWORD *)&uint8_t buf[4] = valuePtr;
                          _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "Invalid media library update type: %d\n", buf, 8u);
                        }
                        goto LABEL_223;
                    }
                  }
                  else
                  {
                    if (v18) {
                      CFRelease(v18);
                    }
                    CFStringRef v18 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
                    int v47 = v46;
                  }
                  uint64_t v140 = v14[49];
                  int v141 = v7[100];
                  if (v140 && v141 >= 31)
                  {
                    uint64_t v142 = *(NSObject **)(v140 + 240);
                  }
                  else
                  {
                    uint64_t v142 = &_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 134218240;
                      *(void *)&uint8_t buf[4] = v140;
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&uint8_t buf[14] = v141;
                      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                    }
                  }
                  if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v153 = *(void *)(v2 + 8);
                    *(_DWORD *)buf = 138413058;
                    *(void *)&uint8_t buf[4] = v189;
                    *(_WORD *)&unsigned char buf[12] = 2112;
                    *(void *)&uint8_t buf[14] = v153;
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&uint8_t buf[24] = valuePtr;
                    *(_WORD *)&buf[28] = 1024;
                    *(_DWORD *)&buf[30] = v193;
                    _os_log_debug_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_DEBUG, "iap2_mediaLibrary_updateHandler %@ libraryUID=%@ type=%d result=%d", buf, 0x22u);
                  }
                  uint64_t v143 = v14[49];
                  int v144 = v7[100];
                  if (v143 && v144 >= 31)
                  {
                    uint64_t v145 = *(NSObject **)(v143 + 240);
                  }
                  else
                  {
                    uint64_t v145 = &_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 134218240;
                      *(void *)&uint8_t buf[4] = v143;
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&uint8_t buf[14] = v144;
                      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                    }
                  }
                  if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
                  {
                    int v154 = *(_DWORD *)(MediaLibraryForUID + 196);
                    int v155 = v192[1];
                    int v156 = v192[2];
                    *(_DWORD *)buf = 67110144;
                    *(_DWORD *)&uint8_t buf[4] = v47;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v154;
                    *(_WORD *)&uint8_t buf[14] = 1024;
                    *(_DWORD *)&uint8_t buf[16] = v155;
                    *(_WORD *)&unsigned char buf[20] = 1024;
                    *(_DWORD *)&buf[22] = v156;
                    *(_WORD *)&buf[26] = 1024;
                    *(_DWORD *)&buf[28] = v198;
                    _os_log_debug_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_DEBUG, "iap2_mediaLibrary_updateHandler addDeleteChanged=%d sendCount=%d window=%d recordsPerMessage=%d bFullUpdate=%d", buf, 0x20u);
                  }
                  uint64_t v146 = v14[49];
                  int v147 = v7[100];
                  if (v146 && v147 >= 31)
                  {
                    CFStringRef v148 = *(NSObject **)(v146 + 240);
                  }
                  else
                  {
                    CFStringRef v148 = &_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 134218240;
                      *(void *)&uint8_t buf[4] = v146;
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&uint8_t buf[14] = v147;
                      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                    }
                  }
                  if (os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
                  {
                    int MsgLen = iAP2MsgGetMsgLen(v203);
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&uint8_t buf[4] = MsgLen;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v188;
                    _os_log_debug_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEBUG, "iap2_mediaLibrary_updateHandler msgLen=%d maxSendPayloadSize=%d", buf, 0xEu);
                  }
                  if (!v203)
                  {
                    uint64_t v203 = 0;
                    if (!v47)
                    {
LABEL_259:
                      LOBYTE(MediaLibraryForUID) = 0;
                      int v202 = 0;
                      uint64_t v17 = (v200 + 1);
                      goto LABEL_260;
                    }
                    LODWORD(MediaLibraryForUID) = v198;
LABEL_257:
                    uint64_t v17 = v200;
                    int v38 = v199;
LABEL_258:
                    BOOL v198 = MediaLibraryForUID;
                    LOBYTE(MediaLibraryForUID) = 1;
                    int v199 = v38;
                    goto LABEL_260;
                  }
                  int v149 = v205;
                  if (v205 > 0x63u) {
                    char v150 = 1;
                  }
                  else {
                    char v150 = v47;
                  }
                  unsigned int v151 = *(_DWORD *)(MediaLibraryForUID + 196);
                  if ((v150 & 1) == 0 && v151 < v192[2])
                  {
                    if (iAP2MsgGetMsgLen(v203) <= v187) {
                      goto LABEL_259;
                    }
                    int v149 = v205;
                    unsigned int v151 = *(_DWORD *)(MediaLibraryForUID + 196);
                  }
                  _iap2_mediaLibrary_sendUpdateMsg(v190, v192, *(void *)(v2 + 8), v203, v18, v198, v149, v151);
                  uint64_t v203 = 0;
                  uint64_t v152 = MediaLibraryForUID;
                  LODWORD(MediaLibraryForUID) = 0;
                  *(void *)(v152 + 152) = 0;
                  *(_DWORD *)(v152 + 196) = 0;
                  BOOL v193 = 1;
                  if (v47) {
                    goto LABEL_257;
                  }
                  uint64_t v17 = (v200 + 1);
                  int v202 = 0;
                  BOOL v198 = 0;
                }
LABEL_260:
                CFIndex v16 = (int)v17;
                if (Count <= (int)v17) {
                  goto LABEL_263;
                }
              }
            }
            CFStringRef v18 = 0;
            unsigned int v196 = 0;
            LOBYTE(MediaLibraryForUID) = 0;
            BOOL v193 = 0;
            int v202 = v12 != 0;
LABEL_263:
            char v165 = (__CFString *)v18;
            uint64_t v166 = v14[49];
            if (v166 && v7[100] >= 31)
            {
              v167 = *(NSObject **)(v166 + 240);
              long long v168 = v190;
            }
            else
            {
              v167 = &_os_log_default;
              long long v168 = v190;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v167, OS_LOG_TYPE_DEBUG))
            {
              int v179 = iAP2MsgGetMsgLen(v203);
              int v180 = *(_DWORD *)(v195 + 196);
              int v181 = v192[1];
              int v182 = v192[2];
              *(_DWORD *)buf = 67110144;
              *(_DWORD *)&uint8_t buf[4] = v179;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v205;
              *(_WORD *)&uint8_t buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = v180;
              *(_WORD *)&unsigned char buf[20] = 1024;
              *(_DWORD *)&buf[22] = v181;
              *(_WORD *)&buf[26] = 1024;
              *(_DWORD *)&buf[28] = v182;
              _os_log_debug_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_DEBUG, "iap2_mediaLibrary_updateHandler msgLen=%d progress=%d sendCount=%d window=%d recordsPerMessage=%d", buf, 0x20u);
            }
            unsigned int v169 = v188;
            if (v203)
            {
              int v170 = v205;
              if (v205 > 0x63u) {
                char v171 = 1;
              }
              else {
                char v171 = MediaLibraryForUID;
              }
              if (v171) {
                goto LABEL_275;
              }
              uint64_t v172 = v195;
              BOOL v173 = v198;
              if (*(_DWORD *)(v195 + 196) >= v192[2])
              {
LABEL_279:
                v174 = v165;
                _iap2_mediaLibrary_sendUpdateMsg(v168, v192, *(void *)(v2 + 8), v203, v165, v173, v170, *(_DWORD *)(v172 + 196));
                *(void *)(v172 + 152) = 0;
                *(_DWORD *)(v172 + 196) = 0;
                char v175 = 1;
                if (!v165) {
                  goto LABEL_281;
                }
                goto LABEL_280;
              }
              if (iAP2MsgGetMsgLen(v203) > v186 + (v169 >> 2))
              {
                int v170 = v205;
LABEL_275:
                uint64_t v172 = v195;
                BOOL v173 = v198;
                goto LABEL_279;
              }
            }
            if (v202)
            {
              if (gLogObjects && v7[100] >= 31)
              {
                v177 = *(NSObject **)(gLogObjects + 240);
              }
              else
              {
                v177 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v177, OS_LOG_TYPE_INFO))
              {
                uint64_t v178 = *(void *)(v2 + 8);
                *(_DWORD *)buf = 138413314;
                *(void *)&uint8_t buf[4] = v189;
                *(_WORD *)&unsigned char buf[12] = 2112;
                *(void *)&uint8_t buf[14] = v178;
                *(_WORD *)&buf[22] = 2112;
                *(void *)&uint8_t buf[24] = v165;
                *(_WORD *)&unsigned char buf[32] = 1024;
                *(_DWORD *)&buf[34] = 1;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v196;
                _os_log_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_INFO, "iap2_mediaLibrary_updateHandler %@ libraryUID=%@ lastRevision=%@, bFullUpdateWaitForNonDelete=%d, call confirmLibraryUpdateAsync, skipDeleteCount=%d", buf, 0x2Cu);
              }
              v174 = v165;
              platform_mediaLibrary_confirmLibraryUpdate((void *)v168[1], *(void **)(v2 + 8), v165, v196);
            }
            else
            {
              v174 = v165;
            }
            char v175 = v193;
            if (!v174)
            {
LABEL_281:
              if (v175)
              {
                platform_mediaLibrary_deleteParams((void *)v2);
                return 1;
              }
              return 0;
            }
LABEL_280:
            char v176 = v175;
            CFRelease(v174);
            char v175 = v176;
            goto LABEL_281;
          }
          return 0;
        }
      }
    }
  }
  return result;
}