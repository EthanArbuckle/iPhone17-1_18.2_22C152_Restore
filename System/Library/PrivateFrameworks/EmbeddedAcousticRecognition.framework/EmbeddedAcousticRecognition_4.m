void sub_1B1CB8300(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1CB831CLL);
}

void sub_1B1CB8318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  a18 = (void **)&a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (a26 < 0) {
    JUMPOUT(0x1B1CB8338);
  }
  JUMPOUT(0x1B1CB833CLL);
}

uint64_t quasar::ContextualData::getIsEnabled(quasar::ContextualData *this)
{
  return *((unsigned __int8 *)this + 312);
}

uint64_t quasar::ContextualData::filterNamedEntity(quasar::ContextualData *this, const quasar::ContextualData::NamedEntity *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 95);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 10);
  }
  if (!v2 || *((double *)a2 + 13) < 0.0) {
    return 1;
  }
  if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)this + 14, (int *)a2 + 24))return 3; {
  uint64_t v6 = *((unsigned __int8 *)a2 + 95);
  }
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *((unsigned __int8 *)a2 + 95);
  }
  else {
    uint64_t v7 = *((void *)a2 + 10);
  }
  uint64_t v8 = *((unsigned __int8 *)this + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)this + 1);
  }
  if (v7 != v8) {
    return 5;
  }
  v10 = (const void **)((char *)a2 + 72);
  if (v9 >= 0) {
    v11 = this;
  }
  else {
    v11 = *(quasar::ContextualData **)this;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, v11, *((void *)a2 + 10))) {
      return 5;
    }
  }
  else if (*((unsigned char *)a2 + 95))
  {
    while (*(unsigned __int8 *)v10 == *(unsigned __int8 *)v11)
    {
      v10 = (const void **)((char *)v10 + 1);
      v11 = (quasar::ContextualData *)((char *)v11 + 1);
      if (!--v6) {
        goto LABEL_24;
      }
    }
    return 5;
  }
LABEL_24:
  if (*((double *)a2 + 13) < *((double *)this + 32)) {
    return 6;
  }
  uint64_t v12 = *((unsigned __int8 *)a2 + 71);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)a2 + 7);
  }
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *((unsigned __int8 *)a2 + 47);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *((void *)a2 + 4);
  }
  if (!v13) {
    return 0;
  }
  unsigned int v22 = 1;
  __p[0] = &v22;
  v14 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>((uint64_t)this + 32, &v22, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 3;
  std::string::basic_string[abi:ne180100]<0>(__p, "Dictation");
  v23 = __p;
  v15 = (char *)a2 + 48;
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v14, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v23)+ 40;
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v16, (unsigned __int8 *)a2 + 48))return 4; {
  __p[0] = (char *)a2 + 48;
  }
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v16, (unsigned __int8 *)a2 + 48, (uint64_t)&std::piecewise_construct, (long long **)__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)v17 + 5, (unsigned __int8 *)a2 + 24);
  __p[0] = v15;
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v16, (unsigned __int8 *)v15, (uint64_t)&std::piecewise_construct, (long long **)__p);
  if (!v18) {
    return 4;
  }
  int v19 = *((_DWORD *)v18 + 10);
  *((_DWORD *)v18 + 10) = v19 - 1;
  if (v19 > 0) {
    return 0;
  }
  return 2;
}

void sub_1B1CB85CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ContextualData::filterContacts(quasar::ContextualData *this, const quasar::ContextualData::NamedEntity *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 71);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 7);
  }
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *((unsigned __int8 *)a2 + 47);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 4);
  }
  if (!v4) {
    return 0;
  }
  unsigned int v14 = 2;
  __p[0] = &v14;
  v5 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>((uint64_t)this + 32, &v14, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 3;
  std::string::basic_string[abi:ne180100]<0>(__p, "Dictation");
  v15 = __p;
  uint64_t v6 = (char *)a2 + 48;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v5, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v15)+ 40;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v7, (unsigned __int8 *)a2 + 48))return 4; {
  __p[0] = (char *)a2 + 48;
  }
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7, (unsigned __int8 *)a2 + 48, (uint64_t)&std::piecewise_construct, (long long **)__p);
  int v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)v8 + 5, (unsigned __int8 *)a2 + 24);
  __p[0] = v6;
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7, (unsigned __int8 *)v6, (uint64_t)&std::piecewise_construct, (long long **)__p);
  if (!v9) {
    return 4;
  }
  int v10 = *((_DWORD *)v9 + 10);
  *((_DWORD *)v9 + 10) = v10 - 1;
  if (v10 > 0) {
    return 0;
  }
  return 2;
}

void sub_1B1CB8754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ContextualData::filter(quasar::ContextualData *this, const quasar::ContextualData::NamedEntity *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  if (!v2) {
    return 1;
  }
  int v3 = *((_DWORD *)a2 + 28);
  switch(v3)
  {
    case 0:
      return 1;
    case 2:
      return quasar::ContextualData::filterContacts(this, a2);
    case 1:
      return quasar::ContextualData::filterNamedEntity(this, a2);
  }
  return 7;
}

void quasar::ContextualData::getStats(quasar::ContextualData *this)
{
}

void sub_1B1CB89C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a20);
  quasar::PTree::~PTree((quasar::PTree *)&a28);
  std::unique_ptr<quasar::PTree>::reset[abi:ne180100](v28, 0);
  _Unwind_Resume(a1);
}

BOOL quasar::ContextualData::addNamedEntity(uint64_t **this, quasar::ContextualData::NamedEntity *a2)
{
  *((void *)&v44 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (int *)((char *)a2 + 96);
  std::to_string((std::string *)__p, *((_DWORD *)a2 + 24));
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v5 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(this + 40), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v39);
  ++*((_DWORD *)v5 + 10);
  if (SBYTE7(v18[0]) < 0) {
    operator delete(__p[0]);
  }
  int v6 = quasar::ContextualData::filter((quasar::ContextualData *)this, a2);
  if (v6)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      memset(v18, 0, sizeof(v18));
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Contextual data: failed to add words, status: ", 46);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    return v6 == 0;
  }
  int v7 = *((_DWORD *)a2 + 28);
  if (v7 == 2)
  {
    quasar::LmeDataFactoryBase::Word::Word((quasar::LmeDataFactoryBase::Word *)__p);
    std::string::operator=((std::string *)__p, (const std::string *)a2);
    LODWORD(v19) = 1;
    MEMORY[0x1B3EA7B20]((char *)v18 + 8, "\\contact-first");
    std::string::basic_string[abi:ne180100]<0>(&v36, "\\NT-contact");
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    int v10 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 33, (const void **)&v36.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v39);
    if (SBYTE7(v18[0]) < 0)
    {
      std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v39.__r_.__value_.__r.__words[2] = *(void *)&v18[0];
    }
    if (SHIBYTE(v18[1]) < 0) {
      std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)&v18[0] + 1), *(std::string::size_type *)&v18[1]);
    }
    else {
      std::string v40 = *(std::string *)((char *)v18 + 8);
    }
    int v41 = v19;
    std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](&v42, (uint64_t)&v19 + 8);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v37 = &v33;
    char v38 = 0;
    v33 = (std::string *)operator new(0x50uLL);
    v34 = v33;
    v35 = &v33[3].__r_.__value_.__s.__data_[8];
    v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word*>((uint64_t)&v35, (long long *)&v39, &v44, v33);
    std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::push_back[abi:ne180100](v10 + 7, (uint64_t)&v33);
    v37 = &v33;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    v11 = v43;
    goto LABEL_34;
  }
  if (v7 != 1) {
    return v6 == 0;
  }
  quasar::LmeDataFactoryBase::Word::Word((quasar::LmeDataFactoryBase::Word *)__p);
  std::string::operator=((std::string *)__p, (const std::string *)a2);
  LODWORD(v19) = 1;
  MEMORY[0x1B3EA7B20]((char *)v18 + 8, "\\jit");
  std::string::basic_string[abi:ne180100]<0>(&v36, "\\NT-inline");
  if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(this + 9, v4))
  {
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
    uint64_t v8 = (const std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(this + 9), v4, (uint64_t)&std::piecewise_construct, &v39);
    std::string::operator=(&v36, v8 + 1);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v36.__r_.__value_.__l.__size_ == 11)
      {
        int v9 = (std::string *)v36.__r_.__value_.__r.__words[0];
LABEL_21:
        std::string::size_type v12 = v9->__r_.__value_.__r.__words[0];
        uint64_t v13 = *(std::string::size_type *)((char *)v9->__r_.__value_.__r.__words + 3);
        if (v12 == 0x746E6F632D544E5CLL && v13 == 0x746361746E6F632DLL) {
          MEMORY[0x1B3EA7B20]((char *)v18 + 8, "\\contact-first");
        }
      }
    }
    else if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) == 11)
    {
      int v9 = &v36;
      goto LABEL_21;
    }
  }
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  v15 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 33, (const void **)&v36.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v39);
  if (SBYTE7(v18[0]) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v39.__r_.__value_.__r.__words[2] = *(void *)&v18[0];
  }
  if (SHIBYTE(v18[1]) < 0) {
    std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)&v18[0] + 1), *(std::string::size_type *)&v18[1]);
  }
  else {
    std::string v40 = *(std::string *)((char *)v18 + 8);
  }
  int v41 = v19;
  std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](&v42, (uint64_t)&v19 + 8);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v37 = &v33;
  char v38 = 0;
  v33 = (std::string *)operator new(0x50uLL);
  v34 = v33;
  v35 = &v33[3].__r_.__value_.__s.__data_[8];
  v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word*>((uint64_t)&v35, (long long *)&v39, &v44, v33);
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::push_back[abi:ne180100](v15 + 7, (uint64_t)&v33);
  v37 = &v33;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v11 = v43;
LABEL_34:
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v42, v11);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v19 + 8, (char *)v20);
  if (SHIBYTE(v18[1]) < 0) {
    operator delete(*((void **)&v18[0] + 1));
  }
  if (SBYTE7(v18[0]) < 0) {
    operator delete(__p[0]);
  }
  return v6 == 0;
}

void sub_1B1CB8F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 137) < 0) {
    operator delete(*(void **)(v14 - 160));
  }
  if (*(char *)(v14 - 177) < 0) {
    operator delete(*(void **)(v14 - 200));
  }
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&__p);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    result = std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer(v16);
  }
  else
  {
    *int v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)int v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1CB918C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *quasar::ContextualData::getWords@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return std::map<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::map[abi:ne180100](a2, this + 33);
}

BOOL quasar::ContextualData::containsWords(quasar::ContextualData *this)
{
  return *((void *)this + 35) != 0;
}

double quasar::ContextualData::getNamedEntityQueryConfig@<D0>(uint64_t a1@<X0>, long long *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 32;
  LODWORD(v16) = 1;
  if (!std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>((void *)(a1 + 32), (unsigned int *)&v16))goto LABEL_5; {
  unsigned int v15 = 1;
  }
  v16 = &v15;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(v7, &v15, (uint64_t)&std::piecewise_construct, &v16);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8 + 3, a3))goto LABEL_5; {
  unsigned int v15 = 1;
  }
  v16 = &v15;
  unint64_t v9 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(v7, &v15, (uint64_t)&std::piecewise_construct, &v16);
  v16 = (unsigned int *)a3;
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v9 + 3), a3, (uint64_t)&std::piecewise_construct, (long long **)&v16);
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)v10 + 5, (unsigned __int8 *)a2))
  {
    unsigned int v15 = 1;
    v16 = &v15;
    unint64_t v11 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(v7, &v15, (uint64_t)&std::piecewise_construct, &v16);
    v16 = (unsigned int *)a3;
    unint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v11 + 3), a3, (uint64_t)&std::piecewise_construct, (long long **)&v16);
    v16 = (unsigned int *)a2;
    uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v12 + 40), (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)&v16);
    std::unordered_map<std::string,quasar::ContextualData::QueryConfig>::unordered_map(a4, (uint64_t)(v13 + 40));
  }
  else
  {
LABEL_5:
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 32) = 1065353216;
  }
  return result;
}

double quasar::ContextualData::getRankedContactQueryConfig@<D0>(uint64_t a1@<X0>, long long *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 32;
  LODWORD(v16) = 2;
  if (!std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>((void *)(a1 + 32), (unsigned int *)&v16))goto LABEL_5; {
  unsigned int v15 = 2;
  }
  v16 = &v15;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(v7, &v15, (uint64_t)&std::piecewise_construct, &v16);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8 + 3, a3))goto LABEL_5; {
  unsigned int v15 = 2;
  }
  v16 = &v15;
  unint64_t v9 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(v7, &v15, (uint64_t)&std::piecewise_construct, &v16);
  v16 = (unsigned int *)a3;
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v9 + 3), a3, (uint64_t)&std::piecewise_construct, (long long **)&v16);
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)v10 + 5, (unsigned __int8 *)a2))
  {
    unsigned int v15 = 2;
    v16 = &v15;
    unint64_t v11 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(v7, &v15, (uint64_t)&std::piecewise_construct, &v16);
    v16 = (unsigned int *)a3;
    unint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v11 + 3), a3, (uint64_t)&std::piecewise_construct, (long long **)&v16);
    v16 = (unsigned int *)a2;
    uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v12 + 40), (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)&v16);
    std::unordered_map<std::string,quasar::ContextualData::QueryConfig>::unordered_map(a4, (uint64_t)(v13 + 40));
  }
  else
  {
LABEL_5:
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 32) = 1065353216;
  }
  return result;
}

uint64_t quasar::ContextualData::getTemplateToAverageCost@<X0>(quasar::ContextualData *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_map<std::string,double>::unordered_map(a2, (uint64_t)this + 176);
}

uint64_t quasar::ContextualData::getTemplateToDeviationCost@<X0>(quasar::ContextualData *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_map<std::string,double>::unordered_map(a2, (uint64_t)this + 216);
}

uint64_t std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  uint64_t v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  long long v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *long long v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1B1CB9850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *long long v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B1CB9B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1CB9BF4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *long long v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B1CB9EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1CB9F98(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *long long v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1B1CBA27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B1CBA330(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = (char *)operator new(0x50uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(void *)float v17 = 0;
  *((void *)v17 + 1) = v10;
  float v18 = *a4;
  long long v19 = **a4;
  *((void *)v17 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)float v18 = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *((_DWORD *)v17 + 18) = 1065353216;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *long long v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1B1CBA5E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

quasar::PTree *std::unique_ptr<quasar::PTree>::reset[abi:ne180100](quasar::PTree **a1, quasar::PTree *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::PTree::~PTree(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  unint64_t v11 = this;
  uint8x8_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    int v7 = a1;
    do
    {
      std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>(v7, v4, v6);
      v6 += 5;
      unint64_t v4 = (std::string *)((char *)v12 + 80);
      uint8x8_t v12 = (std::string *)((char *)v12 + 80);
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1CBA6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__l.__size_, (uint64_t)a3 + 56);
}

void sub_1B1CBA794(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1CBA808(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    unint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      double result = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      int v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = (const void ***)v7;
          int v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      unint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  long long v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__construct_node<std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__construct_node<std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  double result = std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1CBA998(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,quasar::ContextualData::QueryConfig>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::ContextualData::QueryConfig> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1B1CBAA10(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::ContextualData::QueryConfig> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__construct_node_hash<std::pair<std::string const,quasar::ContextualData::QueryConfig> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *BOOL v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1B1CBAC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__construct_node_hash<std::pair<std::string const,quasar::ContextualData::QueryConfig> const&>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1CBAD38(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,double>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,double> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1B1CBADB4(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,double> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node_hash<std::pair<std::string const,double> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *BOOL v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1B1CBB028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

double std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node_hash<std::pair<std::string const,double> const&>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  double result = *(double *)(a3 + 24);
  *((double *)v8 + 5) = result;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1CBB0DC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t quasar::PersonalizationRecipe::init(quasar::PersonalizationRecipe *this, quasar::SystemConfig *a2)
{
  __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion(a2);
  quasar::SystemConfig::Version::Version(&v21, 87, 0);
  if (!quasar::SystemConfig::Version::operator<(__p, &v21))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "personalization-recipe.personalization-version");
    quasar::SystemConfig::hasParam((uint64_t)a2, (uint64_t)__p);
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Config Version is not high enough for personalization", 53);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  return 0;
}

void sub_1B1CBB384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void quasar::PersonalizationRecipe::registerParams(uint64_t a1, quasar::SystemConfig *this, const void **a3)
{
  quasar::SystemConfig::getPrefix(this, &v9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v9.__r_.__value_.__l.__data_, a3, (uint64_t)&__p);
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "personalization-version");
  std::string::basic_string[abi:ne180100]<0>(v6, "The version of the categories data");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1, (uint64_t)v6, 1, 87, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::SystemConfig::setPrefix((std::string *)this, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1B1CBB4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PersonalizationRecipe::loadCategories(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1CBB75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a22) {
    quasar::PersonalizationRecipe::loadCategories(a22);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void quasar::PersonalizationRecipe::registerCategory(uint64_t a1, quasar::SystemConfig *this, const void **a3, std::string::size_type a4)
{
  quasar::SystemConfig::getPrefix(this, &v43);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v43.__r_.__value_.__l.__data_, a3, (uint64_t)&v40);
  long long v8 = std::string::append(&v40, ".");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = *(char *)(a4 + 23);
  if (v10 >= 0) {
    long long v11 = (const std::string::value_type *)a4;
  }
  else {
    long long v11 = *(const std::string::value_type **)a4;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a4 + 8);
  }
  long long v13 = std::string::append(&v41, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  long long v15 = std::string::append(&v42, ".");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(void *)&v37[0] = *((void *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::setPrefix((std::string *)this, (const std::string *)__p);
  if (SBYTE7(v37[0]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  long long v38 = 0u;
  long long v39 = 0u;
  long long v17 = (uint64_t **)(a1 + 8);
  memset(v37, 0, sizeof(v37));
  *(_OWORD *)std::string __p = 0u;
  v42.__r_.__value_.__r.__words[0] = a4;
  long long v18 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)a4, (uint64_t)&std::piecewise_construct, (long long **)&v42);
  long long v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  v18[9] = *(void *)&v37[0];
  *(_OWORD *)long long v19 = *(_OWORD *)__p;
  BYTE7(v37[0]) = 0;
  LOBYTE(__p[0]) = 0;
  long long v20 = (void **)(v18 + 10);
  if (*((char *)v18 + 103) < 0) {
    operator delete(*v20);
  }
  *(_OWORD *)long long v20 = *(_OWORD *)((char *)v37 + 8);
  v18[12] = *((void *)&v37[1] + 1);
  v18[13] = 0;
  int v21 = (void **)(v18 + 14);
  if (*((char *)v18 + 135) < 0) {
    operator delete(*v21);
  }
  *(_OWORD *)int v21 = *(_OWORD *)((char *)&v37[2] + 8);
  v18[16] = *((void *)&v37[3] + 1);
  BOOL v22 = (void **)(v18 + 17);
  if (*((char *)v18 + 159) < 0) {
    operator delete(*v22);
  }
  *(_OWORD *)BOOL v22 = v38;
  v18[19] = v39;
  uint64_t v23 = v18[20];
  v18[20] = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "chars-to-trim");
  v42.__r_.__value_.__r.__words[0] = a4;
  unint64_t v24 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)a4, (uint64_t)&std::piecewise_construct, (long long **)&v42);
  std::string::basic_string[abi:ne180100]<0>(&v42, "The characters to be trimmed from the edges of the raw entity string");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)__p, (uint64_t)(v24 + 7), (uint64_t)&v42, 1, 88, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v37[0]) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "chars-to-split");
  v42.__r_.__value_.__r.__words[0] = a4;
  size_t v25 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)a4, (uint64_t)&std::piecewise_construct, (long long **)&v42);
  std::string::basic_string[abi:ne180100]<0>(&v42, "The characters used to split the raw entity string");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)__p, (uint64_t)(v25 + 10), (uint64_t)&v42, 1, 88, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v37[0]) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "frequency");
  v42.__r_.__value_.__r.__words[0] = a4;
  long long v26 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)a4, (uint64_t)&std::piecewise_construct, (long long **)&v42);
  std::string::basic_string[abi:ne180100]<0>(&v42, "The relative frequency of the data");
  quasar::SystemConfig::Register<double>((uint64_t)this, (const void **)__p, (uint64_t)(v26 + 13), (uint64_t)&v42, 1, 88, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v37[0]) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "template-name");
  v42.__r_.__value_.__r.__words[0] = a4;
  unint64_t v27 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)a4, (uint64_t)&std::piecewise_construct, (long long **)&v42);
  std::string::basic_string[abi:ne180100]<0>(&v42, "The template name for LME");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)__p, (uint64_t)(v27 + 14), (uint64_t)&v42, 1, 88, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v37[0]) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "tag-name");
  v42.__r_.__value_.__r.__words[0] = a4;
  long long v28 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)a4, (uint64_t)&std::piecewise_construct, (long long **)&v42);
  std::string::basic_string[abi:ne180100]<0>(&v42, "The tag name for LME (also important for enumerations)");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)__p, (uint64_t)(v28 + 17), (uint64_t)&v42, 1, 88, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v37[0]) < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::setPrefix((std::string *)this, &v43);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v43.__r_.__value_.__l.__data_, a3, (uint64_t)&v41);
  long long v29 = std::string::append(&v41, ".");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  int v31 = *(char *)(a4 + 23);
  if (v31 >= 0) {
    long long v32 = (const std::string::value_type *)a4;
  }
  else {
    long long v32 = *(const std::string::value_type **)a4;
  }
  if (v31 >= 0) {
    std::string::size_type v33 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v33 = *(void *)(a4 + 8);
  }
  v34 = std::string::append(&v42, v32, v33);
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  *(void *)&v37[0] = *((void *)&v34->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::readPtree((uint64_t)this, (uint64_t)__p);
}

void sub_1B1CBBDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 105) < 0) {
    operator delete(*(void **)(v40 - 128));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (*(char *)(v40 - 81) < 0) {
    operator delete(*(void **)(v40 - 104));
  }
  _Unwind_Resume(exception_object);
}

void quasar::PersonalizationRecipe::Category::~Category(quasar::PersonalizationRecipe::Category *this)
{
  uint64_t v2 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t std::pair<std::string,quasar::PTree>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void quasar::PersonalizationRecipe::getPersonalizedData(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  a3[2] = 0;
  a3[1] = 0;
  *a3 = a3 + 1;
  uint64_t v3 = (void *)*a2;
  long long v18 = a2 + 1;
  if ((void *)*a2 != a2 + 1)
  {
    long long v19 = (uint64_t **)(a1 + 8);
    uint64_t v17 = a1 + 16;
    do
    {
      if (v17 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v19, (const void **)v3 + 4))
      {
        if (quasar::gLogLevel >= 4)
        {
          memset(v20, 0, 272);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
          long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Category ", 9);
          int v10 = *((char *)v3 + 55);
          if (v10 >= 0) {
            uint64_t v11 = (uint64_t)(v3 + 4);
          }
          else {
            uint64_t v11 = v3[4];
          }
          if (v10 >= 0) {
            uint64_t v12 = *((unsigned __int8 *)v3 + 55);
          }
          else {
            uint64_t v12 = v3[5];
          }
          long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" not supported", 14);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v20);
        }
      }
      else
      {
        v20[0] = (long long *)(v3 + 4);
        unint64_t v4 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, v20);
        long long v5 = (void *)v3[7];
        if (v5 != v3 + 8)
        {
          do
          {
            if (*((char *)v5 + 55) < 0)
            {
              if (v5[5]) {
LABEL_9:
              }
                quasar::trimUnicodeCharSet((uint64_t)(v5 + 4), (char *)v4 + 56);
            }
            else if (*((unsigned char *)v5 + 55))
            {
              goto LABEL_9;
            }
            long long v6 = (void *)v5[1];
            if (v6)
            {
              do
              {
                char v7 = v6;
                long long v6 = (void *)*v6;
              }
              while (v6);
            }
            else
            {
              do
              {
                char v7 = (void *)v5[2];
                BOOL v8 = *v7 == (void)v5;
                long long v5 = v7;
              }
              while (!v8);
            }
            long long v5 = v7;
          }
          while (v7 != v3 + 8);
        }
      }
      long long v14 = v3;
      long long v15 = (void *)v3[1];
      if (v15)
      {
        do
        {
          long long v16 = v15;
          long long v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          long long v16 = (void *)v14[2];
          BOOL v8 = *v16 == (void)v14;
          long long v14 = v16;
        }
        while (!v8);
      }
      uint64_t v3 = v16;
    }
    while (v16 != v18);
  }
}

void sub_1B1CBC508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
}

void quasar::getPersonalizationRecipe(quasar *this, quasar::SystemConfig *a2)
{
}

void sub_1B1CBC6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<quasar::PersonalizationRecipe>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void quasar::getInputDataFromJson()
{
  quasar::PTree::PTree((quasar::PTree *)v0);
  quasar::PTree::readJsonFromFile();
}

void sub_1B1CBC87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  char v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    char v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0xA8uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  char v7 = (std::string *)(v6 + 32);
  BOOL v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  double result = 0.0;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1CBCA34(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::PersonalizationRecipe::Category>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,std::string const&,int &,std::set<std::string> &>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v12 = 0x333333333333333;
  }
  else {
    unint64_t v12 = v7;
  }
  long long v20 = a1 + 2;
  if (v12) {
    long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  }
  else {
    long long v13 = 0;
  }
  long long v16 = v13;
  uint64_t v17 = &v13[80 * v6];
  long long v19 = &v13[80 * v12];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,std::string const&,int &,std::set<std::string> &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  long long v18 = v17 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v16);
  return v14;
}

void sub_1B1CBCBC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,std::string const&,int &,std::set<std::string> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v11 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  quasar::LmeDataFactoryBase::Word::Word(a2, &v11, &__p, *a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B1CBCCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

kaldi::CoreMLInferenceNet *kaldi::CoreMLInferenceNet::CoreMLInferenceNet(kaldi::CoreMLInferenceNet *this, long long *a2, int a3, void *a4)
{
  *(void *)this = &unk_1F0A47C00;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *((void *)this + 3) = *((void *)a2 + 2);
    *(_OWORD *)((char *)this + 8) = v7;
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = -1;
  *((unsigned char *)this + 56) = 0;
  *((void *)this + 8) = *a4;
  uint64_t v8 = a4[1];
  *((void *)this + 9) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *((unsigned char *)this + 56) = a3;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"CoreMLInferenceNet: On-Device ASR: (ANE) Eager Loading and keepANEModelLoaded: ", 79);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v12);
    a3 = *((unsigned __int8 *)this + 56);
  }
  if (a3) {
    kaldi::CoreMLInferenceNet::LoadModel(this);
  }
  id v9 = objc_alloc_init(MEMORY[0x1E4F1E9D8]);
  int v10 = (void *)*((void *)this + 4);
  *((void *)this + 4) = v9;

  return this;
}

void sub_1B1CBCDFC(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void kaldi::CoreMLInferenceNet::LoadModel(kaldi::CoreMLInferenceNet *this)
{
  if (!*((void *)this + 5))
  {
    uint64_t v2 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      uint64_t v2 = (char *)*((void *)this + 1);
    }
    uint64_t v3 = [NSString stringWithUTF8String:v2];
    unint64_t v4 = [v3 stringByStandardizingPath];

    uint64_t v5 = (void *)MEMORY[0x1E4F1CB10];
    id v29 = v4;
    uint64_t v6 = objc_msgSend(v5, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", objc_msgSend(v29, "fileSystemRepresentation"), 1, 0);
    uint64_t v7 = *((void *)this + 8);
    if (v7) {
      (*(void (**)(uint64_t, char *))(*(void *)v7 + 16))(v7, (char *)this + 8);
    }
    v31[0] = 0;
    uint64_t v8 = objc_msgSend(MEMORY[0x1E4F1E970], "modelWithContentsOfURL:error:", v6, v31, v6);
    id v9 = v31[0];
    int v10 = (void *)*((void *)this + 5);
    *((void *)this + 5) = v8;

    uint64_t v11 = *((void *)this + 8);
    if (v11)
    {
      (*(void (**)(uint64_t, char *))(*(void *)v11 + 24))(v11, (char *)this + 8);
      atomic_store(1u, (unsigned __int8 *)(*((void *)this + 8) + 8));
    }
    unint64_t v12 = (void *)*((void *)this + 5);
    if (!v12)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Could not load ", 15);
      id v25 = [v9 description];
      long long v26 = (const char *)[v25 UTF8String];
      size_t v27 = strlen(v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v26, v27);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
    }
    long long v13 = [v12 modelDescription];
    uint64_t v14 = [v13 inputDescriptionsByName];
    long long v15 = [v14 objectForKeyedSubscript:@"input1"];

    long long v16 = [v15 multiArrayConstraint];
    uint64_t v17 = [v16 shape];
    long long v18 = [v17 objectAtIndexedSubscript:0];
    *((_DWORD *)this + 12) = [v18 intValue];

    long long v19 = [v13 outputDescriptionsByName];
    long long v20 = [v19 objectForKeyedSubscript:@"output1"];

    int v21 = [v20 multiArrayConstraint];
    BOOL v22 = [v21 shape];
    uint64_t v23 = [v22 objectAtIndexedSubscript:0];
    *((_DWORD *)this + 13) = [v23 intValue];
  }
}

void sub_1B1CBD144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void kaldi::CoreMLInferenceNet::~CoreMLInferenceNet(kaldi::CoreMLInferenceNet *this)
{
  *(void *)this = &unk_1F0A47C00;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::CoreMLInferenceNet::~CoreMLInferenceNet(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::CoreMLInferenceNet::ClearTemporaryBuffers(kaldi::CoreMLInferenceNet *this)
{
  if (!*((unsigned char *)this + 56))
  {
    uint64_t v2 = (void *)*((void *)this + 5);
    *((void *)this + 5) = 0;

    uint64_t v3 = *((void *)this + 8);
    if (v3) {
      atomic_store(0, (unsigned __int8 *)(v3 + 8));
    }
  }
}

void kaldi::CoreMLInferenceNet::FeedforwardGeneric<kaldi::CuMatrixBase<float>,kaldi::CuMatrix<float>>(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  v48[1] = *MEMORY[0x1E4F143B8];
  kaldi::CoreMLInferenceNet::LoadModel((kaldi::CoreMLInferenceNet *)a1);
  uint64_t v6 = kaldi::MLMultiArrayFromCu(a2);
  id v7 = objc_alloc(MEMORY[0x1E4F1E928]);
  v47 = @"input1";
  v48[0] = v6;
  uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v48 forKeys:&v47 count:1];
  id v46 = 0;
  id v9 = (void *)[v7 initWithDictionary:v8 error:&v46];
  id v10 = v46;

  if (!v9)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    id v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"could not make features: ", 25);
    id v30 = [v10 description];
    int v31 = (const char *)[v30 UTF8String];
    size_t v32 = strlen(v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(a1 + 40);
  id v44 = v10;
  long long v13 = [v11 predictionFromFeatures:v9 options:v12 error:&v44];
  id v14 = v44;

  if (!v13)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"CoreML prediction failed, falling back to CPU inference", 55);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    }
    long long v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v15 = (void *)*v15;
    }
    long long v16 = [NSString stringWithUTF8String:v15];
    uint64_t v17 = [v16 stringByStandardizingPath];

    long long v18 = (void *)MEMORY[0x1E4F1CB10];
    id v19 = v17;
    long long v20 = objc_msgSend(v18, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", objc_msgSend(v19, "fileSystemRepresentation"), 1, 0);
    id v43 = v14;
    uint64_t v21 = [MEMORY[0x1E4F1E970] modelWithContentsOfURL:v20 error:&v43];
    id v22 = v43;

    uint64_t v23 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v21;

    [*(id *)(a1 + 32) setUsesCPUOnly:1];
    uint64_t v25 = *(void *)(a1 + 32);
    unint64_t v24 = *(void **)(a1 + 40);
    id v42 = v22;
    long long v13 = [v24 predictionFromFeatures:v9 options:v25 error:&v42];
    id v14 = v42;

    if (!v13)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
      long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"could not predict: ", 19);
      id v39 = [v14 description];
      uint64_t v40 = (const char *)[v39 UTF8String];
      size_t v41 = strlen(v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v40, v41);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
    }
  }
  long long v26 = [v13 featureValueForName:@"output1"];
  size_t v27 = [v26 multiArrayValue];

  if (!v27)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    std::string::size_type v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"No output from CoreML: ", 23);
    v34 = [v13 featureNames];
    id v35 = [v34 description];
    std::string v36 = (const char *)[v35 UTF8String];
    size_t v37 = strlen(v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v36, v37);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  long long v28 = (void *)MEMORY[0x1B3EA9930]();
  kaldi::MLMultiArrayToCu(v27, a3);
}

void sub_1B1CBD744()
{
  JUMPOUT(0x1B1CBD7C0);
}

void sub_1B1CBD774()
{
  JUMPOUT(0x1B1CBD7C0);
}

void sub_1B1CBD780(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B1CBD7A0()
{
  JUMPOUT(0x1B1CBD7ACLL);
}

void kaldi::CoreMLInferenceNet::FeedforwardGeneric<kaldi::CuVectorBase<float>,kaldi::CuVector<float>>(uint64_t a1, uint64_t a2, void *a3)
{
  v76[1] = *MEMORY[0x1E4F143B8];
  kaldi::CoreMLInferenceNet::LoadModel((kaldi::CoreMLInferenceNet *)a1);
  id v6 = objc_alloc(MEMORY[0x1E4F1E9A0]);
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = [NSNumber numberWithInt:*(unsigned int *)(a2 + 16)];
  v76[0] = v8;
  id v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v76 count:1];
  id v70 = 0;
  v65 = (void *)[v6 initWithDataPointer:v7 shape:v9 dataType:65568 strides:&unk_1F0A74180 deallocator:&__block_literal_global_30 error:&v70];
  id v10 = v70;

  if (!v65)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Could not make multiarray from vector ", 38);
    id v41 = [v10 description];
    id v42 = (const char *)[v41 UTF8String];
    size_t v43 = strlen(v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v42, v43);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v71);
  }

  id v11 = objc_alloc(MEMORY[0x1E4F1E928]);
  v74 = @"input1";
  v75 = v65;
  uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v75 forKeys:&v74 count:1];
  id v69 = 0;
  long long v13 = (void *)[v11 initWithDictionary:v12 error:&v69];
  id v14 = v69;

  if (!v13)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    id v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"could not make features: ", 25);
    id v45 = [v14 description];
    id v46 = (const char *)[v45 UTF8String];
    size_t v47 = strlen(v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v46, v47);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v71);
  }
  uint64_t v16 = *(void *)(a1 + 32);
  long long v15 = *(void **)(a1 + 40);
  id v68 = v14;
  uint64_t v17 = [v15 predictionFromFeatures:v13 options:v16 error:&v68];
  id v18 = v68;

  if (!v17)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"CoreML prediction failed, falling back to CPU inference", 55);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    }
    id v19 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      id v19 = (void *)*v19;
    }
    long long v20 = [NSString stringWithUTF8String:v19];
    uint64_t v21 = [v20 stringByStandardizingPath];

    id v22 = (void *)MEMORY[0x1E4F1CB10];
    id v23 = v21;
    unint64_t v24 = objc_msgSend(v22, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", objc_msgSend(v23, "fileSystemRepresentation"), 1, 0);
    id v67 = v18;
    uint64_t v25 = [MEMORY[0x1E4F1E970] modelWithContentsOfURL:v24 error:&v67];
    id v26 = v67;

    size_t v27 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v25;

    [*(id *)(a1 + 32) setUsesCPUOnly:1];
    uint64_t v29 = *(void *)(a1 + 32);
    long long v28 = *(void **)(a1 + 40);
    id v66 = v26;
    uint64_t v17 = [v28 predictionFromFeatures:v13 options:v29 error:&v66];
    id v18 = v66;

    if (!v17)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"could not predict: ", 19);
      id v62 = [v18 description];
      v63 = (const char *)[v62 UTF8String];
      size_t v64 = strlen(v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v63, v64);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v71);
    }
  }
  id v30 = [v17 featureValueForName:@"output1"];
  int v31 = [v30 multiArrayValue];

  if (!v31)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"No output from CoreML: ", 23);
    v49 = [v17 featureNames];
    id v50 = [v49 description];
    v51 = (const char *)[v50 UTF8String];
    size_t v52 = strlen(v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v51, v52);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v71);
  }
  size_t v32 = (void *)MEMORY[0x1B3EA9930]();
  id v33 = v31;
  v34 = [v33 shape];
  if ([v34 count] != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Non-vector shape output from CoreML: ", 37);
    id v54 = [v34 description];
    v55 = (const char *)[v54 UTF8String];
    size_t v56 = strlen(v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v55, v56);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v71);
  }
  id v35 = [v34 objectAtIndexedSubscript:0];
  uint64_t v36 = [v35 intValue];

  uint64_t v37 = [v33 dataType];
  if (v37 == 65568)
  {
    uint64_t v39 = [v33 dataPointer];
    uint64_t v73 = 0;
    uint64_t v71 = v39;
    uint64_t v72 = v36;
    kaldi::CuVector<float>::Resize((uint64_t)a3, v36, 1);
    kaldi::CuVectorBase<float>::CopyFromVec<float>(a3, (uint64_t)&v71);
  }
  else
  {
    if (v37 != 65600)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Unexpected output from CoreML: ", 31);
      id v58 = [v33 description];
      v59 = (const char *)[v58 UTF8String];
      size_t v60 = strlen(v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v59, v60);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v71);
    }
    kaldi::CuVector<float>::Resize((uint64_t)a3, v36, 0);
    uint64_t v38 = [v33 dataPointer];
    uint64_t v73 = 0;
    uint64_t v71 = v38;
    uint64_t v72 = v36;
    kaldi::CuVectorBase<float>::CopyFromVec<double>((uint64_t)a3, (uint64_t)&v71);
  }
}

void sub_1B1CBDED8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void kaldi::CoreMLInferenceNet::MultiIOFeedforwardSimple(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  v51[2] = *MEMORY[0x1E4F143B8];
  kaldi::CoreMLInferenceNet::LoadModel((kaldi::CoreMLInferenceNet *)a1);
  uint64_t v8 = kaldi::MLMultiArrayFromCu(a2);
  if (*(void *)(a3 + 8) - *(void *)a3 != 8)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"in_extras.size() == 1", 21);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  id v9 = kaldi::MLMultiArrayFromCu(**(void **)a3);
  id v10 = objc_alloc(MEMORY[0x1E4F1E928]);
  v50[0] = @"input1";
  v50[1] = @"input2";
  v51[0] = v8;
  v51[1] = v9;
  id v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v51 forKeys:v50 count:2];
  id v48 = 0;
  uint64_t v12 = (void *)[v10 initWithDictionary:v11 error:&v48];
  id v13 = v48;

  if (!v12)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    size_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"could not make features: ", 25);
    id v33 = [v13 description];
    v34 = (const char *)[v33 UTF8String];
    size_t v35 = strlen(v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, v35);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  uint64_t v15 = *(void *)(a1 + 32);
  id v14 = *(void **)(a1 + 40);
  id v47 = v13;
  uint64_t v16 = [v14 predictionFromFeatures:v12 options:v15 error:&v47];
  id v17 = v47;

  if (!v16)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"CoreML prediction failed, falling back to CPU inference", 55);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    }
    id v18 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      id v18 = (void *)*v18;
    }
    id v19 = [NSString stringWithUTF8String:v18];
    long long v20 = [v19 stringByStandardizingPath];

    uint64_t v21 = (void *)MEMORY[0x1E4F1CB10];
    id v22 = v20;
    id v23 = objc_msgSend(v21, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", objc_msgSend(v22, "fileSystemRepresentation"), 1, 0);
    id v46 = v17;
    uint64_t v24 = [MEMORY[0x1E4F1E970] modelWithContentsOfURL:v23 error:&v46];
    id v25 = v46;

    id v26 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v24;

    [*(id *)(a1 + 32) setUsesCPUOnly:1];
    uint64_t v28 = *(void *)(a1 + 32);
    size_t v27 = *(void **)(a1 + 40);
    id v45 = v25;
    uint64_t v16 = [v27 predictionFromFeatures:v12 options:v28 error:&v45];
    id v17 = v45;

    if (!v16)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
      id v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"could not predict: ", 19);
      id v42 = [v17 description];
      size_t v43 = (const char *)[v42 UTF8String];
      size_t v44 = strlen(v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v43, v44);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
    }
  }
  uint64_t v29 = [v16 featureValueForName:@"output1"];
  id v30 = [v29 multiArrayValue];

  if (!v30)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"No output from CoreML: ", 23);
    uint64_t v37 = [v16 featureNames];
    id v38 = [v37 description];
    uint64_t v39 = (const char *)[v38 UTF8String];
    size_t v40 = strlen(v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v39, v40);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  int v31 = (void *)MEMORY[0x1B3EA9930]();
  kaldi::MLMultiArrayToCu(v30, a4);
}

void sub_1B1CBE4F0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

id kaldi::MLMultiArrayFromCu(uint64_t a1)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc(MEMORY[0x1E4F1E9A0]);
  uint64_t v3 = *(void *)(a1 + 8);
  v19[0] = &unk_1F0A73FE0;
  unint64_t v4 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 20)];
  v19[1] = v4;
  uint64_t v5 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 16)];
  v19[2] = v5;
  id v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:3];
  v18[0] = &unk_1F0A73FE0;
  uint64_t v7 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 24)];
  v18[1] = v7;
  _OWORD v18[2] = &unk_1F0A73FE0;
  uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:3];
  id v17 = 0;
  id v9 = (void *)[v2 initWithDataPointer:v3 shape:v6 dataType:65568 strides:v8 deallocator:&__block_literal_global_0 error:&v17];
  id v10 = v17;

  if (!v9)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Could not make multiarray from matrix ", 38);
    id v13 = [v10 description];
    id v14 = (const char *)[v13 UTF8String];
    size_t v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }

  return v9;
}

void sub_1B1CBE718(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::MLMultiArrayToCu(void *a1, int32x2_t *a2)
{
  id v3 = a1;
  unint64_t v4 = [v3 shape];
  uint64_t v5 = [v3 strides];
  uint64_t v6 = [v4 count];
  if (v6 == 2)
  {
    id v11 = [v4 objectAtIndexedSubscript:0];
    uint64_t v9 = [v11 intValue];

    uint64_t v12 = [v4 objectAtIndexedSubscript:1];
    uint64_t v8 = [v12 intValue];

    uint64_t v7 = [v5 objectAtIndexedSubscript:0];
    int v10 = [v7 longValue];
  }
  else
  {
    if (v6 != 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      id v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unexpected output shape from CoreML: ", 37);
      id v15 = [v4 description];
      uint64_t v16 = (const char *)[v15 UTF8String];
      size_t v17 = strlen(v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    uint64_t v7 = [v4 objectAtIndexedSubscript:0];
    uint64_t v8 = [v7 intValue];
    uint64_t v9 = 1;
    int v10 = v8;
  }

  uint64_t v13 = [v3 dataType];
  if (v13 == 65600)
  {
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v22, [v3 dataPointer], v9, v8, v10);
    kaldi::CuMatrix<float>::Resize(a2, v9, v8, 0, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat<double>((uint64_t)a2, (int *)v22, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
  }
  else
  {
    if (v13 != 65568)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      id v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unexpected output from CoreML: ", 31);
      id v19 = [v3 description];
      long long v20 = (const char *)[v19 UTF8String];
      size_t v21 = strlen(v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v22, [v3 dataPointer], v9, v8, v10);
    kaldi::CuMatrix<float>::operator=(a2, (int *)v22);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
  }
}

void sub_1B1CBEA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t kaldi::CoreMLInferenceNet::OutputDim(kaldi::CoreMLInferenceNet *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t kaldi::CoreMLInferenceNet::InputDim(kaldi::CoreMLInferenceNet *this)
{
  return *((unsigned int *)this + 12);
}

double kaldi::ReadCoreMLModelNet@<D0>(long long *a1@<X0>, unsigned __int8 a2@<W1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  unsigned __int8 v7 = a2;
  std::allocate_shared[abi:ne180100]<kaldi::CoreMLInferenceNet,std::allocator<kaldi::CoreMLInferenceNet>,std::string const&,BOOL &,std::shared_ptr<kaldi::ModelInitializeContext> &,void>(a1, &v7, a3, v6);
  double result = v6[0];
  *a4 = *(_OWORD *)v6;
  return result;
}

uint64_t kaldi::FeedForwardNetItf::IsStreamingWithCache(kaldi::FeedForwardNetItf *this)
{
  return 0;
}

uint64_t kaldi::FeedForwardNetItf::IsStreamingWithMasking(kaldi::FeedForwardNetItf *this)
{
  return 0;
}

void *std::allocate_shared[abi:ne180100]<kaldi::CoreMLInferenceNet,std::allocator<kaldi::CoreMLInferenceNet>,std::string const&,BOOL &,std::shared_ptr<kaldi::ModelInitializeContext> &,void>@<X0>(long long *a1@<X1>, unsigned __int8 *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x68uLL);
  double result = std::__shared_ptr_emplace<kaldi::CoreMLInferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,std::shared_ptr<kaldi::ModelInitializeContext> &,std::allocator<kaldi::CoreMLInferenceNet>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B1CBEBCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::CoreMLInferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,std::shared_ptr<kaldi::ModelInitializeContext> &,std::allocator<kaldi::CoreMLInferenceNet>,0>(void *a1, long long *a2, unsigned __int8 *a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EB90;
  std::allocator<kaldi::CoreMLInferenceNet>::construct[abi:ne180100]<kaldi::CoreMLInferenceNet,std::string const&,BOOL &,std::shared_ptr<kaldi::ModelInitializeContext> &>((int)&v6, (kaldi::CoreMLInferenceNet *)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1B1CBEC44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::CoreMLInferenceNet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EB90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::CoreMLInferenceNet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EB90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::CoreMLInferenceNet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<kaldi::CoreMLInferenceNet>::construct[abi:ne180100]<kaldi::CoreMLInferenceNet,std::string const&,BOOL &,std::shared_ptr<kaldi::ModelInitializeContext> &>(int a1, kaldi::CoreMLInferenceNet *this, long long *a3, unsigned __int8 *a4, void *a5)
{
  int v5 = *a4;
  char v6 = (std::__shared_weak_count *)a5[1];
  v7[0] = *a5;
  v7[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  kaldi::CoreMLInferenceNet::CoreMLInferenceNet(this, a3, v5 != 0, v7);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1B1CBED78(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::DummyConfig::getType(quasar::DummyConfig *this)
{
  return 0;
}

void quasar::DummyConfig::DummyConfig(uint64_t a1, std::string *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0x3F80000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)a1 = &unk_1F0A519B8;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  quasar::LmBuildConfig::readSysConfig(a1, a2, a3);
}

void sub_1B1CBEF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v22 + 143) < 0) {
    operator delete(*v23);
  }
  quasar::LmBuildConfig::~LmBuildConfig((void **)v22);
  _Unwind_Resume(a1);
}

void quasar::FstLmHandle::~FstLmHandle(quasar::FstLmHandle *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[1];
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  quasar::ModelLoader::~ModelLoader((quasar::FstLmHandle *)((char *)this + 8));
}

void quasar::DummyLmModel::DummyLmModel(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  int v4 = *a4;
  *(void *)(a1 + 936) = &unk_1F0A51710;
  *(unsigned char *)(a1 + 944) = 0;
  *(_DWORD *)(a1 + 948) = v4;
  *(_DWORD *)(a1 + 952) = 1065353216;
  int v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  unsigned __int8 v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::FstLmHandle::FstLmHandle(a1, (uint64_t *)&off_1F0A32690, &v6, 0);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  operator new();
}

void sub_1B1CBF270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 16))(a10);
  }
  quasar::FstLmHandle::~FstLmHandle(v16, (uint64_t *)&off_1F0A32690);
  _Unwind_Resume(a1);
}

uint64_t quasar::DummyLmModel::DummyLmModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2 + *(void *)(*(void *)*a2 - 24);
  *(void *)(a1 + 936) = &unk_1F0A51710;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_DWORD *)(a1 + 952) = *(_DWORD *)(v4 + 16);
  *(void *)(a1 + 944) = v5;
  uint64_t v6 = quasar::FstLmHandle::FstLmHandle(a1, (uint64_t *)&off_1F0A32690, a2);
  unsigned __int8 v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::LmModel2::LmModel2(v6 + 656, (uint64_t *)&off_1F0A326A0);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(void *)a1 = &off_1F0A52240;
  *(void *)(a1 + 936) = off_1F0A522C8;
  *(void *)(a1 + 656) = off_1F0A52280;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(void *)(a1 + 928) = 0;
  return a1;
}

void sub_1B1CBF4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  quasar::FstLmHandle::~FstLmHandle(v10, (uint64_t *)&off_1F0A32690);
  _Unwind_Resume(a1);
}

void quasar::DummyLmModel::AddTo(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
}

void virtual thunk to'quasar::DummyLmModel::AddTo(void *a1, uint64_t a2, uint64_t *a3, unsigned int a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
}

uint64_t quasar::DummyLmModel::writeImpl(uint64_t a1, const void **a2)
{
  v19[19] = *MEMORY[0x1E4F143B8];
  if (*((char *)a2 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  uint64_t v5 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v4 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v5 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *a2;
    }
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  int v7 = *(char *)(a1 + 919);
  if (v7 >= 0) {
    uint64_t v8 = (const std::string::value_type *)(a1 + 896);
  }
  else {
    uint64_t v8 = *(const std::string::value_type **)(a1 + 896);
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a1 + 919);
  }
  else {
    std::string::size_type v9 = *(void *)(a1 + 904);
  }
  int v10 = std::string::append(&v16, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::ofstream::basic_ofstream(&v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = *(void *)(a1 + 920);
  std::string::basic_string[abi:ne180100]<0>(&v16, "");
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v16;
  }
  int v15 = 16777217;
  (*(void (**)(uint64_t, uint64_t *, std::string *))(*(void *)v12 + 96))(v12, &v17, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  uint64_t v17 = *MEMORY[0x1E4FBA400];
  *(uint64_t *)((char *)&v17 + *(void *)(v17 - 24)) = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1B3EA7CF0](&v18);
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](v19);
  return 1;
}

void sub_1B1CBF77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::ofstream::~ofstream(&a23);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'quasar::DummyLmModel::writeImpl(uint64_t a1, const void **a2)
{
  return 1;
}

void quasar::DummyLmModel::getMetadata(quasar::PTree *a1@<X8>)
{
}

void sub_1B1CBF894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::PTree::~PTree((quasar::PTree *)va);
  if (*(char *)(v3 - 17) < 0) {
    operator delete(*(void **)(v3 - 40));
  }
  quasar::PTree::~PTree(v2);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'quasar::DummyLmModel::getMetadata(quasar::PTree *a1@<X8>)
{
}

void quasar::trainDummyModel(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)v8);
  quasar::ModelLoader::readFstNetwork((uint64_t)v8, *a1 + 120, &v7);
  quasar::filesystem::Path::Path(v2, *a1 + 120);
  quasar::filesystem::Path::filename((quasar::filesystem::Path *)v2, v4);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v4, &v6);
  v4[0] = &unk_1F0A51998;
  if (v5 < 0) {
    operator delete((void *)v4[1]);
  }
  v2[0] = &unk_1F0A51998;
  if (v3 < 0) {
    operator delete((void *)v2[1]);
  }
  operator new();
}

void sub_1B1CBFA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::__shared_weak_count *a30,char a31)
{
  (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B1CBFB68()
{
}

void quasar::loadDummyModel(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "filename");
  quasar::PTree::getString(a1, (uint64_t)__p);
}

void sub_1B1CBFDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  MEMORY[0x1B3EA8670](v30, 0x10B3C4048B1336ELL);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void quasar::DummyConfig::~DummyConfig(void **this)
{
  *this = &unk_1F0A519B8;
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  uint64_t vars8;

  *this = &unk_1F0A519B8;
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  quasar::LmBuildConfig::~LmBuildConfig(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::FstLmHandle::~FstLmHandle(quasar::FstLmHandle *this)
{
  *(void *)this = &unk_1F0A51B08;
  *((void *)this + 82) = &unk_1F0A51B40;
  id v2 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  quasar::ModelLoader::~ModelLoader((quasar::FstLmHandle *)((char *)this + 8));
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A51B08;
  *((void *)this + 82) = &unk_1F0A51B40;
  id v2 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  quasar::ModelLoader::~ModelLoader((quasar::FstLmHandle *)((char *)this + 8));
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::FstLmHandle::~FstLmHandle(quasar::FstLmHandle *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *uint64_t v1 = &unk_1F0A51B08;
  v1[82] = &unk_1F0A51B40;
  id v2 = (std::__shared_weak_count *)v1[80];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)(v1 + 1));
}

{
  void *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *uint64_t v1 = &unk_1F0A51B08;
  v1[82] = &unk_1F0A51B40;
  id v2 = (std::__shared_weak_count *)v1[80];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)(v1 + 1));
  JUMPOUT(0x1B3EA8670);
}

void quasar::DummyLmModel::~DummyLmModel(quasar::DummyLmModel *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'quasar::DummyLmModel::~DummyLmModel(quasar::DummyLmModel *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::DummyLmModel::~DummyLmModel(quasar::DummyLmModel *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1B3EA8670);
}

void quasar::DummyLmModel::~DummyLmModel(quasar::DummyLmModel *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[5];
  *((void *)this + 82) = a2[6];
  char v5 = (std::__shared_weak_count *)*((void *)this + 116);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 919) < 0) {
    operator delete(*((void **)this + 112));
  }
  quasar::LmModel2::~LmModel2((quasar::DummyLmModel *)((char *)this + 656), a2 + 3);
  uint64_t v6 = a2[1];
  *(void *)this = v6;
  *(void *)((char *)this + *(void *)(v6 - 24)) = a2[2];
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  quasar::ModelLoader::~ModelLoader((quasar::DummyLmModel *)((char *)this + 8));
}

void *std::shared_ptr<kaldi::quasar::LmHandle>::shared_ptr[abi:ne180100]<quasar::FstLmHandle,std::default_delete<quasar::FstLmHandle>,void>(void *result, void *a2)
{
  if (*a2)
  {
    *double result = *a2 + *(void *)(*(void *)*a2 - 24);
    operator new();
  }
  *double result = 0;
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<quasar::FstLmHandle  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::FstLmHandle  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::FstLmHandle  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<quasar::DummyLmModel  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::DummyLmModel  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::DummyLmModel  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

double kaldi::nnet1::FixedAttentionComponent::FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 46) = a2;
  *((_DWORD *)this + 47) = a3;
  *((_WORD *)this + 96) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 28) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 232) = xmmword_1B255E480;
  *((_DWORD *)this + 62) = -1082130432;
  *(void *)((char *)this + 252) = 0x100000003;
  *((_WORD *)this + 130) = 0;
  *((unsigned char *)this + 262) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_1F0A4C5E0;
  *((void *)this + 22) = off_1F0A4C7E8;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = &unk_1F0A51768;
  *((unsigned char *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 9) = &unk_1F0A51768;
  *((unsigned char *)this + 112) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 15) = &unk_1F0A51768;
  *((unsigned char *)this + 160) = 0;
  *((unsigned char *)this + 168) = 0;
  return result;
}

kaldi::nnet1::FixedAttentionComponent *kaldi::nnet1::FixedAttentionComponent::FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this, int32x2_t *a2)
{
  *((int32x2_t *)this + 23) = *(int32x2_t *)((char *)&a2[1] + *(void *)(*(void *)a2 - 24));
  *((_WORD *)this + 96) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 28) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 232) = xmmword_1B255E480;
  *((_DWORD *)this + 62) = -1082130432;
  *(void *)((char *)this + 252) = 0x100000003;
  *((_WORD *)this + 130) = 0;
  *((unsigned char *)this + 262) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_1F0A4C5E0;
  *((void *)this + 22) = off_1F0A4C7E8;
  uint64_t v4 = (int32x2_t *)((char *)this + 24);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 3) = &unk_1F0A51768;
  *((unsigned char *)this + 64) = 0;
  char v5 = (int32x2_t *)((char *)this + 72);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 9) = &unk_1F0A51768;
  *((unsigned char *)this + 112) = 0;
  uint64_t v6 = (int32x2_t *)((char *)this + 120);
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 15) = &unk_1F0A51768;
  *((unsigned char *)this + 160) = 0;
  int32x2_t v7 = a2[2];
  *((int32x2_t *)this + 1) = a2[1];
  *((void *)this + 2) = (*(uint64_t (**)(int32x2_t))(**(void **)&v7 + 16))(v7);
  kaldi::CuMatrix<float>::operator=(v4, a2 + 3);
  kaldi::CuMatrix<float>::operator=(v5, a2 + 9);
  kaldi::CuMatrix<float>::operator=(v6, a2 + 15);
  *((unsigned char *)this + 168) = a2[21].i8[0];
  return this;
}

void sub_1B1CC09E0(_Unwind_Exception *a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[3];
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 2) = 0;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 72);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 24);
  quasar::Bitmap::~Bitmap(this);
}

void kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 176));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 176));
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this)
{
  id v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 176);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent((kaldi::nnet1::FixedAttentionComponent *)((char *)this + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::FixedAttentionComponent::Copy(kaldi::nnet1::FixedAttentionComponent *this)
{
}

void sub_1B1CC0C78(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40CEA1F95ALL);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::Copy(kaldi::nnet1::FixedAttentionComponent *this)
{
  kaldi::nnet1::FixedAttentionComponent::Copy((kaldi::nnet1::FixedAttentionComponent *)((char *)this
                                                                                      + *(void *)(*(void *)this
                                                                                                  - 32)));
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetType(kaldi::nnet1::FixedAttentionComponent *this)
{
  return 279;
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::GetType(kaldi::nnet1::FixedAttentionComponent *this)
{
  return 279;
}

void kaldi::nnet1::FixedAttentionComponent::InitData(void *a1, uint64_t *a2, uint64_t a3)
{
  memset(v38, 0, 24);
  uint64_t v4 = a2 + 4;
  uint64_t v5 = (char *)a1 + 12;
  uint64_t v6 = a1 + 1;
  while (1)
  {
    if ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_44;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v38);
    if (SHIBYTE(v38[2]) < 0) {
      break;
    }
    if (HIBYTE(v38[2]) == 15)
    {
      BOOL v14 = v38[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v38 + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v9 = (uint64_t)v5;
      if (!v14)
      {
LABEL_35:
        if (HIBYTE(v38[2]) == 12)
        {
          int v15 = v38;
          goto LABEL_39;
        }
        goto LABEL_59;
      }
    }
    else
    {
      if (HIBYTE(v38[2]) != 22) {
        goto LABEL_35;
      }
      BOOL v8 = v38[0] == (void *)0x53656372756F533CLL
        && v38[1] == (void *)0x656D694465746174
        && *(void **)((char *)&v38[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v9 = (uint64_t)v6;
      if (!v8) {
        goto LABEL_59;
      }
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, 0, v9);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  int v10 = v38[1];
  if (v38[1] != (void *)15)
  {
    if (v38[1] != (void *)22) {
      goto LABEL_37;
    }
    BOOL v11 = *(void *)v38[0] == 0x53656372756F533CLL && *((void *)v38[0] + 1) == 0x656D694465746174;
    BOOL v12 = v11 && *(void *)((char *)v38[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v9 = (uint64_t)v6;
    if (!v12) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  BOOL v13 = *(void *)v38[0] == 0x6574744178614D3CLL && *(void *)((char *)v38[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v9 = (uint64_t)v5;
  if (v13) {
    goto LABEL_34;
  }
  int v10 = v38[1];
LABEL_37:
  if (v10 != (void *)12) {
    goto LABEL_59;
  }
  int v15 = (void **)v38[0];
LABEL_39:
  std::string v16 = *v15;
  int v17 = *((_DWORD *)v15 + 2);
  if (v16 != (void *)0x6E6F706D6F432F3CLL || v17 != 1047817829)
  {
LABEL_59:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    id v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v38[2]) >= 0) {
      size_t v27 = v38;
    }
    else {
      size_t v27 = (void **)v38[0];
    }
    if (SHIBYTE(v38[2]) >= 0) {
      uint64_t v28 = HIBYTE(v38[2]);
    }
    else {
      uint64_t v28 = (uint64_t)v38[1];
    }
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" (SourceStateDimension|MaxAttentions)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
  }
LABEL_44:
  uint64_t v19 = a1[2];
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  size_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  kaldi::ReadToken(a2, 0, (uint64_t)&v35);
  long long v20 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v35);
  uint64_t v34 = 0;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v33, 3);
    size_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Initializing component of type ", 31);
    if (v37 >= 0) {
      uint64_t v22 = (void **)&v35;
    }
    else {
      uint64_t v22 = v35;
    }
    if (v37 >= 0) {
      uint64_t v23 = HIBYTE(v37);
    }
    else {
      uint64_t v23 = v36;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v33);
  }
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v34 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v34);
  kaldi::nnet1::Component::NewComponentOfType(v20);
  a1[2] = v25;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v25 + 96))(v25, a2, a3);
  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  if (SHIBYTE(v37) < 0) {
    operator delete(v35);
  }
  if (SHIBYTE(v38[2]) < 0) {
    operator delete(v38[0]);
  }
}

void *kaldi::nnet1::FixedAttentionComponent::Check(void *this)
{
  if (!*((unsigned char *)this + 168))
  {
    uint64_t v1 = (uint64_t)this;
    id v2 = (_DWORD *)this[2];
    if (!v2) {
      goto LABEL_5;
    }
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "this is a non-recurrent version, cannot have a recurrent internal component");
      goto LABEL_16;
    }
    if (this)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "no recursive inclusion");
    }
    else
    {
LABEL_5:
      int v3 = *(_DWORD *)(v1 + 12);
      if (v3 < 1 || (int v4 = *(_DWORD *)(v1 + 8), v4 <= 0))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"component is not initialized, max attention is ", 47);
        uint64_t v6 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", source state dimension is ", 28);
        std::ostream::operator<<();
      }
      else
      {
        uint64_t v5 = v1 + *(void *)(*(void *)v1 - 24);
        if (*(_DWORD *)(v5 + 8) + v4 * v3 == v2[2])
        {
          if (*(_DWORD *)(v5 + 12) == v2[3])
          {
            *(unsigned char *)(v1 + 168) = 1;
            return this;
          }
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"the output dim of attention component is ", 41);
          int v10 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" , however, the internal training component has output dim ", 59);
          std::ostream::operator<<();
        }
        else
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"component has input dim ", 24);
          int32x2_t v7 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", attentions ", 13);
          BOOL v8 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", source state dimension ", 25);
          uint64_t v9 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", however, the internal training component has input dim ", 57);
          std::ostream::operator<<();
        }
      }
    }
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return this;
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::InitData(void *a1, uint64_t *a2, uint64_t a3)
{
}

void kaldi::nnet1::FixedAttentionComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  memset(v28, 0, 24);
  uint64_t v6 = (char *)a1 + 12;
  int32x2_t v7 = a1 + 1;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_44;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)v28);
    if (SHIBYTE(v28[2]) < 0) {
      break;
    }
    if (HIBYTE(v28[2]) == 15)
    {
      BOOL v15 = v28[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v28 + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v10 = (uint64_t)v6;
      if (!v15)
      {
LABEL_35:
        if (HIBYTE(v28[2]) == 12)
        {
          std::string v16 = v28;
          goto LABEL_39;
        }
        goto LABEL_51;
      }
    }
    else
    {
      if (HIBYTE(v28[2]) != 22) {
        goto LABEL_35;
      }
      BOOL v9 = v28[0] == (void *)0x53656372756F533CLL
        && v28[1] == (void *)0x656D694465746174
        && *(void **)((char *)&v28[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v10 = (uint64_t)v7;
      if (!v9) {
        goto LABEL_51;
      }
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, a3, v10);
  }
  BOOL v11 = v28[1];
  if (v28[1] != (void *)15)
  {
    if (v28[1] != (void *)22) {
      goto LABEL_37;
    }
    BOOL v12 = *(void *)v28[0] == 0x53656372756F533CLL && *((void *)v28[0] + 1) == 0x656D694465746174;
    BOOL v13 = v12 && *(void *)((char *)v28[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v10 = (uint64_t)v7;
    if (!v13) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  BOOL v14 = *(void *)v28[0] == 0x6574744178614D3CLL && *(void *)((char *)v28[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v10 = (uint64_t)v6;
  if (v14) {
    goto LABEL_34;
  }
  BOOL v11 = v28[1];
LABEL_37:
  if (v11 != (void *)12) {
    goto LABEL_51;
  }
  std::string v16 = (void **)v28[0];
LABEL_39:
  int v17 = *v16;
  int v18 = *((_DWORD *)v16 + 2);
  if (v17 != (void *)0x6E6F706D6F432F3CLL || v18 != 1047817829)
  {
LABEL_51:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Unrecognized token ", 19);
    if (SHIBYTE(v28[2]) >= 0) {
      uint64_t v23 = v28;
    }
    else {
      uint64_t v23 = (void **)v28[0];
    }
    if (SHIBYTE(v28[2]) >= 0) {
      uint64_t v24 = HIBYTE(v28[2]);
    }
    else {
      uint64_t v24 = (uint64_t)v28[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
LABEL_44:
  uint64_t v20 = a1[2];
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  size_t v21 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v21) {
  a1[2] = v21;
  }
  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
}

void sub_1B1CC16C0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t kaldi::nnet1::FixedAttentionComponent::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<SourceStateDimension>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxAttentions>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "</Component>");
  uint64_t v6 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  kaldi::nnet1::Component::TypeToMarker(v6, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteBasicType<int>(a2, a3);
}

void sub_1B1CC1808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::WriteConfig(void *a1, void *a2, uint64_t a3)
{
  return kaldi::nnet1::FixedAttentionComponent::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::WriteData(void **a1)
{
  ((void (*)(void **))(*a1)[12])(a1);
  id v2 = *(uint64_t (**)(void))(*a1[2] + 104);
  return v2();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::WriteData(void *a1)
{
  uint64_t v1 = (void **)((char *)a1 + *(void *)(*a1 - 120));
  ((void (*)(void **))(*v1)[12])(v1);
  id v2 = *(uint64_t (**)(void))(*v1[2] + 104);
  return v2();
}

uint64_t kaldi::nnet1::FixedAttentionComponent::NumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 176))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::NumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 192) + 16) + 176))();
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetParams(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::GetParams(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 200) + 16) + 184))();
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetParams(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SetParams(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 208) + 16) + 192))();
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 208))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 224) + 16) + 208))();
}

uint64_t kaldi::nnet1::FixedAttentionComponent::PerturbParams(kaldi::nnet1::FixedAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(float))(**((void **)this + 2) + 216))(a2);
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::PerturbParams(kaldi::nnet1::FixedAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(float))(**(void **)((char *)this + *(void *)(*(void *)this - 232) + 16)
                                          + 216))(a2);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::Info(kaldi::nnet1::FixedAttentionComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  (*(void (**)(kaldi::nnet1::FixedAttentionComponent *, void *, void))(*(void *)this + 96))(this, v7, 0);
  (*(void (**)(void **__return_ptr))(**((void **)this + 2) + 64))(__p);
  if ((v6 & 0x80u) == 0) {
    id v2 = __p;
  }
  else {
    id v2 = (void **)__p[0];
  }
  if ((v6 & 0x80u) == 0) {
    uint64_t v3 = v6;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v2, v3);
  if ((char)v6 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B1CC1D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::Info(kaldi::nnet1::FixedAttentionComponent *this)
{
  return kaldi::nnet1::FixedAttentionComponent::Info((kaldi::nnet1::FixedAttentionComponent *)((char *)this
                                                                                             + *(void *)(*(void *)this - 80)));
}

uint64_t kaldi::nnet1::FixedAttentionComponent::InfoGradient(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 72))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::InfoGradient(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 88) + 16) + 72))();
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetTrainOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(void *)(*(void *)a1 - 24);
  long long v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v2 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v2 + 56) = v3;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SetTrainOptions(void *a1, uint64_t a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 280);
  long long v3 = &v2[*(void *)(*(void *)v2 - 24)];
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v3 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v3 + 56) = v4;
  return (*(uint64_t (**)(void))(**((void **)v2 + 2) + 264))();
}

void kaldi::nnet1::FixedAttentionComponent::SetSourceStates(int32x2_t *a1, uint64_t a2, void *a3)
{
  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  uint64_t v23 = a3;
  unint64_t v6 = a3[1] - *a3;
  kaldi::CuMatrix<float>::Resize(a1 + 3, v6 >> 2, *(unsigned int *)(*(void *)&a1[2] + 8), 0, 0);
  unint64_t v25 = v6 >> 2;
  if ((int)(v6 >> 2) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v24 = (v6 >> 2);
    int v8 = a1[1].i32[1];
    do
    {
      if (v8 >= 1)
      {
        int v9 = *(_DWORD *)(*v23 + 4 * v7);
        if (v9 >= 1)
        {
          int v10 = v9 & ~(v9 >> 31);
          int v11 = v7 + v25 * (v9 - 1);
          int v12 = 1;
          do
          {
            unsigned __int32 v13 = a1[1].u32[0];
            int v14 = v13 * (v12 - 1);
            __int32 v15 = a1[6].i32[0];
            uint64_t v16 = *(void *)&a1[4] + 4 * v14;
            __int32 v17 = a1[6].i32[1] - v14;
            int32x2_t v18 = a1[7];
            *((void *)&v28 + 1) = __PAIR64__(a1[5].i32[1], v13);
            *(void *)&long long v29 = __PAIR64__(v17, v15);
            *((int32x2_t *)&v29 + 1) = v18;
            uint64_t v30 = &unk_1F0A472D0;
            size_t v27 = &unk_1F0A472A0;
            *(void *)&long long v28 = v16;
            uint64_t v31 = v16 + 4 * v15 * (int)v7;
            uint64_t v32 = v13;
            int32x2_t v33 = v18;
            uint64_t v19 = *(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v11;
            unsigned int v20 = *(_DWORD *)(a2 + 16);
            uint64_t v21 = *(void *)(a2 + 32);
            v26[0] = &unk_1F0A472D0;
            v26[1] = v19;
            void v26[3] = v21;
            v26[2] = v20;
            kaldi::CuVectorBase<float>::CopyFromVec(&v30, (uint64_t)v26);
            uint64_t v30 = &unk_1F0A472D0;
            uint64_t v31 = 0;
            LODWORD(v32) = 0;
            int32x2_t v33 = 0;
            size_t v27 = &unk_1F0A472A0;
            long long v28 = 0u;
            long long v29 = 0u;
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v27);
            int v8 = a1[1].i32[1];
            if (v12 >= v8) {
              break;
            }
            v11 -= v25;
          }
          while (v10 != v12++);
        }
      }
      ++v7;
    }
    while (v7 != v24);
  }
}

void sub_1B1CC20DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,uint64_t a24)
{
  a22 = 0;
  a23 = 0;
  a24 = 0;
  *uint64_t v24 = 0u;
  v24[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FixedAttentionComponent::GetSourceDiffs(uint64_t a1, uint64_t a2, void *a3, int32x2_t *a4)
{
  kaldi::nnet1::FixedAttentionComponent::Check((void *)a1);
  uint64_t v24 = a3;
  unint64_t v8 = a3[1] - *a3;
  kaldi::CuMatrix<float>::Resize(a4, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  unint64_t v26 = v8 >> 2;
  if ((int)(v8 >> 2) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v25 = (v8 >> 2);
    int v10 = *(_DWORD *)(a1 + 12);
    do
    {
      if (v10 >= 1)
      {
        int v11 = *(_DWORD *)(*v24 + 4 * v9);
        if (v11 >= 1)
        {
          int v12 = v11 & ~(v11 >> 31);
          int v13 = v9 + v26 * (v11 - 1);
          int v14 = 1;
          do
          {
            uint64_t v15 = *(void *)&a4[1] + 4 * a4[3].i32[0] * v13;
            unsigned __int32 v16 = a4[2].u32[0];
            int32x2_t v17 = a4[4];
            v34[0] = &unk_1F0A472D0;
            v34[1] = v15;
            v34[3] = v17;
            v34[2] = v16;
            LODWORD(v15) = *(_DWORD *)(a1 + 8);
            int v18 = v15 * (v14 - 1);
            unsigned int v19 = *(_DWORD *)(a1 + 96);
            uint64_t v20 = *(void *)(a1 + 80) + 4 * v18;
            unsigned int v21 = *(_DWORD *)(a1 + 100) - v18;
            uint64_t v22 = *(void *)(a1 + 104);
            *((void *)&v28 + 1) = __PAIR64__(*(_DWORD *)(a1 + 92), v15);
            *(void *)&long long v29 = __PAIR64__(v21, v19);
            *((void *)&v29 + 1) = v22;
            uint64_t v30 = &unk_1F0A472D0;
            size_t v27 = &unk_1F0A472A0;
            *(void *)&long long v28 = v20;
            uint64_t v31 = v20 + 4 * (int)(v19 * v9);
            uint64_t v32 = v15;
            uint64_t v33 = v22;
            kaldi::CuVectorBase<float>::CopyFromVec(v34, (uint64_t)&v30);
            uint64_t v30 = &unk_1F0A472D0;
            uint64_t v31 = 0;
            LODWORD(v32) = 0;
            uint64_t v33 = 0;
            size_t v27 = &unk_1F0A472A0;
            long long v28 = 0u;
            long long v29 = 0u;
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v27);
            int v10 = *(_DWORD *)(a1 + 12);
            if (v14 >= v10) {
              break;
            }
            v13 -= v26;
          }
          while (v12 != v14++);
        }
      }
      ++v9;
    }
    while (v9 != v25);
  }
}

void sub_1B1CC2300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20)
{
  a18 = 0;
  a19 = 0;
  a20 = 0;
  *uint64_t v20 = 0u;
  v20[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetCurrentAlignment()
{
  return 0;
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetOverallAlignment()
{
  return 0;
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(unsigned char *)(this + 168) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(unsigned char *)(this + 168) = 0;
  }
  return this;
}

void kaldi::nnet1::FixedAttentionComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::FixedAttentionComponent::Check((void *)a1);
  int v6 = *(_DWORD *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 44);
  int v8 = *(_DWORD *)(a2 + 20) / v7;
  int v9 = *(_DWORD *)(a1 + 12);
  *(void *)(a1 + 56) = *(void *)(a3 + 32);
  if (v8 >= 1)
  {
    int v10 = 0;
    int v21 = v6 * v9;
    do
    {
      uint64_t v11 = *(void *)(a1 + 32) + 4 * v21;
      int v12 = *(_DWORD *)(a1 + 52) - v21;
      uint64_t v13 = *(void *)(a1 + 56);
      LODWORD(v26[1]) = *(_DWORD *)(a1 + 8 + *(void *)(*(void *)a1 - 24));
      *(void *)((char *)&v26[1] + 4) = *(void *)(a1 + 44);
      HIDWORD(v26[2]) = v12;
      void v26[3] = v13;
      uint64_t v25 = &unk_1F0A472A0;
      v26[0] = v11;
      unsigned int v14 = *(_DWORD *)(a2 + 24);
      uint64_t v15 = *(void *)(a2 + 8) + 4 * (int)(v14 * v10);
      LODWORD(v13) = *(_DWORD *)(a2 + 28) - v14 * v10;
      uint64_t v16 = *(void *)(a2 + 32);
      DWORD2(v23) = *(_DWORD *)(a2 + 16);
      HIDWORD(v23) = v7;
      *(void *)&long long v24 = __PAIR64__(v13, v14);
      *((void *)&v24 + 1) = v16;
      uint64_t v22 = &unk_1F0A472A0;
      *(void *)&long long v23 = v15;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v25, (uint64_t)&v22, 111);
      uint64_t v22 = &unk_1F0A472A0;
      long long v23 = 0u;
      long long v24 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
      uint64_t v25 = &unk_1F0A472A0;
      memset(v26, 0, sizeof(v26));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v25);
      unsigned int v17 = *(_DWORD *)(a3 + 24);
      uint64_t v18 = *(void *)(a3 + 8) + 4 * (int)(v17 * v10);
      int v19 = *(_DWORD *)(a3 + 28) - v17 * v10;
      uint64_t v20 = *(void *)(a3 + 32);
      LODWORD(v26[1]) = *(_DWORD *)(a3 + 16);
      HIDWORD(v26[1]) = v7;
      v26[2] = __PAIR64__(v19, v17);
      void v26[3] = v20;
      uint64_t v25 = &unk_1F0A472A0;
      v26[0] = v18;
      (*(void (**)(void, uint64_t, void **, void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16), a1 + 24, &v25, 0);
      uint64_t v25 = &unk_1F0A472A0;
      memset(v26, 0, sizeof(v26));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v25);
      v10 += v7;
      --v8;
    }
    while (v8);
  }
}

void sub_1B1CC25B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  *int v12 = 0u;
  v12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::nnet1::FixedAttentionComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::nnet1::FixedAttentionComponent::Check((void *)a1);
  uint64_t v8 = *(unsigned int *)(a1 + 44);
  uint64_t v9 = (*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 12));
  int v10 = *(_DWORD *)(a2 + 20) / (int)v8;
  *(void *)(a1 + 104) = *(void *)(a5 + 32);
  *(void *)(a1 + 152) = *(void *)(a5 + 32);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 72), v8, v9, 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 120), v8, *(unsigned int *)(*(void *)(a1 + 16) + 8), 0, 0);
  if (v10 >= 1)
  {
    int v11 = 0;
    do
    {
      int v38 = v10;
      uint64_t v12 = *(void *)(a1 + 16);
      unsigned int v13 = *(_DWORD *)(a2 + 24);
      uint64_t v14 = *(void *)(a2 + 8) + 4 * (int)(v13 * v11);
      int v15 = *(_DWORD *)(a2 + 28) - v13 * v11;
      uint64_t v16 = *(void *)(a2 + 32);
      LODWORD(v45[1]) = *(_DWORD *)(a2 + 16);
      HIDWORD(v45[1]) = v8;
      v45[2] = __PAIR64__(v15, v13);
      v45[3] = v16;
      size_t v44 = &unk_1F0A472A0;
      v45[0] = v14;
      unsigned int v17 = *(_DWORD *)(a3 + 24);
      uint64_t v18 = *(void *)(a3 + 8) + 4 * (int)(v17 * v11);
      int v19 = *(_DWORD *)(a3 + 28) - v17 * v11;
      uint64_t v20 = *(void *)(a3 + 32);
      LODWORD(v43[1]) = *(_DWORD *)(a3 + 16);
      HIDWORD(v43[1]) = v8;
      v43[2] = __PAIR64__(v19, v17);
      v43[3] = v20;
      id v42 = &unk_1F0A472A0;
      v43[0] = v18;
      unsigned int v21 = *(_DWORD *)(a4 + 24);
      uint64_t v22 = *(void *)(a4 + 8) + 4 * (int)(v21 * v11);
      int v23 = *(_DWORD *)(a4 + 28) - v21 * v11;
      uint64_t v24 = *(void *)(a4 + 32);
      DWORD2(v40) = *(_DWORD *)(a4 + 16);
      HIDWORD(v40) = v8;
      *(void *)&long long v41 = __PAIR64__(v23, v21);
      *((void *)&v41 + 1) = v24;
      uint64_t v39 = &unk_1F0A472A0;
      *(void *)&long long v40 = v22;
      (*(void (**)(uint64_t, void **, void **, void **, uint64_t, void))(*(void *)v12 + 128))(v12, &v44, &v42, &v39, a1 + 120, 0);
      uint64_t v39 = &unk_1F0A472A0;
      long long v40 = 0u;
      long long v41 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v39);
      id v42 = &unk_1F0A472A0;
      memset(v43, 0, sizeof(v43));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
      size_t v44 = &unk_1F0A472A0;
      memset(v45, 0, sizeof(v45));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
      unsigned int v25 = *(_DWORD *)(a5 + 24);
      uint64_t v26 = *(void *)(a5 + 8) + 4 * (int)(v25 * v11);
      int v27 = *(_DWORD *)(a5 + 28) - v25 * v11;
      uint64_t v28 = *(void *)(a5 + 32);
      LODWORD(v45[1]) = *(_DWORD *)(a5 + 16);
      HIDWORD(v45[1]) = v8;
      v45[2] = __PAIR64__(v27, v25);
      v45[3] = v28;
      size_t v44 = &unk_1F0A472A0;
      v45[0] = v26;
      uint64_t v29 = *(void *)(a1 + 128) + 4 * (int)v9;
      int v30 = *(_DWORD *)(a1 + 148) - v9;
      uint64_t v31 = *(void *)(a1 + 152);
      LODWORD(v43[1]) = *(_DWORD *)(a1 + 8 + *(void *)(*(void *)a1 - 24));
      *(void *)((char *)&v43[1] + 4) = *(void *)(a1 + 140);
      HIDWORD(v43[2]) = v30;
      v43[3] = v31;
      id v42 = &unk_1F0A472A0;
      v43[0] = v29;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>(v32, (uint64_t)&v42, 111);
      id v42 = &unk_1F0A472A0;
      memset(v43, 0, sizeof(v43));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
      size_t v44 = &unk_1F0A472A0;
      memset(v45, 0, sizeof(v45));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
      uint64_t v33 = *(void *)(a1 + 128);
      int v34 = *(_DWORD *)(a1 + 148);
      uint64_t v35 = *(void *)(a1 + 152);
      LODWORD(v45[1]) = v9;
      *(void *)((char *)&v45[1] + 4) = *(void *)(a1 + 140);
      HIDWORD(v45[2]) = v34;
      v45[3] = v35;
      size_t v44 = &unk_1F0A472A0;
      v45[0] = v33;
      kaldi::CuMatrixBase<float>::AddMat(a1 + 72, (uint64_t)&v44, 111, 1.0, 1.0);
      size_t v44 = &unk_1F0A472A0;
      memset(v45, 0, sizeof(v45));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
      v11 += v8;
      --v10;
    }
    while (v38 != 1);
  }
}

void sub_1B1CC2A08(_Unwind_Exception *a1)
{
  *(void *)(v3 - 128) = v1;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v3 - 128));
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetGradientNormalization(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 240))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SetGradientNormalization(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 256) + 16) + 240))();
}

void kaldi::nnet1::FixedAttentionComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::FixedAttentionComponent::Check((void *)a1);
  int v8 = *(_DWORD *)(a1 + 8);
  int v28 = *(_DWORD *)(a1 + 44);
  int v9 = *(_DWORD *)(a2 + 20) / v28;
  int v10 = *(_DWORD *)(a1 + 12);
  *(void *)(a1 + 56) = a4;
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 272))();
  int v34 = &unk_1F0A4A6D0;
  long long v12 = *(_OWORD *)(v11 + 23);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)(v11 + 8);
  *(_OWORD *)((char *)&v35[3] + 3) = v12;
  float v13 = v35[0];
  v35[0] = v35[0] / (float)v9;
  (*(void (**)(void))(**(void **)(a1 + 16) + 264))();
  int v14 = v28;
  if (v9 >= 1)
  {
    int v15 = 0;
    int v27 = v8 * v10;
    do
    {
      uint64_t v16 = *(void *)(a1 + 32) + 4 * v27;
      int v17 = *(_DWORD *)(a1 + 52) - v27;
      uint64_t v18 = *(void *)(a1 + 56);
      LODWORD(v33[1]) = *(_DWORD *)(a1 + 8 + *(void *)(*(void *)a1 - 24));
      *(void *)((char *)&v33[1] + 4) = *(void *)(a1 + 44);
      HIDWORD(v33[2]) = v17;
      v33[3] = v18;
      uint64_t v32 = &unk_1F0A472A0;
      v33[0] = v16;
      unsigned int v19 = *(_DWORD *)(a2 + 24);
      uint64_t v20 = *(void *)(a2 + 8) + 4 * (int)(v19 * v15);
      LODWORD(v18) = *(_DWORD *)(a2 + 28) - v19 * v15;
      uint64_t v21 = *(void *)(a2 + 32);
      DWORD2(v30) = *(_DWORD *)(a2 + 16);
      HIDWORD(v30) = v14;
      *(void *)&long long v31 = __PAIR64__(v18, v19);
      *((void *)&v31 + 1) = v21;
      uint64_t v29 = &unk_1F0A472A0;
      *(void *)&long long v30 = v20;
      int v22 = v14;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v32, (uint64_t)&v29, 111);
      uint64_t v29 = &unk_1F0A472A0;
      long long v30 = 0u;
      long long v31 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v29);
      uint64_t v32 = &unk_1F0A472A0;
      memset(v33, 0, sizeof(v33));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v32);
      unsigned int v23 = *(_DWORD *)(a3 + 24);
      uint64_t v24 = *(void *)(a3 + 8) + 4 * (int)(v23 * v15);
      int v25 = *(_DWORD *)(a3 + 28) - v23 * v15;
      uint64_t v26 = *(void *)(a3 + 32);
      LODWORD(v33[1]) = *(_DWORD *)(a3 + 16);
      HIDWORD(v33[1]) = v22;
      v33[2] = __PAIR64__(v25, v23);
      v33[3] = v26;
      uint64_t v32 = &unk_1F0A472A0;
      v33[0] = v24;
      (*(void (**)(void, uint64_t, void **, uint64_t, void))(**(void **)(a1 + 16) + 232))(*(void *)(a1 + 16), a1 + 24, &v32, a4, 0);
      (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 16) + 256))(*(void *)(a1 + 16), a4, 0);
      uint64_t v32 = &unk_1F0A472A0;
      memset(v33, 0, sizeof(v33));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v32);
      int v14 = v28;
      v15 += v28;
      --v9;
    }
    while (v9);
  }
  v35[0] = v13;
  (*(void (**)(void, void **))(**(void **)(a1 + 16) + 264))(*(void *)(a1 + 16), &v34);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&v34);
}

void sub_1B1CC2EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void kaldi::nnet1::FixedAttentionComponent::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  int v6 = (const void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 64))(a1);
  if (v6) {
  else
  }
    int v7 = 0;
  int v8 = *((_DWORD *)v7 + 11);
  int v9 = a1[2];
  int v10 = a1[3];
  int v11 = *(_DWORD *)(a2 + 20) / v8;
  uint64_t v12 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 112))(a1);
  kaldi::Vector<float>::Resize(a4, v12, 0);
  uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 112))(a1);
  memset(v32, 0, 24);
  kaldi::Vector<float>::Resize((void **)v32, v13, 1);
  if (v11 > 0)
  {
    int v14 = 0;
    int v25 = v9 * v10;
    do
    {
      uint64_t v15 = *((void *)v7 + 4) + 4 * v25;
      int v16 = *((_DWORD *)v7 + 13) - v25;
      uint64_t v17 = *((void *)v7 + 7);
      LODWORD(v28[2]) = *(_DWORD *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 8);
      *(void *)((char *)&v28[2] + 4) = *(void *)(v7 + 44);
      HIDWORD(v28[3]) = v16;
      v28[4] = v17;
      v28[0] = &unk_1F0A472A0;
      v28[1] = v15;
      unsigned int v18 = *(_DWORD *)(a2 + 24);
      uint64_t v19 = *(void *)(a2 + 8) + 4 * (int)(v18 * v14);
      LODWORD(v17) = *(_DWORD *)(a2 + 28) - v18 * v14;
      uint64_t v20 = *(void *)(a2 + 32);
      DWORD2(v30) = *(_DWORD *)(a2 + 16);
      HIDWORD(v30) = v8;
      *(void *)&long long v31 = __PAIR64__(v17, v18);
      *((void *)&v31 + 1) = v20;
      uint64_t v29 = &unk_1F0A472A0;
      *(void *)&long long v30 = v19;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v28, (uint64_t)&v29, 111);
      uint64_t v29 = &unk_1F0A472A0;
      long long v30 = 0u;
      long long v31 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v29);
      v28[0] = &unk_1F0A472A0;
      memset(&v28[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v28);
      unsigned int v21 = *(_DWORD *)(a3 + 24);
      uint64_t v22 = *(void *)(a3 + 8) + 4 * (int)(v21 * v14);
      int v23 = *(_DWORD *)(a3 + 28) - v21 * v14;
      uint64_t v24 = *(void *)(a3 + 32);
      DWORD2(v30) = *(_DWORD *)(a3 + 16);
      HIDWORD(v30) = v8;
      *(void *)&long long v31 = __PAIR64__(v23, v21);
      *((void *)&v31 + 1) = v24;
      uint64_t v29 = &unk_1F0A472A0;
      *(void *)&long long v30 = v22;
      kaldi::CuMatrix<float>::CuMatrix(v28, &v29, 111);
      uint64_t v29 = &unk_1F0A472A0;
      long long v30 = 0u;
      long long v31 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v29);
      (*(void (**)(char *, char *, void *, const float **))(*(void *)v7 + 168))(v7, v7 + 24, v28, v32);
      kaldi::VectorBase<float>::AddVec<float>((uint64_t)a4, v32, 1.0);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v28);
      v14 += v8;
      --v11;
    }
    while (v11);
  }
  (*(void (**)(char *))(*(void *)v7 + 8))(v7);
  kaldi::Vector<float>::Destroy((uint64_t)v32);
}

void sub_1B1CC32E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _OWORD *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::Vector<float>::Destroy(v17 - 112);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::GetGradient(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
}

uint64_t kaldi::nnet1::AttentionBaseComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t kaldi::nnet1::AttentionBaseComponent::SetMaxAttentions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

__n128 kaldi::nnet1::UpdatableComponent::SetTrainOptions(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 8);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 23);
  *(__n128 *)(a1 + 56) = result;
  return result;
}

uint64_t kaldi::nnet1::UpdatableComponent::GetTrainOptions(kaldi::nnet1::UpdatableComponent *this)
{
  return (uint64_t)this + 48;
}

void kaldi::DecodableInterface::NumFramesReady(kaldi::DecodableInterface *this)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "NumFramesReady() not implemented for this decodable type.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

uint64_t kaldi::DecodableInterface::SkipFrame(kaldi::DecodableInterface *this)
{
  return 0;
}

uint64_t kaldi::DecodableInterface::NumFramesSkipped(kaldi::DecodableInterface *this)
{
  return 0;
}

uint64_t kaldi::DecodableInterface::HasSilencePosterior(kaldi::DecodableInterface *this)
{
  return 0;
}

double kaldi::DecodableInterface::GetSilencePosterior(kaldi::DecodableInterface *this)
{
  return 0.0;
}

uint64_t kaldi::DecodableInterface::HasEndpointerScore(kaldi::DecodableInterface *this)
{
  return 0;
}

double kaldi::DecodableInterface::GetEndpointerScore(kaldi::DecodableInterface *this)
{
  return 0.0;
}

void std::vector<kaldi::Vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<kaldi::Vector<float>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*,kaldi::Vector<float>*,kaldi::Vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      kaldi::Vector<float>::Resize((void **)v4, *(unsigned int *)(v6 + 8), 1);
      kaldi::VectorBase<float>::CopyFromVec(v4, (const void **)v6);
      v6 += 24;
      uint64_t v4 = v11 + 24;
      v11 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1CC34EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 24;
    kaldi::Vector<float>::Destroy(v1);
  }
}

void quasar::PhoneticMatchDecoder::loadModelOverrides(quasar::PhoneticMatchDecoder *this, quasar::SystemConfig *a2)
{
  uint64_t Ptree = quasar::SystemConfig::getPtree((uint64_t)a2, (uint64_t)this + 8);
  std::string::basic_string[abi:ne180100]<0>(&v3, "model-override-json");
  quasar::PTree::getStringOptional(Ptree, (uint64_t)&v3);
}

void sub_1B1CC4164(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a13);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a51);
  if (*(char *)(v52 - 113) < 0) {
    operator delete(*(void **)(v52 - 136));
  }
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  if (*(char *)(v52 - 65) < 0) {
    operator delete(*(void **)(v52 - 88));
  }
  if (a2 == 2)
  {
    v55 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      size_t v56 = v55;
      v51[34] = 0u;
      v51[35] = 0u;
      v51[32] = 0u;
      v51[33] = 0u;
      v51[30] = 0u;
      v51[31] = 0u;
      v51[28] = 0u;
      v51[29] = 0u;
      v51[26] = 0u;
      v51[27] = 0u;
      v51[24] = 0u;
      v51[25] = 0u;
      v51[22] = 0u;
      v51[23] = 0u;
      v51[20] = 0u;
      v51[21] = 0u;
      v51[19] = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a51);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a51, (uint64_t)"Error reading JSON config file: ", 32);
      id v58 = (const char *)(*(uint64_t (**)(void *))(*(void *)v56 + 16))(v56);
      size_t v59 = strlen(v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a51);
    }
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    size_t v60 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      v61 = v60;
      v51[34] = 0u;
      v51[35] = 0u;
      v51[32] = 0u;
      v51[33] = 0u;
      v51[30] = 0u;
      v51[31] = 0u;
      v51[28] = 0u;
      v51[29] = 0u;
      v51[26] = 0u;
      v51[27] = 0u;
      v51[24] = 0u;
      v51[25] = 0u;
      v51[22] = 0u;
      v51[23] = 0u;
      v51[20] = 0u;
      v51[21] = 0u;
      v51[19] = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a51);
      id v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a51, (uint64_t)"Internal C++ exception: ", 24);
      v63 = (const char *)(*(uint64_t (**)(void *))(*(void *)v61 + 16))(v61);
      size_t v64 = strlen(v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a51);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1B1CC3AB0);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void **)*a3;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      char v9 = a2;
    }
    else {
      char v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v9, v6);
  }
  uint64_t v10 = (char *)a3 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

void quasar::PhoneticMatchDecoder::registerParams(quasar::PhoneticMatchDecoder *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "phonetic-match");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 48, 0, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  quasar::PhoneticMatchDecoder::loadModelOverrides(this, a2);
}

void sub_1B1CC5084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SymbolDecoderOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Symbol decoder beam");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Symbol decoder max active states");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "beam-delta");
  std::string::basic_string[abi:ne180100]<0>(__p, "Symbol decoder beam delta");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "hash-ratio");
  std::string::basic_string[abi:ne180100]<0>(__p, "Symbol decoder hash ratio");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "ac-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Symbol decoder acoustic scale");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-total-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max total allocated tokens at any time.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 20, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1CC5448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PhoneticMatchDecoder::getJoinedRegexpsFromFile@<X0>(void *a1@<X8>)
{
  v22[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v20);
  memset(&__p, 0, sizeof(__p));
  char v2 = 1;
  memset(&v18, 0, sizeof(v18));
  uint64_t v3 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(v20[0] - 24)));
    uint64_t v4 = std::locale::use_facet(v16, v3);
    unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
    std::locale::~locale(v16);
    size_t v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, (uint64_t)&__p, v5);
    if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
      break;
    }
    quasar::trim(&__p);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if ((v2 & 1) == 0) {
        std::string::append(&v18, "|");
      }
      std::operator+<char>();
      int v8 = std::string::append(&v15, ")");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      int64_t v17 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16[0].__locale_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (v17 >= 0) {
        locale = (const std::string::value_type *)v16;
      }
      else {
        locale = (const std::string::value_type *)v16[0].__locale_;
      }
      if (v17 >= 0) {
        std::string::size_type v11 = HIBYTE(v17);
      }
      else {
        std::string::size_type v11 = (std::string::size_type)v16[1].__locale_;
      }
      std::string::append(&v18, locale, v11);
      if (SHIBYTE(v17) < 0) {
        operator delete(v16[0].__locale_);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      char v2 = 0;
    }
  }
  std::string::size_type v12 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  char v13 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v12 = v18.__r_.__value_.__l.__size_;
  }
  if (v12)
  {
    std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,std::string &,void>(a1);
    if ((*((unsigned char *)&v18.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  *a1 = 0;
  a1[1] = 0;
  if (v13 < 0) {
LABEL_23:
  }
    operator delete(v18.__r_.__value_.__l.__data_);
LABEL_24:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v20[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](&v21);
  std::istream::~istream();
  return MEMORY[0x1B3EA8520](v22);
}

void sub_1B1CC57A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  std::ifstream::~ifstream(&a35);
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchDecoder::finishInit(quasar::PhoneticMatchDecoder *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  quasar::SystemConfig::Version::Version(&__p, 70, 0);
  if (quasar::SystemConfig::Version::operator>=((_DWORD *)this + 8, &__p))
  {
    quasar::QsrTextSymbolTable::init(*((const std::string **)this + 105), (quasar::PhoneticMatchDecoder *)((char *)this + 32), 1, 0, 1);
  }
  else
  {
    quasar::ModelLoader::readSymbolTable(*((void *)this + 46), (uint64_t)this + 448, 4, 0, &v9);
    LODWORD(v11) = 3;
    std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding,void>((uint64_t *)&v9, (int *)&v11, &__p);
    long long v2 = __p;
    long long __p = 0uLL;
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 106);
    *(_OWORD *)((char *)this + 840) = v2;
    if (v3)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      if (*((void *)&__p + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
      }
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  if (*((char *)this + 519) < 0)
  {
    if (!*((void *)this + 63)) {
      goto LABEL_15;
    }
  }
  else if (!*((unsigned char *)this + 519))
  {
    goto LABEL_15;
  }
  (*(void (**)(long long *__return_ptr))(**((void **)this + 46) + 16))(&__p);
  long long v4 = __p;
  long long __p = 0uLL;
  unsigned __int8 v5 = (std::__shared_weak_count *)*((void *)this + 108);
  *(_OWORD *)((char *)this + 856) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*((void *)&__p + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
    }
  }
LABEL_15:
  quasar::SystemConfig::Version::Version(&__p, 158, 0);
  if (quasar::SystemConfig::Version::operator<((_DWORD *)this + 8, &__p))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Config version < 158 so using FST compatibility mode so subroutine states with no outgoing arcs denotes an exit state", 117);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    char v6 = 1;
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Config version >= 158 so exit states in subroutines are expected to be proper final states - phonetic match will fail otherwise", 127);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    char v6 = 0;
  }
  *((unsigned char *)this + 912) = v6;
  (*(void (**)(long long *__return_ptr))(**((void **)this + 46) + 16))(&__p);
  long long v7 = __p;
  long long __p = 0uLL;
  int v8 = (std::__shared_weak_count *)*((void *)this + 110);
  *(_OWORD *)((char *)this + 872) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (*((void *)&__p + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
    }
  }
  operator new();
}

void sub_1B1CC6664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a38);
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  a16 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (v40 < 0) {
    operator delete(v39);
  }
  uint64_t v39 = v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v39);
  if (v42 < 0) {
    operator delete(v41[38]);
  }
  std::ifstream::~ifstream(&v43);
  _Unwind_Resume(a1);
}

void sub_1B1CC6684(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1CC6704);
}

void sub_1B1CC66B0()
{
}

void sub_1B1CC66B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1CC67C4);
}

void sub_1B1CC66D0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1CC67DCLL);
}

void sub_1B1CC66E0()
{
}

void sub_1B1CC66E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,...)
{
  va_start(va, a29);
  if (a13 < 0) {
    operator delete(__p);
  }
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  if (a7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a7);
  }
  JUMPOUT(0x1B1CC6774);
}

void sub_1B1CC6714(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::locale a35)
{
}

void sub_1B1CC6724()
{
}

void sub_1B1CC672C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35)
{
  a35 = (void **)&STACK[0x220];
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a35);
  JUMPOUT(0x1B1CC67DCLL);
}

void sub_1B1CC6744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *__pa, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28,uint64_t a29,std::__split_buffer<std::wstring> *a30)
{
  if (SHIBYTE(a21) < 0) {
    operator delete(__pa);
  }
  __pa = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  if (a25)
  {
    a26 = a25;
    operator delete(a25);
  }
  if (SHIBYTE(a30) < 0) {
    operator delete(a28);
  }
  JUMPOUT(0x1B1CC67A4);
}

void quasar::PhoneticMatchDecoder::loadConfidenceModel(_DWORD *a1, uint64_t a2)
{
  long long v4 = a1 + 176;
  uint64_t FeatureMap = quasar::PhoneticMatchConfFeatures::GetFeatureMap((quasar::PhoneticMatchConfFeatures *)a1);
  std::vector<float>::resize((uint64_t)v4, *(void *)(FeatureMap + 24), &quasar::kConfidenceFeatureDefaultLow);
  v55 = (float *)a1;
  a1[174] = -1027080192;
  memset(&__str, 0, sizeof(__str));
  char v59 = 0;
  kaldi::Input::Input(v58, a2, &v59);
  int v6 = 0;
  long long v7 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    int v8 = (void *)kaldi::Input::Stream((kaldi::Input *)v58);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    std::locale v9 = std::locale::use_facet((const std::locale *)v56, v7);
    unsigned __int8 v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale((std::locale *)v56);
    std::string::size_type v11 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (uint64_t)&__str, v10);
    if ((*((unsigned char *)v11 + *(void *)(*v11 - 24) + 32) & 5) != 0) {
      break;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = __str.__r_.__value_.__l.__size_;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    long long v14 = (char *)p_str + size;
    if (size >= 1)
    {
      long long v15 = p_str;
      do
      {
        long long v16 = memchr(v15, 32, size);
        if (!v16) {
          break;
        }
        if (*v16 == 32) {
          goto LABEL_15;
        }
        long long v15 = (std::string *)(v16 + 1);
        int64_t size = v14 - (unsigned char *)v15;
      }
      while (v14 - (unsigned char *)v15 > 0);
    }
    long long v16 = v14;
LABEL_15:
    if (v16 == v14) {
      std::string::size_type v17 = -1;
    }
    else {
      std::string::size_type v17 = v16 - (unsigned char *)p_str;
    }
    std::string::basic_string(&v57, &__str, 0, v17, (std::allocator<char> *)v56);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t v18 = __str.__r_.__value_.__l.__size_;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v19 = &__str;
    }
    else {
      long long v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    long long v20 = (char *)v19 + v18;
    if (v18 < 1)
    {
      std::string::size_type v24 = 0;
    }
    else
    {
      size_t v21 = v18;
      long long v22 = v19;
      do
      {
        long long v23 = memchr(v22, 32, v21);
        if (!v23) {
          break;
        }
        if (*v23 == 32) {
          goto LABEL_30;
        }
        long long v22 = (std::string *)(v23 + 1);
        size_t v21 = v20 - (unsigned char *)v22;
      }
      while (v20 - (unsigned char *)v22 > 0);
      long long v23 = (char *)v19 + v18;
LABEL_30:
      if (v23 == v20) {
        std::string::size_type v24 = 0;
      }
      else {
        std::string::size_type v24 = v23 - (unsigned char *)v19 + 1;
      }
      size_t v25 = v18;
      long long v26 = v19;
      do
      {
        unint64_t v27 = (unint64_t)memchr(v26, 32, v25);
        if (!v27) {
          break;
        }
        if (*(unsigned char *)v27 == 32) {
          goto LABEL_40;
        }
        long long v26 = (std::string *)(v27 + 1);
        size_t v25 = v20 - (unsigned char *)v26;
      }
      while (v20 - (unsigned char *)v26 > 0);
    }
    unint64_t v27 = (unint64_t)v19 + v18;
LABEL_40:
    long long v28 = (char *)v19 + ~v27;
    if ((unsigned char *)v27 == v20) {
      long long v28 = 0;
    }
    std::string::basic_string(v56, &__str, v24, (std::string::size_type)&v28[v18], (std::allocator<char> *)v61);
    if (SHIBYTE(v56[0].__r_.__value_.__r.__words[2]) < 0)
    {
      long long v31 = (void *)v56[0].__r_.__value_.__r.__words[0];
      double v30 = atof(v56[0].__r_.__value_.__l.__data_);
      operator delete(v31);
    }
    else
    {
      double v30 = atof((const char *)v56);
    }
    float v32 = v30;
    if ((*((unsigned char *)&v57.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v57.__r_.__value_.__l.__size_ == 8 && *(void *)v57.__r_.__value_.__l.__data_ == 0x746E6174736E6F63) {
        goto LABEL_68;
      }
      if (v57.__r_.__value_.__l.__size_ != 9) {
        goto LABEL_57;
      }
      uint64_t v33 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v57.__r_.__value_.__r.__words[2]) == 8)
      {
        if (v57.__r_.__value_.__r.__words[0] != 0x746E6174736E6F63) {
          goto LABEL_57;
        }
        goto LABEL_68;
      }
      if (HIBYTE(v57.__r_.__value_.__r.__words[2]) != 9) {
        goto LABEL_57;
      }
      uint64_t v33 = &v57;
    }
    std::string::size_type v34 = v33->__r_.__value_.__r.__words[0];
    int v35 = v33->__r_.__value_.__s.__data_[8];
    if (v34 != 0x7065637265746E69 || v35 != 116)
    {
LABEL_57:
      uint64_t v37 = (void *)quasar::PhoneticMatchConfFeatures::GetFeatureMap(v29);
      int v38 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v37, (unsigned __int8 *)&v57);
      uint64_t v39 = (quasar::PhoneticMatchConfFeatures *)quasar::PhoneticMatchConfFeatures::GetFeatureMap((quasar::PhoneticMatchConfFeatures *)v38);
      if (!v38)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v56);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Feature ", 8);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v52 = &v57;
        }
        else {
          uint64_t v52 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v53 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v53 = v57.__r_.__value_.__l.__size_;
        }
        id v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" is not in the model definition.", 32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v56);
      }
      char v40 = (void *)quasar::PhoneticMatchConfFeatures::GetFeatureMap(v39);
      *(float *)(*v4
               + 4
               * *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v40, (unsigned __int8 *)&v57)+ 10)) = v32;
      if (kaldi::g_kaldi_verbose_level >= 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v56, 2);
        long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Setting ", 8);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v42 = &v57;
        }
        else {
          char v42 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v43 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v43 = v57.__r_.__value_.__l.__size_;
        }
        size_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" to ", 4);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v56);
      }
      ++v6;
      goto LABEL_70;
    }
LABEL_68:
    v55[174] = v32;
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Setting constant term/intercept to ", 35);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v56);
    }
LABEL_70:
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v56);
    id v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Read in Confidence Model ", 25);
    int v46 = *(char *)(a2 + 23);
    if (v46 >= 0) {
      uint64_t v47 = a2;
    }
    else {
      uint64_t v47 = *(void *)a2;
    }
    if (v46 >= 0) {
      uint64_t v48 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v48 = *(void *)(a2 + 8);
    }
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" added ", 7);
    id v50 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" features", 9);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v56);
  }
  kaldi::Input::~Input((kaldi::Input *)v58);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B1CC6D50(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  JUMPOUT(0x1B1CC6D88);
}

void sub_1B1CC6D70(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1B1CC6D88);
}

void sub_1B1CC6D84(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  kaldi::Input::~Input((kaldi::Input *)(v1 - 152));
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  _Unwind_Resume(a1);
}

void sub_1B1CC6D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  kaldi::Input::~Input((kaldi::Input *)(v12 - 152));
  if (*(char *)(v12 - 113) < 0) {
    operator delete(*(void **)(v12 - 136));
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::GetSinglePron(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B1CC70A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va1);
  int v8 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::PhoneticMatchConfFeatures::GetFeatureMap(quasar::PhoneticMatchConfFeatures *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::flag, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::{lambda(void)#1} &&>>);
  }
  return quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::m_heap;
}

void quasar::PhoneticMatchDecoder::joinTokens(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  memset(&__str, 0, sizeof(__str));
  memset(&v24, 0, sizeof(v24));
  uint64_t v21 = 0;
  long long v22 = 0;
  unint64_t v23 = 0;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = *a2 + 48;
    do
    {
      std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v24.__r_.__value_.__l.__size_;
      }
      if (size) {
        std::string::append(&v24, " ");
      }
      int v10 = *(char *)(v8 + 23);
      if (v10 >= 0) {
        uint64_t v11 = (const std::string::value_type *)v8;
      }
      else {
        uint64_t v11 = *(const std::string::value_type **)v8;
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        std::string::size_type v12 = *(void *)(v8 + 8);
      }
      std::string::append(&v24, v11, v12);
      uint64_t v13 = v8 + 176;
      v8 += 224;
    }
    while (v13 != v7);
  }
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  while (v14 != v15)
  {
    if (*(char *)(v14 + 23) < 0)
    {
      if (!*(void *)(v14 + 8)) {
        goto LABEL_27;
      }
    }
    else if (!*(unsigned char *)(v14 + 23))
    {
      goto LABEL_27;
    }
    long long v16 = v22;
    if ((unint64_t)v22 >= v23)
    {
      int64_t v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v21, (long long *)v14);
    }
    else
    {
      if ((*(unsigned char *)(v14 + 23) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v14, *(void *)(v14 + 8));
      }
      else
      {
        long long v17 = *(_OWORD *)v14;
        v22->__r_.__value_.__r.__words[2] = *(void *)(v14 + 16);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      int64_t v18 = v16 + 1;
    }
    long long v22 = v18;
LABEL_27:
    v14 += 224;
  }
  kaldi::JoinVectorToString(&v21, "~w00", 1, (long long *)&__str);
  std::string::operator=((std::string *)a4, &__str);
  uint64_t v19 = *a3;
  if (*a3 == a3[1])
  {
    *(_DWORD *)(a4 + 28) = 0;
    *(void *)(a4 + 36) = 0;
    MEMORY[0x1B3EA7B20](a4 + 48, "");
  }
  else
  {
    uint64_t v20 = a2[1];
    *(_DWORD *)(a4 + 28) = *(_DWORD *)(*a2 + 28);
    *(void *)(a4 + 32) = *(void *)(v20 - 192);
    *(_DWORD *)(a4 + 40) = *(_DWORD *)(v19 + 40);
    std::string::operator=((std::string *)(a4 + 48), &v24);
  }
  long long v26 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B1CC7388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v23 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 56));
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

BOOL quasar::lowestGraphCostSort(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 4) < *(float *)(a2 + 4);
}

void quasar::PhoneticMatchDecoder::FetchResults(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  memset(v24, 0, sizeof(v24));
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  memset(v20, 0, sizeof(v20));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v20, 0, 0, 0);
  memset(v21, 0, sizeof(v21));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v21, *((uint64_t *)&v26 + 1), v27, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v27 - *((void *)&v26 + 1)) >> 5));
  memset(v22, 0, sizeof(v22));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v22, v28, *((uint64_t *)&v28 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v28 + 1) - v28) >> 5));
  long long v16 = v23;
  memset(v17, 0, sizeof(v17));
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__init_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(v17, *(uint64_t **)v24, *(uint64_t **)&v24[8], 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)&v24[8] - *(void *)v24) >> 3));
  if ((v24[47] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v24[24], *(std::string::size_type *)&v24[32]);
  }
  else {
    std::string __p = *(std::string *)&v24[24];
  }
  v19[0] = *(_DWORD *)&v24[48];
  *(_DWORD *)((char *)v19 + 3) = *(_DWORD *)&v24[51];
  quasar::PhoneticMatchDecoder::FetchResultsImpl(a1, a2, a3, v8, 0, v20, &v16, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v30[0] = (void **)v17;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](v30);
  v30[0] = (void **)v22;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v30);
  v30[0] = (void **)v21;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v30);
  v30[0] = (void **)v20;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v30);
  int v10 = (long long *)*a4;
  uint64_t v11 = (long long *)a4[1];
  if ((long long *)*a4 == v11)
  {
    uint64_t v13 = (long long *)*a4;
  }
  else
  {
    std::string::size_type v12 = (unsigned __int8 **)(a1 + 760);
    do
    {
      quasar::PhoneticMatchResult::cleanupPartialSpans((uint64_t)v10, v12);
      int v10 = (long long *)((char *)v10 + 72);
    }
    while (v10 != v11);
    uint64_t v13 = (long long *)*a4;
    int v10 = (long long *)a4[1];
  }
  unint64_t v14 = 126 - 2 * __clz(0x8E38E38E38E38E39 * (((char *)v10 - (char *)v13) >> 3));
  v30[0] = (void **)quasar::lowestGraphCostSort;
  if (v10 == v13) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*,false>(v13, v10, (uint64_t (**)(long long *, long long *))v30, v15, 1, v9);
  if ((v24[47] & 0x80000000) != 0) {
    operator delete(*(void **)&v24[24]);
  }
  v30[0] = (void **)v24;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](v30);
  *(void *)&long long v23 = &v28;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  *(void *)&long long v23 = (char *)&v26 + 8;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  *(void *)&long long v23 = &v25;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
}

void sub_1B1CC76E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  *(void *)(v28 - 104) = v27;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 104));
  quasar::PhoneticMatchAlignmentSpan::~PhoneticMatchAlignmentSpan(&a18);
  quasar::PhoneticMatchResult::~PhoneticMatchResult(&a27);
  quasar::PhoneticMatchAlignmentSpan::~PhoneticMatchAlignmentSpan((void **)(v28 - 176));
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchDecoder::FetchResultsImpl(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, int a5, uint64_t *a6, long long *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(*(void *)(*(void *)(*(void *)(a3 + 8) + 64) + 8 * a4) + 24);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(*(void *)(a3 + 8) + 64) + 8 * a4) + 32) - v8;
  if (v9)
  {
    uint64_t v11 = a7;
    unint64_t v14 = v9 / 20;
    v55 = (std::string *)((char *)a7 + 40);
    std::string v57 = a7 + 4;
    id v54 = (unsigned __int8 **)(a1 + 760);
    uint64_t v53 = (uint64_t)(a8 + 2);
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    unint64_t v15 = v14 - 1;
    long long v16 = (int *)(v8 + 16);
    while (1)
    {
      unint64_t v61 = v15;
      id v62 = v16;
      uint64_t v17 = *((void *)v16 - 2);
      int v18 = *(v16 - 2);
      uint64_t v63 = *v16;
      v109 = 0;
      v110 = 0;
      unint64_t v111 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v109, *a6, a6[1], 0x6DB6DB6DB6DB6DB7 * ((a6[1] - *a6) >> 5));
      v112 = 0;
      v113 = 0;
      unint64_t v114 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v112, a6[3], a6[4], 0x6DB6DB6DB6DB6DB7 * ((a6[4] - a6[3]) >> 5));
      uint64_t v115 = 0;
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v115, a6[6], a6[7], 0x6DB6DB6DB6DB6DB7 * ((a6[7] - a6[6]) >> 5));
      long long v103 = *v11;
      v105 = 0;
      unint64_t v106 = 0;
      v104 = 0;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__init_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(&v104, *((uint64_t **)v11 + 2), *((uint64_t **)v11 + 3), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)v11 + 3) - *((void *)v11 + 2)) >> 3));
      if (*((char *)v11 + 63) < 0) {
        std::string::__init_copy_ctor_external(&v107, *((const std::string::value_type **)v11 + 5), *((void *)v11 + 6));
      }
      else {
        std::string v107 = *v55;
      }
      *(_DWORD *)v108 = *v57;
      *(_DWORD *)&v108[3] = *(_DWORD *)((char *)v57 + 3);
      quasar::PhoneticMatchDecoder::getAlignmentPhoneToken(a2, a5, v17 > 0xFF, (uint64_t)&v88);
      if (v17 >= 0x100 && (_BYTE)v17 && HIDWORD(v17))
      {
        uint64_t v19 = v90;
        if ((v90 & 0x80u) != 0) {
          uint64_t v19 = v89;
        }
        if (v19)
        {
          if (!quasar::PhoneticMatchAlignmentSpan::empty((quasar::PhoneticMatchAlignmentSpan *)&v109))
          {
            uint64_t v20 = v105;
            if ((unint64_t)v105 >= v106)
            {
              matched = (uint64_t *)std::vector<quasar::PhoneticMatchAlignmentSpan>::__push_back_slow_path<quasar::PhoneticMatchAlignmentSpan const&>((uint64_t *)&v104, (uint64_t *)&v109);
            }
            else
            {
              std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan const&>((uint64_t)&v106, v105, (uint64_t *)&v109);
              matched = v20 + 9;
            }
            v105 = matched;
          }
          quasar::PhoneticMatchAlignmentSpan::clear((quasar::PhoneticMatchAlignmentSpan *)&v109);
        }
      }
      else if (v17 < 0x100)
      {
        goto LABEL_45;
      }
      uint64_t v22 = v90;
      if ((v90 & 0x80u) != 0) {
        uint64_t v22 = v89;
      }
      if (v22)
      {
        long long v23 = v110;
        if ((unint64_t)v110 < v111)
        {
          quasar::Token::Token(v110, (const quasar::Token *)&v88);
          goto LABEL_27;
        }
LABEL_33:
        std::string v24 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v109, (const quasar::Token *)&v88);
        goto LABEL_34;
      }
      long long v23 = v109;
      long long v25 = v110;
      if (v109 == v110)
      {
        if ((unint64_t)v109 >= v111) {
          goto LABEL_33;
        }
        quasar::Token::Token(v109, (const quasar::Token *)&v88);
LABEL_27:
        std::string v24 = (std::string *)((char *)v23 + 224);
LABEL_34:
        v110 = v24;
        goto LABEL_45;
      }
      int v26 = v92;
      LODWORD(v110[-8].__r_.__value_.__l.__data_) = v92;
      HIDWORD(v25[-8].__r_.__value_.__r.__words[0]) = v26;
      if (v25[-7].__r_.__value_.__s.__data_[15] < 0) {
        std::string::pointer data = v25[-7].__r_.__value_.__l.__data_;
      }
      else {
        std::string::pointer data = (std::string::pointer)v25[-7].__r_.__value_.__s.__data_[15];
      }
      uint64_t v28 = (std::string *)((char *)v25 - 176);
      if (data) {
        std::string::append((std::string *)((char *)v25 - 176), " ");
      }
      if ((v94 & 0x80u) == 0) {
        uint64_t v29 = v93;
      }
      else {
        uint64_t v29 = (void **)v93[0];
      }
      if ((v94 & 0x80u) == 0) {
        std::string::size_type v30 = v94;
      }
      else {
        std::string::size_type v30 = (std::string::size_type)v93[1];
      }
      std::string::append(v28, (const std::string::value_type *)v29, v30);
LABEL_45:
      if (!HIDWORD(v17))
      {
        unsigned int v33 = a5;
        if ((_BYTE)v17)
        {
          std::string::size_type v34 = v113;
          if (v112 == v113)
          {
            quasar::Token::Token((quasar::Token *)v71);
            HIDWORD(v72) = v91;
            int v35 = v113;
            if ((unint64_t)v113 >= v114)
            {
              uint64_t v36 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v112, (const quasar::Token *)v71);
            }
            else
            {
              quasar::Token::Token(v113, (const quasar::Token *)v71);
              uint64_t v36 = (std::string *)((char *)v35 + 224);
            }
            v113 = v36;
            if (SBYTE7(v81) < 0) {
              operator delete(v80[0]);
            }
            if (SBYTE7(v79) < 0) {
              operator delete(v78[0]);
            }
            *(void *)&long long v86 = (char *)v77 + 8;
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
            if (SBYTE7(v77[0]) < 0) {
              operator delete(v76[0]);
            }
            *(void *)&long long v86 = (char *)v75 + 8;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
            if (SBYTE7(v75[0]) < 0) {
              operator delete(__p[0]);
            }
            if (SBYTE7(v72) < 0) {
              operator delete(v71[0]);
            }
            std::string::size_type v34 = v113;
          }
          if (v34[-7].__r_.__value_.__s.__data_[15] < 0) {
            std::string::pointer v40 = v34[-7].__r_.__value_.__l.__data_;
          }
          else {
            std::string::pointer v40 = (std::string::pointer)v34[-7].__r_.__value_.__s.__data_[15];
          }
          if (v40) {
            std::string::append((std::string *)((char *)v34 - 176), " ");
          }
          (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(a1 + 936) + 32) + 88))(v71);
          if ((SBYTE7(v72) & 0x80u) == 0) {
            long long v41 = v71;
          }
          else {
            long long v41 = (void **)v71[0];
          }
          if ((SBYTE7(v72) & 0x80u) == 0) {
            std::string::size_type v42 = BYTE7(v72);
          }
          else {
            std::string::size_type v42 = (std::string::size_type)v71[1];
          }
          std::string::append((std::string *)((char *)v34 - 176), (const std::string::value_type *)v41, v42);
          if (SBYTE7(v72) < 0) {
            operator delete(v71[0]);
          }
          int v43 = v92;
          LODWORD(v34[-8].__r_.__value_.__l.__data_) = v92;
          HIDWORD(v34[-8].__r_.__value_.__r.__words[0]) = v43;
          unsigned int v33 = a5;
        }
        goto LABEL_101;
      }
      double v31 = quasar::Token::Token((quasar::Token *)v71);
      int v32 = v91;
      DWORD1(v73) = v92;
      HIDWORD(v72) = v91;
      LODWORD(v73) = v92;
      if ((_BYTE)v17)
      {
        (*(void (**)(long long *__return_ptr, double))(**(void **)(*(void *)(a1 + 936) + 32) + 88))(&v86, v31);
        unsigned int v33 = a5;
        if (SBYTE7(v75[0]) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = v86;
        *(void *)&v75[0] = v87;
        int v32 = v91;
      }
      else
      {
        unsigned int v33 = a5;
      }
      HIDWORD(v72) = v32;
      BYTE13(v73) = 0;
      quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(a1 + 840), &v86);
      if (SBYTE7(v72) < 0) {
        operator delete(v71[0]);
      }
      *(void *)&long long v72 = v87;
      *(_OWORD *)uint64_t v71 = v86;
      if (SHIBYTE(v87) < 0)
      {
        if (!v71[1])
        {
LABEL_61:
          char v37 = 0;
          goto LABEL_62;
        }
      }
      else if (!HIBYTE(v87))
      {
        goto LABEL_61;
      }
      char v37 = 1;
LABEL_62:
      BYTE12(v73) = v37;
      int v38 = v113;
      if ((unint64_t)v113 >= v114)
      {
        uint64_t v39 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v112, (const quasar::Token *)v71);
      }
      else
      {
        quasar::Token::Token(v113, (const quasar::Token *)v71);
        uint64_t v39 = (std::string *)((char *)v38 + 224);
      }
      v113 = v39;
      if (SBYTE7(v81) < 0) {
        operator delete(v80[0]);
      }
      if (SBYTE7(v79) < 0) {
        operator delete(v78[0]);
      }
      *(void *)&long long v86 = (char *)v77 + 8;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
      if (SBYTE7(v77[0]) < 0) {
        operator delete(v76[0]);
      }
      *(void *)&long long v86 = (char *)v75 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
      if (SBYTE7(v75[0]) < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE7(v72) < 0) {
        operator delete(v71[0]);
      }
LABEL_101:
      if (v17 <= 0xFF) {
        uint64_t v44 = v33;
      }
      else {
        uint64_t v44 = v33 + 1;
      }
      uint64_t v45 = *(void *)(*(void *)(*(void *)(a3 + 8) + 64) + 8 * v63);
      uint64_t v46 = *(void *)(v45 + 24);
      uint64_t v47 = *(void *)(v45 + 32);
      if (v47 == v46)
      {
        if (!quasar::PhoneticMatchAlignmentSpan::empty((quasar::PhoneticMatchAlignmentSpan *)&v109))
        {
          uint64_t v48 = v105;
          if ((unint64_t)v105 >= v106)
          {
            v49 = (uint64_t *)std::vector<quasar::PhoneticMatchAlignmentSpan>::__push_back_slow_path<quasar::PhoneticMatchAlignmentSpan const&>((uint64_t *)&v104, (uint64_t *)&v109);
          }
          else
          {
            std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan const&>((uint64_t)&v106, v105, (uint64_t *)&v109);
            v49 = v48 + 9;
          }
          v105 = v49;
        }
        kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, (std::string *)v71);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *(_OWORD *)v71;
        v107.__r_.__value_.__r.__words[2] = v72;
        LODWORD(v103) = v18;
        if (quasar::gLogLevel >= 4)
        {
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          *(_OWORD *)v80 = 0u;
          long long v81 = 0u;
          *(_OWORD *)v78 = 0u;
          long long v79 = 0u;
          memset(v77, 0, sizeof(v77));
          *(_OWORD *)v76 = 0u;
          *(_OWORD *)std::string __p = 0u;
          memset(v75, 0, sizeof(v75));
          long long v72 = 0u;
          long long v73 = 0u;
          *(_OWORD *)uint64_t v71 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v71);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"numWildcardWordMatches=", 23);
          quasar::PhoneticMatchResult::numWildcardWordMatches((uint64_t)&v103, v54);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v71);
        }
        v108[5] = (int)quasar::PhoneticMatchResult::numWildcardWordMatches((uint64_t)&v103, v54) > 0;
        unint64_t v50 = a8[1];
        if (v50 >= a8[2])
        {
          uint64_t v51 = std::vector<quasar::PhoneticMatchResult>::__push_back_slow_path<quasar::PhoneticMatchResult const&>(a8, (uint64_t)&v103);
        }
        else
        {
          std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult const&>(v53, a8[1], (uint64_t)&v103);
          uint64_t v51 = v50 + 72;
          a8[1] = v50 + 72;
        }
        a8[1] = v51;
      }
      else
      {
        memset(v68, 0, sizeof(v68));
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v68, (uint64_t)v109, (uint64_t)v110, 0x6DB6DB6DB6DB6DB7 * (((char *)v110 - (char *)v109) >> 5));
        memset(v69, 0, sizeof(v69));
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v69, (uint64_t)v112, (uint64_t)v113, 0x6DB6DB6DB6DB6DB7 * (((char *)v113 - (char *)v112) >> 5));
        memset(v70, 0, sizeof(v70));
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v70, v115, v116, 0x6DB6DB6DB6DB6DB7 * ((v116 - v115) >> 5));
        long long v64 = v103;
        memset(v65, 0, sizeof(v65));
        std::vector<quasar::PhoneticMatchAlignmentSpan>::__init_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(v65, v104, v105, 0x8E38E38E38E38E39 * (v105 - v104));
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v66, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
        }
        else {
          std::string v66 = v107;
        }
        v67[0] = *(_DWORD *)v108;
        *(_DWORD *)((char *)v67 + 3) = *(_DWORD *)&v108[3];
        quasar::PhoneticMatchDecoder::FetchResultsImpl(a1, a2, a3, v63, v44, v68, &v64, a8);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        v71[0] = v65;
        std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
        v71[0] = v70;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
        v71[0] = v69;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
        v71[0] = v68;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      }
      if (v102 < 0) {
        operator delete(v101);
      }
      if (v100 < 0) {
        operator delete(v99);
      }
      v71[0] = &v98;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      if (v97 < 0) {
        operator delete(v96);
      }
      v71[0] = &v95;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      if ((char)v94 < 0) {
        operator delete(v93[0]);
      }
      if ((char)v90 < 0) {
        operator delete(v88);
      }
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v107.__r_.__value_.__l.__data_);
      }
      v71[0] = &v104;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      v71[0] = &v115;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      v71[0] = &v112;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      v71[0] = &v109;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      BOOL v52 = v47 == v46;
      uint64_t v11 = a7;
      if (!v52)
      {
        long long v16 = v62 + 5;
        unint64_t v15 = v61 - 1;
        if (v61) {
          continue;
        }
      }
      return;
    }
  }
}

void sub_1B1CC81E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p)
{
  quasar::Token::~Token(&__p);
  quasar::Token::~Token((void **)&STACK[0x290]);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)(v53 - 256));
  quasar::PhoneticMatchAlignmentSpan::~PhoneticMatchAlignmentSpan((void **)(v53 - 184));
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchResult::~PhoneticMatchResult(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  char v2 = this + 2;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::PhoneticMatchAlignmentSpan::~PhoneticMatchAlignmentSpan(void **this)
{
  char v2 = this + 6;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  char v2 = this + 3;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  char v2 = this;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::PhoneticMatchDecoder::getAlignmentPhoneToken(uint64_t *a1@<X1>, int a2@<W2>, char a3@<W3>, uint64_t a4@<X8>)
{
  double v8 = quasar::Token::Token((quasar::Token *)v18);
  uint64_t v9 = *a1;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a1[1];
LABEL_6:
    if (v9 == v10)
    {
      *(void *)&v20[8] = 0;
      *(_DWORD *)&v20[4] = 0;
      *(_OWORD *)a4 = *(_OWORD *)v18;
      *(void *)(a4 + 16) = v19;
      v18[0] = 0;
      v18[1] = 0;
      uint64_t v19 = 0;
      *(_OWORD *)(a4 + 24) = *(_OWORD *)v20;
      *(void *)(a4 + 38) = *(void *)&v20[14];
      *(void *)(a4 + 64) = v22;
      *(_OWORD *)(a4 + 48) = *(_OWORD *)v21;
LABEL_15:
      v21[0] = 0;
      v21[1] = 0;
      *(_OWORD *)(a4 + 72) = v23;
      *(void *)(a4 + 88) = v24;
      uint64_t v22 = 0;
      long long v23 = 0uLL;
      uint64_t v24 = 0;
      long long v13 = *(_OWORD *)v25;
      *(void *)(a4 + 112) = v26;
      *(_OWORD *)(a4 + 96) = v13;
      v25[0] = 0;
      v25[1] = 0;
      *(_OWORD *)(a4 + 120) = v27;
      *(void *)(a4 + 136) = v28;
      uint64_t v26 = 0;
      long long v27 = 0uLL;
      uint64_t v28 = 0;
      long long v14 = *(_OWORD *)v29;
      *(void *)(a4 + 160) = v30;
      *(_OWORD *)(a4 + 144) = v14;
      v29[0] = 0;
      v29[1] = 0;
      int v15 = v31;
      *(_WORD *)(a4 + 172) = v32;
      *(_DWORD *)(a4 + 168) = v15;
      long long v16 = *(_OWORD *)__p;
      *(void *)(a4 + 192) = v34;
      *(_OWORD *)(a4 + 176) = v16;
      uint64_t v30 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v34 = 0;
      long long v17 = v35;
      *(_DWORD *)(a4 + 216) = v36;
      *(_OWORD *)(a4 + 200) = v17;
      goto LABEL_16;
    }
    if (a2)
    {
      if (0x6DB6DB6DB6DB6DB7 * ((v10 - v9) >> 5) <= (unint64_t)a2)
      {
        float v12 = (float)*(unsigned int *)(v10 - 192);
        goto LABEL_14;
      }
      double v11 = (double)(*(_DWORD *)(v9 + 224 * a2 + 28) + *(_DWORD *)(v9 + 224 * a2 - 192));
    }
    else
    {
      LODWORD(v8) = *(_DWORD *)(v9 + 28);
      double v11 = (double)*(unint64_t *)&v8;
    }
    float v12 = v11 * 0.5;
LABEL_14:
    *(_DWORD *)&v20[8] = v12;
    *(_DWORD *)&v20[12] = v12;
    *(_DWORD *)&v20[4] = v12;
    *(_OWORD *)a4 = *(_OWORD *)v18;
    *(void *)(a4 + 16) = v19;
    v18[0] = 0;
    v18[1] = 0;
    uint64_t v19 = 0;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)v20;
    *(void *)(a4 + 38) = *(void *)&v20[14];
    *(_OWORD *)(a4 + 48) = *(_OWORD *)v21;
    *(void *)(a4 + 64) = v22;
    goto LABEL_15;
  }
  uint64_t v10 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v10 - v9) >> 5) < (unint64_t)a2) {
    goto LABEL_6;
  }
  quasar::Token::Token((std::string *)a4, (const quasar::Token *)(v9 + 224 * a2));
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
LABEL_16:
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
  char v37 = (void **)&v27;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v37);
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  char v37 = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v37);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
}

void sub_1B1CC86A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::push_back[abi:ne180100](uint64_t *a1, const quasar::Token *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a1, a2);
  }
  else
  {
    quasar::Token::Token((std::string *)a1[1], a2);
    uint64_t result = v3 + 224;
    a1[1] = v3 + 224;
  }
  a1[1] = result;
  return result;
}

void sub_1B1CC8704(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchDecoder::applyPlaceholders(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      quasar::Token::Token(&v21, (const quasar::Token *)v3);
      for (i = *(uint64_t **)(a1 + 1040); i; i = (uint64_t *)*i)
      {
        if (quasar::URegularExpressionWrapper::isMatch((URegularExpression **)i[2], v3))
        {
          if (quasar::gLogLevel >= 4)
          {
            memset(v20, 0, sizeof(v20));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
            uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Matched placeholder for word=", 29);
            int v8 = *(char *)(v3 + 23);
            if (v8 >= 0) {
              uint64_t v9 = v3;
            }
            else {
              uint64_t v9 = *(void *)v3;
            }
            if (v8 >= 0) {
              uint64_t v10 = *(unsigned __int8 *)(v3 + 23);
            }
            else {
              uint64_t v10 = *(void *)(v3 + 8);
            }
            double v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
            float v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" replacing with pron=\"", 22);
            int v13 = *((char *)i + 55);
            if (v13 >= 0) {
              uint64_t v14 = (uint64_t)(i + 4);
            }
            else {
              uint64_t v14 = i[4];
            }
            if (v13 >= 0) {
              uint64_t v15 = *((unsigned __int8 *)i + 55);
            }
            else {
              uint64_t v15 = i[5];
            }
            long long v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\"", 1);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v20);
          }
          std::string::operator=(&v22, (const std::string *)(i + 4));
        }
      }
      unint64_t v17 = a3[1];
      if (v17 >= a3[2])
      {
        uint64_t v18 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, (const quasar::Token *)&v21);
      }
      else
      {
        quasar::Token::Token((std::string *)a3[1], (const quasar::Token *)&v21);
        uint64_t v18 = v17 + 224;
        a3[1] = v17 + 224;
      }
      a3[1] = v18;
      if (v30 < 0) {
        operator delete(__p);
      }
      if (v28 < 0) {
        operator delete(v27);
      }
      *(void *)&v20[0] = &v26;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
      if (v25 < 0) {
        operator delete(v24);
      }
      *(void *)&v20[0] = &v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      v3 += 224;
    }
    while (v3 != v4);
  }
}

void sub_1B1CC8934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
}

void quasar::PhoneticMatchDecoder::getPhoneSegmentation(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *a4;
  for (uint64_t i = a4[1]; i != v7; quasar::Token::~Token((void **)(i - 224)))
    ;
  a4[1] = v7;
  if (a2[1] != *a2)
  {
    quasar::copyAndTrim(*a2 + 48, &v8);
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    quasar::split((uint64_t)&v8, (uint64_t *)&__p, 0, (unint64_t)&v10);
  }
}

void sub_1B1CC8E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  std::string __p = (void *)(v55 - 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::PhoneticMatchDecoder::doPm(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, _DWORD *a7, _DWORD *a8)
{
  id v54 = 0;
  uint64_t v55 = 0;
  size_t v56 = 0;
  uint64_t v13 = *a5;
  uint64_t v14 = a5[1];
  if (v14 != *a5)
  {
    do
    {
      v14 -= 72;
      std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100]((uint64_t)(a5 + 2), v14);
    }
    while (v14 != v13);
  }
  a5[1] = v13;
  *a7 = 0;
  *a8 = 0;
  uint64_t v15 = *a3;
  uint64_t v16 = a3[1];
  if (*a3 == v16)
  {
LABEL_27:
    char v28 = quasar::StopWatch::StopWatch((quasar::StopWatch *)v53, (clockid_t)a2);
    quasar::StopWatch::resume(v28, v29);
    if (v55 != v54) {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v36 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Number of phones is 0", 21);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v36);
    }
    *(void *)&long long v36 = v53;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
    goto LABEL_40;
  }
  while ((*(char *)(v15 + 71) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v15 + 71)) {
      goto LABEL_8;
    }
LABEL_26:
    v15 += 224;
    if (v15 == v16) {
      goto LABEL_27;
    }
  }
  if (!*(void *)(v15 + 56)) {
    goto LABEL_26;
  }
LABEL_8:
  int v17 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 936) + 40) + 96))(*(void *)(*(void *)(a1 + 936) + 40), v15 + 48);
  int v18 = v17;
  if (v17 != -1)
  {
    uint64_t v19 = v55;
    if (v55 >= v56)
    {
      std::string v21 = v54;
      uint64_t v22 = (v55 - v54) >> 2;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = v56 - v54;
      if ((v56 - v54) >> 1 > v23) {
        unint64_t v23 = v24 >> 1;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
        a2 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        a2 = v23;
      }
      if (a2)
      {
        char v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v56, a2);
        std::string v21 = v54;
        uint64_t v19 = v55;
      }
      else
      {
        char v25 = 0;
      }
      uint64_t v26 = &v25[4 * v22];
      *(_DWORD *)uint64_t v26 = v18;
      uint64_t v20 = v26 + 4;
      while (v19 != v21)
      {
        int v27 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v26 - 1) = v27;
        v26 -= 4;
      }
      id v54 = v26;
      uint64_t v55 = v20;
      size_t v56 = &v25[4 * a2];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v55 = v17;
      uint64_t v20 = v19 + 4;
    }
    uint64_t v55 = v20;
    goto LABEL_26;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    char v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Phone '", 7);
    int v31 = *(char *)(v15 + 71);
    if (v31 >= 0) {
      uint64_t v32 = v15 + 48;
    }
    else {
      uint64_t v32 = *(void *)(v15 + 48);
    }
    if (v31 >= 0) {
      uint64_t v33 = *(unsigned __int8 *)(v15 + 71);
    }
    else {
      uint64_t v33 = *(void *)(v15 + 56);
    }
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"' is not a valid phone symbol", 29);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v36);
  }
LABEL_40:
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }
  return 0;
}

void sub_1B1CC990C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(&a48);
  a13 = (void **)&a50;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a13);
  kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::~SymbolDecoder((uint64_t *)&a61);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&STACK[0x2E8]);
  a61 = (void **)&STACK[0x2F8];
  std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100](&a61);
  a61 = (void **)&STACK[0x310];
  std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100](&a61);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((void *)(v61 - 248));
  a61 = (void **)(v61 - 232);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a61);
  uint64_t v63 = *(void **)(v61 - 144);
  if (v63)
  {
    *(void *)(v61 - 136) = v63;
    operator delete(v63);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::Decode(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8 != -1)
  {
    uint64_t v9 = *(void *)(a1 + 72);
    do
    {
      uint64_t v10 = (uint64_t *)(v9 + 16 * v8);
      v10[1] = 0;
      uint64_t v8 = *v10;
    }
    while (v8 != -1);
  }
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = -1;
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 96);
    do
    {
      uint64_t v13 = v11;
      uint64_t v11 = *(void *)(v11 + 8);
      *(void *)(v13 + 8) = v12;
      uint64_t v12 = v13;
    }
    while (v11);
    *(void *)(a1 + 96) = v13;
  }
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = 0;
  int v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 24))(*(void *)(a1 + 128));
  if (v14 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    unint64_t v23 = fst::LogMessage::LogMessage((fst *)&v30, (uint64_t)__p);
    uint64_t v24 = (void *)fst::cerr(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Cannot perform phonetic match since LG FST is empty", 51);
  }
  else
  {
    if (a2[1] - *a2 == a3[1] - *a3)
    {
      kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink((void *)a1, v14, 0, 0, -1, 0, 0, 0.0);
      kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ProcessNonemitting((uint64_t *)a1, *(float *)(a1 + 168));
      uint64_t v15 = *a2;
      if (a2[1] != *a2)
      {
        uint64_t v16 = 0;
        do
        {
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Frame ", 6);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
            uint64_t v15 = *a2;
          }
          float v17 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ProcessEmitting(a1, *(_DWORD *)(v15 + 4 * v16), *(float *)(*a3 + 4 * v16));
          kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ProcessNonemitting((uint64_t *)a1, v17);
          ++v16;
          uint64_t v15 = *a2;
        }
        while (v16 != (a2[1] - *a2) >> 2);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      int v18 = fst::LogMessage::LogMessage((fst *)&v30, (uint64_t)__p);
      uint64_t v19 = (void *)fst::cerr(v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Allocated max tokens ", 21);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v30);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      uint64_t v20 = fst::LogMessage::LogMessage((fst *)&v30, (uint64_t)__p);
      std::string v21 = (void *)fst::cerr(v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Max tokens ", 11);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v30);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      return kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::GetBestPath(a1, a4);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    char v25 = fst::LogMessage::LogMessage((fst *)&v30, (uint64_t)__p);
    uint64_t v26 = (void *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Phone features size of ", 23);
    int v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" != wildcard LM costs size of ", 30);
    std::ostream::operator<<();
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v30);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1CC9D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1CC9DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B1CC9DE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2 == 1)
  {
    uint64_t v16 = __cxa_begin_catch(a1);
    std::deque<int>::clear((void *)(v14 + 200));
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    float v17 = fst::LogMessage::LogMessage((fst *)(v15 - 65), (uint64_t)&__p);
    int v18 = (void *)fst::cerr(v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Max tokens ", 11);
    uint64_t v19 = (void *)std::ostream::operator<<();
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" exceeded - ", 12);
    std::string v21 = (const char *)(*(uint64_t (**)(void *))(*(void *)v16 + 16))(v16);
    size_t v22 = strlen(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    fst::LogMessage::~LogMessage((fst::LogMessage *)(v15 - 65));
    if (a14 < 0) {
      operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B1CC9D68);
  }
  JUMPOUT(0x1B1CC9DC8);
}

void sub_1B1CC9EB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B1CC9DC8);
}

void kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::MakeLGFromResultLattice()
{
}

void sub_1B1CC9FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::PhoneticMatchDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *(std::__shared_weak_count **)(*a3 + 432);
  uint64_t v52 = *(void *)(*a3 + 424);
  uint64_t v53 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery::FactoryChoirJournalistNursery((uint64_t)&v54, &v52);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  char v63 = *(unsigned char *)(a2 + 656) ^ 1;
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, (std::string *)&v35);
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v35;
  uint64_t v62 = v36;
  MEMORY[0x1B3EA7B20](&v55, "n/a");
  MEMORY[0x1B3EA7B20](&v58, "n/a");
  uint64_t v57 = 0;
  float v54 = 0.0;
  char v59 = 0;
  uint64_t v9 = *a3;
  if (!*(unsigned char *)(*a3 + 628))
  {
    if (quasar::gLogLevel >= 2)
    {
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"No LM cost found. Skipping PM. Hint: Did you include lattice-lm-rescore?", 72);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v35);
    }
    goto LABEL_34;
  }
  float v54 = -*(float *)(v9 + 632);
  float v10 = *(float *)(a1 + 660);
  BOOL v60 = v10 < v54;
  if (v10 < v54)
  {
    if (quasar::gLogLevel < 4)
    {
LABEL_12:
      uint64_t v13 = 0;
      goto LABEL_35;
    }
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"LVCSR LM logprob=", 17);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" is greater than threshold ", 27);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)". Skipping PM.", 14);
LABEL_11:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v35);
    goto LABEL_12;
  }
  uint64_t v14 = *(void **)(v9 + 352);
  if (!v14)
  {
    quasar::Decoder::calculateNBest(a2, a3, *(_DWORD *)(*(void *)a4 + 16));
    uint64_t v14 = *(void **)(*a3 + 352);
  }
  if (v14[1] == *v14)
  {
LABEL_34:
    uint64_t v13 = 2;
    goto LABEL_35;
  }
  uint64_t v15 = (long long **)(*v14 + 24 * *(unsigned __int8 *)(a2 + 656));
  quasar::TextProc::GetOrthography(v15, 1, (std::string *)&v35);
  if (SHIBYTE(v56) < 0) {
    operator delete((void *)v55);
  }
  long long v55 = v35;
  uint64_t v56 = v36;
  if (quasar::gLogLevel >= 5)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"pmInput=\"", 9);
    if (v56 >= 0) {
      float v17 = &v55;
    }
    else {
      float v17 = (long long *)v55;
    }
    if (v56 >= 0) {
      uint64_t v18 = HIBYTE(v56);
    }
    else {
      uint64_t v18 = *((void *)&v55 + 1);
    }
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"", 1);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v35);
  }
  uint64_t v20 = *(URegularExpression ***)(a1 + 952);
  if (v20 && !quasar::URegularExpressionWrapper::isMatch(v20, (uint64_t)&v55))
  {
    uint64_t v13 = 0;
    LODWORD(v57) = 0;
    if (quasar::gLogLevel < 4) {
      goto LABEL_35;
    }
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Not a match with the regex whitelist. Skipping PM.", 50);
    goto LABEL_11;
  }
  LODWORD(v57) = 1;
  std::string v21 = *(URegularExpression ***)(a1 + 968);
  if (v21 && quasar::URegularExpressionWrapper::isMatch(v21, (uint64_t)&v55))
  {
    HIDWORD(v57) = 1;
    if (quasar::gLogLevel < 4) {
      goto LABEL_12;
    }
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Matches the regex blacklist. Skipping PM.", 41);
    goto LABEL_11;
  }
  HIDWORD(v57) = 0;
  char v34 = 0;
  memset(v33, 0, sizeof(v33));
  memset(v32, 0, sizeof(v32));
  memset(v31, 0, sizeof(v31));
  quasar::PhoneticMatchDecoder::applyPlaceholders(a1, (uint64_t *)v15, v30);
  int v27 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  quasar::PhoneticMatchDecoder::getPhoneSegmentation(v23, v30, *a3 + 632, v32);
  memset(v26, 0, sizeof(v26));
  if (quasar::PhoneticMatchDecoder::doPm(a1, v24, v32, (uint64_t)&v27, v26, (uint64_t)&v34, &v64, v65))
  {
    memset(&v25[10], 0, 24);
    std::string::basic_string[abi:ne180100]<0>(v25, ",");
    quasar::split(a1 + 736, (uint64_t *)v25, 0, (unint64_t)&v35);
  }
  uint64_t v13 = 2;
  *(void *)&long long v35 = v26;
  std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (v27)
  {
    char v28 = v27;
    operator delete(v27);
  }
  *(void *)&long long v35 = v30;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  *(void *)&long long v35 = v31;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  *(void *)&long long v35 = v32;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  *(void *)&long long v35 = v33;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
LABEL_35:
  quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery::~FactoryChoirJournalistNursery((quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery *)&v54);
  return v13;
}

void sub_1B1CCAEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a67);
  a67 = (uint64_t)&a25;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a67);
  a67 = (uint64_t)&a29;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a67);
  a29 = (uint64_t)&a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  quasar::PhoneticMatchResult::~PhoneticMatchResult(&a35);
  a35 = &a45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = &a48;
  std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  a35 = &a54;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = &a57;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = &a60;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = &a63;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery::~FactoryChoirJournalistNursery((quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery *)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery::~FactoryChoirJournalistNursery(quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery *this)
{
  if (*((unsigned char *)this + 120))
  {
    uint64_t v2 = *((void *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(v18, "PM-input");
    std::operator+<char>();
    uint64_t v3 = std::string::append(&v16, "\"");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    quasar::SpeechRequestResultData::addDumpAA(v2, (long long *)v18, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    uint64_t v5 = *((void *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(v18, "PM-output");
    std::operator+<char>();
    uint64_t v6 = std::string::append(&v16, "\"");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    quasar::SpeechRequestResultData::addDumpAA(v5, (long long *)v18, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    uint64_t v8 = *((void *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(v18, "PM-used");
    double v9 = 0.0;
    if (*((unsigned char *)this + 88)) {
      double v9 = 1.0;
    }
    quasar::SpeechRequestResultData::addDumpAA(v8, (long long *)v18, 1, v9);
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    uint64_t v10 = *((void *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(v18, "PM-partial");
    double v11 = 0.0;
    if (*((unsigned char *)this + 89)) {
      double v11 = 1.0;
    }
    quasar::SpeechRequestResultData::addDumpAA(v10, (long long *)v18, 1, v11);
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    uint64_t v12 = *((void *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(v18, "PM-decoder");
    quasar::SpeechRequestResultData::addDumpAA(v12, (long long *)v18, (const std::string *)this + 4);
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
  uint64_t v13 = (const quasar::PhoneticMatchResult *)*((void *)this + 17);
  uint64_t v14 = (const quasar::PhoneticMatchResult *)*((void *)this + 18);
  while (v13 != v14)
  {
    if (*((unsigned char *)v13 + 70)) {
      quasar::SpeechRequestResultData::storePhoneticMatchResult(*((std::mutex **)this + 20), v13);
    }
    uint64_t v13 = (const quasar::PhoneticMatchResult *)((char *)v13 + 72);
  }
  quasar::SpeechRequestResultData::storePhoneticMatchDecoderStats(*((void *)this + 20), (long long *)this + 6, *((unsigned char *)this + 90), *((_DWORD *)this + 8) != 0, *((_DWORD *)this + 9) != 0, *((float *)this + 31), *((float *)this + 32));
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  v18[0] = (char *)this + 136;
  std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t quasar::PhoneticMatchDecoder::supportsEager(quasar::PhoneticMatchDecoder *this)
{
  return 1;
}

void quasar::PhoneticMatchDecoder::~PhoneticMatchDecoder(quasar::PhoneticMatchDecoder *this)
{
  quasar::PhoneticMatchDecoder::~PhoneticMatchDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  uint64_t vars8;

  *(void *)this = &unk_1F0A55160;
  std::__hash_table<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::__unordered_map_hasher<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::__unordered_map_equal<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>>>::~__hash_table((uint64_t)this + 1024);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 984);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 122);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 120);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (uint64_t *)*((void *)this + 118);
  *((void *)this + 118) = 0;
  if (v4) {
    std::default_delete<kaldi::quasar::Phonomap>::operator()[abi:ne180100]((uint64_t)this + 944, v4);
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 117);
  *((void *)this + 117) = 0;
  if (v5) {
    std::default_delete<kaldi::quasar::Phonomap>::operator()[abi:ne180100]((uint64_t)this + 936, v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 116);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  long long v7 = (std::__shared_weak_count *)*((void *)this + 110);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 108);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  double v9 = (std::__shared_weak_count *)*((void *)this + 106);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*((char *)this + 839) < 0) {
    operator delete(*((void **)this + 102));
  }
  if (*((char *)this + 815) < 0) {
    operator delete(*((void **)this + 99));
  }
  if (*((char *)this + 783) < 0) {
    operator delete(*((void **)this + 95));
  }
  if (*((char *)this + 759) < 0) {
    operator delete(*((void **)this + 92));
  }
  uint64_t v10 = (void *)*((void *)this + 88);
  if (v10)
  {
    *((void *)this + 89) = v10;
    operator delete(v10);
  }
  if (*((char *)this + 695) < 0) {
    operator delete(*((void **)this + 84));
  }
  if (*((char *)this + 639) < 0) {
    operator delete(*((void **)this + 77));
  }
  if (*((char *)this + 615) < 0) {
    operator delete(*((void **)this + 74));
  }
  if (*((char *)this + 591) < 0) {
    operator delete(*((void **)this + 71));
  }
  if (*((char *)this + 567) < 0) {
    operator delete(*((void **)this + 68));
  }
  if (*((char *)this + 543) < 0) {
    operator delete(*((void **)this + 65));
  }
  if (*((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  quasar::Decoder::~Decoder(this);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::{lambda(void)#1} &&>>()
{
}

void quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::{lambda(void)#1}::operator()()
{
}

void sub_1B1CCB674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery::FactoryChoirJournalistNursery(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = -971228160;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "<n/a>");
  *(void *)(a1 + 32) = -1;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 40), "<n/a>");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 64), "<n/a>");
  *(_WORD *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 90) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 96), "<n/a>");
  *(unsigned char *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 160) = *a2;
  *(void *)(a1 + 168) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1B1CCB74C(_Unwind_Exception *exception_object)
{
  if (v1[87] < 0) {
    operator delete(*v4);
  }
  if (v1[63] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::__unordered_map_hasher<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::__unordered_map_equal<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::__unordered_map_hasher<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::__unordered_map_equal<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::__unordered_map_hasher<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::__unordered_map_equal<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<quasar::URegularExpressionWrapper> const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<quasar::URegularExpressionWrapper> const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::default_delete<kaldi::quasar::Phonomap>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v4 = (void **)(a2 + 1);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v3 = *a2;
    *a2 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    MEMORY[0x1B3EA8670](a2, 0x1060C40D0C22456);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,std::string &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x20uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::URegularExpressionWrapper>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1CCBAEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::URegularExpressionWrapper>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61830;
  quasar::URegularExpressionWrapper::URegularExpressionWrapper(a1 + 3);
  return a1;
}

void sub_1B1CCBB48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::quasar::Phonomap::Phonomap(uint64_t *a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8 = a1 + 1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  uint64_t v9 = fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(a2);
  uint64_t v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v9 = *a1;
  }
  a1[5] = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 112))(v9);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)*a1 + 120))();
  a1[4] = v11;
  long long v35 = 0;
  long long v36 = 0;
  uint64_t v37 = 0;
  unint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 120))(v11);
  std::vector<float>::resize((uint64_t)&v35, v12);
  unint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 120))(a1[5]);
  std::vector<std::vector<float>>::resize(v8, v13, (uint64_t)&v35);
  unint64_t v14 = *(void *)(*(void *)(*a1 + 8) + 72) - *(void *)(*(void *)(*a1 + 8) + 64);
  if ((int)(v14 >> 3) >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (v14 >> 3);
    do
    {
      uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(*a1 + 8) + 64) + 8 * v15) + 24);
      uint64_t v18 = *(void *)(*(void *)(*(void *)(*(void *)(*a1 + 8) + 64) + 8 * v15) + 32) - v17;
      if (v18)
      {
        unint64_t v19 = v18 >> 4;
        if (v19 <= 1) {
          uint64_t v20 = 1;
        }
        else {
          uint64_t v20 = v19;
        }
        std::string v21 = (float *)(v17 + 4);
        do
        {
          uint64_t v22 = *(int *)v21;
          if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1[4] + 96))(a1[4], a3) == v22) {
            float v23 = a4;
          }
          else {
            float v23 = 1.0;
          }
          *(float *)(*(void *)(*v8 + 24 * *((int *)v21 - 1)) + 4 * *(int *)v21) = v21[1] * v23;
          v21 += 4;
          --v20;
        }
        while (v20);
      }
      ++v15;
    }
    while (v15 != v16);
  }
  *((_DWORD *)a1 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1[4] + 96))(a1[4], a3);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 120))(a1[5]) >= 0x101)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    unint64_t v24 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
    char v25 = (void *)fst::cerr(v24);
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Greated than 256 rec symbols (phones) in phonomap ", 50);
    int v27 = *(char *)(a2 + 23);
    uint64_t v28 = v27 >= 0 ? a2 : *(void *)a2;
    uint64_t v29 = v27 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
    char v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" can't be supported", 19);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v35)
  {
    long long v36 = v35;
    operator delete(v35);
  }
  return a1;
}

void sub_1B1CCBE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  uint64_t v23 = *v21;
  *std::string v21 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<float>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      uint64_t v9 = a1[1];
      do
      {
        uint64_t v11 = *(void **)(v9 - 24);
        v9 -= 24;
        uint64_t v10 = v11;
        if (v11)
        {
          *(void *)(v4 - 16) = v10;
          operator delete(v10);
        }
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void *std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = (void *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        *uint64_t v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    std::string v21 = result;
    if (v13) {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v17 = v14;
    uint64_t v18 = &v14[24 * v10];
    unint64_t v19 = v18;
    uint64_t v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<float>>::__construct_at_end(&v17, a2, a3);
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v17);
    return (void *)std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_1B1CCC104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<std::vector<float>>::__construct_at_end(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = (void *)result[2];
  if (a2)
  {
    BOOL v6 = &v4[3 * a2];
    uint64_t v7 = 24 * a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1B1CCC1A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>,std::allocator<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,kaldi::quasar::Phonomap&,kaldi::quasar::SymbolDecoderOptions &,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = operator new(0x130uLL);
  std::__shared_ptr_emplace<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,kaldi::quasar::Phonomap&,kaldi::quasar::SymbolDecoderOptions &,std::allocator<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>,0>(v7, a2, a3, a4);
}

void sub_1B1CCC208(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,kaldi::quasar::Phonomap&,kaldi::quasar::SymbolDecoderOptions &,std::allocator<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F178;
  kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::SymbolDecoder((uint64_t)(a1 + 3), a2, a3, a4);
}

void sub_1B1CCC264(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F178;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t *std::__shared_ptr_emplace<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>::__on_zero_shared(uint64_t a1)
{
  return kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::~SymbolDecoder((uint64_t *)(a1 + 24));
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::__unordered_map_hasher<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::__unordered_map_equal<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>>>::__emplace_unique_key_args<std::shared_ptr<quasar::URegularExpressionWrapper>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<quasar::URegularExpressionWrapper> const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  uint64_t v16 = operator new(0x38uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  void *v16 = 0;
  v16[1] = v9;
  uint64_t v17 = *a4;
  std::locale v16[2] = **a4;
  uint64_t v18 = v17[1];
  v16[3] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  v16[4] = 0;
  v16[5] = 0;
  v16[6] = 0;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  char v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *char v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10) {
          v26 %= v10;
        }
      }
      else
      {
        v26 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  unint64_t v13 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return v13;
}

void sub_1B1CCC594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<quasar::URegularExpressionWrapper> const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*,false>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(long long *, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v3 = a2;
    unint64_t v5 = (_OWORD *)((char *)a1 + 72);
    if ((_OWORD *)((char *)a1 + 72) != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = a1;
      do
      {
        unint64_t v9 = v5;
        if ((*a3)(v5, (uint64_t)v8))
        {
          long long v10 = *(_OWORD *)((char *)v8 + 88);
          long long v23 = *v9;
          long long v24 = v10;
          uint64_t v25 = *((void *)v8 + 13);
          *((void *)v8 + 11) = 0;
          *((void *)v8 + 12) = 0;
          long long v26 = v8[7];
          uint64_t v27 = *((void *)v8 + 16);
          *((void *)v8 + 13) = 0;
          *((void *)v8 + 14) = 0;
          *((void *)v8 + 15) = 0;
          *((void *)v8 + 16) = 0;
          int v11 = *((_DWORD *)v8 + 34);
          *(_DWORD *)((char *)v28 + 3) = *(_DWORD *)((char *)v8 + 139);
          uint64_t v12 = v7;
          v28[0] = v11;
          while (1)
          {
            uint64_t v13 = v12;
            uint64_t v14 = (uint64_t)a1 + v12;
            *(_OWORD *)((char *)a1 + v12 + 72) = *(_OWORD *)((char *)a1 + v12);
            std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)((char *)a1 + v12 + 88));
            *(_OWORD *)(v14 + 88) = *(_OWORD *)(v14 + 16);
            *(void *)(v14 + 104) = *(void *)(v14 + 32);
            *(void *)(v14 + 24) = 0;
            *(void *)(v14 + 32) = 0;
            *(void *)(v14 + 16) = 0;
            uint64_t v15 = (void **)(v14 + 112);
            if (*(char *)(v14 + 135) < 0) {
              operator delete(*v15);
            }
            *(_OWORD *)uint64_t v15 = *(_OWORD *)(v14 + 40);
            *(void *)(v14 + 128) = *(void *)(v14 + 56);
            *(unsigned char *)(v14 + 63) = 0;
            *(unsigned char *)(v14 + 40) = 0;
            *(_DWORD *)(v14 + 136) = *(_DWORD *)(v14 + 64);
            *(_DWORD *)(v14 + 139) = *(_DWORD *)(v14 + 67);
            if (!v13) {
              break;
            }
            char v16 = (*a3)(&v23, (uint64_t)a1 + v13 - 72);
            uint64_t v12 = v13 - 72;
            if ((v16 & 1) == 0)
            {
              unint64_t v17 = (_OWORD *)((char *)a1 + v13);
              goto LABEL_12;
            }
          }
          unint64_t v17 = a1;
LABEL_12:
          _OWORD *v17 = v23;
          uint64_t v18 = (uint64_t)a1 + v13;
          std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(v18 + 16));
          uint64_t v19 = *((void *)&v24 + 1);
          *(void *)(v18 + 16) = v24;
          uint64_t v20 = v25;
          *((void *)v17 + 3) = v19;
          *((void *)v17 + 4) = v20;
          uint64_t v25 = 0;
          long long v24 = 0uLL;
          BOOL v21 = (void **)(v18 + 40);
          if (*((char *)v17 + 63) < 0) {
            operator delete(*v21);
          }
          *(_OWORD *)BOOL v21 = v26;
          *(void *)(v18 + 56) = v27;
          HIBYTE(v27) = 0;
          LOBYTE(v26) = 0;
          *(_DWORD *)(v18 + 64) = v28[0];
          *(_DWORD *)(v18 + 67) = *(_DWORD *)((char *)v28 + 3);
          char v29 = (void **)&v24;
          std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v29);
          uint64_t v3 = a2;
        }
        unint64_t v5 = (_OWORD *)((char *)v9 + 72);
        v7 += 72;
        unint64_t v8 = v9;
      }
      while ((_OWORD *)((char *)v9 + 72) != v3);
    }
  }
}

void sub_1B1CCCC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(long long *, uint64_t))
{
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    unint64_t v5 = (_OWORD *)((char *)a1 + 72);
    if ((_OWORD *)((char *)a1 + 72) != a2)
    {
      uint64_t v7 = (uint64_t)a1 - 72;
      do
      {
        unint64_t v8 = v5;
        if ((*a3)(v5, (uint64_t)v4))
        {
          long long v9 = *(_OWORD *)((char *)v4 + 88);
          long long v15 = *v8;
          long long v16 = v9;
          uint64_t v17 = *((void *)v4 + 13);
          *((void *)v4 + 11) = 0;
          *((void *)v4 + 12) = 0;
          long long v18 = v4[7];
          uint64_t v19 = *((void *)v4 + 16);
          *((void *)v4 + 13) = 0;
          *((void *)v4 + 14) = 0;
          *((void *)v4 + 15) = 0;
          *((void *)v4 + 16) = 0;
          int v10 = *((_DWORD *)v4 + 34);
          *(_DWORD *)((char *)v20 + 3) = *(_DWORD *)((char *)v4 + 139);
          uint64_t v11 = v7;
          v20[0] = v10;
          do
          {
            *(_OWORD *)(v11 + 144) = *(_OWORD *)(v11 + 72);
            std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(v11 + 160));
            *(_OWORD *)(v11 + 160) = *(_OWORD *)(v11 + 88);
            *(void *)(v11 + 176) = *(void *)(v11 + 104);
            *(void *)(v11 + 96) = 0;
            *(void *)(v11 + 104) = 0;
            *(void *)(v11 + 88) = 0;
            uint64_t v12 = (void **)(v11 + 184);
            if (*(char *)(v11 + 207) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 112);
            *(void *)(v11 + 200) = *(void *)(v11 + 128);
            *(unsigned char *)(v11 + 135) = 0;
            *(unsigned char *)(v11 + 112) = 0;
            *(_DWORD *)(v11 + 208) = *(_DWORD *)(v11 + 136);
            *(_DWORD *)(v11 + 211) = *(_DWORD *)(v11 + 139);
            char v13 = (*a3)(&v15, v11);
            v11 -= 72;
          }
          while ((v13 & 1) != 0);
          *(_OWORD *)(v11 + 144) = v15;
          std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(v11 + 160));
          *(_OWORD *)(v11 + 160) = v16;
          *(void *)(v11 + 176) = v17;
          uint64_t v17 = 0;
          long long v16 = 0uLL;
          uint64_t v14 = (void **)(v11 + 184);
          if (*(char *)(v11 + 207) < 0) {
            operator delete(*v14);
          }
          *(_OWORD *)uint64_t v14 = v18;
          *(void *)(v11 + 200) = v19;
          HIBYTE(v19) = 0;
          LOBYTE(v18) = 0;
          *(_DWORD *)(v11 + 208) = v20[0];
          *(_DWORD *)(v11 + 211) = *(_DWORD *)((char *)v20 + 3);
          BOOL v21 = (void **)&v16;
          std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v21);
        }
        unint64_t v5 = (_OWORD *)((char *)v8 + 72);
        v7 += 72;
        unint64_t v4 = v8;
      }
      while ((_OWORD *)((char *)v8 + 72) != a2);
    }
  }
}

void sub_1B1CCCE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a2, a3);
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    int v10 = a1;
    uint64_t v11 = a2;
    goto LABEL_9;
  }
  if (!result)
  {
    std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a1, a2);
    if (!(*a4)(a3, a2)) {
      return 1;
    }
    int v10 = a2;
    uint64_t v11 = a3;
LABEL_9:
    std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(v10, v11);
    return 2;
  }
  std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a1, a3);
  return 1;
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PhoneticMatchResult *,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&)>(uint64_t a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  unint64_t v4 = a2;
  char v6 = (void ***)(a1 + 16);
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v22 = *(_OWORD *)a1;
  long long v23 = v7;
  uint64_t v24 = *(void *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 40);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)std::string __p = v8;
  uint64_t v26 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  int v10 = (_DWORD *)(a1 + 64);
  int v9 = *(_DWORD *)(a1 + 64);
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)&v27[3] = *(_DWORD *)(a1 + 67);
  *(_DWORD *)uint64_t v27 = v9;
  if ((*a3)(&v22, (long long *)((char *)a2 - 72)))
  {
    uint64_t v11 = (long long *)a1;
    do
      uint64_t v11 = (long long *)((char *)v11 + 72);
    while (((*a3)(&v22, v11) & 1) == 0);
  }
  else
  {
    uint64_t v12 = (long long *)(a1 + 72);
    do
    {
      uint64_t v11 = v12;
      if (v12 >= v4) {
        break;
      }
      int v13 = (*a3)(&v22, v12);
      uint64_t v12 = (long long *)((char *)v11 + 72);
    }
    while (!v13);
  }
  if (v11 < v4)
  {
    do
      unint64_t v4 = (long long *)((char *)v4 - 72);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  while (v11 < v4)
  {
    std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(v11, v4);
    do
      uint64_t v11 = (long long *)((char *)v11 + 72);
    while (!(*a3)(&v22, v11));
    do
      unint64_t v4 = (long long *)((char *)v4 - 72);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  uint64_t v14 = (long long *)((char *)v11 - 72);
  if ((long long *)((char *)v11 - 72) != (long long *)a1)
  {
    long long v15 = (void **)(a1 + 40);
    *(_OWORD *)a1 = *v14;
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(v6);
    *(_OWORD *)(a1 + 16) = *(long long *)((char *)v11 - 56);
    *(void *)(a1 + 32) = *((void *)v11 - 5);
    *((void *)v11 - 7) = 0;
    *((void *)v11 - 6) = 0;
    *((void *)v11 - 5) = 0;
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*v15);
    }
    long long v16 = *(v11 - 2);
    *(void *)(a1 + 56) = *((void *)v11 - 2);
    *(_OWORD *)long long v15 = v16;
    *((unsigned char *)v11 - 9) = 0;
    *((unsigned char *)v11 - 32) = 0;
    int v17 = *((_DWORD *)v11 - 2);
    *(_DWORD *)((char *)v10 + 3) = *(_DWORD *)((char *)v11 - 5);
    *int v10 = v17;
  }
  long long *v14 = v22;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)v11 - 7);
  *(long long *)((char *)v11 - 56) = v23;
  *((void *)v11 - 5) = v24;
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  long long v18 = (void **)(v11 - 2);
  if (*((char *)v11 - 9) < 0) {
    operator delete(*v18);
  }
  long long v19 = *(_OWORD *)__p;
  *((void *)v11 - 2) = v26;
  *(_OWORD *)long long v18 = v19;
  HIBYTE(v26) = 0;
  LOBYTE(__p[0]) = 0;
  int v20 = *(_DWORD *)v27;
  *(_DWORD *)((char *)v11 - 5) = *(_DWORD *)&v27[3];
  *((_DWORD *)v11 - 2) = v20;
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v28 = (void **)&v23;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v28);
  return v11;
}

void sub_1B1CCD164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

char *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PhoneticMatchResult *,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&)>(uint64_t a1, long long *a2, uint64_t (**a3)(uint64_t, long long *))
{
  uint64_t v6 = 0;
  long long v7 = (void ***)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 16);
  long long v23 = *(_OWORD *)a1;
  long long v24 = v8;
  uint64_t v25 = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = 0;
  long long v9 = *(_OWORD *)(a1 + 40);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v22 = a1 + 40;
  *(_OWORD *)std::string __p = v9;
  uint64_t v27 = *(void *)(a1 + 56);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)&v28[3] = *(_DWORD *)(a1 + 67);
  int v10 = (_DWORD *)(a1 + 64);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)(a1 + 64);
  do
  {
    char v11 = (*a3)(a1 + v6 + 72, &v23);
    v6 += 72;
  }
  while ((v11 & 1) != 0);
  unint64_t v12 = a1 + v6;
  if (v6 == 72)
  {
    do
    {
      if (v12 >= (unint64_t)a2) {
        break;
      }
      a2 = (long long *)((char *)a2 - 72);
    }
    while (((*a3)((uint64_t)a2, &v23) & 1) == 0);
  }
  else
  {
    do
      a2 = (long long *)((char *)a2 - 72);
    while (!(*a3)((uint64_t)a2, &v23));
  }
  int v13 = (long long *)(a1 + v6);
  if (v12 < (unint64_t)a2)
  {
    uint64_t v14 = a2;
    do
    {
      std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(v13, v14);
      do
        int v13 = (long long *)((char *)v13 + 72);
      while (((*a3)((uint64_t)v13, &v23) & 1) != 0);
      do
        uint64_t v14 = (long long *)((char *)v14 - 72);
      while (!(*a3)((uint64_t)v14, &v23));
    }
    while (v13 < v14);
  }
  long long v15 = (long long *)((char *)v13 - 72);
  if ((long long *)((char *)v13 - 72) != (long long *)a1)
  {
    *(_OWORD *)a1 = *v15;
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(v7);
    *(_OWORD *)(a1 + 16) = *(long long *)((char *)v13 - 56);
    *(void *)(a1 + 32) = *((void *)v13 - 5);
    *((void *)v13 - 7) = 0;
    *((void *)v13 - 6) = 0;
    *((void *)v13 - 5) = 0;
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)v22);
    }
    long long v16 = *(v13 - 2);
    *(void *)(v22 + 16) = *((void *)v13 - 2);
    *(_OWORD *)uint64_t v22 = v16;
    *((unsigned char *)v13 - 9) = 0;
    *((unsigned char *)v13 - 32) = 0;
    int v17 = *((_DWORD *)v13 - 2);
    *(_DWORD *)((char *)v10 + 3) = *(_DWORD *)((char *)v13 - 5);
    *int v10 = v17;
  }
  long long *v15 = v23;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)v13 - 7);
  *(long long *)((char *)v13 - 56) = v24;
  *((void *)v13 - 5) = v25;
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  long long v18 = (void **)(v13 - 2);
  if (*((char *)v13 - 9) < 0) {
    operator delete(*v18);
  }
  long long v19 = *(_OWORD *)__p;
  *((void *)v13 - 2) = v27;
  *(_OWORD *)long long v18 = v19;
  HIBYTE(v27) = 0;
  LOBYTE(__p[0]) = 0;
  int v20 = *(_DWORD *)v28;
  *(_DWORD *)((char *)v13 - 5) = *(_DWORD *)&v28[3];
  *((_DWORD *)v13 - 2) = v20;
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  char v29 = (void **)&v24;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v29);
  return (char *)v13 - 72;
}

void sub_1B1CCD408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  unint64_t v4 = a2;
  BOOL v6 = 1;
  switch(0x8E38E38E38E38E39 * (((char *)a2 - (char *)a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      if ((*a3)((long long *)((char *)a2 - 72), a1)) {
        std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a1, (long long *)((char *)v4 - 72));
      }
      return v6;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, (long long *)((char *)a1 + 72), (long long *)((char *)a2 - 72), a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, (long long *)((char *)a1 + 72), a1 + 9, (long long *)((char *)a2 - 72), a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, (long long *)((char *)a1 + 72), a1 + 9, (long long *)((char *)a1 + 216), (long long *)((char *)a2 - 72), a3);
      return v6;
    default:
      long long v7 = a1 + 9;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, (long long *)((char *)a1 + 72), a1 + 9, a3);
      long long v8 = (long long *)((char *)a1 + 216);
      if ((long long *)((char *)a1 + 216) == v4) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      long long v24 = v4;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_18:
    long long v7 = v8;
    v9 += 72;
    long long v8 = (long long *)((char *)v8 + 72);
    if (v8 == v4) {
      return 1;
    }
  }
  long long v11 = v8[1];
  long long v25 = *v8;
  long long v26 = v11;
  uint64_t v27 = *((void *)v8 + 4);
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = 0;
  long long v12 = *(long long *)((char *)v8 + 40);
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 5) = 0;
  long long v28 = v12;
  uint64_t v29 = *((void *)v8 + 7);
  *(_DWORD *)((char *)v30 + 3) = *(_DWORD *)((char *)v8 + 67);
  v30[0] = *((_DWORD *)v8 + 16);
  uint64_t v13 = v9;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 7) = 0;
  while (1)
  {
    uint64_t v14 = v13;
    long long v15 = (char *)a1 + v13;
    *(long long *)((char *)a1 + v13 + 216) = *(long long *)((char *)a1 + v13 + 144);
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)((char *)a1 + v13 + 232));
    *(_OWORD *)(v15 + 232) = *((_OWORD *)v15 + 10);
    *((void *)v15 + 31) = *((void *)v15 + 22);
    *((void *)v15 + 21) = 0;
    *((void *)v15 + 22) = 0;
    *((void *)v15 + 20) = 0;
    long long v16 = (void **)(v15 + 256);
    if (v15[279] < 0) {
      operator delete(*v16);
    }
    *(_OWORD *)long long v16 = *(_OWORD *)(v15 + 184);
    *((void *)v15 + 34) = *((void *)v15 + 25);
    v15[207] = 0;
    v15[184] = 0;
    *((_DWORD *)v15 + 70) = *((_DWORD *)v15 + 52);
    *(_DWORD *)(v15 + 283) = *(_DWORD *)(v15 + 211);
    if (v14 == -144) {
      break;
    }
    char v17 = (*a3)(&v25, (long long *)((char *)a1 + v14 + 72));
    uint64_t v13 = v14 - 72;
    if ((v17 & 1) == 0)
    {
      uint64_t v18 = (uint64_t)a1 + v13 + 216;
      goto LABEL_14;
    }
  }
  uint64_t v18 = (uint64_t)a1;
LABEL_14:
  *(_OWORD *)uint64_t v18 = v25;
  long long v19 = (char *)a1 + v14;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)v19 + 20);
  uint64_t v20 = *((void *)&v26 + 1);
  *((void *)v19 + 20) = v26;
  uint64_t v21 = v27;
  *(void *)(v18 + 24) = v20;
  *(void *)(v18 + 32) = v21;
  uint64_t v27 = 0;
  long long v26 = 0uLL;
  uint64_t v22 = (void **)(v19 + 184);
  if (*(char *)(v18 + 63) < 0) {
    operator delete(*v22);
  }
  *(_OWORD *)uint64_t v22 = v28;
  *((void *)v19 + 25) = v29;
  HIBYTE(v29) = 0;
  LOBYTE(v28) = 0;
  *((_DWORD *)v19 + 52) = v30[0];
  *(_DWORD *)(v19 + 211) = *(_DWORD *)((char *)v30 + 3);
  if (++v10 != 8)
  {
    int v31 = (void **)&v26;
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v31);
    unint64_t v4 = v24;
    goto LABEL_18;
  }
  BOOL v6 = (long long *)((char *)v8 + 72) == v24;
  int v31 = (void **)&v26;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v31);
  return v6;
}

void sub_1B1CCD74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)va);
  _Unwind_Resume(a1);
}

void std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(long long *a1, long long *a2)
{
  long long v4 = *a1;
  uint64_t v17 = 0;
  unint64_t v5 = a1 + 1;
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v15 = v6;
  long long v13 = *(long long *)((char *)a1 + 24);
  long long v14 = v4;
  uint64_t v16 = *((void *)a1 + 3);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 4) = 0;
  uint64_t v7 = (uint64_t)a1 + 40;
  long long v18 = *(long long *)((char *)a1 + 40);
  uint64_t v19 = *((void *)a1 + 7);
  *((void *)a1 + 6) = 0;
  *((void *)a1 + 7) = 0;
  uint64_t v9 = a1 + 4;
  int v8 = *((_DWORD *)a1 + 16);
  *((void *)a1 + 5) = 0;
  *(_DWORD *)&uint64_t v20[3] = *(_DWORD *)((char *)a1 + 67);
  *(_DWORD *)uint64_t v20 = v8;
  *a1 = *a2;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)a1 + 2);
  _OWORD *v5 = a2[1];
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  if (*((char *)a1 + 63) < 0) {
    operator delete(*(void **)v7);
  }
  int v10 = (void **)a2 + 5;
  long long v11 = *(long long *)((char *)a2 + 40);
  *(void *)(v7 + 16) = *((void *)a2 + 7);
  *(_OWORD *)uint64_t v7 = v11;
  *((unsigned char *)a2 + 63) = 0;
  int v12 = *((_DWORD *)a2 + 16);
  *((unsigned char *)a2 + 40) = 0;
  *(_DWORD *)((char *)v9 + 3) = *(_DWORD *)((char *)a2 + 67);
  *uint64_t v9 = v12;
  *a2 = v14;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)a2 + 2);
  *((void *)a2 + 2) = v6;
  *(long long *)((char *)a2 + 24) = v13;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  if (*((char *)a2 + 63) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)int v10 = v18;
  *((void *)a2 + 7) = v19;
  HIBYTE(v19) = 0;
  LOBYTE(v18) = 0;
  *((_DWORD *)a2 + 16) = *(_DWORD *)v20;
  *(_DWORD *)((char *)a2 + 67) = *(_DWORD *)&v20[3];
  uint64_t v21 = (void **)&v15;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v21);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(long long *a1, long long *a2, long long *a3, long long *a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a3, a4);
    if ((*a5)(a3, a2))
    {
      std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a2, a3);
      if ((*a5)(a2, a1))
      {
        std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a1, a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, a2, a3, a4, a6);
  if ((*a6)(a5, a4))
  {
    std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a4, a5);
    if ((*a6)(a4, a3))
    {
      std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a3, a4);
      if ((*a6)(a3, a2))
      {
        std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a2, a3);
        if ((*a6)(a2, a1))
        {
          std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a1, a2);
        }
      }
    }
  }
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(long long *a1, long long *a2, long long *a3, unsigned int (**a4)(uint64_t, uint64_t), __n128 matched)
{
  if (a1 != a2)
  {
    uint64_t v7 = (uint64_t)a2;
    uint64_t v9 = (char *)a2 - (char *)a1;
    uint64_t v10 = ((char *)a2 - (char *)a1) / 72;
    if ((char *)a2 - (char *)a1 >= 73)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      long long v13 = (long long *)((char *)a1 + 72 * v11);
      do
      {
        matched = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>((uint64_t)a1, a4, v10, v13);
        long long v13 = (long long *)((char *)v13 - 72);
        --v12;
      }
      while (v12);
    }
    uint64_t v14 = v7;
    if ((long long *)v7 != a3)
    {
      uint64_t v15 = (long long *)v7;
      do
      {
        if (((unsigned int (*)(long long *, long long *, __n128))*a4)(v15, a1, matched))
        {
          std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(v15, a1);
          matched = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>((uint64_t)a1, a4, v10, a1);
        }
        uint64_t v15 = (long long *)((char *)v15 + 72);
      }
      while (v15 != a3);
      uint64_t v14 = (uint64_t)a3;
    }
    if (v9 >= 73)
    {
      unint64_t v16 = v9 / 0x48uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>((uint64_t)a1, v7, a4, v16);
        v7 -= 72;
      }
      while (v16-- > 2);
    }
    return (long long *)v14;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, long long *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = a4;
    uint64_t v24 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0x8E38E38E38E38E39 * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v9 = (0x1C71C71C71C71C72 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v10 = a1 + 72 * v9;
      uint64_t v11 = 0x1C71C71C71C71C72 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v11 < a3 && (*a2)(a1 + 72 * v9, v10 + 72))
      {
        v10 += 72;
        uint64_t v9 = v11;
      }
      if ((((uint64_t (*)(uint64_t, long long *))*a2)(v10, v5) & 1) == 0)
      {
        long long v13 = v5[1];
        long long v25 = *v5;
        long long v26 = v13;
        uint64_t v27 = *((void *)v5 + 4);
        *((void *)v5 + 2) = 0;
        *((void *)v5 + 3) = 0;
        long long v14 = *(long long *)((char *)v5 + 40);
        *((void *)v5 + 4) = 0;
        *((void *)v5 + 5) = 0;
        long long v28 = v14;
        uint64_t v29 = *((void *)v5 + 7);
        *(_DWORD *)&uint64_t v30[3] = *(_DWORD *)((char *)v5 + 67);
        *(_DWORD *)char v30 = *((_DWORD *)v5 + 16);
        *((void *)v5 + 6) = 0;
        *((void *)v5 + 7) = 0;
        do
        {
          uint64_t v15 = (long long *)v10;
          long long *v5 = *(_OWORD *)v10;
          std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)v5 + 2);
          unint64_t v16 = (void ***)(v10 + 16);
          v5[1] = *(_OWORD *)(v10 + 16);
          *((void *)v5 + 4) = *(void *)(v10 + 32);
          *(void *)(v10 + 16) = 0;
          *(void *)(v10 + 24) = 0;
          *(void *)(v10 + 32) = 0;
          uint64_t v17 = (void **)v5 + 5;
          if (*((char *)v5 + 63) < 0) {
            operator delete(*v17);
          }
          long long v18 = *(long long *)((char *)v15 + 40);
          *((void *)v5 + 7) = *((void *)v15 + 7);
          *(_OWORD *)uint64_t v17 = v18;
          int v19 = *((_DWORD *)v15 + 16);
          *((unsigned char *)v15 + 63) = 0;
          *((unsigned char *)v15 + 40) = 0;
          *(_DWORD *)((char *)v5 + 67) = *(_DWORD *)((char *)v15 + 67);
          *((_DWORD *)v5 + 16) = v19;
          if (v24 < v9) {
            break;
          }
          uint64_t v20 = (2 * v9) | 1;
          uint64_t v10 = a1 + 72 * v20;
          uint64_t v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            uint64_t v9 = v20;
          }
          else if ((*a2)(a1 + 72 * v20, v10 + 72))
          {
            v10 += 72;
          }
          else
          {
            uint64_t v9 = v20;
          }
          unint64_t v5 = v15;
        }
        while (!(*a2)(v10, (uint64_t)&v25));
        uint64_t v21 = (void **)v15 + 5;
        long long *v15 = v25;
        std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(v16);
        v15[1] = v26;
        *((void *)v15 + 4) = v27;
        long long v26 = 0uLL;
        uint64_t v27 = 0;
        if (*((char *)v15 + 63) < 0) {
          operator delete(*v21);
        }
        long long v22 = v28;
        *((void *)v15 + 7) = v29;
        *(_OWORD *)uint64_t v21 = v22;
        HIBYTE(v29) = 0;
        LOBYTE(v28) = 0;
        int v23 = *(_DWORD *)&v30[3];
        *((_DWORD *)v15 + 16) = *(_DWORD *)v30;
        *(_DWORD *)((char *)v15 + 67) = v23;
        int v31 = (void **)&v26;
        std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v31);
      }
    }
  }
  return result;
}

void sub_1B1CCDE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    long long v20 = *(_OWORD *)a1;
    long long v21 = *(_OWORD *)(a1 + 16);
    uint64_t v22 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(_OWORD *)std::string __p = v7;
    uint64_t v24 = *(void *)(a1 + 56);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(_DWORD *)&void v25[3] = *(_DWORD *)(a1 + 67);
    *(_DWORD *)long long v25 = *(_DWORD *)(a1 + 64);
    uint64_t matched = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, a3, a4);
    uint64_t v9 = (_OWORD *)(a2 - 72);
    uint64_t v10 = (void ***)(matched + 16);
    if (matched == a2 - 72)
    {
      *(_OWORD *)uint64_t matched = v20;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(v10);
      *(_OWORD *)(matched + 16) = v21;
      *(void *)(matched + 32) = v22;
      long long v21 = 0uLL;
      uint64_t v22 = 0;
      uint64_t v17 = (void **)(matched + 40);
      if (*(char *)(matched + 63) < 0) {
        operator delete(*v17);
      }
      long long v18 = *(_OWORD *)__p;
      *(void *)(matched + 56) = v24;
      *(_OWORD *)uint64_t v17 = v18;
      HIBYTE(v24) = 0;
      LOBYTE(__p[0]) = 0;
      int v19 = *(_DWORD *)&v25[3];
      *(_DWORD *)(matched + 64) = *(_DWORD *)v25;
      *(_DWORD *)(matched + 67) = v19;
    }
    else
    {
      *(_OWORD *)uint64_t matched = *v9;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(v10);
      uint64_t v11 = (void *)(a2 - 56);
      *(_OWORD *)(matched + 16) = *(_OWORD *)(a2 - 56);
      *(void *)(matched + 32) = *(void *)(a2 - 40);
      void *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      unint64_t v12 = (void **)(matched + 40);
      if (*(char *)(matched + 63) < 0) {
        operator delete(*v12);
      }
      long long v13 = (void **)(a2 - 32);
      long long v14 = *(_OWORD *)(a2 - 32);
      *(void *)(matched + 56) = *(void *)(a2 - 16);
      *(_OWORD *)unint64_t v12 = v14;
      int v15 = *(_DWORD *)(a2 - 8);
      *(unsigned char *)(a2 - 9) = 0;
      *(unsigned char *)(a2 - 32) = 0;
      *(_DWORD *)(matched + 67) = *(_DWORD *)(a2 - 5);
      *(_DWORD *)(matched + 64) = v15;
      uint64_t v16 = matched + 72;
      *uint64_t v9 = v20;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(a2 - 56));
      *(_OWORD *)(a2 - 56) = v21;
      *(void *)(a2 - 40) = v22;
      uint64_t v22 = 0;
      long long v21 = 0uLL;
      if (*(char *)(a2 - 9) < 0) {
        operator delete(*v13);
      }
      *(_OWORD *)long long v13 = *(_OWORD *)__p;
      *(void *)(a2 - 16) = v24;
      HIBYTE(v24) = 0;
      LOBYTE(__p[0]) = 0;
      *(_DWORD *)(a2 - 8) = *(_DWORD *)v25;
      *(_DWORD *)(a2 - 5) = *(_DWORD *)&v25[3];
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, v16, (uint64_t (**)(long long *, long long *))a3, 0x8E38E38E38E38E39 * ((v16 - a1) >> 3));
      if (SHIBYTE(v24) < 0) {
        operator delete(__p[0]);
      }
    }
    long long v26 = (void **)&v21;
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v26);
  }
}

void sub_1B1CCE0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 72 * v6 + 72;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, v9 + 72))
    {
      v9 += 72;
      uint64_t v6 = v11;
    }
    *(_OWORD *)a1 = *(_OWORD *)v9;
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(a1 + 16));
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v9 + 16);
    *(void *)(a1 + 32) = *(void *)(v9 + 32);
    *(void *)(v9 + 16) = 0;
    *(void *)(v9 + 24) = 0;
    *(void *)(v9 + 32) = 0;
    unint64_t v12 = (void **)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*v12);
    }
    long long v13 = *(_OWORD *)(v9 + 40);
    *(void *)(a1 + 56) = *(void *)(v9 + 56);
    *(_OWORD *)unint64_t v12 = v13;
    *(unsigned char *)(v9 + 63) = 0;
    *(unsigned char *)(v9 + 40) = 0;
    int v14 = *(_DWORD *)(v9 + 64);
    *(_DWORD *)(a1 + 67) = *(_DWORD *)(v9 + 67);
    *(_DWORD *)(a1 + 64) = v14;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (long long *)(a1 + 72 * (v4 >> 1));
    uint64_t v10 = (long long *)(a2 - 72);
    if ((*a3)(v9, (long long *)(a2 - 72)))
    {
      long long v11 = *(_OWORD *)(a2 - 56);
      long long v19 = *v10;
      long long v20 = v11;
      uint64_t v21 = *(void *)(a2 - 40);
      *(void *)(a2 - 56) = 0;
      *(void *)(a2 - 48) = 0;
      long long v12 = *(_OWORD *)(a2 - 32);
      *(void *)(a2 - 40) = 0;
      *(void *)(a2 - 32) = 0;
      long long v22 = v12;
      uint64_t v23 = *(void *)(a2 - 16);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(_DWORD *)&v24[3] = *(_DWORD *)(a2 - 5);
      *(_DWORD *)uint64_t v24 = *(_DWORD *)(a2 - 8);
      do
      {
        long long v13 = v9;
        *uint64_t v10 = *v9;
        std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)v10 + 2);
        int v14 = (void ***)(v9 + 1);
        v10[1] = v9[1];
        *((void *)v10 + 4) = *((void *)v9 + 4);
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 3) = 0;
        *((void *)v9 + 4) = 0;
        int v15 = (void **)v10 + 5;
        if (*((char *)v10 + 63) < 0) {
          operator delete(*v15);
        }
        long long v16 = *(long long *)((char *)v13 + 40);
        *((void *)v10 + 7) = *((void *)v13 + 7);
        *(_OWORD *)int v15 = v16;
        int v17 = *((_DWORD *)v13 + 16);
        *((unsigned char *)v13 + 63) = 0;
        *((unsigned char *)v13 + 40) = 0;
        *(_DWORD *)((char *)v10 + 67) = *(_DWORD *)((char *)v13 + 67);
        *((_DWORD *)v10 + 16) = v17;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 72 * v8);
        uint64_t v10 = v13;
      }
      while (((*a3)(v9, &v19) & 1) != 0);
      long long v18 = (void **)v13 + 5;
      *long long v13 = v19;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(v14);
      v13[1] = v20;
      *((void *)v13 + 4) = v21;
      uint64_t v21 = 0;
      long long v20 = 0uLL;
      if (*((char *)v13 + 63) < 0) {
        operator delete(*v18);
      }
      *(_OWORD *)long long v18 = v22;
      *((void *)v13 + 7) = v23;
      HIBYTE(v23) = 0;
      LOBYTE(v22) = 0;
      *((_DWORD *)v13 + 16) = *(_DWORD *)v24;
      *(_DWORD *)((char *)v13 + 67) = *(_DWORD *)&v24[3];
      long long v25 = (void **)&v20;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v25);
    }
  }
}

void sub_1B1CCE3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PhoneticMatchAlignmentSpan>::__push_back_slow_path<quasar::PhoneticMatchAlignmentSpan const&>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  int v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  long long v11 = &v7[72 * v3];
  long long v13 = &v7[72 * v6];
  std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan const&>((uint64_t)(a1 + 2), v11, a2);
  long long v12 = v11 + 72;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchAlignmentSpan>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1CCE514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchAlignmentSpan>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan const&>(uint64_t a1, void *a2, uint64_t *a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5));
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2 + 3, a3[3], a3[4], 0x6DB6DB6DB6DB6DB7 * ((a3[4] - a3[3]) >> 5));
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  return std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2 + 6, a3[6], a3[7], 0x6DB6DB6DB6DB6DB7 * ((a3[7] - a3[6]) >> 5));
}

void sub_1B1CCE5D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PhoneticMatchAlignmentSpan>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchAlignmentSpan>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchAlignmentSpan>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 72;
      std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan>(a1, (void *)(v7 - 72), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 72;
      *((void *)&v16 + 1) -= 72;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan>(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 24);
  a2[5] = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  __n128 result = *(__n128 *)(a3 + 48);
  *((__n128 *)a2 + 3) = result;
  a2[8] = *(void *)(a3 + 64);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void ***)(a1[2] + 8);
  uint64_t v2 = *(void ***)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100](v3, v1);
      v1 += 9;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::PhoneticMatchAlignmentSpan>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::PhoneticMatchAlignmentSpan>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100](v4, (void **)(i - 72));
  }
}

uint64_t std::vector<quasar::PhoneticMatchResult>::__push_back_slow_path<quasar::PhoneticMatchResult const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[72 * v3];
  long long v13 = &v7[72 * v6];
  std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  long long v12 = v11 + 72;
  std::vector<quasar::PhoneticMatchResult>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchResult>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1CCE9AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchResult>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PhoneticMatchResult>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>,std::reverse_iterator<quasar::PhoneticMatchResult*>,std::reverse_iterator<quasar::PhoneticMatchResult*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, float a8)
{
  uint64_t v10 = a1 + 6;
  unint64_t v11 = a2;
  uint64_t v12 = a1[9];
  unint64_t v13 = (unint64_t)a2 % a1[8];
  uint64_t v14 = *(void *)(v12 + 16 * v13 + 8);
  if (v14)
  {
    uint64_t v15 = *(void *)(v12 + 16 * v13);
    long long v16 = a1 + 6;
    if (v15 != -1) {
      long long v16 = (uint64_t *)(*(void *)(v12 + 16 * v15 + 8) + 8);
    }
    uint64_t v17 = *(void *)(v14 + 8);
    for (uint64_t i = *v16; i != v17; uint64_t i = *(void *)(i + 8))
    {
      if (*(_DWORD *)i == a2)
      {
        if (*(float *)(*a1 + 28 * (*(_DWORD *)(i + 4) - 1) + 20) <= a8) {
          return 0;
        }
        *(_DWORD *)(i + 4) = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::NewToken((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        if (kaldi::g_kaldi_verbose_level < 5) {
          return 1;
        }
        goto LABEL_14;
      }
    }
  }
  int v19 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::NewToken((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  unint64_t v20 = v11 % a1[8];
  uint64_t v21 = (void *)(a1[9] + 16 * v20);
  uint64_t v22 = kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::New((uint64_t)v10);
  *(_DWORD *)uint64_t v22 = a2;
  *(_DWORD *)(v22 + 4) = v19;
  uint64_t v23 = v21 + 1;
  uint64_t v24 = v21[1];
  if (v24)
  {
    *(void *)(v22 + 8) = *(void *)(v24 + 8);
    *(void *)(v24 + 8) = v22;
    *uint64_t v23 = v22;
  }
  else
  {
    uint64_t v25 = a1[7];
    if (v25 != -1) {
      uint64_t v10 = (uint64_t *)(*(void *)(a1[9] + 16 * v25 + 8) + 8);
    }
    *uint64_t v10 = v22;
    *(void *)(v22 + 8) = 0;
    *uint64_t v23 = v22;
    *uint64_t v21 = v25;
    a1[7] = v20;
  }
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
LABEL_14:
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v33, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"id=", 3);
    long long v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" prev_id=", 9);
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" nextstate=", 11);
    long long v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" weight=", 8);
    uint64_t v29 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" ilabel=", 8);
    char v30 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" olabel=", 8);
    int v31 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" phone=", 7);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v33);
  }
  return 1;
}

void sub_1B1CCED8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ProcessNonemitting(uint64_t *a1, float a2)
{
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Process non-emitting with cutoff=", 33);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
  }
  uint64_t v4 = a1[6];
  if (!v4) {
    return;
  }
  do
  {
    std::deque<int>::push_back(a1 + 25, (_DWORD *)v4);
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4);
  uint64_t v5 = a1[30];
  if (!v5) {
    return;
  }
  do
  {
    uint64_t v6 = v5 - 1;
    unint64_t v7 = a1[29] + v6;
    uint64_t v8 = *(void *)(a1[26] + ((v7 >> 7) & 0x1FFFFFFFFFFFFF8));
    unsigned int v35 = 0;
    unsigned int v35 = *(_DWORD *)(v8 + 4 * (v7 & 0x3FF));
    a1[30] = v6;
    std::deque<int>::__maybe_remove_back_spare[abi:ne180100](a1 + 25, 1);
    uint64_t v9 = a1[9];
    uint64_t v10 = *(void *)(v9 + 16 * ((int)v35 % (unint64_t)a1[8]));
    unint64_t v11 = a1 + 6;
    if (v10 != -1) {
      unint64_t v11 = (uint64_t *)(*(void *)(v9 + 16 * v10 + 8) + 8);
    }
    for (uint64_t i = *v11; *(_DWORD *)i != v35; uint64_t i = *(void *)(i + 8))
      ;
    int v13 = *(_DWORD *)(i + 4);
    uint64_t v14 = *a1;
    unsigned int v15 = v13 - 1;
    uint64_t v16 = *a1 + 28 * (v13 - 1);
    float v18 = *(float *)(v16 + 20);
    uint64_t v17 = (float *)(v16 + 20);
    if (v18 > a2) {
      goto LABEL_35;
    }
    float v19 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::finalWeight((uint64_t)a1, (__int32 *)&v35);
    *(float *)long long v36 = v19;
    LODWORD(v34) = 2139095040;
    if (v19 != INFINITY)
    {
      uint64_t v20 = v14 + 28 * v15;
      int v23 = *(_DWORD *)(v20 + 24);
      uint64_t v22 = (int *)(v20 + 24);
      int v21 = v23;
      if (v23 != -1)
      {
        float v24 = v19 + *v17;
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, 5);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Exit subroutine state=", 22);
          uint64_t v25 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" nextstate=", 11);
          long long v26 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" weight=", 8);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
          int v21 = *v22;
        }
        if (kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink(a1, v21, 0, 0, -1, v13, 0, v24))
        {
          LODWORD(v36[0]) = *v22;
          std::deque<int>::push_front((uint64_t)(a1 + 25), v36);
        }
      }
    }
    uint64_t v27 = a1[16];
    unint64_t v38 = 0;
    (*(void (**)(uint64_t, void, void *))(*(void *)v27 + 136))(v27, v35, v36);
    long long v28 = (unsigned int *)(v14 + 28 * v15 + 24);
    while (1)
    {
      if (!v36[0])
      {
        if (v38 >= v36[2]) {
          goto LABEL_33;
        }
LABEL_24:
        uint64_t v29 = (long long *)(v36[1] + 16 * v38);
        goto LABEL_25;
      }
      if ((*(unsigned int (**)(void))(*(void *)v36[0] + 24))(v36[0])) {
        break;
      }
      if (!v36[0]) {
        goto LABEL_24;
      }
      uint64_t v29 = (long long *)(*(uint64_t (**)(void))(*(void *)v36[0] + 32))();
LABEL_25:
      long long v34 = *v29;
      int v33 = HIDWORD(v34);
      int v30 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::modifyArcForSubroutineEntry((uint64_t)a1, SDWORD1(v34), &v33, *v28);
      int v32 = *(_DWORD *)(**(void **)(a1[5] + 8) + 4 * (int)v34);
      float v31 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ComputeWeight(a1, (uint64_t)&v34, (float *)&v32, v13);
      if (v31 < a2
        && kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink(a1, v33, v34, SDWORD1(v34), v30, v13, 0, v31))
      {
        std::deque<int>::push_front((uint64_t)(a1 + 25), &v33);
      }
      if (v36[0]) {
        (*(void (**)(void))(*(void *)v36[0] + 40))(v36[0]);
      }
      else {
        ++v38;
      }
    }
    if (v36[0])
    {
      (*(void (**)(void))(*(void *)v36[0] + 8))();
      goto LABEL_35;
    }
LABEL_33:
    if (v37) {
      --*v37;
    }
LABEL_35:
    uint64_t v5 = a1[30];
  }
  while (v5);
}

void sub_1B1CCF1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

float kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ProcessEmitting(uint64_t a1, int a2, float a3)
{
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v66, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Process emitting isym=", 22);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v66);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6 != -1)
  {
    uint64_t v7 = *(void *)(a1 + 72);
    do
    {
      uint64_t v8 = (uint64_t *)(v7 + 16 * v6);
      v8[1] = 0;
      uint64_t v6 = *v8;
    }
    while (v6 != -1);
  }
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = -1;
  unint64_t v65 = 0;
  float v64 = 0.0;
  char v63 = 0;
  kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::GetCutoff(a1, v9, &v65, &v64, &v63, a3);
  float v11 = v10;
  unint64_t v12 = (unint64_t)(float)(*(float *)(a1 + 180) * (float)v65);
  if (*(void *)(a1 + 64) < v12) {
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 48, v12);
  }
  if (!v63)
  {
    float v18 = 1.0e10;
    if (!v9) {
      return v18;
    }
    goto LABEL_36;
  }
  uint64_t v13 = *v63;
  uint64_t v14 = *(void *)a1;
  unsigned int v15 = v63[1] - 1;
  uint64_t v16 = *(void *)(a1 + 128);
  unint64_t v70 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v16 + 136))(v16, v13, &v66);
  uint64_t v17 = (float *)(v14 + 28 * v15 + 20);
  float v18 = 1.0e10;
  while (1)
  {
    if (!v66)
    {
      if (v70 >= v68) {
        goto LABEL_31;
      }
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v66 + 24))(v66)) {
      break;
    }
    if (v66)
    {
      float v19 = (float *)(*(uint64_t (**)(void))(*(void *)v66 + 32))();
      goto LABEL_16;
    }
LABEL_15:
    float v19 = (float *)(v67 + 16 * v70);
LABEL_16:
    uint64_t v20 = *(int *)v19;
    if (v20)
    {
      uint64_t v21 = *(void *)(a1 + 40);
      BOOL v22 = *(_DWORD *)(v21 + 48) != v20 || a2 == 0;
      uint64_t v23 = *(void *)(*(void *)(v21 + 8) + 24 * a2);
      if (v22) {
        float v24 = -0.0;
      }
      else {
        float v24 = a3;
      }
      if ((float)(v64 + (float)((float)(*(float *)(v23 + 4 * v20) + v24) + (float)(v19[2] + *v17))) < v18) {
        float v18 = v64 + (float)((float)(*(float *)(v23 + 4 * v20) + v24) + (float)(v19[2] + *v17));
      }
    }
    if (v66) {
      (*(void (**)(uint64_t))(*(void *)v66 + 40))(v66);
    }
    else {
      ++v70;
    }
  }
  if (v66)
  {
    (*(void (**)(void))(*(void *)v66 + 8))();
    if (!v9) {
      return v18;
    }
    goto LABEL_36;
  }
LABEL_31:
  if (v69) {
    --*v69;
  }
  if (!v9) {
    return v18;
  }
LABEL_36:
  while (2)
  {
    unsigned int v62 = 0;
    int v25 = *(_DWORD *)(v9 + 4);
    unsigned int v62 = *(_DWORD *)v9;
    uint64_t v26 = *(void *)a1;
    unsigned int v27 = v25 - 1;
    uint64_t v28 = *(void *)a1 + 28 * (v25 - 1);
    float v30 = *(float *)(v28 + 20);
    uint64_t v29 = (float *)(v28 + 20);
    if (v30 >= v11) {
      goto LABEL_83;
    }
    float v31 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::finalWeight(a1, (__int32 *)&v62);
    *(float *)&uint64_t v66 = v31;
    v71[0] = 2139095040;
    if (v31 != INFINITY)
    {
      uint64_t v32 = v26 + 28 * v27;
      int v35 = *(_DWORD *)(v32 + 24);
      long long v34 = (int *)(v32 + 24);
      int v33 = v35;
      if (v35 != -1)
      {
        uint64_t v36 = *(void *)(a1 + 40);
        if (*(_DWORD *)(v36 + 48)) {
          BOOL v37 = 1;
        }
        else {
          BOOL v37 = a2 == 0;
        }
        float v38 = *v29;
        float v39 = **(float **)(*(void *)(v36 + 8) + 24 * a2);
        if (v37) {
          float v40 = -0.0;
        }
        else {
          float v40 = 0.0;
        }
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v66, 5);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Exit subroutine state=", 22);
          long long v41 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" nextstate=", 11);
          long long v42 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" weight=", 8);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v66);
          int v33 = *v34;
        }
        kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink((void *)a1, v33, 0, 0, -1, *(_DWORD *)(v9 + 4), a2, v31 + (float)(v38 + (float)(v39 + v40)));
      }
    }
    uint64_t v43 = *(void *)(a1 + 128);
    unint64_t v70 = 0;
    (*(void (**)(uint64_t, void, uint64_t *))(*(void *)v43 + 136))(v43, v62, &v66);
    long long v44 = (int *)(v26 + 28 * v27 + 24);
    while (2)
    {
      if (!v66)
      {
        if (v70 >= v68) {
          goto LABEL_71;
        }
        goto LABEL_54;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v66 + 24))(v66))
      {
        if (v66)
        {
          long long v45 = (float *)(*(uint64_t (**)(void))(*(void *)v66 + 32))();
          goto LABEL_55;
        }
LABEL_54:
        long long v45 = (float *)(v67 + 16 * v70);
LABEL_55:
        v71[0] = (int)v45[3];
        uint64_t v46 = *(int *)v45;
        if (v46)
        {
          uint64_t v47 = *(void *)(a1 + 40);
          BOOL v48 = *(_DWORD *)(v47 + 48) != v46 || a2 == 0;
          float v49 = v45[2];
          float v50 = *v29;
          float v51 = *(float *)(*(void *)(*(void *)(v47 + 8) + 24 * a2) + 4 * v46);
          float v52 = v48 ? -0.0 : a3;
          int v53 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::modifyArcForSubroutineEntry(a1, *((_DWORD *)v45 + 1), v71, *v44);
          float v54 = (float)(v49 + v50) + (float)(v51 + v52);
          if (v54 < v18)
          {
            if ((float)(v54 + v64) < v18) {
              float v18 = v54 + v64;
            }
            kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink((void *)a1, v71[0], *(_DWORD *)v45, *((_DWORD *)v45 + 1), v53, *(_DWORD *)(v9 + 4), a2, v54);
          }
        }
        if (v66) {
          (*(void (**)(uint64_t))(*(void *)v66 + 40))(v66);
        }
        else {
          ++v70;
        }
        continue;
      }
      break;
    }
    if (v66)
    {
      (*(void (**)(void))(*(void *)v66 + 8))();
      goto LABEL_73;
    }
LABEL_71:
    if (v69) {
      --*v69;
    }
LABEL_73:
    uint64_t v55 = *(void *)(a1 + 40);
    if (*(_DWORD *)(v55 + 48)) {
      BOOL v56 = 1;
    }
    else {
      BOOL v56 = a2 == 0;
    }
    uint64_t v57 = *(float **)(*(void *)(v55 + 8) + 24 * a2);
    float v58 = 0.0;
    if (v56) {
      float v58 = -0.0;
    }
    float v59 = *v29 + (float)(*v57 + v58);
    if (v59 < v18)
    {
      if ((float)(v59 + v64) < v18) {
        float v18 = v59 + v64;
      }
      kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink((void *)a1, v62, a2, 0, *v44, *(_DWORD *)(v9 + 4), a2, v59);
    }
LABEL_83:
    uint64_t v60 = *(void *)(v9 + 8);
    *(void *)(v9 + 8) = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = v9;
    uint64_t v9 = v60;
    if (v60) {
      continue;
    }
    return v18;
  }
}

void sub_1B1CCF8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void std::deque<int>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = a1[2];
  a1[5] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::GetBestPath(uint64_t a1, uint64_t a2)
{
  if ((kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ReachedFinal((uint64_t *)a1) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    int v33 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)&__p);
    long long v34 = (void *)fst::cerr(v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Failed to reach final state", 27);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
    if (SHIBYTE(v41) < 0) {
      operator delete(__p);
    }
    return 0;
  }
  unint64_t v4 = *(unsigned int **)(a1 + 48);
  if (!v4) {
    return 0;
  }
  unsigned int v5 = 0;
  float v6 = INFINITY;
  do
  {
    uint64_t v7 = *(void *)a1;
    unsigned int v8 = v4[1] - 1;
    float v9 = *(float *)(*(void *)a1 + 28 * v8 + 20);
    (*(void (**)(void, void))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), *v4);
    float v11 = NAN;
    if (v9 != -INFINITY && v10 != -INFINITY)
    {
      float v11 = INFINITY;
      BOOL v12 = v10 == INFINITY || v9 == INFINITY;
      float v13 = v9 + v10;
      if (!v12) {
        float v11 = v13;
      }
    }
    *(float *)&std::string __p = v11;
    LODWORD(v36) = 2139095040;
    BOOL v14 = v11 != INFINITY && v11 < v6;
    if (v14 && *(_DWORD *)(v7 + 28 * v8 + 24) == -1)
    {
      unsigned int v5 = v4[1];
      float v6 = v11;
    }
    unint64_t v4 = (unsigned int *)*((void *)v4 + 1);
  }
  while (v4);
  if (!v5) {
    return 0;
  }
  unint64_t v15 = 0;
  std::string __p = 0;
  float v40 = 0;
  unint64_t v41 = 0;
  uint64_t v16 = (unsigned int *)(*(void *)a1 + 28 * (v5 - 1));
  do
  {
    uint64_t v17 = *(void *)a1;
    unsigned int v18 = v5 - 1;
    uint64_t v19 = *(void *)a1 + 28 * (v5 - 1);
    uint64_t v21 = (unsigned int *)(v19 + 12);
    int v20 = *(_DWORD *)(v19 + 12);
    if (v20) {
      double v22 = *(float *)(v17 + 28 * (v20 - 1) + 20);
    }
    else {
      double v22 = 0.0;
    }
    float v23 = *(float *)(v19 + 20);
    float v24 = v23 - v22;
    int v25 = (_DWORD *)(v17 + 28 * v18);
    int v26 = v25[4];
    int v27 = v25[1];
    LODWORD(v25) = v25[2];
    unsigned int v28 = *(_DWORD *)v19;
    LODWORD(v36) = v27 + (v26 << 8);
    HIDWORD(v36) = v25;
    *(float *)&uint64_t v37 = v23;
    *((float *)&v37 + 1) = v24 - v23;
    unsigned int v38 = v28;
    if (v15 >= v41)
    {
      unint64_t v15 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t *)&__p, (uint64_t)&v36);
    }
    else
    {
      *(void *)unint64_t v15 = v36;
      *(void *)(v15 + 8) = v37;
      *(_DWORD *)(v15 + 16) = v38;
      v15 += 20;
    }
    float v40 = (unsigned char *)v15;
    unsigned int v5 = *v21;
  }
  while (v5);
  float v40 = (unsigned char *)(v15 - 20);
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v29);
  if (v40 - (unsigned char *)__p >= 1)
  {
    unint64_t v30 = (v40 - (unsigned char *)__p) / 0x14uLL + 1;
    unint64_t v31 = 20 * ((v40 - (unsigned char *)__p) / 0x14uLL);
    do
    {
      uint64_t v36 = *(void *)((char *)__p + v31 - 20);
      uint64_t v37 = *(void *)((char *)__p + v31 - 12);
      unsigned int v38 = *(_DWORD *)((char *)__p + v31 - 4);
      unsigned int v38 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      if (SHIDWORD(v36) >= 1 && HIDWORD(v36) <= *(_DWORD *)(a1 + 136)) {
        HIDWORD(v36) = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 208))(a2, v29, &v36);
      uint64_t v29 = v38;
      --v30;
      v31 -= 20;
    }
    while (v30 > 1);
  }
  v35[0] = (*(float (**)(void, void))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), *v16);
  v35[1] = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 184))(a2, v29, v35);
  if (__p)
  {
    float v40 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_1B1CCFEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::NewToken(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, float a8)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (*(void *)(a1 + 8) == v8)
  {
    unint64_t v10 = *(void *)(a1 + 32);
    if (v10 >= *(int *)(a1 + 188))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      kaldi::quasar::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
    }
    unint64_t v9 = v10 + 1;
    *(void *)(a1 + 32) = v9;
  }
  else
  {
    unint64_t v9 = *(unsigned int *)(v8 - 4);
    *(void *)(a1 + 16) = v8 - 4;
  }
  uint64_t v11 = *(void *)a1 + 28 * (v9 - 1);
  *(_DWORD *)uint64_t v11 = a2;
  *(_DWORD *)(v11 + 4) = a3;
  *(_DWORD *)(v11 + 8) = a4;
  *(_DWORD *)(v11 + 12) = a6;
  *(float *)(v11 + 20) = a8;
  *(_DWORD *)(v11 + 16) = a7;
  *(_DWORD *)(v11 + 24) = a5;
  return v9;
}

void sub_1B1CCFFC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::New(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result) {
    operator new[]();
  }
  *(void *)(a1 + 48) = *(void *)(result + 8);
  return result;
}

float kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::finalWeight(uint64_t a1, __int32 *a2)
{
  if (!*(unsigned char *)(a1 + 192)) {
    return (*(float (**)(void, void))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), *a2);
  }
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v5 = *a2;
  unint64_t v13 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 136))(v4, v5, v11);
  if (v11[0])
  {
    if (!(*(unsigned int (**)(void))(*(void *)v11[0] + 24))(v11[0])) {
      goto LABEL_11;
    }
  }
  else if (v13 < v11[2])
  {
LABEL_11:
    float v6 = INFINITY;
    goto LABEL_12;
  }
  uint64_t v7 = *(__int32 **)(a1 + 152);
  uint64_t v8 = wmemchr(*(__int32 **)(a1 + 144), *a2, ((uint64_t)v7 - *(void *)(a1 + 144)) >> 2);
  if (v8) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9 != *(__int32 **)(a1 + 152)) {
    goto LABEL_11;
  }
  float v6 = 0.0;
LABEL_12:
  if (v11[0])
  {
    (*(void (**)(void))(*(void *)v11[0] + 8))(v11[0]);
  }
  else if (v12)
  {
    --*v12;
  }
  return v6;
}

void sub_1B1CD0288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::modifyArcForSubroutineEntry(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  int v4 = a4;
  if (a2 < 1 || *(_DWORD *)(a1 + 136) < a2) {
    return a4;
  }
  uint64_t v5 = *a3;
  *a3 = *(_DWORD *)(*(void *)(a1 + 144) + 4 * (a2 - 1));
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"subroutine=", 11);
    float v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" prevnextstate=", 15);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" nextstate=", 11);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  if (v4 != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    unint64_t v9 = (void *)fst::cerr(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Cannot enter subroutine=", 24);
    unint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ret_state=", 11);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (nesting not allowed)", 22);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  return v5;
}

void sub_1B1CD0414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ComputeWeight(void *a1, uint64_t a2, float *a3, int a4)
{
  if (!a4)
  {
    float v7 = *(float *)(a2 + 8);
    float result = NAN;
    if (v7 == -INFINITY) {
      return result;
    }
    float v9 = *a3;
    float result = NAN;
    if (*a3 == -INFINITY) {
      return result;
    }
    goto LABEL_13;
  }
  float v4 = *(float *)(*a1 + 28 * (a4 - 1) + 20);
  float result = NAN;
  if (v4 != -INFINITY)
  {
    float v6 = *(float *)(a2 + 8);
    float result = NAN;
    if (v6 != -INFINITY)
    {
      float v7 = INFINITY;
      BOOL v8 = v4 == INFINITY || v6 == INFINITY;
      if (v8 || (float v7 = v4 + v6, result = NAN, (float)(v4 + v6) != -INFINITY))
      {
        float v9 = *a3;
        float result = NAN;
        if (*a3 != -INFINITY)
        {
LABEL_13:
          float result = INFINITY;
          BOOL v10 = v9 == INFINITY || v7 == INFINITY;
          float v11 = v7 + v9;
          if (!v10) {
            return v11;
          }
        }
      }
    }
  }
  return result;
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::GetCutoff(uint64_t result, uint64_t a2, void *a3, float *a4, void *a5, float a6)
{
  uint64_t v7 = a2;
  uint64_t v8 = result;
  if (*(_DWORD *)(result + 172) == 0x7FFFFFFF)
  {
    uint64_t v9 = 0;
    float v10 = 1.0e10;
    if (a2)
    {
      do
      {
        float v11 = *(float *)(*(void *)result + 28 * (*(_DWORD *)(v7 + 4) - 1) + 20);
        if (v11 >= v10)
        {
          BOOL v12 = 1;
        }
        else
        {
          float v10 = *(float *)(*(void *)result + 28 * (*(_DWORD *)(v7 + 4) - 1) + 20);
          BOOL v12 = a5 == 0;
        }
        if (!v12)
        {
          *a5 = v7;
          float v10 = v11;
        }
        uint64_t v7 = *(void *)(v7 + 8);
        ++v9;
      }
      while (v7);
    }
    if (a3) {
      *a3 = v9;
    }
    if (a4) {
      *a4 = *(float *)(result + 168);
    }
  }
  else
  {
    char v13 = (void **)(result + 248);
    *(void *)(result + 256) = *(void *)(result + 248);
    uint64_t v14 = 0;
    if (a2)
    {
      float v15 = 1.0e10;
      do
      {
        float v16 = *(float *)(*(void *)v8 + 28 * (*(_DWORD *)(v7 + 4) - 1) + 20);
        unsigned int v18 = *(float **)(v8 + 256);
        unint64_t v17 = *(void *)(v8 + 264);
        if ((unint64_t)v18 >= v17)
        {
          int v20 = (float *)*v13;
          uint64_t v21 = ((char *)v18 - (unsigned char *)*v13) >> 2;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v17 - (void)v20;
          if (v23 >> 1 > v22) {
            unint64_t v22 = v23 >> 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8 + 264, v24);
            int v20 = *(float **)(v8 + 248);
            unsigned int v18 = *(float **)(v8 + 256);
          }
          else
          {
            int v25 = 0;
          }
          int v26 = (float *)&v25[4 * v21];
          *int v26 = v16;
          uint64_t v19 = v26 + 1;
          while (v18 != v20)
          {
            float v27 = *--v18;
            a6 = v27;
            *--int v26 = v27;
          }
          *(void *)(v8 + 248) = v26;
          *(void *)(v8 + 256) = v19;
          *(void *)(v8 + 264) = &v25[4 * v24];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          float *v18 = v16;
          uint64_t v19 = v18 + 1;
        }
        *(void *)(v8 + 256) = v19;
        if (v16 >= v15)
        {
          BOOL v28 = 1;
        }
        else
        {
          float v15 = v16;
          BOOL v28 = a5 == 0;
        }
        if (!v28)
        {
          *a5 = v7;
          float v15 = v16;
        }
        uint64_t v7 = *(void *)(v7 + 8);
        ++v14;
      }
      while (v7);
    }
    else
    {
      float v15 = 1.0e10;
    }
    if (a3) {
      *a3 = v14;
    }
    float result = *(void *)(v8 + 248);
    uint64_t v29 = *(float **)(v8 + 256);
    unint64_t v30 = ((uint64_t)v29 - result) >> 2;
    unint64_t v31 = *(int *)(v8 + 172);
    if (v30 <= v31)
    {
      if (a4) {
        *a4 = *(float *)(v8 + 168);
      }
    }
    else
    {
      if (v30 > *(void *)(v8 + 272)) {
        *(void *)(v8 + 272) = v30;
      }
      uint64_t v32 = (float *)(result + 4 * v31);
      if (v32 != v29)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((float *)result, v32, v29, a6);
        float result = *(void *)(v8 + 248);
        unint64_t v31 = *(int *)(v8 + 172);
      }
      float v33 = *(float *)(v8 + 168);
      float v34 = v15 + v33;
      if (*(float *)(result + 4 * v31) < (float)(v15 + v33)) {
        float v34 = *(float *)(result + 4 * v31);
      }
      if (a4)
      {
        float v35 = *(float *)(v8 + 176);
        if ((float)((float)(v34 - v15) + v35) < v33) {
          float v33 = (float)(v34 - v15) + v35;
        }
        *a4 = v33;
      }
    }
  }
  return result;
}

float std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3, float result)
{
  if (a3 != a2)
  {
    float v4 = a3;
    do
    {
      unint64_t v7 = v4 - a1;
      if (v7 < 2) {
        break;
      }
      if (v7 == 3)
      {
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, a1 + 1, v4 - 1);
        return result;
      }
      if (v7 == 2)
      {
        float result = *(v4 - 1);
        float v30 = *a1;
        if (result < *a1)
        {
          *a1 = result;
          *(v4 - 1) = v30;
        }
        return result;
      }
      if ((char *)v4 - (char *)a1 <= 31)
      {
        return std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v4, result);
      }
      uint64_t v8 = &a1[v7 >> 1];
      uint64_t v9 = v4 - 1;
      int v10 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v8, v4 - 1);
      float result = *a1;
      if (*a1 >= *v8)
      {
        float v11 = v4 - 1;
        while (--v11 != a1)
        {
          if (*v11 < *v8)
          {
            *a1 = *v11;
            float *v11 = result;
            ++v10;
            goto LABEL_13;
          }
        }
        uint64_t v21 = a1 + 1;
        if (result >= *v9)
        {
          while (v21 != v9)
          {
            float v22 = *v21;
            if (result < *v21)
            {
              *v21++ = *v9;
              *uint64_t v9 = v22;
              goto LABEL_45;
            }
            ++v21;
          }
          return result;
        }
LABEL_45:
        if (v21 == v9) {
          return result;
        }
        while (1)
        {
          float v25 = *a1;
          do
          {
            float v26 = *v21++;
            float result = v26;
          }
          while (v25 >= v26);
          float v27 = v21 - 1;
          do
          {
            float v28 = *--v9;
            float v29 = v28;
          }
          while (v25 < v28);
          if (v27 >= v9) {
            break;
          }
          *float v27 = v29;
          *uint64_t v9 = result;
        }
        a1 = v21 - 1;
        if (v27 > a2) {
          return result;
        }
      }
      else
      {
        float v11 = v4 - 1;
LABEL_13:
        BOOL v12 = a1 + 1;
        if (a1 + 1 >= v11)
        {
          float v16 = a1 + 1;
        }
        else
        {
          char v13 = a1 + 1;
          while (1)
          {
            float v14 = *v8;
            do
            {
              float v15 = *v13++;
              float result = v15;
            }
            while (v15 < v14);
            float v16 = v13 - 1;
            do
            {
              float v17 = *--v11;
              float v18 = v17;
            }
            while (v17 >= v14);
            if (v16 >= v11) {
              break;
            }
            float *v16 = v18;
            float *v11 = result;
            ++v10;
            if (v16 == v8) {
              uint64_t v8 = v11;
            }
          }
        }
        if (v16 != v8)
        {
          float result = *v8;
          float v19 = *v16;
          if (*v8 < *v16)
          {
            float *v16 = result;
            *uint64_t v8 = v19;
            ++v10;
          }
        }
        if (v16 == a2) {
          return result;
        }
        if (!v10)
        {
          if (v16 <= a2)
          {
            uint64_t v23 = v16 + 1;
            while (v23 != v4)
            {
              float v24 = *(v23 - 1);
              float result = *v23++;
              if (result < v24) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v12 != v16)
            {
              float v20 = *(v12 - 1);
              float result = *v12++;
              if (result < v20) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2) {
          a1 = v16 + 1;
        }
        else {
          float v4 = v16;
        }
      }
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    float v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float result)
{
  while (a1 != a2 - 1)
  {
    float v3 = a1++;
    if (v3 != a2 && a1 != a2)
    {
      float result = *v3;
      float v4 = a1;
      float v5 = v3;
      float v6 = a1;
      do
      {
        float v7 = *v6++;
        float v8 = v7;
        if (v7 < result)
        {
          float result = v8;
          float v5 = v4;
        }
        float v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v3)
      {
        float result = *v3;
        *float v3 = *v5;
        float *v5 = result;
      }
    }
  }
  return result;
}

void kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = a1 + 24;
  *(void *)(v2 - 8) = a2;
  if (a2 > (*(void *)(v2 + 8) - v3) >> 4)
  {
    long long v4 = 0uLL;
    std::vector<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket,std::allocator<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket>>::resize(v2, a2, &v4);
  }
}

void std::vector<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket,std::allocator<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket>>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket,std::allocator<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket,std::allocator<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket>>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  float v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  float v7 = v8;
  uint64_t v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 4)
  {
    if (a2)
    {
      uint64_t v16 = 16 * a2;
      float v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 4);
    if (v11 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 4;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 3 > v11) {
      unint64_t v11 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      float v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v6, v14);
    }
    else {
      float v15 = 0;
    }
    float v18 = &v15[16 * v12];
    float v19 = &v18[16 * a2];
    uint64_t v20 = 16 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_OWORD *)uint64_t v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    float v22 = &v15[16 * v14];
    float v24 = (char *)*a1;
    uint64_t v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      uint64_t v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ReachedFinal(uint64_t *a1)
{
  uint64_t v1 = (unsigned int *)a1[6];
  if (!v1) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = *a1;
    unsigned int v4 = v1[1] - 1;
    float v5 = *(float *)(*a1 + 28 * v4 + 20);
    (*(void (**)(uint64_t, void))(*(void *)a1[16] + 32))(a1[16], *v1);
    float v7 = NAN;
    if (v5 != -INFINITY && v6 != -INFINITY)
    {
      float v7 = INFINITY;
      BOOL v8 = v6 == INFINITY || v5 == INFINITY;
      float v9 = v5 + v6;
      if (!v8) {
        float v7 = v9;
      }
    }
    if (v7 != INFINITY && *(_DWORD *)(v3 + 28 * v4 + 24) == -1) {
      break;
    }
    uint64_t v1 = (unsigned int *)*((void *)v1 + 1);
    if (!v1) {
      return 0;
    }
  }
  return 1;
}

uint64_t fst::ConvertLattice<fst::LatticeWeightTpl<float>,fst::TropicalWeightTpl<float>>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  int v5 = v4;
  if (v4 >= 1)
  {
    int v6 = v4;
    do
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
      --v6;
    }
    while (v6);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v7);
  if (v5 < 1) {
    return result;
  }
  uint64_t v9 = 0;
  do
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v27, a1, v9);
    LODWORD(v21) = HIDWORD(v27);
    LODWORD(v24[0]) = v27;
    int v30 = 2139095040;
    float v29 = INFINITY;
    if (*(float *)&v27 != INFINITY || (v10.n128_u32[0] = v21, *(float *)&v21 != v29))
    {
      v10.n128_u32[0] = 2143289344;
      if (*(float *)&v27 != -INFINITY && *((float *)&v27 + 1) != -INFINITY)
      {
        v10.n128_u32[0] = 2139095040;
        if (*((float *)&v27 + 1) != INFINITY && *(float *)&v27 != INFINITY) {
          v10.n128_f32[0] = *(float *)&v27 + *((float *)&v27 + 1);
        }
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)a2 + 184))(a2, v9, v10);
    }
    unint64_t v26 = 0;
    (*(void (**)(uint64_t, uint64_t, void *, __n128))(*(void *)a1 + 136))(a1, v9, v24, v10);
    while (1)
    {
      uint64_t result = v24[0];
      if (!v24[0])
      {
        if (v26 >= v24[2]) {
          goto LABEL_35;
        }
LABEL_22:
        uint64_t v13 = v24[1] + 20 * v26;
        goto LABEL_23;
      }
      int v12 = (*(uint64_t (**)(void))(*(void *)v24[0] + 24))(v24[0]);
      uint64_t result = v24[0];
      if (v12) {
        break;
      }
      if (!v24[0]) {
        goto LABEL_22;
      }
      uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v24[0] + 32))();
LABEL_23:
      uint64_t v14 = *(void *)v13;
      float v15 = *(float *)(v13 + 8);
      float v16 = *(float *)(v13 + 12);
      int v17 = *(_DWORD *)(v13 + 16);
      *(float *)&uint64_t v21 = v15;
      int v30 = LODWORD(v16);
      float v29 = INFINITY;
      int v28 = 2139095040;
      float v18 = NAN;
      if (v15 != -INFINITY && v16 != -INFINITY)
      {
        float v18 = INFINITY;
        BOOL v19 = v16 == INFINITY || v15 == INFINITY;
        float v20 = v15 + v16;
        if (!v19) {
          float v18 = v20;
        }
      }
      float v22 = v18;
      uint64_t v21 = v14;
      int v23 = v17;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 208))(a2, v9, &v21);
      if (v24[0]) {
        (*(void (**)(void))(*(void *)v24[0] + 40))(v24[0]);
      }
      else {
        ++v26;
      }
    }
    if (v24[0])
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v24[0] + 8))();
      goto LABEL_37;
    }
LABEL_35:
    if (v25) {
      --*v25;
    }
LABEL_37:
    uint64_t v9 = (v9 + 1);
  }
  while (v9 != v5);
  return result;
}

void sub_1B1CD1260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  else if (a14)
  {
    --*a14;
  }
  _Unwind_Resume(exception_object);
}

void fst::RemoveEpsLocal<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsLocalClass(&v1, a1);
  if (__p)
  {
    int v5 = __p;
    operator delete(__p);
  }
  if (v2)
  {
    uint64_t v3 = v2;
    operator delete(v2);
  }
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v4, &v10);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v10 + 24))(v10))
        {
          uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10);
          float v12 = 0.0;
          float v12 = *(float *)(v5 + 8);
          int v11 = 2139095040;
          float v6 = INFINITY;
          if (v12 != INFINITY) {
            float v6 = 0.0;
          }
          uint64_t v7 = *(unsigned int *)(v5 + 12);
          v9[0] = *(void *)v5;
          v9[1] = LODWORD(v6) | (unint64_t)(v7 << 32);
          (*(void (**)(uint64_t, void *))(*(void *)v10 + 88))(v10, v9);
          (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
        }
        if (v10) {
          (*(void (**)(void))(*(void *)v10 + 8))();
        }
        LODWORD(v9[0]) = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v4);
        LODWORD(v10) = 2139095040;
        v8.n128_u32[0] = 2139095040;
        if (*(float *)v9 != INFINITY) {
          v8.n128_f32[0] = 0.0;
        }
        (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)a1 + 184))(a1, v4, v8);
        uint64_t v4 = (v4 + 1);
      }
      while ((int)v4 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v3 & 0x3FFCFFFF0007 | 0x200000000, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1CD1618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsLocalClass(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    *((_DWORD *)a1 + 2) = (*(uint64_t (**)(void))(*(void *)*a1 + 200))();
    fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::InitNumArcs(a1);
    int v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))();
    if (v4 >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, v5); ++i)
          fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEps(a1, v5, i);
        uint64_t v5 = (v5 + 1);
      }
      while (v5 != v4);
    }
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
  }
  return a1;
}

void sub_1B1CD17A4(_Unwind_Exception *exception_object)
{
  int v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[3] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::InitNumArcs(void *a1)
{
  int v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))(*a1);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 2), v2);
  uint64_t v3 = a1 + 5;
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 5), v2);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  ++*(_DWORD *)(a1[2] + 4 * (int)result);
  if (v2 < 1) {
    return result;
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    LODWORD(v10[0]) = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, i);
    int v13 = 2139095040;
    if (*(float *)v10 != INFINITY) {
      ++*(_DWORD *)(*v3 + 4 * i);
    }
    uint64_t v6 = *a1;
    unint64_t v12 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, i, v10);
    while (1)
    {
      uint64_t result = v10[0];
      if (!v10[0])
      {
        if (v12 >= v10[2]) {
          goto LABEL_17;
        }
LABEL_11:
        uint64_t v9 = 0;
        uint64_t v8 = v10[1] + 16 * v12;
        goto LABEL_12;
      }
      int v7 = (*(uint64_t (**)(void))(*(void *)v10[0] + 24))(v10[0]);
      uint64_t result = v10[0];
      if (v7) {
        break;
      }
      if (!v10[0]) {
        goto LABEL_11;
      }
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v10[0] + 32))();
      uint64_t v9 = v10[0];
LABEL_12:
      ++*(_DWORD *)(a1[2] + 4 * *(int *)(v8 + 12));
      ++*(_DWORD *)(*v3 + 4 * i);
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
      else {
        ++v12;
      }
    }
    if (v10[0])
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v10[0] + 8))();
      continue;
    }
LABEL_17:
    if (v11) {
      --*v11;
    }
  }
  return result;
}

void sub_1B1CD1A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    quasar::InverseTextNormalizer::getNumTokens(v9);
  }
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEps(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v15);
  if (!v15[0])
  {
    uint64_t v17 = a3;
    uint64_t v10 = a3;
LABEL_7:
    int v11 = (uint64_t *)(v15[1] + 16 * v10);
    uint64_t v8 = *v11;
    uint64_t v9 = v11[1];
    goto LABEL_8;
  }
  (*(void (**)(void, uint64_t))(*(void *)v15[0] + 64))(v15[0], a3);
  if (!v15[0])
  {
    uint64_t v10 = v17;
    goto LABEL_7;
  }
  int v7 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))(v15[0]);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))(v15[0]);
    goto LABEL_10;
  }
LABEL_8:
  if (v16) {
    --*v16;
  }
LABEL_10:
  if (HIDWORD(v9) != a2 && *((_DWORD *)a1 + 2) != HIDWORD(v9))
  {
    int v13 = *(_DWORD *)(a1[5] + 4 * (v9 >> 32));
    if (*(_DWORD *)(a1[2] + 4 * (v9 >> 32)) != 1 || v13 < 2)
    {
      if (v13 == 1) {
        fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern2(a1, a2, a3, v8, v9);
      }
    }
    else
    {
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern1(a1, a2, a3, v8, v9);
    }
  }
}

void sub_1B1CD1C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern1(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v54 = a4;
  uint64_t v55 = a5;
  unint64_t v9 = HIDWORD(a5);
  float v51 = 0;
  float v52 = 0;
  int v53 = 0;
  (*(void (**)(void))(*(void *)*a1 + 296))();
  uint64_t v10 = a5 >> 32;
  float v11 = INFINITY;
  float v12 = INFINITY;
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v50 + 24))(v50))
  {
    long long v49 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v50 + 32))(v50);
    if (HIDWORD(v49) != *((_DWORD *)a1 + 2))
    {
      if (fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs((uint64_t)a1, (float *)&v54, (float *)&v49, (uint64_t)&v48))
      {
        float v14 = NAN;
        v13.n128_u32[0] = -8388608;
        if (v12 != -INFINITY)
        {
          v13.n128_u32[0] = DWORD2(v49);
          float v14 = NAN;
          if (*((float *)&v49 + 2) != -INFINITY)
          {
            if (v12 >= *((float *)&v49 + 2)) {
              float v14 = *((float *)&v49 + 2);
            }
            else {
              float v14 = v12;
            }
          }
        }
        --*(_DWORD *)(a1[5] + 4 * v10);
        --*(_DWORD *)(a1[2] + 4 * SHIDWORD(v49));
        HIDWORD(v49) = *((_DWORD *)a1 + 2);
        (*(void (**)(uint64_t, long long *, __n128))(*(void *)v50 + 88))(v50, &v49, v13);
        float v15 = v52;
        if (v52 >= v53)
        {
          uint64_t v18 = (v52 - v51) >> 4;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v53 - v51;
          if ((v53 - v51) >> 3 > v19) {
            unint64_t v19 = v20 >> 3;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21) {
            float v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v53, v21);
          }
          else {
            float v22 = 0;
          }
          int v23 = &v22[16 * v18];
          *(_OWORD *)int v23 = v48;
          float v25 = v51;
          float v24 = v52;
          unint64_t v26 = v23;
          if (v52 != v51)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
              v26 -= 16;
              v24 -= 16;
            }
            while (v24 != v25);
            float v24 = v51;
          }
          float v16 = v23 + 16;
          float v51 = v26;
          float v52 = v23 + 16;
          int v53 = &v22[16 * v21];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(_OWORD *)float v52 = v48;
          float v16 = v15 + 16;
        }
        float v52 = v16;
        float v17 = v11;
      }
      else
      {
        float v17 = NAN;
        float v14 = v12;
        if (v11 != -INFINITY)
        {
          float v17 = NAN;
          float v14 = v12;
          if (*((float *)&v49 + 2) != -INFINITY)
          {
            if (v11 >= *((float *)&v49 + 2)) {
              float v17 = *((float *)&v49 + 2);
            }
            else {
              float v17 = v11;
            }
            float v14 = v12;
          }
        }
      }
      float v11 = v17;
      float v12 = v14;
    }
    (*(void (**)(uint64_t))(*(void *)v50 + 40))(v50);
  }
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  v27.n128_f32[0] = (*(float (**)(void, unint64_t))(*(void *)*a1 + 32))(*a1, v9);
  LODWORD(v49) = v27.n128_u32[0];
  LODWORD(v48) = 2139095040;
  if (v27.n128_f32[0] != INFINITY)
  {
    if (v54)
    {
      if (v11 >= v27.n128_f32[0]) {
        float v38 = v27.n128_f32[0];
      }
      else {
        float v38 = v11;
      }
      if (v27.n128_f32[0] == -INFINITY || v11 == -INFINITY) {
        float v11 = NAN;
      }
      else {
        float v11 = v38;
      }
    }
    else
    {
      float v28 = NAN;
      if (*(float *)&v55 != -INFINITY && v27.n128_f32[0] != -INFINITY)
      {
        if (*(float *)&v55 == INFINITY || v27.n128_f32[0] == INFINITY) {
          float v28 = INFINITY;
        }
        else {
          float v28 = v27.n128_f32[0] + *(float *)&v55;
        }
      }
      if (v12 >= v27.n128_f32[0]) {
        float v30 = v27.n128_f32[0];
      }
      else {
        float v30 = v12;
      }
      if (v27.n128_f32[0] == -INFINITY || v12 == -INFINITY) {
        float v12 = NAN;
      }
      else {
        float v12 = v30;
      }
      LODWORD(v49) = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
      LODWORD(v48) = 2139095040;
      if (*(float *)&v49 == INFINITY) {
        ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      }
      uint64_t v33 = *a1;
      v34.n128_f32[0] = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
      if (v34.n128_f32[0] >= v28) {
        float v35 = v28;
      }
      else {
        float v35 = v34.n128_f32[0];
      }
      BOOL v37 = v28 == -INFINITY || v34.n128_f32[0] == -INFINITY;
      v34.n128_u32[0] = 2143289344;
      if (!v37) {
        v34.n128_f32[0] = v35;
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v33 + 184))(v33, a2, v34);
      --*(_DWORD *)(a1[5] + 4 * v10);
      (*(void (**)(void, unint64_t, float))(*(void *)*a1 + 184))(*a1, v9, INFINITY);
    }
  }
  *(float *)&long long v49 = v12;
  LODWORD(v48) = 2139095040;
  v27.n128_f32[0] = v12;
  if (v12 != INFINITY)
  {
    *(float *)&long long v49 = v11;
    LODWORD(v48) = 2139095040;
    v27.n128_f32[0] = v11;
    if (v11 == INFINITY)
    {
      --*(_DWORD *)(a1[5] + 4 * (int)a2);
      --*(_DWORD *)(a1[2] + 4 * SHIDWORD(v55));
      HIDWORD(v55) = *((_DWORD *)a1 + 2);
      (*(void (**)(__n128))(*(void *)*a1 + 296))(v27);
      (*(void (**)(void, uint64_t))(*(void *)v49 + 64))(v49, a3);
      (*(void (**)(void, uint64_t *))(*(void *)v49 + 88))(v49, &v54);
      if ((void)v49) {
        (*(void (**)(void))(*(void *)v49 + 8))(v49);
      }
    }
    else
    {
      if (v12 >= v11) {
        float v41 = v11;
      }
      else {
        float v41 = v12;
      }
      BOOL v43 = v11 == -INFINITY || v12 == -INFINITY;
      float v44 = NAN;
      if (v43) {
        float v41 = NAN;
      }
      if (v11 != -INFINITY)
      {
        if ((LODWORD(v41) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          float v44 = INFINITY;
          if (v11 != INFINITY) {
            float v44 = v11 - v41;
          }
        }
        else
        {
          float v44 = NAN;
        }
      }
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::Reweight(a1, a2, a3, v44);
    }
  }
  long long v45 = v52;
  if (v52 != v51)
  {
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    long long v45 = v51;
    do
    {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      ++*(_DWORD *)(a1[2] + 4 * *(int *)&v45[v46 + 12]);
      (*(void (**)(void, uint64_t, __n128))(*(void *)*a1 + 208))(*a1, a2, v27);
      ++v47;
      long long v45 = v51;
      v46 += 16;
    }
    while (v47 < (v52 - v51) >> 4);
  }
  if (v45)
  {
    float v52 = v45;
    operator delete(v45);
  }
}

void sub_1B1CD2448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern2(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v5 = *(float *)&a5;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v10 = a5 >> 32;
  int v11 = *(_DWORD *)(a1[2] + 4 * (a5 >> 32));
  unint64_t v12 = HIDWORD(a5);
  float v13 = (*(float (**)(void, unint64_t))(*(void *)*a1 + 32))(*a1, HIDWORD(a5));
  v25[0] = v13;
  v23[0] = 2139095040;
  if (v13 != INFINITY)
  {
    if (a4) {
      return;
    }
    float v14 = NAN;
    if (v5 != -INFINITY && v13 != -INFINITY)
    {
      BOOL v15 = v5 == INFINITY || v13 == INFINITY;
      float v16 = v13 + v5;
      if (v15) {
        float v14 = INFINITY;
      }
      else {
        float v14 = v16;
      }
    }
    v25[0] = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
    v23[0] = 2139095040;
    if (v25[0] == INFINITY) {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    }
    uint64_t v17 = *a1;
    v18.n128_f32[0] = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
    if (v18.n128_f32[0] >= v14) {
      float v19 = v14;
    }
    else {
      float v19 = v18.n128_f32[0];
    }
    BOOL v21 = v14 == -INFINITY || v18.n128_f32[0] == -INFINITY;
    v18.n128_u32[0] = 2143289344;
    if (!v21) {
      v18.n128_f32[0] = v19;
    }
    (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v17 + 184))(v17, a2, v18);
    if (v11 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v10);
      (*(void (**)(void, unint64_t, float))(*(void *)*a1 + 184))(*a1, v12, INFINITY);
    }
    goto LABEL_36;
  }
  (*(void (**)(void, unint64_t, uint64_t *))(*(void *)*a1 + 296))(*a1, v12, &v26);
  while (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v26 + 32))(v26) + 12) == *((_DWORD *)a1 + 2))
    (*(void (**)(uint64_t))(*(void *)v26 + 40))(v26);
  *(_OWORD *)float v25 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 32))(v26);
  int CanCombineArcs = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs((uint64_t)a1, (float *)&v27, v25, (uint64_t)v23);
  if (CanCombineArcs)
  {
    if (v11 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v10);
      --*(_DWORD *)(a1[2] + 4 * SLODWORD(v25[3]));
      void v25[3] = *((float *)a1 + 2);
      (*(void (**)(uint64_t, float *))(*(void *)v26 + 88))(v26, v25);
    }
    ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    ++*(_DWORD *)(a1[2] + 4 * v24);
    (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*a1 + 208))(*a1, a2, v23);
  }
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  if (CanCombineArcs)
  {
LABEL_36:
    --*(_DWORD *)(a1[5] + 4 * (int)a2);
    --*(_DWORD *)(a1[2] + 4 * v10);
    HIDWORD(v28) = *((_DWORD *)a1 + 2);
    (*(void (**)(void))(*(void *)*a1 + 296))(*a1);
    (*(void (**)(void, uint64_t))(**(void **)v25 + 64))(*(void *)v25, a3);
    (*(void (**)(void, uint64_t *))(**(void **)v25 + 88))(*(void *)v25, &v27);
    if (*(void *)v25) {
      (*(void (**)(void))(**(void **)v25 + 8))(*(void *)v25);
    }
  }
}

void sub_1B1CD29D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs(uint64_t a1, float *a2, float *a3, uint64_t a4)
{
  if (*(_DWORD *)a2) {
    BOOL v4 = *(_DWORD *)a3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return 0;
  }
  if (*((_DWORD *)a2 + 1) && *((_DWORD *)a3 + 1) != 0) {
    return 0;
  }
  float v6 = a2[2];
  float v7 = NAN;
  if (v6 != -INFINITY)
  {
    float v8 = a3[2];
    float v7 = NAN;
    if (v8 != -INFINITY)
    {
      float v7 = INFINITY;
      BOOL v9 = v8 == INFINITY || v6 == INFINITY;
      float v10 = v6 + v8;
      if (!v9) {
        float v7 = v10;
      }
    }
  }
  *(float *)(a4 + 8) = v7;
  float v11 = *a3;
  int v12 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2) {
    float v11 = *a2;
  }
  *(float *)a4 = v11;
  int v13 = *((_DWORD *)a3 + 1);
  if (v12) {
    int v13 = v12;
  }
  *(_DWORD *)(a4 + 4) = v13;
  *(float *)(a4 + 12) = a3[3];
  return 1;
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::Reweight(void *a1, uint64_t a2, uint64_t a3, float a4)
{
  (*(void (**)(void, uint64_t, uint64_t *))(*(void *)*a1 + 296))(*a1, a2, &v17);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 64))(v17, a3);
  __n128 v7 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
  __n128 v16 = v7;
  v7.n128_u32[0] = v7.n128_u32[2];
  float v8 = NAN;
  if (v7.n128_f32[2] != -INFINITY && a4 != -INFINITY)
  {
    float v8 = INFINITY;
    BOOL v9 = v16.n128_f32[2] == INFINITY || a4 == INFINITY;
    v7.n128_f32[0] = a4 + v16.n128_f32[2];
    if (!v9) {
      float v8 = a4 + v16.n128_f32[2];
    }
  }
  v16.n128_f32[2] = v8;
  (*(void (**)(uint64_t, __n128 *, __n128))(*(void *)v17 + 88))(v17, &v16, v7);
  (*(void (**)(void, void, uint64_t *))(*(void *)*a1 + 296))(*a1, v16.n128_u32[3], &v15);
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
  {
    *(_OWORD *)float v14 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
    if (LODWORD(v14[3]) != *((_DWORD *)a1 + 2))
    {
      float v10 = v14[2] - a4;
      if (v14[2] == INFINITY) {
        float v10 = INFINITY;
      }
      if (v14[2] == -INFINITY || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
        float v10 = NAN;
      }
      v14[2] = v10;
      (*(void (**)(uint64_t, float *))(*(void *)v15 + 88))(v15, v14);
    }
    (*(void (**)(uint64_t))(*(void *)v15 + 40))(v15);
  }
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  float v11 = (*(float (**)(void, void))(*(void *)*a1 + 32))(*a1, v16.n128_u32[3]);
  v14[0] = v11;
  LODWORD(v15) = 2139095040;
  if (v11 != INFINITY)
  {
    if (v11 == -INFINITY || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      float v12 = NAN;
    }
    else
    {
      float v12 = INFINITY;
      if (v11 != INFINITY) {
        float v12 = v11 - a4;
      }
    }
    (*(void (**)(void, void, float))(*(void *)*a1 + 184))(*a1, v16.n128_u32[3], v12);
  }
  uint64_t result = v17;
  if (v17) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  return result;
}

void sub_1B1CD2E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1 || ((*(void (**)(uint64_t, void))(*(void *)a1 + 280))(a1, 0), *a2 != 2)) {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 288))(a1, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v6, &v12);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 24))(v12))
        {
          uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
          uint64_t v8 = *(void *)(v7 + 8);
          if (*a2 == 1) {
            BOOL v9 = (unsigned int *)v7;
          }
          else {
            BOOL v9 = (unsigned int *)(v7 + 4);
          }
          v11[0] = *v9 | ((unint64_t)*v9 << 32);
          v11[1] = v8;
          (*(void (**)(uint64_t, void *))(*(void *)v12 + 88))(v12, v11);
          (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
        }
        if (v12) {
          (*(void (**)(void))(*(void *)v12 + 8))();
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v6);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 184))(a1, v6);
        uint64_t v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    unint64_t v10 = fst::ProjectProperties(v5, *a2 == 1);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v10, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1CD323C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::SymbolDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B1CD336C(_Unwind_Exception *a1)
{
  uint64_t v7 = (void *)v1[31];
  if (v7)
  {
    v1[32] = v7;
    operator delete(v7);
  }
  std::deque<int>::~deque[abi:ne180100](v3);
  uint64_t v8 = *v5;
  if (*v5)
  {
    v1[19] = v8;
    operator delete(v8);
  }
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::~HashList(v2);
  BOOL v9 = *v4;
  if (*v4)
  {
    v1[2] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::FindSubroutines(uint64_t a1)
{
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 128) + 24))(*(void *)(a1 + 128)) == -1) {
    goto LABEL_33;
  }
  uint64_t v2 = *(void *)(a1 + 128);
  unint64_t v26 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 136))(v2);
  while (1)
  {
    if (!v23[0])
    {
      if (v26 >= v24) {
        goto LABEL_24;
      }
LABEL_8:
      uint64_t v3 = (float *)((char *)v23[1] + 16 * v26);
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(void *))(*(void *)v23[0] + 24))(v23[0])) {
      break;
    }
    if (!v23[0]) {
      goto LABEL_8;
    }
    uint64_t v3 = (float *)(*(uint64_t (**)(void))(*(void *)v23[0] + 32))();
LABEL_9:
    if (!*(_DWORD *)v3)
    {
      float v4 = v3[2];
      if (v4 > 9900.0 && v4 < 10100.0)
      {
        unint64_t v5 = *((unsigned int *)v3 + 1);
        unint64_t v6 = (v5 - 1);
        ++*(_DWORD *)(a1 + 136);
        if (v28 > v6 && ((*(void *)((char *)v27 + ((v6 >> 3) & 0x1FFFFFF8)) >> (v5 - 1)) & 1) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          uint64_t v7 = fst::LogMessage::LogMessage((fst *)&v22, (uint64_t)__p);
          uint64_t v8 = (void *)fst::cerr(v7);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Subroutine index ", 17);
          BOOL v9 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" already defined", 16);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v22);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v10 = *(void *)(a1 + 144);
        if (v5 > (*(void *)(a1 + 152) - v10) >> 2)
        {
          std::vector<BOOL>::resize((uint64_t)&v27, v5, 0);
          std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 144), v5);
          uint64_t v10 = *(void *)(a1 + 144);
        }
        *(float *)(v10 + 4 * v6) = v3[3];
        *(void *)((char *)v27 + ((v6 >> 3) & 0x1FFFFFF8)) |= 1 << (v5 - 1);
      }
    }
    if (v23[0]) {
      (*(void (**)(void *))(*(void *)v23[0] + 40))(v23[0]);
    }
    else {
      ++v26;
    }
  }
  if (v23[0])
  {
    (*(void (**)(void))(*(void *)v23[0] + 8))();
    goto LABEL_26;
  }
LABEL_24:
  if (v25) {
    --*v25;
  }
LABEL_26:
  unint64_t v11 = v28;
  if (v28)
  {
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    do
    {
      if (((*(void *)((char *)v27 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v23, "FATAL");
        float v14 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)v23);
        uint64_t v15 = (void *)fst::cerr(v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Subroutine index ", 17);
        __n128 v16 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" not used - subroutines indexes must be consecutive", 51);
        fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
        if (SHIBYTE(v24) < 0) {
          operator delete(v23[0]);
        }
        unint64_t v11 = v28;
      }
      unint64_t v12 = ++v13;
    }
    while (v11 > v13);
  }
LABEL_33:
  std::string::basic_string[abi:ne180100]<0>(v23, "INFO");
  uint64_t v17 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)v23);
  __n128 v18 = (void *)fst::cerr(v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Found ", 6);
  float v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" phonetic match subroutines ", 28);
  fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  if (v27) {
    operator delete(v27);
  }
}

void sub_1B1CD37B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::~HashList(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      ++v3;
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  float v4 = (void *)a1[7];
  unint64_t v5 = (unsigned char *)a1[8];
  if (v5 == (unsigned char *)v4)
  {
    uint64_t v7 = 0;
    float v4 = (void *)a1[8];
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (v4[v6])
      {
        MEMORY[0x1B3EA8630](v4[v6], 0x1020C805730B0C9);
        float v4 = (void *)a1[7];
        unint64_t v5 = (unsigned char *)a1[8];
      }
      ++v6;
      v7 += 1024;
    }
    while (v6 < (v5 - (unsigned char *)v4) >> 3);
  }
  if (v3 != v7 && kaldi::g_kaldi_verbose_level > -2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Possible memory leak: ", 22);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" != ", 4);
    BOOL v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": you might have forgotten to call Delete on ", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"some Elems", 10);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    float v4 = (void *)a1[7];
  }
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  unint64_t v11 = (void *)a1[3];
  if (v11)
  {
    a1[4] = v11;
    operator delete(v11);
  }
  return a1;
}

uint64_t *kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::~SymbolDecoder(uint64_t *a1)
{
  uint64_t v2 = a1[7];
  if (v2 != -1)
  {
    uint64_t v3 = a1[9];
    do
    {
      float v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      uint64_t v2 = *v4;
    }
    while (v2 != -1);
  }
  uint64_t v5 = a1[6];
  a1[6] = 0;
  a1[7] = -1;
  if (v5)
  {
    uint64_t v6 = a1[12];
    do
    {
      uint64_t v7 = v5;
      uint64_t v5 = *(void *)(v5 + 8);
      *(void *)(v7 + 8) = v6;
      uint64_t v6 = v7;
    }
    while (v5);
    a1[12] = v7;
  }
  uint64_t v8 = *a1;
  a1[2] = a1[1];
  a1[4] = 0;
  if (v8) {
    MEMORY[0x1B3EA8630](v8, 0x1000C8027586B93);
  }
  BOOL v9 = (void *)a1[31];
  if (v9)
  {
    a1[32] = (uint64_t)v9;
    operator delete(v9);
  }
  std::deque<int>::~deque[abi:ne180100](a1 + 25);
  uint64_t v10 = (void *)a1[18];
  if (v10)
  {
    a1[19] = (uint64_t)v10;
    operator delete(v10);
  }
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::~HashList(a1 + 6);
  unint64_t v11 = (void *)a1[1];
  if (v11)
  {
    a1[2] = (uint64_t)v11;
    operator delete(v11);
  }
  return a1;
}

void std::vector<quasar::PhoneticMatchResult>::__assign_with_size[abi:ne180100]<quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  BOOL v9 = *(void **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::PhoneticMatchResult>::__vdeallocate((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t matched = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t matched = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = matched;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 72;
      std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1CD3C4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1CD3C54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::PhoneticMatchResult>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    float v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      float v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult&>(a1, v4, v6);
      v6 += 72;
      uint64_t v4 = v12 + 72;
      v12 += 72;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1CD3D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__init_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>((void *)(a2 + 16), *(uint64_t **)(a3 + 16), *(uint64_t **)(a3 + 24), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 3));
  uint64_t v5 = (std::string *)(a2 + 40);
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 40);
    *(void *)(a2 + 56) = *(void *)(a3 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  int v7 = *(_DWORD *)(a3 + 64);
  *(_DWORD *)(a2 + 67) = *(_DWORD *)(a3 + 67);
  *(_DWORD *)(a2 + 64) = v7;
}

void sub_1B1CD3E24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 24;
  do
  {
    uint64_t v7 = v6 - 24;
    *(_OWORD *)a4 = *(_OWORD *)(v6 - 24);
    if (a4 != v6 - 24) {
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__assign_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(a4 + 16, *(uint64_t **)(v6 - 8), *(uint64_t **)v6, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)v6 - *(void *)(v6 - 8)) >> 3));
    }
    std::string::operator=((std::string *)(a4 + 40), (const std::string *)(v6 + 16));
    int v8 = *(_DWORD *)(v6 + 43);
    *(_DWORD *)(a4 + 64) = *(_DWORD *)(v6 + 40);
    *(_DWORD *)(a4 + 67) = v8;
    a4 += 72;
    v6 += 72;
  }
  while (v7 + 72 != v5);
  return v5;
}

void std::vector<quasar::ItnOverride>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::allocator<quasar::ItnOverride>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<quasar::ItnOverride>::__assign_with_size[abi:ne180100]<quasar::ItnOverride*,quasar::ItnOverride*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  BOOL v9 = *(std::string **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::ItnOverride>::__vdeallocate((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*,quasar::ItnOverride*,quasar::ItnOverride*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::ItnOverride *,quasar::ItnOverride *,quasar::ItnOverride *>((int)&v17, __str, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*,quasar::ItnOverride*,quasar::ItnOverride*>(v8, (long long *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::ItnOverride *,quasar::ItnOverride *,quasar::ItnOverride *>((int)&v18, __str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 72;
      std::allocator<quasar::ItnOverride>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1CD40FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1CD4104(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::ItnOverride *,quasar::ItnOverride *,quasar::ItnOverride *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    std::string::operator=(this + 2, v5 + 2);
    this += 3;
    v5 += 3;
  }
  while (v5 != v6);
  return v6;
}

std::string *quasar::PhonesetMapping::PhonesetMapping(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  return this;
}

void quasar::PhonesetMapping::removeExtraSpaces(int a1, std::string *this)
{
  kaldi::Trim(this);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v2, "\\s{2,}", 0);
}

void sub_1B1CD42F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&a9);
  _Unwind_Resume(a1);
}

void quasar::PhonesetMapping::checkForSilencePhones(uint64_t a1, std::string *a2)
{
  uint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  BOOL v3 = (size & 0x80u) != 0;
  if ((size & 0x80u) != 0) {
    uint64_t size = a2->__r_.__value_.__l.__size_;
  }
  if (v3) {
    uint64_t v4 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v4 = a2;
  }
  if (size >= 3)
  {
    uint64_t v6 = (char *)v4 + size;
    uint64_t v7 = v4;
    do
    {
      uint64_t v8 = (char *)memchr(v7, 115, size - 2);
      if (!v8) {
        break;
      }
      if (*(_WORD *)v8 == 26995 && v8[2] == 108)
      {
        if (v8 != v6)
        {
          std::string::size_type v10 = v8 - (char *)v4;
          if (v10 != -1)
          {
            if (quasar::gLogLevel >= 5)
            {
              memset(v12, 0, sizeof(v12));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Ignoring silence phone \"sil\"", 28);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v12);
            }
            int v11 = std::string::erase(a2, v10, 3uLL);
            quasar::PhonesetMapping::removeExtraSpaces(v11, a2);
          }
        }
        return;
      }
      uint64_t v7 = (std::string *)(v8 + 1);
      uint64_t size = v6 - (char *)v7;
    }
    while (v6 - (char *)v7 >= 3);
  }
}

void sub_1B1CD4458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::PhonesetMapping::checkLanguageAndPhoneset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  quasar::PhonesetMapping::checkForSilencePhones(a1, (std::string *)a3);
  uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  if (!v6)
  {
    if (quasar::gLogLevel < 5) {
      return 0;
    }
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"ASR prons are empty", 19);
LABEL_21:
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
    return 0;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23)) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  if (!*(void *)(a1 + 8))
  {
LABEL_11:
    if (quasar::gLogLevel < 5) {
      return 0;
    }
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Language not provided", 21);
    goto LABEL_21;
  }
LABEL_6:
  if (*(void *)(a2 + 24)) {
    return 1;
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unsupported language: \"", 23);
    int v9 = *(char *)(a1 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = *(void *)a1;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a1 + 8);
    }
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"", 1);
    goto LABEL_21;
  }
  return 0;
}

void sub_1B1CD4634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::PhonesetMapping::getMappedPhonemes(int a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __str = *(std::string *)a3;
  }
  quasar::PhonesetMapping::removeExtraSpaces(a1, &__str);
}

void sub_1B1CD4900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v15 - 129) < 0) {
    operator delete(*(void **)(v15 - 152));
  }
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  if (*(char *)(v15 - 105) < 0) {
    operator delete(*(void **)(v15 - 128));
  }
  _Unwind_Resume(exception_object);
}

void quasar::PhonesetMapping::getIpaPhoneSequence(uint64_t a1, uint64_t a2)
{
  int v3 = a1;
  quasar::PhonesetMapPerLanguage::getAsrToIpaMap(a1, a2);
  quasar::PhonesetMapping::getMappedPhonemes(v3, (uint64_t)v4, a2);
}

void sub_1B1CD4AAC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 - 72);
  _Unwind_Resume(a1);
}

double quasar::PhonesetMapPerLanguage::getAsrToIpaMap(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)MEMORY[0x1F4188790](a1, a2);
  int v3 = v2;
  uint64_t v5 = v4;
  v205[6] = *MEMORY[0x1E4F143B8];
  int v6 = *((unsigned __int8 *)v2 + 23);
  if (*((char *)v2 + 23) < 0)
  {
    if (v2[1] != 5) {
      goto LABEL_53;
    }
    long long v13 = (_DWORD *)*v2;
    if (*(_DWORD *)*v2 != 1432317541 || *(unsigned char *)(*v2 + 4) != 83)
    {
      if (*v13 != 1130326138 || *((unsigned char *)v13 + 4) != 78)
      {
        if (*v13 != 1096773221 || *((unsigned char *)v13 + 4) != 85)
        {
          int v17 = *v13;
          int v18 = *((unsigned __int8 *)v13 + 4);
          if (v17 != 1197436517 || v18 != 66)
          {
            if (v2[1] != 5) {
              goto LABEL_53;
            }
            uint64_t v12 = (void *)*v2;
            if (*(_DWORD *)*v2 != 1163883365 || *(unsigned char *)(*v2 + 4) != 83)
            {
              if ((v6 & 0x80) == 0)
              {
                uint64_t v12 = v2;
                if (v6 != 5) {
                  goto LABEL_53;
                }
              }
              goto LABEL_49;
            }
LABEL_121:
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v49, "AA", "ˈa");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v50, "AU", "ˈa w");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v51, "AY", "ˈa j");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v52, "EE", "ˈe");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v53, "EY", "ˈe j");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v54, "II", "ˈi");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "OO", "ˈo");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v56, "OY", "ˈo j");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v57, "UU", "ˈu");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v58, "UY", "ˈu i");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v59, "Z", "θ");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v60, "aa", "a");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v61, "b", "b");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v62, "ch", "t͡ʃ");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v63, "d", "ð");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v64, "ee", "e");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v65, "f", "f");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "g", "g");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v67, "ii", "i");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "j", "x");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v69, "k", "k");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v70, "ks", "ks");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v71, "l", "l");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "m", "m");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "n", "n");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v74, "nn", "ɲ");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v75, "oo", "o");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v76, "p", "p");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v77, "r", "ɾ");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v78, "rr", "r");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "s", "s");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "t", "t");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v81, "uu", "u");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v82, "w", "w");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "y", "j");
            std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 35);
            uint64_t v43 = 1680;
            do
            {
              float v44 = &v49[v43];
              if ((char)v49[v43 - 1] < 0) {
                operator delete(*((void **)v44 - 3));
              }
              if ((char)*(v44 - 25) < 0) {
                operator delete(*((void **)v44 - 6));
              }
              v43 -= 48;
            }
            while (v43);
            return result;
          }
LABEL_106:
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v49, "AA", "ˈæ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[12],0>(v50, "AE", "ˈɛ͡ə ɻ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v51, "AH", "ˈɑ ɻ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v52, "AW", "ˈɒ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v53, "AWH", "ˈɔ ɻ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v54, "AY", "ˈa͡ɪ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "EE", "ˈi");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v56, "EH", "ˈɛ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v57, "EY", "ˈe͡ɪ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v58, "IH", "ˈɪ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v59, "OH", "ˈo͡ʊ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v60, "OO", "ˈʊ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v61, "OOH", "ˈu");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v62, "OW", "ˈa͡ʊ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v63, "OY", "ˈɔ͡ɪ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v64, "UH", "ˈʌ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v65, "UR", "ˈɜ ɻ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "b", "b");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v67, "ch", "t͡ʃ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "d", "d");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v69, "dh", "ð");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v70, "ee", "i");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v71, "eh", "ɪ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "f", "f");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "g", "g");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "h", "h");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v75, "ih", "ɪ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[6],0>(v76, "j", "d͡ʒ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "k", "k");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v78, "l", "l");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "m", "m");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "n", "n");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v81, "ng", "ŋ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v82, "oh", "o͡ʊ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "p", "p");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v84, "r", "ɻ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v85, "s", "s");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v86, "sh", "ʃ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v87, "t", "t");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v88, "th", "θ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v89, "uh", "ə");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v90, "ul", "ə l");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v91, "um", "ə m");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v92, "un", "ə n");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v93, "ur", "ə ɻ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v94, "v", "v");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v95, "w", "w");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v96, "y", "j");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v97, "z", "z");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v98, "zh", "ʒ");
          std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 50);
          uint64_t v39 = 2400;
          do
          {
            float v40 = &v49[v39];
            if ((char)v49[v39 - 1] < 0) {
              operator delete(*((void **)v40 - 3));
            }
            if ((char)*(v40 - 25) < 0) {
              operator delete(*((void **)v40 - 6));
            }
            v39 -= 48;
          }
          while (v39);
          return result;
        }
LABEL_91:
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v49, "AA", "ˈæ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[12],0>(v50, "AE", "ˈɛ͡ə ɻ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v51, "AH", "ˈɑ ɻ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v52, "AW", "ˈɒ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v53, "AWH", "ˈɔ ɻ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v54, "AY", "ˈa͡ɪ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "EE", "ˈi");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v56, "EH", "ˈɛ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v57, "EY", "ˈe͡ɪ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v58, "IH", "ˈɪ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v59, "OH", "ˈo͡ʊ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v60, "OO", "ˈʊ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v61, "OOH", "ˈu");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v62, "OW", "ˈa͡ʊ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v63, "OY", "ˈɔ͡ɪ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v64, "UH", "ˈʌ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v65, "UR", "ˈɜ ɻ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "b", "b");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v67, "ch", "t͡ʃ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "d", "d");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v69, "dh", "ð");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v70, "ee", "i");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v71, "eh", "ɪ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "f", "f");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "g", "g");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "h", "h");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v75, "ih", "ɪ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[6],0>(v76, "j", "d͡ʒ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "k", "k");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v78, "l", "l");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "m", "m");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "n", "n");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v81, "ng", "ŋ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v82, "oh", "o͡ʊ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "p", "p");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v84, "r", "ɻ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v85, "s", "s");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v86, "sh", "ʃ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v87, "t", "t");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v88, "th", "θ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v89, "uh", "ə");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v90, "ul", "ə l");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v91, "um", "ə m");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v92, "un", "ə n");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v93, "ur", "ə ɻ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v94, "v", "v");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v95, "w", "w");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v96, "y", "j");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v97, "z", "z");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v98, "zh", "ʒ");
        std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 50);
        uint64_t v35 = 2400;
        do
        {
          uint64_t v36 = &v49[v35];
          if ((char)v49[v35 - 1] < 0) {
            operator delete(*((void **)v36 - 3));
          }
          if ((char)*(v36 - 25) < 0) {
            operator delete(*((void **)v36 - 6));
          }
          v35 -= 48;
        }
        while (v35);
        return result;
      }
LABEL_84:
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v49, "A1", "a˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v50, "A2", "a˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v51, "A3", "a˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v52, "A4", "a˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v53, "A5", "a˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v54, "AG1", "ɑŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v55, "AG2", "ɑŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v56, "AG3", "ɑŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v57, "AG4", "ɑŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v58, "AG5", "ɑŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v59, "AI1", "a͡ɪ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v60, "AI2", "a͡ɪ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v61, "AI3", "a͡ɪ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v62, "AI4", "a͡ɪ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v63, "AI5", "a͡ɪ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v64, "AN1", "an˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v65, "AN2", "an˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v66, "AN3", "an˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v67, "AN4", "an˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v68, "AN5", "an˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v69, "AO1", "a͡ʊ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v70, "AO2", "a͡ʊ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v71, "AO3", "a͡ʊ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v72, "AO4", "a͡ʊ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v73, "AO5", "a͡ʊ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "B", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v75, "BI", "pj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v76, "BU", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[7],0>(v77, "C", "t͡sʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v78, "CH", "t͡ʂʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v79, "CHU", "t͡ʂʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v80, "CU", "t͡sʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v81, "D", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v82, "DI", "tj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v83, "DU", "tw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v84, "E1", "ɤ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v85, "E2", "ɤ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v86, "E3", "ɤ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v87, "E4", "ɤ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v88, "E5", "ɤ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v89, "EG1", "əŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v90, "EG2", "əŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v91, "EG3", "əŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v92, "EG4", "əŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v93, "EG5", "əŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v94, "EI1", "e͡ɪ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v95, "EI2", "e͡ɪ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v96, "EI3", "e͡ɪ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v97, "EI4", "e͡ɪ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v98, "EI5", "e͡ɪ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v99, "EN1", "ən˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v100, "EN2", "ən˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v101, "EN3", "ən˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v102, "EN4", "ən˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v103, "EN5", "ən˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v104, "ER2", "ə˞˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v105, "ER3", "ə˞˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v106, "ER4", "ə˞˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v107, "ER5", "ə˞˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v108, "F", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v109, "G", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[1],0>(v110, "GS", "");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v111, "GU", "kw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v112, "H", "χ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v113, "HU", "χw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v114, "I1", "i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v115, "I2", "i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v116, "I3", "i˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v117, "I4", "i˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v118, "I5", "i˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v119, "IE1", "ɛ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v120, "IE2", "ɛ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v121, "IE3", "ɛ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v122, "IE4", "ɛ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v123, "IE5", "ɛ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v124, "IG1", "iŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v125, "IG2", "iŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v126, "IG3", "iŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v127, "IG4", "iŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v128, "IG5", "iŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v129, "IH1", "ɪ̈˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v130, "IH2", "ɪ̈˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v131, "IH3", "ɪ̱˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v132, "IH4", "ɪ̈˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v133, "IH5", "ɪ̱˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v134, "IN1", "in˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v135, "IN2", "in˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v136, "IN3", "in˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v137, "IN4", "in˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v138, "IN5", "in˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v139, "JI", "t͡ɕj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v140, "JU", "t͡ɕy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v141, "K", "kʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v142, "KU", "kʰw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v143, "L", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v144, "LI", "lj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v145, "LU", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v146, "LYU", "ly");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v147, "M", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v148, "MI", "mj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v149, "MU", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v150, "N", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v151, "NI", "nj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v152, "NU", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v153, "NYU", "ny");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v154, "O1", "ɔ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v155, "O2", "ɔ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v156, "O3", "ɔ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v157, "O4", "ɔ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v158, "O5", "ɔ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v159, "OG1", "oŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v160, "OG2", "oŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v161, "OG3", "oŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v162, "OG4", "oŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v163, "OG5", "oŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v164, "OU1", "o͡ʊ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v165, "OU2", "o͡ʊ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v166, "OU3", "o͡ʊ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v167, "OU4", "o͡ʊ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v168, "OU5", "o͡ʊ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v169, "P", "pʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v170, "PI", "pʰj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v171, "QI", "t͡ɕʰj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v172, "QU", "t͡ɕʰy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v173, "R", "ʐ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v174, "RU", "ʐ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v175, "S", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v176, "SH", "ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v177, "SHU", "ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v178, "SU", "sw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v179, "T", "tʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v180, "TI", "tʰj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v181, "TU", "tʰw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v182, "U1", "u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v183, "U2", "u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v184, "U3", "u˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v185, "U4", "u˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v186, "U5", "u˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v187, "UN1", "wn˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v188, "UN2", "wn˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v189, "UN3", "wn˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v190, "UN4", "wn˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v191, "UN5", "wn˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v192, "W", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v193, "XI", "ɕj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v194, "XU", "ɕy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v195, "Y", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v196, "YU", "jy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v197, "YU1", "˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v198, "YU2", "˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v199, "YU3", "˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v200, "YU4", "˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v201, "YU5", "˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[5],0>(v202, "Z", "t͡s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v203, "ZH", "t͡ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v204, "ZHU", "t͡ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v205, "ZU", "t͡sw");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 157);
      uint64_t v33 = 7536;
      do
      {
        __n128 v34 = &v49[v33];
        if ((char)v49[v33 - 1] < 0) {
          operator delete(*((void **)v34 - 3));
        }
        if ((char)*(v34 - 25) < 0) {
          operator delete(*((void **)v34 - 6));
        }
        v33 -= 48;
      }
      while (v33);
      return result;
    }
LABEL_69:
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v49, "AA", "ˈæ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v50, "AE", "ˈɛ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v51, "AH", "ˈɑ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v52, "AW", "ˈɑ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v53, "AWH", "ˈɔ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v54, "AY", "ˈa͡ɪ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "EE", "ˈi");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v56, "EH", "ˈɛ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v57, "EY", "ˈe͡ɪ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v58, "IH", "ˈɪ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v59, "OH", "ˈo͡ʊ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v60, "OO", "ˈʊ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v61, "OOH", "ˈu");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v62, "OW", "ˈa͡ʊ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v63, "OY", "ˈɔ͡ɪ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v64, "UH", "ˈʌ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v65, "UR", "ˈɜ ɻ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "b", "b");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v67, "ch", "t͡ʃ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "d", "d");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v69, "dh", "ð");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v70, "ee", "i");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v71, "eh", "ɛ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "f", "f");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "g", "g");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "h", "h");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v75, "ih", "ɪ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[6],0>(v76, "j", "d͡ʒ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "k", "k");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v78, "l", "l");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "m", "m");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "n", "n");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v81, "ng", "ŋ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v82, "oh", "o͡ʊ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "p", "p");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v84, "r", "ɻ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v85, "s", "s");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v86, "sh", "ʃ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v87, "t", "t");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v88, "th", "θ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v89, "uh", "ə");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v90, "ul", "ə l");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v91, "um", "ə m");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v92, "un", "ə n");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v93, "ur", "ə ɻ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v94, "v", "v");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v95, "w", "w");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v96, "y", "j");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v97, "z", "z");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v98, "zh", "ʒ");
    std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 50);
    uint64_t v29 = 2400;
    do
    {
      float v30 = &v49[v29];
      if ((char)v49[v29 - 1] < 0) {
        operator delete(*((void **)v30 - 3));
      }
      if ((char)*(v30 - 25) < 0) {
        operator delete(*((void **)v30 - 6));
      }
      v29 -= 48;
    }
    while (v29);
    return result;
  }
  if (v6 != 5) {
    goto LABEL_53;
  }
  if (*(_DWORD *)v2 == 1432317541 && *((unsigned char *)v2 + 4) == 83) {
    goto LABEL_69;
  }
  if (*(_DWORD *)v2 == 1130326138 && *((unsigned char *)v2 + 4) == 78) {
    goto LABEL_84;
  }
  if (*(_DWORD *)v2 == 1096773221 && *((unsigned char *)v2 + 4) == 85) {
    goto LABEL_91;
  }
  if (*(_DWORD *)v2 == 1197436517 && *((unsigned char *)v2 + 4) == 66) {
    goto LABEL_106;
  }
  BOOL v11 = *(_DWORD *)v2 == 1163883365 && *((unsigned char *)v2 + 4) == 83;
  uint64_t v12 = v2;
  if (v11) {
    goto LABEL_121;
  }
LABEL_49:
  int v21 = *(_DWORD *)v12;
  int v22 = *((unsigned __int8 *)v12 + 4);
  if (v21 != 1432318821 || v22 != 83)
  {
LABEL_53:
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fr_CA"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v49, "ACI", "ɑ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v50, "AE", "ə");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v51, "AGR", "a");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v52, "AN", "an");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v53, "EAC", "e");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v54, "ECI", "ɛ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "EN", "ẽ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v56, "II", "i");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v57, "OCI", "o");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v58, "OE", "ə");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v59, "OEE", "ø");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v60, "OEN", "œn");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v61, "ON", "ən");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v62, "OO", "ɔ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v63, "QQ", "ə");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v64, "UGR", "u");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v65, "UY", "y");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "b", "b");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v67, "d", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "f", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v69, "g", "g");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v70, "ge", "ʒ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v71, "gn", "ɲ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "k", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "l", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v75, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v76, "ng", "ŋ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "p", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v78, "r", "ʀ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "s", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v80, "sh", "ʃ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v81, "t", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v82, "v", "v");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "w", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v84, "y", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v85, "yw", "ɥ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v86, "z", "z");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 38);
      uint64_t v25 = 1824;
      do
      {
        long long v26 = &v49[v25];
        if ((char)v49[v25 - 1] < 0) {
          operator delete(*((void **)v26 - 3));
        }
        if ((char)*(v26 - 25) < 0) {
          operator delete(*((void **)v26 - 6));
        }
        v25 -= 48;
      }
      while (v25);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "fr_FR"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v49, "ACI", "a");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v50, "AE", "ə");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v51, "AGR", "a");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v52, "AN", "ɑ̃");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v53, "EAC", "e");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v54, "ECI", "ɛ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v55, "EN", "ɛ̃");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v56, "II", "i");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v57, "OCI", "o");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v58, "OE", "œ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v59, "OEE", "ø");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v60, "OEN", "œ̃");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v61, "ON", "ɔ̃");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v62, "OO", "ɔ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v63, "QQ", "ə");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v64, "UGR", "u");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v65, "UY", "y");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "b", "b");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v67, "d", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "f", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v69, "g", "g");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v70, "ge", "ʒ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v71, "gn", "ɲ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "k", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "l", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v75, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v76, "ng", "ŋg");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "p", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v78, "r", "ʀ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "s", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v80, "sh", "ʃ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v81, "t", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v82, "v", "v");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "w", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v84, "y", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v85, "yw", "ɥ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v86, "z", "z");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 38);
      uint64_t v27 = 1824;
      do
      {
        long long v28 = &v49[v27];
        if ((char)v49[v27 - 1] < 0) {
          operator delete(*((void **)v28 - 3));
        }
        if ((char)*(v28 - 25) < 0) {
          operator delete(*((void **)v28 - 6));
        }
        v27 -= 48;
      }
      while (v27);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "it_IT"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v49, "AA", "ˈa");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v50, "AI", "ˈa j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v51, "AU", "ˈa w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v52, "EE", "ˈe");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v53, "EI", "ˈe j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v54, "ETT", "ˈɛ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "II", "ˈi");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v56, "OI", "ˈo j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v57, "OO", "ˈo");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v58, "OTT", "ˈɔ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v59, "UU", "ˈu");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v60, "aa", "a");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v61, "b", "b");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v62, "ci", "t͡ʃ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v63, "d", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v64, "ee", "e");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v65, "f", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "g", "g");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v67, "gi", "d͡ʒ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v68, "gl", "ʎː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v69, "gn", "ɲː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v70, "ii", "i");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v71, "j", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "k", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "l", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v75, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v76, "oo", "o");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "p", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v78, "r", "r");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v79, "rr", "r");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "s", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v81, "sci", "ʃ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v82, "t", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v83, "uu", "u");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v84, "v", "v");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v85, "w", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v86, "z", "z");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 38);
      uint64_t v31 = 1824;
      do
      {
        uint64_t v32 = &v49[v31];
        if ((char)v49[v31 - 1] < 0) {
          operator delete(*((void **)v32 - 3));
        }
        if ((char)*(v32 - 25) < 0) {
          operator delete(*((void **)v32 - 6));
        }
        v31 -= 48;
      }
      while (v31);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "ja-JP"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[5],0>(v49, "A", "ɑː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v50, "E", "i");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v51, "I", "iː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v52, "N", "ɴ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v53, "O", "ɯ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v54, "Qb", "bː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v55, "Qch", "t͡ɕː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v56, "Qd", "dː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v57, "Qf", "ɸːw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v58, "Qg", "gː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v59, "Qh", "hː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v60, "Qj", "zj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v61, "Qk", "kː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v62, "Qky", "kːj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v63, "Qp", "pː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v64, "Qpy", "pːj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v65, "Qs", "sː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v66, "Qsh", "ʃː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v67, "Qt", "tː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v68, "Qts", "t͡sː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v69, "Qz", "z");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v70, "U", "ɯ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v71, "a", "ɑ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "b", "b");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v73, "by", "bj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v74, "ch", "t͡ʃ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v75, "d", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v76, "dy", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "e", "e");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v78, "f", "ɸ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v79, "g", "ŋ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v80, "gy", "ŋj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v81, "h", "h");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v82, "hy", "çj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "i", "i");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v84, "j", "ʒ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v85, "k", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v86, "ky", "kj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v87, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v88, "my", "mj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v89, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v90, "ny", "ɲj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v91, "o", "o");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v92, "p", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v93, "py", "pj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v94, "r", "ɾ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v95, "ry", "ɾj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v96, "s", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v97, "sh", "ɕ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v98, "t", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v99, "ts", "t͡s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v100, "u", "ɯ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v101, "w", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v102, "y", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v103, "z", "z");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 55);
      uint64_t v37 = 2640;
      do
      {
        float v38 = &v49[v37];
        if ((char)v49[v37 - 1] < 0) {
          operator delete(*((void **)v38 - 3));
        }
        if ((char)*(v38 - 25) < 0) {
          operator delete(*((void **)v38 - 6));
        }
        v37 -= 48;
      }
      while (v37);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "ko_KR"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v49, "A", "a");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v50, "E", "ɛ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v51, "I", "ɯ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v52, "U", "ɔ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v53, "b", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v54, "d", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v55, "dZ", "ɟ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v56, "e", "e");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v57, "g", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v58, "h", "ɦ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v59, "i", "i");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v60, "j", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v61, "k", "kʼ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v62, "kH", "kʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v63, "l", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v64, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v65, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v66, "ng", "ŋ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v67, "o", "o");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v68, "p", "pʼ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v69, "pH", "pʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v70, "s", "sʼ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v71, "t", "tʼ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v72, "tH", "tʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v73, "tS", "cʼ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v74, "tSH", "cʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v75, "u", "u");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v76, "w", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "z", "s");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 29);
      for (uint64_t i = 1344; i != -48; i -= 48)
        std::pair<std::string,std::string>::~pair((uint64_t)&v49[i]);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "zh_HK"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v49, "a1", "ɐ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v50, "a2", "ɐ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v51, "a3", "ɐ˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v52, "a4", "ɐ˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v53, "a5", "ɐ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v54, "a6", "ɐ˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v55, "aa1", "a˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v56, "aa2", "a˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v57, "aa3", "a˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v58, "aa4", "a˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v59, "aa5", "a˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v60, "aa6", "a˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v61, "aai1", "a͡i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(v62, "aai2", "a͡i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v63, "aai3", "a͡i˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(v64, "aai4", "a͡i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(v65, "aai5", "a͡i˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v66, "aai6", "a͡i˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v67, "aau1", "a͡u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(v68, "aau2", "a͡u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v69, "aau3", "a͡u˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(v70, "aau4", "a͡u˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(v71, "aau5", "a͡u˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v72, "aau6", "a͡u˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v73, "ai1", "ɐ͡i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v74, "ai2", "ɐ͡i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v75, "ai3", "ɐ͡i˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v76, "ai4", "ɐ͡i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v77, "ai5", "ɐ͡i˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v78, "ai6", "ɐ͡i˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v79, "au1", "ɐ͡u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v80, "au2", "ɐ͡u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v81, "au3", "ɐ͡u˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v82, "au4", "ɐ͡u˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v83, "au5", "ɐ͡u˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v84, "au6", "ɐ͡u˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v85, "b", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[7],0>(v86, "c", "t͡sʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v87, "d", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v88, "e1", "ɛ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v89, "e2", "ɛ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v90, "e3", "ɛ˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v91, "e4", "ɛ˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v92, "e5", "ɛ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v93, "e6", "ɛ˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v94, "ei1", "e͡i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v95, "ei2", "e͡i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v96, "ei3", "e͡i˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v97, "ei4", "e͡i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v98, "ei5", "e͡i˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v99, "ei6", "e͡i˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v100, "eo1", "œ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v101, "eo2", "œ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v102, "eo3", "œ˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v103, "eo4", "œ˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v104, "eo5", "œ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v105, "eo6", "œ˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[8],0>(v106, "eoi1", "ɵ͡y˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[10],0>(v107, "eoi2", "ɵ͡y˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[8],0>(v108, "eoi3", "ɵ͡y˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[10],0>(v109, "eoi4", "ɵ͡y˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[10],0>(v110, "eoi5", "ɵ͡y˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[8],0>(v111, "eoi6", "ɵ͡y˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v112, "f", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v113, "g", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v114, "gw", "kʷ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v115, "h", "h");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v116, "i1", "i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v117, "i2", "i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v118, "i3", "i˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v119, "i4", "i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v120, "i5", "i˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v121, "i6", "i˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v122, "iu1", "i͡u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v123, "iu2", "i͡u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v124, "iu3", "i͡u˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v125, "iu4", "i͡u˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v126, "iu5", "i͡u˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v127, "iu6", "i͡u˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v128, "j", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v129, "k", "kʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v130, "kw", "kʷʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v131, "l", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v132, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v133, "m4", "m˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v134, "m5", "ŋ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v135, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v136, "ng", "ŋ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v137, "ng4", "ŋ˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v138, "ng5", "ŋ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v139, "ng6", "ŋ˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v140, "o1", "ɔ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v141, "o2", "ɔ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v142, "o3", "ɔ˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v143, "o4", "ɔ˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v144, "o5", "ɔ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v145, "o6", "ɔ˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v146, "oe1", "œ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v147, "oe2", "œ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v148, "oe3", "œ˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v149, "oe4", "œ˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v150, "oe5", "œ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v151, "oe6", "œ˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v152, "oi1", "ɔ͡i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v153, "oi2", "ɔ͡i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v154, "oi3", "ɔ͡i˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v155, "oi4", "ɔ͡i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v156, "oi5", "ɔ͡i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v157, "oi6", "ɔ͡i˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v158, "ou1", "o͡u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v159, "ou2", "o͡u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v160, "ou3", "o͡u˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v161, "ou4", "o͡u˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v162, "ou5", "o͡u˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v163, "ou6", "o͡u˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v164, "p", "pʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v165, "s", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v166, "t", "tʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v167, "u1", "u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v168, "u2", "u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v169, "u3", "u˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v170, "u4", "u˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v171, "u5", "u˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v172, "u6", "u˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v173, "ui1", "u͡i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v174, "ui2", "u͡i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v175, "ui3", "u͡i˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v176, "ui4", "u͡i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v177, "ui5", "u͡i˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v178, "ui6", "u͡i˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v179, "w", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v180, "yu1", "y˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v181, "yu2", "y˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v182, "yu3", "y˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v183, "yu4", "y˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v184, "yu5", "y˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v185, "yu6", "y˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[5],0>(v186, "z", "t͡s");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 138);
      for (uint64_t j = 0; j != -828; j -= 6)
        std::pair<std::string,std::string>::~pair((uint64_t)&v186[j]);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "zh_TW"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v49, "A1", "a˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v50, "A2", "a˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v51, "A3", "a˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v52, "A4", "a˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v53, "A5", "a˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v54, "AG1", "ɑŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v55, "AG2", "ɑŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v56, "AG3", "ɑŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v57, "AG4", "ɑŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v58, "AG5", "ɑŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v59, "AI1", "a͡ɪ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v60, "AI2", "a͡ɪ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v61, "AI3", "a͡ɪ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v62, "AI4", "a͡ɪ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v63, "AI5", "a͡ɪ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v64, "AN1", "an˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v65, "AN2", "an˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v66, "AN3", "an˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v67, "AN4", "an˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v68, "AN5", "an˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v69, "AO1", "a͡ʊ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v70, "AO2", "a͡ʊ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v71, "AO3", "a͡ʊ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v72, "AO4", "a͡ʊ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v73, "AO5", "a͡ʊ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "B", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v75, "BI", "pj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v76, "BU", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[7],0>(v77, "C", "t͡sʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v78, "CH", "t͡ʂʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v79, "CHU", "t͡ʂʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v80, "CU", "t͡sʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v81, "D", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v82, "DI", "tj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v83, "DU", "tw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v84, "E1", "ɤ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v85, "E2", "ɤ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v86, "E3", "ɤ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v87, "E4", "ɤ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v88, "E5", "ɤ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v89, "EG1", "əŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v90, "EG2", "əŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v91, "EG3", "əŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v92, "EG4", "əŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v93, "EG5", "əŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v94, "EI1", "e͡ɪ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v95, "EI2", "e͡ɪ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v96, "EI3", "e͡ɪ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v97, "EI4", "e͡ɪ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v98, "EI5", "e͡ɪ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v99, "EN1", "ən˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v100, "EN2", "ən˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v101, "EN3", "ən˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v102, "EN4", "ən˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v103, "EN5", "ən˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v104, "ER2", "ə˞˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v105, "ER3", "ə˞˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v106, "ER4", "ə˞˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v107, "ER5", "ə˞˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v108, "F", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v109, "G", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[1],0>(v110, "GS", "");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v111, "GU", "kw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v112, "H", "χ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v113, "HU", "χw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v114, "I1", "i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v115, "I2", "i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v116, "I3", "i˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v117, "I4", "i˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v118, "I5", "i˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v119, "IE1", "ɛ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v120, "IE2", "ɛ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v121, "IE3", "ɛ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v122, "IE4", "ɛ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v123, "IE5", "ɛ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v124, "IG1", "iŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v125, "IG2", "iŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v126, "IG3", "iŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v127, "IG4", "iŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v128, "IG5", "iŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v129, "IH1", "ɪ̈˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v130, "IH2", "ɪ̈˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v131, "IH3", "ɪ̱˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v132, "IH4", "ɪ̈˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v133, "IH5", "ɪ̱˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v134, "IN1", "in˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v135, "IN2", "in˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v136, "IN3", "in˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v137, "IN4", "in˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v138, "IN5", "in˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v139, "JI", "t͡ɕj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v140, "JU", "t͡ɕy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v141, "K", "kʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v142, "KU", "kʰw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v143, "L", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v144, "LI", "lj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v145, "LU", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v146, "LYU", "ly");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v147, "M", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v148, "MI", "mj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v149, "MU", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v150, "N", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v151, "NI", "nj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v152, "NU", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v153, "NYU", "ny");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v154, "O1", "ɔ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v155, "O2", "ɔ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v156, "O3", "ɔ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v157, "O4", "ɔ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v158, "O5", "ɔ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v159, "OG1", "oŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v160, "OG2", "oŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v161, "OG3", "oŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v162, "OG4", "oŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v163, "OG5", "oŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v164, "OU1", "o͡ʊ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v165, "OU2", "o͡ʊ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v166, "OU3", "o͡ʊ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v167, "OU4", "o͡ʊ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v168, "OU5", "o͡ʊ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v169, "P", "pʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v170, "PI", "pʰj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v171, "QI", "t͡ɕʰj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v172, "QU", "t͡ɕʰy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v173, "R", "ʐ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v174, "RU", "ʐ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v175, "S", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v176, "SH", "ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v177, "SHU", "ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v178, "SU", "sw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v179, "T", "tʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v180, "TI", "tʰj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v181, "TU", "tʰw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v182, "U1", "u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v183, "U2", "u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v184, "U3", "u˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v185, "U4", "u˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v186, "U5", "u˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v187, "UN1", "wn˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v188, "UN2", "wn˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v189, "UN3", "wn˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v190, "UN4", "wn˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v191, "UN5", "wn˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v192, "W", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v193, "XI", "ɕj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v194, "XU", "ɕy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v195, "Y", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v196, "YU", "jy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v197, "YU1", "˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v198, "YU2", "˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v199, "YU3", "˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v200, "YU4", "˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v201, "YU5", "˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[5],0>(v202, "Z", "t͡s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v203, "ZH", "t͡ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v204, "ZHU", "t͡ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v205, "ZU", "t͡sw");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 157);
      for (uint64_t k = 0; k != -942; k -= 6)
        std::pair<std::string,std::string>::~pair((uint64_t)&v205[k]);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "de_DE"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v49, "@@", "ə");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v50, "AEH", "ˈɛ:");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v51, "AH", "ˈaː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v52, "ATT", "ˈa");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v53, "EH", "ˈeː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v54, "ETT", "ˈɛ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v55, "EU", "ˈɔ͡y");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v56, "IH", "ˈiː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v57, "ITT", "ˈɪ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v58, "OE", "ˈœ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v59, "OEH", "ˈø");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v60, "OH", "ˈoː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v61, "OTT", "ˈɔ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v62, "UE", "ˈʏ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v63, "UEH", "ˈyː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v64, "UH", "ˈuː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v65, "UTT", "ˈʊ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v66, "ach", "x");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v67, "att", "a");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "b", "b");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v69, "d", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v70, "ett", "ɛ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v71, "eu", "ɔ͡y");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "f", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "g", "g");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "h", "h");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v75, "hr", "ʀ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v76, "ich", "ç");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v77, "itt", "ɪ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v78, "j", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "k", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "l", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v81, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v82, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v83, "ng", "ŋ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v84, "oe", "ø");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v85, "ott", "oː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v86, "p", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v87, "r", "ʀ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v88, "s", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v89, "sch", "ʃ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v90, "t", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v91, "ue", "yː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v92, "utt", "ʊ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v93, "w", "v");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v94, "wu", "a͡u");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v95, "z", "z");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v96, "zh", "ʒ");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 48);
      for (uint64_t m = 2256; m != -48; m -= 48)
        std::pair<std::string,std::string>::~pair((uint64_t)&v49[m]);
    }
    else
    {
      double result = 0.0;
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_DWORD *)(v5 + 32) = 1065353216;
    }
    return result;
  }
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v49, "AA", "ˈa");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v50, "AU", "ˈa w");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v51, "AY", "ˈa j");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v52, "EE", "ˈe");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v53, "EY", "ˈe j");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v54, "II", "ˈi");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "OO", "ˈo");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v56, "OY", "ˈo j");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v57, "UU", "ˈu");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v58, "UY", "w ˈi");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v59, "Z", "s");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v60, "aa", "a");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v61, "b", "β");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v62, "ch", "t͡ʃ");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v63, "d", "ð");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v64, "ee", "e");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v65, "f", "f");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v66, "g", "ɣ");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v67, "ii", "i");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "j", "x");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v69, "k", "k");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v70, "ks", "ks");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v71, "l", "l");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "m", "m");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "n", "n");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v74, "nn", "ɲ");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v75, "oo", "o");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v76, "p", "p");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v77, "r", "ɾ");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v78, "rr", "r");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "s", "s");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "t", "t");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v81, "uu", "u");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v82, "w", "w");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[6],0>(v83, "y", "d͡ʒ");
  std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 35);
  uint64_t v46 = 1680;
  do
  {
    unint64_t v47 = &v49[v46];
    if ((char)v49[v46 - 1] < 0) {
      operator delete(*((void **)v47 - 3));
    }
    if ((char)*(v47 - 25) < 0) {
      operator delete(*((void **)v47 - 6));
    }
    v46 -= 48;
  }
  while (v46);
  return result;
}

void sub_1B1CDBD74(_Unwind_Exception *a1)
{
  for (uint64_t i = 2256; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void quasar::PhonesetMapping::getNvASRPhoneSequence(int a1, uint64_t a2)
{
  quasar::PhonesetMapPerLanguage::getXSampaToNvASRMap(v4);
  quasar::PhonesetMapping::getMappedPhonemes(a1, (uint64_t)v4, a2);
}

void sub_1B1CDC270(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 - 72);
  _Unwind_Resume(a1);
}

#error "1B1CDC2AC: too big function (funcsize=0)"

void sub_1B1D08550(_Unwind_Exception *a1)
{
  for (uint64_t i = 2304; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

uint64_t quasar::PhonesetMapping::getSupportedXsampaProns@<X0>(std::vector<std::string> *a1@<X8>)
{
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  quasar::PhonesetMapPerLanguage::getXSampaToNvASRMap(v5);
  int v3 = v6;
  for (i = a1; v3; int v3 = (uint64_t *)*v3)
  {
    if (*((char *)v3 + 39) < 0) {
      std::string::__init_copy_ctor_external(&v7, (const std::string::value_type *)v3[2], v3[3]);
    }
    else {
      std::string v7 = *(std::string *)(v3 + 2);
    }
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&i, (long long *)&v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
}

void sub_1B1D08DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v21 - 24) = v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 24));
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D08E1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D08E70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D08EC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D08F18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D08F6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D08FC0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09014(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09068(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D090BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09110(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09164(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D091B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0920C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09260(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D092B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09308(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0935C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D093B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09404(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09458(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D094AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[1],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09500(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09554(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D095A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D095FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09650(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D096A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D096F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0974C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D097A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D097F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[1],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09848(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0989C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D098F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09944(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09998(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D099EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09A40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09A94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09AE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09B3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09B90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09BE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09C38(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[1],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09C8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09CE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09D34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09D88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09DDC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09E30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09E84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09ED8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09F2C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09F80(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D09FD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A028(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A07C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A0D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A124(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A178(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A1CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A220(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A274(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A2C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A31C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A370(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A3C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A418(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A46C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A4C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A514(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A568(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A5BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A610(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A664(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A6B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A70C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A760(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A7B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A808(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A85C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A8B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A904(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A958(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0A9AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0AA00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0AA54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0AAA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0AAFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0AB50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0ABA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0ABF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0AC4C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0ACA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0ACF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0AD48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0AD9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1D0ADF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void Vocab::~Vocab(Vocab *this)
{
  *(void *)this = &unk_1F0A34918;
  LHash<unsigned int,float>::clear((void *)this + 7, 0);
  LHash<unsigned int,float>::clear((void *)this + 6, 0);
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x50C80EE9192B6);
  }
  LHash<char const*,unsigned int>::clear((void *)this + 1, 0);
}

{
  uint64_t vars8;

  Vocab::~Vocab(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t Vocab::numWords(Vocab *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 1);
  if (v1) {
    return *v1 >> 5;
  }
  else {
    return 0;
  }
}

uint64_t Vocab::unkIndex(Vocab *this)
{
  return *((unsigned int *)this + 16);
}

{
  return (uint64_t)this + 64;
}

uint64_t Vocab::ssIndex(Vocab *this)
{
  return *((unsigned int *)this + 17);
}

{
  return (uint64_t)this + 68;
}

uint64_t Vocab::seIndex(Vocab *this)
{
  return *((unsigned int *)this + 18);
}

{
  return (uint64_t)this + 72;
}

uint64_t Vocab::pauseIndex(Vocab *this)
{
  return *((unsigned int *)this + 19);
}

{
  return (uint64_t)this + 76;
}

uint64_t Vocab::isNonEvent(Vocab *this, const char *a2)
{
  uint64_t v3 = (*(uint64_t (**)(Vocab *, const char *, uint64_t))(*(void *)this + 40))(this, a2, 0xFFFFFFFFLL);
  uint64_t v4 = *(uint64_t (**)(Vocab *, uint64_t))(*(void *)this + 176);
  return v4(this, v3);
}

uint64_t Vocab::addNonEvent(Vocab *this, const char *a2)
{
  uint64_t v3 = (*(uint64_t (**)(Vocab *, const char *))(*(void *)this + 16))(this, a2);
  uint64_t v4 = *(uint64_t (**)(Vocab *, uint64_t))(*(void *)this + 184);
  return v4(this, v3);
}

BOOL Vocab::isMetaTag(Vocab *this, unsigned int a2)
{
  int v3 = 0;
  return LHash<unsigned int,float>::locate((_DWORD **)this + 7, a2, &v3) != 0;
}

uint64_t Vocab::typeOfMetaTag(Vocab *this, unsigned int a2)
{
  uint64_t v2 = (void *)((char *)this + 56);
  unsigned int v4 = 0;
  if (LHash<unsigned int,float>::locate((_DWORD **)this + 7, a2, &v4)) {
    return *(unsigned int *)(*v2 + 8 * v4 + 4);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void *Vocab::use(Vocab *this)
{
  uint64_t v2 = (void **)_ZTWN5Vocab14outputVocabTLSE();
  double result = *v2;
  if (!*v2)
  {
    double result = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *uint64_t v2 = result;
  }
  *double result = this;
  return result;
}

uint64_t quasar::corrective_reranking::VoiceEditingWFST::Edge::Edge(uint64_t a1, int a2, std::string *this, const std::string *a4, double a5)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v10 = (std::string *)(a1 + 8);
  BOOL v11 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = *this;
  }
  if (std::string::find(this, 35, 0) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "#");
    quasar::splitStringSimple((uint64_t)this, (uint64_t *)__p, (unint64_t)&v14);
  }
  *(_DWORD *)a1 = a2;
  std::string::operator=(v10, &__str);
  std::string::operator=(v11, a4);
  *(double *)(a1 + 56) = a5;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1B1D0B1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 + 55) < 0) {
    operator delete(*v25);
  }
  if (*(char *)(v23 + 31) < 0) {
    operator delete(*v24);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::corrective_reranking::VoiceEditingWFST::Edge::accepts(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4 = (const void **)(a1 + 8);
  size_t v5 = strlen(quasar::corrective_reranking::VoiceEditingWFST::star[0]);
  size_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(a1 + 31);
  if (*(char *)(a1 + 31) < 0)
  {
    if (v5 != *(void *)(a1 + 16)) {
      goto LABEL_9;
    }
    if (v5 == -1) {
      goto LABEL_39;
    }
    uint64_t v8 = *v4;
  }
  else
  {
    if (v5 != v7) {
      goto LABEL_9;
    }
    uint64_t v8 = v4;
    if (v6 == -1) {
LABEL_39:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v8, quasar::corrective_reranking::VoiceEditingWFST::star[0], v6))
  {
    size_t v21 = strlen(quasar::corrective_reranking::VoiceEditingWFST::eps[0]);
    size_t v22 = v21;
    if ((char)a2[23] < 0)
    {
      if (v21 != *((void *)a2 + 1)) {
        return 1;
      }
      if (v21 == -1) {
        goto LABEL_40;
      }
      uint64_t v23 = *(const void **)a2;
    }
    else
    {
      if (v21 != a2[23]) {
        return 1;
      }
      uint64_t v23 = a2;
      if (v22 == -1) {
LABEL_40:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
    }
    if (!memcmp(v23, quasar::corrective_reranking::VoiceEditingWFST::eps[0], v22)) {
      goto LABEL_9;
    }
    return 1;
  }
LABEL_9:
  if ((v7 & 0x80u) == 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = *(void *)(a1 + 16);
  }
  uint64_t v10 = a2[23];
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)a2 + 1);
  }
  if (v9 != v10) {
    return 0;
  }
  if (v11 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)a2;
  }
  if ((v7 & 0x80) != 0) {
    return memcmp(*v4, v12, *(void *)(a1 + 16)) == 0;
  }
  if (!v7) {
    return 1;
  }
  uint64_t v13 = v7 - 1;
  do
  {
    int v15 = *(unsigned __int8 *)v4;
    unsigned int v4 = (const void **)((char *)v4 + 1);
    int v14 = v15;
    int v17 = *v12++;
    int v16 = v17;
    BOOL v19 = v13-- != 0;
    BOOL result = v14 == v16;
  }
  while (v14 == v16 && v19);
  return result;
}

uint64_t quasar::corrective_reranking::VoiceEditingWFST::Path::Path(uint64_t a1, int a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  size_t v5 = (void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  if (a1 + 16 == a3)
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
    uint64_t v8 = (char **)(a1 + 48);
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 16), *(std::string **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
    uint64_t v7 = *(char **)(a1 + 48);
    unint64_t v6 = *(void *)(a1 + 56);
    uint64_t v8 = (char **)(a1 + 48);
    if ((unint64_t)v7 < v6)
    {
      *(_DWORD *)uint64_t v7 = a2;
      uint64_t v9 = v7 + 4;
      goto LABEL_19;
    }
  }
  uint64_t v10 = *(char **)(a1 + 40);
  uint64_t v11 = (v7 - v10) >> 2;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 62) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = v6 - (void)v10;
  if (v13 >> 1 > v12) {
    unint64_t v12 = v13 >> 1;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v14);
    uint64_t v7 = *v8;
    uint64_t v10 = (char *)*v5;
  }
  else
  {
    int v15 = 0;
  }
  int v16 = &v15[4 * v11];
  int v17 = &v15[4 * v14];
  *(_DWORD *)int v16 = a2;
  uint64_t v9 = v16 + 4;
  while (v7 != v10)
  {
    int v18 = *((_DWORD *)v7 - 1);
    v7 -= 4;
    *((_DWORD *)v16 - 1) = v18;
    v16 -= 4;
  }
  void *v5 = v16;
  *uint64_t v8 = v9;
  *(void *)(a1 + 56) = v17;
  if (v10) {
    operator delete(v10);
  }
LABEL_19:
  *(void *)(a1 + 48) = v9;
  return a1;
}

void sub_1B1D0B55C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  size_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 48) = v5;
    operator delete(v5);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::VoiceEditingWFST::Path::advance(uint64_t a1, uint64_t a2)
{
  *(double *)(a1 + 8) = *(double *)(a2 + 56) + *(double *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string __s1 = *(std::string *)(a2 + 8);
  }
  size_t v4 = strlen(quasar::corrective_reranking::VoiceEditingWFST::eps[0]);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v4 == __s1.__r_.__value_.__l.__size_)
    {
      if (v4 != -1)
      {
        size_t v5 = (void *)__s1.__r_.__value_.__r.__words[0];
        int v6 = memcmp(__s1.__r_.__value_.__l.__data_, quasar::corrective_reranking::VoiceEditingWFST::eps[0], v4);
        operator delete(v5);
        if (!v6) {
          goto LABEL_16;
        }
        goto LABEL_14;
      }
      goto LABEL_35;
    }
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  else if (v4 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
  {
    if (v4 != -1)
    {
      if (!memcmp(&__s1, quasar::corrective_reranking::VoiceEditingWFST::eps[0], v4)) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
LABEL_35:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_14:
  memset(&__s1, 0, sizeof(__s1));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__s1, *(long long **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
  long long v7 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
  p_s1 = &__s1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_s1);
  if (*((void *)&v7 + 1) != (void)v7) {
    quasar::corrective_reranking::VoiceEditingWFST::Path::removeTopInToken((quasar::corrective_reranking::VoiceEditingWFST::Path *)a1);
  }
LABEL_16:
  uint64_t v8 = (_OWORD *)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = *v8;
    __s1.__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
  }
  size_t v9 = strlen(quasar::corrective_reranking::VoiceEditingWFST::eps[0]);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v9 == __s1.__r_.__value_.__l.__size_)
    {
      if (v9 == -1) {
        goto LABEL_36;
      }
      uint64_t v10 = (void *)__s1.__r_.__value_.__r.__words[0];
      int v11 = memcmp(__s1.__r_.__value_.__l.__data_, quasar::corrective_reranking::VoiceEditingWFST::eps[0], v9);
      operator delete(v10);
      if (!v11) {
        goto LABEL_34;
      }
    }
    else
    {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
  }
  else if (v9 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
  {
    if (v9 != -1)
    {
      if (!memcmp(&__s1, quasar::corrective_reranking::VoiceEditingWFST::eps[0], v9)) {
        goto LABEL_34;
      }
      goto LABEL_29;
    }
LABEL_36:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_29:
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = *v8;
    __s1.__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
  }
  quasar::corrective_reranking::VoiceEditingWFST::Path::appendOutput((uint64_t *)a1, (long long *)&__s1);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
LABEL_34:
  int v12 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  quasar::corrective_reranking::VoiceEditingWFST::Path::appendCurrentNode((quasar::corrective_reranking::VoiceEditingWFST::Path *)a1, v12);
}

void sub_1B1D0B7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::VoiceEditingWFST::Path::removeTopInToken(quasar::corrective_reranking::VoiceEditingWFST::Path *this)
{
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v5, (long long *)(*((void *)this + 2) + 24), *((long long **)this + 3), *((void *)this + 2));
  uint64_t v3 = v2;
  uint64_t v4 = *((void *)this + 3);
  if (v4 != v2)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 24;
    }
    while (v4 != v3);
  }
  *((void *)this + 3) = v3;
}

uint64_t quasar::corrective_reranking::VoiceEditingWFST::Path::appendOutput(uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 8;
  unint64_t v4 = a1[9];
  if (v4 >= a1[10])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[9] = result;
  return result;
}

void quasar::corrective_reranking::VoiceEditingWFST::Path::appendCurrentNode(quasar::corrective_reranking::VoiceEditingWFST::Path *this, int a2)
{
  unint64_t v4 = (char *)this + 56;
  unint64_t v5 = *((void *)this + 7);
  int v6 = (char *)*((void *)this + 6);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = (char *)*((void *)this + 5);
    uint64_t v9 = (v6 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v5 - (void)v8;
    unint64_t v11 = (uint64_t)(v5 - (void)v8) >> 1;
    if (v11 <= v9 + 1) {
      unint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v4, v12);
      uint64_t v8 = (char *)*((void *)this + 5);
      int v6 = (char *)*((void *)this + 6);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[4 * v9];
    int v15 = &v13[4 * v12];
    *(_DWORD *)unint64_t v14 = a2;
    long long v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *((void *)this + 5) = v14;
    *((void *)this + 6) = v7;
    *((void *)this + 7) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)int v6 = a2;
    long long v7 = v6 + 4;
  }
  *((void *)this + 6) = v7;
}

double quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight(quasar::corrective_reranking::VoiceEditingWFST::Path *this)
{
  return *((double *)this + 1);
}

std::string *quasar::corrective_reranking::VoiceEditingWFST::Path::getOutputs@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[8], this[9], 0xAAAAAAAAAAAAAAABLL * (((char *)this[9] - (char *)this[8]) >> 3));
}

uint64_t quasar::corrective_reranking::VoiceEditingWFST::VoiceEditingWFST(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v54[19] = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a1 = a4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  std::ifstream::basic_ifstream(v52);
  if ((v53[*(void *)(v52[0] - 24) + 16] & 5) != 0)
  {
    long long v49 = 0u;
    memset(v50, 0, 240);
    *(_OWORD *)&v48[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
    int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Could not open isyms file ", 26);
    int v18 = *(char *)(a3 + 23);
    if (v18 >= 0) {
      uint64_t v19 = a3;
    }
    else {
      uint64_t v19 = *(void *)a3;
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v20 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v48);
  }
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v47 = 0;
  int v6 = (std::locale::id *)MEMORY[0x1E4FBA258];
  std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(v52[0] - 24)));
  long long v7 = std::locale::use_facet(v48, v6);
  unsigned __int8 v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(v48);
  uint64_t v9 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v52, (uint64_t)v46, v8);
  if ((*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 5) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, " \t");
    quasar::splitStringSimple((uint64_t)v46, (uint64_t *)__p, (unint64_t)v48);
  }
  if (!*(void *)(a1 + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"_vocab.size() > 0", 17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v48);
  }
  std::ifstream::basic_ifstream((uint64_t *)v48);
  if ((v50[*((void *)v48[0].__locale_ - 3)] & 5) != 0)
  {
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    *(_OWORD *)uint64_t v31 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    size_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not open fst text file ", 29);
    int v22 = *(char *)(a2 + 23);
    if (v22 >= 0) {
      uint64_t v23 = a2;
    }
    else {
      uint64_t v23 = *(void *)a2;
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v24 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v28 = 0;
  unint64_t v10 = (std::locale::id *)MEMORY[0x1E4FBA258];
  std::ios_base::getloc((const std::ios_base *)((char *)v48 + *((void *)v48[0].__locale_ - 3)));
  unint64_t v11 = std::locale::use_facet((const std::locale *)__p, v10);
  unsigned __int8 v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale((std::locale *)__p);
  uint64_t v13 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v48, (uint64_t)v27, v12);
  if ((*((unsigned char *)v13 + *(void *)(*v13 - 24) + 32) & 5) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, " \t");
    quasar::splitStringSimple((uint64_t)v27, (uint64_t *)__p, (unint64_t)&v26);
  }
  if (!*(void *)(a1 + 56))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"!edgeLists.empty()", 18);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  v48[0] = *(std::locale *)MEMORY[0x1E4FBA3F8];
  locale = v48[0].__locale_;
  int v15 = *(std::locale::__imp **)(MEMORY[0x1E4FBA3F8] + 24);
  *(std::locale::__imp **)((char *)&v48[0].__locale_ + *((void *)v48[0].__locale_ - 3)) = v15;
  MEMORY[0x1B3EA7CF0](&v49);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](&v51);
  if (SHIBYTE(v47) < 0) {
    operator delete(v46[0]);
  }
  v52[0] = (uint64_t)locale;
  *(uint64_t *)((char *)v52 + *((void *)locale - 3)) = (uint64_t)v15;
  MEMORY[0x1B3EA7CF0](v53);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v54);
  return a1;
}

void sub_1B1D0C3A8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1D0C414);
}

uint64_t quasar::corrective_reranking::VoiceEditingWFST::search@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v29 = result;
  char v35 = a4;
  if (!a4 || *a2 != a2[1])
  {
    if ((a3 & 0xFF00000000) == 0)
    {
      int v6 = *(uint64_t ***)(result + 48);
      long long v7 = *v6;
      if (*(unsigned char *)result)
      {
        for (; v7; long long v7 = (uint64_t *)*v7)
        {
          LODWORD(__v.__first_) = *((_DWORD *)v6 + 4);
          memset(&__v.__begin_, 0, 24);
          std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>(&__v.__begin_, (uint64_t)v6[3], (uint64_t)v6[4], ((char *)v6[4] - (char *)v6[3]) >> 6);
          LODWORD(p_begin) = *((_DWORD *)v7 + 4);
          unint64_t v38 = 0;
          uint64_t v39 = 0;
          long long v37 = 0;
          std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>(&v37, v7[3], v7[4], (v7[4] - v7[3]) >> 6);
          int v8 = (int)p_begin;
          v34.__begin_ = (std::vector<std::string>::pointer)&v37;
          std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
          p_begin = &__v.__begin_;
          std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_begin);
          if (SLODWORD(__v.__first_) < v8) {
            int v6 = (uint64_t **)v7;
          }
        }
      }
      else
      {
        for (; v7; long long v7 = (uint64_t *)*v7)
        {
          LODWORD(__v.__first_) = *((_DWORD *)v7 + 4);
          memset(&__v.__begin_, 0, 24);
          std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>(&__v.__begin_, v7[3], v7[4], (v7[4] - v7[3]) >> 6);
          LODWORD(p_begin) = *((_DWORD *)v6 + 4);
          unint64_t v38 = 0;
          uint64_t v39 = 0;
          long long v37 = 0;
          std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>(&v37, (uint64_t)v6[3], (uint64_t)v6[4], ((char *)v6[4] - (char *)v6[3]) >> 6);
          int v9 = (int)p_begin;
          v34.__begin_ = (std::vector<std::string>::pointer)&v37;
          std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
          p_begin = &__v.__begin_;
          std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_begin);
          if (SLODWORD(__v.__first_) < v9) {
            int v6 = (uint64_t **)v7;
          }
        }
      }
    }
    p_begin = 0;
    long long v37 = 0;
    unint64_t v38 = 0;
    memset(&v34, 0, sizeof(v34));
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if (*a2 != v11)
    {
      do
      {
        if (*(char *)(v10 + 23) < 0)
        {
          uint64_t v13 = *(char **)v10;
          uint64_t v12 = *(void *)(v10 + 8);
        }
        else
        {
          uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
          uint64_t v13 = (char *)v10;
        }
        quasar::utf8::convertToLowerCaseOrEmpty(v13, v12, &v33);
        unint64_t v14 = v37;
        if ((unint64_t)v37 >= v38)
        {
          int v16 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&p_begin, (long long *)&v33);
        }
        else
        {
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v37, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v15 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
            v37->__r_.__value_.__r.__words[2] = v33.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
          }
          int v16 = v14 + 1;
        }
        long long v37 = v16;
        if (v29 + 16 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v29 + 8, (const void **)&v33.__r_.__value_.__l.__data_))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, quasar::corrective_reranking::VoiceEditingWFST::unk);
          std::vector<std::string>::pointer end = v34.__end_;
          if (v34.__end_ >= v34.__end_cap_.__value_)
          {
            unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34.__end_ - (char *)v34.__begin_) >> 3);
            unint64_t v23 = v22 + 1;
            if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v34.__end_cap_.__value_ - (char *)v34.__begin_) >> 3) > v23) {
              unint64_t v23 = 0x5555555555555556 * (((char *)v34.__end_cap_.__value_ - (char *)v34.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v34.__end_cap_.__value_ - (char *)v34.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v24 = v23;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v34.__end_cap_;
            if (v24) {
              uint64_t v25 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v34.__end_cap_, v24);
            }
            else {
              uint64_t v25 = 0;
            }
            uint64_t v26 = v25 + v22;
            __v.__first_ = v25;
            __v.__begin_ = v26;
            __v.__end_cap_.__value_ = &v25[v24];
            long long v27 = *(_OWORD *)__p;
            v26->__r_.__value_.__r.__words[2] = v32;
            *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
            __p[1] = 0;
            std::string::size_type v32 = 0;
            __p[0] = 0;
            __v.__end_ = v26 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v34, &__v);
            uint64_t v28 = v34.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
            v34.__end_ = v28;
            if (SHIBYTE(v32) < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v20 = *(_OWORD *)__p;
            v34.__end_->__r_.__value_.__r.__words[2] = v32;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v20;
            v34.__end_ = end + 1;
          }
        }
        else
        {
          std::vector<std::string>::pointer v17 = v34.__end_;
          if (v34.__end_ >= v34.__end_cap_.__value_)
          {
            size_t v21 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v34, (long long *)&v33);
          }
          else
          {
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v34.__end_, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v18 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
              v34.__end_->__r_.__value_.__r.__words[2] = v33.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
            }
            size_t v21 = v17 + 1;
          }
          v34.__end_ = v21;
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        v10 += 24;
      }
      while (v10 != v11);
    }
    if (v35) {
      operator new();
    }
    operator new();
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  return result;
}

void sub_1B1D0D21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__split_buffer<std::wstring> *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  *(void *)(v27 - 192) = v27 - 168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 192));
  *(void *)(v27 - 168) = v27 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 168));
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Paths::add(quasar::corrective_reranking::Paths *this, const quasar::corrective_reranking::VoiceEditingWFST::Path *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 16))(__p);
  unint64_t v4 = v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (!v4)
  {
    unint64_t v10 = *((void *)this + 2);
    if (v10 < *((void *)this + 3))
    {
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path const&>((uint64_t)this + 24, *((void *)this + 2), (uint64_t)a2);
      uint64_t v11 = v10 + 88;
LABEL_13:
      *((void *)this + 2) = v11;
LABEL_15:
      *((void *)this + 2) = v11;
      goto LABEL_16;
    }
LABEL_14:
    uint64_t v11 = std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__emplace_back_slow_path<quasar::corrective_reranking::VoiceEditingWFST::Path const&>((uint64_t *)this + 1, (uint64_t)a2);
    goto LABEL_15;
  }
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)this + 4, (unsigned __int8 *)__p);
  if (!v5)
  {
    uint64_t v12 = *((void *)this + 1);
    uint64_t v13 = *((void *)this + 2);
    std::vector<std::string>::pointer v17 = __p;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v17)+ 5) = 0x2E8BA2E8BA2E8BA3 * ((v13 - v12) >> 3);
    unint64_t v14 = *((void *)this + 2);
    if (v14 < *((void *)this + 3))
    {
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path const&>((uint64_t)this + 24, *((void *)this + 2), (uint64_t)a2);
      uint64_t v11 = v14 + 88;
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  uint64_t v6 = *((void *)this + 1);
  unint64_t v7 = *((void *)v5 + 5);
  if (0x2E8BA2E8BA2E8BA3 * ((*((void *)this + 2) - v6) >> 3) <= v7) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v8 = v6 + 88 * v7;
  double v9 = *(double *)(v8 + 8);
  if (*((double *)a2 + 1) < v9) {
    double v9 = *((double *)a2 + 1);
  }
  *(double *)(v8 + 8) = v9;
LABEL_16:
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D0D5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 16) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::VoiceEditingWFST::Path::~Path(quasar::corrective_reranking::VoiceEditingWFST::Path *this)
{
  uint64_t v3 = (void **)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_2::operator()(uint64_t *a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  long long v19 = *a2;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *((long long **)a2 + 2), *((long long **)a2 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3));
  size_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *((const void **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2);
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, *((long long **)a2 + 8), *((long long **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3));
  quasar::corrective_reranking::VoiceEditingWFST::Path::advance((uint64_t)&v19, a3);
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, (long long *)v20.__r_.__value_.__l.__data_, (long long *)v20.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 3));
  long long v7 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
  uint64_t v25 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (*((void *)&v7 + 1) != (void)v7)
  {
    quasar::corrective_reranking::Paths::add(*(quasar::corrective_reranking::Paths **)a1[1], (const quasar::corrective_reranking::VoiceEditingWFST::Path *)&v19);
    goto LABEL_12;
  }
  LODWORD(v12.__r_.__value_.__l.__data_) = v19;
  uint64_t v8 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(v6 + 72), (int *)&v12);
  if (v8)
  {
    *((double *)&v19 + 1) = *((double *)&v19 + 1) + *((float *)v8 + 5);
    double v9 = (quasar::corrective_reranking::Paths ***)(a1 + 2);
LABEL_11:
    quasar::corrective_reranking::Paths::add(**v9, (const quasar::corrective_reranking::VoiceEditingWFST::Path *)&v19);
    goto LABEL_12;
  }
  if (!*(unsigned char *)a1[3]
    || (memset(&v12, 0, sizeof(v12)),
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, (long long *)v24.__r_.__value_.__l.__data_, (long long *)v24.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24.__r_.__value_.__l.__size_ - v24.__r_.__value_.__r.__words[0]) >> 3)), std::string::size_type v10 = v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0], v11 = *(void *)(a1[4] + 8) - *(void *)a1[4], v25 = &v12, std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25), v10 != v11))
  {
    double v9 = (quasar::corrective_reranking::Paths ***)(a1 + 1);
    goto LABEL_11;
  }
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v19;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v12.__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v12.__r_.__value_.__r.__words[2], (long long *)v20.__r_.__value_.__l.__data_, (long long *)v20.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 3));
  std::string __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v21, (uint64_t)v22, (v22 - (unsigned char *)v21) >> 2);
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, (long long *)v24.__r_.__value_.__l.__data_, (long long *)v24.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24.__r_.__value_.__l.__size_ - v24.__r_.__value_.__r.__words[0]) >> 3));
  *(double *)&v12.__r_.__value_.__l.__size_ = *(double *)&v12.__r_.__value_.__l.__size_ + 1000000.0;
  quasar::corrective_reranking::Paths::add(*(quasar::corrective_reranking::Paths **)a1[2], (const quasar::corrective_reranking::VoiceEditingWFST::Path *)&v12);
  uint64_t v25 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  uint64_t v25 = (std::string *)&v12.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
LABEL_12:
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (v21)
  {
    unint64_t v22 = v21;
    operator delete(v21);
  }
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_1B1D0D91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
}

void *std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1D0DA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge,quasar::corrective_reranking::VoiceEditingWFST::Edge&>(a1, v4, v6);
      v6 += 64;
      uint64_t v4 = v12 + 64;
      v12 += 64;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,quasar::corrective_reranking::VoiceEditingWFST::Edge*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1D0DB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge,quasar::corrective_reranking::VoiceEditingWFST::Edge&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = (std::string *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  double result = *(double *)(a3 + 56);
  *(double *)(a2 + 56) = result;
  return result;
}

void sub_1B1D0DBF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,quasar::corrective_reranking::VoiceEditingWFST::Edge*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,quasar::corrective_reranking::VoiceEditingWFST::Edge*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,quasar::corrective_reranking::VoiceEditingWFST::Edge*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 64;
      std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__emplace_back_slow_path<quasar::corrective_reranking::VoiceEditingWFST::Path const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v6 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  char v10 = v7;
  uint64_t v11 = &v7[88 * v3];
  uint64_t v13 = &v7[88 * v6];
  std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 88;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Path>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1D0DE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Path>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 16), *(long long **)(a3 + 16), *(long long **)(a3 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 3));
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a2 + 40), *(const void **)(a3 + 40), *(void *)(a3 + 48), (uint64_t)(*(void *)(a3 + 48) - *(void *)(a3 + 40)) >> 2);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 64), *(long long **)(a3 + 64), *(long long **)(a3 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 72) - *(void *)(a3 + 64)) >> 3));
}

void sub_1B1D0DF0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 48) = v5;
    operator delete(v5);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 88;
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path>(a1, v7 - 88, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 88;
      *((void *)&v16 + 1) -= 88;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  __n128 result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  *(void *)(a2 + 80) = *(void *)(a3 + 80);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void **)(a2 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v3)
  {
    *(void *)(a2 + 48) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void **)(a2 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void **std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Path>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Path>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::destroy[abi:ne180100](v4, i - 88);
  }
}

uint64_t std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path *,quasar::corrective_reranking::VoiceEditingWFST::Path *,quasar::corrective_reranking::VoiceEditingWFST::Path *>((uint64_t)&v9, a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 88;
        std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::destroy[abi:ne180100](a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path *,quasar::corrective_reranking::VoiceEditingWFST::Path *,quasar::corrective_reranking::VoiceEditingWFST::Path *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_OWORD *)a4 = *(_OWORD *)v5;
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a4 + 16));
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(v5 + 16);
    *(void *)(a4 + 32) = *(void *)(v5 + 32);
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    std::vector<int>::__move_assign(a4 + 40, (__n128 *)(v5 + 40));
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a4 + 64));
    *(_OWORD *)(a4 + 64) = *(_OWORD *)(v5 + 64);
    *(void *)(a4 + 80) = *(void *)(v5 + 80);
    *(void *)(v5 + 64) = 0;
    *(void *)(v5 + 72) = 0;
    *(void *)(v5 + 80) = 0;
    a4 += 88;
    v5 += 88;
  }
  while (v5 != v6);
  return v6;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      uint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void **)(v2 + 24);
      std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    char v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  void v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  size_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v11 = *v21;
LABEL_38:
    *size_t v21 = v11;
    goto LABEL_39;
  }
  void *v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    size_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B1D0E6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 3;
    std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__push_back_slow_path<quasar::corrective_reranking::VoiceEditingWFST::Edge const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  float v15 = a1 + 2;
  if (v7) {
    unint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)(a1 + 2), v7);
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  unint64_t v12 = &v8[64 * v3];
  float v14 = &v8[64 * v7];
  std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge,quasar::corrective_reranking::VoiceEditingWFST::Edge const&>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  uint64_t v13 = v12 + 64;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Edge>::~__split_buffer(&v11);
  return v9;
}

void sub_1B1D0E7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Edge>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

double std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge,quasar::corrective_reranking::VoiceEditingWFST::Edge const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  unint64_t v7 = (std::string *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  double result = *(double *)(a3 + 56);
  *(double *)(a2 + 56) = result;
  return result;
}

void sub_1B1D0E8A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(_DWORD *)(v8 - 64) = *(_DWORD *)(a3 + v7 - 64);
      long long v10 = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v8 - 40) = *(void *)(a3 + v7 - 40);
      *(_OWORD *)(v8 - 56) = v10;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 56) = 0;
      long long v11 = *(_OWORD *)(a3 + v7 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(_OWORD *)(v8 - 32) = v11;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      v7 -= 64;
    }
    while (a3 + v7 != a5);
    *((void *)&v17 + 1) = a7 + v7;
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Edge>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Edge>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 64;
    std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](v4, i - 64);
  }
}

void quasar::corrective_reranking::UniqueSearchPaths::~UniqueSearchPaths(quasar::corrective_reranking::UniqueSearchPaths *this)
{
  *(void *)this = &unk_1F0A64088;
  uint64_t v1 = (void **)((char *)this + 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  uint64_t v2 = v1;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_1F0A64088;
  uint64_t v2 = (void **)((char *)this + 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  uint64_t v3 = v2;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1B3EA8670](this, 0x10A1C403B35B87FLL);
}

void quasar::corrective_reranking::UniqueSearchPaths::getKey(quasar::corrective_reranking::UniqueSearchPaths *this, long long **a2)
{
  memset(&v33, 0, sizeof(v33));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v33, a2[2], a2[3], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[3] - (char *)a2[2]) >> 3));
  memset(&v32, 0, sizeof(v32));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, a2[8], a2[9], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[9] - (char *)a2[8]) >> 3));
  memset(&v31, 0, sizeof(v31));
  std::to_string(&v30, *(_DWORD *)a2);
  std::vector<std::string>::pointer end = v31.__end_;
  if (v31.__end_ >= v31.__end_cap_.__value_)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_ - (char *)v31.__begin_) >> 3);
    unint64_t v6 = v5 + 1;
    if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) > v6) {
      unint64_t v6 = 0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v7 = v6;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v31.__end_cap_;
    if (v7) {
      uint64_t v8 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v31.__end_cap_, v7);
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = v8 + v5;
    __v.__first_ = v8;
    __v.__begin_ = v9;
    __v.__end_cap_.__value_ = &v8[v7];
    long long v10 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    v9->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    memset(&v30, 0, sizeof(v30));
    __v.__end_ = v9 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v31, &__v);
    long long v11 = v31.__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    v31.__end_ = v11;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v4 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    v31.__end_->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v4;
    v31.__end_ = end + 1;
  }
  std::to_string(&v30, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33.__r_.__value_.__l.__size_ - v33.__r_.__value_.__r.__words[0]) >> 3));
  std::vector<std::string>::pointer v12 = v31.__end_;
  if (v31.__end_ >= v31.__end_cap_.__value_)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_ - (char *)v31.__begin_) >> 3);
    unint64_t v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) > v16) {
      unint64_t v16 = 0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v16;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v31.__end_cap_;
    if (v17) {
      unint64_t v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v31.__end_cap_, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    size_t v19 = v18 + v15;
    __v.__first_ = v18;
    __v.__begin_ = v19;
    __v.__end_cap_.__value_ = &v18[v17];
    long long v20 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    v19->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    memset(&v30, 0, sizeof(v30));
    __v.__end_ = v19 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v31, &__v);
    float v14 = v31.__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    v31.__end_ = v14;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      float v14 = v31.__end_;
    }
  }
  else
  {
    long long v13 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    v31.__end_->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    float v14 = v12 + 1;
    v31.__end_ = v12 + 1;
  }
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v31, v14, (std::string *)v33.__r_.__value_.__l.__data_, (long long *)v33.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33.__r_.__value_.__l.__size_ - v33.__r_.__value_.__r.__words[0]) >> 3));
  std::to_string(&v30, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]) >> 3));
  std::vector<std::string>::pointer v21 = v31.__end_;
  if (v31.__end_ >= v31.__end_cap_.__value_)
  {
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_ - (char *)v31.__begin_) >> 3);
    unint64_t v25 = v24 + 1;
    if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) > v25) {
      unint64_t v25 = 0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v26 = v25;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v31.__end_cap_;
    if (v26) {
      uint64_t v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v31.__end_cap_, v26);
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v28 = v27 + v24;
    __v.__first_ = v27;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v27[v26];
    long long v29 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    v28->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
    memset(&v30, 0, sizeof(v30));
    __v.__end_ = v28 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v31, &__v);
    uint64_t v23 = v31.__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    v31.__end_ = v23;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      uint64_t v23 = v31.__end_;
    }
  }
  else
  {
    long long v22 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    v31.__end_->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
    uint64_t v23 = v21 + 1;
    v31.__end_ = v21 + 1;
  }
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v31, v23, (std::string *)v32.__r_.__value_.__l.__data_, (long long *)v32.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]) >> 3));
  __v.__first_ = (std::__split_buffer<std::string>::pointer)" ";
  __v.__begin_ = (std::__split_buffer<std::string>::pointer)1;
  quasar::join<std::vector<std::string>>((uint64_t *)&v31, (uint64_t *)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1B1D0F040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char ***__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char **a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,char a22)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)(v22 - 88));
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a16 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a19 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Paths::~Paths(quasar::corrective_reranking::Paths *this)
{
  *(void *)this = &unk_1F0A64088;
  uint64_t v1 = (void **)((char *)this + 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  uint64_t v2 = v1;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_1F0A64088;
  uint64_t v2 = (void **)((char *)this + 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  uint64_t v3 = v2;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1B3EA8670](this, 0x10A1C403B35B87FLL);
}

void quasar::corrective_reranking::Paths::getKey(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void quasar::corrective_reranking::UniqueOutputPaths::~UniqueOutputPaths(quasar::corrective_reranking::UniqueOutputPaths *this)
{
  *(void *)this = &unk_1F0A64088;
  uint64_t v1 = (void **)((char *)this + 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  uint64_t v2 = v1;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_1F0A64088;
  uint64_t v2 = (void **)((char *)this + 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  uint64_t v3 = v2;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1B3EA8670](this, 0x10A1C403B35B87FLL);
}

void quasar::corrective_reranking::UniqueOutputPaths::getKey(quasar::corrective_reranking::UniqueOutputPaths *this, long long **a2)
{
  memset(&v3, 0, sizeof(v3));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v3, a2[8], a2[9], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[9] - (char *)a2[8]) >> 3));
  v2[0] = (void **)" ";
  v2[1] = (void **)1;
  quasar::join<std::vector<std::string>>((uint64_t *)&v3, (uint64_t *)v2);
  v2[0] = (void **)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v2);
}

void sub_1B1D0F304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path*,quasar::corrective_reranking::VoiceEditingWFST::Path*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::pair<std::string,quasar::PTree>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,quasar::corrective_reranking::VoiceEditingWFST::Path*,quasar::corrective_reranking::VoiceEditingWFST::Path*,quasar::corrective_reranking::VoiceEditingWFST::Path*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1D0F384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,quasar::corrective_reranking::VoiceEditingWFST::Path*,quasar::corrective_reranking::VoiceEditingWFST::Path*,quasar::corrective_reranking::VoiceEditingWFST::Path*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path&>(a1, v4, v6);
      v6 += 88;
      uint64_t v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,quasar::corrective_reranking::VoiceEditingWFST::Path*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1D0F43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 16), *(long long **)(a3 + 16), *(long long **)(a3 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 3));
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a2 + 40), *(const void **)(a3 + 40), *(void *)(a3 + 48), (uint64_t)(*(void *)(a3 + 48) - *(void *)(a3 + 40)) >> 2);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 64), *(long long **)(a3 + 64), *(long long **)(a3 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 72) - *(void *)(a3 + 64)) >> 3));
}

void sub_1B1D0F500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 48) = v5;
    operator delete(v5);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,quasar::corrective_reranking::VoiceEditingWFST::Path*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,quasar::corrective_reranking::VoiceEditingWFST::Path*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,quasar::corrective_reranking::VoiceEditingWFST::Path*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 88;
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::get_temporary_buffer[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x1745D1745D1745DLL) {
    unint64_t v1 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    uint64_t result = operator new(88 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      if (*((double *)a2 - 10) < *(double *)(a1 + 8))
      {
        uint64_t v7 = (uint64_t)(a2 - 88);
        std::swap[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>((std::vector<std::wstring> *)a1, v7);
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((char *)a1 != a2)
      {
        float v14 = (_OWORD *)(a1 + 88);
        if ((char *)(a1 + 88) != a2)
        {
          uint64_t v15 = 0;
          uint64_t v16 = a1;
          do
          {
            unint64_t v17 = v14;
            if (*(double *)(v16 + 96) < *(double *)(v16 + 8))
            {
              long long v18 = *(_OWORD *)(v16 + 104);
              long long v38 = *v14;
              long long v39 = v18;
              uint64_t v40 = *(void *)(v16 + 120);
              *(void *)(v16 + 104) = 0;
              *(void *)(v16 + 112) = 0;
              *(_OWORD *)std::string __p = *(_OWORD *)(v16 + 128);
              uint64_t v42 = *(void *)(v16 + 144);
              *(void *)(v16 + 120) = 0;
              *(void *)(v16 + 128) = 0;
              *(void *)(v16 + 136) = 0;
              *(void *)(v16 + 144) = 0;
              long long v43 = *(_OWORD *)(v16 + 152);
              uint64_t v44 = *(void *)(v16 + 168);
              *(void *)(v16 + 152) = 0;
              *(void *)(v16 + 160) = 0;
              uint64_t v19 = v15;
              *(void *)(v16 + 168) = 0;
              while (1)
              {
                uint64_t v20 = a1 + v19;
                *(_OWORD *)(a1 + v19 + 88) = *(_OWORD *)(a1 + v19);
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + v19 + 104));
                *(_OWORD *)(v20 + 104) = *(_OWORD *)(v20 + 16);
                *(void *)(v20 + 120) = *(void *)(v20 + 32);
                *(void *)(v20 + 24) = 0;
                *(void *)(v20 + 32) = 0;
                *(void *)(v20 + 16) = 0;
                std::vector<int>::__move_assign(v20 + 128, (__n128 *)(v20 + 40));
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + v19 + 152));
                *(_OWORD *)(v20 + 152) = *(_OWORD *)(v20 + 64);
                *(void *)(v20 + 168) = *(void *)(v20 + 80);
                *(void *)(v20 + 72) = 0;
                *(void *)(v20 + 80) = 0;
                *(void *)(v20 + 64) = 0;
                if (!v19) {
                  break;
                }
                v19 -= 88;
                if (*((double *)&v38 + 1) >= *(double *)(v20 - 80))
                {
                  uint64_t v21 = a1 + v19 + 88;
                  goto LABEL_21;
                }
              }
              uint64_t v21 = a1;
LABEL_21:
              *(_OWORD *)uint64_t v21 = v38;
              std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v20 + 16));
              *(void *)(v20 + 16) = v39;
              *(void *)(v21 + 24) = *((void *)&v39 + 1);
              *(void *)(v21 + 32) = v40;
              long long v39 = 0uLL;
              uint64_t v40 = 0;
              unint64_t v24 = *(void **)(v20 + 40);
              uint64_t v23 = (std::vector<std::wstring> *)(v20 + 40);
              uint64_t v22 = v24;
              if (v24)
              {
                *(void *)(v21 + 48) = v22;
                operator delete(v22);
                v23->__begin_ = 0;
                v23->__end_ = 0;
                v23->__end_cap_.__value_ = 0;
              }
              v23->__begin_ = (std::vector<std::wstring>::pointer)__p[0];
              *(void **)(v21 + 48) = __p[1];
              *(void *)(v21 + 56) = v42;
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v42 = 0;
              std::vector<std::string>::__vdeallocate(v23 + 1);
              v23[1].__begin_ = (std::vector<std::wstring>::pointer)v43;
              *(void *)(v21 + 72) = *((void *)&v43 + 1);
              *(void *)(v21 + 80) = v44;
              long long v43 = 0uLL;
              uint64_t v44 = 0;
              long long v45 = (void **)&v43;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v45);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              long long v45 = (void **)&v39;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v45);
            }
            float v14 = (_OWORD *)((char *)v17 + 88);
            v15 += 88;
            uint64_t v16 = (uint64_t)v17;
          }
          while ((char *)v17 + 88 != a2);
        }
      }
    }
    else
    {
      uint64_t v11 = a3 >> 1;
      uint64_t v12 = a1 + 88 * (a3 >> 1);
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(a1, (char *)(a1 + 88 * (a3 >> 1)), a3 >> 1, a4);
        uint64_t v25 = a4 + 88 * v11;
        std::__stable_sort_move<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(a1 + 88 * (a3 >> 1), a2, a3 - v11, v25);
        *(void *)&long long v38 = a3;
        unint64_t v26 = (void *)(a4 + 88 * a3);
        uint64_t v27 = (void *)(a1 + 80);
        uint64_t v28 = v25;
        uint64_t v29 = a4;
        while ((void *)v28 != v26)
        {
          std::string v30 = v27 - 10;
          std::vector<std::string> v31 = (std::vector<std::wstring> *)(v27 - 8);
          if (*(double *)(v28 + 8) >= *(double *)(v29 + 8))
          {
            *std::string v30 = *(_OWORD *)v29;
            std::vector<std::string>::__vdeallocate(v31);
            *((_OWORD *)v27 - 4) = *(_OWORD *)(v29 + 16);
            *(v27 - 6) = *(void *)(v29 + 32);
            *(void *)(v29 + 16) = 0;
            *(void *)(v29 + 24) = 0;
            *(void *)(v29 + 32) = 0;
            std::vector<int>::__move_assign((uint64_t)(v27 - 5), (__n128 *)(v29 + 40));
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v27 - 2));
            *((_OWORD *)v27 - 1) = *(_OWORD *)(v29 + 64);
            *uint64_t v27 = *(void *)(v29 + 80);
            *(void *)(v29 + 64) = 0;
            *(void *)(v29 + 72) = 0;
            *(void *)(v29 + 80) = 0;
            v29 += 88;
          }
          else
          {
            *std::string v30 = *(_OWORD *)v28;
            std::vector<std::string>::__vdeallocate(v31);
            *((_OWORD *)v27 - 4) = *(_OWORD *)(v28 + 16);
            *(v27 - 6) = *(void *)(v28 + 32);
            *(void *)(v28 + 16) = 0;
            *(void *)(v28 + 24) = 0;
            *(void *)(v28 + 32) = 0;
            std::vector<int>::__move_assign((uint64_t)(v27 - 5), (__n128 *)(v28 + 40));
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v27 - 2));
            *((_OWORD *)v27 - 1) = *(_OWORD *)(v28 + 64);
            *uint64_t v27 = *(void *)(v28 + 80);
            *(void *)(v28 + 64) = 0;
            *(void *)(v28 + 72) = 0;
            *(void *)(v28 + 80) = 0;
            v28 += 88;
          }
          v27 += 11;
          if (v29 == v25)
          {
            if ((void *)v28 != v26)
            {
              unint64_t v32 = 0;
              do
              {
                std::string v33 = (void *)(v28 + v32);
                std::vector<std::string> v34 = &v27[v32 / 8];
                *(_OWORD *)&v27[v32 / 8 - 10] = *(_OWORD *)(v28 + v32);
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v27[v32 / 8 - 8]);
                *((_OWORD *)v34 - 4) = *(_OWORD *)(v28 + v32 + 16);
                *(v34 - 6) = *(void *)(v28 + v32 + 32);
                v33[2] = 0;
                void v33[3] = 0;
                void v33[4] = 0;
                std::vector<int>::__move_assign((uint64_t)&v27[v32 / 8 - 5], (__n128 *)(v28 + v32 + 40));
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v27[v32 / 8 - 2]);
                *((_OWORD *)v34 - 1) = *(_OWORD *)(v28 + v32 + 64);
                void *v34 = *(void *)(v28 + v32 + 80);
                v33[8] = 0;
                v33[9] = 0;
                v33[10] = 0;
                v32 += 88;
              }
              while (v33 + 11 != v26);
            }
            goto LABEL_41;
          }
        }
        if (v29 != v25)
        {
          unint64_t v35 = 0;
          do
          {
            long long v36 = (void *)(v29 + v35);
            long long v37 = &v27[v35 / 8];
            *(_OWORD *)&v27[v35 / 8 - 10] = *(_OWORD *)(v29 + v35);
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v27[v35 / 8 - 8]);
            *((_OWORD *)v37 - 4) = *(_OWORD *)(v29 + v35 + 16);
            *(v37 - 6) = *(void *)(v29 + v35 + 32);
            v36[2] = 0;
            void v36[3] = 0;
            v36[4] = 0;
            std::vector<int>::__move_assign((uint64_t)&v27[v35 / 8 - 5], (__n128 *)(v29 + v35 + 40));
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v27[v35 / 8 - 2]);
            *((_OWORD *)v37 - 1) = *(_OWORD *)(v29 + v35 + 64);
            *long long v37 = *(void *)(v29 + v35 + 80);
            v36[8] = 0;
            v36[9] = 0;
            v36[10] = 0;
            v35 += 88;
          }
          while (v36 + 11 != (void *)v25);
        }
LABEL_41:
        if (a4) {
          std::__destruct_n::__process[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>((unint64_t *)&v38, a4);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(a1, a1 + 88 * (a3 >> 1), a3 >> 1, a4, a5);
        uint64_t v13 = a3 - v11;
        std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(v12, a2, v13, a4, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(a1, v12, (uint64_t)a2, v11, v13, a4, a5);
      }
    }
  }
}

void sub_1B1D0FC2C(_Unwind_Exception *exception_object, ...)
{
  va_start(va, exception_object);
  if (v1) {
    std::__destruct_n::__process[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>((unint64_t *)va, v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v7 = (_OWORD *)a1;
    if (a3 == 2)
    {
      uint64_t v9 = a2 - 88;
      char v10 = (void *)(a4 + 16);
      uint64_t v11 = (void *)(a4 + 40);
      uint64_t v12 = (void *)(a4 + 64);
      if (*((double *)a2 - 10) >= *(double *)(a1 + 8))
      {
        *(_OWORD *)a4 = *(_OWORD *)a1;
        *(void *)(a4 + 24) = 0;
        *(void *)(a4 + 32) = 0;
        *char v10 = 0;
        *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
        *(void *)(a4 + 32) = *(void *)(a1 + 32);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        void *v11 = 0;
        *(void *)(a4 + 48) = 0;
        *(void *)(a4 + 56) = 0;
        *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
        *(void *)(a4 + 56) = *(void *)(a1 + 56);
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *uint64_t v12 = 0;
        *(void *)(a4 + 72) = 0;
        *(void *)(a4 + 80) = 0;
        *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
        *(void *)(a4 + 80) = *(void *)(a1 + 80);
        *(void *)(a1 + 64) = 0;
        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
        *(_OWORD *)(a4 + 88) = *(_OWORD *)v9;
        *(void *)(a4 + 112) = 0;
        *(void *)(a4 + 120) = 0;
        *(void *)(a4 + 104) = 0;
        *(_OWORD *)(a4 + 104) = *(_OWORD *)(a2 - 72);
        *(void *)(a4 + 120) = *((void *)a2 - 7);
        *((void *)a2 - 9) = 0;
        *((void *)a2 - 8) = 0;
        *((void *)a2 - 7) = 0;
        *(void *)(a4 + 128) = 0;
        *(void *)(a4 + 136) = 0;
        *(void *)(a4 + 144) = 0;
        *(_OWORD *)(a4 + 128) = *((_OWORD *)a2 - 3);
        *(void *)(a4 + 144) = *((void *)a2 - 4);
        *((void *)a2 - 6) = 0;
        *((void *)a2 - 5) = 0;
        *((void *)a2 - 4) = 0;
        *(void *)(a4 + 168) = 0;
        uint64_t v8 = (__n128 *)(a4 + 168);
        *(void *)(a4 + 152) = 0;
        *(void *)(a4 + 160) = 0;
        __n128 result = *(__n128 *)(a2 - 24);
        *(__n128 *)(a4 + 152) = result;
        uint64_t v15 = (unint64_t *)(a2 - 8);
        uint64_t v13 = a2 - 24;
        goto LABEL_23;
      }
      *(_OWORD *)a4 = *(_OWORD *)v9;
      *(void *)(a4 + 24) = 0;
      *(void *)(a4 + 32) = 0;
      *char v10 = 0;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a2 - 72);
      *(void *)(a4 + 32) = *((void *)a2 - 7);
      *((void *)a2 - 9) = 0;
      *((void *)a2 - 8) = 0;
      *((void *)a2 - 7) = 0;
      void *v11 = 0;
      *(void *)(a4 + 48) = 0;
      *(void *)(a4 + 56) = 0;
      *(_OWORD *)(a4 + 40) = *((_OWORD *)a2 - 3);
      *(void *)(a4 + 56) = *((void *)a2 - 4);
      *((void *)a2 - 6) = 0;
      *((void *)a2 - 5) = 0;
      *((void *)a2 - 4) = 0;
      *uint64_t v12 = 0;
      *(void *)(a4 + 72) = 0;
      *(void *)(a4 + 80) = 0;
      *(_OWORD *)(a4 + 64) = *(_OWORD *)(a2 - 24);
      *(void *)(a4 + 80) = *((void *)a2 - 1);
      *((void *)a2 - 3) = 0;
      *((void *)a2 - 2) = 0;
      *((void *)a2 - 1) = 0;
      *(_OWORD *)(a4 + 88) = *(_OWORD *)a1;
      *(void *)(a4 + 112) = 0;
      *(void *)(a4 + 120) = 0;
      *(void *)(a4 + 104) = 0;
      *(_OWORD *)(a4 + 104) = *(_OWORD *)(a1 + 16);
      *(void *)(a4 + 120) = *(void *)(a1 + 32);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a4 + 128) = 0;
      *(void *)(a4 + 136) = 0;
      *(void *)(a4 + 144) = 0;
      *(_OWORD *)(a4 + 128) = *(_OWORD *)(a1 + 40);
      *(void *)(a4 + 144) = *(void *)(a1 + 56);
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a4 + 168) = 0;
      uint64_t v8 = (__n128 *)(a4 + 168);
LABEL_7:
      v8[-1].n128_u64[0] = 0;
      v8[-1].n128_u64[1] = 0;
      uint64_t v13 = (char *)(a1 + 64);
      __n128 result = *(__n128 *)(a1 + 64);
      v8[-1] = result;
      uint64_t v15 = (unint64_t *)(a1 + 80);
LABEL_23:
      v8->n128_u64[0] = *v15;
      *(void *)uint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
      return result;
    }
    if (a3 == 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(void *)(a4 + 24) = 0;
      *(void *)(a4 + 32) = 0;
      *(void *)(a4 + 16) = 0;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
      *(void *)(a4 + 32) = *(void *)(a1 + 32);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
      *(void *)(a4 + 56) = 0;
      *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
      *(void *)(a4 + 56) = *(void *)(a1 + 56);
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a4 + 80) = 0;
      uint64_t v8 = (__n128 *)(a4 + 80);
      goto LABEL_7;
    }
    if ((uint64_t)a3 > 8)
    {
      uint64_t v27 = 88 * (a3 >> 1);
      uint64_t v28 = (void *)(a1 + v27);
      std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(a1, a1 + v27, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>((char *)v7 + v27, a2, a3 - (a3 >> 1), a4 + v27, a3 - (a3 >> 1));
      uint64_t v29 = (void *)(a4 + 80);
      std::string v30 = (char *)v7 + v27;
      while (v30 != a2)
      {
        std::vector<std::string> v31 = v29 - 10;
        unint64_t v32 = v29 - 8;
        std::string v33 = v29 - 5;
        std::vector<std::string> v34 = v29 - 2;
        if (*((double *)v30 + 1) >= *((double *)v7 + 1))
        {
          *std::vector<std::string> v31 = *v7;
          *(v29 - 7) = 0;
          *(v29 - 6) = 0;
          *unint64_t v32 = 0;
          *((_OWORD *)v29 - 4) = v7[1];
          *(v29 - 6) = *((void *)v7 + 4);
          *((void *)v7 + 2) = 0;
          *((void *)v7 + 3) = 0;
          *((void *)v7 + 4) = 0;
          void *v33 = 0;
          *(v29 - 4) = 0;
          *(v29 - 3) = 0;
          *(_OWORD *)(v29 - 5) = *(_OWORD *)((char *)v7 + 40);
          *(v29 - 3) = *((void *)v7 + 7);
          *((void *)v7 + 5) = 0;
          *((void *)v7 + 6) = 0;
          *((void *)v7 + 7) = 0;
          void *v34 = 0;
          *(v29 - 1) = 0;
          *uint64_t v29 = 0;
          __n128 result = *((__n128 *)v7 + 4);
          *((__n128 *)v29 - 1) = result;
          *uint64_t v29 = *((void *)v7 + 10);
          *((void *)v7 + 8) = 0;
          *((void *)v7 + 9) = 0;
          *((void *)v7 + 10) = 0;
          uint64_t v7 = (_OWORD *)((char *)v7 + 88);
        }
        else
        {
          *std::vector<std::string> v31 = *(_OWORD *)v30;
          *(v29 - 7) = 0;
          *(v29 - 6) = 0;
          *unint64_t v32 = 0;
          *((_OWORD *)v29 - 4) = *((_OWORD *)v30 + 1);
          *(v29 - 6) = *((void *)v30 + 4);
          *((void *)v30 + 2) = 0;
          *((void *)v30 + 3) = 0;
          *((void *)v30 + 4) = 0;
          void *v33 = 0;
          *(v29 - 4) = 0;
          *(v29 - 3) = 0;
          *(_OWORD *)(v29 - 5) = *(_OWORD *)(v30 + 40);
          *(v29 - 3) = *((void *)v30 + 7);
          *((void *)v30 + 5) = 0;
          *((void *)v30 + 6) = 0;
          *((void *)v30 + 7) = 0;
          void *v34 = 0;
          *(v29 - 1) = 0;
          *uint64_t v29 = 0;
          __n128 result = *((__n128 *)v30 + 4);
          *((__n128 *)v29 - 1) = result;
          *uint64_t v29 = *((void *)v30 + 10);
          *((void *)v30 + 8) = 0;
          *((void *)v30 + 9) = 0;
          *((void *)v30 + 10) = 0;
          v30 += 88;
        }
        v29 += 11;
        if (v7 == (_OWORD *)v28)
        {
          if (v30 != a2)
          {
            unint64_t v35 = 0;
            do
            {
              long long v36 = &v30[v35];
              long long v37 = &v29[v35 / 8];
              long long v38 = *(_OWORD *)&v30[v35];
              *(v37 - 7) = 0;
              *(v37 - 6) = 0;
              *(v37 - 8) = 0;
              *((_OWORD *)v37 - 5) = v38;
              *((_OWORD *)v37 - 4) = *(_OWORD *)&v30[v35 + 16];
              *(v37 - 6) = *(void *)&v30[v35 + 32];
              *((void *)v36 + 2) = 0;
              *((void *)v36 + 3) = 0;
              *((void *)v36 + 4) = 0;
              *(v37 - 5) = 0;
              *(v37 - 4) = 0;
              *(v37 - 3) = 0;
              *(_OWORD *)(v37 - 5) = *(_OWORD *)&v30[v35 + 40];
              *(v37 - 3) = *(void *)&v30[v35 + 56];
              *((void *)v36 + 5) = 0;
              *((void *)v36 + 6) = 0;
              *((void *)v36 + 7) = 0;
              *(v37 - 2) = 0;
              *(v37 - 1) = 0;
              *long long v37 = 0;
              __n128 result = *(__n128 *)&v30[v35 + 64];
              *((__n128 *)v37 - 1) = result;
              *long long v37 = *(void *)&v30[v35 + 80];
              *((void *)v36 + 8) = 0;
              *((void *)v36 + 9) = 0;
              *((void *)v36 + 10) = 0;
              v35 += 88;
            }
            while (v36 + 88 != a2);
          }
          return result;
        }
      }
      if (v7 != (_OWORD *)v28)
      {
        unint64_t v39 = 0;
        do
        {
          uint64_t v40 = &v29[v39 / 8];
          long long v41 = (void *)((char *)v7 + v39);
          long long v42 = *(_OWORD *)((char *)v7 + v39);
          *(v40 - 7) = 0;
          *(v40 - 6) = 0;
          *(v40 - 8) = 0;
          *((_OWORD *)v40 - 5) = v42;
          *((_OWORD *)v40 - 4) = *(_OWORD *)((char *)v7 + v39 + 16);
          *(v40 - 6) = *(void *)((char *)v7 + v39 + 32);
          v41[2] = 0;
          v41[3] = 0;
          v41[4] = 0;
          *(v40 - 5) = 0;
          *(v40 - 4) = 0;
          *(v40 - 3) = 0;
          *(_OWORD *)(v40 - 5) = *(_OWORD *)((char *)v7 + v39 + 40);
          *(v40 - 3) = *(void *)((char *)v7 + v39 + 56);
          v41[5] = 0;
          v41[6] = 0;
          v41[7] = 0;
          *(v40 - 2) = 0;
          *(v40 - 1) = 0;
          *uint64_t v40 = 0;
          __n128 result = *(__n128 *)((char *)v7 + v39 + 64);
          *((__n128 *)v40 - 1) = result;
          *uint64_t v40 = *(void *)((char *)v7 + v39 + 80);
          v41[8] = 0;
          v41[9] = 0;
          v41[10] = 0;
          v39 += 88;
        }
        while (v41 + 11 != v28);
      }
    }
    else if ((char *)a1 != a2)
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(void *)(a4 + 24) = 0;
      *(void *)(a4 + 32) = 0;
      *(void *)(a4 + 16) = 0;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
      *(void *)(a4 + 32) = *(void *)(a1 + 32);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
      *(void *)(a4 + 56) = 0;
      *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
      *(void *)(a4 + 56) = *(void *)(a1 + 56);
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a4 + 64) = 0;
      *(void *)(a4 + 72) = 0;
      *(void *)(a4 + 80) = 0;
      __n128 result = *(__n128 *)(a1 + 64);
      *(__n128 *)(a4 + 64) = result;
      *(void *)(a4 + 80) = *(void *)(a1 + 80);
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      *(void *)(a1 + 80) = 0;
      uint64_t v16 = (_OWORD *)(a1 + 88);
      if ((char *)(a1 + 88) != a2)
      {
        uint64_t v17 = 0;
        long long v18 = (_OWORD *)a4;
        do
        {
          uint64_t v19 = v16;
          uint64_t v20 = (_OWORD *)((char *)v18 + 88);
          if (*((double *)v7 + 12) >= *((double *)v18 + 1))
          {
            *uint64_t v20 = *v16;
            *((void *)v18 + 14) = 0;
            *((void *)v18 + 15) = 0;
            *((void *)v18 + 13) = 0;
            *(_OWORD *)((char *)v18 + 104) = *(_OWORD *)((char *)v7 + 104);
            *((void *)v18 + 15) = *((void *)v7 + 15);
            *((void *)v7 + 13) = 0;
            *((void *)v7 + 14) = 0;
            *((void *)v7 + 15) = 0;
            *((void *)v18 + 16) = 0;
            *((void *)v18 + 17) = 0;
            *((void *)v18 + 18) = 0;
            v18[8] = v7[8];
            *((void *)v18 + 18) = *((void *)v7 + 18);
            *((void *)v7 + 16) = 0;
            *((void *)v7 + 17) = 0;
            *((void *)v7 + 18) = 0;
            *((void *)v18 + 19) = 0;
            *((void *)v18 + 20) = 0;
            *((void *)v18 + 21) = 0;
            long long v26 = *(_OWORD *)((char *)v7 + 152);
            unint64_t v24 = (void *)v7 + 19;
            result.n128_u64[0] = v26;
            *(_OWORD *)((char *)v18 + 152) = v26;
            *((void *)v18 + 21) = v24[2];
          }
          else
          {
            long long v21 = v18[1];
            *uint64_t v20 = *v18;
            *(_OWORD *)((char *)v18 + 104) = v21;
            *((void *)v18 + 15) = *((void *)v18 + 4);
            *((void *)v18 + 2) = 0;
            *((void *)v18 + 3) = 0;
            v18[8] = *(_OWORD *)((char *)v18 + 40);
            *((void *)v18 + 18) = *((void *)v18 + 7);
            *((void *)v18 + 4) = 0;
            *((void *)v18 + 5) = 0;
            *((void *)v18 + 6) = 0;
            *((void *)v18 + 7) = 0;
            *(_OWORD *)((char *)v18 + 152) = v18[4];
            *((void *)v18 + 21) = *((void *)v18 + 10);
            *((void *)v18 + 8) = 0;
            *((void *)v18 + 9) = 0;
            uint64_t v22 = a4;
            *((void *)v18 + 10) = 0;
            if (v18 != (_OWORD *)a4)
            {
              uint64_t v23 = v17;
              while (1)
              {
                uint64_t v22 = a4 + v23;
                if (*((double *)v7 + 12) >= *(double *)(a4 + v23 - 80)) {
                  break;
                }
                *(_OWORD *)uint64_t v22 = *(_OWORD *)(v22 - 88);
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v22 + 16));
                *(_OWORD *)(v22 + 16) = *(_OWORD *)(v22 - 72);
                *(void *)(v22 + 32) = *(void *)(v22 - 56);
                *(void *)(v22 - 64) = 0;
                *(void *)(v22 - 56) = 0;
                *(void *)(v22 - 72) = 0;
                std::vector<int>::__move_assign(v22 + 40, (__n128 *)(v22 - 48));
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v22 + 64));
                *(_OWORD *)(v22 + 64) = *(_OWORD *)(v22 - 24);
                *(void *)(v22 + 80) = *(void *)(v22 - 8);
                *(void *)(v22 - 16) = 0;
                *(void *)(v22 - 8) = 0;
                *(void *)(v22 - 24) = 0;
                v23 -= 88;
                if (!v23)
                {
                  uint64_t v22 = a4;
                  break;
                }
              }
            }
            *(_OWORD *)uint64_t v22 = *v19;
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v22 + 16));
            *(_OWORD *)(v22 + 16) = *(_OWORD *)((char *)v7 + 104);
            *(void *)(v22 + 32) = *((void *)v7 + 15);
            *((void *)v7 + 13) = 0;
            *((void *)v7 + 14) = 0;
            *((void *)v7 + 15) = 0;
            std::vector<int>::__move_assign(v22 + 40, (__n128 *)v7 + 8);
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v22 + 64));
            long long v25 = *(_OWORD *)((char *)v7 + 152);
            unint64_t v24 = (void *)v7 + 19;
            result.n128_u64[0] = v25;
            *(_OWORD *)(v22 + 64) = v25;
            *(void *)(v22 + 80) = v24[2];
          }
          uint64_t v16 = (_OWORD *)((char *)v19 + 88);
          *unint64_t v24 = 0;
          v24[1] = 0;
          void v24[2] = 0;
          v17 += 88;
          long long v18 = v20;
          uint64_t v7 = v19;
        }
        while ((char *)v19 + 88 != a2);
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a5) {
    return;
  }
  uint64_t v8 = a5;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4) {
      return;
    }
    uint64_t v12 = 0;
    uint64_t v13 = -a4;
    while (1)
    {
      uint64_t v14 = a1 + v12;
      if (*(double *)(a2 + 8) < *(double *)(a1 + v12 + 8)) {
        break;
      }
      v12 += 88;
      if (__CFADD__(v13++, 1)) {
        return;
      }
    }
    uint64_t v16 = -v13;
    uint64_t v65 = a3;
    uint64_t v66 = a6;
    if (-v13 >= v8)
    {
      if (v13 == -1)
      {
        std::swap[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>((std::vector<std::wstring> *)(a1 + v12), a2);
        return;
      }
      if (v13 > 0) {
        uint64_t v16 = 1 - v13;
      }
      uint64_t v26 = v16 >> 1;
      uint64_t v25 = a2;
      if (a2 != a3)
      {
        unint64_t v27 = 0x2E8BA2E8BA2E8BA3 * ((a3 - a2) >> 3);
        uint64_t v25 = a2;
        do
        {
          unint64_t v28 = v27 >> 1;
          unint64_t v29 = v25 + 88 * (v27 >> 1);
          double v30 = *(double *)(v29 + 8);
          uint64_t v31 = v29 + 88;
          v27 += ~(v27 >> 1);
          if (v30 < *(double *)(a1 + 88 * v26 + v12 + 8)) {
            uint64_t v25 = v31;
          }
          else {
            unint64_t v27 = v28;
          }
        }
        while (v27);
      }
      uint64_t v19 = (std::vector<std::wstring> *)(a1 + 88 * v26 + v12);
      uint64_t v18 = 0x2E8BA2E8BA2E8BA3 * ((v25 - a2) >> 3);
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v17 = v8;
      }
      else {
        uint64_t v17 = v8 + 1;
      }
      uint64_t v18 = v17 >> 1;
      uint64_t v19 = (std::vector<std::wstring> *)a2;
      if (a2 - a1 != v12)
      {
        unint64_t v20 = 0x2E8BA2E8BA2E8BA3 * ((a2 - a1 - v12) >> 3);
        uint64_t v19 = (std::vector<std::wstring> *)(a1 + v12);
        do
        {
          unint64_t v21 = v20 >> 1;
          uint64_t v22 = (char *)v19 + 88 * (v20 >> 1);
          double v23 = *((double *)v22 + 1);
          unint64_t v24 = (std::vector<std::wstring> *)(v22 + 88);
          v20 += ~(v20 >> 1);
          if (*(double *)(a2 + 88 * v18 + 8) < v23) {
            unint64_t v20 = v21;
          }
          else {
            uint64_t v19 = v24;
          }
        }
        while (v20);
      }
      uint64_t v25 = a2 + 88 * v18;
      uint64_t v26 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v19 - a1 - v12) >> 3);
    }
    if (v19 == (std::vector<std::wstring> *)a2)
    {
      uint64_t v36 = v25;
    }
    else if (v25 == a2)
    {
      uint64_t v36 = (uint64_t)v19;
    }
    else
    {
      uint64_t v32 = a7;
      uint64_t v33 = v26;
      uint64_t v34 = v18;
      unint64_t v35 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(v19, a2, v25);
      uint64_t v18 = v34;
      uint64_t v26 = v33;
      a7 = v32;
      uint64_t v36 = (uint64_t)v35;
    }
    a4 = -(v26 + v13);
    uint64_t v37 = v8 - v18;
    if (v26 + v18 >= v8 - (v26 + v18) - v13)
    {
      uint64_t v40 = v25;
      a6 = v66;
      uint64_t v41 = v26;
      uint64_t v42 = v18;
      uint64_t v39 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(v36, v40, v65, -(v26 + v13), v37, v66);
      a2 = (uint64_t)v19;
      uint64_t v37 = v42;
      a4 = v41;
      a3 = v36;
    }
    else
    {
      uint64_t v38 = a1 + v12;
      uint64_t v39 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(v38, v19, v36, v26, v18, v66);
      uint64_t v14 = v36;
      a2 = v25;
      a6 = v66;
      a3 = v65;
    }
    uint64_t v8 = v37;
    a1 = v14;
    a7 = v39;
    if (!v37) {
      return;
    }
  }
  if (a4 <= v8)
  {
    if (a1 != a2)
    {
      uint64_t v56 = 0;
      unint64_t v57 = 0;
      do
      {
        float v58 = (void *)(a1 + v56);
        uint64_t v59 = a6 + v56;
        *(_OWORD *)uint64_t v59 = *(_OWORD *)(a1 + v56);
        *(void *)(v59 + 24) = 0;
        *(void *)(v59 + 32) = 0;
        *(void *)(v59 + 16) = 0;
        *(_OWORD *)(v59 + 16) = *(_OWORD *)(a1 + v56 + 16);
        *(void *)(v59 + 32) = *(void *)(a1 + v56 + 32);
        v58[2] = 0;
        v58[3] = 0;
        v58[4] = 0;
        *(void *)(v59 + 40) = 0;
        *(void *)(v59 + 48) = 0;
        *(void *)(v59 + 56) = 0;
        *(_OWORD *)(v59 + 40) = *(_OWORD *)(a1 + v56 + 40);
        *(void *)(v59 + 56) = *(void *)(a1 + v56 + 56);
        v58[5] = 0;
        void v58[6] = 0;
        v58[7] = 0;
        *(void *)(v59 + 64) = 0;
        *(void *)(v59 + 72) = 0;
        *(void *)(v59 + 80) = 0;
        *(_OWORD *)(v59 + 64) = *(_OWORD *)(a1 + v56 + 64);
        *(void *)(v59 + 80) = *(void *)(a1 + v56 + 80);
        v58[8] = 0;
        v58[9] = 0;
        v58[10] = 0;
        ++v57;
        v56 += 88;
      }
      while (v58 + 11 != (void *)a2);
      unint64_t v67 = v57;
      if (v56)
      {
        uint64_t v60 = a6 + v56;
        uint64_t v61 = a6;
        while (a2 != a3)
        {
          unsigned int v62 = (std::vector<std::wstring> *)(a1 + 16);
          if (*(double *)(a2 + 8) >= *(double *)(v61 + 8))
          {
            *(_OWORD *)a1 = *(_OWORD *)v61;
            uint64_t v64 = a2;
            std::vector<std::string>::__vdeallocate(v62);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v61 + 16);
            *(void *)(a1 + 32) = *(void *)(v61 + 32);
            *(void *)(v61 + 16) = 0;
            *(void *)(v61 + 24) = 0;
            *(void *)(v61 + 32) = 0;
            std::vector<int>::__move_assign(a1 + 40, (__n128 *)(v61 + 40));
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 64));
            a2 = v64;
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v61 + 64);
            *(void *)(a1 + 80) = *(void *)(v61 + 80);
            *(void *)(v61 + 64) = 0;
            *(void *)(v61 + 72) = 0;
            *(void *)(v61 + 80) = 0;
            v61 += 88;
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
            uint64_t v63 = a2;
            std::vector<std::string>::__vdeallocate(v62);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v63 + 16);
            *(void *)(a1 + 32) = *(void *)(v63 + 32);
            *(void *)(v63 + 16) = 0;
            *(void *)(v63 + 24) = 0;
            *(void *)(v63 + 32) = 0;
            std::vector<int>::__move_assign(a1 + 40, (__n128 *)(v63 + 40));
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 64));
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v63 + 64);
            *(void *)(a1 + 80) = *(void *)(v63 + 80);
            *(void *)(v63 + 64) = 0;
            *(void *)(v63 + 72) = 0;
            *(void *)(v63 + 80) = 0;
            a2 = v63 + 88;
          }
          a1 += 88;
          if (v60 == v61) {
            goto LABEL_79;
          }
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path *,quasar::corrective_reranking::VoiceEditingWFST::Path *,quasar::corrective_reranking::VoiceEditingWFST::Path *>((uint64_t)v68, v61, v60, a1);
      }
      goto LABEL_79;
    }
  }
  else if (a3 != a2)
  {
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    do
    {
      long long v45 = (void *)(a2 + v43);
      uint64_t v46 = a6 + v43;
      *(_OWORD *)uint64_t v46 = *(_OWORD *)(a2 + v43);
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0;
      *(void *)(v46 + 16) = 0;
      *(_OWORD *)(v46 + 16) = *(_OWORD *)(a2 + v43 + 16);
      *(void *)(v46 + 32) = *(void *)(a2 + v43 + 32);
      v45[2] = 0;
      v45[3] = 0;
      void v45[4] = 0;
      *(void *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_OWORD *)(v46 + 40) = *(_OWORD *)(a2 + v43 + 40);
      *(void *)(v46 + 56) = *(void *)(a2 + v43 + 56);
      v45[5] = 0;
      v45[6] = 0;
      v45[7] = 0;
      *(void *)(v46 + 64) = 0;
      *(void *)(v46 + 72) = 0;
      *(void *)(v46 + 80) = 0;
      *(_OWORD *)(v46 + 64) = *(_OWORD *)(a2 + v43 + 64);
      *(void *)(v46 + 80) = *(void *)(a2 + v43 + 80);
      v45[8] = 0;
      v45[9] = 0;
      v45[10] = 0;
      ++v44;
      v43 += 88;
    }
    while (v45 + 11 != (void *)a3);
    unint64_t v67 = v44;
    if (v43)
    {
      uint64_t v47 = a6 + v43;
      long long v48 = (std::vector<std::wstring> *)(a3 - 24);
      uint64_t v49 = a3;
      uint64_t v50 = a6 + v43;
      while (a2 != a1)
      {
        double v51 = *(double *)(v50 - 80);
        double v52 = *(double *)(a2 - 80);
        if (v51 < v52) {
          int v53 = (_OWORD *)(a2 - 88);
        }
        else {
          int v53 = (_OWORD *)(v50 - 88);
        }
        if (v51 < v52) {
          uint64_t v54 = a2;
        }
        else {
          uint64_t v54 = v50;
        }
        if (v51 < v52) {
          uint64_t v55 = a2 - 88;
        }
        else {
          uint64_t v55 = a2;
        }
        if (v51 >= v52) {
          v50 -= 88;
        }
        *(_OWORD *)&v48[-3].__end_ = *v53;
        std::vector<std::string>::__vdeallocate(v48 - 2);
        *(_OWORD *)&v48[-2].__begin_ = *(_OWORD *)(v54 - 72);
        v48[-2].__end_cap_.__value_ = *(std::wstring **)(v54 - 56);
        *(void *)(v54 - 72) = 0;
        *(void *)(v54 - 64) = 0;
        *(void *)(v54 - 56) = 0;
        std::vector<int>::__move_assign((uint64_t)&v48[-1], (__n128 *)(v54 - 48));
        std::vector<std::string>::__vdeallocate(v48);
        a2 = v55;
        *(_OWORD *)&v48->__begin_ = *(_OWORD *)(v54 - 24);
        v48->__end_cap_.__value_ = *(std::wstring **)(v54 - 8);
        *(void *)(v54 - 24) = 0;
        *(void *)(v54 - 16) = 0;
        *(void *)(v54 - 8) = 0;
        v49 -= 88;
        long long v48 = (std::vector<std::wstring> *)((char *)v48 - 88);
        if (v50 == a6) {
          goto LABEL_79;
        }
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path *>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path *>,std::reverse_iterator<std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>>(v47, v50, a6, a3, v49, v68);
    }
    goto LABEL_79;
  }
  unint64_t v67 = 0;
LABEL_79:
  if (a6) {
    std::__destruct_n::__process[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(&v67, a6);
  }
}

void sub_1B1D10984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (v11) {
    std::__destruct_n::__process[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(&a11, v11);
  }
  _Unwind_Resume(exception_object);
}

void std::swap[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(std::vector<std::wstring> *this, uint64_t a2)
{
  long long v20 = *(_OWORD *)&this->__begin_;
  std::vector<std::wstring>::pointer end = this[1].__end_;
  p_end_cap = &this->__end_cap_;
  long long v13 = *(_OWORD *)&this->__end_cap_.__value_;
  uint64_t v5 = (__n128 *)(a2 + 40);
  this[1].__begin_ = 0;
  this[1].__end_ = 0;
  this->__end_cap_.__value_ = 0;
  uint64_t v6 = &this[1].__end_cap_;
  std::vector<std::wstring>::pointer begin = this[2].__begin_;
  std::vector<std::wstring>::pointer v8 = this[2].__end_;
  value = this[1].__end_cap_.__value_;
  std::string __p = value;
  double v23 = begin;
  std::vector<std::wstring>::pointer v16 = begin;
  this[1].__end_cap_.__value_ = 0;
  char v10 = (std::vector<std::wstring> *)((char *)this + 64);
  uint64_t v9 = this[2].__end_cap_.__value_;
  this[2].__begin_ = 0;
  this[2].__end_ = 0;
  std::vector<std::wstring>::pointer v24 = v8;
  uint64_t v25 = v9;
  uint64_t v19 = v9;
  std::vector<std::wstring>::pointer v11 = this[3].__end_;
  std::vector<std::wstring>::pointer v17 = this[3].__begin_;
  std::vector<std::wstring>::pointer v26 = v17;
  std::vector<std::wstring>::pointer v27 = v11;
  std::vector<std::wstring>::pointer v15 = v11;
  this[2].__end_cap_.__value_ = 0;
  this[3].__begin_ = 0;
  this[3].__end_ = 0;
  *(_OWORD *)&this->__begin_ = *(_OWORD *)a2;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&this->__end_cap_);
  *(_OWORD *)&p_end_cap->__value_ = *(_OWORD *)(a2 + 16);
  this[1].__end_ = *(std::vector<std::wstring>::pointer *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  std::vector<int>::__move_assign((uint64_t)v6, v5);
  std::vector<std::string>::__vdeallocate(v10);
  *(_OWORD *)&v10->__begin_ = *(_OWORD *)(a2 + 64);
  this[3].__end_ = *(std::vector<std::wstring>::pointer *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)a2 = v20;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a2 + 16));
  *(_OWORD *)(a2 + 16) = v13;
  *(void *)(a2 + 32) = end;
  memset(v21, 0, sizeof(v21));
  uint64_t v12 = *(void **)(a2 + 40);
  if (v12)
  {
    *(void *)(a2 + 48) = v12;
    operator delete(v12);
  }
  *(void *)(a2 + 40) = value;
  *(void *)(a2 + 48) = v16;
  *(void *)(a2 + 56) = v8;
  double v23 = 0;
  std::vector<std::wstring>::pointer v24 = 0;
  std::string __p = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a2 + 64));
  *(void *)(a2 + 64) = v19;
  *(void *)(a2 + 72) = v17;
  *(void *)(a2 + 80) = v15;
  std::vector<std::wstring>::pointer v26 = 0;
  std::vector<std::wstring>::pointer v27 = 0;
  uint64_t v25 = 0;
  v28[0] = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v28);
  if (__p)
  {
    double v23 = __p;
    operator delete(__p);
  }
  v28[0] = v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v28);
}

void std::__destruct_n::__process[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(unint64_t *a1, uint64_t a2)
{
  if (*a1)
  {
    unint64_t v3 = 0;
    BOOL v4 = (void **)(a2 + 64);
    do
    {
      uint64_t v6 = v4;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      uint64_t v5 = *(v4 - 3);
      if (v5)
      {
        *(v4 - 2) = v5;
        operator delete(v5);
      }
      uint64_t v6 = v4 - 6;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      ++v3;
      v4 += 11;
    }
    while (v3 < *a1);
  }
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path *>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path *>,std::reverse_iterator<std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X8>)
{
  uint64_t v8 = a2;
  if (a2 != a3)
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8 + v12;
      uint64_t v14 = a5 + v12;
      *(_OWORD *)(a5 + v12 - 88) = *(_OWORD *)(v8 + v12 - 88);
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a5 + v12 - 72));
      *(_OWORD *)(v14 - 72) = *(_OWORD *)(v8 + v12 - 72);
      *(void *)(v14 - 56) = *(void *)(v8 + v12 - 56);
      *(void *)(v13 - 72) = 0;
      *(void *)(v13 - 64) = 0;
      *(void *)(v13 - 56) = 0;
      std::vector<int>::__move_assign(a5 + v12 - 48, (__n128 *)(v8 + v12 - 48));
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a5 + v12 - 24));
      *(_OWORD *)(v14 - 24) = *(_OWORD *)(v8 + v12 - 24);
      *(void *)(v14 - 8) = *(void *)(v8 + v12 - 8);
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 8) = 0;
      v12 -= 88;
    }
    while (v8 + v12 != a3);
    a5 += v12;
    uint64_t v8 = a3;
  }
  *a6 = a1;
  a6[1] = v8;
  a6[2] = a4;
  a6[3] = a5;
}

std::vector<std::wstring> *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(std::vector<std::wstring> *a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = (std::vector<std::wstring> *)a2;
  std::swap[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(a1, a2);
  uint64_t v6 = (std::vector<std::wstring> *)((char *)a1 + 88);
  for (uint64_t i = (uint64_t)&v4[3].__end_cap_; i != a3; i += 88)
  {
    if (v6 == v4) {
      BOOL v4 = (std::vector<std::wstring> *)i;
    }
    std::swap[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(v6, i);
    uint64_t v6 = (std::vector<std::wstring> *)((char *)v6 + 88);
  }
  if (v6 != v4)
  {
    uint64_t v8 = v6;
    uint64_t v9 = (uint64_t)v4;
    do
    {
      while (1)
      {
        std::swap[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(v8, v9);
        uint64_t v8 = (std::vector<std::wstring> *)((char *)v8 + 88);
        v9 += 88;
        if (v9 == a3) {
          break;
        }
        if (v8 == v4) {
          BOOL v4 = (std::vector<std::wstring> *)v9;
        }
      }
      uint64_t v9 = (uint64_t)v4;
    }
    while (v8 != v4);
  }
  return v6;
}

uint64_t parseProb(const char *a1, double *a2)
{
  uint64_t v4 = 0;
  uint64_t result = sscanf(a1, "%lf", &v4);
  if (result)
  {
    *(void *)a2 = v4;
    return 1;
  }
  return result;
}

BOOL parseLogP(const char *a1, double *a2)
{
  int v2 = *(unsigned __int8 *)a1;
  if (!*a1) {
    return 0;
  }
  BOOL v5 = v2 == 45 || v2 == 43;
  uint64_t v6 = v5;
  if (v5) {
    uint64_t v7 = a1 + 1;
  }
  else {
    uint64_t v7 = a1;
  }
  uint64_t v8 = *(unsigned __int8 *)v7;
  if (*v7 < 0) {
    goto LABEL_15;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::vector<std::wstring>::pointer v11 = &a1[v6 + 1];
  uint64_t v12 = *(unsigned __int8 *)v7;
  while ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v12 + 60) & 0x400) != 0)
  {
    uint64_t v10 = v12 + 10 * v10 - 48;
    int v13 = v11[v9];
    uint64_t v12 = v11[v9++];
    if (v13 < 0) {
      goto LABEL_15;
    }
  }
  if (v12 == 46)
  {
    std::vector<std::wstring>::pointer v16 = &a1[v6];
    if (v16[v9 + 1] < 0) {
      goto LABEL_15;
    }
    uint64_t v12 = v16[v9 + 1];
    std::vector<std::wstring>::pointer v17 = v16 + 2;
    unint64_t v18 = 1;
    while ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v12 + 60) & 0x400) != 0)
    {
      uint64_t v10 = v12 + 10 * v10 - 48;
      v18 *= 10;
      int v19 = v17[v9];
      uint64_t v12 = v17[v9++];
      if (v19 < 0) {
        goto LABEL_15;
      }
    }
  }
  else
  {
    unint64_t v18 = 1;
  }
  if (v12 || v9 > 8)
  {
LABEL_15:
    if (v8 != 105 && v8 != 73 && (v8 != 49 || v7[1] != 46 || v7[2] != 35)
      || strncmp(v7, "Inf", 3uLL) && strncmp(v7, "inf", 3uLL) && strncmp(v7, "1.#INF", 6uLL))
    {
      return sscanf(a1, "%lf", a2) == 1;
    }
    double v15 = INFINITY;
    if (v2 == 45) {
      double v15 = -INFINITY;
    }
    goto LABEL_40;
  }
  double v20 = (double)(unint64_t)v10;
  if (v2 == 45) {
    double v20 = -(double)(unint64_t)v10;
  }
  double v15 = v20 / (double)v18;
LABEL_40:
  *a2 = v15;
  return 1;
}

double PQCodebook::getProb(PQCodebook *this, unsigned int a2)
{
  if (*(_DWORD *)this <= a2) {
    return INFINITY;
  }
  else {
    return *(double *)Array<double>::operator[]((int *)this + 2, a2);
  }
}

void *quasar::ProcessingGraph::ProcessingGraph(void *a1, void *a2)
{
  a1[2] = 0;
  a1[1] = a1 + 2;
  *a1 = &unk_1F0A53180;
  a1[3] = 0;
  uint64_t v3 = a2[1];
  a1[4] = *a2;
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  quasar::ProcessingGraph::registerBlockType<quasar::MergerBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::NullBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::PDecTranslatorBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::PDecPhraseBookBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::AlternativesProcessorBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::AlignmentProcessorBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::DoNotTranslateBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::AmbiguityAnnotatorBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::SimpleTokenizerBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::PhraseBookBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::InputHammerBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::RomanizerBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::SentencePieceBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::QualityEstimatorBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::PDecForceAlignBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::FilterBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::SelectBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::CaseMapBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::GenderVerifierBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::PlaceholderBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::DumpBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::StructuredPredictionBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::LinkAlternativesBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::TokenizerBlock>((uint64_t)a1);
  return a1;
}

void sub_1B1D11124(_Unwind_Exception *a1)
{
  BOOL v5 = *(std::__shared_weak_count **)(v2 + 40);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__tree<std::string>::destroy(v1, *v3);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::registerBlockType<quasar::MergerBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "MergerBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::MergerBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D111C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::NullBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "NullBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::NullBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D1125C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::PDecTranslatorBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "PDecTranslatorBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::PDecTranslatorBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D112F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::PDecPhraseBookBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "PDecPhraseBookBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::PDecPhraseBookBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D1138C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::AlternativesProcessorBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "AlternativesProcessorBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::AlternativesProcessorBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D11424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::AlignmentProcessorBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "AlignmentProcessorBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::AlignmentProcessorBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D114BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::DoNotTranslateBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "DoNotTranslateBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::DoNotTranslateBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D11554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::AmbiguityAnnotatorBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "AmbiguityAnnotatorBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::AmbiguityAnnotatorBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D115EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::SimpleTokenizerBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "SimpleTokenizerBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::SimpleTokenizerBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D11684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::PhraseBookBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "PhraseBookBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::PhraseBookBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D1171C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::InputHammerBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "InputHammerBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::InputHammerBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D117B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::RomanizerBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "RomanizerBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::RomanizerBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D1184C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::SentencePieceBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "SentencePieceBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::SentencePieceBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D118E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::QualityEstimatorBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "QualityEstimatorBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::QualityEstimatorBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D1197C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::PDecForceAlignBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "PDecForceAlignBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::PDecForceAlignBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D11A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::FilterBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilterBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::FilterBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D11AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::SelectBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "SelectBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::SelectBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D11B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::CaseMapBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "CaseMapBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::CaseMapBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D11BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::GenderVerifierBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "GenderVerifierBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::GenderVerifierBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D11C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::PlaceholderBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "PlaceholderBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::PlaceholderBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D11D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::DumpBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "DumpBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::DumpBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D11DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::StructuredPredictionBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "StructuredPredictionBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::StructuredPredictionBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D11E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::LinkAlternativesBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "LinkAlternativesBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::LinkAlternativesBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D11ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::TokenizerBlock>(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "TokenizerBlock");
  uint64_t v4 = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::TokenizerBlock>;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D11F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

quasar::ProcessingGraph *quasar::ProcessingGraph::ProcessingGraph(quasar::ProcessingGraph *this)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1F0A5FF78;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  v4[0] = v2 + 24;
  v4[1] = v2;
  quasar::ProcessingGraph::ProcessingGraph(this, v4);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v2);
  return this;
}

void sub_1B1D12008(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::~ProcessingGraph(quasar::ProcessingGraph *this)
{
  *(void *)this = &unk_1F0A53180;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::string>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

void quasar::ProcessingGraph::createBlock(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  if (!std::__tree<std::string>::__count_unique<std::string>(a1 + 8, a2))
  {
    memset(v17, 0, sizeof(v17));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ProcessingGraph: Unknown blocktype '", 36);
    int v11 = *((char *)a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (uint64_t)a2;
    }
    else {
      uint64_t v12 = (uint64_t)*a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v13 = (uint64_t)a2[1];
    }
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "', did you forget to call 'registerBlockType'?");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v17);
  }
  *(void *)&v17[0] = a2;
  uint64_t v7 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)v17);
  ((void (*)(void))v7[7])();
  uint64_t v8 = *a3;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 32);
  std::vector<std::wstring>::pointer v16 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, &v15);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_1B1D121CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  quasar::ProcessingGraph::createBlock(v10);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::run(void *a1, uint64_t *a2, long long *a3)
{
  LOBYTE(v5) = 0;
  char v7 = 0;
  if (*((unsigned char *)a3 + 24))
  {
    long long v5 = *a3;
    uint64_t v6 = *((void *)a3 + 2);
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
    char v7 = 1;
  }
  memset(v4, 0, sizeof(v4));
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v4, *a2, a2[1], 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 3));
  quasar::ProcessingGraph::contextWrapper<&quasar::ProcessingGraph::runInternal,quasar::ProcessingBlock::ValueType>(a1, (uint64_t)&v5, (uint64_t)v4);
  uint64_t v8 = (void **)v4;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v7)
  {
    uint64_t v8 = (void **)&v5;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
}

void sub_1B1D122C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  *(void *)(v17 - 40) = v16;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  if (a16)
  {
    *(void *)(v17 - 40) = &a13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  }
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::contextWrapper<&quasar::ProcessingGraph::runInternal,quasar::ProcessingBlock::ValueType>(void *a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a2 + 24) || (uint64_t v6 = *(long long **)a2, v7 = *(long long **)(a2 + 8), v6 == v7))
  {
    uint64_t v8 = 0;
  }
  else
  {
    memset(&v11, 0, sizeof(v11));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
    uint64_t v8 = (std::string *)operator new(0x30uLL);
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A622E8;
    v8->__r_.__value_.__l.__size_ = 0;
    v8[1] = v11;
    memset(&v11, 0, sizeof(v11));
    uint64_t v12 = &v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
    uint64_t v9 = (void *)a1[4];
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v8->__r_.__value_.__r.__words[2], 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v8->__r_.__value_.__r.__words[2], 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)v9[1];
    *uint64_t v9 = v8 + 1;
    v9[1] = v8;
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
  }
  (*(void (**)(void *, uint64_t))(*a1 + 32))(a1, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
  }
}

void sub_1B1D1243C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::run(void *a1, const void ***a2, long long *a3)
{
  LOBYTE(v5) = 0;
  char v7 = 0;
  if (*((unsigned char *)a3 + 24))
  {
    long long v5 = *a3;
    uint64_t v6 = *((void *)a3 + 2);
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
    char v7 = 1;
  }
  std::map<std::string,quasar::ProcessingBlock::ValueType>::map[abi:ne180100](v4, a2);
  quasar::ProcessingGraph::contextWrapper<&quasar::ProcessingGraph::runInternal,std::map<std::string,quasar::ProcessingBlock::ValueType>>(a1, (uint64_t)&v5, (uint64_t)v4);
  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy((uint64_t)v4, (void *)v4[1]);
  if (v7)
  {
    uint64_t v8 = (void **)&v5;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
}

void sub_1B1D12510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy((uint64_t)&a10, a11);
  if (a16)
  {
    *(void *)(v16 - 24) = &a13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 24));
  }
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::contextWrapper<&quasar::ProcessingGraph::runInternal,std::map<std::string,quasar::ProcessingBlock::ValueType>>(void *a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a2 + 24) || (uint64_t v6 = *(long long **)a2, v7 = *(long long **)(a2 + 8), v6 == v7))
  {
    uint64_t v8 = 0;
  }
  else
  {
    memset(&v11, 0, sizeof(v11));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
    uint64_t v8 = (std::string *)operator new(0x30uLL);
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A622E8;
    v8->__r_.__value_.__l.__size_ = 0;
    v8[1] = v11;
    memset(&v11, 0, sizeof(v11));
    uint64_t v12 = &v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
    uint64_t v9 = (void *)a1[4];
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v8->__r_.__value_.__r.__words[2], 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v8->__r_.__value_.__r.__words[2], 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)v9[1];
    *uint64_t v9 = v8 + 1;
    v9[1] = v8;
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
  }
  (*(void (**)(void *, uint64_t))(*a1 + 40))(a1, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
  }
}

void sub_1B1D1268C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void quasar::LinearProcessingGraph::runInternal()
{
}

void sub_1B1D12A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  MEMORY[0x1B3EA8670](v22, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t quasar::LinearProcessingGraph::appendBlock(uint64_t *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  quasar::ProcessingGraph::createBlock((uint64_t)a1, (const void **)&__p.__r_.__value_.__l.__data_, &v18);
  unint64_t v3 = a1[8];
  uint64_t v4 = (uint64_t *)a1[7];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v7 = a1[6];
    uint64_t v8 = ((uint64_t)v4 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v3 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    void v19[4] = a1 + 8;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 8), v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (uint64_t *)&v12[8 * v8];
    v19[0] = v12;
    v19[1] = v13;
    v19[3] = &v12[8 * v11];
    uint64_t v14 = v18;
    uint64_t v18 = 0;
    *uint64_t v13 = v14;
    _DWORD v19[2] = v13 + 1;
    std::vector<std::unique_ptr<quasar::ProcessingBlock>>::__swap_out_circular_buffer(a1 + 6, v19);
    uint64_t v6 = (void *)a1[7];
    std::__split_buffer<std::unique_ptr<quasar::ProcessingBlock>>::~__split_buffer(v19);
  }
  else
  {
    uint64_t v5 = v18;
    uint64_t v18 = 0;
    *uint64_t v4 = v5;
    uint64_t v6 = v4 + 1;
    a1[7] = (uint64_t)v6;
  }
  a1[7] = (uint64_t)v6;
  uint64_t v15 = v18;
  uint64_t v18 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return *(void *)(a1[7] - 8);
}

void sub_1B1D12C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::DirectedProcessingGraph::DirectedProcessingGraph(uint64_t a1, void *a2)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::ProcessingGraph::ProcessingGraph((void *)a1, v12);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_1F0A56930;
  uint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F0A60218;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *((void *)v4 + 4) = v4 + 40;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 9) = 0;
  v4[80] = 1;
  *((void *)v4 + 3) = &unk_1F0A53760;
  std::string::basic_string[abi:ne180100]<0>(__p, "graph-input");
  uint64_t v16 = v4 + 24;
  uint64_t v17 = v4;
  uint64_t v5 = (char *)operator new(0x70uLL);
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_1F0A5FDF0;
  *((void *)v5 + 1) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *((void *)v5 + 4) = v5 + 40;
  *((void *)v5 + 7) = 0;
  *((void *)v5 + 8) = 0;
  *((void *)v5 + 9) = 0;
  v5[80] = 1;
  *((void *)v5 + 3) = &unk_1F0A52A40;
  *((void *)v5 + 13) = 0;
  *((void *)v5 + 12) = 0;
  *((void *)v5 + 11) = v5 + 96;
  std::string::basic_string[abi:ne180100]<0>(v18, "graph-output");
  void v18[3] = v5 + 24;
  v19[0] = v5;
  std::map<std::string,std::shared_ptr<quasar::ProcessingBlock>>::map[abi:ne180100](a1 + 48, (const void **)__p, 2);
  for (uint64_t i = 0; i != -10; i -= 5)
  {
    uint64_t v7 = &__p[i];
    uint64_t v8 = (std::__shared_weak_count *)v19[i];
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (*((char *)v7 + 63) < 0) {
      operator delete(v7[5]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "graph-output");
  uint64_t v13 = __p;
  uint64_t v9 = *((void *)std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v13)+ 7);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 72) = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "graph-input");
  uint64_t v13 = __p;
  uint64_t v10 = *((void *)std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v13)+ 7);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 80) = v10;
  return a1;
}

void sub_1B1D12FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v20, *((void **)v19 + 7));
  quasar::ProcessingGraph::~ProcessingGraph(v19);
  _Unwind_Resume(a1);
}

void sub_1B1D13054()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x1B1D1304CLL);
}

uint64_t std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

quasar::DirectedProcessingGraph *quasar::DirectedProcessingGraph::DirectedProcessingGraph(quasar::DirectedProcessingGraph *this)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = quasar::ProcessingGraph::ProcessingGraph(this);
  *(void *)uint64_t v2 = &unk_1F0A56930;
  unint64_t v3 = (uint64_t **)((char *)v2 + 48);
  uint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F0A60218;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *((void *)v4 + 4) = v4 + 40;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 9) = 0;
  v4[80] = 1;
  *((void *)v4 + 3) = &unk_1F0A53760;
  std::string::basic_string[abi:ne180100]<0>(__p, "graph-input");
  char v15 = v4 + 24;
  uint64_t v16 = v4;
  uint64_t v5 = (char *)operator new(0x70uLL);
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_1F0A5FDF0;
  *((void *)v5 + 1) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *((void *)v5 + 4) = v5 + 40;
  *((void *)v5 + 7) = 0;
  *((void *)v5 + 8) = 0;
  *((void *)v5 + 9) = 0;
  v5[80] = 1;
  *((void *)v5 + 3) = &unk_1F0A52A40;
  *((void *)v5 + 13) = 0;
  *((void *)v5 + 12) = 0;
  *((void *)v5 + 11) = v5 + 96;
  std::string::basic_string[abi:ne180100]<0>(v17, "graph-output");
  void v17[3] = v5 + 24;
  v18[0] = v5;
  std::map<std::string,std::shared_ptr<quasar::ProcessingBlock>>::map[abi:ne180100]((uint64_t)v3, (const void **)__p, 2);
  for (uint64_t i = 0; i != -10; i -= 5)
  {
    uint64_t v7 = &__p[i];
    uint64_t v8 = (std::__shared_weak_count *)v18[i];
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (*((char *)v7 + 63) < 0) {
      operator delete(v7[5]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "graph-output");
  uint64_t v12 = __p;
  uint64_t v9 = *((void *)std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v12)+ 7);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  *((void *)this + 9) = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "graph-input");
  uint64_t v12 = __p;
  uint64_t v10 = *((void *)std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v12)+ 7);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  *((void *)this + 10) = v10;
  return this;
}

void sub_1B1D1333C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v18, *((void **)v17 + 7));
  quasar::ProcessingGraph::~ProcessingGraph(v17);
  _Unwind_Resume(a1);
}

void quasar::DirectedProcessingGraph::runInternal(uint64_t a1, uint64_t a2)
{
  quasar::ProcessingSink::resetValue(*(uint64_t ***)(a1 + 72));
  quasar::ProcessingBlock::receive(*(unsigned char **)(a1 + 80), a2);
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4 != (void *)(a1 + 56))
  {
    do
    {
      (*(void (**)(void))(*(void *)v4[7] + 40))(v4[7]);
      uint64_t v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != (void *)(a1 + 56));
  }
  quasar::ProcessingSink::getValue(*(quasar::ProcessingSink **)(a1 + 72));
  operator new();
}

void sub_1B1D134EC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void quasar::DirectedProcessingGraph::runInternal(uint64_t a1, void *a2)
{
  quasar::ProcessingSink::resetValue(*(uint64_t ***)(a1 + 72));
  uint64_t v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      quasar::ProcessingBlock::receive(*(unsigned char **)(a1 + 80), (uint64_t)(v5 + 4), (uint64_t)(v5 + 7));
      BOOL v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v4);
  }
  uint64_t v10 = *(void **)(a1 + 48);
  if (v10 != (void *)(a1 + 56))
  {
    do
    {
      (*(void (**)(void))(*(void *)v10[7] + 40))(v10[7]);
      unint64_t v11 = (void *)v10[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v10[2];
          BOOL v9 = *v12 == (void)v10;
          uint64_t v10 = v12;
        }
        while (!v9);
      }
      uint64_t v10 = v12;
    }
    while (v12 != (void *)(a1 + 56));
  }
  quasar::ProcessingSink::getValue(*(quasar::ProcessingSink **)(a1 + 72));
  operator new();
}

void sub_1B1D13664(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void quasar::DirectedProcessingGraph::runMultiOutInternal(uint64_t a1, void *a2)
{
  quasar::ProcessingSink::resetValue(*(uint64_t ***)(a1 + 72));
  uint64_t v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      quasar::ProcessingBlock::receive(*(unsigned char **)(a1 + 80), (uint64_t)(v5 + 4), (uint64_t)(v5 + 7));
      BOOL v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v4);
  }
  uint64_t v10 = *(void **)(a1 + 48);
  if (v10 != (void *)(a1 + 56))
  {
    do
    {
      (*(void (**)(void))(*(void *)v10[7] + 40))(v10[7]);
      unint64_t v11 = (void *)v10[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v10[2];
          BOOL v9 = *v12 == (void)v10;
          uint64_t v10 = v12;
        }
        while (!v9);
      }
      uint64_t v10 = v12;
    }
    while (v12 != (void *)(a1 + 56));
  }
  quasar::ProcessingSink::getValueMap(*(quasar::ProcessingSink **)(a1 + 72));
  operator new();
}

void sub_1B1D137B8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t quasar::DirectedProcessingGraph::addBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 < 0)
  {
    if (*(void *)(a2 + 8) != 12) {
      goto LABEL_10;
    }
    BOOL v7 = *(const std::string::value_type **)a2;
  }
  else
  {
    BOOL v7 = (const std::string::value_type *)a2;
    if (v6 != 12) {
      goto LABEL_10;
    }
  }
  uint64_t v8 = *(void *)v7;
  int v9 = *((_DWORD *)v7 + 2);
  if (v8 == 0x756F2D6870617267 && v9 == 1953853556) {
    goto LABEL_27;
  }
LABEL_10:
  if (std::__tree<std::string>::__count_unique<std::string>(a1 + 48, (const void **)a2))
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    memset(v20, 0, sizeof(v20));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Block ID already exist: ", 24);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, a2);
    goto LABEL_30;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::size_type v11 = *(void *)(a3 + 8);
    if (v11)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, v11);
      goto LABEL_16;
    }
    goto LABEL_29;
  }
  if (!*(unsigned char *)(a3 + 23))
  {
LABEL_29:
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    memset(v20, 0, sizeof(v20));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Missing (or empty) block-type for block ID: ", 44);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, a2);
LABEL_30:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v20);
  }
  std::string __p = *(std::string *)a3;
LABEL_16:
  quasar::ProcessingGraph::createBlock(a1, (const void **)&__p.__r_.__value_.__l.__data_, &v19);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)a2;
    *(void *)&v20[16] = *(void *)(a2 + 16);
  }
  uint64_t v12 = v19;
  uint64_t v19 = 0;
  *(void *)&v20[24] = v12;
  std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::unique_ptr<quasar::ProcessingBlock>>>((uint64_t **)(a1 + 48), (const void **)v20, (long long *)v20);
  uint64_t v13 = *(void *)&v20[24];
  *(void *)&v20[24] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  if ((v20[23] & 0x80000000) != 0) {
    operator delete(*(void **)v20);
  }
  uint64_t v14 = v19;
  uint64_t v19 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_27:
  *(void *)uint64_t v20 = a2;
  return std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)v20)[7];
}

uint64_t std::pair<std::string,std::unique_ptr<quasar::ProcessingBlock>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void quasar::DirectedProcessingGraph::addConnection(uint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v58 = *(std::string *)a3;
  }
  std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
  }
  if (!size) {
    MEMORY[0x1B3EA7B20](&v58, "in");
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v55, a4, 24);
  double v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, (uint64_t)&v52, 0x3Au);
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, (uint64_t)&v49, 0x3Au);
  if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
    MEMORY[0x1B3EA7B20](&v49, "out");
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Creating graph connection: ", 27);
    if (v54 >= 0) {
      uint64_t v10 = &v52;
    }
    else {
      uint64_t v10 = v52;
    }
    if (v54 >= 0) {
      uint64_t v11 = HIBYTE(v54);
    }
    else {
      uint64_t v11 = v53;
    }
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":", 1);
    if (v51 >= 0) {
      uint64_t v14 = &v49;
    }
    else {
      uint64_t v14 = v49;
    }
    if (v51 >= 0) {
      uint64_t v15 = HIBYTE(v51);
    }
    else {
      uint64_t v15 = v50;
    }
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" -> ", 4);
    int v18 = *(char *)(a2 + 23);
    if (v18 >= 0) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = *(void *)a2;
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v20 = *(void *)(a2 + 8);
    }
    long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v23 = &v58;
    }
    else {
      long long v23 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v24 = v58.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v32);
  }
  long long v25 = (uint64_t **)(a1 + 48);
  if (a1 + 56 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 48, (const void **)&v52))
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unknown block identifier in 'receives-from': ", 45);
    if (v54 >= 0) {
      long long v30 = &v52;
    }
    else {
      long long v30 = v52;
    }
    if (v54 >= 0) {
      uint64_t v31 = HIBYTE(v54);
    }
    else {
      uint64_t v31 = v53;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v32);
  }
  v32[0] = &v52;
  long long v26 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)&v52, (uint64_t)&std::piecewise_construct, (long long **)v32)[7];
  uint64_t v59 = (long long *)a2;
  long long v27 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, (const void **)a2, (uint64_t)&std::piecewise_construct, &v59);
  quasar::ProcessingConnection::ProcessingConnection(v32, v27[7], &v58, &v49);
  quasar::ProcessingBlock::connectOutput(v26, (uint64_t)v32);
  if (SBYTE7(v35) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[1]);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(v49);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(v52);
  }
  v55[0] = *MEMORY[0x1E4FBA408];
  uint64_t v28 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)v55 + *(void *)(v55[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v55[2] = v28;
  v55[3] = MEMORY[0x1E4FBA470] + 16;
  if (v56 < 0) {
    operator delete((void *)v55[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](&v57);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
}

void sub_1B1D13FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (*(char *)(v56 - 57) < 0) {
    operator delete(*(void **)(v56 - 80));
  }
  _Unwind_Resume(exception_object);
}

void quasar::DirectedProcessingGraph::updateConfiguration(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = *((char *)a2 + 23);
  if (v10 < 0)
  {
    if (a2[1] != (uint64_t *)11) {
      goto LABEL_10;
    }
    uint64_t v11 = *a2;
  }
  else
  {
    uint64_t v11 = (uint64_t *)a2;
    if (v10 != 11) {
      goto LABEL_10;
    }
  }
  uint64_t v12 = *v11;
  uint64_t v13 = *(uint64_t *)((char *)v11 + 3);
  if (v12 == 0x6E692D6870617267 && v13 == 0x7475706E692D6870)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No config block allowed for '", 29);
    int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"graph-input", 11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "'");
    goto LABEL_14;
  }
LABEL_10:
  if (std::__tree<std::string>::__count_unique<std::string>(a1 + 48, (const void **)a2))
  {
    __p[0] = a2;
    uint64_t v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)__p);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15[7] + 32))(v15[7], a3, a4, a5);
    std::string::basic_string[abi:ne180100]<0>(__p, "receive-from");
    quasar::PTree::getChildOptional(a4, (uint64_t)__p);
  }
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  *(_OWORD *)std::string __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"updateConfiguration called for nonexisting block id: ", 53);
  std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (uint64_t)a2);
LABEL_14:
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void quasar::DirectedProcessingGraph::checkGraph(quasar::DirectedProcessingGraph *this)
{
  uint64_t v1 = (char *)*((void *)this + 6);
  uint64_t v2 = (char *)this + 56;
  if (v1 != (char *)this + 56)
  {
    int v3 = 0;
    uint64_t v4 = &quasar::gLogLevel;
    while (1)
    {
      uint64_t v5 = (const char *)(*(uint64_t (**)(void))(**((void **)v1 + 7) + 16))(*((void *)v1 + 7));
      std::string::basic_string[abi:ne180100]<0>(__s1, "NullBlock");
      int v6 = (void *)strlen(v5);
      if (SBYTE7(v45) < 0)
      {
        if (v6 == __s1[1])
        {
          if (v6 == (void *)-1) {
LABEL_88:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          BOOL v7 = v4;
          uint64_t v8 = __s1[0];
          int v9 = memcmp(__s1[0], v5, (size_t)v6);
          int v10 = v8;
          uint64_t v4 = v7;
          operator delete(v10);
          if (!v9) {
            goto LABEL_80;
          }
        }
        else
        {
          operator delete(__s1[0]);
        }
      }
      else if (v6 == (void *)BYTE7(v45))
      {
        if (v6 == (void *)-1) {
          goto LABEL_88;
        }
        if (!memcmp(__s1, v5, (size_t)v6)) {
          goto LABEL_80;
        }
      }
      uint64_t v11 = (uint64_t **)(v1 + 32);
      int v12 = v1[55];
      if (v1[55] < 0)
      {
        if (*((void *)v1 + 5) != 12) {
          goto LABEL_22;
        }
        uint64_t v13 = *v11;
      }
      else
      {
        uint64_t v13 = (uint64_t *)(v1 + 32);
        if (v12 != 12) {
          goto LABEL_22;
        }
      }
      uint64_t v14 = *v13;
      uint64_t v15 = *((unsigned int *)v13 + 2);
      BOOL v16 = v14 == 0x756F2D6870617267 && v15 == 1953853556;
      if (v16)
      {
LABEL_23:
        if ((v12 & 0x80) == 0) {
          goto LABEL_24;
        }
        goto LABEL_35;
      }
LABEL_22:
      if (*(void *)(*((void *)v1 + 7) + 32) != *(void *)(*((void *)v1 + 7) + 40)) {
        goto LABEL_23;
      }
      if (*v4 >= 1)
      {
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        *(_OWORD *)std::string __s1 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
        int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Block has no outgoing connections: ", 35);
        int v19 = v1[55];
        if (v19 >= 0) {
          uint64_t v20 = (uint64_t)(v1 + 32);
        }
        else {
          uint64_t v20 = *((void *)v1 + 4);
        }
        if (v19 >= 0) {
          uint64_t v21 = v1[55];
        }
        else {
          uint64_t v21 = *((void *)v1 + 5);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__s1);
        int v12 = v1[55];
      }
      ++v3;
      if ((v12 & 0x80) == 0)
      {
LABEL_24:
        uint64_t v17 = (uint64_t *)(v1 + 32);
        if (v12 != 12) {
          goto LABEL_47;
        }
        goto LABEL_37;
      }
LABEL_35:
      if (*((void *)v1 + 5) != 12) {
        goto LABEL_49;
      }
      uint64_t v17 = *v11;
LABEL_37:
      uint64_t v22 = *v17;
      uint64_t v23 = *((unsigned int *)v17 + 2);
      BOOL v24 = v22 == 0x756F2D6870617267 && v23 == 1953853556;
      if (v24 && *(void *)(*((void *)v1 + 7) + 32) != *(void *)(*((void *)v1 + 7) + 40))
      {
        if (*v4 >= 1)
        {
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          *(_OWORD *)std::string __s1 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
          long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"'", 1);
          long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"graph-output", 12);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"' can have no outgoing connections", 34);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__s1);
          int v12 = v1[55];
        }
        ++v3;
      }
      if ((v12 & 0x80) == 0)
      {
LABEL_47:
        if (v12 != 11) {
          goto LABEL_55;
        }
        long long v27 = (uint64_t *)(v1 + 32);
        goto LABEL_51;
      }
LABEL_49:
      if (*((void *)v1 + 5) != 11) {
        goto LABEL_55;
      }
      long long v27 = *v11;
LABEL_51:
      uint64_t v28 = *v27;
      uint64_t v29 = *(uint64_t *)((char *)v27 + 3);
      if (v28 == 0x6E692D6870617267 && v29 == 0x7475706E692D6870)
      {
LABEL_56:
        if ((v12 & 0x80) == 0) {
          goto LABEL_57;
        }
        goto LABEL_68;
      }
LABEL_55:
      if (*(void *)(*((void *)v1 + 7) + 24)) {
        goto LABEL_56;
      }
      if (*v4 >= 1)
      {
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        *(_OWORD *)std::string __s1 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
        long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Block has no incoming connections: ", 35);
        int v33 = v1[55];
        if (v33 >= 0) {
          uint64_t v34 = (uint64_t)(v1 + 32);
        }
        else {
          uint64_t v34 = *((void *)v1 + 4);
        }
        if (v33 >= 0) {
          uint64_t v35 = v1[55];
        }
        else {
          uint64_t v35 = *((void *)v1 + 5);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__s1);
        int v12 = v1[55];
      }
      ++v3;
      if ((v12 & 0x80) == 0)
      {
LABEL_57:
        long long v31 = (uint64_t *)(v1 + 32);
        if (v12 == 11) {
          goto LABEL_70;
        }
        goto LABEL_79;
      }
LABEL_68:
      if (*((void *)v1 + 5) == 11)
      {
        long long v31 = *v11;
LABEL_70:
        uint64_t v36 = *v31;
        uint64_t v37 = *(uint64_t *)((char *)v31 + 3);
        BOOL v38 = v36 == 0x6E692D6870617267 && v37 == 0x7475706E692D6870;
        if (v38 && *(void *)(*((void *)v1 + 7) + 24))
        {
          if (*v4 >= 1)
          {
            long long v59 = 0u;
            long long v60 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            *(_OWORD *)std::string __s1 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
            long long v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"'", 1);
            long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"graph-input", 11);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"' can have no incoming connections", 34);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__s1);
          }
          ++v3;
        }
      }
LABEL_79:
      v3 += (*(uint64_t (**)(void, void *))(**((void **)v1 + 7) + 48))(*((void *)v1 + 7), (void *)v1 + 4);
LABEL_80:
      long long v41 = (char *)*((void *)v1 + 1);
      if (v41)
      {
        do
        {
          long long v42 = v41;
          long long v41 = *(char **)v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          long long v42 = (char *)*((void *)v1 + 2);
          BOOL v16 = *(void *)v42 == (void)v1;
          uint64_t v1 = v42;
        }
        while (!v16);
      }
      uint64_t v1 = v42;
      if (v42 == v2)
      {
        if (v3)
        {
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          *(_OWORD *)std::string __s1 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Found ", 6);
          long long v43 = (void *)std::ostream::operator<<();
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v43, " graph connectivity error(s)");
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
        }
        return;
      }
    }
  }
}

void sub_1B1D1494C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::ProcessingGraph::getBlock(uint64_t a1)
{
  if (quasar::gLogLevel >= 1)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Block name lookup not supported for this graph type!", 52);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v3);
  }
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 16))(a1, 0);
}

void sub_1B1D14A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::LinearProcessingGraph::~LinearProcessingGraph(quasar::LinearProcessingGraph *this)
{
  *(void *)this = &unk_1F0A55B08;
  uint64_t v2 = (void **)((char *)this + 48);
  std::vector<std::unique_ptr<quasar::ProcessingBlock>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::ProcessingGraph::~ProcessingGraph(this);
}

{
  void **v2;

  *(void *)this = &unk_1F0A55B08;
  uint64_t v2 = (void **)((char *)this + 48);
  std::vector<std::unique_ptr<quasar::ProcessingBlock>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::ProcessingGraph::~ProcessingGraph(this);
  MEMORY[0x1B3EA8670]();
}

uint64_t quasar::LinearProcessingGraph::getBlock(quasar::LinearProcessingGraph *this, int a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (a2 >= (unint64_t)((*((void *)this + 7) - v2) >> 3)) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)(v2 + 8 * a2);
}

uint64_t quasar::LinearProcessingGraph::runInternal(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) != 1)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Multiple inputs not supported for (legacy) block config format");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)a1 + 32);
  return v2();
}

void quasar::LinearProcessingGraph::runMultiOutInternal()
{
  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Multiple inputs not supported for (legacy) block config format");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::DirectedProcessingGraph::~DirectedProcessingGraph(quasar::DirectedProcessingGraph *this)
{
  *(void *)this = &unk_1F0A56930;
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 48, *((void **)this + 7));
  quasar::ProcessingGraph::~ProcessingGraph(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A56930;
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 48, *((void **)this + 7));
  quasar::ProcessingGraph::~ProcessingGraph(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::DirectedProcessingGraph::getBlock(quasar::DirectedProcessingGraph *this, int a2)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (a2 >= 1)
  {
    for (int i = 0; i != a2; ++i)
    {
      uint64_t v4 = (void *)v2[1];
      uint64_t v5 = v2;
      if (v4)
      {
        do
        {
          uint64_t v2 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v2 = (void *)v5[2];
          BOOL v6 = *v2 == (void)v5;
          uint64_t v5 = v2;
        }
        while (!v6);
      }
      if (v2 == (void *)((char *)this + 56))
      {
        memset(v8, 0, sizeof(v8));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Invalid block index: ", 21);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
      }
    }
  }
  return v2[7];
}

uint64_t quasar::DirectedProcessingGraph::getBlock(uint64_t a1, long long *a2)
{
  int v3 = a2;
  return std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)a2, (uint64_t)&std::piecewise_construct, &v3)[7];
}

void std::__shared_ptr_emplace<quasar::Context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A622E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::Context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A622E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::Context>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<std::unique_ptr<quasar::ProcessingBlock>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<quasar::ProcessingBlock>>::__clear[abi:ne180100](v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<quasar::ProcessingBlock>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  int v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *int v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void ***std::unique_ptr<quasar::ProcessingBlock::ValueType>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    int v3 = v2;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x1B3EA8670](v2, 0x20C40960023A9);
  }
  return result;
}

void quasar::ProcessingGraph::creator<quasar::MergerBlock>()
{
}

void sub_1B1D151B0(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C40CA96DD08);
  _Unwind_Resume(a1);
}

quasar::MergerOptions *quasar::MergerOptions::MergerOptions(quasar::MergerOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A524A8;
  std::string::basic_string[abi:ne180100]<0>(&v5, "merge-style");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "type of merge performed");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 131);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D152A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<std::string>::OptionValue(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, int a5)
{
  *(_OWORD *)(a1 + 8) = 0u;
  int v10 = (std::string *)(a1 + 8);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(void *)a1 = &unk_1F0A51DE8;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v11 = (std::string *)(a1 + 104);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  int v12 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v12 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 9) {
      goto LABEL_10;
    }
    uint64_t v13 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v13 = (uint64_t *)a2;
    if (v12 != 9) {
      goto LABEL_10;
    }
  }
  uint64_t v14 = *v13;
  int v15 = *((unsigned __int8 *)v13 + 8);
  if (v14 == 0x656469727265766FLL && v15 == 115)
  {
    long long v33 = 0uLL;
    long long v34 = 0uLL;
    long long v31 = 0uLL;
    long long v32 = 0uLL;
    long long v29 = 0uLL;
    long long v30 = 0uLL;
    long long v27 = 0uLL;
    long long v28 = 0uLL;
    long long v25 = 0uLL;
    long long v26 = 0uLL;
    long long v23 = 0uLL;
    long long v24 = 0uLL;
    long long v21 = 0uLL;
    long long v22 = 0uLL;
    long long v19 = 0uLL;
    long long v20 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"overrides option name is reserved", 33);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "<default>");
  std::string::operator=(v11, a3);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)__p);
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  std::string::operator=((std::string *)(a1 + 56), a4);
  *(_DWORD *)(a1 + 80) = a5;
  std::string::operator=(v10, a2);
  return a1;
}

void sub_1B1D154A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v16, *(void **)(v14 + 144));
  if (*(char *)(v14 + 127) < 0) {
    operator delete(*v15);
  }
  quasar::OptionValueBase::~OptionValueBase((quasar::OptionValueBase *)v14);
  _Unwind_Resume(a1);
}

void quasar::OptionValueBase::~OptionValueBase(quasar::OptionValueBase *this)
{
  *(void *)this = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void quasar::ProcessingGraph::creator<quasar::NullBlock>()
{
}

void quasar::ProcessingGraph::creator<quasar::PDecTranslatorBlock>()
{
}

void sub_1B1D15654(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C407AB0DB06);
  _Unwind_Resume(a1);
}

quasar::PDecTranslatorBlock *quasar::PDecTranslatorBlock::PDecTranslatorBlock(quasar::PDecTranslatorBlock *this)
{
  *((void *)this + 3267) = &unk_1F0A53110;
  *((void *)this + 3269) = 0;
  *((void *)this + 3271) = 0;
  *((void *)this + 3270) = 0;
  *((void *)this + 3268) = (char *)this + 26152;
  *((void *)this + 3273) = 0;
  *((void *)this + 3272) = 0;
  *((unsigned char *)this + 26192) = 1;
  uint64_t v2 = off_1F0A32878;
  int v3 = off_1F0A32870;
  *(void *)this = off_1F0A32870;
  *(void *)((char *)this + *(v3 - 3)) = v2;
  quasar::TranslatorOptions::TranslatorOptions((quasar::PDecTranslatorBlock *)((char *)this + 8));
  *((void *)this + 1094) = 0;
  *((void *)this + 1093) = 0;
  *(_OWORD *)((char *)this + 8712) = 0u;
  *(_OWORD *)((char *)this + 8728) = 0u;
  *(_OWORD *)((char *)this + 8680) = 0u;
  *(_OWORD *)((char *)this + 8696) = 0u;
  *(void *)this = off_1F0A54C20;
  *((void *)this + 3267) = off_1F0A54CD8;
  *((void *)this + 1096) = 0;
  *((void *)this + 1095) = 0;
  quasar::TranslatorOptions::TranslatorOptions((quasar::PDecTranslatorBlock *)((char *)this + 8776));
  quasar::TranslatorOptions::TranslatorOptions((quasar::PDecTranslatorBlock *)((char *)this + 17448));
  *(_OWORD *)((char *)this + 26120) = 0u;
  return this;
}

void sub_1B1D15814(_Unwind_Exception *a1)
{
  BOOL v6 = v4;
  quasar::TranslatorOptions::~TranslatorOptions(v6);
  uint64_t v8 = v2 + 1094;
  int v9 = (std::__shared_weak_count *)v2[1096];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *v8;
  *uint64_t v8 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
  }
  quasar::PDecEngineBlockMixin::~PDecEngineBlockMixin(v3);
  quasar::ConfiguredProcessingBlock<quasar::TranslatorOptions>::~ConfiguredProcessingBlock(v2, (uint64_t *)(v5 + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v1);
  _Unwind_Resume(a1);
}

void quasar::PDecEngineBlockMixin::~PDecEngineBlockMixin(quasar::PDecEngineBlockMixin *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 4, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 3, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 2, 0);
  int v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t *quasar::ConfiguredProcessingBlock<quasar::TranslatorOptions>::~ConfiguredProcessingBlock(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v3 - 24)) = a2[1];
  quasar::TranslatorOptions::~TranslatorOptions((quasar::TranslatorOptions *)(a1 + 1));
  return a1;
}

quasar::TranslatorOptions *quasar::TranslatorOptions::TranslatorOptions(quasar::TranslatorOptions *this)
{
  *(void *)quasar::PDecOptions::PDecOptions(this) = &unk_1F0A53DD8;
  std::string::basic_string[abi:ne180100]<0>(v5, "model-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "mt model file name");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 2944, v5, &v7, &v6, 35);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "beam");
  LODWORD(v6.__r_.__value_.__l.__data_) = 4;
  std::string::basic_string[abi:ne180100]<0>(&v7, "maximum number of active beams in pruning");
  std::string v4 = (void *)((char *)this + 3104);
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 3104, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "as-beam");
  v6.__r_.__value_.__r.__words[0] = 0x41E0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v7, "as_beam pruning value");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 3248, v5, &v6, &v7, 96);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "rs-beam");
  v6.__r_.__value_.__r.__words[0] = 0x41E0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v7, "rs_beam pruning value");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 3392, v5, &v6, &v7, 96);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "beam-batch");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "beam batch size for (espresso) decoder model (0 = off, -1 = any)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 3536, v5, &v6, &v7, 213);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "confidence-threshold");
  v6.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "confidence threshold");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 3680, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "lm-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "path to language model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 3824, v5, &v7, &v6, 35);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "lm-weight");
  v6.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "language model weight");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 3984, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "veto-factor");
  v6.__r_.__value_.__r.__words[0] = 0x3FE0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v7, "MT defcoding veto factor");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 4128, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "veto-factor-exclude-input-tags");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "MT decoding, exclude input tags in  veto factor computation");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 4272, v5, &v6, &v7, 138);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "veto-factor-num-external-input-tags");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "MT decoding, num externally provided tags to exclude for veto factor");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 4416, v5, &v6, &v7, 138);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "norm-costs");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "normalize costs in mt decoding? (backward compatible version)");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 4560, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "norm-mode");
  std::string::basic_string[abi:ne180100]<0>(&v7, "off");
  std::string::basic_string[abi:ne180100]<0>(&v6, "normalize costs in mt decoding? (off|length|gnmt)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 4704, v5, &v7, &v6, 97);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "norm-alpha");
  v6.__r_.__value_.__r.__words[0] = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v7, "normalization alpha parameter");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 4864, v5, &v6, &v7, 97);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "norm-sigma");
  v6.__r_.__value_.__r.__words[0] = 0x4014000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v7, "normalization sigma parameter");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 5008, v5, &v6, &v7, 97);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "unk-replace");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "oov");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 5152, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "max-seq-length");
  LODWORD(v6.__r_.__value_.__l.__data_) = 100;
  std::string::basic_string[abi:ne180100]<0>(&v7, "maximum decoding sequence length");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 5296, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "max-seq-length-relative");
  v6.__r_.__value_.__r.__words[0] = 0xBFF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v7, "maximum decoding sequence length as factor of input length");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 5440, v5, &v6, &v7, 160);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "max-seq-length-floor");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "maximum decoding sequence length floor (used with input length factor)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 5584, v5, &v6, &v7, 160);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "lm-mode");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "lm mode");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 5728, v5, &v7, &v6, 35);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "confidence-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "confidence model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 5888, v5, &v7, &v6, 35);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "stop-mode");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "stop mode in mt decoding (nbeam|best|finished_score)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 6048, v5, &v7, &v6, 99);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "block-control");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "flow control for block sequence (<empty>|optional|optional_stop_on_success)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 6208, v5, &v7, &v6, 106);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "shortlist-lang-pair");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "language pair used for shortlist");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 6368, v5, &v7, &v6, 121);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "shortlist-cond-n");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "top n in condition table used for shortlist");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 6528, v5, &v6, &v7, 121);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "shortlist-freq-n");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "top n in freq words used for shortlist");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 6672, v5, &v6, &v7, 121);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "nbest");
  std::string::basic_string[abi:ne180100]<0>(&v7, "maximum entries in nbest list to produce (default to same as 'beam'}");
  uint64_t v2 = (_DWORD *)quasar::OptionValue<int>::value(v4);
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 6816, v5, v2, &v7, 35);
  *((void *)this + 866) = v4;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "stop-mode-finished-score-beam");
  LODWORD(v6.__r_.__value_.__l.__data_) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v7, "number of finished hypotheses considered for finished score stop mode (default: 1)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 6960, v5, &v6, &v7, 99);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "stream-buffer-n");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "stream decoding initial read length (effective read buffer)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 7104, v5, &v6, &v7, 129);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "stream-block-m");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "stream decoding read/write length (block size for looped read/write calls)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 7248, v5, &v6, &v7, 129);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "stream-stabilize");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "stabilize partial stream decoding results after each read/write block");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 7392, v5, &v6, &v7, 129);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "partial-input-override");
  quasar::PTree::PTree((quasar::PTree *)v5);
  std::string::basic_string[abi:ne180100]<0>(&v6, "optional override parameter block to change parameter settings for partial-input processing");
  quasar::OptionValue<quasar::PTree>::OptionValue((uint64_t)this + 7536, &v7, (uint64_t)v5, &v6, 229);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  quasar::PTree::~PTree((quasar::PTree *)v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "timing-meta-info");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "include decoder timing information in meta info json");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 7736, v5, &v6, &v7, 240);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "repetition-threshold");
  v6.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "probility threshold for detecting repetitions");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 7880, v5, &v6, &v7, 269);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "abort-on-repetitions");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "abort decoding on detecting repetitions");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 8024, v5, &v6, &v7, 269);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "redecode-on-repetitions");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "retry decoding without shortlist on detecting repetitions");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 8168, v5, &v6, &v7, 269);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "redecode-override");
  quasar::PTree::PTree((quasar::PTree *)v5);
  std::string::basic_string[abi:ne180100]<0>(&v6, "optional override parameter block to change parameter settings for redecode");
  quasar::OptionValue<quasar::PTree>::OptionValue((uint64_t)this + 8312, &v7, (uint64_t)v5, &v6, 269);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  quasar::PTree::~PTree((quasar::PTree *)v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "shortlist-suppress-tokens");
  memset(&v7, 0, sizeof(v7));
  quasar::OptionValue<std::vector<std::string>>::OptionValue((uint64_t)this + 8512, v5, (uint64_t)&v7, &v6, 121);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5[0].__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D16A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (*(char *)(v46 - 113) < 0) {
    operator delete(*(void **)(v46 - 136));
  }
  *(void *)(v46 - 136) = v46 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 136));
  if (*(char *)(v46 - 177) < 0) {
    operator delete(*(void **)(v46 - 200));
  }
  quasar::OptionValue<quasar::PTree>::~OptionValue(v40);
  quasar::OptionValue<BOOL>::~OptionValue(v39);
  quasar::OptionValue<BOOL>::~OptionValue(v37);
  quasar::OptionValue<double>::~OptionValue(v45);
  quasar::OptionValue<BOOL>::~OptionValue(v44);
  quasar::OptionValue<quasar::PTree>::~OptionValue(v43);
  quasar::OptionValue<BOOL>::~OptionValue(v42);
  quasar::OptionValue<int>::~OptionValue(v41);
  quasar::OptionValue<int>::~OptionValue(v38);
  quasar::OptionValue<int>::~OptionValue(a10);
  quasar::OptionValue<int>::~OptionValue(a11);
  quasar::OptionValue<int>::~OptionValue(a12);
  quasar::OptionValue<int>::~OptionValue(a13);
  quasar::OptionValue<std::string>::~OptionValue(a14);
  quasar::OptionValue<std::string>::~OptionValue(a15);
  quasar::OptionValue<std::string>::~OptionValue(a16);
  quasar::OptionValue<std::string>::~OptionValue(a17);
  quasar::OptionValue<std::string>::~OptionValue(a18);
  quasar::OptionValue<int>::~OptionValue(a19);
  quasar::OptionValue<double>::~OptionValue(a20);
  quasar::OptionValue<int>::~OptionValue(a21);
  quasar::OptionValue<BOOL>::~OptionValue(a22);
  quasar::OptionValue<double>::~OptionValue(a23);
  quasar::OptionValue<double>::~OptionValue(a24);
  quasar::OptionValue<std::string>::~OptionValue(a25);
  quasar::OptionValue<BOOL>::~OptionValue(a26);
  quasar::OptionValue<int>::~OptionValue(a27);
  quasar::OptionValue<BOOL>::~OptionValue(a28);
  quasar::OptionValue<double>::~OptionValue(a29);
  quasar::OptionValue<double>::~OptionValue(a30);
  quasar::OptionValue<std::string>::~OptionValue(a31);
  quasar::OptionValue<double>::~OptionValue(a32);
  quasar::OptionValue<int>::~OptionValue(a33);
  quasar::OptionValue<double>::~OptionValue(a34);
  quasar::OptionValue<double>::~OptionValue(a35);
  quasar::OptionValue<int>::~OptionValue(*(void *)(v46 - 208));
  quasar::OptionValue<std::string>::~OptionValue(a36);
  quasar::PDecOptions::~PDecOptions(v36);
  _Unwind_Resume(a1);
}

void sub_1B1D16BCC()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  if (*(char *)(v0 - 177) < 0) {
    operator delete(*(void **)(v0 - 200));
  }
  JUMPOUT(0x1B1D16AA4);
}

void sub_1B1D16BFC()
{
}

void sub_1B1D16C04()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  if (*(char *)(v0 - 177) < 0) {
    operator delete(*(void **)(v0 - 200));
  }
  JUMPOUT(0x1B1D16AACLL);
}

void sub_1B1D16C34()
{
}

void sub_1B1D16C3C()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  if (*(char *)(v0 - 177) < 0) {
    operator delete(*(void **)(v0 - 200));
  }
  JUMPOUT(0x1B1D16AB4);
}

void sub_1B1D16C6C()
{
}

void sub_1B1D16C74()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  if (*(char *)(v0 - 177) < 0) {
    operator delete(*(void **)(v0 - 200));
  }
  JUMPOUT(0x1B1D16ABCLL);
}

void sub_1B1D16CA4()
{
}

void sub_1B1D16CAC()
{
  if (*(char *)(v0 - 113) < 0) {
    operator delete(*(void **)(v0 - 136));
  }
  quasar::PTree::~PTree((quasar::PTree *)(v0 - 200));
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x1B1D16AC4);
}

void sub_1B1D16CEC()
{
}

void sub_1B1D16CF4()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  if (*(char *)(v0 - 177) < 0) {
    operator delete(*(void **)(v0 - 200));
  }
  JUMPOUT(0x1B1D16ACCLL);
}

void sub_1B1D16D24()
{
}

void sub_1B1D16D2C()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  if (*(char *)(v0 - 177) < 0) {
    operator delete(*(void **)(v0 - 200));
  }
  JUMPOUT(0x1B1D16AD4);
}

void sub_1B1D16D5C()
{
}

void sub_1B1D16D64()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  if (*(char *)(v0 - 177) < 0) {
    operator delete(*(void **)(v0 - 200));
  }
  JUMPOUT(0x1B1D16ADCLL);
}

void sub_1B1D16D94()
{
}

void sub_1B1D16D9C()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  if (*(char *)(v0 - 177) < 0) {
    operator delete(*(void **)(v0 - 200));
  }
  JUMPOUT(0x1B1D16AE4);
}

void sub_1B1D16DCC()
{
}

void sub_1B1D16DD4()
{
  if (*(char *)(v0 - 177) < 0) {
    operator delete(*(void **)(v0 - 200));
  }
  JUMPOUT(0x1B1D16AECLL);
}

quasar::PDecOptions *quasar::PDecOptions::PDecOptions(quasar::PDecOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A51F00;
  std::string::basic_string[abi:ne180100]<0>(&v9, "model-type");
  std::string::basic_string[abi:ne180100]<0>(&v8, "kaldi");
  std::string::basic_string[abi:ne180100]<0>(&__p, "translation model type (kaldi/espresso)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v9, &v8, &__p, 213);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "enable-memory-map");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v8, "use memory map");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 176, &v9, &__p, &v8, 35);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "phrase-book-mode");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "phrase book mode");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 320, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "pron-guide-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "pron guide model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 480, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "pron-guide-preprocessing");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "pron guide preprocessing (splitting into characters and <space> insertion)");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 640, &v9, &__p, &v8, 35);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "romanizer");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "romanizer");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 784, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "phrasebook-case-sensitve");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v8, "case sensitive phrase book?");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 944, &v9, &__p, &v8, 35);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "filter-list-file");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "filter list file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1088, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "pb-file-list");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "phrase book file list");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1248, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "nbest");
  LODWORD(__p.__r_.__value_.__l.__data_) = 3;
  std::string::basic_string[abi:ne180100]<0>(&v8, "maximum entries in nbest list to produce");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 1408, &v9, &__p, &v8, 35);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "reset-meta-info");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "reset metaInfo json");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1552, &v9, &__p, &v8, 131);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "source-locale");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "source locale");
  uint64_t v2 = (char *)this + 1696;
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1696, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "target-locale");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "target locale");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1856, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "source-token");
  std::string::basic_string[abi:ne180100]<0>(&v8, "source tag for multilingual model");
  uint64_t v3 = (const std::string *)quasar::OptionValue<std::string>::value((void *)this + 212);
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 2016, &v9, v3, &v8, 35);
  *((void *)this + 268) = v2;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "target-token");
  std::string::basic_string[abi:ne180100]<0>(&v8, "target tag for multilingual model");
  std::string v4 = (const std::string *)quasar::OptionValue<std::string>::value((void *)this + 232);
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 2176, &v9, v4, &v8, 35);
  *((void *)this + 288) = (char *)this + 1856;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "dynamic-switch-key");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "dynamic weight switching key for espresso model");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 2336, &v9, &v8, &__p, 267);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "source-model-tag");
  std::string::basic_string[abi:ne180100]<0>(&v8, "source tag for multilingual model switching");
  uint64_t v5 = (const std::string *)quasar::OptionValue<std::string>::value((void *)this + 212);
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 2496, &v9, v5, &v8, 35);
  *((void *)this + 328) = v2;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "share-translation-model");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "share translation model");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2656, &v9, &__p, &v8, 194);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "use-sentencepiece-ids");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v8, "use sentencepiece ids directly, drop dictionaries");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2800, &v9, &__p, &v8, 242);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D17D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 81) < 0) {
    operator delete(*(void **)(v38 - 104));
  }
  quasar::OptionValue<BOOL>::~OptionValue(v37);
  quasar::OptionValue<std::string>::~OptionValue(v36);
  quasar::OptionValue<std::string>::~OptionValue(v35);
  quasar::OptionValue<std::string>::~OptionValue(v34);
  quasar::OptionValue<std::string>::~OptionValue(v33);
  quasar::OptionValue<std::string>::~OptionValue(v32);
  quasar::OptionValue<std::string>::~OptionValue(v31);
  quasar::OptionValue<BOOL>::~OptionValue(v30);
  quasar::OptionValue<int>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(a9);
  quasar::OptionValue<std::string>::~OptionValue(a10);
  quasar::OptionValue<BOOL>::~OptionValue(a11);
  quasar::OptionValue<std::string>::~OptionValue(a12);
  quasar::OptionValue<BOOL>::~OptionValue(a13);
  quasar::OptionValue<std::string>::~OptionValue(a14);
  quasar::OptionValue<std::string>::~OptionValue(a15);
  quasar::OptionValue<BOOL>::~OptionValue(a16);
  quasar::OptionValue<std::string>::~OptionValue(a17);
  _Unwind_Resume(a1);
}

void sub_1B1D18264(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 81) < 0) {
    operator delete(*(void **)(v26 - 104));
  }
  JUMPOUT(0x1B1D181ECLL);
}

void sub_1B1D1828C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 81) < 0) {
    operator delete(*(void **)(v26 - 104));
  }
  JUMPOUT(0x1B1D181F4);
}

uint64_t quasar::OptionValue<quasar::PTree>::~OptionValue(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A51DB0;
  std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy(a1 + 176, *(void **)(a1 + 184));
  quasar::PTree::~PTree((quasar::PTree *)(a1 + 104));
  *(void *)a1 = &unk_1F0A52FB8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t quasar::OptionValue<BOOL>::~OptionValue(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A51E58;
  std::__tree<std::string>::destroy(a1 + 120, *(char **)(a1 + 128));
  *(void *)a1 = &unk_1F0A52FB8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t quasar::OptionValue<double>::~OptionValue(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A51E90;
  std::__tree<std::string>::destroy(a1 + 120, *(char **)(a1 + 128));
  *(void *)a1 = &unk_1F0A52FB8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t quasar::OptionValue<int>::~OptionValue(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy(a1 + 120, *(char **)(a1 + 128));
  *(void *)a1 = &unk_1F0A52FB8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t quasar::OptionValue<std::string>::~OptionValue(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 136, *(void **)(a1 + 144));
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  *(void *)a1 = &unk_1F0A52FB8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void quasar::PDecOptions::~PDecOptions(quasar::PDecOptions *this)
{
  *(void *)this = &unk_1F0A51F00;
  *((void *)this + 350) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 2920, *((char **)this + 366));
  *((void *)this + 350) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 362);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 2879) < 0) {
    operator delete(*((void **)this + 357));
  }
  if (*((char *)this + 2855) < 0) {
    operator delete(*((void **)this + 354));
  }
  if (*((char *)this + 2831) < 0) {
    operator delete(*((void **)this + 351));
  }
  *((void *)this + 332) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 2776, *((char **)this + 348));
  *((void *)this + 332) = &unk_1F0A52FB8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 344);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 2735) < 0) {
    operator delete(*((void **)this + 339));
  }
  if (*((char *)this + 2711) < 0) {
    operator delete(*((void **)this + 336));
  }
  if (*((char *)this + 2687) < 0) {
    operator delete(*((void **)this + 333));
  }
  *((void *)this + 312) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 2632, *((void **)this + 330));
  if (*((char *)this + 2623) < 0) {
    operator delete(*((void **)this + 325));
  }
  *((void *)this + 312) = &unk_1F0A52FB8;
  std::string v4 = (std::__shared_weak_count *)*((void *)this + 324);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 2575) < 0) {
    operator delete(*((void **)this + 319));
  }
  if (*((char *)this + 2551) < 0) {
    operator delete(*((void **)this + 316));
  }
  if (*((char *)this + 2527) < 0) {
    operator delete(*((void **)this + 313));
  }
  *((void *)this + 292) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 2472, *((void **)this + 310));
  if (*((char *)this + 2463) < 0) {
    operator delete(*((void **)this + 305));
  }
  *((void *)this + 292) = &unk_1F0A52FB8;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 304);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 2415) < 0) {
    operator delete(*((void **)this + 299));
  }
  if (*((char *)this + 2391) < 0) {
    operator delete(*((void **)this + 296));
  }
  if (*((char *)this + 2367) < 0) {
    operator delete(*((void **)this + 293));
  }
  *((void *)this + 272) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 2312, *((void **)this + 290));
  if (*((char *)this + 2303) < 0) {
    operator delete(*((void **)this + 285));
  }
  *((void *)this + 272) = &unk_1F0A52FB8;
  std::string v6 = (std::__shared_weak_count *)*((void *)this + 284);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 2255) < 0) {
    operator delete(*((void **)this + 279));
  }
  if (*((char *)this + 2231) < 0) {
    operator delete(*((void **)this + 276));
  }
  if (*((char *)this + 2207) < 0) {
    operator delete(*((void **)this + 273));
  }
  *((void *)this + 252) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 2152, *((void **)this + 270));
  if (*((char *)this + 2143) < 0) {
    operator delete(*((void **)this + 265));
  }
  *((void *)this + 252) = &unk_1F0A52FB8;
  std::string v7 = (std::__shared_weak_count *)*((void *)this + 264);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((char *)this + 2095) < 0) {
    operator delete(*((void **)this + 259));
  }
  if (*((char *)this + 2071) < 0) {
    operator delete(*((void **)this + 256));
  }
  if (*((char *)this + 2047) < 0) {
    operator delete(*((void **)this + 253));
  }
  *((void *)this + 232) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1992, *((void **)this + 250));
  if (*((char *)this + 1983) < 0) {
    operator delete(*((void **)this + 245));
  }
  *((void *)this + 232) = &unk_1F0A52FB8;
  std::string v8 = (std::__shared_weak_count *)*((void *)this + 244);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*((char *)this + 1935) < 0) {
    operator delete(*((void **)this + 239));
  }
  if (*((char *)this + 1911) < 0) {
    operator delete(*((void **)this + 236));
  }
  if (*((char *)this + 1887) < 0) {
    operator delete(*((void **)this + 233));
  }
  *((void *)this + 212) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1832, *((void **)this + 230));
  if (*((char *)this + 1823) < 0) {
    operator delete(*((void **)this + 225));
  }
  *((void *)this + 212) = &unk_1F0A52FB8;
  std::string v9 = (std::__shared_weak_count *)*((void *)this + 224);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*((char *)this + 1775) < 0) {
    operator delete(*((void **)this + 219));
  }
  if (*((char *)this + 1751) < 0) {
    operator delete(*((void **)this + 216));
  }
  if (*((char *)this + 1727) < 0) {
    operator delete(*((void **)this + 213));
  }
  *((void *)this + 194) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 1672, *((char **)this + 210));
  *((void *)this + 194) = &unk_1F0A52FB8;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 206);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*((char *)this + 1631) < 0) {
    operator delete(*((void **)this + 201));
  }
  if (*((char *)this + 1607) < 0) {
    operator delete(*((void **)this + 198));
  }
  if (*((char *)this + 1583) < 0) {
    operator delete(*((void **)this + 195));
  }
  *((void *)this + 176) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 1528, *((char **)this + 192));
  *((void *)this + 176) = &unk_1F0A52FB8;
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 188);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (*((char *)this + 1487) < 0) {
    operator delete(*((void **)this + 183));
  }
  if (*((char *)this + 1463) < 0) {
    operator delete(*((void **)this + 180));
  }
  if (*((char *)this + 1439) < 0) {
    operator delete(*((void **)this + 177));
  }
  *((void *)this + 156) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1384, *((void **)this + 174));
  if (*((char *)this + 1375) < 0) {
    operator delete(*((void **)this + 169));
  }
  *((void *)this + 156) = &unk_1F0A52FB8;
  int v12 = (std::__shared_weak_count *)*((void *)this + 168);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (*((char *)this + 1327) < 0) {
    operator delete(*((void **)this + 163));
  }
  if (*((char *)this + 1303) < 0) {
    operator delete(*((void **)this + 160));
  }
  if (*((char *)this + 1279) < 0) {
    operator delete(*((void **)this + 157));
  }
  *((void *)this + 136) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1224, *((void **)this + 154));
  if (*((char *)this + 1215) < 0) {
    operator delete(*((void **)this + 149));
  }
  *((void *)this + 136) = &unk_1F0A52FB8;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 148);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (*((char *)this + 1167) < 0) {
    operator delete(*((void **)this + 143));
  }
  if (*((char *)this + 1143) < 0) {
    operator delete(*((void **)this + 140));
  }
  if (*((char *)this + 1119) < 0) {
    operator delete(*((void **)this + 137));
  }
  *((void *)this + 118) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 1064, *((char **)this + 134));
  *((void *)this + 118) = &unk_1F0A52FB8;
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 130);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (*((char *)this + 1023) < 0) {
    operator delete(*((void **)this + 125));
  }
  if (*((char *)this + 999) < 0) {
    operator delete(*((void **)this + 122));
  }
  if (*((char *)this + 975) < 0) {
    operator delete(*((void **)this + 119));
  }
  *((void *)this + 98) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 920, *((void **)this + 116));
  if (*((char *)this + 911) < 0) {
    operator delete(*((void **)this + 111));
  }
  *((void *)this + 98) = &unk_1F0A52FB8;
  int v15 = (std::__shared_weak_count *)*((void *)this + 110);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((char *)this + 863) < 0) {
    operator delete(*((void **)this + 105));
  }
  if (*((char *)this + 839) < 0) {
    operator delete(*((void **)this + 102));
  }
  if (*((char *)this + 815) < 0) {
    operator delete(*((void **)this + 99));
  }
  *((void *)this + 80) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 760, *((char **)this + 96));
  *((void *)this + 80) = &unk_1F0A52FB8;
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 92);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (*((char *)this + 719) < 0) {
    operator delete(*((void **)this + 87));
  }
  if (*((char *)this + 695) < 0) {
    operator delete(*((void **)this + 84));
  }
  if (*((char *)this + 671) < 0) {
    operator delete(*((void **)this + 81));
  }
  *((void *)this + 60) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 616, *((void **)this + 78));
  if (*((char *)this + 607) < 0) {
    operator delete(*((void **)this + 73));
  }
  *((void *)this + 60) = &unk_1F0A52FB8;
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  if (*((char *)this + 535) < 0) {
    operator delete(*((void **)this + 64));
  }
  if (*((char *)this + 511) < 0) {
    operator delete(*((void **)this + 61));
  }
  *((void *)this + 40) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 456, *((void **)this + 58));
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  *((void *)this + 40) = &unk_1F0A52FB8;
  int v18 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (*((char *)this + 399) < 0) {
    operator delete(*((void **)this + 47));
  }
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  *((void *)this + 22) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 296, *((char **)this + 38));
  *((void *)this + 22) = &unk_1F0A52FB8;
  long long v19 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 2) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  *((void *)this + 2) = &unk_1F0A52FB8;
  long long v20 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

uint64_t quasar::OptionValue<int>::OptionValue(uint64_t a1, const std::string *a2, _DWORD *a3, const std::string *a4, int a5)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v10 = (std::string *)(a1 + 8);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(void *)a1 = &unk_1F0A51EC8;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  *(void *)(a1 + 136) = 0;
  int v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v11 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 9) {
      goto LABEL_10;
    }
    int v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    int v12 = (uint64_t *)a2;
    if (v11 != 9) {
      goto LABEL_10;
    }
  }
  uint64_t v13 = *v12;
  int v14 = *((unsigned __int8 *)v12 + 8);
  if (v13 == 0x656469727265766FLL && v14 == 115)
  {
    long long v32 = 0uLL;
    long long v33 = 0uLL;
    long long v30 = 0uLL;
    long long v31 = 0uLL;
    long long v28 = 0uLL;
    long long v29 = 0uLL;
    long long v26 = 0uLL;
    long long v27 = 0uLL;
    long long v24 = 0uLL;
    long long v25 = 0uLL;
    long long v22 = 0uLL;
    long long v23 = 0uLL;
    long long v20 = 0uLL;
    long long v21 = 0uLL;
    long long v18 = 0uLL;
    long long v19 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"overrides option name is reserved", 33);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "<default>");
  *(_DWORD *)(a1 + 104) = *a3;
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)__p);
  if (SBYTE7(v18) < 0) {
    operator delete(__p[0]);
  }
  std::string::operator=((std::string *)(a1 + 56), a4);
  *(_DWORD *)(a1 + 80) = a5;
  std::string::operator=(v10, a2);
  return a1;
}

void sub_1B1D1925C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__tree<std::string>::destroy(v15, v14[16]);
  quasar::OptionValueBase::~OptionValueBase((quasar::OptionValueBase *)v14);
  _Unwind_Resume(a1);
}

uint64_t quasar::OptionValue<double>::OptionValue(uint64_t a1, const std::string *a2, void *a3, const std::string *a4, int a5)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v10 = (std::string *)(a1 + 8);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(void *)a1 = &unk_1F0A51E90;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  *(void *)(a1 + 136) = 0;
  int v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v11 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 9) {
      goto LABEL_10;
    }
    int v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    int v12 = (uint64_t *)a2;
    if (v11 != 9) {
      goto LABEL_10;
    }
  }
  uint64_t v13 = *v12;
  int v14 = *((unsigned __int8 *)v12 + 8);
  if (v13 == 0x656469727265766FLL && v14 == 115)
  {
    long long v32 = 0uLL;
    long long v33 = 0uLL;
    long long v30 = 0uLL;
    long long v31 = 0uLL;
    long long v28 = 0uLL;
    long long v29 = 0uLL;
    long long v26 = 0uLL;
    long long v27 = 0uLL;
    long long v24 = 0uLL;
    long long v25 = 0uLL;
    long long v22 = 0uLL;
    long long v23 = 0uLL;
    long long v20 = 0uLL;
    long long v21 = 0uLL;
    long long v18 = 0uLL;
    long long v19 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"overrides option name is reserved", 33);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "<default>");
  *(void *)(a1 + 104) = *a3;
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)__p);
  if (SBYTE7(v18) < 0) {
    operator delete(__p[0]);
  }
  std::string::operator=((std::string *)(a1 + 56), a4);
  *(_DWORD *)(a1 + 80) = a5;
  std::string::operator=(v10, a2);
  return a1;
}

void sub_1B1D19440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__tree<std::string>::destroy(v15, v14[16]);
  quasar::OptionValueBase::~OptionValueBase((quasar::OptionValueBase *)v14);
  _Unwind_Resume(a1);
}

uint64_t quasar::OptionValue<BOOL>::OptionValue(uint64_t a1, const std::string *a2, unsigned char *a3, const std::string *a4, int a5)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v10 = (std::string *)(a1 + 8);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(void *)a1 = &unk_1F0A51E58;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  *(void *)(a1 + 136) = 0;
  int v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v11 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 9) {
      goto LABEL_10;
    }
    int v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    int v12 = (uint64_t *)a2;
    if (v11 != 9) {
      goto LABEL_10;
    }
  }
  uint64_t v13 = *v12;
  int v14 = *((unsigned __int8 *)v12 + 8);
  if (v13 == 0x656469727265766FLL && v14 == 115)
  {
    long long v32 = 0uLL;
    long long v33 = 0uLL;
    long long v30 = 0uLL;
    long long v31 = 0uLL;
    long long v28 = 0uLL;
    long long v29 = 0uLL;
    long long v26 = 0uLL;
    long long v27 = 0uLL;
    long long v24 = 0uLL;
    long long v25 = 0uLL;
    long long v22 = 0uLL;
    long long v23 = 0uLL;
    long long v20 = 0uLL;
    long long v21 = 0uLL;
    long long v18 = 0uLL;
    long long v19 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"overrides option name is reserved", 33);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "<default>");
  *(unsigned char *)(a1 + 104) = *a3;
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)__p);
  if (SBYTE7(v18) < 0) {
    operator delete(__p[0]);
  }
  std::string::operator=((std::string *)(a1 + 56), a4);
  *(_DWORD *)(a1 + 80) = a5;
  std::string::operator=(v10, a2);
  return a1;
}

void sub_1B1D19624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__tree<std::string>::destroy(v15, v14[16]);
  quasar::OptionValueBase::~OptionValueBase((quasar::OptionValueBase *)v14);
  _Unwind_Resume(a1);
}

uint64_t quasar::OptionValue<quasar::PTree>::OptionValue(uint64_t a1, const std::string *a2, uint64_t a3, const std::string *a4, int a5)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v10 = (std::string *)(a1 + 8);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(void *)a1 = &unk_1F0A51DB0;
  quasar::PTree::PTree((quasar::PTree *)(a1 + 104));
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 192) = 0;
  int v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v11 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 9) {
      goto LABEL_10;
    }
    int v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    int v12 = (uint64_t *)a2;
    if (v11 != 9) {
      goto LABEL_10;
    }
  }
  uint64_t v13 = *v12;
  int v14 = *((unsigned __int8 *)v12 + 8);
  if (v13 == 0x656469727265766FLL && v14 == 115)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"overrides option name is reserved", 33);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "<default>");
  quasar::OptionValue<quasar::PTree>::update(a1, a3, (const std::string *)__p);
  if (SBYTE7(v18) < 0) {
    operator delete(__p[0]);
  }
  std::string::operator=((std::string *)(a1 + 56), a4);
  *(_DWORD *)(a1 + 80) = a5;
  std::string::operator=(v10, a2);
  return a1;
}

void sub_1B1D1981C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy(v16, *v17);
  quasar::PTree::~PTree(v15);
  quasar::OptionValueBase::~OptionValueBase(v14);
  _Unwind_Resume(a1);
}

std::string *quasar::OptionValue<quasar::PTree>::update(uint64_t a1, uint64_t a2, const std::string *a3)
{
  *(_DWORD *)(a1 + 104) = *(_DWORD *)a2;
  uint64_t v6 = a1 + 104;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 8));
  if (v6 != a2) {
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(a1 + 136, *(std::string **)(a2 + 32), *(std::string **)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  }
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 56);
  return std::string::operator=((std::string *)(a1 + 32), a3);
}

uint64_t quasar::OptionValue<std::vector<std::string>>::OptionValue(uint64_t a1, const std::string *a2, uint64_t a3, const std::string *a4, int a5)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v10 = (std::string *)(a1 + 8);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(void *)a1 = &unk_1F0A51E20;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  int v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v11 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 9) {
      goto LABEL_10;
    }
    int v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    int v12 = (uint64_t *)a2;
    if (v11 != 9) {
      goto LABEL_10;
    }
  }
  uint64_t v13 = *v12;
  int v14 = *((unsigned __int8 *)v12 + 8);
  if (v13 == 0x656469727265766FLL && v14 == 115)
  {
    long long v32 = 0uLL;
    long long v33 = 0uLL;
    long long v30 = 0uLL;
    long long v31 = 0uLL;
    long long v28 = 0uLL;
    long long v29 = 0uLL;
    long long v26 = 0uLL;
    long long v27 = 0uLL;
    long long v24 = 0uLL;
    long long v25 = 0uLL;
    long long v22 = 0uLL;
    long long v23 = 0uLL;
    long long v20 = 0uLL;
    long long v21 = 0uLL;
    long long v18 = 0uLL;
    long long v19 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"overrides option name is reserved", 33);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "<default>");
  quasar::OptionValue<std::vector<std::string>>::update(a1, a3, (std::string *)__p);
  if (SBYTE7(v18) < 0) {
    operator delete(__p[0]);
  }
  std::string::operator=((std::string *)(a1 + 56), a4);
  *(_DWORD *)(a1 + 80) = a5;
  std::string::operator=(v10, a2);
  return a1;
}

void sub_1B1D19AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v15, *((void **)v14 + 18));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  quasar::OptionValueBase::~OptionValueBase(v14);
  _Unwind_Resume(a1);
}

std::string *quasar::OptionValue<std::vector<std::string>>::update(uint64_t a1, uint64_t a2, std::string *__str)
{
  uint64_t v5 = (std::vector<std::wstring> *)(a1 + 104);
  if (v5 != (std::vector<std::wstring> *)a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  return std::string::operator=((std::string *)(a1 + 32), __str);
}

void quasar::OptionValue<std::vector<std::string>>::updateOptionalFromPtree(uint64_t a1, uint64_t a2)
{
}

void sub_1B1D19C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a25)
  {
    std::string __p = &a22;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<std::vector<std::string>>::debugInfo(uint64_t a1)
{
  uint64_t v2 = quasar::OptionValue<std::string>::fallback(a1);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v32);
  int v3 = *(char *)(a1 + 31);
  if (v3 >= 0) {
    uint64_t v4 = a1 + 8;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v4, v5);
  std::string v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"[", 1);
  uint64_t v36 = ", ";
  uint64_t v37 = 2;
  quasar::joinToStream<std::vector<std::string>>(v7, (uint64_t *)(v2 + 104), (uint64_t *)&v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"]", 1);
  std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" (", 2);
  uint64_t v11 = *(void *)(v2 + 32);
  uint64_t v10 = v2 + 32;
  uint64_t v9 = v11;
  int v12 = *(char *)(v10 + 23);
  if (v12 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v10 + 8);
  }
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)")", 1);
  if (*(void *)(a1 + 152))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" overrides: [", 13);
    uint64_t v16 = *(void **)(a1 + 136);
    uint64_t v17 = (void *)(a1 + 144);
    if (v16 != (void *)(a1 + 144))
    {
      do
      {
        long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\"", 1);
        int v19 = *((char *)v16 + 55);
        if (v19 >= 0) {
          uint64_t v20 = (uint64_t)(v16 + 4);
        }
        else {
          uint64_t v20 = v16[4];
        }
        if (v19 >= 0) {
          uint64_t v21 = *((unsigned __int8 *)v16 + 55);
        }
        else {
          uint64_t v21 = v16[5];
        }
        long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\": ", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"[", 1);
        uint64_t v36 = ", ";
        uint64_t v37 = 2;
        quasar::joinToStream<std::vector<std::string>>(v23, v16 + 7, (uint64_t *)&v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
        long long v24 = (void *)*v17;
        long long v25 = (void *)(a1 + 144);
        if (*v17)
        {
          do
          {
            long long v26 = v24;
            long long v24 = (void *)v24[1];
          }
          while (v24);
        }
        else
        {
          do
          {
            long long v26 = (void *)v25[2];
            BOOL v27 = *v26 == (void)v25;
            long long v25 = v26;
          }
          while (v27);
        }
        if (v16 != v26) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", ", 2);
        }
        long long v28 = (void *)v16[1];
        if (v28)
        {
          do
          {
            long long v29 = v28;
            long long v28 = (void *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            long long v29 = (void *)v16[2];
            BOOL v27 = *v29 == (void)v16;
            uint64_t v16 = v29;
          }
          while (!v27);
        }
        uint64_t v16 = v29;
      }
      while (v29 != v17);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"]", 1);
  }
  std::stringbuf::str();
  v32[0] = *MEMORY[0x1E4FBA408];
  uint64_t v30 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v32 + *(void *)(v32[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v33[0] = v30;
  v33[1] = MEMORY[0x1E4FBA470] + 16;
  if (v34 < 0) {
    operator delete((void *)v33[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v35);
}

void sub_1B1D1A08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::OptionValue<std::vector<std::string>>::addOverride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  quasar::getOptional<std::vector<std::string>>(a4, a1 + 8);
}

void sub_1B1D1A160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13)
  {
    *(void *)(v13 - 24) = &a10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 24));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<std::vector<std::string>>::isOverridable()
{
  return 0;
}

std::string *quasar::OptionValue<std::vector<std::string>>::updateOptional(std::string *result, uint64_t a2, std::string *__str)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v4 = (uint64_t)result;
    uint64_t v5 = (std::vector<std::wstring> *)&result[4].__r_.__value_.__r.__words[1];
    if (v5 != (std::vector<std::wstring> *)a2) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    }
    return std::string::operator=((std::string *)(v4 + 32), __str);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_hint_unique_impl<std::string_view &,std::vector<std::string>&>(uint64_t **a1, uint64_t *a2, uint64_t a3, long long **a4)
{
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::string_view &,std::vector<std::string>&>((uint64_t)a1, a3, a4, (uint64_t)v11);
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, (const void **)v11[0] + 4);
  std::string v7 = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v11[0]);
    std::string v7 = v11[0];
    v11[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  return v7;
}

void sub_1B1D1A290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::string_view &,std::vector<std::string>&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  std::string v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<std::string_view &,std::vector<std::string>&,0>((std::string *)(v8 + 32), a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1D1A304(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<std::string_view &,std::vector<std::string>&,0>(std::string *__dst, uint64_t a2, long long **a3)
{
  size_t v4 = *(void *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    __dst->__r_.__value_.__l.__size_ = v4;
    __dst->__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  }
  else
  {
    *((unsigned char *)&__dst->__r_.__value_.__s + 23) = v4;
    uint64_t v7 = __dst;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v7, v6, v4);
LABEL_9:
  *((unsigned char *)v7 + v4) = 0;
  __dst[1].__r_.__value_.__r.__words[0] = 0;
  __dst[1].__r_.__value_.__l.__size_ = 0;
  __dst[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__dst + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return __dst;
}

void sub_1B1D1A3F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions(uint64_t a1)
{
  int v3 = (void **)(a1 + 328);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  int v3 = (void **)(a1 + 240);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void quasar::ProcessingGraph::creator<quasar::PDecPhraseBookBlock>()
{
}

void sub_1B1D1A6A0(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C4030823AFDLL);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::creator<quasar::AlternativesProcessorBlock>()
{
}

void sub_1B1D1A874(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C40C8FF1D3CLL);
  _Unwind_Resume(a1);
}

quasar::AlternativesProcessorOptions *quasar::AlternativesProcessorOptions::AlternativesProcessorOptions(quasar::AlternativesProcessorOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A57768;
  std::string::basic_string[abi:ne180100]<0>(&v5, "filter-redundant-tags");
  v3.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "flag on whether to filter out or keep hypotheses with redundant tags");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 16, &v5, &v3, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "tag-to-meta-json-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v3, "a json file that contains a mapping between tags and their corresponding string in the meta info ");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 160, &v5, &__p, &v3, 137);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D1A9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v22 - 17) < 0) {
    operator delete(*(void **)(v22 - 40));
  }
  quasar::OptionValue<BOOL>::~OptionValue(v21);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::creator<quasar::AlignmentProcessorBlock>()
{
}

void sub_1B1D1AABC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C403D3D1680);
  _Unwind_Resume(a1);
}

quasar::AlignmentProcessorBlock *quasar::AlignmentProcessorBlock::AlignmentProcessorBlock(quasar::AlignmentProcessorBlock *this)
{
  *((void *)this + 115) = &unk_1F0A53110;
  *((void *)this + 117) = 0;
  *((void *)this + 119) = 0;
  *((void *)this + 118) = 0;
  *((void *)this + 116) = (char *)this + 936;
  *((void *)this + 121) = 0;
  *((void *)this + 120) = 0;
  *((unsigned char *)this + 976) = 1;
  uint64_t v2 = off_1F0A32910;
  std::string v3 = off_1F0A32908;
  *(void *)this = off_1F0A32908;
  *(void *)((char *)this + *(v3 - 3)) = v2;
  quasar::AlignmentProcessorOptions::AlignmentProcessorOptions((quasar::AlignmentProcessorBlock *)((char *)this + 8));
  size_t v4 = off_1F0A32920;
  std::string v5 = off_1F0A32918;
  *((void *)this + 79) = off_1F0A32918;
  *(void *)((char *)this + *(v5 - 3) + 632) = v4;
  *(void *)this = off_1F0A565C0;
  *((void *)this + 115) = off_1F0A566C0;
  *((void *)this + 79) = &off_1F0A56620;
  std::string::basic_string[abi:ne180100]<0>(&v21, "source");
  if (SHIBYTE(v22) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 640), (const std::string::value_type *)v21, *((std::string::size_type *)&v21 + 1));
    int v6 = SHIBYTE(v22);
    *((unsigned char *)this + 664) = 0;
    *((void *)this + 84) = 0;
    *((void *)this + 86) = 0;
    *((void *)this + 85) = 0;
    if (v6 < 0) {
      operator delete((void *)v21);
    }
  }
  else
  {
    *((_OWORD *)this + 40) = v21;
    *((void *)this + 82) = v22;
    *((unsigned char *)this + 664) = 0;
    *((void *)this + 84) = 0;
    *((void *)this + 86) = 0;
    *((void *)this + 85) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "segmentor-encode");
  if (SHIBYTE(v20) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 29, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v7 = SHIBYTE(v20);
    *((unsigned char *)this + 720) = 0;
    *((void *)this + 91) = 0;
    *((void *)this + 93) = 0;
    *((void *)this + 92) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)((char *)this + 696) = *(_OWORD *)__p;
    *((void *)this + 89) = v20;
    *((unsigned char *)this + 720) = 0;
    *((void *)this + 91) = 0;
    *((void *)this + 93) = 0;
    *((void *)this + 92) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "pdec-decode");
  if (SHIBYTE(v18) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 752), (const std::string::value_type *)v17[0], (std::string::size_type)v17[1]);
    int v8 = SHIBYTE(v18);
    *((unsigned char *)this + 776) = 0;
    *((void *)this + 98) = 0;
    *((void *)this + 100) = 0;
    *((void *)this + 99) = 0;
    if (v8 < 0) {
      operator delete(v17[0]);
    }
  }
  else
  {
    *((_OWORD *)this + 47) = *(_OWORD *)v17;
    *((void *)this + 96) = v18;
    *((unsigned char *)this + 776) = 0;
    *((void *)this + 98) = 0;
    *((void *)this + 100) = 0;
    *((void *)this + 99) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "segmentor-decode");
  if (SHIBYTE(v16) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 808), (const std::string::value_type *)v15[0], (std::string::size_type)v15[1]);
    int v9 = SHIBYTE(v16);
    *((unsigned char *)this + 832) = 0;
    *((void *)this + 105) = 0;
    *((void *)this + 107) = 0;
    *((void *)this + 106) = 0;
    if (v9 < 0) {
      operator delete(v15[0]);
    }
  }
  else
  {
    *(_OWORD *)((char *)this + 808) = *(_OWORD *)v15;
    *((void *)this + 103) = v16;
    *((unsigned char *)this + 832) = 0;
    *((void *)this + 105) = 0;
    *((void *)this + 107) = 0;
    *((void *)this + 106) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "tokenized");
  uint64_t v10 = (std::string *)((char *)this + 864);
  if (SHIBYTE(v14) < 0)
  {
    std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v13[0], (std::string::size_type)v13[1]);
    int v11 = SHIBYTE(v14);
    *((unsigned char *)this + 888) = 0;
    *((void *)this + 112) = 0;
    *((void *)this + 114) = 0;
    *((void *)this + 113) = 0;
    if (v11 < 0) {
      operator delete(v13[0]);
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v13;
    *((void *)this + 110) = v14;
    *((unsigned char *)this + 888) = 0;
    *((void *)this + 112) = 0;
    *((void *)this + 114) = 0;
    *((void *)this + 113) = 0;
  }
  return this;
}

void sub_1B1D1AEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::ProcessingInput::~ProcessingInput(v38);
  quasar::ProcessingInput::~ProcessingInput(v37);
  quasar::ProcessingInput::~ProcessingInput(v36);
  quasar::ProcessingInput::~ProcessingInput(v35);
  quasar::ConfiguredProcessingBlock<quasar::AlignmentProcessorOptions>::~ConfiguredProcessingBlock(v33, (uint64_t *)(v39 + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v34);
  _Unwind_Resume(a1);
}

void sub_1B1D1AFB8()
{
}

void sub_1B1D1AFC0()
{
}

void sub_1B1D1AFC8()
{
}

void quasar::ProcessingInput::~ProcessingInput(void **this)
{
  uint64_t v2 = this + 4;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t *quasar::ConfiguredProcessingBlock<quasar::AlignmentProcessorOptions>::~ConfiguredProcessingBlock(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v3 - 24)) = a2[1];
  quasar::AlignmentProcessorOptions::~AlignmentProcessorOptions((quasar::AlignmentProcessorOptions *)(a1 + 1));
  return a1;
}

quasar::AlignmentProcessorOptions *quasar::AlignmentProcessorOptions::AlignmentProcessorOptions(quasar::AlignmentProcessorOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A56DF0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "word-level-alignments");
  v5.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "If set to true, then the BPE level alignments are merged into word level alignments");
  uint64_t v2 = (void *)quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 24, &v7, &v5, &__p, 156);
  *((void *)this + 2) = &unk_1F0A56208;
  *uint64_t v2 = &unk_1F0A56248;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "avoid-crossing-words");
  v5.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "If set to True, then the Alignment Processor Block expects the tokenized translations and the alignment ranges do not cross the tokenized words");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 168, &v7, &v5, &__p, 168);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "use-stripped-token-text");
  v5.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "If set to true, the whitespace stripped surface token representation is used instead of the internal representation.");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 312, &v7, &v5, &__p, 243);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "mode");
  std::string::basic_string[abi:ne180100]<0>(&__p, "default");
  std::string::basic_string[abi:ne180100]<0>(&v5, "meta info mode and format for projections (default / structured_prediction)");
  uint64_t v3 = (void *)quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 464, &v7, &__p, &v5, 249);
  *((void *)this + 57) = &unk_1F0A56188;
  *uint64_t v3 = &unk_1F0A561C8;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D1B330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  quasar::OptionValue<BOOL>::~OptionValue(v29);
  quasar::OptionValue<BOOL>::~OptionValue(v28);
  quasar::OverridableOptionValue<BOOL>::~OverridableOptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1B1D1B3D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1B3C4);
}

void sub_1B1D1B404()
{
}

void sub_1B1D1B40C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1B3CCLL);
}

uint64_t quasar::OverridableOptionValue<BOOL>::~OverridableOptionValue(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy(a1 + 128, *(char **)(a1 + 136));
  *(void *)(a1 + 8) = &unk_1F0A52FB8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t quasar::OverridableOptionValue<BOOL>::isOverridable()
{
  return 1;
}

uint64_t virtual thunk to'quasar::OverridableOptionValue<BOOL>::isOverridable()
{
  return 1;
}

uint64_t quasar::OverridableOptionValue<std::string>::isOverridable()
{
  return 1;
}

uint64_t virtual thunk to'quasar::OverridableOptionValue<std::string>::isOverridable()
{
  return 1;
}

void quasar::AlignmentProcessorOptions::~AlignmentProcessorOptions(quasar::AlignmentProcessorOptions *this)
{
  *(void *)this = &unk_1F0A56DF0;
  *((void *)this + 58) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 600, *((void **)this + 76));
  if (*((char *)this + 591) < 0) {
    operator delete(*((void **)this + 71));
  }
  *((void *)this + 58) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 70);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 543) < 0) {
    operator delete(*((void **)this + 65));
  }
  if (*((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  *((void *)this + 39) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 432, *((char **)this + 55));
  *((void *)this + 39) = &unk_1F0A52FB8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  if (*((char *)this + 367) < 0) {
    operator delete(*((void **)this + 43));
  }
  if (*((char *)this + 343) < 0) {
    operator delete(*((void **)this + 40));
  }
  *((void *)this + 21) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 288, *((char **)this + 37));
  *((void *)this + 21) = &unk_1F0A52FB8;
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 247) < 0) {
    operator delete(*((void **)this + 28));
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  *((void *)this + 3) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 144, *((char **)this + 19));
  *((void *)this + 3) = &unk_1F0A52FB8;
  std::string v5 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

void quasar::ProcessingGraph::creator<quasar::DoNotTranslateBlock>()
{
}

void sub_1B1D1B7E0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C408B4D3B57);
  _Unwind_Resume(a1);
}

quasar::DoNotTranslateBlock *quasar::DoNotTranslateBlock::DoNotTranslateBlock(quasar::DoNotTranslateBlock *this)
{
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 15) = &unk_1F0A53110;
  *((void *)this + 16) = (char *)this + 136;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((unsigned char *)this + 176) = 1;
  uint64_t v2 = off_1F0A327E0;
  uint64_t v3 = off_1F0A327D8;
  *(void *)this = off_1F0A327D8;
  *(void *)((char *)this + *(v3 - 3)) = v2;
  *(void *)this = &off_1F0A544A8;
  *((void *)this + 15) = off_1F0A54558;
  std::string::basic_string[abi:ne180100]<0>(__p, "source");
  if (SHIBYTE(v11) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v4 = SHIBYTE(v11);
    *((unsigned char *)this + 32) = 0;
    *((void *)this + 6) = 0;
    *((void *)this + 7) = 0;
    *((void *)this + 5) = 0;
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)((char *)this + 8) = *(_OWORD *)__p;
    *((void *)this + 3) = v11;
    *((unsigned char *)this + 32) = 0;
    *((void *)this + 6) = 0;
    *((void *)this + 7) = 0;
    *((void *)this + 5) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "target");
  std::string v5 = (std::string *)((char *)this + 64);
  if (SHIBYTE(v9) < 0)
  {
    std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)v8[0], (std::string::size_type)v8[1]);
    int v6 = SHIBYTE(v9);
    *((unsigned char *)this + 88) = 0;
    *((void *)this + 13) = 0;
    *((void *)this + 14) = 0;
    *((void *)this + 12) = 0;
    if (v6 < 0) {
      operator delete(v8[0]);
    }
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)v8;
    *((void *)this + 10) = v9;
    *((unsigned char *)this + 88) = 0;
    *((void *)this + 13) = 0;
    *((void *)this + 14) = 0;
    *((void *)this + 12) = 0;
  }
  return this;
}

void sub_1B1D1B9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  quasar::ProcessingInput::~ProcessingInput(v21);
  quasar::ProcessingBlock::~ProcessingBlock(v20);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::creator<quasar::AmbiguityAnnotatorBlock>()
{
}

void sub_1B1D1BAB4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C400DFE6407);
  _Unwind_Resume(a1);
}

quasar::AmbiguityAnnotatorBlock *quasar::AmbiguityAnnotatorBlock::AmbiguityAnnotatorBlock(quasar::AmbiguityAnnotatorBlock *this)
{
  *((void *)this + 338) = &unk_1F0A53110;
  *((void *)this + 340) = 0;
  *((void *)this + 342) = 0;
  *((void *)this + 341) = 0;
  *((void *)this + 339) = (char *)this + 2720;
  *((void *)this + 344) = 0;
  *((void *)this + 343) = 0;
  *((unsigned char *)this + 2760) = 1;
  uint64_t v2 = off_1F0A32948;
  uint64_t v3 = off_1F0A32940;
  *(void *)this = off_1F0A32940;
  *(void *)((char *)this + *(v3 - 3)) = v2;
  quasar::AmbiguityAnnotatorOptions::AmbiguityAnnotatorOptions((quasar::AmbiguityAnnotatorBlock *)((char *)this + 8));
  int v4 = off_1F0A32958;
  std::string v5 = off_1F0A32950;
  *((void *)this + 321) = off_1F0A32950;
  *(void *)((char *)this + *(v5 - 3) + 2568) = v4;
  *(void *)this = off_1F0A56760;
  *((void *)this + 338) = off_1F0A56860;
  *((void *)this + 321) = &off_1F0A567C0;
  std::string::basic_string[abi:ne180100]<0>(__p, "source");
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 2576), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v6 = SHIBYTE(v13);
    *((unsigned char *)this + 2600) = 0;
    *((void *)this + 326) = 0;
    *((void *)this + 328) = 0;
    *((void *)this + 327) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *((_OWORD *)this + 161) = *(_OWORD *)__p;
    *((void *)this + 324) = v13;
    *((unsigned char *)this + 2600) = 0;
    *((void *)this + 326) = 0;
    *((void *)this + 328) = 0;
    *((void *)this + 327) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "nbest");
  std::string v7 = (std::string *)((char *)this + 2632);
  if (SHIBYTE(v11) < 0)
  {
    std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v10[0], (std::string::size_type)v10[1]);
    int v8 = SHIBYTE(v11);
    *((unsigned char *)this + 2656) = 0;
    *((void *)this + 333) = 0;
    *((void *)this + 335) = 0;
    *((void *)this + 334) = 0;
    if (v8 < 0) {
      operator delete(v10[0]);
    }
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)v10;
    *((void *)this + 331) = v11;
    *((unsigned char *)this + 2656) = 0;
    *((void *)this + 333) = 0;
    *((void *)this + 335) = 0;
    *((void *)this + 334) = 0;
  }
  *((_OWORD *)this + 168) = 0u;
  return this;
}

void sub_1B1D1BDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  quasar::ProcessingInput::~ProcessingInput(v22);
  quasar::ConfiguredProcessingBlock<quasar::AmbiguityAnnotatorOptions>::~ConfiguredProcessingBlock(v20, (uint64_t *)(v23 + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v21);
  _Unwind_Resume(a1);
}

uint64_t *quasar::ConfiguredProcessingBlock<quasar::AmbiguityAnnotatorOptions>::~ConfiguredProcessingBlock(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v3 - 24)) = a2[1];
  quasar::AmbiguityAnnotatorOptions::~AmbiguityAnnotatorOptions((quasar::AmbiguityAnnotatorOptions *)(a1 + 1));
  return a1;
}

quasar::AmbiguityAnnotatorOptions *quasar::AmbiguityAnnotatorOptions::AmbiguityAnnotatorOptions(quasar::AmbiguityAnnotatorOptions *this)
{
  *(void *)quasar::PhraseBookOptions::PhraseBookOptions(this) = &unk_1F0A56E38;
  std::string::basic_string[abi:ne180100]<0>(&v7, "source-locale");
  std::string::basic_string[abi:ne180100]<0>(&v6, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "source locale");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1216, &v7, &v6, &__p, 144);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "disambiguation-dictionary-file");
  std::string::basic_string[abi:ne180100]<0>(&v6, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "disambiguation dictionary file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1376, &v7, &v6, &__p, 144);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "max-match-length");
  LODWORD(__p.__r_.__value_.__l.__data_) = 4;
  std::string::basic_string[abi:ne180100]<0>(&v6, "maximum token sequence length in matching");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 1536, &v7, &__p, &v6, 173);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "prefer-position");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v6, "prefer early match position over multiword matches");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1680, &v7, &__p, &v6, 173);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "prefer-multiword");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v6, "prefer longer multiword matches to shorter ones");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1824, &v7, &__p, &v6, 173);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "multisense-keep");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v6, "number of senses to keep when several senses match a word in a hypotheses");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 1968, &v7, &__p, &v6, 144);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "strip-gender");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v6, "keep 'gender' in the metainfo (false), or remove it (true)");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2112, &v7, &__p, &v6, 247);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "prune-nbest");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v6, "if we have alternatives, remove nbest entries that are not alternatives (false, for gender disambiguation compatibility)");
  uint64_t v2 = (void *)quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2264, &v7, &__p, &v6, 256);
  *((void *)this + 282) = &unk_1F0A56208;
  *uint64_t v2 = &unk_1F0A56248;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "allow-multiple-same-sense-alternatives");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v6, "allow the same sense to be annotated on more than one hypothesis (true, for gender disambiguation compatibility)");
  uint64_t v3 = (void *)quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2416, &v7, &__p, &v6, 266);
  *((void *)this + 301) = &unk_1F0A56208;
  *uint64_t v3 = &unk_1F0A56248;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D1C33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  quasar::OverridableOptionValue<BOOL>::~OverridableOptionValue(v32);
  quasar::OptionValue<BOOL>::~OptionValue(v31);
  quasar::OptionValue<int>::~OptionValue(v30);
  quasar::OptionValue<BOOL>::~OptionValue(v29);
  quasar::OptionValue<BOOL>::~OptionValue(v28);
  quasar::OptionValue<int>::~OptionValue(v27);
  quasar::OptionValue<std::string>::~OptionValue(v26);
  quasar::OptionValue<std::string>::~OptionValue(v25);
  quasar::PhraseBookOptions::~PhraseBookOptions(v24);
  _Unwind_Resume(a1);
}

void sub_1B1D1C3F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1C3B8);
}

void sub_1B1D1C428()
{
}

void sub_1B1D1C430(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1C3C0);
}

void sub_1B1D1C460()
{
}

void sub_1B1D1C468(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1C3C8);
}

void sub_1B1D1C498()
{
}

void sub_1B1D1C4A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1C3D0);
}

void sub_1B1D1C4D0()
{
}

void sub_1B1D1C4D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1C3D8);
}

void sub_1B1D1C508()
{
}

void sub_1B1D1C510(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1C3E0);
}

void sub_1B1D1C558()
{
}

void sub_1B1D1C560(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1C3E8);
}

void sub_1B1D1C5A8()
{
}

quasar::PhraseBookOptions *quasar::PhraseBookOptions::PhraseBookOptions(quasar::PhraseBookOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A53C40;
  std::string::basic_string[abi:ne180100]<0>(&v5, "case-sensitive");
  v3.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "case sensitive phrase book?");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 16, &v5, &v3, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "pb-file-list");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v3, "phrase book file list");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 160, &v5, &__p, &v3, 133);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "nbest");
  LODWORD(v3.__r_.__value_.__l.__data_) = 3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "maximum entries in nbest list to produce");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 320, &v5, &v3, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "reset-meta-info");
  v3.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "reset metaInfo json");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 464, &v5, &v3, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "phrase-book-mode");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v3, "used to disable phrase book block");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 608, &v5, &__p, &v3, 133);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "filter-entries");
  v3.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "filter to make translations unique");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 768, &v5, &v3, &__p, 184);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "normalization-pattern-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v3, "apply regular expressions from file for normalized lookup");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 912, &v5, &__p, &v3, 187);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "normalize-on-load");
  v3.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "apply normalization (lowercaseing/regex) to phrasebook keys on load");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1072, &v5, &v3, &__p, 196);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D1C96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  quasar::OptionValue<std::string>::~OptionValue(v33);
  quasar::OptionValue<BOOL>::~OptionValue(v32);
  quasar::OptionValue<std::string>::~OptionValue(v31);
  quasar::OptionValue<BOOL>::~OptionValue(v30);
  quasar::OptionValue<int>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(v28);
  quasar::OptionValue<BOOL>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1B1D1CA30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1CA00);
}

void sub_1B1D1CA60()
{
}

void sub_1B1D1CA68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1CA08);
}

void sub_1B1D1CAB0()
{
}

void sub_1B1D1CAB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1CA10);
}

void sub_1B1D1CAE8()
{
}

void sub_1B1D1CAF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1CA18);
}

void sub_1B1D1CB20()
{
}

void sub_1B1D1CB28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1CA20);
}

void sub_1B1D1CB70()
{
}

void sub_1B1D1CB78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1CA28);
}

void quasar::PhraseBookOptions::~PhraseBookOptions(quasar::PhraseBookOptions *this)
{
  *(void *)this = &unk_1F0A53C40;
  *((void *)this + 134) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 1192, *((char **)this + 150));
  *((void *)this + 134) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 146);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 1151) < 0) {
    operator delete(*((void **)this + 141));
  }
  if (*((char *)this + 1127) < 0) {
    operator delete(*((void **)this + 138));
  }
  if (*((char *)this + 1103) < 0) {
    operator delete(*((void **)this + 135));
  }
  *((void *)this + 114) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1048, *((void **)this + 132));
  if (*((char *)this + 1039) < 0) {
    operator delete(*((void **)this + 127));
  }
  *((void *)this + 114) = &unk_1F0A52FB8;
  std::string v3 = (std::__shared_weak_count *)*((void *)this + 126);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 991) < 0) {
    operator delete(*((void **)this + 121));
  }
  if (*((char *)this + 967) < 0) {
    operator delete(*((void **)this + 118));
  }
  if (*((char *)this + 943) < 0) {
    operator delete(*((void **)this + 115));
  }
  *((void *)this + 96) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 888, *((char **)this + 112));
  *((void *)this + 96) = &unk_1F0A52FB8;
  int v4 = (std::__shared_weak_count *)*((void *)this + 108);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 847) < 0) {
    operator delete(*((void **)this + 103));
  }
  if (*((char *)this + 823) < 0) {
    operator delete(*((void **)this + 100));
  }
  if (*((char *)this + 799) < 0) {
    operator delete(*((void **)this + 97));
  }
  *((void *)this + 76) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 744, *((void **)this + 94));
  if (*((char *)this + 735) < 0) {
    operator delete(*((void **)this + 89));
  }
  *((void *)this + 76) = &unk_1F0A52FB8;
  std::string v5 = (std::__shared_weak_count *)*((void *)this + 88);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 687) < 0) {
    operator delete(*((void **)this + 83));
  }
  if (*((char *)this + 663) < 0) {
    operator delete(*((void **)this + 80));
  }
  if (*((char *)this + 639) < 0) {
    operator delete(*((void **)this + 77));
  }
  *((void *)this + 58) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 584, *((char **)this + 74));
  *((void *)this + 58) = &unk_1F0A52FB8;
  std::string v6 = (std::__shared_weak_count *)*((void *)this + 70);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 543) < 0) {
    operator delete(*((void **)this + 65));
  }
  if (*((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  *((void *)this + 40) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 440, *((char **)this + 56));
  *((void *)this + 40) = &unk_1F0A52FB8;
  std::string v7 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((char *)this + 399) < 0) {
    operator delete(*((void **)this + 47));
  }
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  *((void *)this + 20) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 296, *((void **)this + 38));
  if (*((char *)this + 287) < 0) {
    operator delete(*((void **)this + 33));
  }
  *((void *)this + 20) = &unk_1F0A52FB8;
  int v8 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  *((void *)this + 2) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 136, *((char **)this + 18));
  *((void *)this + 2) = &unk_1F0A52FB8;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void quasar::AmbiguityAnnotatorOptions::~AmbiguityAnnotatorOptions(quasar::AmbiguityAnnotatorOptions *this)
{
  *(void *)this = &unk_1F0A56E38;
  *((void *)this + 302) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 2536, *((char **)this + 318));
  *((void *)this + 302) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 314);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 2495) < 0) {
    operator delete(*((void **)this + 309));
  }
  if (*((char *)this + 2471) < 0) {
    operator delete(*((void **)this + 306));
  }
  if (*((char *)this + 2447) < 0) {
    operator delete(*((void **)this + 303));
  }
  *((void *)this + 283) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 2384, *((char **)this + 299));
  *((void *)this + 283) = &unk_1F0A52FB8;
  std::string v3 = (std::__shared_weak_count *)*((void *)this + 295);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 2343) < 0) {
    operator delete(*((void **)this + 290));
  }
  if (*((char *)this + 2319) < 0) {
    operator delete(*((void **)this + 287));
  }
  if (*((char *)this + 2295) < 0) {
    operator delete(*((void **)this + 284));
  }
  *((void *)this + 264) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 2232, *((char **)this + 280));
  *((void *)this + 264) = &unk_1F0A52FB8;
  int v4 = (std::__shared_weak_count *)*((void *)this + 276);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 2191) < 0) {
    operator delete(*((void **)this + 271));
  }
  if (*((char *)this + 2167) < 0) {
    operator delete(*((void **)this + 268));
  }
  if (*((char *)this + 2143) < 0) {
    operator delete(*((void **)this + 265));
  }
  *((void *)this + 246) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 2088, *((char **)this + 262));
  *((void *)this + 246) = &unk_1F0A52FB8;
  std::string v5 = (std::__shared_weak_count *)*((void *)this + 258);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 2047) < 0) {
    operator delete(*((void **)this + 253));
  }
  if (*((char *)this + 2023) < 0) {
    operator delete(*((void **)this + 250));
  }
  if (*((char *)this + 1999) < 0) {
    operator delete(*((void **)this + 247));
  }
  *((void *)this + 228) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 1944, *((char **)this + 244));
  *((void *)this + 228) = &unk_1F0A52FB8;
  std::string v6 = (std::__shared_weak_count *)*((void *)this + 240);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 1903) < 0) {
    operator delete(*((void **)this + 235));
  }
  if (*((char *)this + 1879) < 0) {
    operator delete(*((void **)this + 232));
  }
  if (*((char *)this + 1855) < 0) {
    operator delete(*((void **)this + 229));
  }
  *((void *)this + 210) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 1800, *((char **)this + 226));
  *((void *)this + 210) = &unk_1F0A52FB8;
  std::string v7 = (std::__shared_weak_count *)*((void *)this + 222);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((char *)this + 1759) < 0) {
    operator delete(*((void **)this + 217));
  }
  if (*((char *)this + 1735) < 0) {
    operator delete(*((void **)this + 214));
  }
  if (*((char *)this + 1711) < 0) {
    operator delete(*((void **)this + 211));
  }
  *((void *)this + 192) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 1656, *((char **)this + 208));
  *((void *)this + 192) = &unk_1F0A52FB8;
  int v8 = (std::__shared_weak_count *)*((void *)this + 204);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*((char *)this + 1615) < 0) {
    operator delete(*((void **)this + 199));
  }
  if (*((char *)this + 1591) < 0) {
    operator delete(*((void **)this + 196));
  }
  if (*((char *)this + 1567) < 0) {
    operator delete(*((void **)this + 193));
  }
  *((void *)this + 172) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1512, *((void **)this + 190));
  if (*((char *)this + 1503) < 0) {
    operator delete(*((void **)this + 185));
  }
  *((void *)this + 172) = &unk_1F0A52FB8;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 184);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*((char *)this + 1455) < 0) {
    operator delete(*((void **)this + 179));
  }
  if (*((char *)this + 1431) < 0) {
    operator delete(*((void **)this + 176));
  }
  if (*((char *)this + 1407) < 0) {
    operator delete(*((void **)this + 173));
  }
  *((void *)this + 152) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1352, *((void **)this + 170));
  if (*((char *)this + 1343) < 0) {
    operator delete(*((void **)this + 165));
  }
  *((void *)this + 152) = &unk_1F0A52FB8;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 164);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*((char *)this + 1295) < 0) {
    operator delete(*((void **)this + 159));
  }
  if (*((char *)this + 1271) < 0) {
    operator delete(*((void **)this + 156));
  }
  if (*((char *)this + 1247) < 0) {
    operator delete(*((void **)this + 153));
  }
  quasar::PhraseBookOptions::~PhraseBookOptions(this);
}

void quasar::ProcessingGraph::creator<quasar::SimpleTokenizerBlock>()
{
}

void sub_1B1D1D6DC(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C4054690CFBLL);
  _Unwind_Resume(a1);
}

quasar::SimpleTokenizerOptions *quasar::SimpleTokenizerOptions::SimpleTokenizerOptions(quasar::SimpleTokenizerOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A56470;
  std::string::basic_string[abi:ne180100]<0>(&v5, "tokenizer-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "tokenizer regular expression replacement (sed / perl -p style)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 125);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D1D7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::creator<quasar::PhraseBookBlock>()
{
}

void sub_1B1D1D998(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C40C6145FEFLL);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::creator<quasar::InputHammerBlock>()
{
}

void sub_1B1D1DB60(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C404F3F1B56);
  _Unwind_Resume(a1);
}

quasar::InputHammerOptions *quasar::InputHammerOptions::InputHammerOptions(quasar::InputHammerOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A53F50;
  std::string::basic_string[abi:ne180100]<0>(&v6, "filter-list-file");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "filter list file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v6, &v5, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "source-locale");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "source locale");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 176, &v6, &v5, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "source-token");
  std::string::basic_string[abi:ne180100]<0>(&v5, "source tag for multilingual model");
  uint64_t v2 = (const std::string *)quasar::OptionValue<std::string>::value((void *)this + 22);
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 336, &v6, v2, &v5, 133);
  *((void *)this + 58) = (char *)this + 176;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "reset-meta-info");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "reset metaInfo json");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 496, &v6, &__p, &v5, 133);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D1DD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  quasar::OptionValue<std::string>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::creator<quasar::RomanizerBlock>()
{
}

void sub_1B1D1E03C(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C40E22ACA5FLL);
  _Unwind_Resume(a1);
}

quasar::RomanizerOptions *quasar::RomanizerOptions::RomanizerOptions(quasar::RomanizerOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A53888;
  std::string::basic_string[abi:ne180100]<0>(&v5, "romanizer");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "romanizer");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "pron-guide-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "pron guide model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 176, &v5, &v4, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "pron-guide-preprocessing");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v4, "pron guide preprocessing (splitting into characters and <space> insertion)");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 336, &v5, &__p, &v4, 133);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "strip-token");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v4, "strip tokenizer artefacts on romanizer input");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 480, &v5, &__p, &v4, 133);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "enable-memory-map");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "memory map pronunciator model");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 624, &v5, &__p, &v4, 198);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "share-pron-guide-model");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "share model instance with other identical blocks");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 768, &v5, &__p, &v4, 198);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "dynamic-switch-key");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "dynamic weight switching key for espresso model");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 912, &v5, &v4, &__p, 267);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D1E3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  quasar::OptionValue<BOOL>::~OptionValue(v32);
  quasar::OptionValue<BOOL>::~OptionValue(v31);
  quasar::OptionValue<BOOL>::~OptionValue(v30);
  quasar::OptionValue<BOOL>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1B1D1E480(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1E458);
}

void sub_1B1D1E4B0()
{
}

void sub_1B1D1E4B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1E460);
}

void sub_1B1D1E4E8()
{
}

void sub_1B1D1E4F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1E468);
}

void sub_1B1D1E520()
{
}

void sub_1B1D1E528(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1E470);
}

void sub_1B1D1E570()
{
}

void sub_1B1D1E578(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1E478);
}

void quasar::ProcessingGraph::creator<quasar::SentencePieceBlock>()
{
}

void sub_1B1D1E73C(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C408A8CFFB4);
  _Unwind_Resume(a1);
}

quasar::SentencePieceOptions *quasar::SentencePieceOptions::SentencePieceOptions(quasar::SentencePieceOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A552C0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "sentence-piece-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "sentence piece model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 135);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "reset-meta-info");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "reset metaInfo json");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 176, &v5, &__p, &v4, 135);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "action");
  std::string::basic_string[abi:ne180100]<0>(&v4, "encode");
  std::string::basic_string[abi:ne180100]<0>(&__p, "action to perform (encode/decode/decode-api)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 320, &v5, &v4, &__p, 135);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "confidence-threshold");
  __p.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "confidence threshold");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 480, &v5, &__p, &v4, 153);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D1E970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  quasar::OptionValue<std::string>::~OptionValue(v29);
  quasar::OptionValue<BOOL>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1B1D1EA14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D1EA04);
}

void sub_1B1D1EA44()
{
}

void sub_1B1D1EA4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1EA0CLL);
}

void quasar::ProcessingGraph::creator<quasar::QualityEstimatorBlock>()
{
}

void sub_1B1D1EAFC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40C65891A1);
  _Unwind_Resume(a1);
}

quasar::QualityEstimatorBlock *quasar::QualityEstimatorBlock::QualityEstimatorBlock(quasar::QualityEstimatorBlock *this)
{
  *((void *)this + 207) = &unk_1F0A53110;
  *((void *)this + 209) = 0;
  *((void *)this + 211) = 0;
  *((void *)this + 210) = 0;
  *((void *)this + 208) = (char *)this + 1672;
  *((void *)this + 213) = 0;
  *((void *)this + 212) = 0;
  *((unsigned char *)this + 1712) = 1;
  uint64_t v2 = off_1F0A328D8;
  std::string v3 = off_1F0A328D0;
  *(void *)this = off_1F0A328D0;
  *(void *)((char *)this + *(v3 - 3)) = v2;
  quasar::QualityEstimatorOptions::QualityEstimatorOptions((quasar::QualityEstimatorBlock *)((char *)this + 8));
  std::string v4 = off_1F0A328E8;
  std::string v5 = off_1F0A328E0;
  *((void *)this + 183) = off_1F0A328E0;
  *(void *)((char *)this + *(v5 - 3) + 1464) = v4;
  *(void *)this = off_1F0A55CE0;
  *((void *)this + 207) = off_1F0A55DE0;
  *((void *)this + 183) = &off_1F0A55D40;
  std::string::basic_string[abi:ne180100]<0>(__p, "source");
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1472), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v6 = SHIBYTE(v13);
    *((unsigned char *)this + 1496) = 0;
    *((void *)this + 188) = 0;
    *((void *)this + 190) = 0;
    *((void *)this + 189) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *((_OWORD *)this + 92) = *(_OWORD *)__p;
    *((void *)this + 186) = v13;
    *((unsigned char *)this + 1496) = 0;
    *((void *)this + 188) = 0;
    *((void *)this + 190) = 0;
    *((void *)this + 189) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "nbest");
  std::string v7 = (std::string *)((char *)this + 1528);
  if (SHIBYTE(v11) < 0)
  {
    std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v10[0], (std::string::size_type)v10[1]);
    int v8 = SHIBYTE(v11);
    *((unsigned char *)this + 1552) = 0;
    *((void *)this + 195) = 0;
    *((void *)this + 197) = 0;
    *((void *)this + 196) = 0;
    if (v8 < 0) {
      operator delete(v10[0]);
    }
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)v10;
    *((void *)this + 193) = v11;
    *((unsigned char *)this + 1552) = 0;
    *((void *)this + 195) = 0;
    *((void *)this + 197) = 0;
    *((void *)this + 196) = 0;
  }
  *((void *)this + 206) = 0;
  *((_OWORD *)this + 102) = 0u;
  *((_OWORD *)this + 101) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *((_OWORD *)this + 99) = 0u;
  return this;
}

void sub_1B1D1EDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  quasar::ProcessingInput::~ProcessingInput(v22);
  quasar::ConfiguredProcessingBlock<quasar::QualityEstimatorOptions>::~ConfiguredProcessingBlock(v20, (uint64_t *)(v23 + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v21);
  _Unwind_Resume(a1);
}

uint64_t *quasar::ConfiguredProcessingBlock<quasar::QualityEstimatorOptions>::~ConfiguredProcessingBlock(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v3 - 24)) = a2[1];
  quasar::QualityEstimatorOptions::~QualityEstimatorOptions((quasar::QualityEstimatorOptions *)(a1 + 1));
  return a1;
}

quasar::QualityEstimatorOptions *quasar::QualityEstimatorOptions::QualityEstimatorOptions(quasar::QualityEstimatorOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A56AA8;
  std::string::basic_string[abi:ne180100]<0>(&v5, "src-locale");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the source locale");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "tgt-locale");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the target locale");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 176, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "features");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "list of features");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 336, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "src-ovs-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the source OVS file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 496, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "tgt-ovs-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the target OVS file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 656, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "fertility-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the fertility file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 816, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "min-trans-len-percent");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the minimum translation length (in percent of expected length)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 976, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "max-trans-len-percent");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the maximum translation length (in percent of expected length)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1136, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "regex-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the regular expression file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1296, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D1F3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  quasar::OptionValue<std::string>::~OptionValue(v34);
  quasar::OptionValue<std::string>::~OptionValue(v33);
  quasar::OptionValue<std::string>::~OptionValue(v32);
  quasar::OptionValue<std::string>::~OptionValue(v31);
  quasar::OptionValue<std::string>::~OptionValue(v30);
  quasar::OptionValue<std::string>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1B1D1F4BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1F484);
}

void sub_1B1D1F504()
{
}

void sub_1B1D1F50C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1F48CLL);
}

void sub_1B1D1F554()
{
}

void sub_1B1D1F55C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1F494);
}

void sub_1B1D1F5A4()
{
}

void sub_1B1D1F5AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1F49CLL);
}

void sub_1B1D1F5F4()
{
}

void sub_1B1D1F5FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1F4A4);
}

void sub_1B1D1F644()
{
}

void sub_1B1D1F64C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1F4ACLL);
}

void sub_1B1D1F694()
{
}

void sub_1B1D1F69C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D1F4B4);
}

void quasar::QualityEstimatorOptions::~QualityEstimatorOptions(quasar::QualityEstimatorOptions *this)
{
  *(void *)this = &unk_1F0A56AA8;
  *((void *)this + 162) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1432, *((void **)this + 180));
  if (*((char *)this + 1423) < 0) {
    operator delete(*((void **)this + 175));
  }
  *((void *)this + 162) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 174);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 1375) < 0) {
    operator delete(*((void **)this + 169));
  }
  if (*((char *)this + 1351) < 0) {
    operator delete(*((void **)this + 166));
  }
  if (*((char *)this + 1327) < 0) {
    operator delete(*((void **)this + 163));
  }
  *((void *)this + 142) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1272, *((void **)this + 160));
  if (*((char *)this + 1263) < 0) {
    operator delete(*((void **)this + 155));
  }
  *((void *)this + 142) = &unk_1F0A52FB8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 154);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 1215) < 0) {
    operator delete(*((void **)this + 149));
  }
  if (*((char *)this + 1191) < 0) {
    operator delete(*((void **)this + 146));
  }
  if (*((char *)this + 1167) < 0) {
    operator delete(*((void **)this + 143));
  }
  *((void *)this + 122) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1112, *((void **)this + 140));
  if (*((char *)this + 1103) < 0) {
    operator delete(*((void **)this + 135));
  }
  *((void *)this + 122) = &unk_1F0A52FB8;
  std::string v4 = (std::__shared_weak_count *)*((void *)this + 134);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 1055) < 0) {
    operator delete(*((void **)this + 129));
  }
  if (*((char *)this + 1031) < 0) {
    operator delete(*((void **)this + 126));
  }
  if (*((char *)this + 1007) < 0) {
    operator delete(*((void **)this + 123));
  }
  *((void *)this + 102) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 952, *((void **)this + 120));
  if (*((char *)this + 943) < 0) {
    operator delete(*((void **)this + 115));
  }
  *((void *)this + 102) = &unk_1F0A52FB8;
  std::string v5 = (std::__shared_weak_count *)*((void *)this + 114);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 895) < 0) {
    operator delete(*((void **)this + 109));
  }
  if (*((char *)this + 871) < 0) {
    operator delete(*((void **)this + 106));
  }
  if (*((char *)this + 847) < 0) {
    operator delete(*((void **)this + 103));
  }
  *((void *)this + 82) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 792, *((void **)this + 100));
  if (*((char *)this + 783) < 0) {
    operator delete(*((void **)this + 95));
  }
  *((void *)this + 82) = &unk_1F0A52FB8;
  int v6 = (std::__shared_weak_count *)*((void *)this + 94);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 735) < 0) {
    operator delete(*((void **)this + 89));
  }
  if (*((char *)this + 711) < 0) {
    operator delete(*((void **)this + 86));
  }
  if (*((char *)this + 687) < 0) {
    operator delete(*((void **)this + 83));
  }
  *((void *)this + 62) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 632, *((void **)this + 80));
  if (*((char *)this + 623) < 0) {
    operator delete(*((void **)this + 75));
  }
  *((void *)this + 62) = &unk_1F0A52FB8;
  std::string v7 = (std::__shared_weak_count *)*((void *)this + 74);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((char *)this + 575) < 0) {
    operator delete(*((void **)this + 69));
  }
  if (*((char *)this + 551) < 0) {
    operator delete(*((void **)this + 66));
  }
  if (*((char *)this + 527) < 0) {
    operator delete(*((void **)this + 63));
  }
  *((void *)this + 42) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 472, *((void **)this + 60));
  if (*((char *)this + 463) < 0) {
    operator delete(*((void **)this + 55));
  }
  *((void *)this + 42) = &unk_1F0A52FB8;
  int v8 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*((char *)this + 415) < 0) {
    operator delete(*((void **)this + 49));
  }
  if (*((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  if (*((char *)this + 367) < 0) {
    operator delete(*((void **)this + 43));
  }
  *((void *)this + 22) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 312, *((void **)this + 40));
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }
  *((void *)this + 22) = &unk_1F0A52FB8;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 2) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  *((void *)this + 2) = &unk_1F0A52FB8;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void quasar::ProcessingGraph::creator<quasar::PDecForceAlignBlock>()
{
}

void sub_1B1D1FCC0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C403204C804);
  _Unwind_Resume(a1);
}

quasar::PDecForceAlignBlock *quasar::PDecForceAlignBlock::PDecForceAlignBlock(quasar::PDecForceAlignBlock *this)
{
  *((void *)this + 311) = &unk_1F0A53110;
  *((void *)this + 313) = 0;
  *((void *)this + 315) = 0;
  *((void *)this + 314) = 0;
  *((void *)this + 312) = (char *)this + 2504;
  *((void *)this + 317) = 0;
  *((void *)this + 316) = 0;
  *((unsigned char *)this + 2544) = 1;
  uint64_t v2 = off_1F0A32820;
  uint64_t v3 = off_1F0A32818;
  *(void *)this = off_1F0A32818;
  *(void *)((char *)this + *(v3 - 3)) = v2;
  quasar::PDecForceAlignOptions::PDecForceAlignOptions((quasar::PDecForceAlignBlock *)((char *)this + 8));
  std::string v4 = off_1F0A32830;
  std::string v5 = off_1F0A32828;
  *((void *)this + 287) = off_1F0A32828;
  *(void *)((char *)this + *(v5 - 3) + 2296) = v4;
  *(void *)this = off_1F0A54988;
  *((void *)this + 311) = off_1F0A54A88;
  *((void *)this + 287) = &off_1F0A549E8;
  std::string::basic_string[abi:ne180100]<0>(__p, "source");
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 96, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v6 = SHIBYTE(v13);
    *((unsigned char *)this + 2328) = 0;
    *((void *)this + 292) = 0;
    *((void *)this + 294) = 0;
    *((void *)this + 293) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *((_OWORD *)this + 144) = *(_OWORD *)__p;
    *((void *)this + 290) = v13;
    *((unsigned char *)this + 2328) = 0;
    *((void *)this + 292) = 0;
    *((void *)this + 294) = 0;
    *((void *)this + 293) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "target");
  std::string v7 = (std::string *)((char *)this + 2360);
  if (SHIBYTE(v11) < 0)
  {
    std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v10[0], (std::string::size_type)v10[1]);
    int v8 = SHIBYTE(v11);
    *((unsigned char *)this + 2384) = 0;
    *((void *)this + 299) = 0;
    *((void *)this + 301) = 0;
    *((void *)this + 300) = 0;
    if (v8 < 0) {
      operator delete(v10[0]);
    }
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)v10;
    *((void *)this + 297) = v11;
    *((unsigned char *)this + 2384) = 0;
    *((void *)this + 299) = 0;
    *((void *)this + 301) = 0;
    *((void *)this + 300) = 0;
  }
  *((_DWORD *)this + 608) = 0;
  *((_OWORD *)this + 151) = 0u;
  *((unsigned char *)this + 2440) = 0;
  *(void *)((char *)this + 2444) = 0x400000003;
  *(_OWORD *)((char *)this + 2456) = 0u;
  *(_OWORD *)((char *)this + 2472) = 0u;
  return this;
}

void sub_1B1D1FFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  quasar::ProcessingInput::~ProcessingInput(v22);
  quasar::ConfiguredProcessingBlock<quasar::PDecForceAlignOptions>::~ConfiguredProcessingBlock(v20, (uint64_t *)(v23 + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v21);
  _Unwind_Resume(a1);
}

uint64_t *quasar::ConfiguredProcessingBlock<quasar::PDecForceAlignOptions>::~ConfiguredProcessingBlock(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v3 - 24)) = a2[1];
  quasar::PDecForceAlignOptions::~PDecForceAlignOptions((quasar::PDecForceAlignOptions *)(a1 + 1));
  return a1;
}

quasar::PDecForceAlignOptions *quasar::PDecForceAlignOptions::PDecForceAlignOptions(quasar::PDecForceAlignOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A55C98;
  std::string::basic_string[abi:ne180100]<0>(&v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "mt model file name");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v6, &v5, &__p, 162);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "model-type");
  std::string::basic_string[abi:ne180100]<0>(&v5, "kaldi");
  std::string::basic_string[abi:ne180100]<0>(&__p, "translation model type (kaldi/espresso)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 176, &v6, &v5, &__p, 226);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "enable-memory-map");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "use memory map");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 336, &v6, &__p, &v5, 162);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "nbest");
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "maximum entries in target nbest list to process");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 480, &v6, &__p, &v5, 162);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "shortlist-lang-pair");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "language pair used for shortlist");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 624, &v6, &v5, &__p, 228);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "shortlist-cond-n");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "top n in condition table used for shortlist");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 784, &v6, &__p, &v5, 228);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "shortlist-freq-n");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "top n in freq words used for shortlist");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 928, &v6, &__p, &v5, 228);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "source-token");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "source tag for multilingual model");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1072, &v6, &v5, &__p, 162);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "target-token");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "target tag for multilingual model");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1232, &v6, &v5, &__p, 162);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "dynamic-switch-key");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "dynamic weight switching key for espresso model");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1392, &v6, &v5, &__p, 267);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "source-model-tag");
  std::string::basic_string[abi:ne180100]<0>(&v5, "source tag for multilingual model switching");
  uint64_t v2 = (const std::string *)quasar::OptionValue<std::string>::value((void *)this + 134);
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1552, &v6, v2, &v5, 162);
  *((void *)this + 210) = (char *)this + 1072;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "share-translation-model");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "share translation model");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1712, &v6, &__p, &v5, 194);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "use-sentencepiece-ids");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "use sentencepiece ids directly, drop dictionaries");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1856, &v6, &__p, &v5, 242);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "include-eos");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "include the score for the EOS symbol");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2000, &v6, &__p, &v5, 233);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "score-only");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "force decode only, without alignment");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2144, &v6, &__p, &v5, 233);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D207A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  quasar::OptionValue<BOOL>::~OptionValue(v32);
  quasar::OptionValue<BOOL>::~OptionValue(v31);
  quasar::OptionValue<BOOL>::~OptionValue(v30);
  quasar::OptionValue<std::string>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v36);
  quasar::OptionValue<std::string>::~OptionValue(v35);
  quasar::OptionValue<int>::~OptionValue(v34);
  quasar::OptionValue<int>::~OptionValue(v33);
  quasar::OptionValue<std::string>::~OptionValue(a9);
  quasar::OptionValue<int>::~OptionValue(a10);
  quasar::OptionValue<BOOL>::~OptionValue(a11);
  quasar::OptionValue<std::string>::~OptionValue(a12);
  quasar::OptionValue<std::string>::~OptionValue(a13);
  _Unwind_Resume(a1);
}

void sub_1B1D2088C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  JUMPOUT(0x1B1D20824);
}

void sub_1B1D208BC()
{
}

void sub_1B1D208C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  JUMPOUT(0x1B1D2082CLL);
}

void sub_1B1D208F4()
{
}

void sub_1B1D208FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1D20834);
}

void quasar::ProcessingGraph::creator<quasar::FilterBlock>()
{
}

void sub_1B1D20D5C(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C406FE0A8A8);
  _Unwind_Resume(a1);
}

quasar::FilterBlockOptions *quasar::FilterBlockOptions::FilterBlockOptions(quasar::FilterBlockOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A53F30;
  std::string::basic_string[abi:ne180100]<0>(&v7, "locale-validation");
  v5.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "check source locale is compatible with metainfo locale");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 16, &v7, &v5, &__p, 219);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "source-locale");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v5, "source locale");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 160, &v7, &__p, &v5, 163);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "nbest");
  LODWORD(v5.__r_.__value_.__l.__data_) = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "maximum nbest list size (default: don't limit nbest size)");
  uint64_t v2 = (void *)quasar::OptionValue<int>::OptionValue((uint64_t)this + 328, &v7, &v5, &__p, 163);
  *((void *)this + 40) = &unk_1F0A56288;
  *uint64_t v2 = &unk_1F0A562C8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "annotation-based-filtering");
  v5.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "filter based on annotation in the metainfo");
  uint64_t v3 = (void *)quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 480, &v7, &v5, &__p, 173);
  *((void *)this + 59) = &unk_1F0A56208;
  *uint64_t v3 = &unk_1F0A56248;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "structured-prediction-filtering");
  v5.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Filter out all incomplete structured prediction spans");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 624, &v7, &v5, &__p, 264);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D21054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  quasar::OverridableOptionValue<BOOL>::~OverridableOptionValue(v27);
  quasar::OverridableOptionValue<int>::~OverridableOptionValue(v26);
  quasar::OptionValue<std::string>::~OptionValue(v25);
  quasar::OptionValue<BOOL>::~OptionValue(v24);
  _Unwind_Resume(a1);
}

void sub_1B1D210E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D210D0);
}

void sub_1B1D21118()
{
}

void sub_1B1D21120(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D210D8);
}

void sub_1B1D21168()
{
}

void sub_1B1D21170(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D210E0);
}

uint64_t quasar::OverridableOptionValue<int>::~OverridableOptionValue(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy(a1 + 128, *(char **)(a1 + 136));
  *(void *)(a1 + 8) = &unk_1F0A52FB8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t quasar::OverridableOptionValue<int>::isOverridable()
{
  return 1;
}

uint64_t virtual thunk to'quasar::OverridableOptionValue<int>::isOverridable()
{
  return 1;
}

void quasar::ProcessingGraph::creator<quasar::SelectBlock>()
{
}

void sub_1B1D212C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40F9245A62);
  _Unwind_Resume(a1);
}

std::string *quasar::SelectBlock::SelectBlock(std::string *this)
{
  this[27].__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F0A53110;
  this[28].__r_.__value_.__l.__size_ = 0;
  this[29].__r_.__value_.__r.__words[0] = 0;
  this[28].__r_.__value_.__r.__words[2] = 0;
  this[28].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[28].__r_.__value_.__l.__size_;
  this[29].__r_.__value_.__r.__words[2] = 0;
  this[29].__r_.__value_.__l.__size_ = 0;
  this[30].__r_.__value_.__s.__data_[0] = 1;
  uint64_t v2 = off_1F0A32640;
  uint64_t v3 = off_1F0A32638;
  this->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1F0A32638;
  *(std::string::size_type *)((char *)this->__r_.__value_.__r.__words + *(v3 - 3)) = (std::string::size_type)v2;
  quasar::SelectBlockOptions::SelectBlockOptions((quasar::SelectBlockOptions *)&this->__r_.__value_.__r.__words[1]);
  std::string v4 = off_1F0A32650;
  std::string v5 = off_1F0A32648;
  this[22].__r_.__value_.__r.__words[2] = (std::string::size_type)off_1F0A32648;
  *(std::string::size_type *)((char *)&this[22].__r_.__value_.__r.__words[2] + *(v5 - 3)) = (std::string::size_type)v4;
  this->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1F0A51F70;
  this[27].__r_.__value_.__r.__words[2] = (std::string::size_type)off_1F0A52068;
  this[22].__r_.__value_.__r.__words[2] = (std::string::size_type)&off_1F0A51FC8;
  std::string::basic_string[abi:ne180100]<0>(__p, "control");
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external(this + 23, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v6 = SHIBYTE(v13);
    this[24].__r_.__value_.__s.__data_[0] = 0;
    this[24].__r_.__value_.__l.__size_ = 0;
    this[25].__r_.__value_.__r.__words[0] = 0;
    this[24].__r_.__value_.__r.__words[2] = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&this[23].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    this[23].__r_.__value_.__r.__words[2] = v13;
    this[24].__r_.__value_.__s.__data_[0] = 0;
    this[24].__r_.__value_.__l.__size_ = 0;
    this[25].__r_.__value_.__r.__words[0] = 0;
    this[24].__r_.__value_.__r.__words[2] = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "value");
  std::string v7 = (std::string *)((char *)this + 608);
  if (SHIBYTE(v11) < 0)
  {
    std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v10[0], (std::string::size_type)v10[1]);
    int v8 = SHIBYTE(v11);
    this[26].__r_.__value_.__s.__data_[8] = 0;
    this[26].__r_.__value_.__r.__words[2] = 0;
    this[27].__r_.__value_.__l.__size_ = 0;
    this[27].__r_.__value_.__r.__words[0] = 0;
    if (v8 < 0) {
      operator delete(v10[0]);
    }
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)v10;
    this[26].__r_.__value_.__r.__words[0] = v11;
    this[26].__r_.__value_.__s.__data_[8] = 0;
    this[26].__r_.__value_.__r.__words[2] = 0;
    this[27].__r_.__value_.__l.__size_ = 0;
    this[27].__r_.__value_.__r.__words[0] = 0;
  }
  return this;
}

void sub_1B1D215A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  quasar::ProcessingInput::~ProcessingInput(v22);
  quasar::ConfiguredProcessingBlock<quasar::SelectBlockOptions>::~ConfiguredProcessingBlock(v20, (uint64_t *)(v23 + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v21);
  _Unwind_Resume(a1);
}

uint64_t *quasar::ConfiguredProcessingBlock<quasar::SelectBlockOptions>::~ConfiguredProcessingBlock(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v3 - 24)) = a2[1];
  quasar::SelectBlockOptions::~SelectBlockOptions((quasar::SelectBlockOptions *)(a1 + 1));
  return a1;
}

quasar::SelectBlockOptions *quasar::SelectBlockOptions::SelectBlockOptions(quasar::SelectBlockOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A541E0;
  std::string::basic_string[abi:ne180100]<0>(v3, "match-key");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "metadata key to match on");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, v3, &v5, &__p, 165);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "match-pattern");
  quasar::PTree::PTree((quasar::PTree *)v3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "metadata value match pattern");
  quasar::OptionValue<quasar::PTree>::OptionValue((uint64_t)this + 176, &v5, (uint64_t)v3, &__p, 165);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::PTree::~PTree((quasar::PTree *)v3);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v3, "match-wildcard");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "wildcard string for match-pattern, that can match any subtree");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 376, v3, &v5, &__p, 165);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3[0].__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D21874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 33) < 0) {
    operator delete(*(void **)(v27 - 56));
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  quasar::OptionValue<quasar::PTree>::~OptionValue(v26);
  quasar::OptionValue<std::string>::~OptionValue(v25);
  _Unwind_Resume(a1);
}

void sub_1B1D21920(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  JUMPOUT(0x1B1D21918);
}

void quasar::ProcessingGraph::creator<quasar::CaseMapBlock>()
{
}

void sub_1B1D21AEC(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C40FB5E8629);
  _Unwind_Resume(a1);
}

quasar::CaseMapOptions *quasar::CaseMapOptions::CaseMapOptions(quasar::CaseMapOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A52700;
  std::string::basic_string[abi:ne180100]<0>(&v5, "locale");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "locale for case mapping (if not set use locale independent mapping)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 167);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "capitalize-camel-case");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "Capitalize camel-case first tokens");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 176, &v5, &__p, &v4, 180);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "exception-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Path to file with additional exceptions that should not be capitalized");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 320, &v5, &v4, &__p, 180);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D21CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  quasar::OptionValue<BOOL>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1B1D21D5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D21D54);
}

void quasar::ProcessingGraph::creator<quasar::GenderVerifierBlock>()
{
}

void sub_1B1D21F48(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C40887ACD88);
  _Unwind_Resume(a1);
}

quasar::GenderVerifierOptions *quasar::GenderVerifierOptions::GenderVerifierOptions(quasar::GenderVerifierOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A55A98;
  std::string::basic_string[abi:ne180100]<0>(&v5, "inflections-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "inflection list for gendered words.");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 235);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "locale");
  std::string::basic_string[abi:ne180100]<0>(&v4, "es_ES");
  std::string::basic_string[abi:ne180100]<0>(&__p, "locale to use for tokenization.");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 176, &v5, &v4, &__p, 235);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D220B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v22 - 17) < 0) {
    operator delete(*(void **)(v22 - 40));
  }
  quasar::OptionValue<std::string>::~OptionValue(v21);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::creator<quasar::PlaceholderBlock>()
{
}

void sub_1B1D221C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C4062FB1BEFLL);
  _Unwind_Resume(a1);
}

quasar::PlaceholderBlock *quasar::PlaceholderBlock::PlaceholderBlock(quasar::PlaceholderBlock *this)
{
  *((void *)this + 94) = &unk_1F0A53110;
  *((void *)this + 96) = 0;
  *((void *)this + 98) = 0;
  *((void *)this + 97) = 0;
  *((void *)this + 95) = (char *)this + 768;
  *((void *)this + 100) = 0;
  *((void *)this + 99) = 0;
  *((unsigned char *)this + 808) = 1;
  uint64_t v2 = off_1F0A32788;
  uint64_t v3 = off_1F0A32780;
  *(void *)this = off_1F0A32780;
  *(void *)((char *)this + *(v3 - 3)) = v2;
  quasar::PlaceholderOptions::PlaceholderOptions((quasar::PlaceholderBlock *)((char *)this + 8));
  std::string v4 = off_1F0A32798;
  std::string v5 = off_1F0A32790;
  *((void *)this + 79) = off_1F0A32790;
  *(void *)((char *)this + *(v5 - 3) + 632) = v4;
  *(void *)this = off_1F0A535F0;
  *((void *)this + 94) = off_1F0A536F0;
  *((void *)this + 79) = &off_1F0A53650;
  std::string::basic_string[abi:ne180100]<0>(__p, "in");
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 640), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v6 = SHIBYTE(v13);
    *((unsigned char *)this + 664) = 0;
    *((void *)this + 84) = 0;
    *((void *)this + 86) = 0;
    *((void *)this + 85) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *((_OWORD *)this + 40) = *(_OWORD *)__p;
    *((void *)this + 82) = v13;
    *((unsigned char *)this + 664) = 0;
    *((void *)this + 84) = 0;
    *((void *)this + 86) = 0;
    *((void *)this + 85) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "tokens");
  std::string v7 = (std::string *)((char *)this + 696);
  if (SHIBYTE(v11) < 0)
  {
    std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v10[0], (std::string::size_type)v10[1]);
    int v8 = SHIBYTE(v11);
    *((unsigned char *)this + 720) = 0;
    *((void *)this + 91) = 0;
    *((void *)this + 93) = 0;
    *((void *)this + 92) = 0;
    if (v8 < 0) {
      operator delete(v10[0]);
    }
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)v10;
    *((void *)this + 89) = v11;
    *((unsigned char *)this + 720) = 0;
    *((void *)this + 91) = 0;
    *((void *)this + 93) = 0;
    *((void *)this + 92) = 0;
  }
  return this;
}

void sub_1B1D224A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  quasar::ProcessingInput::~ProcessingInput(v22);
  quasar::ConfiguredProcessingBlock<quasar::PlaceholderOptions>::~ConfiguredProcessingBlock(v20, (uint64_t *)(v23 + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v21);
  _Unwind_Resume(a1);
}

uint64_t *quasar::ConfiguredProcessingBlock<quasar::PlaceholderOptions>::~ConfiguredProcessingBlock(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v3 - 24)) = a2[1];
  quasar::PlaceholderOptions::~PlaceholderOptions((quasar::PlaceholderOptions *)(a1 + 1));
  return a1;
}

quasar::PlaceholderOptions *quasar::PlaceholderOptions::PlaceholderOptions(quasar::PlaceholderOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A540F8;
  std::string::basic_string[abi:ne180100]<0>(&v5, "enable");
  v3.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "output placeholders in the target");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 16, &v5, &v3, &__p, 246);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "placeholder-tag");
  std::string::basic_string[abi:ne180100]<0>(&__p, "<-->");
  std::string::basic_string[abi:ne180100]<0>(&v3, "placeholder tag");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 160, &v5, &__p, &v3, 246);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "placeholder-size");
  std::string::basic_string[abi:ne180100]<0>(&__p, "0");
  std::string::basic_string[abi:ne180100]<0>(&v3, "placeholder size in the UI");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 320, &v5, &__p, &v3, 246);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "max-placeholders");
  LODWORD(v3.__r_.__value_.__l.__data_) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "limit on the number of placeholders");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 480, &v5, &v3, &__p, 246);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D227D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  quasar::OptionValue<std::string>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(v28);
  quasar::OptionValue<BOOL>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1B1D22874(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D22864);
}

void sub_1B1D228BC()
{
}

void sub_1B1D228C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D2286CLL);
}

void quasar::PlaceholderOptions::~PlaceholderOptions(quasar::PlaceholderOptions *this)
{
  *(void *)this = &unk_1F0A540F8;
  *((void *)this + 60) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  *((void *)this + 60) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  if (*((char *)this + 535) < 0) {
    operator delete(*((void **)this + 64));
  }
  if (*((char *)this + 511) < 0) {
    operator delete(*((void **)this + 61));
  }
  *((void *)this + 40) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 456, *((void **)this + 58));
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  *((void *)this + 40) = &unk_1F0A52FB8;
  std::string v3 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 399) < 0) {
    operator delete(*((void **)this + 47));
  }
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  *((void *)this + 20) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 296, *((void **)this + 38));
  if (*((char *)this + 287) < 0) {
    operator delete(*((void **)this + 33));
  }
  *((void *)this + 20) = &unk_1F0A52FB8;
  std::string v4 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  *((void *)this + 2) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 136, *((char **)this + 18));
  *((void *)this + 2) = &unk_1F0A52FB8;
  std::string v5 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void quasar::ProcessingGraph::creator<quasar::DumpBlock>()
{
}

void sub_1B1D22CD4(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C400A3FCEC3);
  _Unwind_Resume(a1);
}

quasar::DumpBlockOptions *quasar::DumpBlockOptions::DumpBlockOptions(quasar::DumpBlockOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A53288;
  std::string::basic_string[abi:ne180100]<0>(&v5, "separator");
  std::string::basic_string[abi:ne180100]<0>(&v4, "|||");
  std::string::basic_string[abi:ne180100]<0>(&__p, "string for separating nbest entries");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 240);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "use-meta-info");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "should meta info be dumped");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 176, &v5, &__p, &v4, 240);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "meta-separator");
  std::string::basic_string[abi:ne180100]<0>(&v4, "|||");
  std::string::basic_string[abi:ne180100]<0>(&__p, "string for separating output string from meta data");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 320, &v5, &v4, &__p, 240);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "nbest");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "limit dumping to this many entries from nbest list (0 = do not limit)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 480, &v5, &__p, &v4, 240);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D22F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  quasar::OptionValue<std::string>::~OptionValue(v29);
  quasar::OptionValue<BOOL>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1B1D22FAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x1B1D22F9CLL);
}

void sub_1B1D22FDC()
{
}

void sub_1B1D22FE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1B1D22FA4);
}

void quasar::ProcessingGraph::creator<quasar::StructuredPredictionBlock>()
{
}

void sub_1B1D23094(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C407B76DCA6);
  _Unwind_Resume(a1);
}

quasar::StructuredPredictionBlock *quasar::StructuredPredictionBlock::StructuredPredictionBlock(quasar::StructuredPredictionBlock *this)
{
  *((void *)this + 330) = &unk_1F0A53110;
  *((void *)this + 332) = 0;
  *((void *)this + 334) = 0;
  *((void *)this + 333) = 0;
  *((void *)this + 331) = (char *)this + 2656;
  *((void *)this + 336) = 0;
  *((void *)this + 335) = 0;
  *((unsigned char *)this + 2696) = 1;
  uint64_t v2 = off_1F0A32980;
  std::string v3 = off_1F0A32978;
  *(void *)this = off_1F0A32978;
  *(void *)((char *)this + *(v3 - 3)) = v2;
  quasar::StructuredPredictionOptions::StructuredPredictionOptions((quasar::StructuredPredictionBlock *)((char *)this + 8));
  std::string v4 = off_1F0A32990;
  std::string v5 = off_1F0A32988;
  *((void *)this + 292) = off_1F0A32988;
  *(void *)((char *)this + *(v5 - 3) + 2336) = v4;
  *(void *)this = off_1F0A570C8;
  *((void *)this + 330) = off_1F0A571C8;
  *((void *)this + 292) = &off_1F0A57128;
  std::string::basic_string[abi:ne180100]<0>(&v21, "source");
  if (SHIBYTE(v22) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 2344), (const std::string::value_type *)v21, *((std::string::size_type *)&v21 + 1));
    int v6 = SHIBYTE(v22);
    *((unsigned char *)this + 2368) = 0;
    *((void *)this + 297) = 0;
    *((void *)this + 299) = 0;
    *((void *)this + 298) = 0;
    if (v6 < 0) {
      operator delete((void *)v21);
    }
  }
  else
  {
    *(_OWORD *)((char *)this + 2344) = v21;
    *((void *)this + 295) = v22;
    *((unsigned char *)this + 2368) = 0;
    *((void *)this + 297) = 0;
    *((void *)this + 299) = 0;
    *((void *)this + 298) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "in");
  if (SHIBYTE(v20) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 100, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v7 = SHIBYTE(v20);
    *((unsigned char *)this + 2424) = 0;
    *((void *)this + 304) = 0;
    *((void *)this + 306) = 0;
    *((void *)this + 305) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *((_OWORD *)this + 150) = *(_OWORD *)__p;
    *((void *)this + 302) = v20;
    *((unsigned char *)this + 2424) = 0;
    *((void *)this + 304) = 0;
    *((void *)this + 306) = 0;
    *((void *)this + 305) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "source_spm");
  if (SHIBYTE(v18) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 2456), (const std::string::value_type *)v17[0], (std::string::size_type)v17[1]);
    int v8 = SHIBYTE(v18);
    *((unsigned char *)this + 2480) = 0;
    *((void *)this + 311) = 0;
    *((void *)this + 313) = 0;
    *((void *)this + 312) = 0;
    if (v8 < 0) {
      operator delete(v17[0]);
    }
  }
  else
  {
    *(_OWORD *)((char *)this + 2456) = *(_OWORD *)v17;
    *((void *)this + 309) = v18;
    *((unsigned char *)this + 2480) = 0;
    *((void *)this + 311) = 0;
    *((void *)this + 313) = 0;
    *((void *)this + 312) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "target_spm");
  if (SHIBYTE(v16) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 2512), (const std::string::value_type *)v15[0], (std::string::size_type)v15[1]);
    int v9 = SHIBYTE(v16);
    *((unsigned char *)this + 2536) = 0;
    *((void *)this + 318) = 0;
    *((void *)this + 320) = 0;
    *((void *)this + 319) = 0;
    if (v9 < 0) {
      operator delete(v15[0]);
    }
  }
  else
  {
    *((_OWORD *)this + 157) = *(_OWORD *)v15;
    *((void *)this + 316) = v16;
    *((unsigned char *)this + 2536) = 0;
    *((void *)this + 318) = 0;
    *((void *)this + 320) = 0;
    *((void *)this + 319) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "source_tokens");
  uint64_t v10 = (std::string *)((char *)this + 2568);
  if (SHIBYTE(v14) < 0)
  {
    std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v13[0], (std::string::size_type)v13[1]);
    int v11 = SHIBYTE(v14);
    *((unsigned char *)this + 2592) = 0;
    *((void *)this + 325) = 0;
    *((void *)this + 327) = 0;
    *((void *)this + 326) = 0;
    if (v11 < 0) {
      operator delete(v13[0]);
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v13;
    *((void *)this + 323) = v14;
    *((unsigned char *)this + 2592) = 0;
    *((void *)this + 325) = 0;
    *((void *)this + 327) = 0;
    *((void *)this + 326) = 0;
  }
  *((_OWORD *)this + 164) = 0u;
  return this;
}

void sub_1B1D234D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::ProcessingInput::~ProcessingInput(v38);
  quasar::ProcessingInput::~ProcessingInput(v37);
  quasar::ProcessingInput::~ProcessingInput(v36);
  quasar::ProcessingInput::~ProcessingInput(v35);
  quasar::ConfiguredProcessingBlock<quasar::StructuredPredictionOptions>::~ConfiguredProcessingBlock(v33, (uint64_t *)(v39 + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v34);
  _Unwind_Resume(a1);
}

void sub_1B1D23598()
{
}

void sub_1B1D235A0()
{
}

void sub_1B1D235A8()
{
}

uint64_t *quasar::ConfiguredProcessingBlock<quasar::StructuredPredictionOptions>::~ConfiguredProcessingBlock(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v3 - 24)) = a2[1];
  quasar::StructuredPredictionOptions::~StructuredPredictionOptions((quasar::StructuredPredictionOptions *)(a1 + 1));
  return a1;
}

quasar::StructuredPredictionOptions *quasar::StructuredPredictionOptions::StructuredPredictionOptions(quasar::StructuredPredictionOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A57748;
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-begin-tag");
  std::string::basic_string[abi:ne180100]<0>(&v5, "<STRUCT_MALE_BEG>");
  std::string::basic_string[abi:ne180100]<0>(&__p, "beginning of structured prediction in primary order");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-reverse-begin-tag");
  std::string::basic_string[abi:ne180100]<0>(&v5, "<STRUCT_FEMALE_BEG>");
  std::string::basic_string[abi:ne180100]<0>(&__p, "beginning of structured prediction in reverse order");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 176, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-mid-tag");
  std::string::basic_string[abi:ne180100]<0>(&v5, "<STRUCT_MID>");
  std::string::basic_string[abi:ne180100]<0>(&__p, "middle of structured prediction");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 336, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-end-tag");
  std::string::basic_string[abi:ne180100]<0>(&v5, "<STRUCT_END>");
  std::string::basic_string[abi:ne180100]<0>(&__p, "end of structured prediction");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 496, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-first-field");
  std::string::basic_string[abi:ne180100]<0>(&v5, "MALE");
  std::string::basic_string[abi:ne180100]<0>(&__p, "first field label");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 656, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-second-field");
  std::string::basic_string[abi:ne180100]<0>(&v5, "FEMALE");
  std::string::basic_string[abi:ne180100]<0>(&__p, "second field label");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 816, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-default-field");
  std::string::basic_string[abi:ne180100]<0>(&v5, "MALE");
  std::string::basic_string[abi:ne180100]<0>(&__p, "default field label");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 976, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-meta-key-name");
  std::string::basic_string[abi:ne180100]<0>(&v5, "gender");
  std::string::basic_string[abi:ne180100]<0>(&__p, "string used for the meta info keys");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1136, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "use-tokenized-source");
  __p.__r_.__value_.__s.__data_[0] = 0;
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1296, &v6, &__p, &v5, 249);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "max-source-length");
  LODWORD(__p.__r_.__value_.__l.__data_) = -1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "disable structured prediction if source is longer than value (-1 to disable)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 1440, &v6, &__p, &v5, 249);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "max-selections");
  LODWORD(__p.__r_.__value_.__l.__data_) = 3;
  std::string::basic_string[abi:ne180100]<0>(&v5, "disable structured prediction if number of selections (= aligned source tokens) higher than value (-1 to disable)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 1584, &v6, &__p, &v5, 249);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "disable-structured-prediction");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "disable structured prediction, only best is produced");
  uint64_t v2 = (void *)quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1736, &v6, &__p, &v5, 257);
  *((void *)this + 216) = &unk_1F0A56208;
  *uint64_t v2 = &unk_1F0A56248;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "defaults-list-file");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "file path for the file with defaults list");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1880, &v6, &v5, &__p, 260);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "produce-gender-structs-to-spm-source-tokens-alignments");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "Update meta info with alignments between gender structs and SPM source tokens");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2040, &v6, &__p, &v5, 265);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "max-source-alignment-length");
  LODWORD(__p.__r_.__value_.__l.__data_) = 1023;
  std::string::basic_string[abi:ne180100]<0>(&v5, "maximum source positions to consider when aligning structure tags");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 2184, &v6, &__p, &v5, 274);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D23DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  quasar::OptionValue<BOOL>::~OptionValue(v35);
  quasar::OptionValue<std::string>::~OptionValue(v34);
  quasar::OverridableOptionValue<BOOL>::~OverridableOptionValue(v33);
  quasar::OptionValue<int>::~OptionValue(v32);
  quasar::OptionValue<int>::~OptionValue(v31);
  quasar::OptionValue<BOOL>::~OptionValue(v39);
  quasar::OptionValue<std::string>::~OptionValue(v38);
  quasar::OptionValue<std::string>::~OptionValue(v37);
  quasar::OptionValue<std::string>::~OptionValue(v36);
  quasar::OptionValue<std::string>::~OptionValue(a9);
  quasar::OptionValue<std::string>::~OptionValue(a10);
  quasar::OptionValue<std::string>::~OptionValue(a11);
  quasar::OptionValue<std::string>::~OptionValue(a12);
  quasar::OptionValue<std::string>::~OptionValue(a13);
  _Unwind_Resume(a1);
}

void sub_1B1D23EE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  JUMPOUT(0x1B1D23E80);
}

void sub_1B1D23F10()
{
}

void sub_1B1D23F18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  JUMPOUT(0x1B1D23E88);
}

void sub_1B1D23F48()
{
}

void sub_1B1D23F50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  JUMPOUT(0x1B1D23E90);
}

void sub_1B1D23F80()
{
}

void sub_1B1D23F88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  JUMPOUT(0x1B1D23E98);
}

void sub_1B1D23FB8()
{
}

void sub_1B1D23FC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  JUMPOUT(0x1B1D23EA0);
}

void sub_1B1D24008()
{
}

void sub_1B1D24010(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  JUMPOUT(0x1B1D23EA8);
}

void sub_1B1D24058()
{
}

void sub_1B1D24060(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  JUMPOUT(0x1B1D23EB0);
}

void sub_1B1D240A8()
{
}

void sub_1B1D240B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  JUMPOUT(0x1B1D23EB8);
}

void sub_1B1D240F8()
{
}

void sub_1B1D24100(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  JUMPOUT(0x1B1D23EC0);
}

void sub_1B1D24148()
{
}

void sub_1B1D24150(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  JUMPOUT(0x1B1D23EC8);
}

void sub_1B1D24198()
{
}

void sub_1B1D241A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  JUMPOUT(0x1B1D23ED0);
}

void sub_1B1D241E8()
{
}

void sub_1B1D241F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  JUMPOUT(0x1B1D23ED8);
}

void quasar::StructuredPredictionOptions::~StructuredPredictionOptions(quasar::StructuredPredictionOptions *this)
{
  *(void *)this = &unk_1F0A57748;
  *((void *)this + 273) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 2304, *((char **)this + 289));
  *((void *)this + 273) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 285);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 2263) < 0) {
    operator delete(*((void **)this + 280));
  }
  if (*((char *)this + 2239) < 0) {
    operator delete(*((void **)this + 277));
  }
  if (*((char *)this + 2215) < 0) {
    operator delete(*((void **)this + 274));
  }
  *((void *)this + 255) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 2160, *((char **)this + 271));
  *((void *)this + 255) = &unk_1F0A52FB8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 267);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 2119) < 0) {
    operator delete(*((void **)this + 262));
  }
  if (*((char *)this + 2095) < 0) {
    operator delete(*((void **)this + 259));
  }
  if (*((char *)this + 2071) < 0) {
    operator delete(*((void **)this + 256));
  }
  *((void *)this + 235) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 2016, *((void **)this + 253));
  if (*((char *)this + 2007) < 0) {
    operator delete(*((void **)this + 248));
  }
  *((void *)this + 235) = &unk_1F0A52FB8;
  std::string v4 = (std::__shared_weak_count *)*((void *)this + 247);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 1959) < 0) {
    operator delete(*((void **)this + 242));
  }
  if (*((char *)this + 1935) < 0) {
    operator delete(*((void **)this + 239));
  }
  if (*((char *)this + 1911) < 0) {
    operator delete(*((void **)this + 236));
  }
  *((void *)this + 217) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 1856, *((char **)this + 233));
  *((void *)this + 217) = &unk_1F0A52FB8;
  std::string v5 = (std::__shared_weak_count *)*((void *)this + 229);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 1815) < 0) {
    operator delete(*((void **)this + 224));
  }
  if (*((char *)this + 1791) < 0) {
    operator delete(*((void **)this + 221));
  }
  if (*((char *)this + 1767) < 0) {
    operator delete(*((void **)this + 218));
  }
  *((void *)this + 198) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 1704, *((char **)this + 214));
  *((void *)this + 198) = &unk_1F0A52FB8;
  std::string v6 = (std::__shared_weak_count *)*((void *)this + 210);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 1663) < 0) {
    operator delete(*((void **)this + 205));
  }
  if (*((char *)this + 1639) < 0) {
    operator delete(*((void **)this + 202));
  }
  if (*((char *)this + 1615) < 0) {
    operator delete(*((void **)this + 199));
  }
  *((void *)this + 180) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 1560, *((char **)this + 196));
  *((void *)this + 180) = &unk_1F0A52FB8;
  int v7 = (std::__shared_weak_count *)*((void *)this + 192);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((char *)this + 1519) < 0) {
    operator delete(*((void **)this + 187));
  }
  if (*((char *)this + 1495) < 0) {
    operator delete(*((void **)this + 184));
  }
  if (*((char *)this + 1471) < 0) {
    operator delete(*((void **)this + 181));
  }
  *((void *)this + 162) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 1416, *((char **)this + 178));
  *((void *)this + 162) = &unk_1F0A52FB8;
  int v8 = (std::__shared_weak_count *)*((void *)this + 174);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*((char *)this + 1375) < 0) {
    operator delete(*((void **)this + 169));
  }
  if (*((char *)this + 1351) < 0) {
    operator delete(*((void **)this + 166));
  }
  if (*((char *)this + 1327) < 0) {
    operator delete(*((void **)this + 163));
  }
  *((void *)this + 142) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1272, *((void **)this + 160));
  if (*((char *)this + 1263) < 0) {
    operator delete(*((void **)this + 155));
  }
  *((void *)this + 142) = &unk_1F0A52FB8;
  int v9 = (std::__shared_weak_count *)*((void *)this + 154);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*((char *)this + 1215) < 0) {
    operator delete(*((void **)this + 149));
  }
  if (*((char *)this + 1191) < 0) {
    operator delete(*((void **)this + 146));
  }
  if (*((char *)this + 1167) < 0) {
    operator delete(*((void **)this + 143));
  }
  *((void *)this + 122) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1112, *((void **)this + 140));
  if (*((char *)this + 1103) < 0) {
    operator delete(*((void **)this + 135));
  }
  *((void *)this + 122) = &unk_1F0A52FB8;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 134);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*((char *)this + 1055) < 0) {
    operator delete(*((void **)this + 129));
  }
  if (*((char *)this + 1031) < 0) {
    operator delete(*((void **)this + 126));
  }
  if (*((char *)this + 1007) < 0) {
    operator delete(*((void **)this + 123));
  }
  *((void *)this + 102) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 952, *((void **)this + 120));
  if (*((char *)this + 943) < 0) {
    operator delete(*((void **)this + 115));
  }
  *((void *)this + 102) = &unk_1F0A52FB8;
  int v11 = (std::__shared_weak_count *)*((void *)this + 114);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (*((char *)this + 895) < 0) {
    operator delete(*((void **)this + 109));
  }
  if (*((char *)this + 871) < 0) {
    operator delete(*((void **)this + 106));
  }
  if (*((char *)this + 847) < 0) {
    operator delete(*((void **)this + 103));
  }
  *((void *)this + 82) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 792, *((void **)this + 100));
  if (*((char *)this + 783) < 0) {
    operator delete(*((void **)this + 95));
  }
  *((void *)this + 82) = &unk_1F0A52FB8;
  int v12 = (std::__shared_weak_count *)*((void *)this + 94);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (*((char *)this + 735) < 0) {
    operator delete(*((void **)this + 89));
  }
  if (*((char *)this + 711) < 0) {
    operator delete(*((void **)this + 86));
  }
  if (*((char *)this + 687) < 0) {
    operator delete(*((void **)this + 83));
  }
  *((void *)this + 62) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 632, *((void **)this + 80));
  if (*((char *)this + 623) < 0) {
    operator delete(*((void **)this + 75));
  }
  *((void *)this + 62) = &unk_1F0A52FB8;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 74);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (*((char *)this + 575) < 0) {
    operator delete(*((void **)this + 69));
  }
  if (*((char *)this + 551) < 0) {
    operator delete(*((void **)this + 66));
  }
  if (*((char *)this + 527) < 0) {
    operator delete(*((void **)this + 63));
  }
  *((void *)this + 42) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 472, *((void **)this + 60));
  if (*((char *)this + 463) < 0) {
    operator delete(*((void **)this + 55));
  }
  *((void *)this + 42) = &unk_1F0A52FB8;
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (*((char *)this + 415) < 0) {
    operator delete(*((void **)this + 49));
  }
  if (*((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  if (*((char *)this + 367) < 0) {
    operator delete(*((void **)this + 43));
  }
  *((void *)this + 22) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 312, *((void **)this + 40));
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }
  *((void *)this + 22) = &unk_1F0A52FB8;
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 2) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  *((void *)this + 2) = &unk_1F0A52FB8;
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void quasar::ProcessingGraph::creator<quasar::LinkAlternativesBlock>()
{
}

void sub_1B1D24C54(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C40F17129FBLL);
  _Unwind_Resume(a1);
}

quasar::LinkAlternativesOptions *quasar::LinkAlternativesOptions::LinkAlternativesOptions(quasar::LinkAlternativesOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A56978;
  std::string::basic_string[abi:ne180100]<0>(&v6, "filter-unreachable-phrases");
  char v5 = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Filter translation phrases that are not reachable from the first phrase");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 16, &v6, &v5, &__p, 262);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "enable-alternatives");
  char v5 = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Request link alternatives block to construct alternatives graph using input information");
  uint64_t v2 = (void *)quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 168, &v6, &v5, &__p, 263);
  *((void *)this + 20) = &unk_1F0A56208;
  *uint64_t v2 = &unk_1F0A56248;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D24DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  quasar::OptionValue<BOOL>::~OptionValue(v22);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::creator<quasar::TokenizerBlock>()
{
}

void sub_1B1D24FD4(_Unwind_Exception *a1)
{
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](v1, 0x10F3C40559A6D66);
  _Unwind_Resume(a1);
}

quasar::TokenizerOptions *quasar::TokenizerOptions::TokenizerOptions(quasar::TokenizerOptions *this)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0A53950;
  std::string::basic_string[abi:ne180100]<0>(&v5, "output-tokens");
  v3.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "control if tokenization affects the translation tokens or just meta info.");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 16, &v5, &v3, &__p, 169);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "locale");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v3, "locale for tokenization (if not set use locale independent mapping)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 160, &v5, &__p, &v3, 169);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1D25128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v22 - 17) < 0) {
    operator delete(*(void **)(v22 - 40));
  }
  quasar::OptionValue<BOOL>::~OptionValue(v21);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ContextProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FF78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ContextProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FF78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::ContextProvider>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::ContextProvider>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::ContextProvider>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::string v3 = *(std::__shared_weak_count **)(a2 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::string v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t *std::map<std::string,quasar::ProcessingBlock::ValueType>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,quasar::ProcessingBlock::ValueType>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1D252E4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,quasar::ProcessingBlock::ValueType>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    std::string v4 = a2;
    std::string v5 = (uint64_t **)result;
    std::string v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      int v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = (const void ***)v7;
          int v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          std::string v4 = (const void **)v8;
        }
        while (!v9);
      }
      std::string v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  std::string v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__construct_node<std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__construct_node<std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  std::string v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,quasar::ProcessingBlock::ValueType>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1D25474(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::ProcessingBlock::ValueType>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(this[1].__r_.__value_.__r.__words, *((void *)a2 + 3), *((void *)a2 + 4), 0x8F5C28F5C28F5C29 * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_1B1D2550C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::ProcessingBlock::ValueType>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::ProcessingBlock::ValueType>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::ProcessingBlock::ValueType>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<quasar::ProcessingSink>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FDF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ProcessingSink>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FDF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::ProcessingSink>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::vector<std::unique_ptr<quasar::ProcessingBlock>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::ProcessingBlock>>,std::reverse_iterator<std::unique_ptr<quasar::ProcessingBlock>*>,std::reverse_iterator<std::unique_ptr<quasar::ProcessingBlock>*>,std::reverse_iterator<std::unique_ptr<quasar::ProcessingBlock>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::ProcessingBlock>>,std::reverse_iterator<std::unique_ptr<quasar::ProcessingBlock>*>,std::reverse_iterator<std::unique_ptr<quasar::ProcessingBlock>*>,std::reverse_iterator<std::unique_ptr<quasar::ProcessingBlock>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    BOOL v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::ProcessingBlock>>,std::reverse_iterator<std::unique_ptr<quasar::ProcessingBlock>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::ProcessingBlock>>,std::reverse_iterator<std::unique_ptr<quasar::ProcessingBlock>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::ProcessingBlock>>,std::reverse_iterator<std::unique_ptr<quasar::ProcessingBlock>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::ProcessingBlock>>,std::reverse_iterator<std::unique_ptr<quasar::ProcessingBlock>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<quasar::ProcessingBlock>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<quasar::ProcessingBlock>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    long long v4 = result;
    do
    {
      void v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void std::__shared_ptr_emplace<quasar::ProcessingSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ProcessingSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::ProcessingSource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::map<std::string,std::shared_ptr<quasar::ProcessingBlock>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  long long v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_1B1D25A24(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1D25B28(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::unique_ptr<quasar::ProcessingBlock>>>(uint64_t **a1, const void **a2, long long *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__construct_node<std::pair<std::string,std::unique_ptr<quasar::ProcessingBlock>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__construct_node<std::pair<std::string,std::unique_ptr<quasar::ProcessingBlock>>>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::pair[abi:ne180100]<std::string,std::unique_ptr<quasar::ProcessingBlock>,0>((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1D25C28(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::pair[abi:ne180100]<std::string,std::unique_ptr<quasar::ProcessingBlock>,0>(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  std::shared_ptr<quasar::ProcessingBlock>::shared_ptr[abi:ne180100]<quasar::ProcessingBlock,std::default_delete<quasar::ProcessingBlock>,void>((uint64_t *)(a1 + 24), (uint64_t *)a2 + 3);
  return a1;
}

void sub_1B1D25C80(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<quasar::ProcessingBlock>::shared_ptr[abi:ne180100]<quasar::ProcessingBlock,std::default_delete<quasar::ProcessingBlock>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<quasar::ProcessingBlock  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::ProcessingBlock  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::ProcessingBlock  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

int *quasar::RescoringDeliberationDecoder::runImpl(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *(std::__shared_weak_count **)(*a3 + 432);
  uint64_t v73 = *(void *)(*a3 + 424);
  v74 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::RescoringDeliberationDecoder::ResultData::ResultData((uint64_t)v75, &v73);
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  uint64_t v9 = *a3;
  uint64_t v10 = *(uint64_t **)(*a3 + 352);
  if (!v10)
  {
    quasar::Decoder::calculateNBest((uint64_t)a2, a3, *(_DWORD *)(*(void *)a4 + 16));
    quasar::RescoringDeliberationDecoder::ResultData::recordEvent((uint64_t)v75, "CALCULATE_N_BEST", 157);
    uint64_t v9 = *a3;
    uint64_t v10 = *(uint64_t **)(*a3 + 352);
  }
  if (v10[1] == *v10)
  {
    quasar::RescoringDeliberationDecoder::ResultData::recordEvent((uint64_t)v75, "INPUT_N_BEST_IS_EMPTY", 166);
    char v14 = (int *)quasar::RescoringDeliberationDecoder::ResultData::finalize((uint64_t)v75, 0);
    goto LABEL_61;
  }
  uint64_t v11 = *(char ***)(v9 + 392);
  unint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  uint64_t v12 = a2[1];
  *(void *)&long long v45 = *a2;
  *((void *)&v45 + 1) = v12;
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = *a3;
  }
  quasar::ptt::PronunciationRecognizer::RequestContext::RequestContext((uint64_t)&v64, &v45, *(_DWORD *)(v9 + 576), *(_DWORD *)(a2[27] + 24), a2[27] + 32, *(void *)(v9 + 472));
  if (*((void *)&v45 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v45 + 1));
  }
  uint64_t v13 = *(uint64_t ***)(*a3 + 352);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  LOBYTE(v45) = 0;
  BYTE8(v46) = 0;
  char v14 = (int *)quasar::RescoringDeliberationDecoder::expandResultChoicesAndBuildInputForRescoring(a1, v13, (uint64_t)&v64, &v69, (uint64_t)&v66, (long long *)__p, (uint64_t)&v45);
  if (BYTE8(v46))
  {
    v76 = (void **)&v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v76);
  }
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v66 == v67)
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v45 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"No phonetic alternatives generated.", 35);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v45);
    }
    quasar::RescoringDeliberationDecoder::ResultData::recordEvent((uint64_t)v75, "PHONETIC_ALTERNATIVES_NONE_GENERATED", 196);
    uint64_t v16 = quasar::RescoringDeliberationDecoder::ResultData::finalize((uint64_t)v75, 0);
    goto LABEL_26;
  }
  quasar::RescoringDeliberationDecoder::ResultData::recordEvent((uint64_t)v75, "PHONETIC_ALTERNATIVES_GENERATED", 200);
  if (!quasar::rescoring::Rescorer::rescoreHypotheses(*(void *)(a1 + 448), v14, &v70))
  {
    if (quasar::gLogLevel >= 2)
    {
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v45 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"Rescoring failed during RescoringDeliberationDecoder.", 53);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v45);
    }
    quasar::RescoringDeliberationDecoder::ResultData::recordEvent((uint64_t)v75, "RESCORING_FAILED", 210);
    uint64_t v16 = quasar::RescoringDeliberationDecoder::ResultData::finalize((uint64_t)v75, 0);
LABEL_26:
    char v14 = (int *)v16;
    int v15 = 0;
    goto LABEL_27;
  }
  quasar::RescoringDeliberationDecoder::ResultData::recordEvent((uint64_t)v75, "RESCORING_SUCCEEDED", 206);
  int v15 = 1;
LABEL_27:
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  if (v15)
  {
    uint64_t v17 = (uint64_t)(a2 + 76);
    if (v70 == v71)
    {
      int v19 = v70;
    }
    else
    {
      uint64_t v18 = v70 + 1;
      int v19 = v70;
      if (v70 + 1 != v71)
      {
        float v20 = *v70;
        int v19 = v70;
        uint64_t v21 = v70 + 1;
        do
        {
          float v22 = *v21++;
          float v23 = v22;
          if (v22 < v20)
          {
            float v20 = v23;
            int v19 = v18;
          }
          uint64_t v18 = v21;
        }
        while (v21 != v71);
      }
    }
    uint64_t v24 = a1;
    if (!*(unsigned char *)(a1 + 576))
    {
      for (int i = v66; i != v67; i += 3)
      {
        uint64_t v36 = *i;
        if (v36 != i[1]) {
          quasar::PhonesetMapping::getIpaPhoneSequence(v17, v36 + 48);
        }
      }
    }
    unint64_t v25 = v19 - v70;
    uint64_t v26 = v25 - v69;
    if (v25 >= v69)
    {
      quasar::RescoringDeliberationDecoder::ResultData::recordRescoringResult((uint64_t)v75, (std::string *)*v10, (std::string *)&v66[3 * v26]);
      uint64_t v27 = (uint64_t)v11;
      std::vector<std::vector<quasar::Token>>::insert(v10, (uint64_t *)*v10, &v66[3 * v26]);
      uint64_t v33 = *v11;
      *(double *)&long long v45 = *(double *)*v11 + -1000.0;
      std::vector<double>::insert((uint64_t)v11, v33, (double *)&v45);
      if (*(unsigned char *)(v24 + 576))
      {
        uint64_t v34 = *(void *)*v10;
        if (v34 != *(void *)(*v10 + 8)) {
          quasar::PhonesetMapping::getIpaPhoneSequence(v17, v34 + 48);
        }
      }
      else
      {
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> *,std::vector<quasar::Token> *,std::vector<quasar::Token> *>((uint64_t)&v45, (uint64_t)&v66[3 * v26 + 3], (uint64_t)v67, (uint64_t)&v66[3 * v26]);
        uint64_t v38 = v37;
        uint64_t v39 = v67;
        while (v39 != v38)
        {
          v39 -= 3;
          *(void *)&long long v45 = v39;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
        }
        unint64_t v67 = v38;
      }
      quasar::RescoringDeliberationDecoder::ResultData::recordEvent((uint64_t)v75, "BEST_HYPOTHESIS_IN_PHONETIC_N_BEST", 266);
    }
    else
    {
      quasar::RescoringDeliberationDecoder::ResultData::recordRescoringResult((uint64_t)v75, (std::string *)*v10, (std::string *)(*v10 + 24 * v25));
      uint64_t v27 = (uint64_t)v11;
      uint64_t v28 = (std::string *)*v10;
      uint64_t v29 = *v10 + 24 * v25;
      long long v30 = *(_OWORD *)*v10;
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)v29;
      *(_OWORD *)uint64_t v29 = v30;
      std::string::size_type v31 = v28->__r_.__value_.__r.__words[2];
      v28->__r_.__value_.__r.__words[2] = *(void *)(v29 + 16);
      *(void *)(v29 + 16) = v31;
      uint64_t v32 = *v11;
      *(void *)&long long v30 = *(void *)*v11;
      *(void *)uint64_t v32 = *(void *)&(*v11)[8 * v25];
      *(void *)&v32[8 * v25] = v30;
      quasar::RescoringDeliberationDecoder::ResultData::recordEvent((uint64_t)v75, "BEST_HYPOTHESIS_IN_ORIGINAL_N_BEST", 249);
    }
    if (!*(unsigned char *)(v24 + 576))
    {
      std::vector<std::vector<quasar::Token>>::reserve(v10, 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3) - 0x5555555555555555 * (v67 - v66));
      std::vector<double>::reserve((void **)v27, 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3));
      std::vector<std::vector<quasar::Token>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<quasar::Token>*>,std::__wrap_iter<std::vector<quasar::Token>*>>(v10, (void *)v10[1], v66, v67, 0xAAAAAAAAAAAAAAABLL * (v67 - v66));
      uint64_t v40 = *(char **)(v27 + 8);
      *(double *)&long long v45 = *((double *)v40 - 1) + 1000.0;
      std::vector<double>::insert(v27, v40, 0xAAAAAAAAAAAAAAABLL * (v67 - v66), (char *)&v45);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3) != (uint64_t)(*(void *)(v27 + 8) - *(void *)v27) >> 3)
    {
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v45 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"There should be an equal number of result choices (", 51);
      uint64_t v42 = (void *)std::ostream::operator<<();
      uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"as there are result costs (", 27);
      uint64_t v44 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)").", 2);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v45);
    }
    char v14 = (int *)quasar::RescoringDeliberationDecoder::ResultData::finalize((uint64_t)v75, 0);
  }
  *(void *)&long long v45 = &v66;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (v70)
  {
    uint64_t v71 = v70;
    operator delete(v70);
  }
LABEL_61:
  quasar::RescoringDeliberationDecoder::ResultData::~ResultData((quasar::RescoringDeliberationDecoder::ResultData *)v75);
  return v14;
}

void sub_1B1D26540(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a14)
  {
    *(void *)(v50 - 96) = &a11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 96));
  }
  if (a50 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1D2659CLL);
}

void sub_1B1D26574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x1B1D265C8);
  }
  JUMPOUT(0x1B1D265A4);
}

void sub_1B1D26584()
{
}

void sub_1B1D26598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49)
{
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }
  JUMPOUT(0x1B1D265C8);
}

void sub_1B1D265AC()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 176);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1B1D265F0);
}

void sub_1B1D265C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48)
{
  a48 = (void **)(v48 - 240);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a48);
  uint64_t v50 = *(void **)(v48 - 208);
  if (v50)
  {
    *(void *)(v48 - 200) = v50;
    operator delete(v50);
  }
  quasar::RescoringDeliberationDecoder::ResultData::~ResultData((quasar::RescoringDeliberationDecoder::ResultData *)(v48 - 168));
  _Unwind_Resume(a1);
}

uint64_t quasar::RescoringDeliberationDecoder::ResultData::recordEvent(uint64_t this, const char *a2, uint64_t a3)
{
  if (*(void *)(this + 8))
  {
    uint64_t v5 = this;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
    size_t v6 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)a2, v6);
    if ((a3 & 0x8000000000000000) == 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)":", 1);
      std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)":", 1);
    double v8 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v7) - *(double *)(v5 + 24);
    if (v8 != 0.0)
    {
      double v9 = log10(fabs(v8));
      __exp10(3.0 - ceil(v9));
    }
    std::ostream::operator<<();
    uint64_t v10 = *(void *)(v5 + 8);
    std::string::basic_string[abi:ne180100]<0>(v16, "rescoringDeliberationEvents");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(__p, ",");
    quasar::SpeechRequestResultData::appendDumpAA(v10, (long long *)v16, (uint64_t)&v14, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    v18[0] = *MEMORY[0x1E4FBA408];
    uint64_t v11 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    v19[0] = v11;
    v19[1] = MEMORY[0x1E4FBA470] + 16;
    if (v20 < 0) {
      operator delete((void *)v19[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x1B3EA8520](&v21);
  }
  return this;
}

void sub_1B1D2687C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t quasar::RescoringDeliberationDecoder::ResultData::finalize(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "finalize() called twice on ResultData within single request life cycle.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rescoringDeliberationFinalizeDuration");
    double v6 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v5) - *(double *)(a1 + 24);
    if (v6 == 0.0)
    {
      double v9 = 0.0;
    }
    else
    {
      double v7 = log10(fabs(v6));
      double v8 = __exp10(3.0 - ceil(v7));
      *(float *)&double v8 = round(v6 * v8) / v8;
      double v9 = *(float *)&v8;
    }
    quasar::SpeechRequestResultData::addDumpAA(v4, (long long *)__p, 1, v9);
    if (SBYTE7(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  *(unsigned char *)(a1 + 64) = 1;
  return a2;
}

void sub_1B1D26A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::RescoringDeliberationDecoder::expandResultChoicesAndBuildInputForRescoring(uint64_t a1, uint64_t **a2, uint64_t a3, unint64_t *a4, uint64_t a5, long long *a6, uint64_t a7)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  std::string::size_type v14 = a1 + 456;
  flatbuffers_2_0_6::FlatBufferBuilder::Clear((flatbuffers_2_0_6::FlatBufferBuilder *)(a1 + 456));
  LOBYTE(v50[0]) = 0;
  char v51 = 0;
  quasar::rescoring::MultiSourceNBestListBuilder::MultiSourceNBestListBuilder(&v52, v14, a6, (uint64_t)v50);
  if (v51) {
    std::__function::__value_func<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::~__value_func[abi:ne180100](v50);
  }
  if (*a2 == a2[1] || **a2 == (*a2)[1])
  {
    uint64_t v15 = quasar::rescoring::MultiSourceNBestListBuilder::finalizeAndReturnNBestList((uint64_t)&v52, 0);
  }
  else
  {
    if (*(unsigned char *)(a7 + 24))
    {
      memset(&v31, 0, sizeof(v31));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, *(long long **)a7, *(long long **)(a7 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 3));
    }
    else
    {
      quasar::ptt::ExtractPronunciation(a2, 1, &v31);
    }
    long long v16 = *a2;
    for (uint64_t i = **a2; ; i += 224)
    {
      if (i == (*a2)[1])
      {
        int v19 = 1;
        goto LABEL_16;
      }
      int v18 = *(_DWORD *)(i + 168);
      if (v18 != 4) {
        break;
      }
    }
    if (v18 == 5)
    {
      uint64_t v28 = i;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Token ", 6);
      long long v30 = quasar::operator<<(v29, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" does not have a valid LME type set. Did something go wrong during data deserialization? Was the serialized data generated with an older version of the decoder?", 160);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
    }
    int v19 = 0;
LABEL_16:
    unint64_t v20 = *(unsigned int *)(a1 + 572);
    if (v20)
    {
      if ((int)v20 < 1 || 0xAAAAAAAAAAAAAAABLL * (a2[1] - v16) <= v20) {
        quasar::rescoring::MultiSourceNBestListBuilder::addResultChoices((uint64_t)&v52, a2, 0);
      }
      else {
        quasar::rescoring::MultiSourceNBestListBuilder::addResultChoices<std::__wrap_iter<std::vector<quasar::Token> const*>>((uint64_t)&v52, v16, &v16[3 * v20], 0);
      }
    }
    if (a4)
    {
      unint64_t v21 = *(unsigned int *)(a1 + 572);
      if ((v21 & 0x80000000) != 0)
      {
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
      }
      else if (0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2) < v21)
      {
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
      }
      *a4 = v21;
    }
    if (((*(unsigned char *)(a1 + 568) != 0) & ~v19) == 0)
    {
      uint64_t v22 = *(void *)(a1 + 560);
      if (v22)
      {
        if (quasar::gLogLevel >= 6)
        {
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v32 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
          long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Generating phonetic alternatives using ", 39);
          long long v24 = quasar::lm::operator<<<std::string>(v23, (uint64_t *)&v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v32);
          uint64_t v22 = *(void *)(a1 + 560);
        }
        quasar::ptt::PronunciationRecognizer::run(v22, (uint64_t *)&v31, a3, &v32);
        quasar::rescoring::MultiSourceNBestListBuilder::addResultChoices((uint64_t)&v52, (uint64_t **)&v32, 1);
        if (a5)
        {
          long long v25 = *(_OWORD *)a5;
          *(_OWORD *)a5 = v32;
          long long v32 = v25;
          uint64_t v26 = *(void *)(a5 + 16);
          *(void *)(a5 + 16) = v33;
          *(void *)&long long v33 = v26;
        }
        long long v49 = (void **)&v32;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v49);
      }
    }
    uint64_t v15 = quasar::rescoring::MultiSourceNBestListBuilder::finalizeAndReturnNBestList((uint64_t)&v52, 0);
    *(void *)&long long v32 = &v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  }
  if (v56)
  {
    long long v57 = v56;
    operator delete(v56);
  }
  if (v55 < 0) {
    operator delete(v54);
  }
  if (v53) {
    std::__function::__value_func<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::~__value_func[abi:ne180100](&v52.__r_.__value_.__l.__size_);
  }
  return v15;
}

void sub_1B1D26E4C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1D26E78);
}

void quasar::RescoringDeliberationDecoder::ResultData::recordRescoringResult(uint64_t a1, std::string *a2, std::string *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "rescoringDeliberationResultOriginalTranscript");
    quasar::formatResultTokensSimple(a2, 0);
    quasar::SpeechRequestResultData::addDumpAA(v3, (long long *)v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v7 = *(void *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v15, "rescoringDeliberationResultModifiedTranscript");
    quasar::formatResultTokensSimple(a3, 0);
    quasar::SpeechRequestResultData::addDumpAA(v7, (long long *)v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v8 = *(void *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v15, "rescoringDeliberationResultDuration");
    double v10 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v9) - *(double *)(a1 + 24);
    if (v10 == 0.0)
    {
      double v13 = 0.0;
    }
    else
    {
      double v11 = log10(fabs(v10));
      double v12 = __exp10(3.0 - ceil(v11));
      *(float *)&double v12 = round(v10 * v12) / v12;
      double v13 = *(float *)&v12;
    }
    quasar::SpeechRequestResultData::addDumpAA(v8, (long long *)v15, 1, v13);
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
}

void sub_1B1D26FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::vector<quasar::Token>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    void v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B1D270CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

char *std::vector<double>::insert(uint64_t a1, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = __src;
  if (a3)
  {
    uint64_t v5 = a4;
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v8 = a1 + 16;
    uint64_t v9 = v10;
    double v11 = *(char **)(v8 - 8);
    if (a3 <= (v10 - (uint64_t)v11) >> 3)
    {
      uint64_t v18 = v11 - __src;
      if (a3 <= (v11 - __src) >> 3)
      {
        unint64_t v21 = *(char **)(v8 - 8);
        uint64_t v20 = a3;
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = v18 >> 3;
        unint64_t v21 = &v11[8 * (a3 - (v18 >> 3))];
        do
        {
          *(void *)&v11[v19] = *(void *)a4;
          v19 += 8;
        }
        while (8 * a3 - 8 * v20 != v19);
        *(void *)(a1 + 8) = v21;
        if (v11 == __src) {
          return v4;
        }
      }
      uint64_t v22 = &__src[8 * a3];
      long long v23 = &v21[-8 * a3];
      long long v24 = v21;
      if (v23 < v11)
      {
        long long v24 = v21;
        do
        {
          uint64_t v25 = *(void *)v23;
          v23 += 8;
          *(void *)long long v24 = v25;
          v24 += 8;
        }
        while (v23 < v11);
      }
      *(void *)(a1 + 8) = v24;
      if (v21 != v22) {
        memmove(&v21[-8 * ((v21 - v22) >> 3)], __src, v21 - v22);
      }
      if (v4 <= v5)
      {
        if (*(void *)(a1 + 8) <= (unint64_t)v5) {
          unint64_t v26 = 0;
        }
        else {
          unint64_t v26 = a3;
        }
        v5 += 8 * v26;
      }
      long long v27 = v4;
      do
      {
        *(void *)long long v27 = *(void *)v5;
        v27 += 8;
        --v20;
      }
      while (v20);
    }
    else
    {
      double v12 = *(unsigned char **)a1;
      unint64_t v13 = a3 + ((uint64_t)&v11[-*(void *)a1] >> 3);
      if (v13 >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (__src - v12) >> 3;
      uint64_t v15 = v9 - (void)v12;
      if (v15 >> 2 > v13) {
        unint64_t v13 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v13;
      }
      uint64_t v36 = v8;
      if (v16) {
        long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v8, v16);
      }
      else {
        long long v17 = 0;
      }
      uint64_t v28 = &v17[8 * v14];
      std::string __p = v17;
      long long v33 = v28;
      long long v35 = &v17[8 * v16];
      uint64_t v29 = 8 * a3;
      long long v30 = &v28[8 * a3];
      do
      {
        *(void *)uint64_t v28 = *(void *)v5;
        v28 += 8;
        v29 -= 8;
      }
      while (v29);
      long long v34 = v30;
      uint64_t v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
      if (v34 != v33) {
        v34 += (v33 - v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v4;
}

void sub_1B1D272CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::RescoringDeliberationDecoder::registerParams(quasar::RescoringDeliberationDecoder *this, quasar::SystemConfig *a2)
{
  quasar::SystemConfig::getPrefix(a2, &v4);
  std::string __p = v4;
  memset(&v4, 0, sizeof(v4));
  char v6 = 1;
  quasar::rescoring::RescorerConfig::RescorerConfig(v7, a2, &__p, 0, *((unsigned __int8 *)this + 441));
  operator new();
}

void sub_1B1D278E0()
{
  if (SLOBYTE(STACK[0x737]) < 0) {
    JUMPOUT(0x1B1D278C4);
  }
  JUMPOUT(0x1B1D278C8);
}

void sub_1B1D278F4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, ...)
{
  va_start(va, a14);
  quasar::rescoring::RescorerConfig::~RescorerConfig((quasar::rescoring::RescorerConfig *)&STACK[0x720]);
  MEMORY[0x1B3EA8670](v14, 0x10F2C4003D8C6B3);
  quasar::rescoring::RescorerConfig::~RescorerConfig((quasar::rescoring::RescorerConfig *)va);
  if (a14 && a13 < 0) {
    operator delete(__p);
  }
  if (a7 < 0) {
    JUMPOUT(0x1B1D278C4);
  }
  JUMPOUT(0x1B1D278C8);
}

uint64_t quasar::RescoringDeliberationDecoder::supportsEager(quasar::RescoringDeliberationDecoder *this)
{
  return 1;
}

void quasar::RescoringDeliberationDecoder::~RescoringDeliberationDecoder(quasar::ptt::PronunciationRecognizer **this)
{
  *this = (quasar::ptt::PronunciationRecognizer *)&unk_1F0A578A0;
  std::unique_ptr<quasar::ptt::PronunciationRecognizer>::reset[abi:ne180100](this + 70, 0);
  flatbuffers_2_0_6::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers_2_0_6::FlatBufferBuilder *)(this + 57));
  std::unique_ptr<quasar::rescoring::Rescorer>::reset[abi:ne180100](this + 56, 0);
  quasar::Decoder::~Decoder((quasar::Decoder *)this);
}

{
  uint64_t vars8;

  *this = (quasar::ptt::PronunciationRecognizer *)&unk_1F0A578A0;
  std::unique_ptr<quasar::ptt::PronunciationRecognizer>::reset[abi:ne180100](this + 70, 0);
  flatbuffers_2_0_6::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers_2_0_6::FlatBufferBuilder *)(this + 57));
  std::unique_ptr<quasar::rescoring::Rescorer>::reset[abi:ne180100](this + 56, 0);
  quasar::Decoder::~Decoder((quasar::Decoder *)this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::RescoringDeliberationDecoder::ResultData::ResultData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *(void *)a1 = &unk_1F0A640F0;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 48) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 24), (clockid_t)a2);
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  return a1;
}

void sub_1B1D27ACC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::RescoringDeliberationDecoder::ResultData::~ResultData(quasar::RescoringDeliberationDecoder::ResultData *this)
{
  quasar::RescoringDeliberationDecoder::ResultData::~ResultData(this);
  JUMPOUT(0x1B3EA8670);
}

{
  BOOL v2;
  void *v3;
  std::__shared_weak_count *v4;
  _OWORD v5[17];

  *(void *)this = &unk_1F0A640F0;
  if (*((unsigned char *)this + 64)) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = quasar::gLogLevel < 1;
  }
  if (!v2)
  {
    memset(v5, 0, sizeof(v5));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ResultData destructor ran, but object was not finalized. ", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Was an exception thrown?", 24);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v5);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void quasar::rescoring::RescorerConfig::~RescorerConfig(quasar::rescoring::RescorerConfig *this)
{
  std::__tree<int>::destroy((uint64_t)this + 1720, *((void **)this + 216));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 214);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 212);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  quasar::SystemConfig::~SystemConfig((quasar::rescoring::RescorerConfig *)((char *)this + 144));
  std::__optional_destruct_base<quasar::filesystem::Path,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 96);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t std::__optional_destruct_base<quasar::filesystem::Path,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    *(void *)a1 = &unk_1F0A51998;
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

void flatbuffers_2_0_6::FlatBufferBuilder::Clear(flatbuffers_2_0_6::FlatBufferBuilder *this)
{
  *((_DWORD *)this + 18) = 0;
  *((_WORD *)this + 38) = 0;
  uint64_t v1 = *((void *)this + 6);
  if (v1)
  {
    uint64_t v2 = v1 + *((void *)this + 4);
  }
  else
  {
    uint64_t v2 = 0;
    *((void *)this + 4) = 0;
  }
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 7) = v2;
  *((void *)this + 8) = v1;
  *((_WORD *)this + 39) = 0;
  *((void *)this + 10) = 1;
  uint64_t v3 = *((void *)this + 12);
  if (v3)
  {
    std::__tree<int>::destroy(*((void *)this + 12), *(void **)(v3 + 8));
    *(void *)uint64_t v3 = v3 + 8;
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 8) = 0;
  }
}

void quasar::ptt::ExtractPronunciation(uint64_t **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (v5 == *a1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else if (a2 == 1)
  {
    for (uint64_t i = v4 + 3; i != v5; i += 3)
    {
      if (quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator()((uint64_t)__p, i, v4))
      {
        uint64_t v4 = i;
      }
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v9 = (const std::string *)*v4;
    uint64_t v10 = (const std::string *)v4[1];
    if ((const std::string *)*v4 != v10)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(__p, " ");
        quasar::splitAndTrimNoEmpty(v9 + 2, (char *)__p, (uint64_t)a3);
        if (SBYTE7(v12) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v9 = (const std::string *)((char *)v9 + 224);
      }
      while (v9 != v10);
    }
  }
  else
  {
    if (a2)
    {
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown strategy: ", 18);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    char v6 = (const std::string *)*v4;
    uint64_t v7 = (const std::string *)v4[1];
    if ((const std::string *)*v4 != v7)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(__p, " ");
        quasar::splitAndTrimNoEmpty(v6 + 2, (char *)__p, (uint64_t)a3);
        if (SBYTE7(v12) < 0) {
          operator delete(__p[0]);
        }
        char v6 = (const std::string *)((char *)v6 + 224);
      }
      while (v6 != v7);
    }
  }
}

void sub_1B1D27EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t quasar::rescoring::MultiSourceNBestListBuilder::addResultChoices<std::__wrap_iter<std::vector<quasar::Token> const*>>(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  long long v103 = 0;
  v104 = 0;
  v105 = 0;
  char v100 = 0;
  v101 = 0;
  char v102 = 0;
  memset(&v99, 0, sizeof(v99));
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    unsigned __int8 v94 = (void **)(a1 + 48);
    uint64_t v92 = a1 + 88;
    v93 = (void **)(a1 + 72);
    do
    {
      uint64_t v98 = (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2;
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v109, "%1%-%2%");
      unint64_t v106 = v94;
      std::string v107 = boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      v108 = boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      uint64_t v6 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v109, (uint64_t)&v106);
      unint64_t v106 = (void **)&v98;
      std::string v107 = boost::io::detail::call_put_head<char,std::char_traits<char>,unsigned long const>;
      v108 = boost::io::detail::call_put_last<char,std::char_traits<char>,unsigned long const>;
      uint64_t v7 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v6, (uint64_t)&v106);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v7, &v97);
      if (BYTE8(v116))
      {
        std::locale::~locale((std::locale *)v117);
        BYTE8(v116) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v115);
      if (SBYTE7(v114) < 0) {
        operator delete(__p[0]);
      }
      if (*((void *)&v110 + 1)) {
        operator delete(*((void **)&v110 + 1));
      }
      unint64_t v106 = (void **)&v109;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100](&v106);
      v99.__end_ = v99.__begin_;
      std::vector<int>::reserve(&v99, 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 5));
      v104 = (char *)v103;
      uint64_t v9 = *v5;
      uint64_t v8 = v5[1];
      if (*v5 == v8)
      {
        double v13 = 0.0;
        double v12 = 0.0;
        double v11 = 0.0;
        double v10 = 0.0;
      }
      else
      {
        double v10 = 0.0;
        double v11 = 0.0;
        double v12 = 0.0;
        double v13 = 0.0;
        do
        {
          float v15 = *(float *)(v9 + 204);
          float v14 = *(float *)(v9 + 208);
          float v17 = *(float *)(v9 + 212);
          float v16 = *(float *)(v9 + 216);
          long long v18 = *(flatbuffers_2_0_6::FlatBufferBuilder **)a1;
          int v19 = *(char *)(v9 + 23);
          if (v19 >= 0) {
            long long v20 = (const char *)v9;
          }
          else {
            long long v20 = *(const char **)v9;
          }
          if (v19 >= 0) {
            unint64_t v21 = *(unsigned __int8 *)(v9 + 23);
          }
          else {
            unint64_t v21 = *(void *)(v9 + 8);
          }
          int String = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, v20, v21);
          int v23 = *(char *)(v9 + 71);
          if (v23 >= 0) {
            long long v24 = (const char *)(v9 + 48);
          }
          else {
            long long v24 = *(const char **)(v9 + 48);
          }
          if (v23 >= 0) {
            unint64_t v25 = *(unsigned __int8 *)(v9 + 71);
          }
          else {
            unint64_t v25 = *(void *)(v9 + 56);
          }
          int v26 = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, v24, v25);
          int v27 = *(_DWORD *)(v9 + 168);
          if (v27 == 5)
          {
            long long v116 = 0u;
            memset(v117, 0, sizeof(v117));
            long long v114 = 0u;
            memset(v115, 0, sizeof(v115));
            long long v112 = 0u;
            *(_OWORD *)std::string __p = 0u;
            long long v110 = 0u;
            long long v111 = 0u;
            long long v109 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"Provided LME type is invalid. Could it be that the input data was generated using an older version of the decoder?", 114);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v109);
          }
          int v28 = v26;
          int v29 = *(_DWORD *)(v9 + 24);
          if (v27 == 4) {
            char v30 = 1;
          }
          else {
            char v30 = 2;
          }
          *((unsigned char *)v18 + 78) = 1;
          int v31 = *((_DWORD *)v18 + 10);
          flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>(v18, 8, v29, 0);
          flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(v18, 6, v28);
          flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(v18, 4, String);
          flatbuffers_2_0_6::FlatBufferBuilder::AddElement<signed char>(v18, 10, v30, 0);
          int v32 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable(v18, v31);
          int v33 = v32;
          long long v34 = v104;
          if (v104 >= v105)
          {
            uint64_t v36 = (char *)v103;
            uint64_t v37 = (v104 - (unsigned char *)v103) >> 2;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v39 = v105 - (unsigned char *)v103;
            if ((v105 - (unsigned char *)v103) >> 1 > v38) {
              unint64_t v38 = v39 >> 1;
            }
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v38;
            }
            if (v40)
            {
              long long v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v105, v40);
              uint64_t v36 = (char *)v103;
              long long v34 = v104;
            }
            else
            {
              long long v41 = 0;
            }
            long long v42 = &v41[4 * v37];
            *(_DWORD *)long long v42 = v33;
            long long v35 = v42 + 4;
            while (v34 != v36)
            {
              int v43 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            long long v103 = v42;
            v104 = v35;
            v105 = &v41[4 * v40];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *(_DWORD *)v104 = v32;
            long long v35 = v34 + 4;
          }
          double v10 = v10 + v15;
          double v11 = v11 + v14;
          double v12 = v12 + v17;
          double v13 = v13 + v16;
          v104 = v35;
          v9 += 224;
        }
        while (v9 != v8);
      }
      if (*(unsigned char *)(a1 + 40))
      {
        v101 = (char *)v100;
        uint64_t v44 = *(void *)(a1 + 32);
        if (!v44) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(long long *__return_ptr))(*(void *)v44 + 48))(&v109);
        uint64_t v46 = *((void *)&v109 + 1);
        for (uint64_t i = v109; i != v46; i += 224)
        {
          long long v47 = *(flatbuffers_2_0_6::FlatBufferBuilder **)a1;
          int v48 = *(char *)(i + 23);
          if (v48 >= 0) {
            long long v49 = (const char *)i;
          }
          else {
            long long v49 = *(const char **)i;
          }
          if (v48 >= 0) {
            unint64_t v50 = *(unsigned __int8 *)(i + 23);
          }
          else {
            unint64_t v50 = *(void *)(i + 8);
          }
          int v51 = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, v49, v50);
          *((unsigned char *)v47 + 78) = 1;
          int v52 = *((_DWORD *)v47 + 10);
          flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>(v47, 8, 0, 0);
          flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(v47, 6, 0);
          flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(v47, 4, v51);
          flatbuffers_2_0_6::FlatBufferBuilder::AddElement<signed char>(v47, 10, 0, 0);
          int v53 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable(v47, v52);
          int v54 = v53;
          char v55 = v101;
          if (v101 >= v102)
          {
            long long v57 = (char *)v100;
            uint64_t v58 = (v101 - (unsigned char *)v100) >> 2;
            unint64_t v59 = v58 + 1;
            if ((unint64_t)(v58 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v60 = v102 - (unsigned char *)v100;
            if ((v102 - (unsigned char *)v100) >> 1 > v59) {
              unint64_t v59 = v60 >> 1;
            }
            if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v61 = v59;
            }
            if (v61)
            {
              unsigned int v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v102, v61);
              long long v57 = (char *)v100;
              char v55 = v101;
            }
            else
            {
              unsigned int v62 = 0;
            }
            char v63 = &v62[4 * v58];
            *(_DWORD *)char v63 = v54;
            long long v56 = v63 + 4;
            while (v55 != v57)
            {
              int v64 = *((_DWORD *)v55 - 1);
              v55 -= 4;
              *((_DWORD *)v63 - 1) = v64;
              v63 -= 4;
            }
            char v100 = v63;
            v101 = v56;
            char v102 = &v62[4 * v61];
            if (v57) {
              operator delete(v57);
            }
          }
          else
          {
            *(_DWORD *)v101 = v53;
            long long v56 = v55 + 4;
          }
          v101 = v56;
        }
        unint64_t v106 = (void **)&v109;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v106);
      }
      uint64_t v65 = *(flatbuffers_2_0_6::FlatBufferBuilder **)a1;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v66 = &v97;
      }
      else {
        uint64_t v66 = (std::string *)v97.__r_.__value_.__r.__words[0];
      }
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v97.__r_.__value_.__l.__size_;
      }
      int v68 = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, (const char *)v66, size);
      if (v104 == v103) {
        unint64_t v69 = &flatbuffers_2_0_6::data<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListToken>,std::allocator<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListToken>>>(std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListToken>> const&)::t;
      }
      else {
        unint64_t v69 = v103;
      }
      int v70 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, (uint64_t)v69, (v104 - (unsigned char *)v103) >> 2);
      if (v101 == v100) {
        uint64_t v71 = &flatbuffers_2_0_6::data<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListToken>,std::allocator<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListToken>>>(std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListToken>> const&)::t;
      }
      else {
        uint64_t v71 = v100;
      }
      int v72 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, (uint64_t)v71, (v101 - (unsigned char *)v100) >> 2);
      float v73 = v13;
      *((unsigned char *)v65 + 78) = 1;
      int v74 = *((_DWORD *)v65 + 10);
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<float>(v65, 18, v73, 0.0);
      float v75 = v12;
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<float>(v65, 16, v75, 0.0);
      float v76 = v11;
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<float>(v65, 14, v76, 0.0);
      float v77 = v10;
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<float>(v65, 12, v77, 0.0);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(v65, 10, v72);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(v65, 8, v70);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(v65, 6, v68);
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>(v65, 4, a4, 0);
      int v78 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable(v65, v74);
      int v79 = v78;
      long long v81 = *(char **)(a1 + 80);
      unint64_t v80 = *(void *)(a1 + 88);
      if ((unint64_t)v81 >= v80)
      {
        long long v83 = (char *)*v93;
        uint64_t v84 = (v81 - (unsigned char *)*v93) >> 2;
        unint64_t v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v86 = v80 - (void)v83;
        if (v86 >> 1 > v85) {
          unint64_t v85 = v86 >> 1;
        }
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v87 = v85;
        }
        if (v87)
        {
          v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v92, v87);
          long long v83 = *(char **)(a1 + 72);
          long long v81 = *(char **)(a1 + 80);
        }
        else
        {
          v88 = 0;
        }
        uint64_t v89 = &v88[4 * v84];
        *(_DWORD *)uint64_t v89 = v79;
        long long v82 = v89 + 4;
        while (v81 != v83)
        {
          int v90 = *((_DWORD *)v81 - 1);
          v81 -= 4;
          *((_DWORD *)v89 - 1) = v90;
          v89 -= 4;
        }
        *(void *)(a1 + 72) = v89;
        *(void *)(a1 + 80) = v82;
        *(void *)(a1 + 88) = &v88[4 * v87];
        if (v83) {
          operator delete(v83);
        }
      }
      else
      {
        *(_DWORD *)long long v81 = v78;
        long long v82 = v81 + 4;
      }
      *(void *)(a1 + 80) = v82;
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      v5 += 3;
    }
    while (v5 != a3);
    if (v99.__begin_)
    {
      v99.__end_ = v99.__begin_;
      operator delete(v99.__begin_);
    }
    if (v100)
    {
      v101 = (char *)v100;
      operator delete(v100);
    }
  }
  if (v103)
  {
    v104 = (char *)v103;
    operator delete(v103);
  }
  return a1;
}

void sub_1B1D28750(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1D287C8);
}

void sub_1B1D28760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,uint64_t a33,uint64_t a34,char a35)
{
  a32 = (void **)&a35;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a32);
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v38) {
    operator delete(v38);
  }
  if (v39) {
    operator delete(v39);
  }
  if (v40) {
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

void *quasar::lm::operator<<<std::string>(void *a1, uint64_t *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      int v6 = *(char *)(v4 + 23);
      if (v6 >= 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = *(void *)v4;
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(v4 + 23);
      }
      else {
        uint64_t v8 = *(void *)(v4 + 8);
      }
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
      v4 += 24;
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
  return a1;
}

void quasar::rescoring::MultiSourceNBestListBuilder::~MultiSourceNBestListBuilder(quasar::rescoring::MultiSourceNBestListBuilder *this)
{
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((unsigned char *)this + 40)) {
    std::__function::__value_func<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::~__value_func[abi:ne180100]((void *)this + 1);
  }
}

std::string *quasar::rescoring::MultiSourceNBestListBuilder::MultiSourceNBestListBuilder(std::string *a1, std::string::size_type a2, long long *a3, uint64_t a4)
{
  a1->__r_.__value_.__r.__words[0] = a2;
  int v6 = a1 + 2;
  std::__optional_copy_base<std::function<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>,false>::__optional_copy_base[abi:ne180100](&a1->__r_.__value_.__s.__data_[8], a4);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    v6->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  a1[3].__r_.__value_.__r.__words[0] = 0;
  a1[3].__r_.__value_.__l.__size_ = 0;
  a1[3].__r_.__value_.__r.__words[2] = 0;
  return a1;
}

void sub_1B1D2893C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40)) {
    std::__function::__value_func<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::~__value_func[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<std::function<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    std::__function::__value_func<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::__value_func[abi:ne180100]((uint64_t)a1, a2);
    a1[32] = 1;
  }
  return a1;
}

void sub_1B1D2899C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32)) {
    std::__function::__value_func<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::~__value_func[abi:ne180100]((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  v26[0] = &unk_1F0A64120;
  int v27 = v26;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  float v7 = 0.0;
  float v8 = 0.0;
  while (v5 != v6)
  {
    if (!v27) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    float v8 = v8 + (*(float (**)(void *, uint64_t))(*v27 + 48))(v27, v5);
    v5 += 224;
  }
  std::__function::__value_func<float ()(quasar::Token const&)>::~__value_func[abi:ne180100](v26);
  v24[0] = &unk_1F0A641A0;
  unint64_t v25 = v24;
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*a3 != v10)
  {
    float v7 = 0.0;
    do
    {
      if (!v25) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      float v7 = v7 + (*(float (**)(void *, uint64_t))(*v25 + 48))(v25, v9);
      v9 += 224;
    }
    while (v9 != v10);
  }
  std::__function::__value_func<float ()(quasar::Token const&)>::~__value_func[abi:ne180100](v24);
  if (v8 < v7) {
    return 1;
  }
  if (v8 > v7) {
    return 0;
  }
  v22[0] = &unk_1F0A64220;
  int v23 = v22;
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  float v14 = 0.0;
  float v15 = 0.0;
  if (v13 != v12)
  {
    float v16 = v22;
    while (1)
    {
      float v15 = v15 + (*(float (**)(void *, uint64_t))(*v16 + 48))(v16, v13);
      v13 += 224;
      if (v13 == v12) {
        break;
      }
      float v16 = v23;
      if (!v23) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
  }
  std::__function::__value_func<float ()(quasar::Token const&)>::~__value_func[abi:ne180100](v22);
  v20[0] = &unk_1F0A642A0;
  unint64_t v21 = v20;
  uint64_t v18 = *a3;
  uint64_t v17 = a3[1];
  if (v18 != v17)
  {
    int v19 = v20;
    float v14 = 0.0;
    while (1)
    {
      float v14 = v14 + (*(float (**)(void *, uint64_t))(*v19 + 48))(v19, v18);
      v18 += 224;
      if (v18 == v17) {
        break;
      }
      int v19 = v21;
      if (!v21) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
  }
  std::__function::__value_func<float ()(quasar::Token const&)>::~__value_func[abi:ne180100](v20);
  return v15 < v14;
}

void sub_1B1D28D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<float ()(quasar::Token const&)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::~__func()
{
}

void *std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A64120;
  return result;
}

void std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A64120;
}

float std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 216);
}

uint64_t std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::target_type()
{
}

void *std::__function::__value_func<float ()(quasar::Token const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2}>,float ()(quasar::Token const&)>::~__func()
{
}

void *std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2}>,float ()(quasar::Token const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A641A0;
  return result;
}

void std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2}>,float ()(quasar::Token const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A641A0;
}

float std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2}>,float ()(quasar::Token const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 216);
}

uint64_t std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2}>,float ()(quasar::Token const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2}>,float ()(quasar::Token const&)>::target_type()
{
}

void std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3}>,float ()(quasar::Token const&)>::~__func()
{
}

void *std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3}>,float ()(quasar::Token const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A64220;
  return result;
}

void std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3}>,float ()(quasar::Token const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A64220;
}

float std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3}>,float ()(quasar::Token const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 208);
}

uint64_t std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3}>,float ()(quasar::Token const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3}>,float ()(quasar::Token const&)>::target_type()
{
}

void std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4}>,float ()(quasar::Token const&)>::~__func()
{
}

void *std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4}>,float ()(quasar::Token const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A642A0;
  return result;
}

void std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4}>,float ()(quasar::Token const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A642A0;
}

float std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4}>,float ()(quasar::Token const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 208);
}

uint64_t std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4}>,float ()(quasar::Token const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4},std::allocator<quasar::ptt::ExtractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ptt::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4}>,float ()(quasar::Token const&)>::target_type()
{
}

void boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(void *)(a1 + 8) == *(void *)a1)
  {
    if (*(char *)(a1 + 87) < 0)
    {
      unint64_t v21 = *(const std::string::value_type **)(a1 + 64);
      std::string::size_type v22 = *(void *)(a1 + 72);
      std::string::__init_copy_ctor_external(a2, v21, v22);
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 64);
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 80);
    }
  }
  else
  {
    uint64_t v4 = *(int *)(a1 + 52);
    uint64_t v5 = *(int *)(a1 + 56);
    if ((int)v4 < (int)v5 && (*(unsigned char *)(a1 + 88) & 2) != 0)
    {
      v23[0] = &unk_1F0A46E50;
      v23[1] = v4;
      v23[2] = v5;
      boost::throw_exception<boost::io::too_few_args>((uint64_t)v23);
    }
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    std::string::size_type v6 = boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::size((uint64_t *)a1);
    std::string::reserve(a2, v6);
    int v7 = *(char *)(a1 + 87);
    if (v7 >= 0) {
      float v8 = (const std::string::value_type *)(a1 + 64);
    }
    else {
      float v8 = *(const std::string::value_type **)(a1 + 64);
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)(a1 + 87);
    }
    else {
      std::string::size_type v9 = *(void *)(a1 + 72);
    }
    std::string::append(a2, v8, v9);
    uint64_t v10 = *(void *)a1;
    if (*(void *)(a1 + 8) != *(void *)a1)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        int v13 = *(char *)(v10 + v11 + 31);
        if (v13 >= 0) {
          float v14 = (const std::string::value_type *)(v10 + v11 + 8);
        }
        else {
          float v14 = *(const std::string::value_type **)(v10 + v11 + 8);
        }
        if (v13 >= 0) {
          std::string::size_type v15 = *(unsigned __int8 *)(v10 + v11 + 31);
        }
        else {
          std::string::size_type v15 = *(void *)(v10 + v11 + 16);
        }
        std::string::append(a2, v14, v15);
        if (*(_DWORD *)(v10 + v11) == -2)
        {
          unint64_t v16 = *(void *)(v10 + v11 + 56);
          std::string::size_type v17 = SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0
              ? a2->__r_.__value_.__l.__size_
              : HIBYTE(a2->__r_.__value_.__r.__words[2]);
          if (v16 > v17) {
            std::string::append(a2, v16 - v17, *(unsigned char *)(v10 + v11 + 72));
          }
        }
        int v18 = *(char *)(v10 + v11 + 55);
        if (v18 >= 0) {
          int v19 = (const std::string::value_type *)(v10 + v11 + 32);
        }
        else {
          int v19 = *(const std::string::value_type **)(v10 + v11 + 32);
        }
        if (v18 >= 0) {
          std::string::size_type v20 = *(unsigned __int8 *)(v10 + v11 + 55);
        }
        else {
          std::string::size_type v20 = *(void *)(v10 + v11 + 40);
        }
        std::string::append(a2, v19, v20);
        ++v12;
        uint64_t v10 = *(void *)a1;
        v11 += 120;
      }
      while (v12 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
    }
    *(unsigned char *)(a1 + 60) = 1;
  }
}

void sub_1B1D29370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

uint64_t boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::~basic_format(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    std::locale::~locale((std::locale *)(a1 + 192));
    *(unsigned char *)(a1 + 184) = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(a1 + 96);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v4 = (void **)a1;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format(uint64_t a1, char *a2)
{
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(unsigned char *)(a1 + 88) = -1;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 96) = &unk_1F0A46EC8;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 172) = 24;
  *(unsigned char *)(a1 + 184) = 0;
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::parse(a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

void sub_1B1D294D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v15 + 184))
  {
    std::locale::~locale((std::locale *)(v15 + 192));
    *(unsigned char *)(v15 + 184) = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(v16);
  if (*(char *)(v15 + 87) < 0) {
    operator delete(*v17);
  }
  int v19 = *(void **)(v15 + 24);
  if (v19) {
    operator delete(v19);
  }
  std::string __p = (void *)v15;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::parse(uint64_t a1, const std::string *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::getloc(a1, &v36);
  uint64_t v4 = (std::locale::facet *)std::locale::use_facet(&v36, MEMORY[0x1E4FBA258]);
  std::locale::~locale(&v36);
  char v5 = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 37);
  int v6 = boost::io::detail::upper_bound_from_fstring<std::string,std::ctype<char>>(a2, v5, (uint64_t)v4, *(unsigned char *)(a1 + 88));
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::make_or_reuse_data(a1, v6);
  long long v35 = 0;
  std::string::size_type v7 = std::string::find(a2, v5, 0);
  if (v7 == -1)
  {
    std::string::size_type v10 = 0;
    int v34 = 0;
    int v33 = -1;
    char v31 = 0;
    char v32 = 1;
  }
  else
  {
    std::string::size_type v8 = v7;
    int v9 = 0;
    std::string::size_type v10 = 0;
    int v34 = 0;
    int v33 = -1;
    char v31 = 0;
    char v32 = 1;
    do
    {
      uint64_t v11 = (std::string *)(a1 + 64);
      if (v9) {
        uint64_t v11 = (std::string *)(*(void *)a1 + 120 * v9 - 88);
      }
      std::string::size_type v12 = v8 + 1;
      std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      float v14 = (char *)a2->__r_.__value_.__r.__words[0];
      if ((size & 0x80u) == 0) {
        float v14 = (char *)a2;
      }
      if (v14[v12] == v14[v8])
      {
        std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v11, &v14[v10], &v14[v12]);
        std::string::size_type v10 = v8 + 2;
        uint64_t v15 = (unsigned __int8 *)(v8 + 2);
      }
      else
      {
        if (v8 != v10)
        {
          std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v11, &v14[v10], &v14[v8]);
          std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        }
        if ((size & 0x80) != 0)
        {
          uint64_t v16 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          std::string::size_type size = a2->__r_.__value_.__l.__size_;
        }
        else
        {
          uint64_t v16 = a2;
        }
        long long v35 = (const std::string *)((char *)v16 + v12);
        v36.__locale_ = (std::locale::__imp *)((char *)v16 + size);
        int v17 = boost::io::detail::parse_printf_directive<char,std::char_traits<char>,std::allocator<char>,std::__wrap_iter<char const*>,std::ctype<char>>((unsigned __int8 **)&v35, (char **)&v36, *(void *)a1 + 120 * v9, v4, (unsigned __int8 *)(v8 + 1), *(unsigned __int8 *)(a1 + 88));
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v18 = (std::string::size_type)a2;
        }
        else {
          std::string::size_type v18 = a2->__r_.__value_.__r.__words[0];
        }
        uint64_t v15 = (unsigned __int8 *)v35 - v18;
        if (v17)
        {
          boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::compute_states(*(void *)a1 + 120 * v9);
          int v19 = *(_DWORD *)(*(void *)a1 + 120 * v9);
          if (v19 != -3)
          {
            if (v19 == -1)
            {
              char v32 = 0;
              int v20 = v34;
            }
            else
            {
              int v20 = v34;
              if (v19 == -2)
              {
                char v31 = 1;
              }
              else
              {
                int v21 = v33;
                if (v19 > v33) {
                  int v21 = *(_DWORD *)(*(void *)a1 + 120 * v9);
                }
                int v33 = v21;
              }
            }
            int v34 = v20 + 1;
            ++v9;
          }
          std::string::size_type v10 = (std::string::size_type)v15;
        }
        else
        {
          std::string::size_type v10 = v8;
        }
      }
      std::string::size_type v8 = std::string::find(a2, v5, (std::string::size_type)v15);
    }
    while (v8 != -1);
    if (v9)
    {
      std::string::size_type v22 = (std::string *)(*(void *)a1 + 120 * v9 - 88);
      goto LABEL_34;
    }
  }
  std::string::size_type v22 = (std::string *)(a1 + 64);
LABEL_34:
  std::string::size_type v23 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  BOOL v24 = (v23 & 0x80u) != 0;
  if ((v23 & 0x80u) != 0) {
    std::string::size_type v23 = a2->__r_.__value_.__l.__size_;
  }
  if (v24) {
    unint64_t v25 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  else {
    unint64_t v25 = (char *)a2;
  }
  std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v22, &v25[v10], &v25[v23]);
  if ((v32 & 1) == 0)
  {
    if (v33 & 0x80000000) == 0 && (*(unsigned char *)(a1 + 88))
    {
      v36.__locale_ = (std::locale::__imp *)&unk_1F0A46EA0;
      v37[0] = (void *)v33;
      v37[1] = 0;
      boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v36);
    }
    if (v34 < 1)
    {
      int v26 = 0;
    }
    else
    {
      int v26 = 0;
      int v27 = *(_DWORD **)a1;
      uint64_t v28 = v34;
      do
      {
        if (*v27 == -1) {
          *int v27 = v26++;
        }
        v27 += 30;
        --v28;
      }
      while (v28);
    }
    int v33 = v26 - 1;
  }
  char v29 = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
  LODWORD(v36.__locale_) = -1;
  char v45 = 0;
  *(_OWORD *)char v37 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v39 = 0u;
  uint64_t v40 = 0;
  uint64_t v41 = 6;
  char v42 = v29;
  int v44 = 0;
  uint64_t v43 = 4098;
  v46[1].__locale_ = (std::locale::__imp *)0x7FFFFFFFFFFFFFFFLL;
  int v47 = 0;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::resize((uint64_t *)a1, v34, (uint64_t)&v36);
  if (v45)
  {
    std::locale::~locale(v46);
    char v45 = 0;
  }
  if (SHIBYTE(v39) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v37[0]);
  }
  if (v31) {
    *(_DWORD *)(a1 + 48) |= 4u;
  }
  *(_DWORD *)(a1 + 56) = v33 + 1;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 48) & 0xFFFFFFFE | v32 & 1;
  return a1;
}

void sub_1B1D299A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception a14)
{
}

void boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(uint64_t a1)
{
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(a1);
  JUMPOUT(0x1B3EA8670);
}

double boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff@<D0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v5 = a1[6];
  if (v5 && a1[8] < v5) {
    a1[8] = v5;
  }
  if ((a4 & 8) != 0)
  {
    uint64_t v6 = a1[3];
    if (v6)
    {
      if (a3)
      {
        if (a3 == 1)
        {
          if ((a4 & 0x10) != 0) {
            goto LABEL_29;
          }
          goto LABEL_21;
        }
        if (a3 != 2) {
          goto LABEL_29;
        }
        std::string::size_type v7 = a1 + 8;
      }
      else
      {
        std::string::size_type v7 = a1 + 2;
      }
      a2 = a2 - v6 + *v7;
LABEL_21:
      if (a1[2] <= (unint64_t)(v6 + a2) && (unint64_t)(v6 + a2) <= a1[8])
      {
        uint64_t v11 = v6 + (int)a2;
        a1[3] = v11;
        if ((a4 & 0x10) == 0 || !v5) {
          goto LABEL_27;
        }
        LODWORD(v11) = v11 - v5;
LABEL_26:
        a1[6] = v5 + (int)v11;
LABEL_27:
        uint64_t v8 = a2;
        goto LABEL_30;
      }
LABEL_29:
      uint64_t v8 = -1;
      goto LABEL_30;
    }
  }
  uint64_t v8 = -1;
  if ((a4 & 0x10) != 0 && v5)
  {
    if (!a3)
    {
      unint64_t v10 = a1[5];
      unint64_t v9 = v10 - v5;
      goto LABEL_16;
    }
    if (a3 == 2)
    {
      unint64_t v9 = a1[8] - v5;
      unint64_t v10 = a1[5];
LABEL_16:
      uint64_t v11 = v9 + a2;
      if (v10 <= v5 + v11)
      {
        a2 = v11;
        if (v5 + v11 <= a1[8]) {
          goto LABEL_26;
        }
      }
      goto LABEL_29;
    }
  }
LABEL_30:
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 128) = v8;
  return result;
}

double boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos@<D0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 128);
  unint64_t v5 = a1[6];
  if (v5 && a1[8] < v5) {
    a1[8] = v5;
  }
  if (v4 == -1) {
    goto LABEL_16;
  }
  if ((a3 & 8) != 0)
  {
    uint64_t v6 = a1[3];
    if (v6)
    {
      if ((v4 & 0x8000000000000000) == 0)
      {
        uint64_t v7 = a1[2];
        if (v4 <= a1[8] - v7)
        {
          uint64_t v8 = v6 + (int)v4 - (int)v6 + (int)v7;
          a1[3] = v8;
          if ((a3 & 0x10) == 0 || !v5) {
            goto LABEL_20;
          }
          int v9 = v8 - v5;
LABEL_19:
          a1[6] = v5 + v9;
LABEL_20:
          uint64_t v10 = v4;
          goto LABEL_17;
        }
      }
      goto LABEL_16;
    }
  }
  if ((a3 & 0x10) == 0)
  {
LABEL_16:
    uint64_t v10 = -1;
    goto LABEL_17;
  }
  uint64_t v10 = -1;
  if (v5 && (v4 & 0x8000000000000000) == 0)
  {
    uint64_t v11 = a1[2];
    if (v4 <= a1[8] - v11)
    {
      int v9 = v4 - v5 + v11;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
LABEL_17:
  double result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 128) = v10;
  return result;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 24);
  if (v1)
  {
    if ((unint64_t)v1 < *(void *)(a1 + 32)) {
      return *v1;
    }
    if ((*(unsigned char *)(a1 + 76) & 8) != 0)
    {
      unint64_t v3 = *(void *)(a1 + 48);
      if (v3)
      {
        unint64_t v4 = *(void *)(a1 + 64);
        if ((unint64_t)v1 < v3 || (unint64_t)v1 < v4)
        {
          if (v4 < v3)
          {
            *(void *)(a1 + 64) = v3;
            unint64_t v4 = v3;
          }
          *(void *)(a1 + 32) = v4;
          return *v1;
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 && *(void *)(a1 + 16) < v2)
  {
    if (a2 == -1 || (*(_DWORD *)(a1 + 76) & 0x10) != 0)
    {
      unint64_t v3 = (unsigned char *)(v2 - 1);
      *(void *)(a1 + 24) = v3;
      if (a2 == -1) {
        return 0;
      }
      goto LABEL_10;
    }
    int v4 = *(unsigned __int8 *)(v2 - 1);
    unint64_t v3 = (unsigned char *)(v2 - 1);
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = v3;
LABEL_10:
      *unint64_t v3 = a2;
      return a2;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(uint64_t a1, uint64_t a2)
{
  if (a2 == -1) {
    return 0;
  }
  uint64_t v2 = a2;
  int v4 = *(unsigned char **)(a1 + 48);
  if (v4)
  {
    unint64_t v5 = *(void *)(a1 + 56);
    if ((unint64_t)v4 < v5)
    {
      *(void *)(a1 + 48) = v4 + 1;
      *int v4 = a2;
      return v2;
    }
    if ((*(unsigned char *)(a1 + 76) & 0x10) == 0) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v7 = *(void **)(a1 + 16);
    size_t v6 = v5 - (void)v7;
  }
  else
  {
    if ((*(unsigned char *)(a1 + 76) & 0x10) == 0) {
      return 0xFFFFFFFFLL;
    }
    size_t v6 = 0;
    uint64_t v7 = *(void **)(a1 + 16);
  }
  unint64_t v8 = v6 >> 1;
  if (v6 >> 1 <= 0x100) {
    unint64_t v8 = 256;
  }
  while (__CFADD__(v8, v6))
  {
    BOOL v9 = v8 >= 2;
    v8 >>= 1;
    if (!v9)
    {
      uint64_t v10 = 0;
      size_t v11 = v6;
LABEL_18:
      memmove(v10, v7, v6);
      int v12 = 0;
      goto LABEL_20;
    }
  }
  size_t v11 = v8 + v6;
  uint64_t v10 = operator new(v8 + v6);
  if (v6) {
    goto LABEL_18;
  }
  int v12 = 1;
LABEL_20:
  if (*(unsigned char *)(a1 + 72)) {
    operator delete(v7);
  }
  *(unsigned char *)(a1 + 72) = 1;
  if (v12)
  {
    int v13 = &v10[v11];
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = &v10[v11];
    *(void *)(a1 + 64) = v10;
    if ((*(unsigned char *)(a1 + 76) & 8) != 0)
    {
      float v14 = v10 + 1;
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v10;
    }
    else
    {
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = 0;
      float v14 = v10;
    }
  }
  else
  {
    uint64_t v15 = &v10[*(void *)(a1 + 64) - (void)v7];
    uint64_t v16 = *(void *)(a1 + 40);
    int v17 = *(_DWORD *)(a1 + 48) - v16;
    uint64_t v18 = v16 - (void)v7;
    uint64_t v20 = *(void *)(a1 + 16);
    uint64_t v19 = *(void *)(a1 + 24);
    int v21 = &v10[v18];
    int v13 = &v10[v11];
    *(void *)(a1 + 56) = &v10[v11];
    *(void *)(a1 + 64) = v15;
    std::string::size_type v22 = &v21[v17];
    *(void *)(a1 + 40) = v21;
    *(void *)(a1 + 48) = v22;
    if ((*(unsigned char *)(a1 + 76) & 8) != 0)
    {
      std::string::size_type v23 = &v10[(int)v19 - (int)v20];
      float v14 = v22 + 1;
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v23;
    }
    else
    {
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = 0;
      float v14 = v10;
    }
    uint64_t v10 = &v21[v17];
  }
  *(void *)(a1 + 32) = v14;
  if (v10 == v13)
  {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 104))(a1, v2);
  }
  else
  {
    *(void *)(a1 + 48) = v10 + 1;
    *uint64_t v10 = v2;
  }
  return v2;
}

std::locale *boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::getloc@<X0>(uint64_t a1@<X0>, std::locale *a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 184)) {
    JUMPOUT(0x1B3EA83E0);
  }
  return std::locale::locale(a2, (const std::locale *)(a1 + 192));
}

uint64_t boost::io::detail::upper_bound_from_fstring<std::string,std::ctype<char>>(const std::string *a1, unsigned __int8 a2, uint64_t a3, char a4)
{
  std::string::size_type v8 = std::string::find(a1, a2, 0);
  if (v8 == -1) {
    return 0;
  }
  uint64_t v9 = 0;
  while (1)
  {
    std::string::size_type v10 = v8 + 1;
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    std::string::size_type v12 = (size & 0x80u) == 0 ? HIBYTE(a1->__r_.__value_.__r.__words[2]) : a1->__r_.__value_.__l.__size_;
    if (v10 >= v12) {
      break;
    }
    int v13 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) == 0) {
      std::string::size_type v14 = (std::string::size_type)a1;
    }
    else {
      std::string::size_type v14 = a1->__r_.__value_.__r.__words[0];
    }
    int v15 = *(unsigned __int8 *)(v14 + v10);
    if ((size & 0x80) != 0)
    {
      std::string::size_type size = a1->__r_.__value_.__l.__size_;
      if (v15 != v13->__r_.__value_.__s.__data_[v8])
      {
LABEL_14:
        int v17 = (unsigned __int8 *)v13 + v10;
        if (v10 != size)
        {
          uint64_t v18 = (unsigned __int8 *)v13 + size;
          std::string::size_type v19 = ~v8 + size;
          while (((char)*v17 & 0x80000000) == 0 && (*(_DWORD *)(*(void *)(a3 + 16) + 4 * *v17) & 0x400) != 0)
          {
            ++v17;
            if (!--v19)
            {
              int v17 = v18;
              break;
            }
          }
        }
        std::string::size_type v16 = (std::string::size_type)&v17[-v14];
        if ((unint64_t)&v17[-v14] < v12 && *v17 == a2) {
          ++v16;
        }
        uint64_t v9 = (v9 + 1);
        goto LABEL_24;
      }
    }
    else
    {
      int v13 = a1;
      if (v15 != a1->__r_.__value_.__s.__data_[v8]) {
        goto LABEL_14;
      }
    }
    std::string::size_type v16 = v8 + 2;
LABEL_24:
    std::string::size_type v8 = std::string::find(a1, a2, v16);
    if (v8 == -1) {
      return v9;
    }
  }
  if (a4)
  {
    v21[0] = &unk_1F0A46EA0;
    v21[1] = v8;
    v21[2] = v12;
    boost::throw_exception<boost::io::bad_format_string>((uint64_t)v21);
  }
  return (v9 + 1);
}

void sub_1B1D2A024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::make_or_reuse_data(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::getloc(a1, &v8);
  int v4 = std::locale::use_facet(&v8, MEMORY[0x1E4FBA258]);
  char v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
  std::locale::~locale(&v8);
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)a1;
  if (v6)
  {
    if (0xEEEEEEEEEEEEEEEFLL * (v6 >> 3) >= a2)
    {
      std::vector<BOOL>::resize(a1 + 24, 0, 0);
      if (!a2) {
        goto LABEL_19;
      }
    }
    else
    {
      LODWORD(v8.__locale_) = -1;
      char v17 = 0;
      *(_OWORD *)uint64_t v9 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v11 = 0u;
      uint64_t v12 = 0;
      uint64_t v13 = 6;
      char v14 = v5;
      int v16 = 0;
      uint64_t v15 = 4098;
      uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
      int v20 = 0;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::resize((uint64_t *)a1, a2, (uint64_t)&v8);
      if (v17)
      {
        std::locale::~locale(&v18);
        char v17 = 0;
      }
      if (SHIBYTE(v11) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v9[0]);
      }
      std::vector<BOOL>::resize(a1 + 24, 0, 0);
    }
    uint64_t v7 = 0;
    do
    {
      boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::reset(*(void *)a1 + v7, v5);
      v7 += 120;
      --a2;
    }
    while (a2);
  }
  else
  {
    LODWORD(v8.__locale_) = -1;
    char v17 = 0;
    *(_OWORD *)uint64_t v9 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v11 = 0u;
    uint64_t v12 = 0;
    uint64_t v13 = 6;
    char v14 = v5;
    int v16 = 0;
    uint64_t v15 = 4098;
    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    int v20 = 0;
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::assign((void *)a1, a2, (uint64_t)&v8);
    if (v17)
    {
      std::locale::~locale(&v18);
      char v17 = 0;
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v9[0]);
    }
  }
LABEL_19:
  std::string::resize((std::string *)(a1 + 64), 0, 0);
}

void sub_1B1D2A27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::io::detail::parse_printf_directive<char,std::char_traits<char>,std::allocator<char>,std::__wrap_iter<char const*>,std::ctype<char>>(unsigned __int8 **a1, char **a2, uint64_t a3, void *a4, unsigned __int8 *a5, uint64_t a6)
{
  *(_DWORD *)a3 = -1;
  std::locale v8 = *a1;
  unint64_t v9 = (unint64_t)&a5[*a2 - (char *)*a1];
  if (*a2 <= (char *)*a1)
  {
    if (a6)
    {
      int v64 = &unk_1F0A46EA0;
      uint64_t v65 = a5;
      unint64_t v66 = v9;
      boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v64);
    }
    return 0;
  }
  int v14 = *v8;
  unsigned __int8 v15 = (*(uint64_t (**)(void *, uint64_t))(*a4 + 56))(a4, 124);
  int v16 = *a1;
  if (v14 == v15)
  {
    *a1 = ++v16;
    if (v16 >= (unsigned __int8 *)*a2)
    {
      if (a6)
      {
        int v64 = &unk_1F0A46EA0;
        uint64_t v65 = &v16[a5 - v8];
        unint64_t v66 = v9;
        boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v64);
      }
      return 0;
    }
  }
  int v62 = v14;
  int v17 = *v16;
  unsigned __int8 v18 = (*(uint64_t (**)(void *, uint64_t))(*a4 + 56))(a4, 48);
  uint64_t v19 = *a1;
  if (v17 != v18 && ((char)*v19 & 0x80000000) == 0 && (*(_DWORD *)(a4[2] + 4 * *v19) & 0x400) != 0)
  {
    unint64_t v60 = v9;
    int v63 = 0;
    int v20 = boost::io::detail::str2int<int,std::__wrap_iter<char const*>,std::ctype<char>>(a1, a2, &v63, a4);
    *a1 = v20;
    BOOL v21 = *a2 > (char *)v20;
    if (*a2 <= (char *)v20)
    {
      if (a6)
      {
        int v64 = &unk_1F0A46EA0;
        uint64_t v65 = &v20[a5 - v8];
        unint64_t v66 = v9;
        boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v64);
      }
    }
    else
    {
      int v22 = *v20;
      if (v22 != (*(unsigned __int8 (**)(void *, uint64_t))(*a4 + 56))(a4, 37))
      {
        int v24 = **a1;
        if (v24 == (*(unsigned __int8 (**)(void *, uint64_t))(*a4 + 56))(a4, 36))
        {
          *(_DWORD *)a3 = v63 - 1;
          uint64_t v19 = *a1 + 1;
          *a1 = v19;
          unint64_t v9 = v60;
          goto LABEL_35;
        }
        *(void *)(a3 + 56) = v63;
        *(_DWORD *)a3 = -1;
        char v31 = *a1;
        goto LABEL_47;
      }
      *(_DWORD *)a3 = v63 - 1;
      uint64_t v23 = (uint64_t)(*a1 + 1);
      *a1 = (unsigned __int8 *)v23;
      if (v62 == v15) {
        boost::io::detail::maybe_throw_exception(a6, a5 - v8 + v23, v60);
      }
    }
    return v21;
  }
  while (1)
  {
LABEL_35:
    if (v19 == (unsigned __int8 *)*a2)
    {
      if (a6)
      {
        int v64 = &unk_1F0A46EA0;
        uint64_t v65 = &v19[a5 - v8];
        unint64_t v66 = v9;
        boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v64);
      }
      return 1;
    }
    int v25 = (*(uint64_t (**)(void *, void, void))(*a4 + 72))(a4, (char)*v19, 0);
    if (v25 > 38) {
      break;
    }
    if (v25 != 32)
    {
      if (v25 != 35) {
        goto LABEL_39;
      }
      int v26 = *(_DWORD *)(a3 + 76) | 0x600;
      goto LABEL_29;
    }
    int v27 = *(_DWORD *)(a3 + 112) | 2;
LABEL_33:
    *(_DWORD *)(a3 + 112) = v27;
LABEL_34:
    uint64_t v19 = *a1 + 1;
    *a1 = v19;
  }
  switch(v25)
  {
    case '\'':
      goto LABEL_34;
    case '(':
    case ')':
    case '*':
    case ',':
    case '.':
    case '/':
      goto LABEL_39;
    case '+':
      int v26 = *(_DWORD *)(a3 + 76) | 0x800;
      goto LABEL_29;
    case '-':
      int v26 = *(_DWORD *)(a3 + 76) | 0x20;
      goto LABEL_29;
    case '0':
      int v27 = *(_DWORD *)(a3 + 112) | 1;
      goto LABEL_33;
    default:
      if (v25 == 61)
      {
        int v27 = *(_DWORD *)(a3 + 112) | 4;
        goto LABEL_33;
      }
      if (v25 == 95)
      {
        int v26 = *(_DWORD *)(a3 + 76) | 0x10;
LABEL_29:
        *(_DWORD *)(a3 + 76) = v26;
        goto LABEL_34;
      }
LABEL_39:
      unint64_t v60 = v9;
      int v29 = **a1;
      unsigned __int8 v30 = (*(uint64_t (**)(void *, uint64_t))(*a4 + 56))(a4, 42);
      char v31 = *a1;
      if (v29 == v30)
      {
        ++v31;
        goto LABEL_41;
      }
      if (v31 != (unsigned __int8 *)*a2
        && ((char)*v31 & 0x80000000) == 0
        && (*(_DWORD *)(a4[2] + 4 * *v31) & 0x400) != 0)
      {
        char v31 = boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(a1, a2, (void *)(a3 + 56), a4);
LABEL_41:
        *a1 = v31;
      }
LABEL_47:
      if (v31 < (unsigned __int8 *)*a2)
      {
        int v32 = *v31;
        unsigned __int8 v33 = (*(uint64_t (**)(void *, uint64_t))(*a4 + 56))(a4, 46);
        int v34 = *a1;
        if (v32 == v33)
        {
          *a1 = ++v34;
          if (v34 == (unsigned __int8 *)*a2) {
            goto LABEL_60;
          }
          int v35 = *v34;
          unsigned __int8 v36 = (*(uint64_t (**)(void *, uint64_t))(*a4 + 56))(a4, 42);
          int v34 = *a1;
          if (v35 == v36)
          {
            int v37 = 0;
            *a1 = ++v34;
            goto LABEL_55;
          }
          if (v34 == (unsigned __int8 *)*a2 || (char)*v34 < 0)
          {
LABEL_60:
            unint64_t v38 = v60;
          }
          else
          {
            unint64_t v38 = v60;
            if ((*(_DWORD *)(a4[2] + 4 * *v34) & 0x400) != 0)
            {
              int v34 = boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(a1, a2, (void *)(a3 + 64), a4);
              *a1 = v34;
              int v37 = 1;
              goto LABEL_62;
            }
          }
          int v37 = 0;
          *(void *)(a3 + 64) = 0;
        }
        else
        {
          int v37 = 0;
LABEL_55:
          unint64_t v38 = v60;
        }
LABEL_62:
        if (v34 == (unsigned __int8 *)*a2)
        {
LABEL_78:
          if (a6)
          {
            int v64 = &unk_1F0A46EA0;
            uint64_t v65 = &v34[a5 - v8];
            unint64_t v66 = v38;
            boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v64);
          }
          return 1;
        }
        int v61 = v37;
        int v39 = 0;
        while (2)
        {
          int v40 = (*(uint64_t (**)(void *, void, void))(*a4 + 72))(a4, (char)*v34, 0);
          if ((v40 - 73) <= 0x31)
          {
            if (((1 << (v40 - 73)) & 0x2400A80000008) != 0) {
              goto LABEL_77;
            }
            if (v40 == 73)
            {
              int v39 = 73;
LABEL_77:
              int v34 = *a1 + 1;
              *a1 = v34;
              if (v34 == (unsigned __int8 *)*a2) {
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        switch(v40)
        {
          case '2':
            if (v39 == 51) {
              goto LABEL_76;
            }
            goto LABEL_80;
          case '3':
            if (v39 != 73) {
              goto LABEL_80;
            }
            int v39 = 51;
            goto LABEL_77;
          case '4':
            if (v39 != 54) {
              goto LABEL_80;
            }
LABEL_76:
            int v39 = 0;
            goto LABEL_77;
          case '6':
            if (v39 != 73)
            {
LABEL_80:
              uint64_t v41 = (uint64_t)&(*a1)[a5 - v8];
              uint64_t v42 = a6;
              uint64_t v43 = v38;
LABEL_81:
              boost::io::detail::maybe_throw_exception(v42, v41, v43);
              return 1;
            }
            int v39 = 54;
            break;
          default:
            int v34 = *a1;
            BOOL v45 = v39 != 73 && v39 != 0;
            if (v34 >= (unsigned __int8 *)*a2 || v45) {
              goto LABEL_78;
            }
            uint64_t v47 = v38;
            if (v62 == v15)
            {
              int v48 = *v34;
              unsigned __int8 v49 = (*(uint64_t (**)(void *, uint64_t))(*a4 + 56))(a4, 124);
              int v34 = *a1;
              if (v48 == v49)
              {
                unint64_t v50 = v34 + 1;
LABEL_127:
                *a1 = v50;
                return 1;
              }
            }
            switch((*(unsigned int (**)(void *, void, void))(*a4 + 72))(a4, (char)*v34, 0))
            {
              case 'A':
                int v55 = *(_DWORD *)(a3 + 76) | 0x4000;
                *(_DWORD *)(a3 + 76) = v55;
                goto LABEL_117;
              case 'C':
              case 'c':
                *(void *)(a3 + 104) = 1;
                goto LABEL_123;
              case 'E':
                int v56 = *(_DWORD *)(a3 + 76) | 0x4000;
                *(_DWORD *)(a3 + 76) = v56;
                goto LABEL_121;
              case 'F':
                int v54 = *(_DWORD *)(a3 + 76) | 0x4000;
                *(_DWORD *)(a3 + 76) = v54;
                goto LABEL_114;
              case 'G':
                unsigned int v51 = *(_DWORD *)(a3 + 76) | 0x4000;
                goto LABEL_122;
              case 'S':
              case 's':
                if (v61) {
                  *(void *)(a3 + 104) = *(void *)(a3 + 64);
                }
                *(void *)(a3 + 64) = 6;
                goto LABEL_123;
              case 'T':
                int v52 = *a1 + 1;
                *a1 = v52;
                if (v52 >= (unsigned __int8 *)*a2)
                {
                  boost::io::detail::maybe_throw_exception(a6, (uint64_t)&v52[a5 - v8], v47);
                  return 0;
                }
                *(unsigned char *)(a3 + 72) = *v52;
LABEL_105:
                *(_DWORD *)(a3 + 112) |= 8u;
                int v53 = -2;
LABEL_119:
                *(_DWORD *)a3 = v53;
LABEL_123:
                long long v57 = *a1 + 1;
                *a1 = v57;
                if (v62 != v15) {
                  return 1;
                }
                if (v57 != (unsigned __int8 *)*a2)
                {
                  int v58 = *v57;
                  unsigned __int8 v59 = (*(uint64_t (**)(void *, uint64_t))(*a4 + 56))(a4, 124);
                  long long v57 = *a1;
                  if (v58 == v59)
                  {
                    unint64_t v50 = v57 + 1;
                    goto LABEL_127;
                  }
                }
                uint64_t v41 = (uint64_t)&v57[a5 - v8];
                uint64_t v42 = a6;
                uint64_t v43 = v47;
                break;
              case 'X':
                *(_DWORD *)(a3 + 76) |= 0x4000u;
                goto LABEL_108;
              case 'a':
                int v55 = *(_DWORD *)(a3 + 76);
LABEL_117:
                unsigned int v51 = v55 & 0xFFFFFEB1 | 0x104;
                goto LABEL_122;
              case 'b':
                unsigned int v51 = *(_DWORD *)(a3 + 76) | 1;
                goto LABEL_122;
              case 'd':
              case 'g':
              case 'i':
              case 'u':
                goto LABEL_123;
              case 'e':
                int v56 = *(_DWORD *)(a3 + 76);
LABEL_121:
                unsigned int v51 = v56 | 0x100;
                goto LABEL_122;
              case 'f':
                int v54 = *(_DWORD *)(a3 + 76);
LABEL_114:
                unsigned int v51 = v54 | 4;
                goto LABEL_122;
              case 'n':
                int v53 = -3;
                goto LABEL_119;
              case 'o':
                unsigned int v51 = *(_DWORD *)(a3 + 76) & 0xFFFFFFB5 | 0x40;
                goto LABEL_122;
              case 'p':
              case 'x':
LABEL_108:
                unsigned int v51 = *(_DWORD *)(a3 + 76) & 0xFFFFFFB5 | 8;
LABEL_122:
                *(_DWORD *)(a3 + 76) = v51;
                goto LABEL_123;
              case 't':
                *(unsigned char *)(a3 + 72) = (*(uint64_t (**)(void *, uint64_t))(*a4 + 56))(a4, 32);
                goto LABEL_105;
              default:
                boost::io::detail::maybe_throw_exception(a6, (uint64_t)&(*a1)[a5 - v8], v47);
                goto LABEL_123;
            }
            goto LABEL_81;
        }
        goto LABEL_77;
      }
      if (a6)
      {
        int v64 = &unk_1F0A46EA0;
        uint64_t v65 = &v31[a5 - v8];
        unint64_t v66 = v60;
        boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v64);
      }
      return 1;
  }
}

void sub_1B1D2ACCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

uint64_t boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::compute_states(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 112);
  if (v1)
  {
    int v2 = *(_DWORD *)(result + 76);
    if ((v2 & 0x20) != 0)
    {
      v1 &= ~1u;
      *(_DWORD *)(result + 112) = v1;
      if ((v1 & 2) == 0) {
        return result;
      }
      goto LABEL_7;
    }
    v1 &= ~2u;
    *(_DWORD *)(result + 112) = v1;
    *(unsigned char *)(result + 72) = 48;
    *(_DWORD *)(result + 76) = v2 & 0xFFFFFF4F | 0x10;
  }
  if ((v1 & 2) == 0) {
    return result;
  }
LABEL_7:
  if ((*(unsigned char *)(result + 77) & 8) != 0) {
    *(_DWORD *)(result + 112) = v1 & 0xFFFFFFFD;
  }
  return result;
}

void boost::throw_exception<boost::io::bad_format_string>(uint64_t a1)
{
  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::bad_format_string>::wrapexcept(exception, a1);
}

void sub_1B1D2AEB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 120 * a2;
    while (v4 != v8)
    {
      v4 -= 120;
      std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v4);
    }
    a1[1] = v8;
  }
}

uint64_t boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::~format_item(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    std::locale::~locale((std::locale *)(a1 + 96));
    *(unsigned char *)(a1 + 88) = 0;
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::assign(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1;
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = (char *)*a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[2] - *a1) >> 3) < a2)
  {
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__vdeallocate((void **)a1);
    if (a2 > 0x222222222222222) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v5[2] - *v5) >> 3);
    if (v8 <= a2) {
      unint64_t v8 = a2;
    }
    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5[2] - *v5) >> 3) >= 0x111111111111111) {
      unint64_t v9 = 0x222222222222222;
    }
    else {
      unint64_t v9 = v8;
    }
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__vallocate[abi:ne180100](v5, v9);
    uint64_t v10 = v5[1];
    uint64_t v11 = 120 * a2;
    uint64_t v12 = v10 + v11;
    do
    {
      std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(v6, v10, a3);
      v10 += 120;
      v11 -= 120;
    }
    while (v11);
    goto LABEL_20;
  }
  unint64_t v21 = (a1[1] - (void)v7) / 120;
  if (v21 >= a2) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = (a1[1] - (void)v7) / 120;
  }
  if (v13)
  {
    int v14 = (_OWORD *)(a3 + 56);
    do
    {
      *(_DWORD *)unint64_t v7 = *(_DWORD *)a3;
      std::string::operator=((std::string *)(v7 + 8), (const std::string *)(a3 + 8));
      std::string::operator=((std::string *)(v7 + 32), (const std::string *)(a3 + 32));
      long long v15 = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(v7 + 56) = *v14;
      *(_OWORD *)(v7 + 72) = v15;
      boost::optional_detail::optional_base<std::locale>::assign((uint64_t)(v7 + 88), a3 + 88);
      uint64_t v16 = *(void *)(a3 + 104);
      *((_DWORD *)v7 + 28) = *(_DWORD *)(a3 + 112);
      *((void *)v7 + 13) = v16;
      v7 += 120;
      --v13;
    }
    while (v13);
  }
  if (a2 > v21)
  {
    unint64_t v5 = a1;
    uint64_t v17 = a1[1];
    uint64_t v12 = v17 + 120 * (a2 - v21);
    uint64_t v18 = -120 * v21 + 120 * a2;
    do
    {
      std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(v6, v17, a3);
      v17 += 120;
      v18 -= 120;
    }
    while (v18);
LABEL_20:
    v5[1] = v12;
    return;
  }
  uint64_t v19 = a1[1];
  uint64_t v20 = *a1 + 120 * a2;
  while (v19 != v20)
  {
    v19 -= 120;
    std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](v6, v19);
  }
  a1[1] = v20;
}

void sub_1B1D2B1E0(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

double boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::reset(uint64_t a1, char a2)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 104) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 112) = 0;
  std::string::resize((std::string *)(a1 + 8), 0, 0);
  std::string::resize((std::string *)(a1 + 32), 0, 0);
  *(_OWORD *)(a1 + 56) = xmmword_1B256B100;
  *(unsigned char *)(a1 + 72) = a2;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)&double result = 4098;
  *(void *)(a1 + 76) = 4098;
  return result;
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 120;
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[120 * v4];
  return result;
}

void boost::optional_detail::optional_base<std::locale>::assign(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      uint64_t v3 = (const std::locale *)(a2 + 8);
      uint64_t v4 = (std::locale *)(a1 + 8);
      std::locale::operator=(v4, v3);
    }
    else
    {
      std::locale::~locale((std::locale *)(a1 + 8));
      *(unsigned char *)a1 = 0;
    }
  }
  else if (*(unsigned char *)a2)
  {
    std::locale::locale((std::locale *)(a1 + 8), (const std::locale *)(a2 + 8));
    *(unsigned char *)a1 = 1;
  }
}

void std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  unint64_t v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  unint64_t v7 = (std::string *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  long long v9 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(a2 + 56) = v9;
  *(unsigned char *)(a2 + 88) = 0;
  if (*(unsigned char *)(a3 + 88))
  {
    std::locale::locale((std::locale *)(a2 + 96), (const std::locale *)(a3 + 96));
    *(unsigned char *)(a2 + 88) = 1;
  }
  uint64_t v10 = *(void *)(a3 + 104);
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a3 + 112);
  *(void *)(a2 + 104) = v10;
}

void sub_1B1D2B474(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 88))
  {
    std::locale::~locale((std::locale *)(a2 + 96));
    *(unsigned char *)(a2 + 88) = 0;
  }
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(120 * a2);
}

std::string *std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(std::string *this, char *a2, char *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    uint64_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    int v14 = this;
    if ((v6 & 0x80) != 0) {
      int v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    long long v15 = (char *)v14 + size;
    while (v4 != a3)
    {
      char v16 = *v4++;
      *v15++ = v16;
    }
    unsigned char *v15 = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_1B1D2B69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::io::detail::maybe_throw_exception(uint64_t this, uint64_t a2, uint64_t a3)
{
  if (this)
  {
    v3[0] = &unk_1F0A46EA0;
    v3[1] = a2;
    std::string v3[2] = a3;
    boost::throw_exception<boost::io::bad_format_string>((uint64_t)v3);
  }
  return this;
}

void sub_1B1D2B710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

unsigned __int8 *boost::io::detail::str2int<int,std::__wrap_iter<char const*>,std::ctype<char>>(unsigned __int8 **a1, char **a2, _DWORD *a3, void *a4)
{
  *a3 = 0;
  for (uint64_t i = *a1; i != (unsigned __int8 *)*a2; ++i)
  {
    if ((char)*i < 0) {
      break;
    }
    uint64_t v8 = *i;
    if ((*(_DWORD *)(a4[2] + 4 * v8) & 0x400) == 0) {
      break;
    }
    *a3 = (*(uint64_t (**)(void *, void, void))(*a4 + 72))(a4, (char)v8, 0)
        + 10 * *a3
        - 48;
  }
  return i;
}

unsigned __int8 *boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(unsigned __int8 **a1, char **a2, void *a3, void *a4)
{
  *a3 = 0;
  for (uint64_t i = *a1; i != (unsigned __int8 *)*a2; ++i)
  {
    if ((char)*i < 0) {
      break;
    }
    uint64_t v8 = *i;
    if ((*(_DWORD *)(a4[2] + 4 * v8) & 0x400) == 0) {
      break;
    }
    *a3 = 10 * *a3
        + (*(int (**)(void *, void, void))(*a4 + 72))(a4, (char)v8, 0)
        - 48;
  }
  return i;
}

__n128 boost::wrapexcept<boost::io::bad_format_string>::wrapexcept(__n128 *a1, uint64_t a2)
{
  a1->n128_u64[0] = (unint64_t)&unk_1F0A46DF8;
  a1->n128_u64[1] = (unint64_t)&unk_1F0A46EA0;
  __n128 result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&unk_1F0A46B20;
  a1->n128_u64[1] = (unint64_t)&unk_1F0A46B50;
  a1[2].n128_u64[0] = (unint64_t)&unk_1F0A46B78;
  a1[2].n128_u64[1] = 0;
  return result;
}

uint64_t boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void boost::wrapexcept<boost::io::bad_format_string>::clone()
{
}

void sub_1B1D2BB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::bad_format_string>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::bad_format_string>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B1D2BC28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1B3EA8670);
}

const char *boost::io::bad_format_string::what(boost::io::bad_format_string *this)
{
  return "boost::bad_format_string: format-string is ill-formed";
}

void non-virtual thunk to'boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

{
  uint64_t vars8;

  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x1B3EA8670);
}

void boost::io::bad_format_string::~bad_format_string(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::wrapexcept<boost::io::bad_format_string>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A46DF8;
  *(void *)(a1 + 8) = &unk_1F0A46EA0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_1F0A47040;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &unk_1F0A46B20;
  *(void *)(a1 + 8) = &unk_1F0A46B50;
  *(void *)(a1 + 32) = &unk_1F0A46B78;
  return a1;
}

void sub_1B1D2BFB8(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((v6 - v8) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v14 = v8 + 120 * a2;
      uint64_t v15 = 120 * a2;
      do
      {
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(v7, v8, a3);
        v8 += 120;
        v15 -= 120;
      }
      while (v15);
      uint64_t v8 = v14;
    }
    a1[1] = v8;
  }
  else
  {
    unint64_t v9 = 0xEEEEEEEEEEEEEEEFLL * ((v8 - *a1) >> 3);
    unint64_t v10 = v9 + a2;
    if (v9 + a2 > 0x222222222222222) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x111111111111111) {
      unint64_t v12 = 0x222222222222222;
    }
    else {
      unint64_t v12 = v10;
    }
    int v22 = a1 + 2;
    if (v12) {
      std::string::size_type v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>((uint64_t)(a1 + 2), v12);
    }
    else {
      std::string::size_type v13 = 0;
    }
    char v16 = &v13[120 * v9];
    v19[0] = v13;
    v19[1] = v16;
    unsigned __int8 v20 = v16;
    unint64_t v21 = &v13[120 * v12];
    uint64_t v17 = 120 * a2;
    uint64_t v18 = &v16[120 * a2];
    do
    {
      std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>((uint64_t)v22, (uint64_t)v16, a3);
      v16 += 120;
      v17 -= 120;
    }
    while (v17);
    unsigned __int8 v20 = v18;
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__swap_out_circular_buffer(a1, v19);
    std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~__split_buffer(v19);
  }
}

void sub_1B1D2C138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 120;
      std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>(a1, v7 - 120, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 120;
      *((void *)&v16 + 1) -= 120;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

std::locale *std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  long long v5 = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v5;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  long long v6 = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = v6;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 32) = 0;
  long long v7 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(a2 + 56) = v7;
  *(unsigned char *)(a2 + 88) = 0;
  if (*(unsigned char *)(a3 + 88))
  {
    uint64_t result = std::locale::locale((std::locale *)(a2 + 96), (const std::locale *)(a3 + 96));
    *(unsigned char *)(a2 + 88) = 1;
  }
  uint64_t v9 = *(void *)(a3 + 104);
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a3 + 112);
  *(void *)(a2 + 104) = v9;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](v3, v1);
      v1 += 120;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 120;
    std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](v4, i - 120);
  }
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A46EC8;
  if (*(unsigned char *)(a1 + 72)) {
    operator delete(*(void **)(a1 + 16));
  }
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return std::streambuf::~streambuf();
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 60)) {
    boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::clear((uint64_t *)a1);
  }
  boost::io::detail::distribute<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)a1, a2);
  uint64_t v4 = *(int *)(a1 + 52);
  unint64_t v5 = v4 + 1;
  *(_DWORD *)(a1 + 52) = v4 + 1;
  if (*(void *)(a1 + 32))
  {
    uint64_t v6 = *(int *)(a1 + 56);
    if ((int)v5 < (int)v6)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      int v8 = v4 + 2;
      do
      {
        if (((*(void *)(v7 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
          break;
        }
        ++v5;
        *(_DWORD *)(a1 + 52) = v8++;
      }
      while (v6 != v5);
    }
  }
  return a1;
}

uint64_t *boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::clear(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      if (!a1[4]
        || (unint64_t v6 = *(unsigned int *)(v3 + v4), (v6 & 0x80000000) != 0)
        || ((*(void *)(a1[3] + ((v6 >> 3) & 0x1FFFFFF8)) >> v6) & 1) == 0)
      {
        std::string::resize((std::string *)(v3 + v4 + 8), 0, 0);
        uint64_t v3 = *a1;
        uint64_t v2 = a1[1];
      }
      ++v5;
      v4 += 120;
    }
    while (v5 < 0xEEEEEEEEEEEEEEEFLL * ((v2 - v3) >> 3));
  }
  *((_DWORD *)a1 + 13) = 0;
  *((unsigned char *)a1 + 60) = 0;
  if (a1[4])
  {
    uint64_t v7 = *((unsigned int *)a1 + 14);
    if ((int)v7 >= 1)
    {
      unint64_t v8 = 0;
      uint64_t v9 = a1[3];
      do
      {
        if (((*(void *)(v9 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        *((_DWORD *)a1 + 13) = ++v8;
      }
      while (v7 != v8);
    }
  }
  return a1;
}

uint64_t *boost::io::detail::distribute<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *((int *)result + 13);
  uint64_t v3 = *((int *)result + 14);
  if ((int)v2 >= (int)v3)
  {
    if ((result[11] & 4) != 0)
    {
      v8[0] = &unk_1F0A46E78;
      v8[1] = v2;
      v8[2] = v3;
      boost::throw_exception<boost::io::too_many_args>((uint64_t)v8);
    }
  }
  else
  {
    uint64_t v5 = *result;
    uint64_t v4 = result[1];
    if (v4 != *result)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        if (*(_DWORD *)(v5 + v6) == *((_DWORD *)result + 13)) {
          boost::io::detail::put<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(a2, v5 + v6, v5 + v6 + 8, (uint64_t)(result + 12));
        }
        ++v7;
        v6 += 120;
      }
      while (v7 < 0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 3));
    }
  }
  return result;
}

void sub_1B1D2C7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::throw_exception<boost::io::too_many_args>(uint64_t a1)
{
  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_many_args>::wrapexcept(exception, a1);
}

void sub_1B1D2C81C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::io::detail::put<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::basic_oaltstringstream(v4, a4);
}

void sub_1B1D2CFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  std::locale::~locale((std::locale *)(v38 - 96));
  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream((uint64_t)&a12);
  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream((uint64_t)&a36);
  _Unwind_Resume(a1);
}

__n128 boost::wrapexcept<boost::io::too_many_args>::wrapexcept(__n128 *a1, uint64_t a2)
{
  a1->n128_u64[0] = (unint64_t)&unk_1F0A46DF8;
  a1->n128_u64[1] = (unint64_t)&unk_1F0A46E78;
  __n128 result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&unk_1F0A46AA8;
  a1->n128_u64[1] = (unint64_t)&unk_1F0A46AD8;
  a1[2].n128_u64[0] = (unint64_t)&unk_1F0A46B00;
  a1[2].n128_u64[1] = 0;
  return result;
}

uint64_t boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void boost::wrapexcept<boost::io::too_many_args>::clone()
{
}

void sub_1B1D2D31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_many_args>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_many_args>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B1D2D3DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1B3EA8670);
}

const char *boost::io::too_many_args::what(boost::io::too_many_args *this)
{
  return "boost::too_many_args: format-string referred to fewer arguments than were passed";
}

void non-virtual thunk to'boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

{
  uint64_t vars8;

  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x1B3EA8670);
}

void boost::io::too_many_args::~too_many_args(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::wrapexcept<boost::io::too_many_args>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A46DF8;
  *(void *)(a1 + 8) = &unk_1F0A46E78;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_1F0A47040;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &unk_1F0A46AA8;
  *(void *)(a1 + 8) = &unk_1F0A46AD8;
  *(void *)(a1 + 32) = &unk_1F0A46B00;
  return a1;
}

void sub_1B1D2D76C(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::basic_oaltstringstream(void *a1, uint64_t a2)
{
  a1[3] = MEMORY[0x1E4FBA4A8] + 16;
  a1[1] = a2;
  boost::detail::shared_count::shared_count<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>(a1 + 2);
}

void sub_1B1D2D868(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v2);
  MEMORY[0x1B3EA8520](v1);
  _Unwind_Resume(a1);
}

void boost::io::detail::stream_format_state<char,std::char_traits<char>>::apply_on(uint64_t a1, std::ios_base *this, const std::locale *a3)
{
  if (*(unsigned char *)(a1 + 32))
  {
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, (const std::locale *)(a1 + 40));
    std::locale::~locale(&v18);
    rdbuf = (std::locale *)this->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(void *, uint64_t))rdbuf->__locale_ + 2))(this->__rdbuf_, a1 + 40);
      uint64_t v6 = rdbuf + 1;
      std::locale::locale(&v17, v6);
      std::locale::operator=(v6, (const std::locale *)(a1 + 40));
      std::locale::~locale(&v17);
    }
    unint64_t v7 = (std::locale *)&v16;
  }
  else
  {
    if (!a3) {
      goto LABEL_10;
    }
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, a3);
    std::locale::~locale(&v18);
    uint64_t v9 = (std::locale *)this->__rdbuf_;
    if (v9)
    {
      (*((void (**)(void *, const std::locale *))v9->__locale_ + 2))(this->__rdbuf_, a3);
      uint64_t v10 = v9 + 1;
      std::locale::locale(&v17, v10);
      std::locale::operator=(v10, a3);
      std::locale::~locale(&v17);
    }
    unint64_t v7 = (std::locale *)&v15;
  }
  std::locale::~locale(v7);
LABEL_10:
  if (*(void *)a1 != -1) {
    this->__width_ = *(void *)a1;
  }
  std::streamsize v11 = *(void *)(a1 + 8);
  if (v11 != -1) {
    this->__precision_ = v11;
  }
  std::ios_base::fmtflags v12 = *(char *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (this[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(this);
      std::string::size_type v13 = std::locale::use_facet(&v18, MEMORY[0x1E4FBA258]);
      std::ios_base::fmtflags v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 32);
      std::locale::~locale(&v18);
      this[1].__fmtflags_ = v14;
    }
    this[1].__fmtflags_ = v12;
  }
  this->__fmtflags_ = *(_DWORD *)(a1 + 20);
  std::ios_base::clear(this, *(_DWORD *)(a1 + 24));
  this->__exceptions_ = *(_DWORD *)(a1 + 28);
  std::ios_base::clear(this, this->__rdstate_);
}

void sub_1B1D2DA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
}

void boost::io::detail::mk_str<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, const std::string::value_type *a2, std::string::size_type a3, int64_t a4, std::string::value_type a5, char a6, int a7, int a8)
{
  std::string::resize(a1, 0, 0);
  if (a4 >= 1 && a4 > a3)
  {
    int64_t v16 = a4 - a3 - (a7 != 0);
    std::string::reserve(a1, a4);
    if (a8)
    {
      if (v16 >= 0) {
        uint64_t v17 = a4 - a3 - (a7 != 0);
      }
      else {
        uint64_t v17 = v16 + 1;
      }
      std::string::size_type v18 = v17 >> 1;
      v16 -= v17 >> 1;
      if (!v16) {
        goto LABEL_21;
      }
    }
    else
    {
      if ((a6 & 0x20) != 0)
      {
        std::string::size_type v18 = a4 - a3 - (a7 != 0);
        if (!a7) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      std::string::size_type v18 = 0;
      if (!v16)
      {
LABEL_21:
        if (!a7)
        {
LABEL_23:
          if (a3) {
            std::string::append(a1, a2, a3);
          }
          if (v18)
          {
            std::string::append(a1, v18, a5);
          }
          return;
        }
LABEL_22:
        std::string::append(a1, 1uLL, a7);
        goto LABEL_23;
      }
    }
    std::string::append(a1, v16, a5);
    goto LABEL_21;
  }
  if (a7) {
    std::string::size_type v19 = a3 + 1;
  }
  else {
    std::string::size_type v19 = a3;
  }
  std::string::reserve(a1, v19);
  if (a7) {
    std::string::append(a1, 1uLL, a7);
  }
  if (a3)
  {
    std::string::append(a1, a2, a3);
  }
}

void *boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::clear_buffer(void *result)
{
  uint64_t v1 = result;
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = result[6];
  if (v2) {
    BOOL v3 = v2 == result[5];
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    __n128 result = (*(void *(**)(void *__return_ptr, void *, _OWORD *, uint64_t))(*result + 40))(v8, result, v9, 16);
  }
  uint64_t v4 = v1[3];
  if (v4) {
    BOOL v5 = v4 == v1[2];
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
    return (*(void *(**)(void *__return_ptr, void *, _OWORD *, uint64_t))(*v1 + 40))(v8, v1, v6, 8);
  }
  return result;
}

uint64_t boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(uint64_t a1)
{
  uint64_t v2 = std::ostream::~ostream();
  boost::detail::shared_count::~shared_count((atomic_uint **)(v2 + 16));
  MEMORY[0x1B3EA8520](a1 + 24);
  return a1;
}

void boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(uint64_t a1)
{
  uint64_t v2 = std::ostream::~ostream();
  boost::detail::shared_count::~shared_count((atomic_uint **)(v2 + 16));
  MEMORY[0x1B3EA8520](a1 + 24);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(void *a1)
{
  uint64_t v1 = (atomic_uint **)((char *)a1 + *(void *)(*a1 - 24));
  std::ostream::~ostream();
  boost::detail::shared_count::~shared_count(v1 + 2);
  JUMPOUT(0x1B3EA8520);
}

{
  atomic_uint **v1;
  uint64_t vars8;

  uint64_t v1 = (atomic_uint **)((char *)a1 + *(void *)(*a1 - 24));
  std::ostream::~ostream();
  boost::detail::shared_count::~shared_count(v1 + 2);
  MEMORY[0x1B3EA8520](v1 + 3);
  JUMPOUT(0x1B3EA8670);
}

void boost::detail::shared_count::shared_count<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1B1D2DF58(void *a1)
{
}

void sub_1B1D2DF64(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::~sp_counted_impl_pd()
{
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_local_deleter(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_untyped_deleter(uint64_t a1)
{
  return a1 + 24;
}

void boost::detail::shared_count::~shared_count(atomic_uint **this)
{
  uint64_t v1 = *this;
  if (v1) {
    boost::detail::sp_counted_base::release(v1);
  }
}

atomic_uint *boost::detail::sp_counted_base::release(atomic_uint *this)
{
  if (atomic_fetch_add(this + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = this;
    uint64_t v2 = this + 3;
    this = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)this + 16))(this);
    if (atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
    {
      BOOL v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 24);
      return (atomic_uint *)v3(v1);
    }
  }
  return this;
}

void *boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v3 = v2;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, v3);
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,unsigned long const>()
{
  return std::ostream::operator<<();
}

void boost::throw_exception<boost::io::too_few_args>(uint64_t a1)
{
  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_few_args>::wrapexcept(exception, a1);
}

void sub_1B1D2E18C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::size(uint64_t *a1)
{
  if (*((char *)a1 + 87) < 0) {
    uint64_t result = a1[9];
  }
  else {
    uint64_t result = *((unsigned __int8 *)a1 + 87);
  }
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1] - *a1;
  if (v4)
  {
    unint64_t v5 = v4 / 120;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    uint64_t v6 = (unint64_t *)(v3 + 56);
    do
    {
      if (*((char *)v6 - 25) < 0) {
        uint64_t v7 = *(v6 - 5);
      }
      else {
        uint64_t v7 = *((unsigned __int8 *)v6 - 25);
      }
      unint64_t v8 = v7 + result;
      if (*((_DWORD *)v6 - 14) == -2 && v8 <= *v6) {
        unint64_t v8 = *v6;
      }
      if (*((char *)v6 - 1) < 0) {
        uint64_t v9 = *(v6 - 2);
      }
      else {
        uint64_t v9 = *((unsigned __int8 *)v6 - 1);
      }
      uint64_t result = v9 + v8;
      v6 += 15;
      --v5;
    }
    while (v5);
  }
  return result;
}

__n128 boost::wrapexcept<boost::io::too_few_args>::wrapexcept(__n128 *a1, uint64_t a2)
{
  a1->n128_u64[0] = (unint64_t)&unk_1F0A46DF8;
  a1->n128_u64[1] = (unint64_t)&unk_1F0A46E50;
  __n128 result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&unk_1F0A46A30;
  a1->n128_u64[1] = (unint64_t)&unk_1F0A46A60;
  a1[2].n128_u64[0] = (unint64_t)&unk_1F0A46A88;
  a1[2].n128_u64[1] = 0;
  return result;
}

uint64_t boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void boost::wrapexcept<boost::io::too_few_args>::clone()
{
}

void sub_1B1D2E50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_few_args>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_few_args>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B1D2E5CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1B3EA8670);
}

const char *boost::io::too_few_args::what(boost::io::too_few_args *this)
{
  return "boost::too_few_args: format-string referred to more arguments than were passed";
}

void non-virtual thunk to'boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

{
  uint64_t vars8;

  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x1B3EA8670);
}

void boost::io::too_few_args::~too_few_args(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::wrapexcept<boost::io::too_few_args>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A46DF8;
  *(void *)(a1 + 8) = &unk_1F0A46E50;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_1F0A47040;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &unk_1F0A46A30;
  *(void *)(a1 + 8) = &unk_1F0A46A60;
  *(void *)(a1 + 32) = &unk_1F0A46A88;
  return a1;
}

void sub_1B1D2E95C(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>(unsigned char *this, uint64_t a2, int a3, int a4)
{
  long long v5 = this;
  if (a3 != a4 || this[88])
  {
    unsigned int v6 = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>((flatbuffers_2_0_6::vector_downward *)this, a3);
    return flatbuffers_2_0_6::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return this;
}

void *flatbuffers_2_0_6::FlatBufferBuilder::TrackField(void *this, uint64_t a2, unsigned int a3)
{
  long long v5 = this;
  unsigned int v6 = (unint64_t *)this[8];
  if (this[7] - (void)v6 <= 7uLL)
  {
    this = (void *)flatbuffers_2_0_6::vector_downward::reallocate((flatbuffers_2_0_6::vector_downward *)this, 8uLL);
    unsigned int v6 = (unint64_t *)v5[8];
  }
  *unsigned int v6 = a3 | (unint64_t)(a2 << 32);
  v5[8] += 8;
  ++*((_DWORD *)v5 + 18);
  if (*((unsigned __int16 *)v5 + 38) < a2) {
    *((_WORD *)v5 + 38) = a2;
  }
  return this;
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(flatbuffers_2_0_6::vector_downward *this, int a2)
{
  if (*((void *)this + 10) <= 3uLL) {
    *((void *)this + 10) = 4;
  }
  flatbuffers_2_0_6::vector_downward::fill(this, -*((_DWORD *)this + 10) & 3);
  int v5 = a2;
  flatbuffers_2_0_6::vector_downward::push_small<int>(this, &v5);
  return *((unsigned int *)this + 10);
}

uint64_t flatbuffers_2_0_6::vector_downward::reallocate(flatbuffers_2_0_6::vector_downward *this, unint64_t a2)
{
  unint64_t v3 = *((void *)this + 4);
  uint64_t v4 = *((unsigned int *)this + 10);
  uint64_t v5 = *((void *)this + 6);
  uint64_t v6 = *((void *)this + 8) - v5;
  if (v3) {
    unint64_t v7 = v3 >> 1;
  }
  else {
    unint64_t v7 = *((void *)this + 2);
  }
  if (v7 <= a2) {
    unint64_t v7 = a2;
  }
  uint64_t v8 = (*((void *)this + 3) + v3 + v7 - 1) & -*((void *)this + 3);
  *((void *)this + 4) = v8;
  uint64_t v9 = *(void *)this;
  if (v5)
  {
    if (!v9)
    {
      std::ios_base::fmtflags v12 = &unk_1F0A36558;
      operator new[]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, void))(*(void *)v9 + 32))(v9, v5, v3, v8, v4, v6);
  }
  else
  {
    if (!v9)
    {
      std::ios_base::fmtflags v12 = &unk_1F0A36558;
      operator new[]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
  }
  uint64_t v11 = result + *((void *)this + 4) - v4;
  *((void *)this + 6) = result;
  *((void *)this + 7) = v11;
  *((void *)this + 8) = result + v6;
  return result;
}

char *flatbuffers_2_0_6::Allocator::reallocate_downward(flatbuffers_2_0_6::Allocator *this, unsigned __int8 *a2, uint64_t a3, uint64_t a4, size_t a5, size_t a6)
{
  std::ios_base::fmtflags v12 = (char *)(*(uint64_t (**)(flatbuffers_2_0_6::Allocator *, uint64_t))(*(void *)this + 16))(this, a4);
  memcpy(&v12[a4 - a5], &a2[a3 - a5], a5);
  memcpy(v12, a2, a6);
  (*(void (**)(flatbuffers_2_0_6::Allocator *, unsigned __int8 *, uint64_t))(*(void *)this + 24))(this, a2, a3);
  return v12;
}

void flatbuffers_2_0_6::DefaultAllocator::~DefaultAllocator(flatbuffers_2_0_6::DefaultAllocator *this)
{
}

void flatbuffers_2_0_6::DefaultAllocator::allocate(flatbuffers_2_0_6::DefaultAllocator *this)
{
}

void flatbuffers_2_0_6::DefaultAllocator::deallocate(flatbuffers_2_0_6::DefaultAllocator *this, unsigned __int8 *a2)
{
  if (a2) {
    JUMPOUT(0x1B3EA8630);
  }
}

void *flatbuffers_2_0_6::vector_downward::push_small<int>(void *this, _DWORD *a2)
{
  unint64_t v3 = this;
  uint64_t v4 = this[7];
  if ((unint64_t)(v4 - this[8]) <= 3)
  {
    this = (void *)flatbuffers_2_0_6::vector_downward::reallocate((flatbuffers_2_0_6::vector_downward *)this, 4uLL);
    uint64_t v4 = v3[7];
  }
  *((_DWORD *)v3 + 10) += 4;
  *(_DWORD *)(v4 - 4) = *a2;
  v3[7] = v4 - 4;
  return this;
}

void *flatbuffers_2_0_6::vector_downward::fill(void *this, unint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = this;
    uint64_t v4 = this[7];
    if (v4 - this[8] < a2)
    {
      this = (void *)flatbuffers_2_0_6::vector_downward::reallocate((flatbuffers_2_0_6::vector_downward *)this, a2);
      uint64_t v4 = v3[7];
    }
    uint64_t v5 = 0;
    v3[7] = v4 - a2;
    *((_DWORD *)v3 + 10) += a2;
    do
      *(unsigned char *)(v3[7] + v5++) = 0;
    while (a2 != v5);
  }
  return this;
}

flatbuffers_2_0_6::FlatBufferBuilder *flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(flatbuffers_2_0_6::FlatBufferBuilder *result, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    int v5 = flatbuffers_2_0_6::FlatBufferBuilder::ReferTo(result, a3);
    return (flatbuffers_2_0_6::FlatBufferBuilder *)flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>(v4, a2, v5, 0);
  }
  return result;
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::ReferTo(flatbuffers_2_0_6::FlatBufferBuilder *this, int a2)
{
  if (*((void *)this + 10) <= 3uLL) {
    *((void *)this + 10) = 4;
  }
  flatbuffers_2_0_6::vector_downward::fill(this, -*((_DWORD *)this + 10) & 3);
  return (*((_DWORD *)this + 10) - a2 + 4);
}

void *flatbuffers_2_0_6::FlatBufferBuilder::AddElement<signed char>(void *this, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = (uint64_t)this;
  if (a3 != a4 || *((unsigned char *)this + 88))
  {
    if (!this[10]) {
      this[10] = 1;
    }
    char v6 = a3;
    flatbuffers_2_0_6::vector_downward::push_small<signed char>(this, &v6);
    return flatbuffers_2_0_6::FlatBufferBuilder::TrackField((void *)v5, a2, *(_DWORD *)(v5 + 40));
  }
  return this;
}

void *flatbuffers_2_0_6::vector_downward::push_small<signed char>(void *this, unsigned char *a2)
{
  unint64_t v3 = this;
  uint64_t v4 = this[7];
  if (v4 == this[8])
  {
    this = (void *)flatbuffers_2_0_6::vector_downward::reallocate((flatbuffers_2_0_6::vector_downward *)this, 1uLL);
    uint64_t v4 = v3[7];
  }
  v3[7] = v4 - 1;
  ++*((_DWORD *)v3 + 10);
  *(unsigned char *)(v4 - 1) = *a2;
  return this;
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::EndTable(flatbuffers_2_0_6::FlatBufferBuilder *this, __int16 a2)
{
  uint64_t v4 = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(this, 0);
  if ((unsigned __int16)(*((_WORD *)this + 38) + 2) <= 4u) {
    unint64_t v5 = 4;
  }
  else {
    unint64_t v5 = (unsigned __int16)(*((_WORD *)this + 38) + 2);
  }
  *((_WORD *)this + 38) = v5;
  flatbuffers_2_0_6::vector_downward::fill_big(this, v5);
  unsigned __int16 v6 = v4 - a2;
  uint64_t v8 = (char *)*((void *)this + 7);
  unint64_t v7 = *((void *)this + 8);
  *((_WORD *)v8 + 1) = v6;
  *(_WORD *)uint64_t v8 = *((_WORD *)this + 38);
  uint64_t v9 = *((unsigned int *)this + 18);
  uint64_t v10 = (char *)(v7 - 8 * v9);
  if (v9)
  {
    uint64_t v11 = (_WORD *)(v7 - 8 * v9);
    do
    {
      *(_WORD *)&v8[(unsigned __int16)v11[2]] = v4 - *v11;
      v11 += 4;
    }
    while ((unint64_t)v11 < v7);
  }
  *((void *)this + 8) = v10;
  *((_DWORD *)this + 18) = 0;
  *((_WORD *)this + 38) = 0;
  int v12 = *((_DWORD *)this + 10);
  if (!*((unsigned char *)this + 89) || (std::string::size_type v13 = (unsigned int *)*((void *)this + 6), v13 >= (unsigned int *)v10))
  {
LABEL_13:
    int v17 = v12;
LABEL_14:
    if ((unint64_t)(v8 - v10) <= 3)
    {
      flatbuffers_2_0_6::vector_downward::reallocate(this, 4uLL);
      uint64_t v10 = (char *)*((void *)this + 8);
    }
    *(_DWORD *)uint64_t v10 = v17;
    *((void *)this + 8) = v10 + 4;
    goto LABEL_17;
  }
  size_t v14 = *(unsigned __int16 *)v8;
  uint64_t v15 = (char *)v13 + *((void *)this + 4);
  while (1)
  {
    uint64_t v16 = *v13;
    if (v14 == *(unsigned __int16 *)&v15[-v16] && !memcmp(&v15[-v16], v8, v14)) {
      break;
    }
    if (++v13 >= (unsigned int *)v10) {
      goto LABEL_13;
    }
  }
  v8 += (v12 - v4);
  *((void *)this + 7) = v8;
  *((_DWORD *)this + 10) = v4;
  int v12 = v16;
  int v17 = v4;
  if (v16 == v4) {
    goto LABEL_14;
  }
LABEL_17:
  *(_DWORD *)(*((void *)this + 6) + *((void *)this + 4) - v4) = v12 - v4;
  *((unsigned char *)this + 78) = 0;
  return v4;
}

void flatbuffers_2_0_6::vector_downward::fill_big(flatbuffers_2_0_6::vector_downward *this, unint64_t a2)
{
  uint64_t v4 = (char *)*((void *)this + 7);
  if (a2)
  {
    if ((unint64_t)&v4[-*((void *)this + 8)] < a2)
    {
      flatbuffers_2_0_6::vector_downward::reallocate(this, a2);
      uint64_t v4 = (char *)*((void *)this + 7);
    }
    v4 -= a2;
    *((void *)this + 7) = v4;
    *((_DWORD *)this + 10) += a2;
  }
  bzero(v4, a2);
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateString(flatbuffers_2_0_6::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  if (*((void *)this + 10) <= 3uLL) {
    *((void *)this + 10) = 4;
  }
  flatbuffers_2_0_6::vector_downward::fill(this, (~(_BYTE)a3 - *((_DWORD *)this + 10)) & 3);
  flatbuffers_2_0_6::vector_downward::fill(this, 1uLL);
  flatbuffers_2_0_6::vector_downward::push(this, (const unsigned __int8 *)a2, a3);
  flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(this, a3);
  return *((unsigned int *)this + 10);
}

void *flatbuffers_2_0_6::vector_downward::push(void *this, const unsigned __int8 *__src, unint64_t a3)
{
  if (a3)
  {
    unint64_t v5 = this;
    uint64_t v6 = this[7];
    if (v6 - this[8] < a3)
    {
      flatbuffers_2_0_6::vector_downward::reallocate((flatbuffers_2_0_6::vector_downward *)this, a3);
      uint64_t v6 = v5[7];
    }
    v5[7] = v6 - a3;
    *((_DWORD *)v5 + 10) += a3;
    return memcpy((void *)(v6 - a3), __src, a3);
  }
  return this;
}

unsigned char *flatbuffers_2_0_6::FlatBufferBuilder::AddElement<float>(unsigned char *this, uint64_t a2, float a3, float a4)
{
  unint64_t v5 = this;
  if (a3 != a4 || this[88])
  {
    unsigned int v6 = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<float>((flatbuffers_2_0_6::vector_downward *)this, a3);
    return flatbuffers_2_0_6::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return this;
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::PushElement<float>(flatbuffers_2_0_6::vector_downward *this, float a2)
{
  if (*((void *)this + 10) <= 3uLL) {
    *((void *)this + 10) = 4;
  }
  flatbuffers_2_0_6::vector_downward::fill(this, -*((_DWORD *)this + 10) & 3);
  float v5 = a2;
  flatbuffers_2_0_6::vector_downward::push_small<float>(this, &v5);
  return *((unsigned int *)this + 10);
}

float flatbuffers_2_0_6::vector_downward::push_small<float>(flatbuffers_2_0_6::vector_downward *this, float *a2)
{
  uint64_t v4 = *((void *)this + 7);
  if ((unint64_t)(v4 - *((void *)this + 8)) <= 3)
  {
    flatbuffers_2_0_6::vector_downward::reallocate(this, 4uLL);
    uint64_t v4 = *((void *)this + 7);
  }
  float result = *a2;
  *(float *)(v4 - 4) = *a2;
  *((void *)this + 7) = v4 - 4;
  *((_DWORD *)this + 10) += 4;
  return result;
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(flatbuffers_2_0_6::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  flatbuffers_2_0_6::FlatBufferBuilder::StartVector(a1, a3, 4uLL);
  if (a3)
  {
    uint64_t v6 = a2 - 4;
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = v7 - 1;
      int v9 = flatbuffers_2_0_6::FlatBufferBuilder::ReferTo(a1, *(_DWORD *)(v6 + 4 * v7));
      flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(a1, v9);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  *((unsigned char *)a1 + 78) = 0;
  return flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(a1, a3);
}

void *flatbuffers_2_0_6::FlatBufferBuilder::StartVector(flatbuffers_2_0_6::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  *((unsigned char *)this + 78) = 1;
  uint64_t v5 = a3 * a2;
  if (*((void *)this + 10) <= 3uLL) {
    *((void *)this + 10) = 4;
  }
  flatbuffers_2_0_6::vector_downward::fill(this, (-*((_DWORD *)this + 10) - (int)v5) & 3);
  if (*((void *)this + 10) < a3) {
    *((void *)this + 10) = a3;
  }
  unint64_t v6 = (a3 - 1) & (-(uint64_t)*((unsigned int *)this + 10) - v5);
  return flatbuffers_2_0_6::vector_downward::fill(this, v6);
}

void flatbuffers_2_0_6::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers_2_0_6::FlatBufferBuilder *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    std::__tree<int>::destroy(*((void *)this + 12), *(void **)(v2 + 8));
    MEMORY[0x1B3EA8670](v2, 0x1060C40C2B13FB5);
  }
  flatbuffers_2_0_6::vector_downward::~vector_downward(this);
}

void flatbuffers_2_0_6::vector_downward::~vector_downward(flatbuffers_2_0_6::vector_downward *this)
{
  if (*((unsigned char *)this + 8) && *(void *)this) {
    (*(void (**)(void))(**(void **)this + 8))(*(void *)this);
  }
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
}

void *flatbuffers_2_0_6::vector_downward::clear_buffer(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[6];
  if (v2)
  {
    uint64_t v3 = *this;
    if (*v1)
    {
      this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    else
    {
      uint64_t v4 = &unk_1F0A36558;
      this = (void *)MEMORY[0x1B3EA8630](v2, 0x1000C8077774924);
    }
  }
  v1[6] = 0;
  return this;
}

quasar::rescoring::Rescorer *std::unique_ptr<quasar::rescoring::Rescorer>::reset[abi:ne180100](quasar::rescoring::Rescorer **a1, quasar::rescoring::Rescorer *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::rescoring::Rescorer::~Rescorer(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void quasar::rescoring::Rescorer::~Rescorer(quasar::rescoring::Rescorer *this)
{
  uint64_t v2 = (char *)this + 1816;
  quasar::BasicTextSanitizer::~BasicTextSanitizer((quasar::rescoring::Rescorer *)((char *)this + 1872));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 233);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 231);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__tree<std::string>::destroy((uint64_t)v2, *((char **)this + 228));
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 226);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *((void *)this + 224);
  *((void *)this + 224) = 0;
  if (v6) {
    std::default_delete<quasar::SimpleFstLmRescorer>::operator()[abi:ne180100]((uint64_t)this + 1792, v6);
  }
  uint64_t v7 = *((void *)this + 223);
  *((void *)this + 223) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy((uint64_t)this + 1760, *((void **)this + 221));
  quasar::rescoring::RescorerConfig::~RescorerConfig(this);
}

void std::default_delete<quasar::SimpleFstLmRescorer>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v5 = (void **)(a2 + 80);
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v5);
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 72);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 56);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    MEMORY[0x1B3EA8670](a2, 0x1072C40140BB7A5);
  }
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<quasar::rescoring::AdapterModel>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<quasar::rescoring::AdapterModel>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

quasar::ptt::PronunciationRecognizer *std::unique_ptr<quasar::ptt::PronunciationRecognizer>::reset[abi:ne180100](quasar::ptt::PronunciationRecognizer **a1, quasar::ptt::PronunciationRecognizer *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::ptt::PronunciationRecognizer::~PronunciationRecognizer(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void quasar::ptt::PronunciationRecognizer::~PronunciationRecognizer(quasar::ptt::PronunciationRecognizer *this)
{
  uint64_t v2 = *((void *)this + 250);
  *((void *)this + 250) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 160))(v2);
  }
  if (*((char *)this + 1999) < 0) {
    operator delete(*((void **)this + 247));
  }
  uint64_t v3 = *((void *)this + 246);
  *((void *)this + 246) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 245);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 243);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 239);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 1903) < 0) {
    operator delete(*((void **)this + 235));
  }
  if (*((char *)this + 1879) < 0) {
    operator delete(*((void **)this + 232));
  }
  if (*((char *)this + 1855) < 0) {
    operator delete(*((void **)this + 229));
  }
  if (*((char *)this + 1831) < 0) {
    operator delete(*((void **)this + 226));
  }
  uint64_t v7 = *((void *)this + 225);
  *((void *)this + 225) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 213) = &unk_1F0A51998;
  if (*((char *)this + 1735) < 0) {
    operator delete(*((void **)this + 214));
  }
  *((void *)this + 209) = &unk_1F0A51998;
  if (*((char *)this + 1703) < 0) {
    operator delete(*((void **)this + 210));
  }
  *((void *)this + 205) = &unk_1F0A51998;
  if (*((char *)this + 1671) < 0) {
    operator delete(*((void **)this + 206));
  }
  *((void *)this + 201) = &unk_1F0A51998;
  if (*((char *)this + 1639) < 0) {
    operator delete(*((void **)this + 202));
  }
  *((void *)this + 197) = &unk_1F0A51998;
  if (*((char *)this + 1607) < 0) {
    operator delete(*((void **)this + 198));
  }
  std::unique_ptr<std::function<void ()(unsigned long,std::string const&,std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>> const&)> const,std::default_delete<std::function<void ()(unsigned long,std::string const&,std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>> const&)> const>>::reset[abi:ne180100]((void **)this + 196, 0);
  if (*((char *)this + 1567) < 0) {
    operator delete(*((void **)this + 193));
  }
  quasar::SystemConfig::~SystemConfig(this);
}

void *std::unique_ptr<std::function<void ()(unsigned long,std::string const&,std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>> const&)> const,std::default_delete<std::function<void ()(unsigned long,std::string const&,std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>> const&)> const>>::reset[abi:ne180100](void **a1, void *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__function::__value_func<void ()(unsigned long,std::string const&,std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>> const&)>::~__value_func[abi:ne180100](result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void *std::__function::__value_func<void ()(unsigned long,std::string const&,std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<std::vector<quasar::Token>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<quasar::Token>*>,std::__wrap_iter<std::vector<quasar::Token>*>>(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        unint64_t v21 = &a3[3 * a5];
      }
      else
      {
        unint64_t v21 = &a3[(uint64_t)(v12 - (void)a2) >> 3];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v9, v21, a4, *(void **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::vector<quasar::Token>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[3 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v23, a3, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        std::string::size_type v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v18);
      }
      else {
        std::string::size_type v19 = 0;
      }
      uint64_t v23 = v19;
      int v24 = &v19[24 * v15];
      int v25 = v24;
      int v26 = &v19[24 * v18];
      std::__split_buffer<std::vector<quasar::Token>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<quasar::Token>*>>(&v23, a3, a5);
      uint64_t v5 = (void *)std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(&v23);
    }
  }
  return v5;
}

void sub_1B1D2FE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::__split_buffer<std::vector<quasar::Token>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<quasar::Token>*>>(void *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = (void *)result[2];
  if (a3)
  {
    uint64_t v6 = &v4[3 * a3];
    uint64_t v7 = 24 * a3;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      float result = std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
      v4 += 3;
      a2 += 3;
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  std::string v3[2] = v4;
  return result;
}

void sub_1B1D2FF0C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void quasar::NearestNeighborSearch::NearestNeighborSearch(uint64_t a1, std::string *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1F0A51768;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = &unk_1F0A517C0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  if (*(char *)(a3 + 23) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v6 = *(void *)(a3 + 8);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v8 = (const void *)a3;
    }
    else {
      uint64_t v8 = *(const void **)a3;
    }
    memmove(p_p, v8, v6);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v6) = 46;
  quasar::SystemConfig::setPrefix(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::NearestNeighborSearch::registerParams((quasar::NearestNeighborSearch *)a1, (quasar::SystemConfig *)a2);
  quasar::SystemConfig::readPtree((uint64_t)a2, a3);
}

void sub_1B1D300B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v14 + 279) < 0) {
    operator delete(*(void **)(v14 + 256));
  }
  if (*(char *)(v14 + 255) < 0) {
    operator delete(*(void **)(v14 + 232));
  }
  if (*(char *)(v14 + 231) < 0) {
    operator delete(*(void **)(v14 + 208));
  }
  if (*(char *)(v14 + 207) < 0) {
    operator delete(*(void **)(v14 + 184));
  }
  if (*(char *)(v14 + 183) < 0) {
    operator delete(*(void **)(v14 + 160));
  }
  if (*(char *)(v14 + 159) < 0) {
    operator delete(*v16);
  }
  unint64_t v18 = *(std::__shared_weak_count **)(v14 + 120);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  kaldi::CuVector<float>::~CuVector(v15);
  std::string::size_type v19 = *(std::__shared_weak_count **)(v14 + 72);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v14 + 56);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v14);
  _Unwind_Resume(a1);
}

void quasar::NearestNeighborSearch::registerParams(quasar::NearestNeighborSearch *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "embedding-matrix-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Euclid embedding kaldi matrix");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 136, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "vocab-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Vocab symbol table text file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 160, (uint64_t)__p, 1, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lexicon-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "lexicon symbol table text file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 184, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "unigram-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Unigram kaldi vector file. A negative log unigram vector with values for each vocab");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 208, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "unigram-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "Unigram weight for calculation combined score with Euclid distance. A value between [0~1)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 128, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "distance-threshold");
  std::string::basic_string[abi:ne180100]<0>(__p, "If > 0, only return nearest neighbors <= distance-threshold. Else, disable this threshold");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 280, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "quantized-embedding-matrix-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Euclid embedding kaldi matrix");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 232, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "embedding-matrix-shape-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Kaldi vector of Euclid embedding matrix shape. Required when using quantized-embedding-matrix-file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 256, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1D304FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NearestNeighborSearch::init(int32x2_t *this)
{
  BOOL v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  int v44 = &unk_1F0A517C0;
  if (this[34].i8[7] < 0) {
    int32x2_t v2 = this[33];
  }
  else {
    int32x2_t v2 = (int32x2_t)this[34].u8[7];
  }
  unsigned __int8 v48 = 0;
  if (v2)
  {
    kaldi::Input::Input(&v27, &this[32], &v48);
    uint64_t v3 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)&v27);
    kaldi::CuVector<float>::Read((uint64_t)&v44, v3, v48);
    kaldi::Input::~Input((kaldi::Input *)&v27);
  }
  if (this[19].i8[7] < 0) {
    int32x2_t v4 = this[18];
  }
  else {
    int32x2_t v4 = (int32x2_t)this[19].u8[7];
  }
  if (v4)
  {
    kaldi::Input::Input(&v22, &this[17], &v48);
    if (!v22)
    {
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Error opening file: ", 20);
      int v17 = this[19].i8[7];
      if (v17 >= 0) {
        unint64_t v18 = this + 17;
      }
      else {
        unint64_t v18 = (int32x2_t *)this[17];
      }
      if (v17 >= 0) {
        uint64_t v19 = this[19].u8[7];
      }
      else {
        uint64_t v19 = (uint64_t)this[18];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v27);
    }
    char v5 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)&v22);
    kaldi::CuMatrix<float>::Read((uint64_t)this, v5, v48, 0);
    kaldi::Input::~Input((kaldi::Input *)&v22);
  }
  if (this[31].i8[7] < 0)
  {
    if (!*(void *)&this[30]) {
      goto LABEL_29;
    }
  }
  else if (!this[31].i8[7])
  {
    goto LABEL_29;
  }
  if (this[34].i8[7] < 0)
  {
    if (this[33]) {
      goto LABEL_18;
    }
  }
  else if (this[34].i8[7])
  {
LABEL_18:
    kaldi::Input::Input(&v26, &this[29], &v48);
    kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix((uint64_t)&v27, (int)*v45, (int)v45[1]);
    size_t v6 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)&v26);
    kaldi::VectorwiseQuantizedMatrix<signed char>::Read((unsigned int *)&v27, v6, v48, 0);
    kaldi::CuMatrix<float>::Resize(this, v27, DWORD1(v27), 0, 0);
    if (this[2].i32[1] >= 1)
    {
      int v7 = 0;
      LODWORD(v8) = this[2].i32[0];
      do
      {
        uint64_t v9 = *(void *)&this[1] + 4 * this[3].i32[0] * v7;
        int32x2_t v10 = this[4];
        int v22 = &unk_1F0A472D0;
        uint64_t v23 = v9;
        int32x2_t v25 = v10;
        uint64_t v24 = v8;
        kaldi::VectorwiseQuantizedMatrix<signed char>::Row((uint64_t)&v27, v7, (uint64_t)&v20);
        uint64_t v8 = this[2].u32[0];
        if ((int)v8 >= 1)
        {
          uint64_t v11 = 0;
          uint64_t v12 = v20;
          uint64_t v13 = v23;
          do
          {
            *(float *)(v13 + 4 * v11) = v21 * (float)*(char *)(v12 + v11);
            ++v11;
          }
          while (v8 != v11);
        }
        ++v7;
      }
      while (v7 < this[2].i32[1]);
    }
    uint64_t v14 = *((void *)&v28 + 1);
    *((void *)&v28 + 1) = 0;
    if (v14) {
      MEMORY[0x1B3EA8670](v14, 0x1000C4077774924);
    }
    uint64_t v15 = *((void *)&v27 + 1);
    *((void *)&v27 + 1) = 0;
    if (v15) {
      MEMORY[0x1B3EA8670](v15, 0x1000C4052888210);
    }
    kaldi::Input::~Input((kaldi::Input *)&v26);
LABEL_29:
    quasar::SymbolMap::ReadFstText<std::shared_ptr<fst::SymbolTable>>((uint64_t)&this[20], &v27);
  }
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"embedding-matrix-shape-file is required for quantized-embedding-matrix-file", 75);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v27);
}

void sub_1B1D30C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::Input::~Input((kaldi::Input *)va);
  kaldi::CuVector<float>::~CuVector((void *)(v6 - 88));
  _Unwind_Resume(a1);
}

void sub_1B1D30C8C()
{
}

void sub_1B1D30C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  kaldi::Input::~Input((kaldi::Input *)va2);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  kaldi::CuVector<float>::~CuVector((void *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1B1D30CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix((uint64_t)va);
  JUMPOUT(0x1B1D30CD4);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    MEMORY[0x1B3EA8670](v2, 0x1000C4077774924);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    MEMORY[0x1B3EA8670](v3, 0x1000C4052888210);
  }
  return a1;
}

void quasar::NearestNeighborSearch::findNearestNeighbors(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a3 >= 1 && *(unsigned char *)(a2 + 48))
  {
    uint64_t v9 = a4[1];
    unint64_t v10 = *(int *)(a2 + 20);
    if (*a4 == v9 || 0xAAAAAAAAAAAAAAABLL * ((v9 - *a4) >> 3) == v10)
    {
      std::vector<std::vector<quasar::EuclidNeighbor>>::resize(a6, v10);
      if (!*(unsigned char *)(a2 + 48)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      quasar::computeL2Dist(a1, a1 + 80, a2, (int32x2_t *)&v116);
      if (SHIDWORD(__n[0]) >= 1)
      {
        uint64_t v11 = 0;
        float v12 = *(float *)&a5;
        uint64_t v100 = a5 & 0xFF00000000;
        unint64_t v104 = a3;
        uint64_t v99 = a3 + 1;
        do
        {
          memset(&v115, 0, sizeof(v115));
          long long v111 = &unk_1F0A472D0;
          uint64_t v112 = *((void *)&v116 + 1) + 4 * LODWORD(__n[1]) * (int)v11;
          uint64_t v114 = v118;
          uint64_t v113 = LODWORD(__n[0]);
          float v13 = v12;
          if (!v100) {
            float v13 = *(float *)(a1 + 280);
          }
          if (v13 <= 0.0)
          {
            std::vector<int>::resize(&v115, SLODWORD(__n[0]));
            std::vector<unsigned int>::pointer begin = v115.__begin_;
            if (v115.__end_ != v115.__begin_)
            {
              uint64_t v27 = 0;
              unint64_t v28 = v115.__end_ - v115.__begin_;
              if (v28 <= 1) {
                unint64_t v28 = 1;
              }
              do
              {
                begin[v27] = v27;
                ++v27;
              }
              while (v28 != v27);
            }
          }
          else
          {
            std::vector<int>::reserve(&v115, SLODWORD(__n[0]));
            int v15 = __n[0];
            if (LODWORD(__n[0]))
            {
              unint64_t v16 = 0;
              do
              {
                if (*(float *)(v112 + 4 * (int)v16) <= v13)
                {
                  std::vector<unsigned int>::pointer end = v115.__end_;
                  if (v115.__end_ >= v115.__end_cap_.__value_)
                  {
                    uint64_t v14 = (uint64_t)v115.__begin_;
                    int64_t v19 = v115.__end_ - v115.__begin_;
                    unint64_t v20 = v19 + 1;
                    if ((unint64_t)(v19 + 1) >> 62) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    int64_t v21 = (char *)v115.__end_cap_.__value_ - (char *)v115.__begin_;
                    if (((char *)v115.__end_cap_.__value_ - (char *)v115.__begin_) >> 1 > v20) {
                      unint64_t v20 = v21 >> 1;
                    }
                    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v22 = v20;
                    }
                    if (v22)
                    {
                      uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v115.__end_cap_, v22);
                      uint64_t v14 = (uint64_t)v115.__begin_;
                      std::vector<unsigned int>::pointer end = v115.__end_;
                    }
                    else
                    {
                      uint64_t v23 = 0;
                    }
                    uint64_t v24 = (unsigned int *)&v23[4 * v19];
                    *uint64_t v24 = v16;
                    unint64_t v18 = v24 + 1;
                    while (end != (std::vector<unsigned int>::pointer)v14)
                    {
                      unsigned int v25 = *--end;
                      *--uint64_t v24 = v25;
                    }
                    v115.__begin_ = v24;
                    v115.__end_ = v18;
                    v115.__end_cap_.__value_ = (unsigned int *)&v23[4 * v22];
                    if (v14) {
                      operator delete((void *)v14);
                    }
                  }
                  else
                  {
                    *v115.__end_ = v16;
                    unint64_t v18 = end + 1;
                  }
                  v115.__end_ = v18;
                  int v15 = __n[0];
                }
                ++v16;
              }
              while (v16 < v15);
            }
          }
          uint64_t v29 = *(void *)(a1 + 112);
          if (v29) {
            kaldi::CuVectorBase<float>::AddVec((uint64_t)&v111, v29, 1.0, 1.0);
          }
          memset(&v110, 0, sizeof(v110));
          unint64_t v30 = v104;
          if (*a4 != a4[1])
          {
            uint64_t v14 = *a4 + 24 * v11;
            if (*(char *)(v14 + 23) < 0)
            {
              unint64_t v30 = v104;
              if (!*(void *)(v14 + 8)) {
                goto LABEL_46;
              }
              uint64_t v14 = *(void *)v14;
              uint64_t v31 = *(void *)(*a4 + 24 * v11 + 8);
LABEL_45:
              quasar::utf8::convertToLowerCaseOrEmpty((char *)v14, v31, &v133);
              std::string v110 = v133;
              unint64_t v30 = v99;
              goto LABEL_46;
            }
            unint64_t v30 = v104;
            uint64_t v31 = *(unsigned __int8 *)(v14 + 23);
            if (*(unsigned char *)(v14 + 23)) {
              goto LABEL_45;
            }
          }
LABEL_46:
          long long v33 = (int *)v115.__begin_;
          std::vector<unsigned int>::pointer v32 = v115.__end_;
          if (v115.__end_ - v115.__begin_ >= v30) {
            int64_t v34 = v30;
          }
          else {
            int64_t v34 = v115.__end_ - v115.__begin_;
          }
          uint64_t v35 = v34 << 32;
          v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
          if (v34 << 32)
          {
            if (v35 >= 0x100000001)
            {
              unint64_t v36 = ~((unint64_t)((int)v34 - 2) >> 1);
              long long v37 = (int *)&v115.__begin_[(unint64_t)((int)v34 - 2) >> 1];
              do
              {
                uint64_t v14 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::NearestNeighborSearch::findNearestNeighbors(std::optional<kaldi::CuMatrix<float>> &,int,std::vector<std::string> const&,std::optional<float>)::$_0 &,std::__wrap_iter<int *>>((uint64_t)v33, (uint64_t *)&v133, (int)v34, v37--);
                BOOL v38 = __CFADD__(v36++, 1);
              }
              while (!v38);
            }
            long long v39 = &v33[(int)v34];
            if (v39 != (int *)v32)
            {
              long long v40 = &v33[(int)v34];
              do
              {
                uint64_t v41 = *v40;
                uint64_t v42 = *v33;
                if (*(float *)(v112 + 4 * v41) < *(float *)(v112 + 4 * v42))
                {
                  *long long v40 = v42;
                  int *v33 = v41;
                  uint64_t v14 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::NearestNeighborSearch::findNearestNeighbors(std::optional<kaldi::CuMatrix<float>> &,int,std::vector<std::string> const&,std::optional<float>)::$_0 &,std::__wrap_iter<int *>>((uint64_t)v33, (uint64_t *)&v133, (int)v34, v33);
                }
                ++v40;
              }
              while (v40 != (int *)v32);
            }
            if (v35 >= 0x100000001)
            {
              int64_t v43 = (unint64_t)(4 * (int)v34) >> 2;
              do
              {
                uint64_t v44 = 0;
                int v45 = *v33;
                std::string::size_type v46 = v133.__r_.__value_.__r.__words[0];
                uint64_t v47 = v33;
                do
                {
                  unsigned __int8 v48 = v47;
                  v47 += v44 + 1;
                  uint64_t v49 = 2 * v44;
                  uint64_t v44 = (2 * v44) | 1;
                  int64_t v50 = v49 + 2;
                  if (v50 < v43)
                  {
                    uint64_t v14 = v47[1];
                    if (*(float *)(*(void *)(v46 + 8) + 4 * *v47) < *(float *)(*(void *)(v46 + 8) + 4 * v14))
                    {
                      ++v47;
                      uint64_t v44 = v50;
                    }
                  }
                  int *v48 = *v47;
                }
                while (v44 <= (uint64_t)((unint64_t)(v43 - 2) >> 1));
                if (v47 == --v39)
                {
                  int *v47 = v45;
                }
                else
                {
                  int *v47 = *v39;
                  *long long v39 = v45;
                  uint64_t v51 = (char *)v47 - (char *)v33 + 4;
                  if (v51 >= 5)
                  {
                    unint64_t v52 = (((unint64_t)v51 >> 2) - 2) >> 1;
                    int v53 = &v33[v52];
                    uint64_t v54 = *v53;
                    uint64_t v55 = *v47;
                    uint64_t v56 = *(void *)(v46 + 8);
                    float v57 = *(float *)(v56 + 4 * v55);
                    if (*(float *)(v56 + 4 * v54) < v57)
                    {
                      do
                      {
                        int v58 = v53;
                        int *v47 = v54;
                        if (!v52) {
                          break;
                        }
                        unint64_t v52 = (v52 - 1) >> 1;
                        int v53 = &v33[v52];
                        uint64_t v54 = *v53;
                        uint64_t v47 = v58;
                      }
                      while (*(float *)(v56 + 4 * v54) < v57);
                      *int v58 = v55;
                    }
                  }
                }
              }
              while (v43-- > 2);
            }
          }
          int v60 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
          if ((int)v34 >= 1)
          {
            uint64_t v61 = 0;
            long long v102 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v110.__r_.__value_.__l.__size_;
            }
            uint64_t v103 = HIBYTE(v110.__r_.__value_.__r.__words[2]) - 1;
            do
            {
              if (v104 <= (uint64_t)(*(void *)(*a6 + 24 * v11 + 8) - *(void *)(*a6 + 24 * v11)) >> 5) {
                break;
              }
              signed int v63 = v115.__begin_[v61];
              memset(&__p, 0, sizeof(__p));
              uint64_t v64 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v14);
              uint64_t v65 = v63;
              (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 48) + 88))(&v133);
              quasar::QsrText::decodeQsrText(v64, (uint64_t)&v133, (uint64_t)&__p);
              if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v133.__r_.__value_.__l.__data_);
                if (!size) {
                  goto LABEL_110;
                }
              }
              else if (!size)
              {
                goto LABEL_110;
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v67 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v67 = __p.__r_.__value_.__l.__size_;
              }
              quasar::utf8::convertToLowerCaseOrEmpty((char *)p_p, v67, &v133);
              std::string::size_type v68 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              int v69 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v68 = v133.__r_.__value_.__l.__size_;
              }
              if (size == v68)
              {
                if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v70 = &v133;
                }
                else {
                  int v70 = (std::string *)v133.__r_.__value_.__r.__words[0];
                }
                if ((v60 & 0x80) != 0)
                {
                  uint64_t v14 = memcmp((const void *)v102, v70, *((size_t *)&v102 + 1));
                  BOOL v78 = v14 == 0;
                  if ((v69 & 0x80000000) == 0) {
                    goto LABEL_106;
                  }
                }
                else if (v60)
                {
                  uint64_t v71 = &v110;
                  uint64_t v72 = v103;
                  do
                  {
                    int v74 = v71->__r_.__value_.__s.__data_[0];
                    uint64_t v71 = (std::string *)((char *)v71 + 1);
                    int v73 = v74;
                    int v76 = v70->__r_.__value_.__s.__data_[0];
                    int v70 = (std::string *)((char *)v70 + 1);
                    int v75 = v76;
                    BOOL v38 = v72-- != 0;
                    char v77 = v38;
                    BOOL v78 = v73 == v75;
                  }
                  while (v73 == v75 && (v77 & 1) != 0);
                  if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_106:
                    if (!v78) {
                      goto LABEL_110;
                    }
                    goto LABEL_126;
                  }
                }
                else
                {
                  BOOL v78 = 1;
                  if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_106;
                  }
                }
              }
              else
              {
                BOOL v78 = 0;
                if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_106;
                }
              }
              operator delete(v133.__r_.__value_.__l.__data_);
              if (!v78)
              {
LABEL_110:
                uint64_t v79 = *a6;
                unsigned int v80 = *(_DWORD *)(*((void *)&v116 + 1) + 4 * LODWORD(__n[1]) * (int)v11 + 4 * v63);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v107, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v107 = __p;
                }
                unint64_t v108 = __PAIR64__(v80, v63);
                uint64_t v81 = v79 + 24 * v11;
                unint64_t v84 = *(void *)(v81 + 8);
                long long v83 = (uint64_t *)(v81 + 8);
                unint64_t v82 = v84;
                uint64_t v14 = (uint64_t)(v83 + 1);
                unint64_t v85 = v83[1];
                if (v84 >= v85)
                {
                  v88 = (uint64_t *)(v79 + 24 * v11);
                  uint64_t v89 = (uint64_t)(v82 - *v88) >> 5;
                  unint64_t v90 = v89 + 1;
                  if ((unint64_t)(v89 + 1) >> 59) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v91 = v85 - *v88;
                  if (v91 >> 4 > v90) {
                    unint64_t v90 = v91 >> 4;
                  }
                  if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFE0) {
                    unint64_t v92 = 0x7FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v92 = v90;
                  }
                  v135 = v83 + 1;
                  v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v14, v92);
                  std::string::size_type v94 = (std::string::size_type)&v93[32 * v89];
                  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
                  v133.__r_.__value_.__l.__size_ = v94;
                  v134 = &v93[32 * v95];
                  long long v96 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
                  *(void *)(v94 + 16) = *((void *)&v107.__r_.__value_.__l + 2);
                  *(_OWORD *)std::string::size_type v94 = v96;
                  memset(&v107, 0, sizeof(v107));
                  *(void *)(v94 + 24) = v108;
                  v133.__r_.__value_.__r.__words[2] = v94 + 32;
                  std::vector<quasar::EuclidNeighbor>::__swap_out_circular_buffer(v88, &v133);
                  unint64_t v87 = *v83;
                  uint64_t v14 = std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v133);
                }
                else
                {
                  long long v86 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
                  *(void *)(v82 + 16) = *((void *)&v107.__r_.__value_.__l + 2);
                  *(_OWORD *)unint64_t v82 = v86;
                  memset(&v107, 0, sizeof(v107));
                  *(void *)(v82 + 24) = v108;
                  unint64_t v87 = v82 + 32;
                  *long long v83 = v82 + 32;
                }
                *long long v83 = v87;
                if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v107.__r_.__value_.__l.__data_);
                }
                uint64_t v97 = *(void *)(a1 + 112);
                if (v97)
                {
                  uint64_t v98 = *(void *)(*a6 + 24 * v11 + 8);
                  *(float *)(v98 - 4) = *(float *)(v98 - 4) - *(float *)(*(void *)(v97 + 8) + 4 * v65);
                }
              }
LABEL_126:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              ++v61;
            }
            while (v61 != v34);
          }
          if ((v60 & 0x80) != 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          if (v115.__begin_)
          {
            v115.__end_ = v115.__begin_;
            operator delete(v115.__begin_);
          }
          ++v11;
        }
        while (v11 < SHIDWORD(__n[0]));
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v116);
    }
    else if (quasar::gLogLevel >= 1)
    {
      long long v131 = 0u;
      long long v132 = 0u;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v123 = 0u;
      long long v124 = 0u;
      long long v121 = 0u;
      long long v122 = 0u;
      long long v119 = 0u;
      long long v120 = 0u;
      *(_OWORD *)__n = 0u;
      long long v118 = 0u;
      long long v116 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v116);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v116, (uint64_t)"queryMatrix and excludeQueryStrings size mismatched", 51);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v116);
    }
  }
}

void sub_1B1D31624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45)
{
  a45 = a20;
  std::vector<std::vector<quasar::EuclidNeighbor>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<quasar::EuclidNeighbor>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<quasar::EuclidNeighbor>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t quasar::computeL2Dist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int32x2_t *a4@<X8>)
{
  kaldi::CuMatrix<float>::CuMatrix(a4, *(unsigned int *)(a3 + 20), *(unsigned int *)(a1 + 20), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)a4, a2);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)a4, a3, CblasNoTrans, a1, CblasTrans, -2.0, 1.0);
  kaldi::CuMatrix<float>::CuMatrix(v10, a3, 111);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)v10, (uint64_t)v10);
  v9[0] = &unk_1F0A517C0;
  memset(&v9[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v9, v11, 0);
  kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v9, (uint64_t)v10, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddVecToCols((uint64_t)a4, (uint64_t)v9, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::ApplyPowAbs((uint64_t)a4, 0, 0.5);
  kaldi::CuVector<float>::~CuVector(v9);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v10);
}

void sub_1B1D318BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  _Unwind_Resume(a1);
}

void quasar::NearestNeighborSearch::findNearestNeighbors(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a3 >= 1 && *(unsigned char *)(a2 + 32))
  {
    kaldi::CuMatrix<float>::CuMatrix(v13, 1, *(unsigned int *)(a2 + 16), 0, 0, 0);
    char v14 = 1;
    if (!*(unsigned char *)(a2 + 32)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)v13, a2);
    quasar::NearestNeighborSearch::findNearestNeighbors(a1, (uint64_t)v13, a3, a4, a5, v12);
    if ((void *)v12[0] != a6 && v12[0] != v12[1]) {
      std::vector<quasar::EuclidNeighbor>::__assign_with_size[abi:ne180100]<quasar::EuclidNeighbor*,quasar::EuclidNeighbor*>((uint64_t)a6, *(std::string **)v12[0], *(long long **)(v12[0] + 8), (uint64_t)(*(void *)(v12[0] + 8) - *(void *)v12[0]) >> 5);
    }
    int v15 = (void **)v12;
    std::vector<std::vector<quasar::EuclidNeighbor>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if (v14) {
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
    }
  }
}

void sub_1B1D31A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  *(void *)(v19 - 72) = &a10;
  std::vector<std::vector<quasar::EuclidNeighbor>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 72));
  if (a19) {
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a13);
  }
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void quasar::NearestNeighborSearch::lookupEmbedding(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (!v5) {
    goto LABEL_19;
  }
  if (a3 == 1)
  {
    if (!*(void *)(a1 + 64)) {
      goto LABEL_19;
    }
    if (v6 < 0) {
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v16 = *(std::string *)a2;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    std::string::basic_string[abi:ne180100]<0>(v18, ".");
    quasar::replaceAll((uint64_t)&v16, (uint64_t)__p, (char *)v18);
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    int v8 = (*(uint64_t (**)(void, std::string *))(**(void **)(a1 + 64) + 96))(*(void *)(a1 + 64), &v16);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (a3) {
      goto LABEL_19;
    }
    int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 96))(*(void *)(a1 + 48));
  }
  if (v8 != -1)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 16);
    uint64_t v17 = 0;
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A517C0;
    *(_OWORD *)&v16.__r_.__value_.__r.__words[1] = 0uLL;
    kaldi::CuVector<float>::Resize((uint64_t)&v16, v9, 0);
    int v10 = *(_DWORD *)(a1 + 16);
    uint64_t v11 = *(void *)(a1 + 32);
    __p[1] = (void *)(*(void *)(a1 + 8) + 4 * *(_DWORD *)(a1 + 24) * v8);
    int v14 = 0;
    __p[0] = &unk_1F0A472D0;
    int v13 = v10;
    uint64_t v15 = v11;
    kaldi::CuVector<float>::operator=((uint64_t)&v16, (uint64_t)__p);
    kaldi::CuVector<float>::CuVector((void *)a4, (uint64_t)&v16);
    *(unsigned char *)(a4 + 32) = 1;
    kaldi::CuVector<float>::~CuVector(&v16);
    return;
  }
LABEL_19:
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 32) = 0;
}

void sub_1B1D31C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::computeL2Dist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int32x2_t *a3@<X8>)
{
  kaldi::CuMatrix<float>::CuMatrix(v8, a1, 111);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)v8, (uint64_t)v8);
  v7[0] = &unk_1F0A517C0;
  memset(&v7[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v7, v9, 0);
  kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v7, (uint64_t)v8, 1.0, 0.0);
  quasar::computeL2Dist(a1, (uint64_t)v7, a2, a3);
  kaldi::CuVector<float>::~CuVector(v7);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v8);
}

void sub_1B1D31D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float quasar::computeL2Dist(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  float v3 = -1.0;
  if (v2 == *(_DWORD *)(a2 + 16))
  {
    int v6 = kaldi::CuMatrix<float>::CuMatrix(v12, 1, v2, 0, 0, 0);
    kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)v6, a1);
    kaldi::CuMatrix<float>::CuMatrix(v11, 1, *(unsigned int *)(a2 + 16), 0, 0, 0);
    kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)v11, a2);
    quasar::computeL2Dist((uint64_t)v12, (uint64_t)v11, v8);
    if (v10 >= 1 && v9 >= 1) {
      float v3 = *(float *)v8[1].i32[0];
    }
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v8);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v11);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v12);
  }
  return v3;
}

void sub_1B1D31E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix(v7 - 80);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::CuVector<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::CuVector<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::CuVector<float>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::vector<std::vector<quasar::EuclidNeighbor>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        int v6 = v4;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<quasar::EuclidNeighbor>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      float v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      float v12 = 0;
    }
    uint64_t v15 = v12;
    std::string v16 = &v12[24 * v8];
    unint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<quasar::EuclidNeighbor>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<quasar::EuclidNeighbor>>::~__split_buffer(&v15);
  }
}

void sub_1B1D3210C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::EuclidNeighbor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::EuclidNeighbor>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::EuclidNeighbor>>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::EuclidNeighbor>>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::EuclidNeighbor>>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::EuclidNeighbor>>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::EuclidNeighbor>>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::EuclidNeighbor>>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    float v3 = v1;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::EuclidNeighbor>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<quasar::EuclidNeighbor>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::NearestNeighborSearch::findNearestNeighbors(std::optional<kaldi::CuMatrix<float>> &,int,std::vector<std::string> const&,std::optional<float>)::$_0 &,std::__wrap_iter<int *>>(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) | 1;
      long long v8 = (int *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      uint64_t v10 = *a2;
      if (v9 >= a3)
      {
        uint64_t v11 = *(void *)(v10 + 8);
      }
      else
      {
        uint64_t v11 = *(void *)(v10 + 8);
        if (*(float *)(v11 + 4 * *v8) < *(float *)(v11 + 4 * v8[1]))
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      uint64_t v12 = *v8;
      uint64_t v13 = *a4;
      float v14 = *(float *)(v11 + 4 * v13);
      if (*(float *)(v11 + 4 * v12) >= v14)
      {
        do
        {
          *a4 = v12;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v15 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          long long v8 = (int *)(result + 4 * v7);
          uint64_t v16 = v15 + 2;
          if (v16 < a3 && *(float *)(v11 + 4 * *v8) < *(float *)(v11 + 4 * v8[1]))
          {
            ++v8;
            uint64_t v7 = v16;
          }
          uint64_t v12 = *v8;
        }
        while (*(float *)(v11 + 4 * v12) >= v14);
        *a4 = v13;
      }
    }
  }
  return result;
}

uint64_t std::vector<quasar::EuclidNeighbor>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::EuclidNeighbor>,std::reverse_iterator<quasar::EuclidNeighbor*>,std::reverse_iterator<quasar::EuclidNeighbor*>,std::reverse_iterator<quasar::EuclidNeighbor*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::EuclidNeighbor>,std::reverse_iterator<quasar::EuclidNeighbor*>,std::reverse_iterator<quasar::EuclidNeighbor*>,std::reverse_iterator<quasar::EuclidNeighbor*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::EuclidNeighbor>,std::reverse_iterator<quasar::EuclidNeighbor*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::EuclidNeighbor>,std::reverse_iterator<quasar::EuclidNeighbor*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<quasar::EuclidNeighbor>::__assign_with_size[abi:ne180100]<quasar::EuclidNeighbor*,quasar::EuclidNeighbor*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100]((void *)a1, v12);
    long long v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::EuclidNeighbor>,quasar::EuclidNeighbor*,quasar::EuclidNeighbor*,quasar::EuclidNeighbor*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(__str, v15, v9);
    long long v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::EuclidNeighbor>,quasar::EuclidNeighbor*,quasar::EuclidNeighbor*,quasar::EuclidNeighbor*>(v8, (long long *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(__str, (std::string *)a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0) {
        operator delete(*(void **)(v18 - 32));
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B1D326C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1D326CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::EuclidNeighbor>,quasar::EuclidNeighbor*,quasar::EuclidNeighbor*,quasar::EuclidNeighbor*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v12 = this;
  long long v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        uint64_t v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((void *)v6 + 3);
      v6 += 2;
      uint64_t v4 = (std::string *)((char *)v8 + 32);
      long long v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::EuclidNeighbor>,quasar::EuclidNeighbor*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1B1D3278C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::EuclidNeighbor>,quasar::EuclidNeighbor*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str == a2) {
    return __str;
  }
  uint64_t v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    this[1].__r_.__value_.__r.__words[0] = v4[1].__r_.__value_.__r.__words[0];
    this = (std::string *)((char *)this + 32);
    uint64_t v4 = (std::string *)((char *)v4 + 32);
  }
  while (v4 != v5);
  return v5;
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *a2)
{
  float v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    uint64_t v5 = std::locale::use_facet(&v8, MEMORY[0x1E4FBA258]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1B1D328F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A49E88;
  *(void *)(a1 + 88) = &unk_1F0A49FC0;
  *(void *)(a1 + 96) = &unk_1F0A49FE8;
  *(void *)(a1 + 104) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v8 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(unsigned char *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  uint64_t v9 = *(void *)(a2 + 104);
  if (v9) {
    kaldi::NewCuSubOrMat<float>(v9, 0);
  }
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 120);
  if (v10 != v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(void *)(a2 + 112);
      if (*(void *)(v14 + 8 * v13)) {
        kaldi::NewCuSubOrMat<float>(*(void *)(v14 + (v12 >> 29)), *(unsigned __int8 *)(a1 + 16));
      }
      ++v13;
      v12 += 0x100000000;
    }
    while (v13 < (v10 - v11) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(void *)(*(void *)(a1 + 112)+ 8 * ((((*(void *)(a1 + 120) - *(void *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1B1D32CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, quasar::Bitmap *a10, quasar::Bitmap *a11, uint64_t a12)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v15);
  uint64_t v17 = *v14;
  if (*v14)
  {
    *((void *)v12 + 26) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *v13;
  if (*v13)
  {
    *((void *)v12 + 23) = v18;
    operator delete(v18);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  uint64_t v19 = *((void *)v12 + 13);
  *((void *)v12 + 13) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
  }
  quasar::Bitmap::~Bitmap(a10);
  quasar::Bitmap::~Bitmap(a11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

void kaldi::NewCuSubOrMat<float>(uint64_t a1, int a2)
{
  if (a2) {
    operator new();
  }
  operator new();
}

void sub_1B1D32E1C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A49E88;
  uint64_t v2 = (quasar::Bitmap *)(a1 + 88);
  *(void *)(a1 + 88) = &unk_1F0A49FC0;
  float v3 = (quasar::Bitmap *)(a1 + 96);
  *(void *)(a1 + 96) = &unk_1F0A49FE8;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 232));
  uint64_t v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(void *)(a1 + 208) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(void *)(a1 + 184) = v5;
    operator delete(v5);
  }
  uint64_t v7 = (void **)(a1 + 136);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)(a1 + 112);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v6 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(uint64_t a1)
{
}

{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 88);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 96);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void sub_1B1D33068(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void sub_1B1D330DC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::Copy()
{
}

void sub_1B1D33150(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v54 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v53);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &v52);
  int v51 = -1;
  memset(v50, 0, sizeof(v50));
  uint64_t v42 = v50;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_106;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v50);
    if ((SHIBYTE(v50[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v50[2]))
      {
        case 9:
          goto LABEL_81;
        case 0xC:
          goto LABEL_76;
        case 0xD:
          if (v50[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v50 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_92;
          }
          goto LABEL_51;
        case 0xF:
          BOOL v22 = v50[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v50 + 7) == (void *)0x3E66656F43657461;
          uint64_t v10 = (float *)(a1 + 168);
          if (v22) {
            goto LABEL_86;
          }
          if (HIBYTE(v50[2]) == 9) {
            goto LABEL_81;
          }
          if (HIBYTE(v50[2]) != 12) {
            goto LABEL_92;
          }
LABEL_76:
          if (v50[0] != (void *)0x536D6F646E61523CLL || LODWORD(v50[1]) != 1046766949) {
            goto LABEL_80;
          }
          goto LABEL_88;
        case 0x12:
          goto LABEL_61;
        case 0x13:
          if (v50[0] == (void *)0x61725474696E493CLL
            && v50[1] == (void *)0x79546D726F66736ELL
            && *(void **)((char *)&v50[1] + 3) == (void *)0x3E657079546D726FLL)
          {
            goto LABEL_89;
          }
          if (HIBYTE(v50[2]) == 9) {
            goto LABEL_81;
          }
          if (HIBYTE(v50[2]) != 18) {
            goto LABEL_91;
          }
LABEL_61:
          if (v50[0] == (void *)0x6E6569646172473CLL
            && v50[1] == (void *)0x7079546D726F4E74
            && LOWORD(v50[2]) == 15973)
          {
            goto LABEL_69;
          }
LABEL_80:
          if (HIBYTE(v50[2]) != 9)
          {
LABEL_91:
            if (HIBYTE(v50[2]) == 12) {
              goto LABEL_101;
            }
            goto LABEL_92;
          }
LABEL_81:
          BOOL v24 = v50[0] == (void *)0x6461724778614D3CLL && LOBYTE(v50[1]) == 62;
          uint64_t v10 = (float *)(a1 + 164);
          if (!v24) {
            goto LABEL_92;
          }
          break;
        default:
          goto LABEL_92;
      }
      goto LABEL_86;
    }
    uint64_t v7 = v50[1];
    if (v50[1] == (void *)13
      && *(void *)v50[0] == 0x74536D617261503CLL
      && *(void *)((char *)v50[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_51:
      uint64_t v10 = (float *)&v54;
      goto LABEL_86;
    }
    if (v50[1] == (void *)15)
    {
      BOOL v9 = *(void *)v50[0] == 0x61526E7261654C3CLL && *(void *)((char *)v50[0] + 7) == 0x3E66656F43657461;
      uint64_t v10 = (float *)(a1 + 168);
      if (v9) {
        goto LABEL_86;
      }
      uint64_t v7 = v50[1];
    }
    if (v7 == (void *)12)
    {
      if (*(void *)v50[0] == 0x536D6F646E61523CLL && *((_DWORD *)v50[0] + 2) == 1046766949)
      {
LABEL_88:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v51);
        goto LABEL_87;
      }
      uint64_t v7 = v50[1];
    }
    if (v7 == (void *)19)
    {
      if (*(void *)v50[0] == 0x61725474696E493CLL
        && *((void *)v50[0] + 1) == 0x79546D726F66736ELL
        && *(void *)((char *)v50[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_89:
        int64_t v21 = &v53;
        goto LABEL_90;
      }
      uint64_t v7 = v50[1];
    }
    if (v7 != (void *)18) {
      goto LABEL_45;
    }
    BOOL v14 = *(void *)v50[0] == 0x6E6569646172473CLL && *((void *)v50[0] + 1) == 0x7079546D726F4E74;
    if (!v14 || *((_WORD *)v50[0] + 8) != 15973) {
      break;
    }
LABEL_69:
    int64_t v21 = &v52;
LABEL_90:
    kaldi::ReadToken(a2, 0, (uint64_t)v21);
LABEL_87:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v7 = v50[1];
LABEL_45:
  if (v7 != (void *)9) {
    goto LABEL_99;
  }
  BOOL v16 = *(void *)v50[0] == 0x6461724778614D3CLL && *((unsigned char *)v50[0] + 8) == 62;
  uint64_t v10 = (float *)(a1 + 164);
  if (v16)
  {
LABEL_86:
    kaldi::ReadBasicType<float>(a2, 0, v10);
    goto LABEL_87;
  }
  uint64_t v7 = v50[1];
LABEL_99:
  if (v7 != (void *)12) {
    goto LABEL_92;
  }
  uint64_t v42 = (void **)v50[0];
LABEL_101:
  if (*v42 != (void *)0x6E6F706D6F432F3CLL || *((_DWORD *)v42 + 2) != 1047817829)
  {
LABEL_92:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    unsigned int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v50[2]) >= 0) {
      uint64_t v26 = v50;
    }
    else {
      uint64_t v26 = (void **)v50[0];
    }
    if (SHIBYTE(v50[2]) >= 0) {
      uint64_t v27 = HIBYTE(v50[2]);
    }
    else {
      uint64_t v27 = (uint64_t)v50[1];
    }
    unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" (ParamStddev|LearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 82);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
LABEL_106:
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v53);
  *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v52);
  if (v51 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v51);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v45, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v43, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
  int v32 = *(_DWORD *)(a1 + 12);
  if (v32 < 1) {
    goto LABEL_124;
  }
  uint64_t v33 = 0;
  LODWORD(v34) = *(_DWORD *)(a1 + 8);
  while (2)
  {
    if ((int)v34 < 1) {
      goto LABEL_123;
    }
    uint64_t v35 = 0;
    while (2)
    {
      switch(inited)
      {
        case 0:
          if (v33 == v35) {
            float v37 = 1.0;
          }
          else {
            float v37 = 0.0;
          }
          goto LABEL_120;
        case 2:
          float v38 = *(float *)&v54;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v45, 0);
          float v37 = v38 * v39;
LABEL_120:
          *(float *)(*(void *)v43 + 4 * (int)v33 * v44 + 4 * v35) = v37;
          break;
        case 1:
          float v36 = *(float *)&v54;
          float v37 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v36 + v36);
          goto LABEL_120;
      }
      ++v35;
      uint64_t v34 = *(int *)(a1 + 8);
      if (v35 < v34) {
        continue;
      }
      break;
    }
    int v32 = *(_DWORD *)(a1 + 12);
LABEL_123:
    if (++v33 < v32) {
      continue;
    }
    break;
  }
LABEL_124:
  int v40 = *(_DWORD *)(*(void *)(a1 + 104) + 20);
  if (v40 != kaldi::MatrixBase<float>::NumRows((uint64_t)v43)
    || (int v41 = *(_DWORD *)(*(void *)(a1 + 104) + 16),
        v41 != kaldi::MatrixBase<float>::NumCols((uint64_t)v43)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat(*(void *)(a1 + 104), v43, 111);
  kaldi::Matrix<float>::~Matrix((uint64_t)v43);
  if (__p)
  {
    unsigned __int8 v48 = __p;
    operator delete(__p);
  }
  v49[0] = (void **)&v46;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v49);
  if (SHIBYTE(v50[2]) < 0) {
    operator delete(v50[0]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
}

void kaldi::GaussRandomNumber::~GaussRandomNumber(kaldi::GaussRandomNumber *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  float v3 = (void **)((char *)this + 16);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v26);
    if (SHIBYTE(v27) < 0)
    {
      uint64_t v10 = *((void *)&v26 + 1);
      if (*((void *)&v26 + 1) != 15
        || (*(void *)v26 == 0x61526E7261654C3CLL ? (BOOL v11 = *(void *)(v26 + 7) == 0x3E66656F43657461) : (BOOL v11 = 0),
            uint64_t v12 = (float *)(a1 + 168),
            !v11))
      {
        if (*((void *)&v26 + 1) == 18)
        {
          if (*(void *)v26 == 0x6E6569646172473CLL
            && *(void *)(v26 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v26 + 16) == 15973)
          {
            goto LABEL_46;
          }
          uint64_t v10 = *((void *)&v26 + 1);
        }
        if (v10 != 9) {
          goto LABEL_49;
        }
        BOOL v9 = (long long *)v26;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v27) == 9)
      {
        BOOL v9 = &v26;
LABEL_31:
        uint64_t v15 = *(void *)v9;
        int v16 = *((unsigned __int8 *)v9 + 8);
        BOOL v17 = v15 == 0x6461724778614D3CLL && v16 == 62;
        uint64_t v12 = (float *)(a1 + 164);
        if (!v17)
        {
LABEL_49:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v27 >= 0) {
            int64_t v21 = &v26;
          }
          else {
            int64_t v21 = (long long *)v26;
          }
          if (v27 >= 0) {
            uint64_t v22 = HIBYTE(v27);
          }
          else {
            uint64_t v22 = *((void *)&v26 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v27) != 15)
      {
        if (HIBYTE(v27) != 18) {
          goto LABEL_49;
        }
        BOOL v7 = (void)v26 == 0x6E6569646172473CLL && *((void *)&v26 + 1) == 0x7079546D726F4E74;
        if (!v7 || (unsigned __int16)v27 != 15973) {
          goto LABEL_49;
        }
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v25 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_42;
      }
      BOOL v18 = (void)v26 == 0x61526E7261654C3CLL && *(void *)((char *)&v26 + 7) == 0x3E66656F43657461;
      uint64_t v12 = (float *)(a1 + 168);
      if (!v18) {
        goto LABEL_49;
      }
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v12);
LABEL_42:
    if (SHIBYTE(v27) < 0) {
      operator delete((void *)v26);
    }
  }
  uint64_t result = (***(uint64_t (****)(void, uint64_t *, uint64_t, uint64_t))(a1 + 104))(*(void *)(a1 + 104), a2, a3, a4);
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

void sub_1B1D33C4C()
{
}

void *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1B1D33D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::WriteData(void *a1, void *a2, int a3, int a4)
{
  (*(void (**)(void *))(*a1 + 168))(a1);
  uint64_t v8 = a1[13];
  return kaldi::CuMatrixBase<float>::Write(v8, a2, a3, a4);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1)
{
  return (*(_DWORD *)(*(void *)(a1 + 104) + 16) * *(_DWORD *)(*(void *)(a1 + 104) + 20));
}

void *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4 = (*(_DWORD *)(*(void *)(a1 + 104) + 16) * *(_DWORD *)(*(void *)(a1 + 104) + 20));
  kaldi::Vector<float>::Resize(a2, v4, 0);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = *a2;
  LODWORD(v7) = v4;
  return kaldi::VectorBase<float>::CopyRowsFromMat(&v6, *(void *)(a1 + 104));
}

int *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetParams(void *a1, char **a2)
{
  (*(void (**)(void *))(*a1 + 176))(a1);
  uint64_t v4 = a1[13];
  return kaldi::CuMatrixBase<float>::CopyRowsFromVec(v4, a2);
}

float kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1)
{
  return kaldi::CuMatrixBase<float>::Sum(*(void *)(a1 + 104));
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2)
{
  kaldi::CuMatrix<float>::CuMatrix(v5, *(unsigned int *)(*(void *)(a1 + 104) + 20), *(unsigned int *)(*(void *)(a1 + 104) + 16), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v5);
  kaldi::CuMatrixBase<float>::AddMat(*(void *)(a1 + 104), (uint64_t)v5, 111, a2, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v5);
}

void sub_1B1D33F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::Info(uint64_t *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*(void (**)(uint64_t *, void *, void))(*a1 + 168))(a1, v8, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<float>(a1[13]);
  if ((v7 & 0x80u) == 0) {
    float v3 = __p;
  }
  else {
    float v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v10);
}

void sub_1B1D340E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, "\n  linearity_grad");
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 112));
  if ((v16 & 0x80u) == 0) {
    uint64_t v4 = v15;
  }
  else {
    uint64_t v4 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v5 = v16;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v15[1];
  }
  uint64_t v6 = std::string::append(&v17, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v18, ", lr-coef ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v14 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v11 = v14;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint64_t v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1B1D3425C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::MomentStatistics<float>(void *a1)
{
  kaldi::CuMatrix<float>::CuMatrix(v6, *(unsigned int *)(*(void *)*a1 + 20), *(unsigned int *)(*(void *)*a1 + 16), 0, 0, 0);
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v3 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v6, *(void *)(v2 + 8 * v3++), 111, 1.0, 1.0);
      uint64_t v2 = *a1;
    }
    while (v3 < (uint64_t)(a1[1] - *a1) >> 3);
  }
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v5, (uint64_t)v6, 111);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v5);
  kaldi::Matrix<float>::~Matrix((uint64_t)v5);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v6);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned char v6[40];
  int32x2_t v7[6];

  kaldi::CuMatrix<float>::CuMatrix(v7, *(unsigned int *)(*a1 + 20), *(unsigned int *)(*a1 + 16), 0, 0, 0);
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v7, v2 + v3, 111, 1.0, 1.0);
      ++v4;
      uint64_t v2 = *a1;
      v3 += 48;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4) > v4);
  }
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v6, (uint64_t)v7, 111);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v6);
  kaldi::Matrix<float>::~Matrix((uint64_t)v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1B1D34394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ToString<float>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v1[1] = MEMORY[0x1E4FBA470] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v3);
}

void sub_1B1D344F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

{
  kaldi::CuVectorBase<float>::AddMatVec(a3, *(void *)(a1 + 104), CblasNoTrans, a2, 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(v4 + 8) + 4 * *(_DWORD *)(v4 + 24) * a3;
  unsigned int v6 = *(_DWORD *)(v4 + 16);
  uint64_t v7 = *(void *)(v4 + 32);
  v8[1] = v5;
  v8[0] = &unk_1F0A472D0;
  int32x2_t v8[2] = v6;
  void v8[3] = v7;
  kaldi::CuVectorBase<float>::AddMatVec(a4, a2, CblasNoTrans, (uint64_t)v8, 1.0, 0.0);
}

float kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  uint64_t v4 = *(void *)(v3 + 8) + 4 * *(_DWORD *)(v3 + 24) * a3;
  unsigned int v5 = *(_DWORD *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 32);
  v8[1] = v4;
  v8[0] = &unk_1F0A472D0;
  int32x2_t v8[2] = v5;
  void v8[3] = v6;
  return kaldi::VecVec<float>(a2, (uint64_t)v8);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  float v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 176) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v11 = *(void *)(a1 + 112);
  *(void *)(*(void *)(v11 + 8 * a5) + 32) = a4;
  uint64_t v12 = *(void *)(v11 + 8 * a5);
  kaldi::CuMatrixBase<float>::AddMatMat(v12, a3, CblasTrans, a2, CblasNoTrans, 1.0, v10);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    int v2 = *(_DWORD *)(a1 + 80);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 112), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 136), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 176), v3);
    *(unsigned char *)(a1 + 224) = 1;
  }
}

void sub_1B1D34834(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 164) = a3;
  *(_DWORD *)(result + 160) = a2;
  *(unsigned char *)(result + 224) = 0;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  int v3 = *(_DWORD *)(a1 + 160);
  if (v3 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0) {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(void *)(*(void *)(a1 + 112) + 8 * a2), *(void *)(a1 + 136) + 48 * a2, a3);
    }
  }
  else if (v3 == 2)
  {
    if (a3 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        a3 = (float)*(int *)(*(void *)(a1 + 176) + 4 * a2) * a3;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(void *)(*(void *)(a1 + 112) + 8 * a2), (int *)(*(void *)(a1 + 136) + 48 * a2), a3);
    }
  }
  else if (v3 == 1 && a3 > 0.0)
  {
    if (*(unsigned char *)(a1 + 84)) {
      a3 = (float)*(int *)(*(void *)(a1 + 176) + 4 * a2) * a3;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(void *)(*(void *)(a1 + 112) + 8 * a2), a3);
  }
}

float kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 200);
  unint64_t v3 = *(void *)(a1 + 208) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  ((void (*)(uint64_t **, uint64_t, uint64_t, void, void))(*v8)[29])(v8, a2, a3, 0, 0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  kaldi::VectorBase<float>::CopyRowsFromMat(a4, *v8[14]);
  float v10 = (uint64_t (*)(uint64_t **))(*v8)[1];
  return v10(v8);
}

int *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(uint64_t a1, int *a2)
{
  kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  uint64_t v4 = *(void *)(a1 + 104);
  return kaldi::CuMatrixBase<float>::CopyFromMat(v4, a2, 111);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  uint64_t v6 = *(void *)(a1 + 112);
  *a3 = *(_DWORD *)(*(void *)(a1 + 104) + 16) * *(_DWORD *)(*(void *)(a1 + 104) + 20);
  uint64_t v7 = *(void *)(a1 + 120) - v6;
  if (v7)
  {
    if (*(_DWORD *)(a1 + 80) == 1) {
      int v8 = 0;
    }
    else {
      int v8 = *(_DWORD *)(a1 + 80);
    }
    if ((v7 >> 3) - 1 != v8)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      float v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
    }
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v6 + 8 * v8));
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::ApplyCorr(uint64_t a1, int a2, float a3)
{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(void *)(*(void *)(a1 + 112) + 8 * a2);
  float v8 = -(float)(a3 * *(float *)(a1 + 168));
  kaldi::CuMatrixBase<float>::AddMat(v6, v7, 111, v8, 1.0);
}

void std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        *unint64_t v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
        }
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__append(a1, v5);
  }
}

void kaldi::nnet1::QuantizerResidualAggregator::PushSetup(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  long long v25 = 0u;
  long long v24 = 0u;
  uint64_t v23 = &unk_1F0A51768;
  char v26 = 0;
  if (v4 >= a1[2])
  {
    uint64_t v6 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a1, (uint64_t)&v23);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(v4, &v23, 111);
    uint64_t v6 = v4 + 48;
    a1[1] = v4 + 48;
  }
  a1[1] = v6;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v23);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*a1 + 16 * ((uint64_t)(v4 - v5) >> 4)), *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  unsigned int v7 = *(_DWORD *)(a2 + 20);
  uint64_t v9 = *(void *)(a2 + 8);
  unsigned int v10 = *(_DWORD *)(a2 + 24);
  unsigned int v11 = *(_DWORD *)(a2 + 28);
  uint64_t v12 = *(void *)(a2 + 32);
  *((void *)&v24 + 1) = __PAIR64__(v7, v8);
  *(void *)&long long v25 = __PAIR64__(v11, v10);
  *((void *)&v25 + 1) = v12;
  uint64_t v23 = &unk_1F0A472A0;
  *(void *)&long long v24 = v9;
  unint64_t v13 = a1[4];
  if (v13 >= a1[5])
  {
    uint64_t v14 = std::vector<kaldi::CuSubMatrix<float>>::__push_back_slow_path<kaldi::CuSubMatrix<float>>(a1 + 3, (uint64_t)&v23);
  }
  else
  {
    *(_DWORD *)(v13 + 16) = v8;
    *(_DWORD *)(v13 + 20) = v7;
    *(_DWORD *)(v13 + 24) = v10;
    *(_DWORD *)(v13 + 28) = v11;
    *(void *)(v13 + 32) = v12;
    uint64_t v14 = v13 + 40;
    *(void *)unint64_t v13 = &unk_1F0A472A0;
    *(void *)(v13 + 8) = v9;
  }
  a1[4] = v14;
  uint64_t v23 = &unk_1F0A472A0;
  long long v24 = 0u;
  long long v25 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
  unsigned int v16 = *(_DWORD *)(a2 + 16);
  unsigned int v15 = *(_DWORD *)(a2 + 20);
  uint64_t v17 = *(void *)(a2 + 8);
  unsigned int v18 = *(_DWORD *)(a2 + 24);
  unsigned int v19 = *(_DWORD *)(a2 + 28);
  uint64_t v20 = *(void *)(a2 + 32);
  *((void *)&v24 + 1) = __PAIR64__(v15, v16);
  *(void *)&long long v25 = __PAIR64__(v19, v18);
  *((void *)&v25 + 1) = v20;
  uint64_t v23 = &unk_1F0A472A0;
  *(void *)&long long v24 = v17;
  unint64_t v21 = a1[7];
  if (v21 >= a1[8])
  {
    uint64_t v22 = std::vector<kaldi::CuSubMatrix<float>>::__push_back_slow_path<kaldi::CuSubMatrix<float>>(a1 + 6, (uint64_t)&v23);
  }
  else
  {
    *(_DWORD *)(v21 + 16) = v16;
    *(_DWORD *)(v21 + 20) = v15;
    *(_DWORD *)(v21 + 24) = v18;
    *(_DWORD *)(v21 + 28) = v19;
    *(void *)(v21 + 32) = v20;
    uint64_t v22 = v21 + 40;
    *(void *)unint64_t v21 = &unk_1F0A472A0;
    *(void *)(v21 + 8) = v17;
  }
  a1[7] = v22;
  uint64_t v23 = &unk_1F0A472A0;
  long long v24 = 0u;
  long long v25 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  long long v18;
  long long v19;
  char v20;

  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  unsigned int v19 = 0u;
  unsigned int v18 = 0u;
  uint64_t v17 = &unk_1F0A51768;
  uint64_t v20 = 0;
  if (v4 >= a1[2])
  {
    uint64_t v6 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a1, (uint64_t)&v17);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(v4, &v17, 111);
    uint64_t v6 = v4 + 48;
    a1[1] = v4 + 48;
  }
  a1[1] = v6;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v17);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*a1 + 16 * ((uint64_t)(v4 - v5) >> 4)), 1, *(unsigned int *)(a2 + 16), 0, 0);
  unsigned int v7 = *(_DWORD *)(a2 + 16);
  unsigned int v8 = *(void *)(a2 + 8);
  uint64_t v17 = &unk_1F0A472A0;
  *(void *)&unsigned int v18 = v8;
  *((void *)&v18 + 1) = v7 | 0x100000000;
  LODWORD(v19) = v7;
  DWORD1(v19) = v7;
  uint64_t v9 = *(void *)(a2 + 24);
  *((void *)&v19 + 1) = v9;
  unsigned int v10 = a1[4];
  if (v10 >= a1[5])
  {
    unsigned int v11 = std::vector<kaldi::CuSubMatrix<float>>::__push_back_slow_path<kaldi::CuSubMatrix<float>>(a1 + 3, (uint64_t)&v17);
  }
  else
  {
    *(_DWORD *)(v10 + 16) = v7;
    *(_DWORD *)(v10 + 20) = 1;
    *(_DWORD *)(v10 + 24) = v7;
    *(_DWORD *)(v10 + 28) = v7;
    *(void *)(v10 + 32) = v9;
    unsigned int v11 = v10 + 40;
    *(void *)unsigned int v10 = &unk_1F0A472A0;
    *(void *)(v10 + 8) = v8;
  }
  a1[4] = v11;
  uint64_t v17 = &unk_1F0A472A0;
  unsigned int v18 = 0u;
  unsigned int v19 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v17);
  uint64_t v12 = *(_DWORD *)(a2 + 16);
  unint64_t v13 = *(void *)(a2 + 8);
  uint64_t v17 = &unk_1F0A472A0;
  *(void *)&unsigned int v18 = v13;
  *((void *)&v18 + 1) = v12 | 0x100000000;
  LODWORD(v19) = v12;
  DWORD1(v19) = v12;
  uint64_t v14 = *(void *)(a2 + 24);
  *((void *)&v19 + 1) = v14;
  unsigned int v15 = a1[7];
  if (v15 >= a1[8])
  {
    unsigned int v16 = std::vector<kaldi::CuSubMatrix<float>>::__push_back_slow_path<kaldi::CuSubMatrix<float>>(a1 + 6, (uint64_t)&v17);
  }
  else
  {
    *(_DWORD *)(v15 + 16) = v12;
    *(_DWORD *)(v15 + 20) = 1;
    *(_DWORD *)(v15 + 24) = v12;
    *(_DWORD *)(v15 + 28) = v12;
    *(void *)(v15 + 32) = v14;
    unsigned int v16 = v15 + 40;
    *(void *)unsigned int v15 = &unk_1F0A472A0;
    *(void *)(v15 + 8) = v13;
  }
  a1[7] = v16;
  uint64_t v17 = &unk_1F0A472A0;
  unsigned int v18 = 0u;
  unsigned int v19 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v17);
}

void sub_1B1D34F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  *uint64_t v9 = 0u;
  v9[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A4A010;
  *(void *)(a1 + 88) = &unk_1F0A4A148;
  *(void *)(a1 + 96) = &unk_1F0A4A170;
  operator new();
}

void sub_1B1D350B4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v4, 0x10D0C4068EB0291);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4A010;
  *(void *)(a1 + 88) = &unk_1F0A4A148;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = &unk_1F0A4A170;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v8 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(unsigned char *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  if (*(void *)(a2 + 104)) {
    kaldi::NewCuSubOrMat<signed char>();
  }
  uint64_t v10 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  if (v9 != v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(a2 + 112);
      if (*(void *)(v13 + 8 * v12)) {
        kaldi::NewCuSubOrMat<float>(*(void *)(v13 + (v11 >> 29)), *(unsigned __int8 *)(a1 + 16));
      }
      ++v12;
      v11 += 0x100000000;
    }
    while (v12 < (v9 - v10) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(void *)(*(void *)(a1 + 112)+ 8 * ((((*(void *)(a1 + 120) - *(void *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1B1D35478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, quasar::Bitmap *a10, quasar::Bitmap *a11, uint64_t a12)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v15);
  uint64_t v17 = *v14;
  if (*v14)
  {
    *((void *)v12 + 26) = v17;
    operator delete(v17);
  }
  unsigned int v18 = *v13;
  if (*v13)
  {
    *((void *)v12 + 23) = v18;
    operator delete(v18);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a9, 0);
  quasar::Bitmap::~Bitmap(a10);
  quasar::Bitmap::~Bitmap(a11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

void kaldi::NewCuSubOrMat<signed char>()
{
}

void sub_1B1D35568(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A4A010;
  uint64_t v2 = (quasar::Bitmap *)(a1 + 88);
  *(void *)(a1 + 88) = &unk_1F0A4A148;
  unint64_t v3 = (quasar::Bitmap *)(a1 + 96);
  *(void *)(a1 + 96) = &unk_1F0A4A170;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 232));
  uint64_t v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(void *)(a1 + 208) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(void *)(a1 + 184) = v5;
    operator delete(v5);
  }
  int v6 = (void **)(a1 + 136);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  int v6 = (void **)(a1 + 112);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), 0);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(uint64_t a1)
{
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 88);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 96);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void sub_1B1D35790(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void sub_1B1D35804(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::Copy()
{
}

void sub_1B1D35878(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v54 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v53);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &v52);
  int v51 = -1;
  memset(v50, 0, sizeof(v50));
  uint64_t v42 = v50;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_106;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v50);
    if ((SHIBYTE(v50[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v50[2]))
      {
        case 9:
          goto LABEL_81;
        case 0xC:
          goto LABEL_76;
        case 0xD:
          if (v50[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v50 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_92;
          }
          goto LABEL_51;
        case 0xF:
          BOOL v22 = v50[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v50 + 7) == (void *)0x3E66656F43657461;
          uint64_t v10 = (float *)(a1 + 168);
          if (v22) {
            goto LABEL_86;
          }
          if (HIBYTE(v50[2]) == 9) {
            goto LABEL_81;
          }
          if (HIBYTE(v50[2]) != 12) {
            goto LABEL_92;
          }
LABEL_76:
          if (v50[0] != (void *)0x536D6F646E61523CLL || LODWORD(v50[1]) != 1046766949) {
            goto LABEL_80;
          }
          goto LABEL_88;
        case 0x12:
          goto LABEL_61;
        case 0x13:
          if (v50[0] == (void *)0x61725474696E493CLL
            && v50[1] == (void *)0x79546D726F66736ELL
            && *(void **)((char *)&v50[1] + 3) == (void *)0x3E657079546D726FLL)
          {
            goto LABEL_89;
          }
          if (HIBYTE(v50[2]) == 9) {
            goto LABEL_81;
          }
          if (HIBYTE(v50[2]) != 18) {
            goto LABEL_91;
          }
LABEL_61:
          if (v50[0] == (void *)0x6E6569646172473CLL
            && v50[1] == (void *)0x7079546D726F4E74
            && LOWORD(v50[2]) == 15973)
          {
            goto LABEL_69;
          }
LABEL_80:
          if (HIBYTE(v50[2]) != 9)
          {
LABEL_91:
            if (HIBYTE(v50[2]) == 12) {
              goto LABEL_101;
            }
            goto LABEL_92;
          }
LABEL_81:
          BOOL v24 = v50[0] == (void *)0x6461724778614D3CLL && LOBYTE(v50[1]) == 62;
          uint64_t v10 = (float *)(a1 + 164);
          if (!v24) {
            goto LABEL_92;
          }
          break;
        default:
          goto LABEL_92;
      }
      goto LABEL_86;
    }
    uint64_t v7 = v50[1];
    if (v50[1] == (void *)13
      && *(void *)v50[0] == 0x74536D617261503CLL
      && *(void *)((char *)v50[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_51:
      uint64_t v10 = (float *)&v54;
      goto LABEL_86;
    }
    if (v50[1] == (void *)15)
    {
      BOOL v9 = *(void *)v50[0] == 0x61526E7261654C3CLL && *(void *)((char *)v50[0] + 7) == 0x3E66656F43657461;
      uint64_t v10 = (float *)(a1 + 168);
      if (v9) {
        goto LABEL_86;
      }
      uint64_t v7 = v50[1];
    }
    if (v7 == (void *)12)
    {
      if (*(void *)v50[0] == 0x536D6F646E61523CLL && *((_DWORD *)v50[0] + 2) == 1046766949)
      {
LABEL_88:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v51);
        goto LABEL_87;
      }
      uint64_t v7 = v50[1];
    }
    if (v7 == (void *)19)
    {
      if (*(void *)v50[0] == 0x61725474696E493CLL
        && *((void *)v50[0] + 1) == 0x79546D726F66736ELL
        && *(void *)((char *)v50[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_89:
        unint64_t v21 = &v53;
        goto LABEL_90;
      }
      uint64_t v7 = v50[1];
    }
    if (v7 != (void *)18) {
      goto LABEL_45;
    }
    BOOL v14 = *(void *)v50[0] == 0x6E6569646172473CLL && *((void *)v50[0] + 1) == 0x7079546D726F4E74;
    if (!v14 || *((_WORD *)v50[0] + 8) != 15973) {
      break;
    }
LABEL_69:
    unint64_t v21 = &v52;
LABEL_90:
    kaldi::ReadToken(a2, 0, (uint64_t)v21);
LABEL_87:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v7 = v50[1];
LABEL_45:
  if (v7 != (void *)9) {
    goto LABEL_99;
  }
  BOOL v16 = *(void *)v50[0] == 0x6461724778614D3CLL && *((unsigned char *)v50[0] + 8) == 62;
  uint64_t v10 = (float *)(a1 + 164);
  if (v16)
  {
LABEL_86:
    kaldi::ReadBasicType<float>(a2, 0, v10);
    goto LABEL_87;
  }
  uint64_t v7 = v50[1];
LABEL_99:
  if (v7 != (void *)12) {
    goto LABEL_92;
  }
  uint64_t v42 = (void **)v50[0];
LABEL_101:
  if (*v42 != (void *)0x6E6F706D6F432F3CLL || *((_DWORD *)v42 + 2) != 1047817829)
  {
LABEL_92:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v50[2]) >= 0) {
      char v26 = v50;
    }
    else {
      char v26 = (void **)v50[0];
    }
    if (SHIBYTE(v50[2]) >= 0) {
      uint64_t v27 = HIBYTE(v50[2]);
    }
    else {
      uint64_t v27 = (uint64_t)v50[1];
    }
    unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" (ParamStddev|LearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 82);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
LABEL_106:
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v53);
  *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v52);
  if (v51 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v51);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v45, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v43, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
  int v32 = *(_DWORD *)(a1 + 12);
  if (v32 < 1) {
    goto LABEL_124;
  }
  uint64_t v33 = 0;
  LODWORD(v34) = *(_DWORD *)(a1 + 8);
  while (2)
  {
    if ((int)v34 < 1) {
      goto LABEL_123;
    }
    uint64_t v35 = 0;
    while (2)
    {
      switch(inited)
      {
        case 0:
          if (v33 == v35) {
            float v37 = 1.0;
          }
          else {
            float v37 = 0.0;
          }
          goto LABEL_120;
        case 2:
          float v38 = *(float *)&v54;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v45, 0);
          float v37 = v38 * v39;
LABEL_120:
          *(float *)(v43[0] + 4 * (int)v33 * v44 + 4 * v35) = v37;
          break;
        case 1:
          float v36 = *(float *)&v54;
          float v37 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v36 + v36);
          goto LABEL_120;
      }
      ++v35;
      uint64_t v34 = *(int *)(a1 + 8);
      if (v35 < v34) {
        continue;
      }
      break;
    }
    int v32 = *(_DWORD *)(a1 + 12);
LABEL_123:
    if (++v33 < v32) {
      continue;
    }
    break;
  }
LABEL_124:
  int v40 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  if (v40 != kaldi::MatrixBase<float>::NumRows((uint64_t)v43)
    || (int v41 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104)),
        v41 != kaldi::MatrixBase<float>::NumCols((uint64_t)v43)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(*(void *)(a1 + 104), (uint64_t)v43);
  kaldi::Matrix<float>::~Matrix((uint64_t)v43);
  if (__p)
  {
    unsigned __int8 v48 = __p;
    operator delete(__p);
  }
  v49[0] = (void **)&v46;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v49);
  if (SHIBYTE(v50[2]) < 0) {
    operator delete(v50[0]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v26);
    if (SHIBYTE(v27) < 0)
    {
      uint64_t v10 = *((void *)&v26 + 1);
      if (*((void *)&v26 + 1) != 15
        || (*(void *)v26 == 0x61526E7261654C3CLL ? (BOOL v11 = *(void *)(v26 + 7) == 0x3E66656F43657461) : (BOOL v11 = 0),
            unint64_t v12 = (float *)(a1 + 168),
            !v11))
      {
        if (*((void *)&v26 + 1) == 18)
        {
          if (*(void *)v26 == 0x6E6569646172473CLL
            && *(void *)(v26 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v26 + 16) == 15973)
          {
            goto LABEL_46;
          }
          uint64_t v10 = *((void *)&v26 + 1);
        }
        if (v10 != 9) {
          goto LABEL_49;
        }
        BOOL v9 = (long long *)v26;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v27) == 9)
      {
        BOOL v9 = &v26;
LABEL_31:
        uint64_t v15 = *(void *)v9;
        int v16 = *((unsigned __int8 *)v9 + 8);
        BOOL v17 = v15 == 0x6461724778614D3CLL && v16 == 62;
        unint64_t v12 = (float *)(a1 + 164);
        if (!v17)
        {
LABEL_49:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v27 >= 0) {
            unint64_t v21 = &v26;
          }
          else {
            unint64_t v21 = (long long *)v26;
          }
          if (v27 >= 0) {
            uint64_t v22 = HIBYTE(v27);
          }
          else {
            uint64_t v22 = *((void *)&v26 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v27) != 15)
      {
        if (HIBYTE(v27) != 18) {
          goto LABEL_49;
        }
        BOOL v7 = (void)v26 == 0x6E6569646172473CLL && *((void *)&v26 + 1) == 0x7079546D726F4E74;
        if (!v7 || (unsigned __int16)v27 != 15973) {
          goto LABEL_49;
        }
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v25 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_42;
      }
      BOOL v18 = (void)v26 == 0x61526E7261654C3CLL && *(void *)((char *)&v26 + 7) == 0x3E66656F43657461;
      unint64_t v12 = (float *)(a1 + 168);
      if (!v18) {
        goto LABEL_49;
      }
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v12);
LABEL_42:
    if (SHIBYTE(v27) < 0) {
      operator delete((void *)v26);
    }
  }
  kaldi::QuantizedMatrix<signed char>::Read(*(float **)(a1 + 104), a2, a3, a4);
  *(unsigned char *)(a1 + 16) = 0;
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  return kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104));
}

void sub_1B1D3631C()
{
}

void *kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1B1D363FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::WriteData(void *a1, void *a2, int a3, int a4)
{
  (*(void (**)(void *))(*a1 + 168))(a1);
  char v8 = (int *)a1[13];
  return kaldi::QuantizedMatrix<signed char>::Write(v8, a2, a3, a4);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1)
{
  int v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  return kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104)) * v2;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetParams(uint64_t a1, void **a2)
{
  int v4 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  uint64_t v5 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104)) * v4;
  kaldi::Vector<float>::Resize(a2, v5, 0);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  BOOL v7 = *a2;
  LODWORD(v8) = v5;
  return kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v7, *(float **)(a1 + 104));
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetParams(void *a1, char **a2)
{
  (*(void (**)(void *))(*a1 + 176))(a1);
  int v4 = (unsigned int *)a1[13];
  return kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v4, a2);
}

double kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1)
{
  return kaldi::QuantizedMatrixBase<signed char>::Sum(*(int **)(a1 + 104));
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  uint64_t v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104));
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, v3, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

uint64_t sub_1B1D36618()
{
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v1);
}

void sub_1B1D36634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::Info(kaldi::quasar::Vocab **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*((void (**)(kaldi::quasar::Vocab **, void *, void))*a1 + 21))(a1, v8, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<signed char>(a1[13]);
  if ((v7 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v10);
}

void sub_1B1D367F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<signed char>(kaldi::quasar::Vocab *a1)
{
  int v2 = kaldi::quasar::Vocab::VocabSize(a1);
  int v3 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a1);
  memset(v4, 0, sizeof(v4));
  kaldi::Vector<float>::Resize(v4, (v3 * v2), 0);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)v4, (float *)a1);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v4);
  kaldi::Vector<float>::Destroy((uint64_t)v4);
}

void sub_1B1D368A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, "\n  linearity_grad");
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 112));
  if ((v16 & 0x80u) == 0) {
    uint64_t v4 = v15;
  }
  else {
    uint64_t v4 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v5 = v16;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v15[1];
  }
  int v6 = std::string::append(&v17, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v18, ", lr-coef ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v14 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v11 = v14;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  unint64_t v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1B1D36A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void **kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = 1.0;
  return kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a3, a2, 111, *(kaldi::quasar::Vocab **)(a1 + 104), 112, a4, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::PropagateFnc()
{
}

void **kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  LODWORD(a2) = 1.0;
  return kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a6, a5, 111, *(kaldi::quasar::Vocab **)(a1 + 104), 111, a2, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  kaldi::QuantizedMatrixBase<signed char>::Row(*(void *)(a1 + 104), a3, (uint64_t)v7);
  LODWORD(v6) = 1.0;
  kaldi::CuVectorBase<float>::AddMatVec<signed char>(a4, a2, 111, (uint64_t)v7, v6, 0.0);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  kaldi::QuantizedMatrixBase<signed char>::Row(*(void *)(a1 + 104), a3, (uint64_t)v5);
  return kaldi::VecVec<float,signed char>(a2, (uint64_t)v5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  float v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 176) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v11 = *(void *)(a1 + 112);
  *(void *)(*(void *)(v11 + 8 * a5) + 32) = a4;
  uint64_t v12 = *(void *)(v11 + 8 * a5);
  kaldi::CuMatrixBase<float>::AddMatMat(v12, a3, CblasTrans, a2, CblasNoTrans, 1.0, v10);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    int v2 = *(_DWORD *)(a1 + 80);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 112), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 136), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 176), v3);
    *(unsigned char *)(a1 + 224) = 1;
  }
}

void sub_1B1D36D94(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 164) = a3;
  *(_DWORD *)(result + 160) = a2;
  *(unsigned char *)(result + 224) = 0;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  int v3 = *(_DWORD *)(a1 + 160);
  if (v3 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0) {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(void *)(*(void *)(a1 + 112) + 8 * a2), *(void *)(a1 + 136) + 48 * a2, a3);
    }
  }
  else if (v3 == 2)
  {
    if (a3 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        a3 = (float)*(int *)(*(void *)(a1 + 176) + 4 * a2) * a3;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(void *)(*(void *)(a1 + 112) + 8 * a2), (int *)(*(void *)(a1 + 136) + 48 * a2), a3);
    }
  }
  else if (v3 == 1 && a3 > 0.0)
  {
    if (*(unsigned char *)(a1 + 84)) {
      a3 = (float)*(int *)(*(void *)(a1 + 176) + 4 * a2) * a3;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(void *)(*(void *)(a1 + 112) + 8 * a2), a3);
  }
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 200);
  unint64_t v3 = *(void *)(a1 + 208) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  ((void (*)(uint64_t **, uint64_t, uint64_t, void, void))(*v8)[29])(v8, a2, a3, 0, 0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  kaldi::VectorBase<float>::CopyRowsFromMat(a4, *v8[14]);
  float v10 = (uint64_t (*)(uint64_t **))(*v8)[1];
  return v10(v8);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetLinearity(uint64_t a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104));
  uint64_t v4 = *(void *)(a1 + 104);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v4, a2);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  int v6 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  *a3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104)) * v6;
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 120) - v7;
  if (v8)
  {
    if (*(_DWORD *)(a1 + 80) == 1) {
      int v9 = 0;
    }
    else {
      int v9 = *(_DWORD *)(a1 + 80);
    }
    if ((v8 >> 3) - 1 != v9)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v7 + 8 * v9));
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A4A198;
  *(void *)(a1 + 88) = &unk_1F0A4A2D0;
  *(void *)(a1 + 96) = &unk_1F0A4A2F8;
  operator new();
}

void sub_1B1D37334(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v4, 0x10D0C4068EB0291);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4A198;
  *(void *)(a1 + 88) = &unk_1F0A4A2D0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = &unk_1F0A4A2F8;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v8 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(unsigned char *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  if (*(void *)(a2 + 104)) {
    kaldi::NewCuSubOrMat<short>();
  }
  uint64_t v10 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  if (v9 != v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(a2 + 112);
      if (*(void *)(v13 + 8 * v12)) {
        kaldi::NewCuSubOrMat<float>(*(void *)(v13 + (v11 >> 29)), *(unsigned __int8 *)(a1 + 16));
      }
      ++v12;
      v11 += 0x100000000;
    }
    while (v12 < (v9 - v10) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(void *)(*(void *)(a1 + 112)+ 8 * ((((*(void *)(a1 + 120) - *(void *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1B1D376F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, quasar::Bitmap *a10, quasar::Bitmap *a11, uint64_t a12)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v15);
  std::string v17 = *v14;
  if (*v14)
  {
    *((void *)v12 + 26) = v17;
    operator delete(v17);
  }
  std::string v18 = *v13;
  if (*v13)
  {
    *((void *)v12 + 23) = v18;
    operator delete(v18);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a9, 0);
  quasar::Bitmap::~Bitmap(a10);
  quasar::Bitmap::~Bitmap(a11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

void kaldi::NewCuSubOrMat<short>()
{
}

void sub_1B1D377E8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A4A198;
  uint64_t v2 = (quasar::Bitmap *)(a1 + 88);
  *(void *)(a1 + 88) = &unk_1F0A4A2D0;
  unint64_t v3 = (quasar::Bitmap *)(a1 + 96);
  *(void *)(a1 + 96) = &unk_1F0A4A2F8;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 232));
  uint64_t v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(void *)(a1 + 208) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(void *)(a1 + 184) = v5;
    operator delete(v5);
  }
  int v6 = (void **)(a1 + 136);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  int v6 = (void **)(a1 + 112);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), 0);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(uint64_t a1)
{
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 88);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 96);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void sub_1B1D37A10(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void sub_1B1D37A84(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::Copy()
{
}

void sub_1B1D37AF8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v54 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v53);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &v52);
  int v51 = -1;
  memset(v50, 0, sizeof(v50));
  uint64_t v42 = v50;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_106;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v50);
    if ((SHIBYTE(v50[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v50[2]))
      {
        case 9:
          goto LABEL_81;
        case 0xC:
          goto LABEL_76;
        case 0xD:
          if (v50[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v50 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_92;
          }
          goto LABEL_51;
        case 0xF:
          BOOL v22 = v50[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v50 + 7) == (void *)0x3E66656F43657461;
          uint64_t v10 = (float *)(a1 + 168);
          if (v22) {
            goto LABEL_86;
          }
          if (HIBYTE(v50[2]) == 9) {
            goto LABEL_81;
          }
          if (HIBYTE(v50[2]) != 12) {
            goto LABEL_92;
          }
LABEL_76:
          if (v50[0] != (void *)0x536D6F646E61523CLL || LODWORD(v50[1]) != 1046766949) {
            goto LABEL_80;
          }
          goto LABEL_88;
        case 0x12:
          goto LABEL_61;
        case 0x13:
          if (v50[0] == (void *)0x61725474696E493CLL
            && v50[1] == (void *)0x79546D726F66736ELL
            && *(void **)((char *)&v50[1] + 3) == (void *)0x3E657079546D726FLL)
          {
            goto LABEL_89;
          }
          if (HIBYTE(v50[2]) == 9) {
            goto LABEL_81;
          }
          if (HIBYTE(v50[2]) != 18) {
            goto LABEL_91;
          }
LABEL_61:
          if (v50[0] == (void *)0x6E6569646172473CLL
            && v50[1] == (void *)0x7079546D726F4E74
            && LOWORD(v50[2]) == 15973)
          {
            goto LABEL_69;
          }
LABEL_80:
          if (HIBYTE(v50[2]) != 9)
          {
LABEL_91:
            if (HIBYTE(v50[2]) == 12) {
              goto LABEL_101;
            }
            goto LABEL_92;
          }
LABEL_81:
          BOOL v24 = v50[0] == (void *)0x6461724778614D3CLL && LOBYTE(v50[1]) == 62;
          uint64_t v10 = (float *)(a1 + 164);
          if (!v24) {
            goto LABEL_92;
          }
          break;
        default:
          goto LABEL_92;
      }
      goto LABEL_86;
    }
    uint64_t v7 = v50[1];
    if (v50[1] == (void *)13
      && *(void *)v50[0] == 0x74536D617261503CLL
      && *(void *)((char *)v50[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_51:
      uint64_t v10 = (float *)&v54;
      goto LABEL_86;
    }
    if (v50[1] == (void *)15)
    {
      BOOL v9 = *(void *)v50[0] == 0x61526E7261654C3CLL && *(void *)((char *)v50[0] + 7) == 0x3E66656F43657461;
      uint64_t v10 = (float *)(a1 + 168);
      if (v9) {
        goto LABEL_86;
      }
      uint64_t v7 = v50[1];
    }
    if (v7 == (void *)12)
    {
      if (*(void *)v50[0] == 0x536D6F646E61523CLL && *((_DWORD *)v50[0] + 2) == 1046766949)
      {
LABEL_88:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v51);
        goto LABEL_87;
      }
      uint64_t v7 = v50[1];
    }
    if (v7 == (void *)19)
    {
      if (*(void *)v50[0] == 0x61725474696E493CLL
        && *((void *)v50[0] + 1) == 0x79546D726F66736ELL
        && *(void *)((char *)v50[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_89:
        unint64_t v21 = &v53;
        goto LABEL_90;
      }
      uint64_t v7 = v50[1];
    }
    if (v7 != (void *)18) {
      goto LABEL_45;
    }
    BOOL v14 = *(void *)v50[0] == 0x6E6569646172473CLL && *((void *)v50[0] + 1) == 0x7079546D726F4E74;
    if (!v14 || *((_WORD *)v50[0] + 8) != 15973) {
      break;
    }
LABEL_69:
    unint64_t v21 = &v52;
LABEL_90:
    kaldi::ReadToken(a2, 0, (uint64_t)v21);
LABEL_87:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v7 = v50[1];
LABEL_45:
  if (v7 != (void *)9) {
    goto LABEL_99;
  }
  BOOL v16 = *(void *)v50[0] == 0x6461724778614D3CLL && *((unsigned char *)v50[0] + 8) == 62;
  uint64_t v10 = (float *)(a1 + 164);
  if (v16)
  {
LABEL_86:
    kaldi::ReadBasicType<float>(a2, 0, v10);
    goto LABEL_87;
  }
  uint64_t v7 = v50[1];
LABEL_99:
  if (v7 != (void *)12) {
    goto LABEL_92;
  }
  uint64_t v42 = (void **)v50[0];
LABEL_101:
  if (*v42 != (void *)0x6E6F706D6F432F3CLL || *((_DWORD *)v42 + 2) != 1047817829)
  {
LABEL_92:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v50[2]) >= 0) {
      long long v26 = v50;
    }
    else {
      long long v26 = (void **)v50[0];
    }
    if (SHIBYTE(v50[2]) >= 0) {
      uint64_t v27 = HIBYTE(v50[2]);
    }
    else {
      uint64_t v27 = (uint64_t)v50[1];
    }
    unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" (ParamStddev|LearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 82);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
LABEL_106:
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v53);
  *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v52);
  if (v51 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v51);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v45, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v43, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
  int v32 = *(_DWORD *)(a1 + 12);
  if (v32 < 1) {
    goto LABEL_124;
  }
  uint64_t v33 = 0;
  LODWORD(v34) = *(_DWORD *)(a1 + 8);
  while (2)
  {
    if ((int)v34 < 1) {
      goto LABEL_123;
    }
    uint64_t v35 = 0;
    while (2)
    {
      switch(inited)
      {
        case 0:
          if (v33 == v35) {
            float v37 = 1.0;
          }
          else {
            float v37 = 0.0;
          }
          goto LABEL_120;
        case 2:
          float v38 = *(float *)&v54;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v45, 0);
          float v37 = v38 * v39;
LABEL_120:
          *(float *)(v43[0] + 4 * (int)v33 * v44 + 4 * v35) = v37;
          break;
        case 1:
          float v36 = *(float *)&v54;
          float v37 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v36 + v36);
          goto LABEL_120;
      }
      ++v35;
      uint64_t v34 = *(int *)(a1 + 8);
      if (v35 < v34) {
        continue;
      }
      break;
    }
    int v32 = *(_DWORD *)(a1 + 12);
LABEL_123:
    if (++v33 < v32) {
      continue;
    }
    break;
  }
LABEL_124:
  int v40 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  if (v40 != kaldi::MatrixBase<float>::NumRows((uint64_t)v43)
    || (int v41 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104)),
        v41 != kaldi::MatrixBase<float>::NumCols((uint64_t)v43)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(*(void *)(a1 + 104), (uint64_t)v43);
  kaldi::Matrix<float>::~Matrix((uint64_t)v43);
  if (__p)
  {
    unsigned __int8 v48 = __p;
    operator delete(__p);
  }
  v49[0] = (void **)&v46;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v49);
  if (SHIBYTE(v50[2]) < 0) {
    operator delete(v50[0]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v26);
    if (SHIBYTE(v27) < 0)
    {
      uint64_t v10 = *((void *)&v26 + 1);
      if (*((void *)&v26 + 1) != 15
        || (*(void *)v26 == 0x61526E7261654C3CLL ? (BOOL v11 = *(void *)(v26 + 7) == 0x3E66656F43657461) : (BOOL v11 = 0),
            unint64_t v12 = (float *)(a1 + 168),
            !v11))
      {
        if (*((void *)&v26 + 1) == 18)
        {
          if (*(void *)v26 == 0x6E6569646172473CLL
            && *(void *)(v26 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v26 + 16) == 15973)
          {
            goto LABEL_46;
          }
          uint64_t v10 = *((void *)&v26 + 1);
        }
        if (v10 != 9) {
          goto LABEL_49;
        }
        BOOL v9 = (long long *)v26;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v27) == 9)
      {
        BOOL v9 = &v26;
LABEL_31:
        uint64_t v15 = *(void *)v9;
        int v16 = *((unsigned __int8 *)v9 + 8);
        BOOL v17 = v15 == 0x6461724778614D3CLL && v16 == 62;
        unint64_t v12 = (float *)(a1 + 164);
        if (!v17)
        {
LABEL_49:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v27 >= 0) {
            unint64_t v21 = &v26;
          }
          else {
            unint64_t v21 = (long long *)v26;
          }
          if (v27 >= 0) {
            uint64_t v22 = HIBYTE(v27);
          }
          else {
            uint64_t v22 = *((void *)&v26 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v27) != 15)
      {
        if (HIBYTE(v27) != 18) {
          goto LABEL_49;
        }
        BOOL v7 = (void)v26 == 0x6E6569646172473CLL && *((void *)&v26 + 1) == 0x7079546D726F4E74;
        if (!v7 || (unsigned __int16)v27 != 15973) {
          goto LABEL_49;
        }
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v25 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_42;
      }
      BOOL v18 = (void)v26 == 0x61526E7261654C3CLL && *(void *)((char *)&v26 + 7) == 0x3E66656F43657461;
      unint64_t v12 = (float *)(a1 + 168);
      if (!v18) {
        goto LABEL_49;
      }
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v12);
LABEL_42:
    if (SHIBYTE(v27) < 0) {
      operator delete((void *)v26);
    }
  }
  kaldi::QuantizedMatrix<short>::Read(*(float **)(a1 + 104), a2, a3, a4);
  *(unsigned char *)(a1 + 16) = 0;
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  return kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104));
}

void sub_1B1D3859C()
{
}

void *kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1B1D3867C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::WriteData(void *a1, void *a2, int a3, int a4)
{
  (*(void (**)(void *))(*a1 + 168))(a1);
  char v8 = (int *)a1[13];
  return kaldi::QuantizedMatrix<short>::Write(v8, a2, a3, a4);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1)
{
  int v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  return kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104)) * v2;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetParams(uint64_t a1, void **a2)
{
  int v4 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  uint64_t v5 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104)) * v4;
  kaldi::Vector<float>::Resize(a2, v5, 0);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  BOOL v7 = *a2;
  LODWORD(v8) = v5;
  return kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v7, *(float **)(a1 + 104));
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SetParams(void *a1, char **a2)
{
  (*(void (**)(void *))(*a1 + 176))(a1);
  int v4 = (unsigned int *)a1[13];
  return kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v4, a2);
}

double kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1)
{
  return kaldi::QuantizedMatrixBase<short>::Sum(*(int **)(a1 + 104));
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  uint64_t v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104));
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, v3, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

uint64_t sub_1B1D38898()
{
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v1);
}

void sub_1B1D388B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::Info(kaldi::quasar::Vocab **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*((void (**)(kaldi::quasar::Vocab **, void *, void))*a1 + 21))(a1, v8, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<short>(a1[13]);
  if ((v7 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v10);
}

void sub_1B1D38A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<short>(kaldi::quasar::Vocab *a1)
{
  int v2 = kaldi::quasar::Vocab::VocabSize(a1);
  int v3 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a1);
  memset(v4, 0, sizeof(v4));
  kaldi::Vector<float>::Resize(v4, (v3 * v2), 0);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)v4, (float *)a1);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v4);
  kaldi::Vector<float>::Destroy((uint64_t)v4);
}

void sub_1B1D38B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, "\n  linearity_grad");
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 112));
  if ((v16 & 0x80u) == 0) {
    uint64_t v4 = v15;
  }
  else {
    uint64_t v4 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v5 = v16;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v15[1];
  }
  int v6 = std::string::append(&v17, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v18, ", lr-coef ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v14 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v11 = v14;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  unint64_t v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1B1D38C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void **kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = 1.0;
  return kaldi::CuMatrixBase<float>::AddMatMat<short>(a3, a2, 111, *(kaldi::quasar::Vocab **)(a1 + 104), 112, a4, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::PropagateFnc()
{
}

void **kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  LODWORD(a2) = 1.0;
  return kaldi::CuMatrixBase<float>::AddMatMat<short>(a6, a5, 111, *(kaldi::quasar::Vocab **)(a1 + 104), 111, a2, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  kaldi::QuantizedMatrixBase<short>::Row(*(void *)(a1 + 104), a3, (uint64_t)v7);
  LODWORD(v6) = 1.0;
  kaldi::CuVectorBase<float>::AddMatVec<short>(a4, a2, 111, (uint64_t)v7, v6, 0.0);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  kaldi::QuantizedMatrixBase<short>::Row(*(void *)(a1 + 104), a3, (uint64_t)v5);
  return kaldi::VecVec<float,short>(a2, (uint64_t)v5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  float v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 176) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v11 = *(void *)(a1 + 112);
  *(void *)(*(void *)(v11 + 8 * a5) + 32) = a4;
  uint64_t v12 = *(void *)(v11 + 8 * a5);
  kaldi::CuMatrixBase<float>::AddMatMat(v12, a3, CblasTrans, a2, CblasNoTrans, 1.0, v10);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    int v2 = *(_DWORD *)(a1 + 80);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 112), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 136), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 176), v3);
    *(unsigned char *)(a1 + 224) = 1;
  }
}

void sub_1B1D39014(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 164) = a3;
  *(_DWORD *)(result + 160) = a2;
  *(unsigned char *)(result + 224) = 0;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  int v3 = *(_DWORD *)(a1 + 160);
  if (v3 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0) {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(void *)(*(void *)(a1 + 112) + 8 * a2), *(void *)(a1 + 136) + 48 * a2, a3);
    }
  }
  else if (v3 == 2)
  {
    if (a3 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        a3 = (float)*(int *)(*(void *)(a1 + 176) + 4 * a2) * a3;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(void *)(*(void *)(a1 + 112) + 8 * a2), (int *)(*(void *)(a1 + 136) + 48 * a2), a3);
    }
  }
  else if (v3 == 1 && a3 > 0.0)
  {
    if (*(unsigned char *)(a1 + 84)) {
      a3 = (float)*(int *)(*(void *)(a1 + 176) + 4 * a2) * a3;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(void *)(*(void *)(a1 + 112) + 8 * a2), a3);
  }
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 200);
  unint64_t v3 = *(void *)(a1 + 208) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  ((void (*)(uint64_t **, uint64_t, uint64_t, void, void))(*v8)[29])(v8, a2, a3, 0, 0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  kaldi::VectorBase<float>::CopyRowsFromMat(a4, *v8[14]);
  float v10 = (uint64_t (*)(uint64_t **))(*v8)[1];
  return v10(v8);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SetLinearity(uint64_t a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104));
  uint64_t v4 = *(void *)(a1 + 104);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(v4, a2);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  int v6 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  *a3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 104)) * v6;
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 120) - v7;
  if (v8)
  {
    if (*(_DWORD *)(a1 + 80) == 1) {
      int v9 = 0;
    }
    else {
      int v9 = *(_DWORD *)(a1 + 80);
    }
    if ((v8 >> 3) - 1 != v9)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v7 + 8 * v9));
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A49E88;
  *(void *)(a1 + 88) = &unk_1F0A49FC0;
  *(void *)(a1 + 96) = &unk_1F0A49FE8;
  operator new();
}

void sub_1B1D395C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v4, 0x1081C40CC61A6CELL);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v1, (uint64_t)"Performing  vectorization of linear component", 45);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v1);
    }
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(&v1, "Weights are already vectorized");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v1);
}

void sub_1B1D3993C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub()
{
}

void sub_1B1D39A24(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C404B8BC54CLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  float v7 = *(float *)(a1 + 64);
  float v6 = *(float *)(a1 + 68);
  float v8 = *(float *)(a1 + 72);
  int v9 = *(_DWORD *)(a1 + 76);
  *(void *)(*(void *)(a1 + 104) + 32) = a2;
  uint64_t v10 = *(unsigned int *)(a1 + 80);
  if (a3 >= 0) {
    int v11 = a3;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 80);
  }
  if (v10 == 1) {
    int v12 = 0;
  }
  else {
    int v12 = v11;
  }
  uint64_t v13 = *(uint64_t **)(a1 + 112);
  unint64_t v14 = v12;
  *(void *)(v13[v12] + 32) = a2;
  *(void *)(*(void *)(a1 + 136) + 48 * v12 + 32) = a2;
  if (v12 == v10)
  {
    kaldi::CuMatrixBase<float>::AddMat(v13[v12], *v13, 111, 1.0, 0.0);
    if (*(int *)(a1 + 80) > 1)
    {
      uint64_t v15 = 1;
      do
        kaldi::CuMatrixBase<float>::AddMat(*(void *)(*(void *)(a1 + 112) + 8 * v14), *(void *)(*(void *)(a1 + 112) + 8 * v15++), 111, 1.0, 1.0);
      while (v15 < *(int *)(a1 + 80));
    }
    unsigned __int8 v16 = *(int **)(a1 + 176);
    v16[v14] = 0;
    if ((int)v10 >= 1)
    {
      int v17 = 0;
      std::string v18 = v16;
      do
      {
        int v19 = *v18++;
        v17 += v19;
        v16[v14] = v17;
        --v10;
      }
      while (v10);
    }
  }
  float v20 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 84)) {
    float v20 = v20 / (float)*(int *)(*(void *)(a1 + 176) + 4 * v14);
  }
  uint64_t v21 = *(void *)(a1 + 200);
  if (v14 >= (*(void *)(a1 + 208) - v21) >> 2)
  {
    LODWORD(v24[0]) = 2143289344;
    std::vector<float>::resize(a1 + 200, (int)v14 + 1, v24);
    uint64_t v21 = *(void *)(a1 + 200);
  }
  *(float *)(v21 + 4 * v14) = v20;
  if (*(float *)(a1 + 164) >= 0.0) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)a1 + 248))(a1, v14);
  }
  if (v7 != 0.0) {
    kaldi::CuMatrixBase<float>::AddMat(*(void *)(a1 + 104), *(void *)(a1 + 104), 111, (float)-(float)(v20 * v7) * (float)*(int *)(*(void *)(a1 + 176) + 4 * v14), 1.0);
  }
  if (v6 != 0.0) {
    kaldi::cu::RegularizeL1<float>(*(void *)(a1 + 104), *(void *)(*(void *)(a1 + 112) + 8 * v14), (float)(v6 * v20) * (float)*(int *)(*(void *)(a1 + 176) + 4 * v14), v20);
  }
  if (v8 > 0.0)
  {
    if (*(int *)(a1 + 80) >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
    if (*(void *)(a1 + 240) == *(void *)(a1 + 232))
    {
      kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(void *)(*(void *)(a1 + 112)+ 8 * ((((*(void *)(a1 + 120) - *(void *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
    }
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 232), v9, v8);
  }
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::ApplyCorr(a1, v14, v20);
  uint64_t v22 = *(unsigned char **)(a1 + 176);
  if (v14 == *(_DWORD *)(a1 + 80))
  {
    uint64_t v23 = *(unsigned char **)(a1 + 184);
    if (v22 != v23) {
      bzero(v22, ((v23 - v22 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v22[4 * v14] = 0;
  }
}

uint64_t kaldi::nnet1::QuantizerResidualAggregator::Quantize(kaldi::nnet1::QuantizerResidualAggregator *this, int a2, float a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = *(void *)this;
  do
  {
    uint64_t result = kaldi::nnet1::QuantizerResidualAggregator::AddCorrectionToResidualAndQuantize(a2, *((void *)this + 3) + v7, v9 + v6, *((void *)this + 6) + v7, a3);
    ++v8;
    uint64_t v9 = *(void *)this;
    v7 += 40;
    v6 += 48;
  }
  while (v8 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4));
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetType()
{
  return 258;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 259;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 260;
}

void kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(void **this)
{
  uint64_t v2 = this + 6;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 3;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 40;
      uint64_t v7 = v4 - 40;
      unint64_t v8 = v4 - 40;
      do
      {
        uint64_t v9 = *(void *)v8;
        v8 -= 40;
        (*(void (**)(char *))(v9 + 16))(v7);
        v6 -= 40;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v13 = v10;
  unint64_t v14 = &v10[48 * v4];
  unsigned __int8 v16 = &v10[48 * v9];
  kaldi::CuMatrix<float>::CuMatrix(v14, a2, 111);
  uint64_t v15 = v14 + 48;
  std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1D39FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::CuSubMatrix<float>>::__push_back_slow_path<kaldi::CuSubMatrix<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  void v15[3] = &v10[40 * v9];
  uint64_t v12 = *(void *)(a2 + 32);
  *((void *)v11 + 1) = *(void *)(a2 + 8);
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((void *)v11 + 4) = v12;
  *(void *)uint64_t v11 = &unk_1F0A472A0;
  v15[2] = v11 + 40;
  std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1D3A118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuSubMatrix<float>>,std::reverse_iterator<kaldi::CuSubMatrix<float>*>,std::reverse_iterator<kaldi::CuSubMatrix<float>*>,std::reverse_iterator<kaldi::CuSubMatrix<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuSubMatrix<float>>,std::reverse_iterator<kaldi::CuSubMatrix<float>*>,std::reverse_iterator<kaldi::CuSubMatrix<float>*>,std::reverse_iterator<kaldi::CuSubMatrix<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = *(void *)(a3 + v7 - 8);
      *(void *)(v8 - 32) = *(void *)(a3 + v7 - 32);
      __n128 result = *(__n128 *)(a3 + v7 - 24);
      *(__n128 *)(v8 - 24) = result;
      *(void *)(v8 - 8) = v9;
      *(void *)(v8 - 40) = &unk_1F0A472A0;
      v7 -= 40;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(i - 40);
    *(void *)(a1 + 16) = i - 40;
    (*(void (**)(void))(v4 + 16))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t kaldi::nnet1::QuantizerResidualAggregator::AddCorrectionToResidualAndQuantize(int a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  kaldi::CuMatrixBase<float>::AddMat(a3, a2, 111, 1.0, 1.0);
  if (a1)
  {
    if (a1 != 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Wrong quantizer type (neither ", 30);
      BOOL v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" nor ", 5);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"): ", 4);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    return kaldi::Quant3Levels<float>(a3, a4, a5);
  }
  else
  {
    return kaldi::ZeroSmallValues<float>(a3, a4, a5);
  }
}

void std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    __n128 result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 24))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t kaldi::CuSubMatrix<float>::CuSubMatrix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1F0A472A0;
  int v5 = *(_DWORD *)(a2 + 20);
  int v6 = *(_DWORD *)(a2 + 16) * v5;
  if (*(_DWORD *)(a3 + 16) < v6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Insufficient storage area: ", 27);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" needed: ", 9);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  uint64_t v8 = *(void *)(a3 + 8);
  v12[0] = &unk_1F0A472D0;
  v12[1] = v8;
  void v12[2] = v6;
  uint64_t v12[3] = *(void *)(a3 + 24);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v13, (uint64_t)v12, v5);
  if (v13 != (_OWORD *)a1)
  {
    *(void *)(a1 + 8) = *((void *)&v13[0] + 1);
    *(_OWORD *)(a1 + 16) = v13[1];
    *(void *)(a1 + 32) = *(void *)&v13[2];
  }
  *(void *)&v13[0] = &unk_1F0A472A0;
  memset((char *)v13 + 8, 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v13);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a1, a2, 111);
  int v9 = *(_DWORD *)(a3 + 16) - v6;
  *(void *)(a3 + 8) += 4 * v6;
  *(_DWORD *)(a3 + 16) = v9;
  *(void *)(a3 + 24) = 0;
  return a1;
}

void sub_1B1D3A5F8(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B1D3A680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1D3A6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      kaldi::CuMatrix<float>::CuMatrix(a4 + v7, a2 + v7, 111);
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1D3A78C(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4A010;
  *(void *)(a1 + 88) = &unk_1F0A4A148;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = &unk_1F0A4A170;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v8 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(unsigned char *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  if (*(void *)(a2 + 104)) {
    operator new();
  }
  uint64_t v10 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  if (v9 != v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(a2 + 112);
      if (*(void *)(v13 + 8 * v12)) {
        kaldi::NewCuSubOrMat<float>(*(void *)(v13 + (v11 >> 29)), *(unsigned __int8 *)(a1 + 16));
      }
      ++v12;
      v11 += 0x100000000;
    }
    while (v12 < (v9 - v10) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(void *)(*(void *)(a1 + 112)+ 8 * ((((*(void *)(a1 + 120) - *(void *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1B1D3AB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, quasar::Bitmap *a9, quasar::Bitmap *a10, uint64_t *a11, uint64_t a12)
{
  MEMORY[0x1B3EA8670](v13, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v16);
  std::string v18 = *v15;
  if (*v15)
  {
    *((void *)v12 + 26) = v18;
    operator delete(v18);
  }
  int v19 = *v14;
  if (*v14)
  {
    *((void *)v12 + 23) = v19;
    operator delete(v19);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a11, 0);
  quasar::Bitmap::~Bitmap(a9);
  quasar::Bitmap::~Bitmap(a10);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4A198;
  *(void *)(a1 + 88) = &unk_1F0A4A2D0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = &unk_1F0A4A2F8;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v8 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(unsigned char *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  if (*(void *)(a2 + 104)) {
    operator new();
  }
  uint64_t v10 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  if (v9 != v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(a2 + 112);
      if (*(void *)(v13 + 8 * v12)) {
        kaldi::NewCuSubOrMat<float>(*(void *)(v13 + (v11 >> 29)), *(unsigned __int8 *)(a1 + 16));
      }
      ++v12;
      v11 += 0x100000000;
    }
    while (v12 < (v9 - v10) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(void *)(*(void *)(a1 + 112)+ 8 * ((((*(void *)(a1 + 120) - *(void *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1B1D3AF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, quasar::Bitmap *a9, quasar::Bitmap *a10, uint64_t *a11, uint64_t a12)
{
  MEMORY[0x1B3EA8670](v13, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v16);
  std::string v18 = *v15;
  if (*v15)
  {
    *((void *)v12 + 26) = v18;
    operator delete(v18);
  }
  int v19 = *v14;
  if (*v14)
  {
    *((void *)v12 + 23) = v19;
    operator delete(v19);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a11, 0);
  quasar::Bitmap::~Bitmap(a9);
  quasar::Bitmap::~Bitmap(a10);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::Matrix<float>::Matrix<float>(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v6 = *(_DWORD *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 20);
  if (a3 == 111) {
    unsigned int v8 = *(_DWORD *)(a2 + 20);
  }
  else {
    unsigned int v8 = *(_DWORD *)(a2 + 16);
  }
  if (a3 == 111) {
    int v9 = v6;
  }
  else {
    int v9 = v7;
  }
  kaldi::Matrix<float>::Init(a1, v8, v9, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>(a2, (int *)a1, a3);
  return a1;
}

void sub_1B1D3B060(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v13;
    uint64_t v15 = &v13[8 * v10];
    int v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    unsigned __int8 v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<kaldi::CuMatrixBase<float>>>::~__split_buffer(&v14);
  }
}

void sub_1B1D3B164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<kaldi::CuMatrixBase<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CuMatrixBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CuMatrixBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuMatrixBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuMatrixBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuMatrixBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuMatrixBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 24))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<kaldi::CuMatrixBase<float>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      void v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 24))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4A198;
  *(void *)(a1 + 88) = &unk_1F0A4A2D0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = &unk_1F0A4A2F8;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v8 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(unsigned char *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  if (*(void *)(a2 + 104)) {
    operator new();
  }
  uint64_t v10 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  if (v9 != v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(a2 + 112);
      if (*(void *)(v13 + 8 * v12)) {
        kaldi::NewCuSubOrMat<float>(*(void *)(v13 + (v11 >> 29)), *(unsigned __int8 *)(a1 + 16));
      }
      ++v12;
      v11 += 0x100000000;
    }
    while (v12 < (v9 - v10) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(void *)(*(void *)(a1 + 112)+ 8 * ((((*(void *)(a1 + 120) - *(void *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1B1D3B790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, quasar::Bitmap *a9, quasar::Bitmap *a10, uint64_t *a11, uint64_t a12)
{
  MEMORY[0x1B3EA8670](v13, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v16);
  uint64_t v18 = *v15;
  if (*v15)
  {
    *((void *)v12 + 26) = v18;
    operator delete(v18);
  }
  int v19 = *v14;
  if (*v14)
  {
    *((void *)v12 + 23) = v19;
    operator delete(v19);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a11, 0);
  quasar::Bitmap::~Bitmap(a9);
  quasar::Bitmap::~Bitmap(a10);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4A010;
  *(void *)(a1 + 88) = &unk_1F0A4A148;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = &unk_1F0A4A170;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v8 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(unsigned char *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  if (*(void *)(a2 + 104)) {
    operator new();
  }
  uint64_t v10 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  if (v9 != v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(a2 + 112);
      if (*(void *)(v13 + 8 * v12)) {
        kaldi::NewCuSubOrMat<float>(*(void *)(v13 + (v11 >> 29)), *(unsigned __int8 *)(a1 + 16));
      }
      ++v12;
      v11 += 0x100000000;
    }
    while (v12 < (v9 - v10) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(void *)(*(void *)(a1 + 112)+ 8 * ((((*(void *)(a1 + 120) - *(void *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1B1D3BC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, quasar::Bitmap *a9, quasar::Bitmap *a10, uint64_t *a11, uint64_t a12)
{
  MEMORY[0x1B3EA8670](v13, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v16);
  uint64_t v18 = *v15;
  if (*v15)
  {
    *((void *)v12 + 26) = v18;
    operator delete(v18);
  }
  int v19 = *v14;
  if (*v14)
  {
    *((void *)v12 + 23) = v19;
    operator delete(v19);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a11, 0);
  quasar::Bitmap::~Bitmap(a9);
  quasar::Bitmap::~Bitmap(a10);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

uint64_t fst::BitmapIndex::Rank1(fst::BitmapIndex *this, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  FstCheck(*((void *)this + 1) >= a2, "(end) <= (Bits())", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libkaldi/tools/openfst/src/extensions/ngram/bitmap-index.cc");
  uint64_t v4 = ((a2 - 1) >> 6);
  if (((a2 - 1) >> 6))
  {
    int v5 = *(unsigned __int16 *)(*((void *)this + 5) + 2 * (v4 - 1));
    if ((v4 - 1) >= 0x3FF) {
      v5 += *(_DWORD *)(*((void *)this + 2) + 4 * (((int)v4 - 1) / 0x3FFu - 1));
    }
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)this + 8 * v4);
  unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F);
  if ((a2 & 0x3F) == 0) {
    unint64_t v8 = -1;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(v7 & v8));
  v9.i16[0] = vaddlv_u8(v9);
  return (v5 + v9.i32[0]);
}

uint64_t fst::BitmapIndex::Select1(fst::BitmapIndex *this, unint64_t a2)
{
  uint64_t result = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 2);
  unint64_t v5 = (unint64_t)(((((unint64_t)(result + 63) >> 6) + 1022) * (unsigned __int128)0x802008020080201uLL) >> 64) >> 5;
  int v6 = (_DWORD *)(v4 + 4 * v5);
  if (*(v6 - 1) > a2)
  {
    if ((unint64_t)(result + 63) >= 0x40)
    {
      int v6 = (_DWORD *)*((void *)this + 2);
      do
      {
        unint64_t v7 = v5 >> 1;
        unint64_t v8 = &v6[v5 >> 1];
        unsigned int v10 = *v8;
        uint8x8_t v9 = v8 + 1;
        v5 += ~(v5 >> 1);
        if (v10 <= a2) {
          int v6 = v9;
        }
        else {
          unint64_t v5 = v7;
        }
      }
      while (v5);
    }
    unsigned int v11 = a2 + 1;
    uint64_t v12 = ((uint64_t)v6 - v4) >> 2;
    if (v12)
    {
      v11 -= *(_DWORD *)(v4 + 4 * (v12 - 1));
      unsigned int v13 = 1023 * v12;
    }
    else
    {
      unsigned int v13 = 0;
    }
    uint64_t v14 = v13;
    secondary_blocuint64_t k = fst::BitmapIndex::find_secondary_block(this, v13, v11);
    if (secondary_block)
    {
      uint64_t v14 = v13 + secondary_block;
      v11 -= *(unsigned __int16 *)(*((void *)this + 5) + 2 * (v14 - 1));
      v13 += secondary_block;
    }
    unint64_t v16 = *(void *)(*(void *)this + 8 * v14);
    int8x8_t v17 = vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8((uint8x8_t)v17);
    __int32 v18 = v17.i32[0];
    if (v17.i32[0] >= v11) {
      __int32 v18 = 0;
    }
    unsigned int v19 = v11 - v18;
    int v20 = 32 * (v17.i32[0] < v11);
    v17.i32[0] = (unsigned __int16)(v16 >> v20);
    int8x8_t v21 = vcnt_s8(v17);
    v21.i16[0] = vaddlv_u8((uint8x8_t)v21);
    __int32 v22 = v21.i32[0];
    BOOL v23 = v19 > v21.i32[0];
    if (v19 <= v21.i32[0]) {
      __int32 v22 = 0;
    }
    unsigned int v24 = v19 - v22;
    int v25 = v20 | (16 * v23);
    v21.i32[0] = (v16 >> v25);
    uint8x8_t v26 = (uint8x8_t)vcnt_s8(v21);
    v26.i16[0] = vaddlv_u8(v26);
    int v27 = v25 | (8 * (v24 > v26.i32[0]));
    unsigned int v28 = nth_bit_bit_offset[(v16 >> v27)];
    if (v24 > v26.i32[0]) {
      char v29 = ~v26.i8[0];
    }
    else {
      char v29 = -1;
    }
    return (v27 | (v13 << 6)) + ((v28 >> (4 * (v29 + v24))) & 0xF);
  }
  return result;
}

uint64_t fst::BitmapIndex::find_secondary_block(fst::BitmapIndex *this, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = (unint64_t)(*((void *)this + 1) + 63) >> 6;
  if (a2 + 1023 < v3) {
    unint64_t v3 = a2 + 1023;
  }
  uint64_t v4 = *((void *)this + 5);
  unint64_t v5 = (unsigned __int16 *)(v4 + 2 * a2);
  int v6 = (unsigned __int16 *)(v4 + 2 * v3);
  if (v3 != a2)
  {
    unint64_t v7 = v6 - v5;
    int v6 = v5;
    do
    {
      unint64_t v8 = v7 >> 1;
      uint8x8_t v9 = &v6[v7 >> 1];
      unsigned int v11 = *v9;
      unsigned int v10 = v9 + 1;
      v7 += ~(v7 >> 1);
      if (v11 < a3) {
        int v6 = v10;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  return v6 - v5;
}

uint64_t fst::BitmapIndex::Select0(fst::BitmapIndex *this, unint64_t a2)
{
  uint64_t result = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 2);
  if (result
     - (unint64_t)*(unsigned int *)((((unint64_t)(((((unint64_t)(result + 63) >> 6) + 1022)
                                                               * (unsigned __int128)0x802008020080201uLL) >> 64) >> 3) & 0xFFFFFFFFFFFFCLL)
                                         + v4
                                         - 4) > a2)
  {
    unsigned int v5 = a2 + 1;
    inverted_primary_blocuint64_t k = fst::BitmapIndex::find_inverted_primary_block(this, a2 + 1);
    if (inverted_primary_block)
    {
      v5 += -65472 * inverted_primary_block + *(_DWORD *)(v4 + 4 * (inverted_primary_block - 1));
      unsigned int v7 = 1023 * inverted_primary_block;
    }
    else
    {
      unsigned int v7 = 0;
    }
    uint64_t v8 = v7;
    inverted_secondary_blocuint64_t k = fst::BitmapIndex::find_inverted_secondary_block(this, v7, v5);
    if (inverted_secondary_block)
    {
      uint64_t v8 = v7 + inverted_secondary_block;
      unsigned int v5 = v5
         - (inverted_secondary_block << 6)
         + *(unsigned __int16 *)(*((void *)this + 5) + 2 * (v8 - 1));
      v7 += inverted_secondary_block;
    }
    unint64_t v10 = ~*(void *)(*(void *)this + 8 * v8);
    int8x8_t v11 = vcnt_s8((int8x8_t)~*(_DWORD *)(*(void *)this + 8 * v8));
    v11.i16[0] = vaddlv_u8((uint8x8_t)v11);
    __int32 v12 = v11.i32[0];
    if (v11.i32[0] >= v5) {
      __int32 v12 = 0;
    }
    unsigned int v13 = v5 - v12;
    int v14 = 32 * (v11.i32[0] < v5);
    v11.i32[0] = (unsigned __int16)(v10 >> v14);
    int8x8_t v15 = vcnt_s8(v11);
    v15.i16[0] = vaddlv_u8((uint8x8_t)v15);
    __int32 v16 = v15.i32[0];
    BOOL v17 = v13 > v15.i32[0];
    if (v13 <= v15.i32[0]) {
      __int32 v16 = 0;
    }
    unsigned int v18 = v13 - v16;
    int v19 = v14 | (16 * v17);
    v15.i32[0] = (v10 >> v19);
    uint8x8_t v20 = (uint8x8_t)vcnt_s8(v15);
    v20.i16[0] = vaddlv_u8(v20);
    int v21 = v19 | (8 * (v18 > v20.i32[0]));
    unsigned int v22 = nth_bit_bit_offset[(v10 >> v21)];
    if (v18 > v20.i32[0]) {
      char v23 = ~v20.i8[0];
    }
    else {
      char v23 = -1;
    }
    return (v21 | (v7 << 6)) + ((v22 >> (4 * (v23 + v18))) & 0xF);
  }
  return result;
}

uint64_t fst::BitmapIndex::find_inverted_primary_block(fst::BitmapIndex *this, unint64_t a2)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 2);
  unint64_t v3 = (unsigned int *)*((void *)this + 3);
  if (v2 == v3)
  {
    unint64_t v3 = (unsigned int *)*((void *)this + 2);
  }
  else
  {
    uint64_t v4 = (unsigned int *)*((void *)this + 2);
    do
    {
      unsigned int v5 = &v4[(v3 - v4 + (unint64_t)(v3 - v4 < 0)) >> 1];
      if (65472 * (v5 - v2) - (unint64_t)*v5 + 65472 < a2) {
        uint64_t v4 = v5 + 1;
      }
      else {
        unint64_t v3 = &v4[(v3 - v4 + (unint64_t)(v3 - v4 < 0)) >> 1];
      }
    }
    while (v4 != v3);
  }
  return v3 - v2;
}

uint64_t fst::BitmapIndex::find_inverted_secondary_block(fst::BitmapIndex *this, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = (unint64_t)(*((void *)this + 1) + 63) >> 6;
  if (a2 + 1023 < v3) {
    unint64_t v3 = a2 + 1023;
  }
  uint64_t v4 = *((void *)this + 5);
  unsigned int v5 = (unsigned __int16 *)(v4 + 2 * a2);
  int v6 = v5;
  if (v3 != a2)
  {
    int v6 = (unsigned __int16 *)(v4 + 2 * v3);
    unsigned int v7 = (unsigned __int16 *)(v4 + 2 * a2);
    do
    {
      uint64_t v8 = (unsigned __int16 *)((char *)v7 + ((v6 - v7 + (v6 - v7 < 0)) & 0xFFFFFFFFFFFFFFFELL));
      if (32 * ((char *)v8 - (char *)v5) - (unint64_t)*v8 + 64 < a3) {
        unsigned int v7 = v8 + 1;
      }
      else {
        int v6 = (unsigned __int16 *)((char *)v7 + ((v6 - v7 + (v6 - v7 < 0)) & 0xFFFFFFFFFFFFFFFELL));
      }
    }
    while (v7 != v6);
  }
  return v6 - v5;
}

uint64_t fst::BitmapIndex::Select0s(fst::BitmapIndex *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 2);
  unint64_t v3 = *((void *)this + 1)
     - *(unsigned int *)((((unint64_t)(((((unint64_t)(*((void *)this + 1) + 63) >> 6) + 1022)
                                             * (unsigned __int128)0x802008020080201uLL) >> 64) >> 3) & 0xFFFFFFFFFFFFCLL)
                       + v2
                       - 4);
  if (v3 <= a2) {
    return *((void *)this + 1);
  }
  unint64_t v5 = a2 + 1;
  if (a2 + 1 >= v3) {
    return fst::BitmapIndex::Select0(this, a2);
  }
  inverted_primary_blocuint64_t k = fst::BitmapIndex::find_inverted_primary_block(this, a2 + 1);
  unint64_t v7 = 65472 * (inverted_primary_block + 1) - *(unsigned int *)(v2 + 4 * inverted_primary_block);
  if (inverted_primary_block)
  {
    uint64_t v8 = 65472 * inverted_primary_block - *(unsigned int *)(v2 + 4 * (inverted_primary_block - 1));
    v7 -= v8;
    unsigned int v9 = v5 - v8;
    unsigned int v10 = 1023 * inverted_primary_block;
  }
  else
  {
    unsigned int v10 = 0;
    unsigned int v9 = v5;
  }
  uint64_t v12 = v10;
  inverted_secondary_blocuint64_t k = fst::BitmapIndex::find_inverted_secondary_block(this, v10, v9);
  int v14 = inverted_secondary_block << 6;
  unsigned int v15 = v10 + inverted_secondary_block;
  uint64_t v16 = *((void *)this + 5);
  if (inverted_secondary_block)
  {
    int v17 = v14 - *(unsigned __int16 *)(v16 + 2 * (v15 - 1));
    v9 -= v17;
    uint64_t v12 = v10 + inverted_secondary_block;
    v10 += inverted_secondary_block;
  }
  else
  {
    int v17 = 0;
  }
  unint64_t v18 = ~*(void *)(*(void *)this + 8 * v12);
  int8x8_t v19 = vcnt_s8((int8x8_t)~*(_DWORD *)(*(void *)this + 8 * v12));
  v19.i16[0] = vaddlv_u8((uint8x8_t)v19);
  if (v19.i32[0] >= v9) {
    __int32 v20 = 0;
  }
  else {
    __int32 v20 = v19.i32[0];
  }
  unsigned int v21 = v9 - v20;
  char v22 = 32 * (v19.i32[0] < v9);
  v19.i32[0] = (unsigned __int16)(v18 >> v22);
  int8x8_t v23 = vcnt_s8(v19);
  v23.i16[0] = vaddlv_u8((uint8x8_t)v23);
  __int32 v24 = v23.i32[0];
  BOOL v25 = v21 > v23.i32[0];
  if (v21 <= v23.i32[0]) {
    __int32 v24 = 0;
  }
  unsigned int v26 = v21 - v24;
  unsigned __int8 v27 = v22 | (16 * v25);
  v23.i32[0] = (v18 >> v27);
  uint8x8_t v28 = (uint8x8_t)vcnt_s8(v23);
  v28.i16[0] = vaddlv_u8(v28);
  if (v26 > v28.i32[0]) {
    char v29 = ~v28.i8[0];
  }
  else {
    char v29 = -1;
  }
  uint64_t v11 = ((v27 | (8 * (v26 > v28.i32[0]))) & 0x3F | (v10 << 6))
      + ((nth_bit_bit_offset[(v18 >> (v27 | (8 * (v26 > v28.i32[0]))))] >> (4 * (v29 + v26))) & 0xF);
  unint64_t v30 = v9 + 1;
  if (v7 <= v30)
  {
    fst::BitmapIndex::Select0(this, v5);
  }
  else if (v14 - v17 - *(unsigned __int16 *)(v16 + 2 * v15) + 64 < v30)
  {
    do
      ++v10;
    while (*(void *)(*(void *)this + 8 * v10) == -1);
  }
  return v11;
}

void fst::BitmapIndex::BuildIndex(fst::BitmapIndex *this, const unint64_t *a2, uint64_t a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  uint64_t v4 = (uint64_t *)((char *)this + 16);
  std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 16), (unint64_t)(((((unint64_t)(a3 + 63) >> 6) + 1022) * (unsigned __int128)0x802008020080201uLL) >> 64) >> 5);
  std::vector<unsigned short>::resize((uint64_t)this + 40, (unint64_t)(*((void *)this + 1) + 63) >> 6);
  uint64_t v5 = *((void *)this + 1);
  if ((unint64_t)(v5 + 63) >= 0x40)
  {
    unsigned int v6 = 0;
    unsigned int v7 = 0;
    int v8 = 0;
    unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    uint64_t v11 = *v4;
    do
    {
      unint64_t v12 = v6 + 1023;
      if (v9 >= v12) {
        unsigned int v13 = v6 + 1023;
      }
      else {
        unsigned int v13 = v9;
      }
      if (v6 >= v13)
      {
        int v14 = 0;
      }
      else
      {
        int v14 = 0;
        uint64_t v15 = v9 - 1 - v6;
        uint64_t v16 = (uint64_t *)(*(void *)this + 8 * v6);
        int v17 = (_WORD *)(*((void *)this + 5) + 2 * v6);
        do
        {
          uint64_t v19 = *v16++;
          uint64_t v18 = v19;
          if (v15) {
            uint64_t v20 = -1;
          }
          else {
            uint64_t v20 = v10;
          }
          uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)(v18 & v20));
          v21.i16[0] = vaddlv_u8(v21);
          v14 += v21.i32[0];
          *v17++ = v14;
          --v15;
          --v13;
        }
        while (v6 != v13);
      }
      v8 += v14;
      *(_DWORD *)(v11 + 4 * v7++) = v8;
      v6 += 1023;
    }
    while (v9 > v12);
  }
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  unsigned int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unsigned int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    int v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v4, v13);
      int v8 = *a1;
      unsigned int v7 = a1[1];
    }
    else
    {
      int v14 = 0;
    }
    uint64_t v15 = &v14[2 * v11];
    uint64_t v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    int v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

id SequoiaLogger(void)
{
  uint64_t v0 = &unk_1E9C2D000;
  {
    uint64_t v0 = (void *)&unk_1E9C2D000;
    if (v3)
    {
      SequoiaLogger(void)::logger = (uint64_t)os_log_create("com.apple.MachineTranslation", "framework");
      uint64_t v0 = (void *)&unk_1E9C2D000;
    }
  }
  uint64_t v1 = (void *)v0[473];
  return v1;
}

void SequoiaLog(os_log_type_t a1, void *a2, const char *a3, ...)
{
  int v3 = SequoiaLogger();
  os_log_with_args();
}

void SequoiaLogError(uint64_t a1, void *a2)
{
  if (*(char *)(a1 + 23) >= 0) {
    unint64_t v2 = (const char *)a1;
  }
  else {
    unint64_t v2 = *(const char **)a1;
  }
  SequoiaLog(OS_LOG_TYPE_ERROR, a2, "%s", v2);
}

uint64_t kaldi::LatticeFasterOnlineDecoder::LatticeFasterOnlineDecoder(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_1B2565910;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a2;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  long long v4 = *a3;
  long long v5 = a3[1];
  long long v6 = a3[2];
  *(void *)(a1 + 240) = *((void *)a3 + 6);
  *(_OWORD *)(a1 + 208) = v5;
  *(_OWORD *)(a1 + 224) = v6;
  *(_OWORD *)(a1 + 192) = v4;
  *(_DWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1, 0x3E8uLL);
  return a1;
}

void sub_1B1D3C978(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  long long v6 = v3;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v5);
  int v8 = *v6;
  if (*v6)
  {
    v1[22] = v8;
    operator delete(v8);
  }
  kaldi::LatticeFasterOnlineDecoder::LatticeFasterOnlineDecoder(v2);
  kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::~HashList(v1);
  _Unwind_Resume(a1);
}

void kaldi::LatticeFasterOnlineDecoder::~LatticeFasterOnlineDecoder(kaldi::LatticeFasterOnlineDecoder *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 != -1)
  {
    uint64_t v3 = *((void *)this + 3);
    do
    {
      uint64_t v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      uint64_t v2 = *v4;
    }
    while (v2 != -1);
  }
  uint64_t v5 = *(void *)this;
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  if (v5)
  {
    uint64_t v6 = *((void *)this + 6);
    do
    {
      uint64_t v7 = v5;
      uint64_t v5 = *(void *)(v5 + 16);
      *(void *)(v7 + 16) = v6;
      uint64_t v6 = v7;
    }
    while (v5);
    *((void *)this + 6) = v7;
  }
  kaldi::LatticeFasterOnlineDecoder::ClearActiveTokens((uint64_t)this);
  if (*((unsigned char *)this + 160))
  {
    uint64_t v8 = *((void *)this + 19);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 256);
  uint64_t v9 = (void *)*((void *)this + 21);
  if (v9)
  {
    *((void *)this + 22) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 16);
  if (v10)
  {
    *((void *)this + 17) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 13);
  if (v11)
  {
    *((void *)this + 14) = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 10);
  if (v12)
  {
    *((void *)this + 11) = v12;
    operator delete(v12);
  }
  kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::~HashList(this);
}

uint64_t kaldi::LatticeFasterOnlineDecoder::DeleteElems(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(result + 48);
    do
    {
      uint64_t v3 = a2;
      a2 = *(void *)(a2 + 16);
      *(void *)(v3 + 16) = v2;
      uint64_t v2 = v3;
    }
    while (a2);
    *(void *)(result + 48) = v3;
  }
  return result;
}

uint64_t kaldi::LatticeFasterOnlineDecoder::ClearActiveTokens(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v3 = *(void *)(this + 80);
  uint64_t v2 = *(void *)(this + 88);
  if (v2 == v3)
  {
    uint64_t v3 = *(void *)(this + 88);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 16 * v4);
      if (v5)
      {
        do
        {
          uint64_t v6 = *(void *)(v5 + 8);
          if (v6)
          {
            do
            {
              uint64_t v7 = *(void *)(v6 + 24);
              MEMORY[0x1B3EA8670]();
              uint64_t v6 = v7;
            }
            while (v7);
          }
          *(void *)(v5 + 8) = 0;
          uint64_t v8 = *(void *)(v5 + 16);
          this = MEMORY[0x1B3EA8670](v5, 0x1020C405E66F15BLL);
          --*(_DWORD *)(v1 + 248);
          uint64_t v5 = v8;
        }
        while (v8);
        uint64_t v3 = *(void *)(v1 + 80);
        uint64_t v2 = *(void *)(v1 + 88);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 4);
  }
  *(void *)(v1 + 88) = v3;
  return this;
}

void kaldi::LatticeFasterOnlineDecoder::InitDecoding(kaldi::LatticeFasterOnlineDecoder *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 != -1)
  {
    uint64_t v3 = *((void *)this + 3);
    do
    {
      unint64_t v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      uint64_t v2 = *v4;
    }
    while (v2 != -1);
  }
  uint64_t v5 = *(void *)this;
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  if (v5)
  {
    uint64_t v6 = *((void *)this + 6);
    do
    {
      uint64_t v7 = v5;
      uint64_t v5 = *(void *)(v5 + 16);
      *(void *)(v7 + 16) = v6;
      uint64_t v6 = v7;
    }
    while (v5);
    *((void *)this + 6) = v7;
  }
  *((void *)this + 22) = *((void *)this + 21);
  kaldi::LatticeFasterOnlineDecoder::ClearActiveTokens((uint64_t)this);
  *((_WORD *)this + 126) = 0;
  *((_DWORD *)this + 62) = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)this + 32);
  (*(void (**)(void))(**((void **)this + 19) + 24))(*((void *)this + 19));
  std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::resize((uint64_t)this + 80, 1uLL);
  operator new();
}

void std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::__append((char **)a1, a2 - v2);
  }
}

void kaldi::LatticeFasterOnlineDecoder::ProcessNonemitting(kaldi::LatticeFasterOnlineDecoder *this)
{
  uint64_t v2 = (*((void *)this + 11) - *((void *)this + 10)) >> 4;
  unint64_t v4 = (void **)((char *)this + 104);
  uint64_t v3 = (char *)*((void *)this + 13);
  uint64_t v5 = *(void *)this;
  if (!*(void *)this)
  {
    float v7 = INFINITY;
LABEL_26:
    if (*((unsigned char *)this + 252)) {
      return;
    }
    __int16 v18 = v3;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Error, no surviving tokens: frame is ", 37);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      __int16 v18 = (char *)*((void *)this + 13);
      uint64_t v3 = (char *)*((void *)this + 14);
    }
    *((unsigned char *)this + 252) = 1;
    goto LABEL_30;
  }
  uint64_t v6 = (void *)((char *)this + 120);
  float v7 = INFINITY;
  do
  {
    if ((unint64_t)v3 >= *v6)
    {
      uint64_t v8 = (char *)*v4;
      uint64_t v9 = (v3 - (unsigned char *)*v4) >> 2;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = *v6 - (void)v8;
      if (v11 >> 1 > v10) {
        unint64_t v10 = v11 >> 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 120, v12);
        uint64_t v8 = (char *)*((void *)this + 13);
        uint64_t v3 = (char *)*((void *)this + 14);
      }
      else
      {
        uint64_t v13 = 0;
      }
      int v14 = &v13[4 * v9];
      *(_DWORD *)int v14 = *(_DWORD *)v5;
      uint64_t v15 = v14 + 4;
      while (v3 != v8)
      {
        int v16 = *((_DWORD *)v3 - 1);
        v3 -= 4;
        *((_DWORD *)v14 - 1) = v16;
        v14 -= 4;
      }
      *((void *)this + 13) = v14;
      *((void *)this + 14) = v15;
      *((void *)this + 15) = &v13[4 * v12];
      if (v8) {
        operator delete(v8);
      }
      uint64_t v3 = v15;
    }
    else
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v5;
      v3 += 4;
    }
    *((void *)this + 14) = v3;
    int v17 = *(float **)(v5 + 8);
    uint64_t v5 = *(void *)(v5 + 16);
    if (*v17 < v7) {
      float v7 = *v17;
    }
  }
  while (v5);
  __int16 v18 = (char *)*v4;
  if (*v4 == v3) {
    goto LABEL_26;
  }
LABEL_30:
  if (v18 == v3) {
    return;
  }
  float v19 = v7 + *((float *)this + 48);
  do
  {
    unint64_t v21 = *((int *)v3 - 1);
    v3 -= 4;
    unint64_t v20 = v21;
    *((void *)this + 14) = v3;
    uint64_t v22 = *((void *)this + 3);
    uint64_t v23 = *(void *)(v22 + 16 * (v21 % *((void *)this + 2)));
    __int32 v24 = this;
    if (v23 != -1) {
      __int32 v24 = (kaldi::LatticeFasterOnlineDecoder *)(*(void *)(v22 + 16 * v23 + 8) + 16);
    }
    for (uint64_t i = *(void *)v24; *(_DWORD *)i != v20; uint64_t i = *(void *)(i + 16))
      ;
    unsigned int v26 = *(Token **)(i + 8);
    float v27 = *(float *)v26->tokenName.__r_.__value_.var0.var0.__data_;
    if (*(float *)v26->tokenName.__r_.__value_.var0.var0.__data_ > v19) {
      continue;
    }
    unint64_t size = v26->tokenName.__r_.__value_.var0.var1.__size_;
    if (size)
    {
      do
      {
        unint64_t v29 = *(void *)(size + 24);
        MEMORY[0x1B3EA8670]();
        unint64_t size = v29;
      }
      while (v29);
    }
    v26->tokenName.__r_.__value_.var0.var1.__size_ = 0;
    uint64_t v30 = *((void *)this + 19);
    unint64_t v36 = 0;
    (*(void (**)(uint64_t, unint64_t, void *))(*(void *)v30 + 136))(v30, v20, v34);
    while (1)
    {
      if (!v34[0])
      {
        if (v36 >= v34[2]) {
          goto LABEL_55;
        }
LABEL_46:
        uint64_t v31 = v34[1] + 16 * v36;
        goto LABEL_47;
      }
      if ((*(unsigned int (**)(void))(*(void *)v34[0] + 24))(v34[0])) {
        break;
      }
      if (!v34[0]) {
        goto LABEL_46;
      }
      uint64_t v31 = (*(uint64_t (**)(void))(*(void *)v34[0] + 32))();
LABEL_47:
      if (!*(_DWORD *)v31)
      {
        float v32 = v27 + *(float *)(v31 + 8);
        if (v32 < v19)
        {
          BOOL v33 = 0;
          kaldi::LatticeFasterOnlineDecoder::FindOrAddToken(this, *(_DWORD *)(v31 + 12), v2 - 1, v32, v26, &v33);
          operator new();
        }
      }
      if (v34[0]) {
        (*(void (**)(void))(*(void *)v34[0] + 40))(v34[0]);
      }
      else {
        ++v36;
      }
    }
    if (v34[0])
    {
      (*(void (**)(void))(*(void *)v34[0] + 8))();
      goto LABEL_57;
    }
LABEL_55:
    if (v35) {
      --*v35;
    }
LABEL_57:
    __int16 v18 = (char *)*((void *)this + 13);
    uint64_t v3 = (char *)*((void *)this + 14);
  }
  while (v18 != v3);
}

void sub_1B1D3D244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::LatticeFasterOnlineDecoder::ProcessEmitting(kaldi::LatticeFasterOnlineDecoder *this, kaldi::DecodableInterface *a2)
{
  unint64_t v4 = (char *)this + 80;
  uint64_t v5 = *((void *)this + 11) - *((void *)this + 10);
  uint64_t v6 = v5 >> 4;
  std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::resize((uint64_t)this + 80, (v5 >> 4) + 1);
  uint64_t v8 = *((void *)v4 - 9);
  if (v8 != -1)
  {
    uint64_t v9 = *((void *)this + 3);
    do
    {
      unint64_t v10 = (uint64_t *)(v9 + 16 * v8);
      v10[1] = 0;
      uint64_t v8 = *v10;
    }
    while (v8 != -1);
  }
  uint64_t v11 = *(unsigned int **)this;
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  int v45 = 0;
  float v44 = 0.0;
  unint64_t v43 = 0;
  float v12 = kaldi::GetCutoffHelper<kaldi::LatticeFasterOnlineDecoder,kaldi::LatticeFasterDecoderConfig,kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::Elem>(this, (uint64_t)this + 192, (uint64_t)v11, &v43, &v44, &v45, 1, v7);
  unint64_t v13 = (unint64_t)(float)(*((float *)this + 56) * (float)v43);
  if (*((void *)this + 2) < v13) {
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize((uint64_t)this, v13);
  }
  if (!v45)
  {
    float v16 = 0.0;
    float v18 = INFINITY;
    goto LABEL_35;
  }
  uint64_t v14 = *v45;
  uint64_t v15 = (float *)*((void *)v45 + 1);
  float v16 = -*v15;
  uint64_t v17 = *((void *)this + 19);
  unint64_t v42 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v17 + 136))(v17, v14, &v38);
  float v18 = INFINITY;
  while (1)
  {
    if (!v38)
    {
      if (v42 >= v40) {
        goto LABEL_32;
      }
      goto LABEL_13;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v38 + 24))(v38)) {
      break;
    }
    if (v38)
    {
      uint64_t v19 = (*(uint64_t (**)(void))(*(void *)v38 + 32))();
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v19 = v39 + 16 * v42;
LABEL_14:
    if (*(_DWORD *)v19)
    {
      int v20 = *(_DWORD *)(v19 + 4);
      float v21 = *(float *)(v19 + 8);
      (**(void (***)(kaldi::DecodableInterface *, void))a2)(a2, (v6 - 1));
      float v23 = NAN;
      if (v21 != -INFINITY)
      {
        float v24 = v16 - v22;
        if (v24 != -INFINITY)
        {
          float v23 = INFINITY;
          BOOL v25 = v24 == INFINITY || v21 == INFINITY;
          float v26 = v21 + v24;
          if (!v25) {
            float v23 = v26;
          }
        }
      }
      if (v20) {
        float v27 = *((float *)this + 57);
      }
      else {
        float v27 = 0.0;
      }
      float v28 = (float)((float)(v23 + *v15) + v27) + v44;
      if (v28 < v18) {
        float v18 = v28;
      }
    }
    if (v38) {
      (*(void (**)(uint64_t))(*(void *)v38 + 40))(v38);
    }
    else {
      ++v42;
    }
  }
  if (v38)
  {
    (*(void (**)(void))(*(void *)v38 + 8))();
    goto LABEL_35;
  }
LABEL_32:
  if (v41) {
    --*v41;
  }
LABEL_35:
  LODWORD(v38) = 0;
  std::vector<float>::resize((uint64_t)this + 168, (int)(v5 >> 4), &v38);
  *(float *)(*((void *)this + 21) + 4 * ((int)v6 - 1)) = v16;
  if (!v11) {
    return;
  }
  while (2)
  {
    unint64_t v29 = (Token *)*((void *)v11 + 1);
    float v30 = *(float *)v29->tokenName.__r_.__value_.var0.var0.__data_;
    if (*(float *)v29->tokenName.__r_.__value_.var0.var0.__data_ > v12) {
      goto LABEL_57;
    }
    uint64_t v31 = *v11;
    uint64_t v32 = *((void *)this + 19);
    unint64_t v42 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, float))(*(void *)v32 + 136))(v32, v31, &v38, v30);
    while (2)
    {
      if (!v38)
      {
        if (v42 >= v40) {
          goto LABEL_55;
        }
        goto LABEL_43;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v38 + 24))(v38))
      {
        if (v38)
        {
          uint64_t v33 = (*(uint64_t (**)(void))(*(void *)v38 + 32))();
          goto LABEL_44;
        }
LABEL_43:
        uint64_t v33 = v39 + 16 * v42;
LABEL_44:
        if (*(_DWORD *)v33)
        {
          (**(void (***)(kaldi::DecodableInterface *, void))a2)(a2, (v6 - 1));
          float v35 = *(_DWORD *)(v33 + 4) ? *((float *)this + 57) : 0.0;
          float v36 = (float)((float)(v16 - v34) + *(float *)v29->tokenName.__r_.__value_.var0.var0.__data_)
              + (float)(*(float *)(v33 + 8) + v35);
          if (v36 <= v18)
          {
            kaldi::LatticeFasterOnlineDecoder::FindOrAddToken(this, *(_DWORD *)(v33 + 12), v6, v36, v29, 0);
            operator new();
          }
        }
        if (v38) {
          (*(void (**)(uint64_t))(*(void *)v38 + 40))(v38);
        }
        else {
          ++v42;
        }
        continue;
      }
      break;
    }
    if (v38)
    {
      (*(void (**)(void))(*(void *)v38 + 8))();
      goto LABEL_57;
    }
LABEL_55:
    if (v41) {
      --*v41;
    }
LABEL_57:
    float v37 = (unsigned int *)*((void *)v11 + 2);
    *((void *)v11 + 2) = *((void *)this + 6);
    *((void *)this + 6) = v11;
    uint64_t v11 = v37;
    if (v37) {
      continue;
    }
    break;
  }
}

void sub_1B1D3D81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  else if (a12)
  {
    --*a12;
  }
  _Unwind_Resume(exception_object);
}

void kaldi::LatticeFasterOnlineDecoder::FinalizeDecoding(kaldi::LatticeFasterOnlineDecoder *this)
{
  uint64_t v2 = (*((void *)this + 11) - *((void *)this + 10)) >> 4;
  kaldi::LatticeFasterOnlineDecoder::PruneForwardLinksFinal(this);
  if ((int)v2 - 1 >= 1)
  {
    do
    {
      kaldi::LatticeFasterOnlineDecoder::PruneForwardLinks(this, v2 - 2, (BOOL *)v4, &v5, 0.0);
      kaldi::LatticeFasterOnlineDecoder::PruneTokensForFrame(this, v2 - 1);
      LODWORD(v2) = v2 - 1;
    }
    while (v2 > 1);
  }
  kaldi::LatticeFasterOnlineDecoder::PruneTokensForFrame(this, 0);
  if (kaldi::g_kaldi_verbose_level > 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4, 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"pruned tokens from ", 19);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4);
  }
}

void sub_1B1D3D978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL kaldi::LatticeFasterOnlineDecoder::GetRawLattice(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = *(unsigned __int8 *)(a1 + 253);
  if (*(unsigned char *)(a1 + 253) && (a3 & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"You cannot call FinalizeDecoding() and then call ", 49);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "GetRawLattice() with use_final_probs == false");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v46);
  }
  long long v55 = 0u;
  long long v56 = 0u;
  int v57 = 1065353216;
  float v7 = (long long *)(a1 + 256);
  if (!v6) {
    float v7 = &v55;
  }
  unint64_t v42 = v7;
  if (v6) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = a3 == 0;
  }
  if (!v8) {
    kaldi::LatticeFasterOnlineDecoder::ComputeFinalCosts((unsigned int **)a1, &v55, 0, 0);
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  int v40 = v6;
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  int v11 = *(_DWORD *)(a1 + 248);
  memset(v53, 0, sizeof(v53));
  int v54 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>((uint64_t)v53, v11 / 2 + 3);
  uint64_t v12 = 0;
  uint64_t v13 = ((unint64_t)(v9 - v10) >> 4) - 1;
  int64_t v50 = 0;
  int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v14 = ((unint64_t)(v9 - v10) >> 4);
  while (1)
  {
    uint64_t v15 = *(char **)(*(void *)(a1 + 80) + 16 * v12);
    if (!v15) {
      break;
    }
    kaldi::LatticeFasterOnlineDecoder::TopSortTokens(v15, &v50);
    uint64_t v17 = v50;
    float v16 = v51;
    if (v51 != v50)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      do
      {
        if (*(void *)&v17[8 * v19])
        {
          int v20 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
          uint64_t v46 = &v50[v18];
          *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)v53, &v50[v18], (uint64_t)&std::piecewise_construct, (void **)&v46)+ 6) = v20;
          uint64_t v17 = v50;
          float v16 = v51;
        }
        ++v19;
        v18 += 8;
      }
      while (v19 < (v16 - v17) >> 3);
    }
    if (++v12 == v14)
    {
      (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, 0);
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v46, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"init:", 5);
        float v21 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" buckets:", 9);
        float v22 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" load:", 6);
        BOOL v25 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" max:", 5);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v46);
      }
      uint64_t v41 = v14;
      uint64_t v26 = 0;
      if (v40) {
        float v27 = (void *)(a1 + 280);
      }
      else {
        float v27 = (void *)&v56 + 1;
      }
      do
      {
        uint64_t v45 = 0;
        for (uint64_t i = *(void *)(*(void *)(a1 + 80) + 16 * v26); ; uint64_t i = *(void *)(v45 + 16))
        {
          uint64_t v45 = i;
          if (!i) {
            break;
          }
          uint64_t v46 = (char *)&v45;
          uint64_t v29 = *((unsigned int *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)v53, &v45, (uint64_t)&std::piecewise_construct, (void **)&v46)+ 6);
          for (uint64_t j = *(void *)(v45 + 8); j; uint64_t j = *(void *)(j + 24))
          {
            uint64_t v31 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(v53, (void *)j);
            if (*(_DWORD *)(j + 8)) {
              float v32 = *(float *)(*(void *)(a1 + 168) + 4 * v26);
            }
            else {
              float v32 = 0.0;
            }
            int v33 = *((_DWORD *)v31 + 6);
            int v34 = *(_DWORD *)(j + 12);
            int v35 = *(_DWORD *)(j + 16);
            float v36 = *(float *)(j + 20) - v32;
            LODWORD(v46) = *(_DWORD *)(j + 8);
            HIDWORD(v46) = v34;
            int v47 = v35;
            float v48 = v36;
            int v49 = v33;
            (*(void (**)(uint64_t, uint64_t, char **))(*(void *)a2 + 208))(a2, v29, &v46);
          }
          if (v26 == v13)
          {
            if (a3 && *v27)
            {
              float v37 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(v42, &v45);
              if (v37)
              {
                v44[0] = *((_DWORD *)v37 + 6);
                v44[1] = 0;
                (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 184))(a2, v29, v44);
              }
            }
            else
            {
              uint64_t v43 = 0;
              (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v29, &v43);
            }
          }
        }
        ++v26;
      }
      while (v26 != v41);
      BOOL v24 = (*(int (**)(uint64_t))(*(void *)a2 + 160))(a2) > 0;
      goto LABEL_42;
    }
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"GetRawLattice: no tokens active on frame ", 41);
    float v23 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": not producing lattice.\n", 25);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
  }
  BOOL v24 = 0;
LABEL_42:
  if (v50)
  {
    int v51 = v50;
    operator delete(v50);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v53);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v55);
  return v24;
}

void kaldi::LatticeFasterOnlineDecoder::ComputeFinalCosts(unsigned int **a1, void *a2, float *a3, float *a4)
{
  if (a2) {
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a2);
  }
  BOOL v8 = *a1;
  if (!*a1)
  {
    float v10 = INFINITY;
    float v9 = INFINITY;
    if (!a3) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  float v9 = INFINITY;
  float v10 = INFINITY;
  do
  {
    uint64_t v11 = *v8;
    uint64_t v12 = (float *)*((void *)v8 + 1);
    BOOL v8 = (unsigned int *)*((void *)v8 + 2);
    uint64_t v17 = v12;
    float v13 = (*(float (**)(unsigned int *, uint64_t))(*(void *)a1[19] + 32))(a1[19], v11);
    if (v9 >= *v17) {
      float v9 = *v17;
    }
    if (v10 >= (float)(*v17 + v13)) {
      float v10 = *v17 + v13;
    }
    if (a2 && v13 != INFINITY)
    {
      uint64_t v18 = &v17;
      *((float *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)a2, &v17, (uint64_t)&std::piecewise_construct, &v18)+ 6) = v13;
    }
  }
  while (v8);
  if (a3)
  {
LABEL_14:
    float v14 = INFINITY;
    if (v10 != INFINITY || v9 != INFINITY) {
      float v14 = v10 - v9;
    }
    *a3 = v14;
  }
LABEL_20:
  if (a4)
  {
    if (v10 == INFINITY) {
      float v16 = v9;
    }
    else {
      float v16 = v10;
    }
    *a4 = v16;
  }
}

uint64_t kaldi::LatticeFasterOnlineDecoder::TopSortTokens(char *a1, void *a2)
{
  long long v37 = 0u;
  long long v38 = 0u;
  int v39 = 1065353216;
  if (a1)
  {
    int v2 = -1;
    uint64_t v3 = a1;
    do
    {
      uint64_t v3 = (char *)*((void *)v3 + 2);
      ++v2;
    }
    while (v3);
    uint64_t v31 = a1;
    int v4 = 0;
    do
    {
      *(void *)&long long v34 = &v31;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)&v37, &v31, (uint64_t)&std::piecewise_construct, (void **)&v34)+ 6) = v2 + v4;
      uint64_t v31 = (char *)*((void *)v31 + 2);
      --v4;
    }
    while (v31);
    BOOL v5 = (uint64_t *)v38;
    long long v34 = 0u;
    long long v35 = 0u;
    int v36 = 1065353216;
    int v6 = -v4;
    if ((void)v38)
    {
      do
      {
        uint64_t v31 = (char *)v5[2];
        uint64_t v7 = *((void *)v31 + 1);
        if (v7)
        {
          int v8 = *((_DWORD *)v5 + 6);
          do
          {
            if (!*(_DWORD *)(v7 + 8))
            {
              float v9 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(&v37, (void *)v7);
              if (v9)
              {
                if (*((_DWORD *)v9 + 6) < v8)
                {
                  *((_DWORD *)v9 + 6) = v6;
                  std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,kaldi::LatticeFasterOnlineDecoder::Token * const&>((uint64_t)&v34, (void *)v7, (void *)v7);
                  ++v6;
                }
              }
            }
            uint64_t v7 = *(void *)(v7 + 24);
          }
          while (v7);
        }
        std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__erase_unique<kaldi::LatticeFasterOnlineDecoder::Token *>(&v34, &v31);
        BOOL v5 = (uint64_t *)*v5;
      }
      while (v5);
      if (*((void *)&v35 + 1))
      {
        unint64_t v10 = 0;
        do
        {
          uint64_t v31 = 0;
          float v32 = 0;
          int v33 = 0;
          uint64_t v11 = (void *)v35;
          if ((void)v35)
          {
            uint64_t v12 = 0;
            do
            {
              if (v12 >= v33)
              {
                uint64_t v13 = (v12 - v31) >> 3;
                if ((unint64_t)(v13 + 1) >> 61) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v14 = (v33 - v31) >> 2;
                if (v14 <= v13 + 1) {
                  unint64_t v14 = v13 + 1;
                }
                if ((unint64_t)(v33 - v31) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v15 = v14;
                }
                if (v15) {
                  float v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v33, v15);
                }
                else {
                  float v16 = 0;
                }
                uint64_t v17 = &v16[8 * v13];
                *(void *)uint64_t v17 = v11[2];
                uint64_t v12 = v17 + 8;
                unint64_t v19 = v31;
                uint64_t v18 = v32;
                if (v32 != v31)
                {
                  do
                  {
                    uint64_t v20 = *((void *)v18 - 1);
                    v18 -= 8;
                    *((void *)v17 - 1) = v20;
                    v17 -= 8;
                  }
                  while (v18 != v19);
                  uint64_t v18 = v31;
                }
                uint64_t v31 = v17;
                float v32 = v12;
                int v33 = &v16[8 * v15];
                if (v18) {
                  operator delete(v18);
                }
              }
              else
              {
                *(void *)uint64_t v12 = v11[2];
                v12 += 8;
              }
              float v32 = v12;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(&v34);
          float v21 = v31;
          if (v31 != v32)
          {
            do
            {
              uint64_t v30 = 0;
              uint64_t v30 = *(void *)v21;
              int v40 = &v30;
              float v22 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)&v37, &v30, (uint64_t)&std::piecewise_construct, &v40);
              uint64_t v23 = *(void *)(v30 + 8);
              if (v23)
              {
                int v24 = *((_DWORD *)v22 + 6);
                do
                {
                  if (!*(_DWORD *)(v23 + 8))
                  {
                    BOOL v25 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(&v37, (void *)v23);
                    if (v25)
                    {
                      if (*((_DWORD *)v25 + 6) < v24)
                      {
                        *((_DWORD *)v25 + 6) = v6;
                        std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,kaldi::LatticeFasterOnlineDecoder::Token * const&>((uint64_t)&v34, (void *)v23, (void *)v23);
                        ++v6;
                      }
                    }
                  }
                  uint64_t v23 = *(void *)(v23 + 24);
                }
                while (v23);
              }
              v21 += 8;
            }
            while (v21 != v32);
            float v21 = v31;
          }
          if (v21)
          {
            float v32 = v21;
            operator delete(v21);
          }
          if (!*((void *)&v35 + 1)) {
            break;
          }
        }
        while (v10++ < 0xF423F);
      }
    }
  }
  else
  {
    int v6 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    int v36 = 1065353216;
  }
  a2[1] = *a2;
  uint64_t v31 = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)a2, v6, &v31);
  for (uint64_t i = (uint64_t **)v38; i; uint64_t i = (uint64_t **)*i)
    *(void *)(*a2 + 8 * *((int *)i + 6)) = i[2];
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v34);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v37);
}

void sub_1B1D3E428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void kaldi::LatticeFasterOnlineDecoder::PruneForwardLinks(kaldi::LatticeFasterOnlineDecoder *this, unsigned int a2, BOOL *a3, BOOL *a4, float a5)
{
  *a3 = 0;
  *a4 = 0;
  if (!*(void *)(*((void *)this + 10) + 16 * a2) && !*((unsigned char *)this + 252))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"No tokens alive [doing pruning].. warning first time only for each utterance\n", 77);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    }
    *((unsigned char *)this + 252) = 1;
  }
  uint64_t v21 = 16 * a2;
  uint64_t v9 = *(void *)(*((void *)this + 10) + v21);
  if (v9)
  {
    char v10 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)(v9 + 8);
      if (v11)
      {
        uint64_t v12 = 0;
        float v13 = INFINITY;
        do
        {
          float v15 = **(float **)v11;
          float v14 = *(float *)(*(void *)v11 + 4);
          float v16 = v14 + (float)((float)((float)(*(float *)v9 + *(float *)(v11 + 20)) + *(float *)(v11 + 16)) - v15);
          if (v16 <= *((float *)this + 52))
          {
            if (v16 >= 0.0)
            {
              float v19 = v14 + (float)((float)((float)(*(float *)v9 + *(float *)(v11 + 20)) + *(float *)(v11 + 16)) - v15);
            }
            else
            {
              float v19 = 0.0;
              if (v16 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Negative extra_cost: ", 21);
                std::ostream::operator<<();
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
              }
            }
            if (v19 < v13) {
              float v13 = v19;
            }
            uint64_t v17 = *(void *)(v11 + 24);
            uint64_t v12 = v11;
          }
          else
          {
            uint64_t v17 = *(void *)(v11 + 24);
            uint64_t v18 = (void *)(v12 + 24);
            if (!v12) {
              uint64_t v18 = (void *)(v9 + 8);
            }
            void *v18 = v17;
            MEMORY[0x1B3EA8670](v11, 0x1020C40D9E1CEDCLL);
            *a4 = 1;
          }
          uint64_t v11 = v17;
        }
        while (v17);
      }
      else
      {
        float v13 = INFINITY;
      }
      if (vabds_f32(v13, *(float *)(v9 + 4)) > a5) {
        char v10 = 1;
      }
      *(float *)(v9 + 4) = v13;
      uint64_t v9 = *(void *)(v9 + 16);
      if (!v9)
      {
        if ((v10 & 1) == 0) {
          break;
        }
        char v10 = 0;
        *a3 = 1;
        uint64_t v9 = *(void *)(*((void *)this + 10) + v21);
        if (!v9) {
          break;
        }
      }
    }
  }
}

void sub_1B1D3E6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::LatticeFasterOnlineDecoder::PruneForwardLinksFinal(kaldi::LatticeFasterOnlineDecoder *this)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = ((*((void *)this + 11) - v2) << 28) - 0x100000000;
  if (*(void *)(v2 + (v3 >> 28))) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = kaldi::g_kaldi_verbose_level < -1;
  }
  if (!v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"No tokens alive at end of file\n", 31);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
  }
  kaldi::LatticeFasterOnlineDecoder::ComputeFinalCosts((unsigned int **)this, (void *)this + 32, (float *)this + 74, (float *)this + 75);
  *((unsigned char *)this + 253) = 1;
  uint64_t v5 = *((void *)this + 1);
  if (v5 != -1)
  {
    uint64_t v6 = *((void *)this + 3);
    do
    {
      uint64_t v7 = (uint64_t *)(v6 + 16 * v5);
      v7[1] = 0;
      uint64_t v5 = *v7;
    }
    while (v5 != -1);
  }
  uint64_t v8 = *(void *)this;
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  if (v8)
  {
    uint64_t v9 = *((void *)this + 6);
    do
    {
      uint64_t v10 = v8;
      uint64_t v8 = *(void *)(v8 + 16);
      *(void *)(v10 + 16) = v9;
      uint64_t v9 = v10;
    }
    while (v8);
    *((void *)this + 6) = v10;
  }
  do
  {
    uint64_t v27 = 0;
    uint64_t v27 = *(void *)(*((void *)this + 10) + 16 * (v3 >> 32));
    if (!v27) {
      break;
    }
    char v11 = 0;
    do
    {
      if (*((void *)this + 35))
      {
        uint64_t v12 = (float *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>((void *)this + 32, &v27);
        if (v12) {
          float v13 = v12[6];
        }
        else {
          float v13 = INFINITY;
        }
      }
      else
      {
        float v13 = 0.0;
      }
      uint64_t v14 = v27;
      float v15 = (float)(v13 + *(float *)v27) - *((float *)this + 75);
      uint64_t v16 = *(void *)(v27 + 8);
      if (v16)
      {
        uint64_t v17 = 0;
        do
        {
          float v19 = **(float **)v16;
          float v18 = *(float *)(*(void *)v16 + 4);
          float v20 = v18 + (float)((float)((float)(*(float *)v27 + *(float *)(v16 + 20)) + *(float *)(v16 + 16)) - v19);
          if (v20 <= *((float *)this + 52))
          {
            if (v20 >= 0.0)
            {
              float v23 = v18 + (float)((float)((float)(*(float *)v27 + *(float *)(v16 + 20)) + *(float *)(v16 + 16)) - v19);
            }
            else
            {
              float v23 = 0.0;
              if (v20 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Negative extra_cost: ", 21);
                std::ostream::operator<<();
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
              }
            }
            if (v23 < v15) {
              float v15 = v23;
            }
            uint64_t v21 = *(void *)(v16 + 24);
            uint64_t v17 = v16;
          }
          else
          {
            uint64_t v21 = *(void *)(v16 + 24);
            float v22 = (void *)(v27 + 8);
            if (v17) {
              float v22 = (void *)(v17 + 24);
            }
            *float v22 = v21;
            MEMORY[0x1B3EA8670](v16, 0x1020C40D9E1CEDCLL);
          }
          uint64_t v16 = v21;
        }
        while (v21);
        uint64_t v14 = v27;
      }
      float v25 = INFINITY;
      if (v15 <= *((float *)this + 52)) {
        float v25 = v15;
      }
      float v26 = *(float *)(v14 + 4);
      if (v26 != v25
        && (COERCE_INT(fabs(v26 - v25)) > 2139095039
         || fabsf(v26 - v25) > (float)((float)(fabsf(v26) + fabsf(v25)) * 0.00001)))
      {
        char v11 = 1;
      }
      *(float *)(v14 + 4) = v25;
      uint64_t v27 = *(void *)(v14 + 16);
    }
    while (v27);
  }
  while ((v11 & 1) != 0);
}

void sub_1B1D3E9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

float kaldi::LatticeFasterOnlineDecoder::FinalRelativeCost(kaldi::LatticeFasterOnlineDecoder *this)
{
  if (*((unsigned char *)this + 253)) {
    return *((float *)this + 74);
  }
  float v2 = 0.0;
  kaldi::LatticeFasterOnlineDecoder::ComputeFinalCosts((unsigned int **)this, 0, &v2, 0);
  return v2;
}

uint64_t kaldi::LatticeFasterOnlineDecoder::PruneTokensForFrame(kaldi::LatticeFasterOnlineDecoder *this, unsigned int a2)
{
  uint64_t v3 = (uint64_t *)(*((void *)this + 10) + 16 * a2);
  uint64_t result = *v3;
  if (*v3) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = kaldi::g_kaldi_verbose_level < -1;
  }
  if (!v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"No tokens alive [doing pruning]\n", 32);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    uint64_t result = *v3;
  }
  if (result)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(result + 16);
      if (*(float *)(result + 4) == INFINITY)
      {
        uint64_t v8 = (uint64_t *)(v6 + 16);
        if (!v6) {
          uint64_t v8 = v3;
        }
        *uint64_t v8 = v7;
        MEMORY[0x1B3EA8670]();
        --*((_DWORD *)this + 62);
      }
      else
      {
        uint64_t v6 = result;
      }
      uint64_t result = v7;
    }
    while (v7);
  }
  return result;
}

void sub_1B1D3EB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::GetCutoffHelper<kaldi::LatticeFasterOnlineDecoder,kaldi::LatticeFasterDecoderConfig,kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::Elem>(void *a1, uint64_t a2, uint64_t a3, void *a4, float *a5, void *a6, int a7, float a8)
{
  uint64_t v9 = a3;
  int v11 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 12)) {
    int v11 = *(_DWORD *)(a2 + 12);
  }
  if (a7) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  if (*(_DWORD *)(a2 + 4) == 0x7FFFFFFF && v12 == 0)
  {
    uint64_t v32 = 0;
    float v33 = INFINITY;
    if (a3)
    {
      do
      {
        float v34 = **(float **)(v9 + 8);
        if (v34 >= v33)
        {
          BOOL v35 = 1;
        }
        else
        {
          float v33 = **(float **)(v9 + 8);
          BOOL v35 = a6 == 0;
        }
        if (!v35)
        {
          *a6 = v9;
          float v33 = v34;
        }
        uint64_t v9 = *(void *)(v9 + 16);
        ++v32;
      }
      while (v9);
    }
    if (a4) {
      *a4 = v32;
    }
    if (a5) {
      *a5 = *(float *)a2;
    }
    return v33 + *(float *)a2;
  }
  else
  {
    int v48 = v12;
    unint64_t v49 = *(int *)(a2 + 4);
    float v15 = (void **)(a1 + 16);
    a1[17] = a1[16];
    uint64_t v16 = 0;
    if (a3)
    {
      float v17 = -INFINITY;
      float v18 = INFINITY;
      do
      {
        float v19 = **(float **)(v9 + 8);
        uint64_t v21 = (float *)a1[17];
        unint64_t v20 = a1[18];
        if ((unint64_t)v21 >= v20)
        {
          float v23 = (float *)*v15;
          uint64_t v24 = ((char *)v21 - (unsigned char *)*v15) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = v20 - (void)v23;
          if (v26 >> 1 > v25) {
            unint64_t v25 = v26 >> 1;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            float v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 18), v27);
            float v23 = (float *)a1[16];
            uint64_t v21 = (float *)a1[17];
          }
          else
          {
            float v28 = 0;
          }
          uint64_t v29 = (float *)&v28[4 * v24];
          *uint64_t v29 = v19;
          float v22 = v29 + 1;
          while (v21 != v23)
          {
            float v30 = *--v21;
            a8 = v30;
            *--uint64_t v29 = v30;
          }
          a1[16] = v29;
          a1[17] = v22;
          a1[18] = &v28[4 * v27];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *uint64_t v21 = v19;
          float v22 = v21 + 1;
        }
        a1[17] = v22;
        if (v19 >= v18)
        {
          BOOL v31 = 1;
        }
        else
        {
          float v18 = v19;
          BOOL v31 = a6 == 0;
        }
        if (!v31)
        {
          *a6 = v9;
          float v18 = v19;
        }
        if (v19 > v17) {
          float v17 = v19;
        }
        uint64_t v9 = *(void *)(v9 + 16);
        ++v16;
      }
      while (v9);
    }
    else
    {
      float v18 = INFINITY;
      float v17 = -INFINITY;
    }
    if (a4) {
      *a4 = v16;
    }
    float v37 = *(float *)a2;
    float v36 = INFINITY;
    if (!*(_DWORD *)(a2 + 12)) {
      float v17 = INFINITY;
    }
    long long v38 = (float *)a1[16];
    int v39 = (float *)a1[17];
    unint64_t v40 = v39 - v38;
    if (v40 <= v49)
    {
      int v42 = v48;
    }
    else
    {
      uint64_t v41 = &v38[v49];
      int v42 = v48;
      if (v41 != v39)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v38, v41, v39, a8);
        long long v38 = (float *)a1[16];
        int v39 = (float *)a1[17];
        unint64_t v40 = v39 - v38;
      }
      float v36 = v38[v49];
    }
    float v43 = v18 + v37;
    if (v40 > v42) {
      float v44 = v18;
    }
    else {
      float v44 = v17;
    }
    if (v42 && v40 > v42)
    {
      uint64_t v45 = &v38[v42];
      if (v40 > v49) {
        int v39 = &v38[v49];
      }
      if (v45 != v39)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v38, v45, v39, v44);
        long long v38 = (float *)*v15;
      }
      float v44 = v38[v42];
    }
    if (v36 >= v43)
    {
      if (v44 <= v43)
      {
        *a5 = *(float *)a2;
        return v43;
      }
      else
      {
        if (a5) {
          *a5 = (float)(v44 - v18) + *(float *)(a2 + 28);
        }
        return v44;
      }
    }
    else if (a5)
    {
      *a5 = (float)(v36 - v18) + *(float *)(a2 + 28);
    }
  }
  return v36;
}

uint64_t kaldi::LatticeFasterOnlineDecoder::FindOrAddToken(kaldi::LatticeFasterOnlineDecoder *this, int a2, int a3, float a4, Token *a5, BOOL *a6)
{
  uint64_t v6 = *((void *)this + 3);
  unint64_t v7 = (unint64_t)a2 % *((void *)this + 2);
  uint64_t v8 = *(void *)(v6 + 16 * v7 + 8);
  if (!v8) {
LABEL_8:
  }
    operator new();
  uint64_t v9 = *(void *)(v6 + 16 * v7);
  uint64_t v10 = this;
  if (v9 != -1) {
    uint64_t v10 = (kaldi::LatticeFasterOnlineDecoder *)(*(void *)(v6 + 16 * v9 + 8) + 16);
  }
  uint64_t v11 = *(void *)(v8 + 16);
  for (uint64_t i = *(void *)v10; ; uint64_t i = *(void *)(i + 16))
  {
    if (i == v11) {
      goto LABEL_8;
    }
    if (*(_DWORD *)i == a2) {
      break;
    }
  }
  uint64_t v13 = *(void *)(i + 8);
  if (*(float *)v13 <= a4)
  {
    if (!a6) {
      return v13;
    }
    BOOL v14 = 0;
    goto LABEL_12;
  }
  *(float *)uint64_t v13 = a4;
  *(void *)(v13 + 24) = a5;
  if (a6)
  {
    BOOL v14 = 1;
LABEL_12:
    *a6 = v14;
  }
  return v13;
}

void *kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::~HashList(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      ++v3;
      uint64_t v2 = *(void *)(v2 + 16);
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  BOOL v4 = (void *)a1[7];
  BOOL v5 = (unsigned char *)a1[8];
  if (v5 == (unsigned char *)v4)
  {
    uint64_t v7 = 0;
    BOOL v4 = (void *)a1[8];
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (v4[v6])
      {
        MEMORY[0x1B3EA8630](v4[v6], 0x1020C80F89CB87BLL);
        BOOL v4 = (void *)a1[7];
        BOOL v5 = (unsigned char *)a1[8];
      }
      ++v6;
      v7 += 1024;
    }
    while (v6 < (v5 - (unsigned char *)v4) >> 3);
  }
  if (v3 != v7 && kaldi::g_kaldi_verbose_level > -2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Possible memory leak: ", 22);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" != ", 4);
    uint64_t v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": you might have forgotten to call Delete on ", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"some Elems", 10);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    BOOL v4 = (void *)a1[7];
  }
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  uint64_t v11 = (void *)a1[3];
  if (v11)
  {
    a1[4] = v11;
    operator delete(v11);
  }
  return a1;
}

void std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::__append(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  BOOL v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (uint64_t)&v6[-v7] >> 4)
  {
    if (a2)
    {
      uint64_t v14 = v7 + 16 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(_WORD *)(v7 + 8) = 257;
        v7 += 16;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = (char *)v7;
  }
  else
  {
    uint64_t v8 = v7 - (void)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    float v15 = &v13[16 * v10];
    uint64_t v16 = &v15[16 * a2];
    float v17 = v15;
    do
    {
      *(void *)float v17 = 0;
      *((_WORD *)v17 + 4) = 257;
      v17 += 16;
    }
    while (v17 != v16);
    float v18 = &v13[16 * v12];
    unint64_t v20 = *a1;
    float v19 = a1[1];
    if (v19 != *a1)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 2);
        v19 -= 16;
        __int16 v22 = *((_WORD *)v19 + 4);
        *((void *)v15 - 2) = v21;
        v15 -= 16;
        *((_WORD *)v15 + 4) = v22;
      }
      while (v19 != v20);
      float v19 = *a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
    {
      operator delete(v19);
    }
  }
}

uint64_t kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::New(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result) {
    operator new[]();
  }
  *(void *)(a1 + 48) = *(void *)(result + 16);
  return result;
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1 || ((*(void (**)(uint64_t, void))(*(void *)a1 + 280))(a1, 0), *a2 != 2)) {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 288))(a1, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v6, &v14);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v14 + 24))(v14))
        {
          uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
          if (*a2 == 1) {
            uint64_t v8 = (_DWORD *)v7;
          }
          else {
            uint64_t v8 = (_DWORD *)(v7 + 4);
          }
          int v9 = *(_DWORD *)(v7 + 16);
          LODWORD(v12[0]) = *v8;
          HIDWORD(v12[0]) = v12[0];
          v12[1] = *(void *)(v7 + 8);
          int v13 = v9;
          (*(void (**)(uint64_t, void *))(*(void *)v14 + 88))(v14, v12);
          (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
        }
        if (v14) {
          (*(void (**)(void))(*(void *)v14 + 8))();
        }
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(v12, a1, v6);
        uint64_t v11 = v12[0];
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v6, &v11);
        uint64_t v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    unint64_t v10 = fst::ProjectProperties(v5, *a2 == 1);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v10, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1D3F704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      int v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          int v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  int v13 = operator new(0x20uLL);
  *int v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  __int16 v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *int v13 = *v22;
LABEL_38:
    *__int16 v22 = v13;
    goto LABEL_39;
  }
  *int v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    __int16 v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1B1D3F98C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,kaldi::LatticeFasterOnlineDecoder::Token * const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint8x8_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1D3FDB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__erase_unique<kaldi::LatticeFasterOnlineDecoder::Token *>(void *a1, void *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

kaldi::quasar::RnnlmEvaluator *kaldi::quasar::RnnlmEvaluator::RnnlmEvaluator(kaldi::quasar::RnnlmEvaluator *this, const kaldi::quasar::NnlmDecoderWord *a2, kaldi::InferenceNetItf *a3, kaldi::InferenceNetItf *a4, float a5, int a6, int a7, int a8, int a9)
{
  unint64_t v12 = kaldi::quasar::DnnlmEvaluator::DnnlmEvaluator(this, a2, a3, a4, a5, a7, a8);
  *(void *)unint64_t v12 = &unk_1F0A50620;
  *((void *)v12 + 38) = 0;
  uint64_t v13 = (uint64_t)v12 + 312;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::unordered_map((uint64_t)v12 + 312, 0, (char *)&v15, &v21);
  *((void *)this + 45) = (char *)this + 360;
  *((void *)this + 46) = (char *)this + 360;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::unordered_map((uint64_t)this + 392, 0, (char *)&v15, &v21);
  *((void *)this + 55) = (char *)this + 440;
  *((void *)this + 56) = (char *)this + 440;
  *((void *)this + 57) = 0;
  *((_DWORD *)this + 116) = a6;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"using RNN style LM in the decoder", 33);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v15);
  }
  if (*((unsigned char *)this + 40))
  {
    uint64_t v15 = a9;
    std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::unordered_map((uint64_t)v16, 0, &v21, &v20);
    uint64_t v17 = (uint64_t)&v17;
    unint64_t v18 = &v17;
    uint64_t v19 = 0;
    *((void *)this + 48) = v15;
    std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::__move_assign((uint64_t)this + 392, v16);
    std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::__move_assign((uint64_t *)this + 55, &v17);
    std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear(&v17);
  }
  else
  {
    uint64_t v15 = a9;
    std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::unordered_map((uint64_t)v16, 0, &v21, &v20);
    uint64_t v17 = (uint64_t)&v17;
    unint64_t v18 = &v17;
    uint64_t v19 = 0;
    *((void *)this + 38) = v15;
    std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::__move_assign(v13, v16);
    std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::__move_assign((uint64_t *)this + 45, &v17);
    std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear(&v17);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v16);
  return this;
}

void sub_1B1D3FFC4(_Unwind_Exception *a1)
{
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear(v5);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4);
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear(v3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2);
  kaldi::quasar::DnnlmEvaluator::~DnnlmEvaluator(v1);
  _Unwind_Resume(a1);
}

float kaldi::quasar::RnnlmEvaluator::CalculateSingleNgramAfterCacheMiss(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)a2;
  uint64_t v6 = *(void *)(a2 + 8) - 4;
  std::string __p = 0;
  BOOL v16 = 0;
  uint64_t v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v4, v6, (v6 - (uint64_t)v4) >> 2);
  if (*(unsigned char *)(a1 + 40))
  {
    float v14 = 0;
    kaldi::quasar::RnnlmEvaluator::CalculateAndCacheNgramContext(a1, (const void **)&__p, &v14);
    unint64_t v7 = v14;
    unint64_t v8 = *(void **)(a1 + 24);
    if (v8) {
    float UnitOutput = kaldi::quasar::CEInferenceNet::GetUnitOutput((uint64_t)v8, v7, *(_DWORD *)(*(void *)(a2 + 8) - 4));
    }
  }
  else
  {
    float v14 = 0;
    kaldi::quasar::RnnlmEvaluator::CalculateAndCacheNgramContext(a1, (const void **)&__p, &v14);
    uint8x8_t v10 = v14;
    float UnitOutput = (*(float (**)(void *, uint64_t *, void))(*(void *)v11 + 136))(v11, v10, *(unsigned int *)(*(void *)(a2 + 8) - 4));
  }
  float v12 = -(float)(UnitOutput - *(float *)(a1 + 44));
  if (__p)
  {
    BOOL v16 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1B1D401A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::RnnlmEvaluator::CalculateAndCacheNgramContext(uint64_t a1, const void **a2, uint64_t **a3)
{
  uint64_t v6 = (unint64_t *)(a1 + 384);
  if (!kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(a1 + 384, (uint64_t)a2, a3))
  {
    unint64_t v7 = *a2;
    uint64_t v8 = (uint64_t)a2[1] - 4;
    unint64_t v9 = (v8 - (uint64_t)*a2) >> 2;
    int v47 = 0;
    int v48 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v7, v8, v9);
    float v43 = &v43;
    float v44 = &v43;
    uint64_t v45 = 0;
    uint8x8_t v10 = a2[1];
    uint8x8_t v11 = operator new(0x18uLL);
    v11[4] = *(v10 - 1);
    *(void *)uint8x8_t v11 = &v43;
    *((void *)v11 + 1) = &v43;
    float v43 = v11;
    float v44 = (void **)v11;
    uint64_t v45 = 1;
    int v42 = 0;
    if (__p == v47)
    {
      uint64_t v15 = 0;
    }
    else
    {
      do
      {
        if (kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get((uint64_t)v6, (uint64_t)&__p, &v42))
        {
          break;
        }
        float v12 = v47;
        uint64_t v13 = operator new(0x18uLL);
        v13[4] = *((_DWORD *)v12 - 1);
        float v14 = v44;
        *(void *)uint64_t v13 = &v43;
        *((void *)v13 + 1) = v14;
        uint64_t *v14 = v13;
        float v44 = (void **)v13;
        ++v45;
        int v47 = v12 - 4;
      }
      while (__p != v12 - 4);
      uint64_t v15 = v42;
    }
    memset(v41, 0, sizeof(v41));
    if (v15) {
      BOOL v16 = v15 + 1;
    }
    else {
      BOOL v16 = v41;
    }
    uint64_t v17 = *(const void **)(a1 + 24);
    if (v17) {
    else
    }
      unint64_t v18 = 0;
    uint64_t v19 = *(unsigned int *)(a1 + 16);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    float v37 = (void **)&unk_1F0A517C0;
    long long v38 = 0;
    kaldi::CuVector<float>::Resize((uint64_t)&v37, v19, 0);
    float v36 = a3;
    char v20 = v44;
    if (v44 == &v43)
    {
      char v21 = v42;
    }
    else
    {
      char v21 = 0;
      char v22 = 1;
      do
      {
        int v23 = *((_DWORD *)v20 + 4);
        *long long v38 = (float)v23;
        uint64_t v24 = v47;
        if (v47 >= v48)
        {
          uint64_t v26 = (char *)__p;
          uint64_t v27 = (v47 - (unsigned char *)__p) >> 2;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v29 = v48 - (unsigned char *)__p;
          if ((v48 - (unsigned char *)__p) >> 1 > v28) {
            unint64_t v28 = v29 >> 1;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            BOOL v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v48, v30);
            uint64_t v26 = (char *)__p;
            uint64_t v24 = v47;
          }
          else
          {
            BOOL v31 = 0;
          }
          uint64_t v32 = (int *)&v31[4 * v27];
          *uint64_t v32 = v23;
          unint64_t v25 = (char *)(v32 + 1);
          while (v24 != v26)
          {
            int v33 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *--uint64_t v32 = v33;
          }
          std::string __p = v32;
          int v47 = v25;
          int v48 = &v31[4 * v30];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *(_DWORD *)int v47 = v23;
          unint64_t v25 = v24 + 4;
        }
        int v47 = v25;
        float v34 = kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(v6, (uint64_t)&__p);
        int v42 = v34;
        if (v22) {
          BOOL v35 = v16;
        }
        else {
          BOOL v35 = v21 + 1;
        }
        kaldi::quasar::CEInferenceNet::MultiIOFeedforward((uint64_t)v18, (uint64_t)&v37, v35, v34, (uint64_t)(v34 + 1), 1);
        char v22 = 0;
        char v21 = v42;
        char v20 = (void **)v20[1];
      }
      while (v20 != &v43);
    }
    *float v36 = v21;
    kaldi::CuVector<float>::~CuVector(&v37);
    float v37 = (void **)v41;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v37);
    std::__list_imp<char *>::clear(&v43);
    if (__p)
    {
      int v47 = (char *)__p;
      operator delete(__p);
    }
  }
}

{
  unint64_t *v6;
  const void *v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *i;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  int *v26;
  int v27;
  void *v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *__p;
  char *v37;
  char *v38;

  uint64_t v6 = (unint64_t *)(a1 + 304);
  if (!kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(a1 + 304, (uint64_t)a2, a3))
  {
    unint64_t v7 = *(const void **)(a1 + 24);
    if (v7) {
    else
    }
      uint64_t v8 = 0;
    unint64_t v9 = *a2;
    uint8x8_t v10 = (uint64_t)a2[1];
    uint8x8_t v11 = (v10 - (uint64_t)*a2) >> 2;
    float v37 = 0;
    long long v38 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v9, v10, v11);
    int v33 = (uint64_t)&v33;
    float v34 = &v33;
    BOOL v35 = 0;
    uint64_t v32 = 0;
    if (__p == v37) {
      goto LABEL_10;
    }
    do
    {
      if (kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get((uint64_t)v6, (uint64_t)&__p, &v32))
      {
        break;
      }
      float v12 = v37;
      uint64_t v13 = operator new(0x18uLL);
      v13[4] = *((_DWORD *)v12 - 1);
      float v14 = v34;
      *(void *)uint64_t v13 = &v33;
      *((void *)v13 + 1) = v14;
      uint64_t *v14 = (uint64_t)v13;
      float v34 = (uint64_t *)v13;
      ++v35;
      float v37 = v12 - 4;
    }
    while (__p != v12 - 4);
    if (!v32) {
LABEL_10:
    }
      (*(void (**)(void *))(*(void *)v8 + 152))(v8);
    else {
      kaldi::nnet1::Nnet1InferenceNet::SetHistoryState((uint64_t)v8, v32 + 4);
    }
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    unint64_t v30 = 0;
    BOOL v31 = 0;
    unint64_t v28 = &unk_1F0A517C0;
    uint64_t v29 = 0;
    kaldi::CuVector<float>::Resize((uint64_t)&v28, v15, 0);
    for (uint64_t i = v34; i != &v33; uint64_t i = (uint64_t *)i[1])
    {
      uint64_t v17 = *((_DWORD *)i + 4);
      *uint64_t v29 = (float)v17;
      unint64_t v18 = v37;
      if (v37 >= v38)
      {
        char v20 = (char *)__p;
        char v21 = (v37 - (unsigned char *)__p) >> 2;
        char v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        int v23 = v38 - (unsigned char *)__p;
        if ((v38 - (unsigned char *)__p) >> 1 > v22) {
          char v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          uint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v22;
        }
        if (v24)
        {
          unint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v38, v24);
          char v20 = (char *)__p;
          unint64_t v18 = v37;
        }
        else
        {
          unint64_t v25 = 0;
        }
        uint64_t v26 = (int *)&v25[4 * v21];
        *uint64_t v26 = v17;
        uint64_t v19 = (char *)(v26 + 1);
        while (v18 != v20)
        {
          uint64_t v27 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *--uint64_t v26 = v27;
        }
        std::string __p = v26;
        float v37 = v19;
        long long v38 = &v25[4 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(_DWORD *)float v37 = v17;
        uint64_t v19 = v18 + 4;
      }
      float v37 = v19;
      uint64_t v32 = kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(v6, (uint64_t)&__p);
      (*(void (**)(void *, void **, uint64_t *, uint64_t))(*(void *)v8 + 104))(v8, &v28, v32, 1);
      kaldi::nnet1::Nnet1InferenceNet::GetHistoryState((uint64_t)v8, v32 + 4);
    }
    *a3 = v32;
    kaldi::CuVector<float>::~CuVector(&v28);
    std::__list_imp<char *>::clear(&v33);
    if (__p)
    {
      float v37 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1B1D404FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  a11 = &a15;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  std::__list_imp<char *>::clear(&a19);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B1D40860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>((void *)(a1 + 8), v9);
  uint64_t v6 = v5;
  if (v5)
  {
    unint64_t v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::SetHistoryState(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 392);
  if (*(void *)(result + 400) != v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(v2 + 8 * v6) + 64))(*(void *)(v2 + 8 * v6), *a2 + v5, 0, 0);
      ++v6;
      uint64_t v2 = *(void *)(v4 + 392);
      v5 += 32;
    }
    while (v6 < (*(void *)(v4 + 400) - v2) >> 3);
  }
  return result;
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(unint64_t *a1, uint64_t a2)
{
  if (!*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "capacity_ > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry&)#1}>(a1, a2);
}

uint64_t *kaldi::nnet1::Nnet1InferenceNet::GetHistoryState(uint64_t a1, uint64_t *a2)
{
  uint64_t result = std::vector<kaldi::CuVector<float>>::resize(a2, (uint64_t)(*(void *)(a1 + 400) - *(void *)(a1 + 392)) >> 3);
  uint64_t v5 = *(void *)(a1 + 392);
  if (*(void *)(a1 + 400) != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      if (v7 >= (a2[1] - *a2) >> 5) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(v5 + 8 * v7) + 48))(*(void *)(v5 + 8 * v7), *a2 + v6, 0, 0);
      ++v7;
      uint64_t v5 = *(void *)(a1 + 392);
      v6 += 32;
    }
    while (v7 < (*(void *)(a1 + 400) - v5) >> 3);
  }
  return result;
}

BOOL kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>((void *)(a1 + 8), v9);
  uint64_t v6 = v5;
  if (v5)
  {
    unint64_t v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(unint64_t *a1, uint64_t a2)
{
  if (!*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "capacity_ > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE&)#1}>(a1, a2);
}

void kaldi::quasar::RnnlmEvaluator::ClearCaches(kaldi::quasar::RnnlmEvaluator *this)
{
  kaldi::quasar::DnnlmEvaluator::ClearCaches(this);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)this + 39);
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear((uint64_t *)this + 45);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)this + 49);
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear((uint64_t *)this + 55);
}

void kaldi::quasar::RnnlmEvaluator::~RnnlmEvaluator(kaldi::quasar::RnnlmEvaluator *this)
{
  kaldi::quasar::RnnlmEvaluator::~RnnlmEvaluator(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A50620;
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear((uint64_t *)this + 55);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 392);
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear((uint64_t *)this + 45);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 312);
  kaldi::quasar::DnnlmEvaluator::~DnnlmEvaluator(this);
}

uint64_t kaldi::quasar::DnnlmEvaluator::ShouldCacheNgram()
{
  return 1;
}

void std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  *(void *)(a1 + 8) = a2[1];
  a2[1] = 0;
  uint64_t v6 = a2[3];
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  *(unsigned char *)(a1 + 44) = *((unsigned char *)a2 + 44);
  uint64_t v9 = a2[2];
  uint64_t v8 = a2 + 2;
  uint64_t v7 = v9;
  *(void *)(a1 + 16) = v9;
  if (v6)
  {
    unint64_t v10 = *(void *)(v7 + 8);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        v10 %= v11;
      }
    }
    else
    {
      v10 &= v11 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v10) = a1 + 16;
    *uint64_t v8 = 0;
    v8[1] = 0;
  }
}

uint64_t std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::__move_assign(uint64_t *a1, void *a2)
{
  return std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice((uint64_t)a1, a1, a2);
}

uint64_t std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    uint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    *uint64_t v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,0>(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 32);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::__move_assign(uint64_t *a1, void *a2)
{
  return std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice((uint64_t)a1, a1, a2);
}

void std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,0>(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 24);
  uint64_t v4 = (void **)(a1 + 56);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  kaldi::CuVector<float>::~CuVector(v2);
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5 = *a3;
  char v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1D41094(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5 = *a3;
  char v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1D410F0(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(void *a1, uint64_t *a2)
{
  uint64_t v3 = *(int **)*a2;
  uint64_t v4 = *(int **)(*a2 + 8);
  if (v3 == v4)
  {
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *v3++;
      unint64_t v5 = v6 + 7853 * v5;
    }
    while (v3 != v4);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v5;
    if (v5 >= *(void *)&v7) {
      unint64_t v10 = v5 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v5;
  }
  unint64_t v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  float v12 = (void *)*v11;
  if (*v11)
  {
    uint64_t v13 = (uint64_t)a1 + 44;
    do
    {
      unint64_t v14 = v12[1];
      if (v14 == v5)
      {
        if (kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred::operator()(v13, v12[2], *a2))
        {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v7) {
            v14 %= *(void *)&v7;
          }
        }
        else
        {
          v14 &= *(void *)&v7 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      float v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

BOOL kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 1;
  }
  size_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  return v4 == *(void *)(a3 + 8) - *(void *)a3 && memcmp(*(const void **)a2, *(const void **)a3, v4) == 0;
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry&)#1}>(unint64_t *a1, uint64_t a2)
{
  uint64_t v26 = (uint64_t *)&v26;
  uint64_t v27 = (uint64_t *)&v26;
  uint64_t v28 = 0;
  size_t v4 = a1 + 1;
  *(void *)&long long v24 = a2;
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(a1 + 1, (uint64_t *)&v24);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)v5[3];
    if (&v26 != (uint64_t **)v6)
    {
      int8x8_t v7 = (uint64_t *)v6[1];
      if (v7 != (uint64_t *)&v26)
      {
        uint64_t v8 = *v6;
        *(void *)(v8 + 8) = v7;
        *(void *)v6[1] = v8;
        uint64_t v9 = (uint64_t)v26;
        v26[1] = (uint64_t)v6;
        *uint64_t v6 = v9;
        v6[1] = (uint64_t)&v26;
        --a1[9];
        uint64_t v26 = v6;
        ++v28;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v4, v5);
  }
  else
  {
    unint64_t v10 = a1[9];
    if (v10 >= *a1)
    {
      unint64_t v14 = (uint64_t *)a1[7];
      if (&v26 != (uint64_t **)v14)
      {
        uint64_t v15 = (uint64_t *)v14[1];
        if (v15 != (uint64_t *)&v26)
        {
          uint64_t v16 = *v14;
          *(void *)(v16 + 8) = v15;
          *(void *)v14[1] = v16;
          uint64_t v17 = (uint64_t)v26;
          v26[1] = (uint64_t)v14;
          uint64_t *v14 = v17;
          v14[1] = (uint64_t)&v26;
          a1[9] = v10 - 1;
          uint64_t v26 = v14;
          ++v28;
        }
      }
      *(void *)&long long v24 = v27 + 2;
      std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__erase_unique<std::vector<int> const*>(v4, (uint64_t *)&v24);
      if (v27 + 2 != (uint64_t *)a2) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v27 + 16, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      }
    }
    else
    {
      long long v24 = 0uLL;
      uint64_t v25 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      unint64_t v11 = (uint64_t *)operator new(0x60uLL);
      uint64_t v13 = v25;
      uint64_t v12 = (uint64_t)v26;
      *((_OWORD *)v11 + 1) = v24;
      v11[7] = 0;
      v11[8] = 0;
      int32x2_t v11[6] = 0;
      v11[4] = v13;
      v11[5] = (uint64_t)&unk_1F0A517C0;
      v11[10] = 0;
      v11[11] = 0;
      v11[9] = 0;
      uint64_t *v11 = v12;
      v11[1] = (uint64_t)&v26;
      *(void *)(v12 + 8) = v11;
      uint64_t v26 = v11;
      ++v28;
    }
  }
  unint64_t v18 = v27;
  *(void *)&long long v24 = v27 + 2;
  *((void *)&v24 + 1) = v27;
  std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__emplace_unique_key_args<std::vector<int> const*,std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>((uint64_t)v4, (uint64_t *)&v24, &v24);
  uint64_t v19 = (uint64_t *)a1[8];
  if (v19 != v18)
  {
    char v20 = (uint64_t *)v18[1];
    if (v20 != v19)
    {
      uint64_t v21 = *v18;
      *(void *)(v21 + 8) = v20;
      *(void *)v18[1] = v21;
      uint64_t v22 = *v19;
      *(void *)(v22 + 8) = v18;
      uint64_t *v18 = v22;
      *uint64_t v19 = (uint64_t)v18;
      v18[1] = (uint64_t)v19;
      --v28;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear((uint64_t *)&v26);
  return v18 + 5;
}

void sub_1B1D414DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t *std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__erase_unique<std::vector<int> const*>(void *a1, uint64_t *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__emplace_unique_key_args<std::vector<int> const*,std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  int8x8_t v7 = *(int **)*a2;
  uint64_t v8 = *(int **)(*a2 + 8);
  if (v7 == v8)
  {
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *v7++;
      unint64_t v9 = v10 + 7853 * v9;
    }
    while (v7 != v8);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v9)
        {
          if (kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred::operator()(a1 + 44, i[2], *a2))
          {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v9;
  *((_OWORD *)i + 1) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  long long v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    void *i = *v24;
LABEL_43:
    *long long v24 = i;
    goto LABEL_44;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_43;
  }
LABEL_44:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1D417A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE&)#1}>(unint64_t *a1, uint64_t a2)
{
  uint64_t v26 = (uint64_t *)&v26;
  uint64_t v27 = (uint64_t *)&v26;
  uint64_t v28 = 0;
  size_t v4 = a1 + 1;
  *(void *)&long long v24 = a2;
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(a1 + 1, (uint64_t *)&v24);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)v5[3];
    if (&v26 != (uint64_t **)v6)
    {
      int8x8_t v7 = (uint64_t *)v6[1];
      if (v7 != (uint64_t *)&v26)
      {
        uint64_t v8 = *v6;
        *(void *)(v8 + 8) = v7;
        *(void *)v6[1] = v8;
        uint64_t v9 = (uint64_t)v26;
        v26[1] = (uint64_t)v6;
        *uint64_t v6 = v9;
        v6[1] = (uint64_t)&v26;
        --a1[9];
        uint64_t v26 = v6;
        ++v28;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v4, v5);
  }
  else
  {
    unint64_t v10 = a1[9];
    if (v10 >= *a1)
    {
      unint64_t v14 = (uint64_t *)a1[7];
      if (&v26 != (uint64_t **)v14)
      {
        uint64_t v15 = (uint64_t *)v14[1];
        if (v15 != (uint64_t *)&v26)
        {
          uint64_t v16 = *v14;
          *(void *)(v16 + 8) = v15;
          *(void *)v14[1] = v16;
          uint64_t v17 = (uint64_t)v26;
          v26[1] = (uint64_t)v14;
          uint64_t *v14 = v17;
          v14[1] = (uint64_t)&v26;
          a1[9] = v10 - 1;
          uint64_t v26 = v14;
          ++v28;
        }
      }
      *(void *)&long long v24 = v27 + 2;
      std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__erase_unique<std::vector<int> const*>(v4, (uint64_t *)&v24);
      if (v27 + 2 != (uint64_t *)a2) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v27 + 16, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      }
    }
    else
    {
      long long v24 = 0uLL;
      uint64_t v25 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      unint64_t v11 = (uint64_t *)operator new(0x48uLL);
      uint64_t v12 = v25;
      uint64_t v13 = (uint64_t)v26;
      *((_OWORD *)v11 + 1) = v24;
      v11[4] = v12;
      *(_OWORD *)(v11 + 5) = 0u;
      *(_OWORD *)(v11 + 7) = 0u;
      uint64_t *v11 = v13;
      v11[1] = (uint64_t)&v26;
      *(void *)(v13 + 8) = v11;
      uint64_t v26 = v11;
      ++v28;
    }
  }
  float v18 = v27;
  *(void *)&long long v24 = v27 + 2;
  *((void *)&v24 + 1) = v27;
  std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__emplace_unique_key_args<std::vector<int> const*,std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>((uint64_t)v4, (uint64_t *)&v24, &v24);
  BOOL v19 = (uint64_t *)a1[8];
  if (v19 != v18)
  {
    unint64_t v20 = (uint64_t *)v18[1];
    if (v20 != v19)
    {
      uint64_t v21 = *v18;
      *(void *)(v21 + 8) = v20;
      *(void *)v18[1] = v21;
      uint64_t v22 = *v19;
      *(void *)(v22 + 8) = v18;
      uint64_t *v18 = v22;
      *BOOL v19 = (uint64_t)v18;
      v18[1] = (uint64_t)v19;
      --v28;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear((uint64_t *)&v26);
  return v18 + 5;
}

void sub_1B1D419F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t quasar::OnlineLmRescoringDecoder::registerParams(quasar::OnlineLmRescoringDecoder *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v16, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods");
  size_t v4 = (void *)((char *)this + 448);
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v16, (uint64_t)this + 448, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "nbest-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of NBest from 1st pass used for interpolation weight estimation");
  unint64_t v5 = (_DWORD *)((char *)this + 456);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v16, (uint64_t)this + 456, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "nnlm-nce-norm-factor-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "the normalization factor for NCE trained NNLMs, use comma to separate multiple ones");
  uint64_t v6 = (char *)this + 512;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v16, (uint64_t)this + 512, (uint64_t)__p, 0, 26, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "rnnlm-max-context-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "maximal context for RNN style LM, no-op for other style of LMs");
  int8x8_t v7 = (_DWORD *)((char *)this + 564);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v16, (uint64_t)this + 564, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "big-g-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of BigGrammar FST filename, use comma to separate multiple ones");
  uint64_t v8 = (char *)this + 464;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v16, (uint64_t)this + 464, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "big-g-nnet-file-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of BigGrammar NNLM filename, use comma to separate multiple ones");
  uint64_t v9 = (char *)this + 488;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v16, (uint64_t)this + 488, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "nnet-map-file-ext");
  std::string::basic_string[abi:ne180100]<0>(__p, "the file extension name of the corresponding NNLM word map file");
  unint64_t v10 = (char *)this + 536;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v16, (uint64_t)this + 536, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map FST/NNLM models into memory (requires aligned models)");
  unint64_t v11 = (char *)this + 560;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v16, (uint64_t)this + 560, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "lattice-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "the lattice beam for the rescored lattice");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v16, (uint64_t)this + 452, (uint64_t)__p, 0, 113, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "rnnlm-empty-hyp-cost");
  std::string::basic_string[abi:ne180100]<0>(__p, "overwrite the final cost for empty hypothesis in RNN style LM");
  uint64_t v12 = (_DWORD *)((char *)this + 640);
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v16, (uint64_t)v12, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  *size_t v4 = 1065353216;
  _DWORD *v5 = 1;
  MEMORY[0x1B3EA7B20](v8, "");
  MEMORY[0x1B3EA7B20](v9, "");
  MEMORY[0x1B3EA7B20](v6, "");
  uint64_t result = MEMORY[0x1B3EA7B20](v10, "wordmap");
  unsigned char *v11 = 0;
  *int8x8_t v7 = 7;
  *uint64_t v12 = -1082130432;
  return result;
}

void sub_1B1D41F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLmRescoringDecoder::finishInit(quasar::OnlineLmRescoringDecoder *this)
{
  v63[4] = *MEMORY[0x1E4F143B8];
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 464), ",", 1, (uint64_t)&v59);
  uint64_t v2 = v59;
  uint64_t v3 = v60;
  if (v59 != v60)
  {
    size_t v4 = (void *)((char *)this + 592);
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v56, "");
      MultiChainMultiAudioBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      v63[0] = &unk_1F0A5B728;
      v63[1] = this;
      v63[3] = v63;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::loadMasterLmOrCreatePlaceholder(v2, (uint64_t)&v56, MultiChainMultiAudioBuffer, (uint64_t)v63, __p);
      uint64_t v6 = (_OWORD *)*((void *)this + 75);
      unint64_t v7 = *((void *)this + 76);
      if ((unint64_t)v6 >= v7)
      {
        uint64_t v8 = ((uint64_t)v6 - *v4) >> 4;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v7 - *v4;
        if (v10 >> 3 > v9) {
          unint64_t v9 = v10 >> 3;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        *(void *)&long long v41 = (char *)this + 608;
        uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 608, v11);
        uint64_t v13 = &v12[16 * v8];
        *(void *)&long long v39 = v12;
        *((void *)&v39 + 1) = v13;
        *((void *)&v40 + 1) = &v12[16 * v14];
        *(_OWORD *)uint64_t v13 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v40 = v13 + 16;
        std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__swap_out_circular_buffer((uint64_t *)this + 74, &v39);
        uint64_t v15 = *((void *)this + 75);
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v39);
        uint64_t v16 = (std::__shared_weak_count *)__p[1];
        *((void *)this + 75) = v15;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
      }
      else
      {
        *uint64_t v6 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        *((void *)this + 75) = v6 + 1;
      }
      std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__value_func[abi:ne180100](v63);
      if (SHIBYTE(v58) < 0) {
        operator delete(v56);
      }
      v2 += 24;
    }
    while (v2 != v3);
  }
  long long v56 = 0;
  int v57 = 0;
  uint64_t v58 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 488), ",", 1, (uint64_t)&v56);
  if (*((char *)this + 535) < 0) {
    uint64_t v17 = *((void *)this + 65);
  }
  else {
    uint64_t v17 = *((unsigned __int8 *)this + 535);
  }
  if (v17)
  {
    if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 512, ",", 1, (void *)this + 71) & 1) == 0)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Could not read the NNLM normalization factor info", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v39);
    }
    BOOL v19 = v56;
    float v18 = v57;
    if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v57 - (unsigned char *)v56) >> 3) != (uint64_t)(*((void *)this + 72)
                                                                                - *((void *)this + 71)) >> 2)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"the number of NNLM files and the number of NNLM norm factors do not match", 73);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v39);
    }
  }
  else
  {
    LODWORD(v39) = 0;
    std::vector<float>::assign((char **)this + 71, 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v57 - (unsigned char *)v56) >> 3), &v39);
    BOOL v19 = v56;
    float v18 = v57;
  }
  if (v18 != v19)
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    uint64_t v22 = (void *)((char *)this + 616);
    do
    {
      uint64_t v23 = *(unsigned int *)(*((void *)this + 71) + 4 * v21);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      long long v24 = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      v62[0] = &unk_1F0A5B780;
      v62[1] = this;
      v62[2] = v23;
      v62[3] = v62;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder((uint64_t)v19 + v20, (uint64_t)__p, v24, (uint64_t)v62, &v38);
      uint64_t v25 = (_OWORD *)*((void *)this + 78);
      unint64_t v26 = *((void *)this + 79);
      if ((unint64_t)v25 >= v26)
      {
        uint64_t v27 = ((uint64_t)v25 - *v22) >> 4;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = v26 - *v22;
        if (v29 >> 3 > v28) {
          unint64_t v28 = v29 >> 3;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        *(void *)&long long v41 = (char *)this + 632;
        BOOL v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 632, v30);
        uint64_t v32 = &v31[16 * v27];
        *(void *)&long long v39 = v31;
        *((void *)&v39 + 1) = v32;
        *((void *)&v40 + 1) = &v31[16 * v33];
        *(_OWORD *)uint64_t v32 = v38;
        long long v38 = 0uLL;
        *(void *)&long long v40 = v32 + 16;
        std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__swap_out_circular_buffer((uint64_t *)this + 77, &v39);
        uint64_t v34 = *((void *)this + 78);
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v39);
        BOOL v35 = (std::__shared_weak_count *)*((void *)&v38 + 1);
        *((void *)this + 78) = v34;
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
      }
      else
      {
        *uint64_t v25 = v38;
        long long v38 = 0uLL;
        *((void *)this + 78) = v25 + 1;
      }
      std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__value_func[abi:ne180100](v62);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      ++v21;
      BOOL v19 = v56;
      v20 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v57 - (unsigned char *)v56) >> 3) > v21);
  }
  *(void *)&long long v39 = &v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  *(void *)&long long v39 = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
}

void sub_1B1D42494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::loadMasterLmOrCreatePlaceholder(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (quasar::isPlaceholder((unsigned __int8 *)a1))
  {
    if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*a3, a3[1], (unsigned __int8 **)a1) == a3[1])
    {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      if (v11)
      {
        long long v41 = 0uLL;
        long long v42 = 0uLL;
        long long v39 = 0uLL;
        long long v40 = 0uLL;
        long long v37 = 0uLL;
        long long v38 = 0uLL;
        long long v35 = 0uLL;
        long long v36 = 0uLL;
        long long v33 = 0uLL;
        long long v34 = 0uLL;
        long long v31 = 0uLL;
        long long v32 = 0uLL;
        long long v29 = 0uLL;
        long long v30 = 0uLL;
        long long v27 = 0uLL;
        long long v28 = 0uLL;
        *(_OWORD *)std::string __p = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Placeholder ", 12);
        int v17 = *(char *)(a1 + 23);
        if (v17 >= 0) {
          float v18 = (unsigned __int8 *)a1;
        }
        else {
          float v18 = *(unsigned __int8 **)a1;
        }
        if (v17 >= 0) {
          uint64_t v19 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v19 = *(void *)(a1 + 8);
        }
        uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for template ", 14);
        int v21 = *(char *)(a2 + 23);
        if (v21 >= 0) {
          uint64_t v14 = a2;
        }
        else {
          uint64_t v14 = *(void *)a2;
        }
        if (v21 >= 0) {
          uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v15 = *(void *)(a2 + 8);
        }
      }
      else
      {
        long long v41 = 0uLL;
        long long v42 = 0uLL;
        long long v39 = 0uLL;
        long long v40 = 0uLL;
        long long v37 = 0uLL;
        long long v38 = 0uLL;
        long long v35 = 0uLL;
        long long v36 = 0uLL;
        long long v33 = 0uLL;
        long long v34 = 0uLL;
        long long v31 = 0uLL;
        long long v32 = 0uLL;
        long long v29 = 0uLL;
        long long v30 = 0uLL;
        long long v27 = 0uLL;
        long long v28 = 0uLL;
        *(_OWORD *)std::string __p = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Placeholder ", 12);
        int v13 = *(char *)(a1 + 23);
        if (v13 >= 0) {
          uint64_t v14 = a1;
        }
        else {
          uint64_t v14 = *(void *)a1;
        }
        if (v13 >= 0) {
          uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v15 = *(void *)(a1 + 8);
        }
      }
      uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" not in geo-config ", 19);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "region-dependent-variable-list");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    LOBYTE(__p[0]) = 0;
    BYTE8(v27) = 0;
    std::string::size_type v24 = 0;
    std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string const&,std::optional<std::string>,decltype(nullptr),void>((long long *)a1, (long long *)__p, a5);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    BYTE8(v27) = 0;
    uint64_t v10 = *(void *)(a4 + 24);
    if (!v10) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(std::string::size_type *__return_ptr))(*(void *)v10 + 48))(&v24);
    std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string const&,std::optional<std::string>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>((long long *)a1, (long long *)__p, &v24, a5);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
  }
  if (BYTE8(v27))
  {
    if (SBYTE7(v27) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B1D427F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (quasar::isPlaceholder((unsigned __int8 *)a1))
  {
    if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*a3, a3[1], (unsigned __int8 **)a1) == a3[1])
    {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      if (v11)
      {
        long long v41 = 0uLL;
        long long v42 = 0uLL;
        long long v39 = 0uLL;
        long long v40 = 0uLL;
        long long v37 = 0uLL;
        long long v38 = 0uLL;
        long long v35 = 0uLL;
        long long v36 = 0uLL;
        long long v33 = 0uLL;
        long long v34 = 0uLL;
        long long v31 = 0uLL;
        long long v32 = 0uLL;
        long long v29 = 0uLL;
        long long v30 = 0uLL;
        long long v27 = 0uLL;
        long long v28 = 0uLL;
        *(_OWORD *)std::string __p = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Placeholder ", 12);
        int v17 = *(char *)(a1 + 23);
        if (v17 >= 0) {
          float v18 = (unsigned __int8 *)a1;
        }
        else {
          float v18 = *(unsigned __int8 **)a1;
        }
        if (v17 >= 0) {
          uint64_t v19 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v19 = *(void *)(a1 + 8);
        }
        uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for template ", 14);
        int v21 = *(char *)(a2 + 23);
        if (v21 >= 0) {
          uint64_t v14 = a2;
        }
        else {
          uint64_t v14 = *(void *)a2;
        }
        if (v21 >= 0) {
          uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v15 = *(void *)(a2 + 8);
        }
      }
      else
      {
        long long v41 = 0uLL;
        long long v42 = 0uLL;
        long long v39 = 0uLL;
        long long v40 = 0uLL;
        long long v37 = 0uLL;
        long long v38 = 0uLL;
        long long v35 = 0uLL;
        long long v36 = 0uLL;
        long long v33 = 0uLL;
        long long v34 = 0uLL;
        long long v31 = 0uLL;
        long long v32 = 0uLL;
        long long v29 = 0uLL;
        long long v30 = 0uLL;
        long long v27 = 0uLL;
        long long v28 = 0uLL;
        *(_OWORD *)std::string __p = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Placeholder ", 12);
        int v13 = *(char *)(a1 + 23);
        if (v13 >= 0) {
          uint64_t v14 = a1;
        }
        else {
          uint64_t v14 = *(void *)a1;
        }
        if (v13 >= 0) {
          uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v15 = *(void *)(a1 + 8);
        }
      }
      uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" not in geo-config ", 19);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "region-dependent-variable-list");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    LOBYTE(__p[0]) = 0;
    BYTE8(v27) = 0;
    std::string::size_type v24 = 0;
    std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,std::string const&,std::optional<std::string>,decltype(nullptr),void>((long long *)a1, (long long *)__p, a5);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    BYTE8(v27) = 0;
    uint64_t v10 = *(void *)(a4 + 24);
    if (!v10) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(std::string::size_type *__return_ptr))(*(void *)v10 + 48))(&v24);
    std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,std::string const&,std::optional<std::string>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,void>((long long *)a1, (long long *)__p, &v24, a5);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
  }
  if (BYTE8(v27))
  {
    if (SBYTE7(v27) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B1D42AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineLmRescoringDecoder::exceedsMaxArcs()
{
  return 0;
}

uint64_t quasar::OnlineLmRescoringDecoder::runImpl(uint64_t a1, uint64_t a2, quasar::DecoderChainOutput **a3, uint64_t *a4)
{
  v71[4] = *MEMORY[0x1E4F143B8];
  BOOL v8 = quasar::DecoderChainOutput::scaleResultLattice(*a3, 1.0, *(float *)(a1 + 448), 1);
  unint64_t v9 = (uint64_t **)*((void *)*a3 + 132);
  if (v9) {
    BOOL v10 = !v8;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rescoreScaled");
    quasar::UttInfo::addResult(v9, (const void **)__p, a2, *a3);
    if (SBYTE7(v54) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(int *)(a1 + 52) < 1
    || (uint64_t v11 = *((void *)*a3 + 19)) == 0
    || (int)fst::NumArcs<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v11) <= *(_DWORD *)(a1 + 52))
  {
    unsigned int v12 = *(_DWORD *)(a1 + 48);
    if (v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = 0x20000;
    }
    uint64_t v14 = *(void *)(a2 + 456);
    if (v14)
    {
      if (*(char *)(v14 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)(v14 + 48), *(void *)(v14 + 56));
      }
      else {
        std::string v52 = *(std::string *)(v14 + 48);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v52, "");
    }
    uint64_t v15 = *(uint64_t **)(a1 + 592);
    uint64_t v44 = a1;
    for (uint64_t i = *(uint64_t **)(a1 + 600); v15 != i; v15 += 2)
    {
      uint64_t v17 = *v15;
      float v18 = *a3;
      v71[0] = &unk_1F0A5B7D8;
      int v71[3] = v71;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::resolvePlaceholder(v17, (uint64_t **)v14, (uint64_t *)v18 + 53, (uint64_t)&v52, (uint64_t)v71, 0);
      std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__value_func[abi:ne180100](v71);
    }
    uint64_t v19 = *(void *)(a2 + 456);
    if (v19) {
      uint64_t v20 = (uint64_t **)(v19 + 24);
    }
    else {
      uint64_t v20 = 0;
    }
    int v21 = *(uint64_t **)(v44 + 616);
    for (uint64_t j = *(uint64_t **)(v44 + 624); v21 != j; v21 += 2)
    {
      uint64_t v23 = *v21;
      std::string::size_type v24 = *a3;
      v70[0] = &unk_1F0A5B830;
      void v70[3] = v70;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(v23, v20, (uint64_t *)v24 + 53, (uint64_t)&v52, (uint64_t)v70, 0);
      std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__value_func[abi:ne180100](v70);
    }
    if (a2 + 472 != v44 + 592) {
      std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>(a2 + 472, *(uint64_t **)(v44 + 592), *(uint64_t **)(v44 + 600), (uint64_t)(*(void *)(v44 + 600) - *(void *)(v44 + 592)) >> 4);
    }
    if (a2 + 496 != v44 + 616) {
      std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>(a2 + 496, *(uint64_t **)(v44 + 616), *(uint64_t **)(v44 + 624), (uint64_t)(*(void *)(v44 + 624) - *(void *)(v44 + 616)) >> 4);
    }
    long long v49 = 0;
    long long v50 = 0;
    uint64_t v51 = 0;
    uint64_t v25 = (void *)*((void *)*a3 + 19);
    uint64_t v48 = v25[1];
    ++*(_DWORD *)(v48 + 56);
    v47[33] = &unk_1F0A46010;
    quasar::OnlineLmRescoringDecoder::rescoreLatticeWithLanguageModels(a2, (uint64_t *)a3, *a4, *(_DWORD *)(v44 + 456), v25, (uint64_t *)&v49, 1, 0, v13, *(_DWORD *)(v44 + 52));
    if (*(int *)(v44 + 52) >= 1) {
      fst::NumArcs<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(*((void *)*a3 + 19));
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Rescoring ok=", 13);
      unint64_t v26 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" inputArcs=", 11);
      long long v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" outputArcs=", 12);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"The rescoring LM interpolation weights:", 39);
    memset(&v46, 0, sizeof(v46));
    long long v28 = (float *)v49;
    long long v29 = v50;
    if (v49 != v50)
    {
      do
      {
        std::to_string(&v45, *v28);
        std::vector<std::string>::pointer end = v46.__end_;
        if (v46.__end_ >= v46.__end_cap_.__value_)
        {
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_ - (char *)v46.__begin_) >> 3);
          unint64_t v33 = v32 + 1;
          if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) > v33) {
            unint64_t v33 = 0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v34 = v33;
          }
          *(void *)&long long v55 = &v46.__end_cap_;
          if (v34) {
            long long v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v46.__end_cap_, v34);
          }
          else {
            long long v35 = 0;
          }
          long long v36 = &v35[24 * v32];
          __p[0] = v35;
          __p[1] = v36;
          *((void *)&v54 + 1) = &v35[24 * v34];
          long long v37 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
          *((void *)v36 + 2) = *((void *)&v45.__r_.__value_.__l + 2);
          *(_OWORD *)long long v36 = v37;
          memset(&v45, 0, sizeof(v45));
          *(void *)&long long v54 = v36 + 24;
          std::vector<std::string>::__swap_out_circular_buffer(&v46, (std::__split_buffer<std::string> *)__p);
          long long v38 = v46.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
          v46.__end_ = v38;
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v45.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v31 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
          v46.__end_->__r_.__value_.__r.__words[2] = v45.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v31;
          v46.__end_ = end + 1;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" ", 1);
        std::ostream::operator<<();
        ++v28;
      }
      while (v28 != v29);
    }
    if (quasar::gLogLevel > 3)
    {
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::stringbuf::str();
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v39 = &v45;
      }
      else {
        long long v39 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v45.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v39, size);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)",";
    v45.__r_.__value_.__l.__size_ = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v46, (uint64_t *)&v45);
    uint64_t v41 = (uint64_t)*a3 + 1032;
    if (*((char *)*a3 + 1055) < 0) {
      operator delete(*(void **)v41);
    }
    *(_OWORD *)uint64_t v41 = *(_OWORD *)__p;
    *(void *)(v41 + 16) = v54;
    float v42 = *(float *)(v44 + 452);
    if (v42 > 0.0) {
      kaldi::PruneLattice<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>(*((void **)*a3 + 19), v42);
    }
    fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst();
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Skip rescoring: inputArcs=", 26);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  return 2 * *(unsigned __int8 *)(a1 + 56);
}

void sub_1B1D4352C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,std::__split_buffer<std::wstring> *a61,void *__pa,void *a63)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a71);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&a18);
  a18 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  std::ostringstream::~ostringstream((uint64_t)&a24);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&a60);
  if (__pa)
  {
    a63 = __pa;
    operator delete(__pa);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLmRescoringDecoder::rescoreLatticeWithLanguageModels(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, void *a5, uint64_t *a6, char a7, int a8, unint64_t a9, unsigned int a10)
{
  quasar::DecoderPassData::getLeftContextLabels(a1, *(void *)(*a2 + 472), (void *)(a1 + 696), *(void *)(a1 + 216) + 32, (char **)v111);
  if (quasar::gLogLevel >= 4)
  {
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v94 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v94);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v94, (uint64_t)"Rescoring with ", 15);
    float v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" symbol(s) for left context from ", 33);
    uint64_t v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" word(s)", 8);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v94);
  }
  int v76 = a5;
  int v73 = a8;
  char v74 = a7;
  int v75 = a6;
  int v93 = 1065353216;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  unint64_t v92 = 0;
  uint64_t v87 = 0;
  v88 = 0;
  unint64_t v89 = 0;
  uint64_t v20 = *(uint64_t **)(a1 + 248);
  for (uint64_t i = *(uint64_t **)(a1 + 256); v20 != i; v20 += 2)
  {
    uint64_t v22 = *v20;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v22, (uint64_t)&__p, &v82);
    uint64_t v23 = v91;
    if ((unint64_t)v91 >= v92)
    {
      uint64_t v24 = ((uint64_t)v91 - v90) >> 4;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v26 = v92 - v90;
      if ((uint64_t)(v92 - v90) >> 3 > v25) {
        unint64_t v25 = v26 >> 3;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      *(void *)&long long v96 = &v92;
      long long v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v92, v27);
      long long v29 = &v28[16 * v24];
      *(void *)&long long v94 = v28;
      *((void *)&v94 + 1) = v29;
      *((void *)&v95 + 1) = &v28[16 * v30];
      *(_OWORD *)long long v29 = v82;
      long long v82 = 0uLL;
      *(void *)&long long v95 = v29 + 16;
      std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__swap_out_circular_buffer(&v90, &v94);
      long long v31 = v91;
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v94);
      uint64_t v91 = v31;
      if (*((void *)&v82 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v82 + 1));
      }
    }
    else
    {
      *uint64_t v91 = v82;
      long long v82 = 0uLL;
      uint64_t v91 = v23 + 1;
    }
    if (SHIBYTE(v86) < 0) {
      operator delete(__p);
    }
  }
  unint64_t v32 = *(uint64_t **)(a1 + 472);
  for (uint64_t j = *(uint64_t **)(a1 + 480); v32 != j; v32 += 2)
  {
    uint64_t v34 = *v32;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v34, (uint64_t)&__p, &v82);
    long long v35 = v88;
    if ((unint64_t)v88 >= v89)
    {
      uint64_t v36 = ((uint64_t)v88 - v87) >> 4;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v38 = v89 - v87;
      if ((uint64_t)(v89 - v87) >> 3 > v37) {
        unint64_t v37 = v38 >> 3;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      *(void *)&long long v96 = &v89;
      long long v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v89, v39);
      uint64_t v41 = &v40[16 * v36];
      *(void *)&long long v94 = v40;
      *((void *)&v94 + 1) = v41;
      *((void *)&v95 + 1) = &v40[16 * v42];
      *(_OWORD *)uint64_t v41 = v82;
      long long v82 = 0uLL;
      *(void *)&long long v95 = v41 + 16;
      std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__swap_out_circular_buffer(&v87, &v94);
      long long v43 = v88;
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v94);
      v88 = v43;
      if (*((void *)&v82 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v82 + 1));
      }
    }
    else
    {
      _OWORD *v88 = v82;
      long long v82 = 0uLL;
      v88 = v35 + 1;
    }
    if (SHIBYTE(v86) < 0) {
      operator delete(__p);
    }
  }
  std::string __p = 0;
  unint64_t v85 = 0;
  unint64_t v86 = 0;
  long long v82 = 0uLL;
  v83[0] = 0;
  uint64_t v44 = *(uint64_t **)(a1 + 272);
  for (uint64_t k = *(uint64_t **)(a1 + 280); v44 != k; v44 += 2)
  {
    uint64_t v46 = *v44;
    std::string::basic_string[abi:ne180100]<0>(v79, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v46, (uint64_t)v79, &v81);
    long long v47 = v85;
    if ((unint64_t)v85 >= v86)
    {
      uint64_t v48 = (v85 - (unsigned char *)__p) >> 4;
      unint64_t v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v50 = v86 - (void)__p;
      if ((uint64_t)(v86 - (void)__p) >> 3 > v49) {
        unint64_t v49 = v50 >> 3;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v49;
      }
      *(void *)&long long v96 = &v86;
      std::string v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v86, v51);
      long long v53 = &v52[16 * v48];
      *(void *)&long long v94 = v52;
      *((void *)&v94 + 1) = v53;
      *((void *)&v95 + 1) = &v52[16 * v54];
      *(_OWORD *)long long v53 = v81;
      long long v81 = 0uLL;
      *(void *)&long long v95 = v53 + 16;
      std::vector<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::__swap_out_circular_buffer((uint64_t *)&__p, &v94);
      long long v55 = v85;
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v94);
      unint64_t v85 = v55;
      if (*((void *)&v81 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v81 + 1));
      }
    }
    else
    {
      *(_OWORD *)unint64_t v85 = v81;
      long long v81 = 0uLL;
      unint64_t v85 = v47 + 16;
    }
    if (v80 < 0) {
      operator delete(v79[0]);
    }
  }
  long long v56 = *(uint64_t **)(a1 + 496);
  for (uint64_t m = *(uint64_t **)(a1 + 504); v56 != m; v56 += 2)
  {
    uint64_t v58 = *v56;
    std::string::basic_string[abi:ne180100]<0>(v79, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v58, (uint64_t)v79, &v81);
    uint64_t v59 = *((void *)&v82 + 1);
    if (*((void *)&v82 + 1) >= v83[0])
    {
      uint64_t v60 = (uint64_t)(*((void *)&v82 + 1) - v82) >> 4;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v62 = v83[0] - v82;
      if ((uint64_t)(v83[0] - v82) >> 3 > v61) {
        unint64_t v61 = v62 >> 3;
      }
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v63 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v63 = v61;
      }
      *(void *)&long long v96 = v83;
      long long v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v83, v63);
      long long v65 = &v64[16 * v60];
      *(void *)&long long v94 = v64;
      *((void *)&v94 + 1) = v65;
      *((void *)&v95 + 1) = &v64[16 * v66];
      *(_OWORD *)long long v65 = v81;
      long long v81 = 0uLL;
      *(void *)&long long v95 = v65 + 16;
      std::vector<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::__swap_out_circular_buffer((uint64_t *)&v82, &v94);
      uint64_t v67 = *((void *)&v82 + 1);
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v94);
      *((void *)&v82 + 1) = v67;
      if (*((void *)&v81 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v81 + 1));
      }
    }
    else
    {
      **((_OWORD **)&v82 + 1) = v81;
      long long v81 = 0uLL;
      *((void *)&v82 + 1) = v59 + 16;
    }
    if (v80 < 0) {
      operator delete(v79[0]);
    }
  }
  uint64_t v68 = *(void *)(a3 + 24);
  uint64_t v69 = *(void *)(a1 + 392);
  if (v69)
  {
    std::string::basic_string[abi:ne180100]<0>(v79, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v69, (uint64_t)v79, &v77);
  }
  else
  {
    uint64_t v77 = 0;
    BOOL v78 = 0;
  }
  uint64_t v70 = kaldi::quasar::RescoreLatticeWithLanguageModels(v76, &v90, &v87, (uint64_t *)&__p, (uint64_t *)&v82, (uint64_t **)(v68 + 272), (uint64_t *)(a1 + 320), a1 + 408, (__int32 **)(a1 + 344), &v77, *(_DWORD *)(a1 + 448), a1 + 296, v75, (float *)&v93, 0, 0, v111, a4, v74,
          v73,
          0x40000000u,
          a9,
          a10,
          (void *)(*a2 + 640));
  if (v69)
  {
    if (v78) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v78);
    }
    if (v80 < 0) {
      operator delete(v79[0]);
    }
  }
  else if (v78)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v78);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v94 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v94);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v94, (uint64_t)"Total LM cost after rescoring = ", 32);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v94);
  }
  uint64_t v71 = *a2;
  *(_DWORD *)(v71 + 632) = v93;
  *(unsigned char *)(v71 + 628) = 1;
  *(void *)&long long v94 = &v82;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
  *(void *)&long long v94 = &__p;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
  *(void *)&long long v94 = &v87;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
  *(void *)&long long v94 = &v90;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
  if (v111[0])
  {
    v111[1] = v111[0];
    operator delete(v111[0]);
  }
  return v70;
}

void sub_1B1D43E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void ***a36,uint64_t a37,void **a38,uint64_t a39,uint64_t a40,uint64_t a41,char **a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char *a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  a36 = &a38;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  a38 = (void **)&a42;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a38);
  a42 = &a48;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  a48 = &a51;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  long long v57 = *(void **)(v55 - 136);
  if (v57)
  {
    *(void *)(v55 - 128) = v57;
    operator delete(v57);
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineLmRescoringDecoder::clearCaches(quasar::OnlineLmRescoringDecoder *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 77);
  for (uint64_t i = (uint64_t *)*((void *)this + 78); v1 != i; v1 += 2)
  {
    uint64_t v3 = *v1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v3, (uint64_t)__p, &v6);
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B1D44060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineLmRescoringDecoder::supportsEager(quasar::OnlineLmRescoringDecoder *this)
{
  return 1;
}

void quasar::OnlineLmRescoringDecoder::~OnlineLmRescoringDecoder(quasar::OnlineLmRescoringDecoder *this)
{
  quasar::OnlineLmRescoringDecoder::~OnlineLmRescoringDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_1F0A56C38;
  uint64_t v3 = (void **)((char *)this + 616);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 592);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 71);
  if (v2)
  {
    *((void *)this + 72) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  if (*((char *)this + 535) < 0) {
    operator delete(*((void **)this + 64));
  }
  if (*((char *)this + 511) < 0) {
    operator delete(*((void **)this + 61));
  }
  if (*((char *)this + 487) < 0) {
    operator delete(*((void **)this + 58));
  }
  quasar::Decoder::~Decoder(this);
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string const&,std::optional<std::string>,decltype(nullptr),void>@<X0>(long long *a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (std::string *)operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,decltype(nullptr),std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_1B1D441F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,decltype(nullptr),std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(std::string *a1, long long *a2, long long *a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5FE28;
  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::string const&,std::optional<std::string>,decltype(nullptr)>((int)&v5, a1 + 1, a2, a3);
  return a1;
}

void sub_1B1D44268(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::string const&,std::optional<std::string>,decltype(nullptr)>(int a1, std::string *this, long long *a3, long long *a4)
{
  std::string::size_type v4 = 0;
  char v5 = 0;
  quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RegionalLmPlug(this, a3, a4, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1B1D442C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string const&,std::optional<std::string>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>@<X0>(long long *a1@<X1>, long long *a2@<X2>, std::string::size_type *a3@<X3>, void *a4@<X8>)
{
  BOOL v8 = (std::string *)operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_1B1D44340(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(std::string *a1, long long *a2, long long *a3, std::string::size_type *a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5FE28;
  quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RegionalLmPlug(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_1B1D4439C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A5B728;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5B728;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 368) + 16))();
}

uint64_t std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target_type()
{
}

uint64_t std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,std::string const&,std::optional<std::string>,decltype(nullptr),void>@<X0>(long long *a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (std::string *)operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,decltype(nullptr),std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_1B1D4458C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,decltype(nullptr),std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,0>(std::string *a1, long long *a2, long long *a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5FE60;
  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::string const&,std::optional<std::string>,decltype(nullptr)>((int)&v5, a1 + 1, a2, a3);
  return a1;
}

void sub_1B1D44604(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::string const&,std::optional<std::string>,decltype(nullptr)>(int a1, std::string *this, long long *a3, long long *a4)
{
  std::string::size_type v4 = 0;
  char v5 = 0;
  quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::RegionalLmPlug(this, a3, a4, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1B1D44664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,std::string const&,std::optional<std::string>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,void>@<X0>(long long *a1@<X1>, long long *a2@<X2>, std::string::size_type *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = (std::string *)operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_1B1D446DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,0>(std::string *a1, long long *a2, long long *a3, std::string::size_type *a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5FE60;
  quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::RegionalLmPlug(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_1B1D44738(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5B780;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5B780;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, kaldi::InferenceNetItf **a3@<X8>)
{
}

uint64_t std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

uint64_t std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A5B7D8;
  return result;
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5B7D8;
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::operator()(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A5B830;
  return result;
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5B830;
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::operator()(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target_type()
{
}

void std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100]((void *)a1, v12);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)&v20, a2, v15, v9);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B1D44BC8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1D44BD0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100]((void *)a1, v12);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)&v20, a2, v15, v9);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B1D44D1C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1D44D24(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *kaldi::CharToString@<X0>(kaldi *this@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(char *)this;
  if ((v4 & 0x80000000) != 0) {
    int v5 = __maskrune(v4, 0x40000uLL);
  }
  else {
    int v5 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v4 + 60) & 0x40000;
  }
  if (v5) {
    snprintf(__str, 0x14uLL, "'%c'");
  }
  else {
    snprintf(__str, 0x14uLL, "[character %d]");
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

kaldi::quasar::DnnlmEvaluator *kaldi::quasar::DnnlmEvaluator::DnnlmEvaluator(kaldi::quasar::DnnlmEvaluator *this, const kaldi::quasar::NnlmDecoderWord *a2, kaldi::InferenceNetItf *a3, kaldi::InferenceNetItf *a4, float a5, int a6, int a7)
{
  *(void *)this = &unk_1F0A50C08;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) = kaldi::quasar::CEAttnEncoderDecoder::MaxEncoderSize(a2);
  *(void *)this = &unk_1F0A504B0;
  *((void *)this + 3) = a3;
  *((void *)this + 4) = a4;
  *((unsigned char *)this + 40) = 0;
  *((float *)this + 11) = a5;
  *((void *)this + 6) = a6;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,float>,void *>,kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,float>,void *>>>>::unordered_map((uint64_t)this + 56, 0, (char *)&v16, v22);
  *((void *)this + 13) = (char *)this + 104;
  *((void *)this + 14) = (char *)this + 104;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 15) = 0;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>>>>::unordered_map((uint64_t)this + 144, 0, (char *)&v16, v22);
  *((void *)this + 24) = (char *)this + 192;
  *((void *)this + 25) = (char *)this + 192;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>,kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>>>>::unordered_map((uint64_t)this + 224, 0, (char *)&v16, v22);
  *((void *)this + 34) = (char *)this + 272;
  *((void *)this + 35) = (char *)this + 272;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  char v13 = (const void *)*((void *)this + 3);
  if (!v13
  {
    uint64_t v16 = a7;
    std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>>>>::unordered_map((uint64_t)v17, 0, v22, &v21);
    uint64_t v18 = (uint64_t)&v18;
    uint64_t v19 = &v18;
    uint64_t v20 = 0;
    *((void *)this + 17) = v16;
    std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::__move_assign((uint64_t)this + 144, v17);
    std::list<std::pair<std::vector<int>,kaldi::CuVector<float>>>::__move_assign((uint64_t *)this + 24, &v18);
    std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear(&v18);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v17);
LABEL_8:
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"the NCE normalization factor is ", 32);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v16);
    }
    return this;
  }
  long long v14 = (const void *)*((void *)this + 4);
  if (v14
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"dynamic_cast<CEInferenceNet* const>(extra_nnet_) != nullptr", 59);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v16);
  }
  *((unsigned char *)this + 40) = 1;
  uint64_t v16 = a7;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>,kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>>>>::unordered_map((uint64_t)v17, 0, v22, &v21);
  uint64_t v18 = (uint64_t)&v18;
  uint64_t v19 = &v18;
  uint64_t v20 = 0;
  *((void *)this + 27) = v16;
  std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::__move_assign((uint64_t)this + 224, v17);
  std::list<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__move_assign((uint64_t *)this + 34, &v18);
  std::__list_imp<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear(&v18);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v17);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Backed by either TensorFlow or Espresso.", 40);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v16);
    goto LABEL_8;
  }
  return this;
}

void kaldi::quasar::DnnlmEvaluator::~DnnlmEvaluator(kaldi::quasar::DnnlmEvaluator *this)
{
  *(void *)this = &unk_1F0A504B0;
  uint64_t v2 = (char *)this + 224;
  std::__list_imp<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear((uint64_t *)this + 34);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v2);
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear((uint64_t *)this + 24);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 144);
  std::__list_imp<std::pair<std::vector<int>,float>>::clear((uint64_t *)this + 13);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 56);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::quasar::DnnlmEvaluator::~DnnlmEvaluator(this);
  JUMPOUT(0x1B3EA8670);
}

float kaldi::quasar::DnnlmEvaluator::PrepareContext(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v7 = (v5 - *a2) >> 2;
  kaldi::CuVector<float>::Resize(a3, v7, 1);
  if (v5 != v6)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = *a2;
    uint64_t v12 = (a2[1] - *a2) >> 2;
    if (v7 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v7;
    }
    do
    {
      if (v12 == v10) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      float result = (float)*(int *)(v11 + 4 * v10);
      *(float *)(*(void *)(a3 + 8) + (v9 >> 30)) = result;
      ++v10;
      v9 += 0x100000000;
    }
    while (v13 != v10);
  }
  return result;
}

float kaldi::quasar::DnnlmEvaluator::CalculateSingleNgram(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    unint64_t v7 = 0;
    if (kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(a1 + 48, a2, &v7))
    {
      float result = *v7;
      ++*(_DWORD *)(a1 + 128);
    }
    else
    {
      ++*(_DWORD *)(a1 + 132);
      float result = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2);
      float v6 = result;
      if (*(void *)(a1 + 48))
      {
        kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Insert(std::vector<int> const&,float const&)::{lambda(float &)#1}>((unint64_t *)(a1 + 48), a2, (int *)&v6);
        return v6;
      }
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 132);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40);
    v5(a1, a2);
  }
  return result;
}

float kaldi::quasar::DnnlmEvaluator::CalculateSingleNgramAfterCacheMiss(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8) - 4;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v4, v5, (v5 - (uint64_t)v4) >> 2);
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v17 = 0;
    BOOL v8 = kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(a1 + 136, (uint64_t)&__p, &v17);
    if (!v8)
    {
      uint64_t v17 = kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace((unint64_t *)(a1 + 136), (uint64_t)&__p);
      memset(&v16[1], 0, 24);
      v16[0] = (uint64_t *)&unk_1F0A517C0;
      float v9 = kaldi::quasar::DnnlmEvaluator::PrepareContext((uint64_t)v17, (uint64_t *)&__p, (uint64_t)v16);
      (*(void (**)(void, uint64_t **, uint64_t *, uint64_t, float))(**(void **)(a1 + 24) + 104))(*(void *)(a1 + 24), v16, v17, 1, v9);
      kaldi::CuVector<float>::~CuVector(v16);
    }
    float v10 = (*(float (**)(void, uint64_t *, void))(**(void **)(a1 + 24) + 136))(*(void *)(a1 + 24), v17, *(unsigned int *)(*(void *)(a2 + 8) - 4))- *(float *)(a1 + 44);
    if (v8) {
      goto LABEL_15;
    }
LABEL_7:
    ++*(_DWORD *)(a1 + 300);
    goto LABEL_16;
  }
  float v6 = *(const void **)(a1 + 24);
  if (v6) {
  else
  }
    unint64_t v7 = 0;
  v16[0] = 0;
  BOOL v11 = kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(a1 + 216, (uint64_t)&__p, v16);
  if (!v11)
  {
    v16[0] = kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace((unint64_t *)(a1 + 216), (uint64_t)&__p);
    kaldi::quasar::CEInferenceNet::Feedforward((uint64_t)v7, (uint64_t *)&__p, v16[0], 1);
  }
  uint64_t v12 = *(const void **)(a1 + 32);
  if (v12)
  {
    float UnitOutput = kaldi::quasar::CEInferenceNet::GetUnitOutput((uint64_t)v13, v16[0], *(_DWORD *)(*(void *)(a2 + 8) - 4));
  }
  else
  {
    float UnitOutput = kaldi::quasar::CEInferenceNet::GetUnitOutput((uint64_t)v7, v16[0], *(_DWORD *)(*(void *)(a2 + 8) - 4));
  }
  float v10 = UnitOutput - *(float *)(a1 + 44);
  if (!v11) {
    goto LABEL_7;
  }
LABEL_15:
  ++*(_DWORD *)(a1 + 296);
LABEL_16:
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  return -v10;
}

void sub_1B1D45820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>((void *)(a1 + 8), v9);
  float v6 = v5;
  if (v5)
  {
    unint64_t v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(unint64_t *a1, uint64_t a2)
{
  if (!*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "capacity_ > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>&)#1}>(a1, a2);
}

BOOL kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>((void *)(a1 + 8), v9);
  float v6 = v5;
  if (v5)
  {
    unint64_t v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(unint64_t *a1, uint64_t a2)
{
  if (!*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "capacity_ > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(kaldi::CuVector<float>&)#1}>(a1, a2);
}

void kaldi::quasar::DnnlmEvaluator::ClearCaches(kaldi::quasar::DnnlmEvaluator *this)
{
  kaldi::quasar::NnlmEvaluatorBase::ClearCaches(this);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"HIT vs MISS: ", 13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"lm-score ", 9);
    uint64_t v3 = (void *)std::ostream::operator<<();
    char v7 = 47;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v7, 1);
    unsigned int v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", penultimate cache ", 20);
    uint64_t v5 = (void *)std::ostream::operator<<();
    char v7 = 47;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v7, 1);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v6);
  }
  *((void *)this + 16) = 0;
  *((void *)this + 37) = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)this + 7);
  std::__list_imp<std::pair<std::vector<int>,float>>::clear((uint64_t *)this + 13);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)this + 18);
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear((uint64_t *)this + 24);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)this + 28);
  std::__list_imp<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear((uint64_t *)this + 34);
}

void sub_1B1D45B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t std::list<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__move_assign(uint64_t *a1, void *a2)
{
  return std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice((uint64_t)a1, a1, a2);
}

void std::__list_imp<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::list<std::pair<std::vector<int>,kaldi::CuVector<float>>>::__move_assign(uint64_t *a1, void *a2)
{
  return std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice((uint64_t)a1, a1, a2);
}

void std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,kaldi::CuVector<float>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,kaldi::CuVector<float>>,0>(uint64_t a1)
{
  kaldi::CuVector<float>::~CuVector((void *)(a1 + 24));
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void std::__list_imp<std::pair<std::vector<int>,float>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      uint64_t v5 = (uint64_t *)v2[1];
      std::__list_imp<std::pair<std::vector<int>,float>>::__delete_node[abi:ne180100]<>((int)a1, v2);
      uint64_t v2 = v5;
    }
  }
}

void std::__list_imp<std::pair<std::vector<int>,float>>::__delete_node[abi:ne180100]<>(int a1, void *__p)
{
  uint64_t v3 = (void *)__p[2];
  if (v3)
  {
    __p[3] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

uint64_t std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,float>,void *>,kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,float>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5 = *a3;
  char v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1D45EBC(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5 = *a3;
  char v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1D45F18(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>,kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5 = *a3;
  char v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1D45F74(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  char v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>((void *)(a1 + 8), v9);
  char v6 = v5;
  if (v5)
  {
    char v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Insert(std::vector<int> const&,float const&)::{lambda(float &)#1}>(unint64_t *a1, uint64_t a2, int *a3)
{
  unint64_t v32 = (uint64_t *)&v32;
  unint64_t v33 = (uint64_t *)&v32;
  uint64_t v34 = 0;
  char v6 = a1 + 1;
  *(void *)&long long v30 = a2;
  char v7 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(a1 + 1, (uint64_t *)&v30);
  if (v7)
  {
    BOOL v8 = (uint64_t *)v7[3];
    if (&v32 != (uint64_t **)v8)
    {
      float v9 = (uint64_t *)v8[1];
      if (v9 != (uint64_t *)&v32)
      {
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = v9;
        *(void *)v8[1] = v10;
        uint64_t v11 = (uint64_t)v32;
        v32[1] = (uint64_t)v8;
        *BOOL v8 = v11;
        v8[1] = (uint64_t)&v32;
        --a1[9];
        unint64_t v32 = v8;
        ++v34;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v6, v7);
  }
  else
  {
    unint64_t v12 = a1[9];
    if (v12 >= *a1)
    {
      uint64_t v16 = (uint64_t *)a1[7];
      if (&v32 != (uint64_t **)v16)
      {
        uint64_t v17 = (uint64_t *)v16[1];
        if (v17 != (uint64_t *)&v32)
        {
          uint64_t v18 = *v16;
          *(void *)(v18 + 8) = v17;
          *(void *)v16[1] = v18;
          uint64_t v19 = (uint64_t)v32;
          v32[1] = (uint64_t)v16;
          uint64_t *v16 = v19;
          v16[1] = (uint64_t)&v32;
          a1[9] = v12 - 1;
          unint64_t v32 = v16;
          ++v34;
        }
      }
      *(void *)&long long v30 = v33 + 2;
      std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__erase_unique<std::vector<int> const*>(v6, (uint64_t *)&v30);
      if (v33 + 2 != (uint64_t *)a2) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v33 + 16, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      }
    }
    else
    {
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      uint64_t v13 = (uint64_t *)operator new(0x30uLL);
      uint64_t v14 = v31;
      uint64_t v15 = (uint64_t)v32;
      *((_OWORD *)v13 + 1) = v30;
      v13[4] = v14;
      *((_DWORD *)v13 + 10) = 0;
      *uint64_t v13 = v15;
      v13[1] = (uint64_t)&v32;
      *(void *)(v15 + 8) = v13;
      unint64_t v32 = v13;
      ++v34;
    }
  }
  uint64_t v20 = v33;
  char v21 = v33 + 2;
  int v22 = *a3;
  uint64_t v23 = v33;
  *((_DWORD *)v33 + 10) = v22;
  uint64_t v24 = v23 + 5;
  *(void *)&long long v30 = v21;
  *((void *)&v30 + 1) = v20;
  std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__emplace_unique_key_args<std::vector<int> const*,std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>((uint64_t)v6, (uint64_t *)&v30, &v30);
  unint64_t v25 = (uint64_t *)a1[8];
  if (v25 != v20)
  {
    uint64_t v26 = (uint64_t *)v20[1];
    if (v26 != v25)
    {
      uint64_t v27 = *v20;
      *(void *)(v27 + 8) = v26;
      *(void *)v20[1] = v27;
      uint64_t v28 = *v25;
      *(void *)(v28 + 8) = v20;
      *uint64_t v20 = v28;
      *unint64_t v25 = (uint64_t)v20;
      v20[1] = (uint64_t)v25;
      --v34;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::vector<int>,float>>::clear((uint64_t *)&v32);
  return v24;
}

void sub_1B1D46278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>&)#1}>(unint64_t *a1, uint64_t a2)
{
  uint64_t v26 = (uint64_t *)&v26;
  uint64_t v27 = (uint64_t *)&v26;
  uint64_t v28 = 0;
  uint64_t v4 = a1 + 1;
  *(void *)&long long v24 = a2;
  char v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(a1 + 1, (uint64_t *)&v24);
  if (v5)
  {
    char v6 = (uint64_t *)v5[3];
    if (&v26 != (uint64_t **)v6)
    {
      char v7 = (uint64_t *)v6[1];
      if (v7 != (uint64_t *)&v26)
      {
        uint64_t v8 = *v6;
        *(void *)(v8 + 8) = v7;
        *(void *)v6[1] = v8;
        uint64_t v9 = (uint64_t)v26;
        v26[1] = (uint64_t)v6;
        *char v6 = v9;
        v6[1] = (uint64_t)&v26;
        --a1[9];
        uint64_t v26 = v6;
        ++v28;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v4, v5);
  }
  else
  {
    unint64_t v10 = a1[9];
    if (v10 >= *a1)
    {
      uint64_t v14 = (uint64_t *)a1[7];
      if (&v26 != (uint64_t **)v14)
      {
        uint64_t v15 = (uint64_t *)v14[1];
        if (v15 != (uint64_t *)&v26)
        {
          uint64_t v16 = *v14;
          *(void *)(v16 + 8) = v15;
          *(void *)v14[1] = v16;
          uint64_t v17 = (uint64_t)v26;
          v26[1] = (uint64_t)v14;
          uint64_t *v14 = v17;
          v14[1] = (uint64_t)&v26;
          a1[9] = v10 - 1;
          uint64_t v26 = v14;
          ++v28;
        }
      }
      *(void *)&long long v24 = v27 + 2;
      std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__erase_unique<std::vector<int> const*>(v4, (uint64_t *)&v24);
      if (v27 + 2 != (uint64_t *)a2) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v27 + 16, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      }
    }
    else
    {
      long long v24 = 0uLL;
      uint64_t v25 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      uint64_t v11 = (uint64_t *)operator new(0x30uLL);
      uint64_t v12 = v25;
      uint64_t v13 = (uint64_t)v26;
      *((_OWORD *)v11 + 1) = v24;
      v11[4] = v12;
      v11[5] = 0;
      uint64_t *v11 = v13;
      v11[1] = (uint64_t)&v26;
      *(void *)(v13 + 8) = v11;
      uint64_t v26 = v11;
      ++v28;
    }
  }
  uint64_t v18 = v27;
  *(void *)&long long v24 = v27 + 2;
  *((void *)&v24 + 1) = v27;
  std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__emplace_unique_key_args<std::vector<int> const*,std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>((uint64_t)v4, (uint64_t *)&v24, &v24);
  uint64_t v19 = (uint64_t *)a1[8];
  if (v19 != v18)
  {
    uint64_t v20 = (uint64_t *)v18[1];
    if (v20 != v19)
    {
      uint64_t v21 = *v18;
      *(void *)(v21 + 8) = v20;
      *(void *)v18[1] = v21;
      uint64_t v22 = *v19;
      *(void *)(v22 + 8) = v18;
      uint64_t *v18 = v22;
      *uint64_t v19 = (uint64_t)v18;
      v18[1] = (uint64_t)v19;
      --v28;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear((uint64_t *)&v26);
  return v18 + 5;
}

void sub_1B1D464E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(kaldi::CuVector<float>&)#1}>(unint64_t *a1, uint64_t a2)
{
  uint64_t v26 = (uint64_t *)&v26;
  uint64_t v27 = (uint64_t *)&v26;
  uint64_t v28 = 0;
  uint64_t v4 = a1 + 1;
  *(void *)&long long v24 = a2;
  char v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(a1 + 1, (uint64_t *)&v24);
  if (v5)
  {
    char v6 = (uint64_t *)v5[3];
    if (&v26 != (uint64_t **)v6)
    {
      char v7 = (uint64_t *)v6[1];
      if (v7 != (uint64_t *)&v26)
      {
        uint64_t v8 = *v6;
        *(void *)(v8 + 8) = v7;
        *(void *)v6[1] = v8;
        uint64_t v9 = (uint64_t)v26;
        v26[1] = (uint64_t)v6;
        *char v6 = v9;
        v6[1] = (uint64_t)&v26;
        --a1[9];
        uint64_t v26 = v6;
        ++v28;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v4, v5);
  }
  else
  {
    unint64_t v10 = a1[9];
    if (v10 >= *a1)
    {
      uint64_t v14 = (uint64_t *)a1[7];
      if (&v26 != (uint64_t **)v14)
      {
        uint64_t v15 = (uint64_t *)v14[1];
        if (v15 != (uint64_t *)&v26)
        {
          uint64_t v16 = *v14;
          *(void *)(v16 + 8) = v15;
          *(void *)v14[1] = v16;
          uint64_t v17 = (uint64_t)v26;
          v26[1] = (uint64_t)v14;
          uint64_t *v14 = v17;
          v14[1] = (uint64_t)&v26;
          a1[9] = v10 - 1;
          uint64_t v26 = v14;
          ++v28;
        }
      }
      *(void *)&long long v24 = v27 + 2;
      std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__erase_unique<std::vector<int> const*>(v4, (uint64_t *)&v24);
      if (v27 + 2 != (uint64_t *)a2) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v27 + 16, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      }
    }
    else
    {
      long long v24 = 0uLL;
      uint64_t v25 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      uint64_t v11 = (uint64_t *)operator new(0x48uLL);
      uint64_t v13 = v25;
      uint64_t v12 = (uint64_t)v26;
      *((_OWORD *)v11 + 1) = v24;
      v11[7] = 0;
      v11[8] = 0;
      int32x2_t v11[6] = 0;
      v11[4] = v13;
      v11[5] = (uint64_t)&unk_1F0A517C0;
      uint64_t *v11 = v12;
      v11[1] = (uint64_t)&v26;
      *(void *)(v12 + 8) = v11;
      uint64_t v26 = v11;
      ++v28;
    }
  }
  uint64_t v18 = v27;
  *(void *)&long long v24 = v27 + 2;
  *((void *)&v24 + 1) = v27;
  std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__emplace_unique_key_args<std::vector<int> const*,std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>((uint64_t)v4, (uint64_t *)&v24, &v24);
  uint64_t v19 = (uint64_t *)a1[8];
  if (v19 != v18)
  {
    uint64_t v20 = (uint64_t *)v18[1];
    if (v20 != v19)
    {
      uint64_t v21 = *v18;
      *(void *)(v21 + 8) = v20;
      *(void *)v18[1] = v21;
      uint64_t v22 = *v19;
      *(void *)(v22 + 8) = v18;
      uint64_t *v18 = v22;
      *uint64_t v19 = (uint64_t)v18;
      v18[1] = (uint64_t)v19;
      --v28;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear((uint64_t *)&v26);
  return v18 + 5;
}

void sub_1B1D4677C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t quasar::rescoring::GetFeatureDescName(unsigned __int8 **a1)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  quasar::rescoring::EnumNameFeatureTypes<std::vector<quasar::rescoring::FeatureType>>(a1);
  if ((v13 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v3 = v13;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v2, v3);
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = a1[3];
  for (uint64_t i = a1[4]; v4 != i; ++v4)
  {
    uint64_t v6 = *v4;
    char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"_", 1);
    uint64_t v8 = "";
    if (v6 <= 0x11) {
      uint64_t v8 = quasar::rescoring::EnumNamesFeatureTransformation(void)::names[v6];
    }
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v15[0] = v10;
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v17);
}

void sub_1B1D469E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t quasar::rescoring::EnumNameFeatureTypes<std::vector<quasar::rescoring::FeatureType>>(unsigned __int8 **a1)
{
  v14[17] = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      uint64_t v4 = *v2;
      char v5 = (char *)v11 + *(void *)(v11[0] - 24);
      if ((v5[32] & 5) == 0)
      {
        (*(void (**)(void *__return_ptr))(**((void **)v5 + 5) + 32))(v14);
        if (v14[16] >= 1) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"_", 1);
        }
      }
      uint64_t v6 = "";
      if (v4 <= 0x15) {
        uint64_t v6 = quasar::rescoring::EnumNamesFeatureType(void)::names[v4];
      }
      size_t v7 = strlen(v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v6, v7);
      ++v2;
    }
    while (v2 != v3);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v13);
}

void sub_1B1D46C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *quasar::rescoring::operator<<(void *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  size_t v7 = 0;
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(&v7, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(&__p, *(const void **)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 32) - *(void *)(a2 + 24));
  memset(v13, 0, sizeof(v13));
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformationArgumentT*,quasar::rescoring::FeatureTransformationArgumentT*>(v13, *(void **)(a2 + 48), *(void **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  quasar::rescoring::GetFeatureDescName((unsigned __int8 **)&v7);
  if ((v15 & 0x80u) == 0) {
    uint64_t v4 = v14;
  }
  else {
    uint64_t v4 = (void **)v14[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v5 = v15;
  }
  else {
    uint64_t v5 = (uint64_t)v14[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v4, v5);
  if ((char)v15 < 0) {
    operator delete(v14[0]);
  }
  char v16 = (void **)v13;
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](&v16);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    uint64_t v8 = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_1B1D46DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (*(char *)(v14 - 41) < 0) {
    operator delete(*(void **)(v14 - 64));
  }
  quasar::rescoring::TransformedFeatureDesc::~TransformedFeatureDesc((quasar::rescoring::TransformedFeatureDesc *)&a10);
  _Unwind_Resume(a1);
}

void quasar::rescoring::TransformedFeatureDesc::~TransformedFeatureDesc(quasar::rescoring::TransformedFeatureDesc *this)
{
  uint64_t v4 = (void **)((char *)this + 48);
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void *std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    float result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1D46ED0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    float result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1D46F90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformationArgumentT*,quasar::rescoring::FeatureTransformationArgumentT*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    float result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,quasar::rescoring::FeatureTransformationArgumentT*,quasar::rescoring::FeatureTransformationArgumentT*,quasar::rescoring::FeatureTransformationArgumentT*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1D47014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,quasar::rescoring::FeatureTransformationArgumentT*,quasar::rescoring::FeatureTransformationArgumentT*,quasar::rescoring::FeatureTransformationArgumentT*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v10 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  char v8 = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      if (*v5) {
        operator new();
      }
      *uint64_t v4 = 0;
      ++v5;
      uint64_t v10 = ++v4;
    }
    while (v5 != a3);
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,quasar::rescoring::FeatureTransformationArgumentT*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void sub_1B1D470F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,quasar::rescoring::FeatureTransformationArgumentT*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,quasar::rescoring::FeatureTransformationArgumentT*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,quasar::rescoring::FeatureTransformationArgumentT*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1 = **(void ***)(result + 16);
  uint64_t v2 = **(void ***)(result + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *--v1;
    float result = v3;
    *uint64_t v1 = 0;
    if (v3) {
      float result = MEMORY[0x1B3EA8670](result, 0x1000C4052888210);
    }
  }
  return result;
}

void std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__base_destruct_at_end[abi:ne180100](uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  while (v4 != a2)
  {
    uint64_t v5 = *--v4;
    float result = v5;
    *uint64_t v4 = 0;
    if (v5) {
      float result = MEMORY[0x1B3EA8670](result, 0x1000C4052888210);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::Finish(flatbuffers_2_0_6::FlatBufferBuilder *this, int a2, const char *a3, int a4)
{
  *((void *)this + 8) = *((void *)this + 6);
  uint64_t v8 = -4;
  uint64_t v9 = -8;
  if (!a4) {
    uint64_t v9 = -4;
  }
  if (!a3) {
    uint64_t v8 = 0;
  }
  flatbuffers_2_0_6::vector_downward::fill(this, (v9 + v8 - *((unsigned int *)this + 10)) & (*((void *)this + 10) - 1));
  if (a3) {
    flatbuffers_2_0_6::vector_downward::push(this, (const unsigned __int8 *)a3, 4uLL);
  }
  int v10 = flatbuffers_2_0_6::FlatBufferBuilder::ReferTo(this, a2);
  uint64_t result = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(this, v10);
  if (a4) {
    uint64_t result = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(this, *((_DWORD *)this + 10));
  }
  *((unsigned char *)this + 79) = 1;
  return result;
}

uint64_t quasar::tennessee::GenericTextNormalizerInterface<std::string,quasar::tennessee::ImmutableVector<std::string>,true>::normalize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, a2, a3);
}

void sub_1B1D47358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::tennessee::ImmutableVector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::tennessee::ImmutableVector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 24;
      uint64_t v7 = v4 - 24;
      uint64_t v8 = v4 - 24;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 24;
        (*v9)(v7);
        v6 -= 24;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL kaldi::quasar::isEspressoV2Mil(uint64_t *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v31, ".bnns.mil");
  unint64_t v2 = *((unsigned __int8 *)a1 + 23);
  unint64_t v3 = a1[1];
  if ((v2 & 0x80u) == 0) {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v4 = a1[1];
  }
  unsigned __int8 v5 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v6 = v32;
  }
  else {
    size_t v6 = (size_t)v31[1];
  }
  BOOL v8 = v4 >= v6;
  unint64_t v7 = v4 - v6;
  if (!v8) {
    goto LABEL_35;
  }
  if ((v2 & 0x80) != 0)
  {
    if (v6 == -1 || v3 < v7) {
LABEL_73:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v3 - v7 >= v6) {
      size_t v10 = v6;
    }
    else {
      size_t v10 = v3 - v7;
    }
    uint64_t v11 = (uint64_t *)*a1;
  }
  else
  {
    BOOL v8 = v6 != -1 && v2 >= v7;
    if (!v8) {
      goto LABEL_73;
    }
    size_t v9 = v2 - v7;
    if (v9 >= v6) {
      size_t v10 = v6;
    }
    else {
      size_t v10 = v9;
    }
    uint64_t v11 = a1;
  }
  if ((v32 & 0x80u) == 0) {
    uint64_t v13 = v31;
  }
  else {
    uint64_t v13 = (void **)v31[0];
  }
  int v14 = memcmp((char *)v11 + v7, v13, v10);
  if (v10 == v6 && v14 == 0)
  {
    BOOL v22 = 0;
    if ((v5 & 0x80) == 0) {
      return v22;
    }
    goto LABEL_45;
  }
LABEL_35:
  std::string::basic_string[abi:ne180100]<0>(__p, ".mil");
  unint64_t v16 = *((unsigned __int8 *)a1 + 23);
  unint64_t v17 = a1[1];
  if ((v16 & 0x80u) == 0) {
    unint64_t v18 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v18 = a1[1];
  }
  int v19 = (char)v30;
  if ((v30 & 0x80u) == 0) {
    size_t v20 = v30;
  }
  else {
    size_t v20 = (size_t)__p[1];
  }
  BOOL v8 = v18 >= v20;
  unint64_t v21 = v18 - v20;
  if (!v8)
  {
    BOOL v22 = 0;
    if (((char)v30 & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if ((v16 & 0x80) != 0)
  {
    if (v20 == -1 || v17 < v21) {
LABEL_74:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v17 - v21 >= v20) {
      size_t v25 = v20;
    }
    else {
      size_t v25 = v17 - v21;
    }
    a1 = (uint64_t *)*a1;
  }
  else
  {
    if (v20 == -1) {
      goto LABEL_74;
    }
    BOOL v8 = v16 >= v21;
    size_t v24 = v16 - v21;
    if (!v8) {
      goto LABEL_74;
    }
    if (v24 >= v20) {
      size_t v25 = v20;
    }
    else {
      size_t v25 = v24;
    }
  }
  if ((v30 & 0x80u) == 0) {
    uint64_t v26 = __p;
  }
  else {
    uint64_t v26 = (void **)__p[0];
  }
  int v27 = memcmp((char *)a1 + v21, v26, v25);
  BOOL v22 = v25 == v20 && v27 == 0;
  if (v19 < 0) {
LABEL_43:
  }
    operator delete(__p[0]);
LABEL_44:
  if ((v32 & 0x80) != 0) {
LABEL_45:
  }
    operator delete(v31[0]);
  return v22;
}

void sub_1B1D475FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::EndsWith(uint64_t **a1, void *a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = (size_t)a1[1];
  if ((v2 & 0x80u) == 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  int v5 = *((char *)a2 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = a2[1];
  }
  BOOL v11 = v4 >= v6;
  size_t v7 = v4 - v6;
  if (!v11) {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    BOOL v11 = v6 != -1 && v3 >= v7;
    if (v11)
    {
      size_t v12 = v3 - v7;
      if (v12 >= v6) {
        size_t v10 = v6;
      }
      else {
        size_t v10 = v12;
      }
      a1 = (uint64_t **)*a1;
      goto LABEL_26;
    }
LABEL_34:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v2 < v7 || v6 == -1) {
    goto LABEL_34;
  }
  if (v2 - v7 >= v6) {
    size_t v10 = v6;
  }
  else {
    size_t v10 = v2 - v7;
  }
LABEL_26:
  if (v5 < 0) {
    a2 = (void *)*a2;
  }
  return !memcmp((char *)a1 + v7, a2, v10) && v10 == v6;
}

unint64_t kaldi::quasar::SetComputeEngineCacheLookupHandler(unint64_t this, void (*a2)(const char *, const char *, char *, unint64_t))
{
  return this;
}

void *kaldi::quasar::MakeComputeEngineCachePath@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  bzero(__s, 0x400uLL);
  size_t v6 = (void (*)(uint64_t *, uint64_t *, char *, uint64_t))atomic_load((unint64_t *)&kaldi::quasar::sComputeEngineCacheLookupHandler);
  if (*((char *)a1 + 23) >= 0) {
    size_t v7 = a1;
  }
  else {
    size_t v7 = (uint64_t *)*a1;
  }
  if (*((char *)a2 + 23) >= 0) {
    BOOL v8 = a2;
  }
  else {
    BOOL v8 = (uint64_t *)*a2;
  }
  v6(v7, v8, __s, 1024);
  return std::string::basic_string[abi:ne180100]<0>(a3, __s);
}

void kaldi::quasar::CreateComputeEngineConfig(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, ".bnns.mil");
  size_t v2 = *(unsigned __int8 *)(a1 + 23);
  size_t v3 = *(void *)(a1 + 8);
  if ((v2 & 0x80u) == 0) {
    size_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v4 = *(void *)(a1 + 8);
  }
  int v5 = (char)v73;
  if ((v73 & 0x80u) == 0) {
    size_t v6 = v73;
  }
  else {
    size_t v6 = v72;
  }
  BOOL v9 = v4 >= v6;
  size_t v7 = v4 - v6;
  if (!v9)
  {
    BOOL v8 = 0;
    if (((char)v73 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
  if ((v2 & 0x80) != 0)
  {
    if (v6 == -1 || v3 < v7) {
LABEL_175:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v3 - v7 >= v6) {
      size_t v11 = v6;
    }
    else {
      size_t v11 = v3 - v7;
    }
    uint64_t v12 = *(void *)a1;
  }
  else
  {
    BOOL v9 = v6 != -1 && v2 >= v7;
    if (!v9) {
      goto LABEL_175;
    }
    size_t v10 = v2 - v7;
    if (v10 >= v6) {
      size_t v11 = v6;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t v12 = a1;
  }
  if ((v73 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  int v15 = memcmp((const void *)(v12 + v7), p_p, v11);
  BOOL v8 = v11 == v6 && v15 == 0;
  if ((v5 & 0x80000000) == 0)
  {
LABEL_9:
    if (v8) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(__p);
  if (v8)
  {
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(v74, "bnnsir");
    kaldi::quasar::MakeComputeEngineCachePath((uint64_t *)a1, (uint64_t *)v74, &__p);
    if ((char)v75 < 0) {
      operator delete(v74[0]);
    }
    operator new();
  }
LABEL_43:
  std::string::basic_string[abi:ne180100]<0>(&__p, ".mlmodelc");
  size_t v17 = *(unsigned __int8 *)(a1 + 23);
  size_t v18 = *(void *)(a1 + 8);
  if ((v17 & 0x80u) == 0) {
    size_t v19 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v19 = *(void *)(a1 + 8);
  }
  int v20 = (char)v73;
  if ((v73 & 0x80u) == 0) {
    size_t v21 = v73;
  }
  else {
    size_t v21 = v72;
  }
  BOOL v9 = v19 >= v21;
  size_t v22 = v19 - v21;
  if (!v9)
  {
    BOOL v23 = 0;
    if (((char)v73 & 0x80000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_77;
  }
  if ((v17 & 0x80) != 0)
  {
    if (v21 == -1 || v18 < v22) {
LABEL_176:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v18 - v22 >= v21) {
      size_t v25 = v21;
    }
    else {
      size_t v25 = v18 - v22;
    }
    uint64_t v26 = *(void *)a1;
  }
  else
  {
    if (v21 == -1) {
      goto LABEL_176;
    }
    BOOL v9 = v17 >= v22;
    size_t v24 = v17 - v22;
    if (!v9) {
      goto LABEL_176;
    }
    if (v24 >= v21) {
      size_t v25 = v21;
    }
    else {
      size_t v25 = v24;
    }
    uint64_t v26 = a1;
  }
  if ((v73 & 0x80u) == 0) {
    int v27 = &__p;
  }
  else {
    int v27 = __p;
  }
  int v28 = memcmp((const void *)(v26 + v22), v27, v25);
  BOOL v23 = v25 == v21 && v28 == 0;
  if ((v20 & 0x80000000) == 0)
  {
LABEL_51:
    if (v23) {
      goto LABEL_52;
    }
    goto LABEL_78;
  }
LABEL_77:
  operator delete(__p);
  if (v23) {
LABEL_52:
  }
    operator new();
LABEL_78:
  std::string::basic_string[abi:ne180100]<0>(&__p, ".espresso/code.nitroir");
  size_t v30 = *(unsigned __int8 *)(a1 + 23);
  size_t v31 = *(void *)(a1 + 8);
  if ((v30 & 0x80u) == 0) {
    size_t v32 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v32 = *(void *)(a1 + 8);
  }
  unsigned __int8 v33 = v73;
  if ((v73 & 0x80u) == 0) {
    size_t v34 = v73;
  }
  else {
    size_t v34 = v72;
  }
  BOOL v9 = v32 >= v34;
  size_t v35 = v32 - v34;
  if (!v9) {
    goto LABEL_85;
  }
  if ((v30 & 0x80) != 0)
  {
    if (v34 == -1 || v31 < v35) {
LABEL_177:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v31 - v35 >= v34) {
      size_t v44 = v34;
    }
    else {
      size_t v44 = v31 - v35;
    }
    uint64_t v45 = *(void *)a1;
  }
  else
  {
    if (v34 == -1) {
      goto LABEL_177;
    }
    BOOL v9 = v30 >= v35;
    size_t v43 = v30 - v35;
    if (!v9) {
      goto LABEL_177;
    }
    if (v43 >= v34) {
      size_t v44 = v34;
    }
    else {
      size_t v44 = v43;
    }
    uint64_t v45 = a1;
  }
  if ((v73 & 0x80u) == 0) {
    unint64_t v49 = &__p;
  }
  else {
    unint64_t v49 = __p;
  }
  int v50 = memcmp((const void *)(v45 + v35), v49, v44);
  if (v44 == v34 && !v50)
  {
    BOOL v42 = 1;
    if ((v33 & 0x80) == 0)
    {
LABEL_95:
      if (v42) {
        goto LABEL_96;
      }
      goto LABEL_126;
    }
LABEL_125:
    operator delete(__p);
    if (v42) {
LABEL_96:
    }
      operator new();
LABEL_126:
    std::string::basic_string[abi:ne180100]<0>(&__p, ".bundle");
    size_t v51 = *(unsigned __int8 *)(a1 + 23);
    size_t v52 = *(void *)(a1 + 8);
    if ((v51 & 0x80u) == 0) {
      size_t v53 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      size_t v53 = *(void *)(a1 + 8);
    }
    int v54 = (char)v73;
    if ((v73 & 0x80u) == 0) {
      size_t v55 = v73;
    }
    else {
      size_t v55 = v72;
    }
    BOOL v9 = v53 >= v55;
    size_t v56 = v53 - v55;
    if (!v9) {
      goto LABEL_133;
    }
    uint64_t v58 = __p;
    if ((v51 & 0x80) != 0)
    {
      if (v55 == -1 || v52 < v56) {
LABEL_184:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v52 - v56 >= v55) {
        size_t v60 = v55;
      }
      else {
        size_t v60 = v52 - v56;
      }
      uint64_t v61 = *(void *)a1;
    }
    else
    {
      if (v55 == -1) {
        goto LABEL_184;
      }
      BOOL v9 = v51 >= v56;
      size_t v59 = v51 - v56;
      if (!v9) {
        goto LABEL_184;
      }
      if (v59 >= v55) {
        size_t v60 = v55;
      }
      else {
        size_t v60 = v59;
      }
      uint64_t v61 = a1;
    }
    if ((v73 & 0x80u) == 0) {
      long long v65 = &__p;
    }
    else {
      long long v65 = __p;
    }
    int v66 = memcmp((const void *)(v61 + v56), v65, v60);
    if (v60 == v55 && !v66)
    {
      if (v54 < 0) {
        operator delete(v58);
      }
LABEL_136:
      operator new();
    }
LABEL_133:
    BOOL isEspressoV2Mil = kaldi::quasar::isEspressoV2Mil((uint64_t *)a1);
    if ((char)v73 < 0) {
      operator delete(__p);
    }
    if (!isEspressoV2Mil)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, ".pb");
      BOOL v67 = kaldi::EndsWith((uint64_t **)a1, &__p);
      if ((char)v73 < 0) {
        operator delete(__p);
      }
      if (v67)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "Compile with USE_TENSORFLOW=ON to use TensorFlow models");
      }
      else
      {
        if (*(char *)(a1 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
        }
        else {
          std::string v70 = *(std::string *)a1;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, ".pt|.zip");
        int matched = kaldi::quasar::MatchSuffix((uint64_t *)&v70, (uint64_t)&__p);
        if ((char)v73 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        if (matched)
        {
          std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "Compile with USE_TORCH=ON to use Torch models");
        }
        else
        {
          uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"No ComputeEngineConfigItf for model file: ", 42);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v69, a1);
        }
      }
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    goto LABEL_136;
  }
LABEL_85:
  std::string::basic_string[abi:ne180100]<0>(v74, ".espresso.net");
  unint64_t v36 = *(unsigned __int8 *)(a1 + 23);
  unint64_t v37 = *(void *)(a1 + 8);
  if ((v36 & 0x80u) == 0) {
    unint64_t v38 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v38 = *(void *)(a1 + 8);
  }
  int v39 = (char)v75;
  if ((v75 & 0x80u) == 0) {
    size_t v40 = v75;
  }
  else {
    size_t v40 = (size_t)v74[1];
  }
  BOOL v9 = v38 >= v40;
  unint64_t v41 = v38 - v40;
  if (!v9)
  {
    BOOL v42 = 0;
    if (((char)v75 & 0x80000000) == 0) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if ((v36 & 0x80) != 0)
  {
    if (v40 == -1 || v37 < v41) {
LABEL_178:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v37 - v41 >= v40) {
      size_t v47 = v40;
    }
    else {
      size_t v47 = v37 - v41;
    }
    uint64_t v48 = *(void *)a1;
  }
  else
  {
    if (v40 == -1) {
      goto LABEL_178;
    }
    BOOL v9 = v36 >= v41;
    size_t v46 = v36 - v41;
    if (!v9) {
      goto LABEL_178;
    }
    if (v46 >= v40) {
      size_t v47 = v40;
    }
    else {
      size_t v47 = v46;
    }
    uint64_t v48 = a1;
  }
  if ((v75 & 0x80u) == 0) {
    uint64_t v62 = v74;
  }
  else {
    uint64_t v62 = (void **)v74[0];
  }
  int v63 = memcmp((const void *)(v48 + v41), v62, v47);
  BOOL v42 = v47 == v40 && v63 == 0;
  if ((v39 & 0x80000000) == 0)
  {
LABEL_94:
    if ((v73 & 0x80) == 0) {
      goto LABEL_95;
    }
    goto LABEL_125;
  }
LABEL_93:
  operator delete(v74[0]);
  goto LABEL_94;
}

void sub_1B1D47DD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void sub_1B1D47E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1B1D47EAC()
{
  if (*(char *)(v0 - 65) < 0) {
    JUMPOUT(0x1B1D47EBCLL);
  }
  JUMPOUT(0x1B1D47EC0);
}

uint64_t kaldi::quasar::MatchSuffix(uint64_t *a1, uint64_t a2)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2
    || (kaldi::SplitStringToVector((const std::string *)a2, "|", 1, (uint64_t)&v21), uint64_t v4 = v21, v5 = v22, v21 == v22))
  {
LABEL_39:
    uint64_t v19 = 0;
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
    unint64_t v7 = a1[1];
    if ((v6 & 0x80u) == 0) {
      unint64_t v8 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      unint64_t v8 = a1[1];
    }
    while (1)
    {
      int v9 = *(char *)(v4 + 23);
      unint64_t v10 = v9 >= 0 ? *(unsigned __int8 *)(v4 + 23) : *(void *)(v4 + 8);
      unint64_t v11 = v8 - v10;
      if (v8 >= v10)
      {
        if ((v6 & 0x80) != 0)
        {
          if (v10 == -1 || v7 < v11) {
LABEL_42:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          size_t v13 = v7 - v11 >= v10 ? v10 : v7 - v11;
          int v14 = (uint64_t *)*a1;
        }
        else
        {
          if (v10 == -1 || v6 < v11) {
            goto LABEL_42;
          }
          size_t v13 = v6 - v11 >= v10 ? v10 : v6 - v11;
          int v14 = a1;
        }
        unint64_t v16 = v9 >= 0 ? (const void *)v4 : *(const void **)v4;
        int v17 = memcmp((char *)v14 + v11, v16, v13);
        if (v13 == v10 && v17 == 0) {
          break;
        }
      }
      v4 += 24;
      if (v4 == v5) {
        goto LABEL_39;
      }
    }
    uint64_t v19 = 1;
  }
  size_t v24 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
  return v19;
}

void sub_1B1D48020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::WrappedComputeEngineConfig::~WrappedComputeEngineConfig(kaldi::quasar::WrappedComputeEngineConfig *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F0A51490;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F0A51490;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F0A51490;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::WrappedComputeEngineConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v7 = 0;
  kaldi::Input::Input(v6, a3, &v7);
  uint64_t v5 = kaldi::Input::Stream((kaldi::Input *)v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 24))(a1, a2, v5, v7);
  kaldi::Input::~Input((kaldi::Input *)v6);
}

void sub_1B1D48228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::WrappedComputeEngineConfig::Read(uint64_t a1, uint64_t a2)
{
}

void sub_1B1D48494(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::WrappedComputeEngineConfig::HandleToken()
{
  return 0;
}

void kaldi::quasar::DefaultComputeEngineCacheLookupHandler(kaldi::quasar *this, const char *a2, char *a3, char *a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  CC_LONG v8 = strlen((const char *)this);
  CC_SHA256(this, v8, md);
  bzero(__s, 0x400uLL);
  getuid();
  if (!__user_local_dirname())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    int v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Could not get root temp directory: ", 35);
    size_t v51 = __error();
    size_t v52 = strerror(*v51);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v50, v52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v58);
  }
  std::string::basic_string[abi:ne180100]<0>(&v58, __s);
  int v9 = std::string::append(&v58, "/");
  unint64_t v10 = std::string::append(v9, "SpeechModelCache");
  if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v53, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v11;
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Testing if writable: ", 21);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v13 = &v53;
    }
    else {
      size_t v13 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v53.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, size);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v58);
  }
  uint64_t v15 = kaldi::quasar::ProcessName((kaldi::quasar *)v10);
  if (*(char *)(v15 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)v15, *(void *)(v15 + 8));
  }
  else
  {
    long long v16 = *(_OWORD *)v15;
    v59.__r_.__value_.__r.__words[2] = *(void *)(v15 + 16);
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v16;
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    if ((uint64_t)v59.__r_.__value_.__l.__size_ <= 28)
    {
      if (v59.__r_.__value_.__l.__size_ != 10)
      {
        if (v59.__r_.__value_.__l.__size_ == 22)
        {
          int v17 = (std::string *)v59.__r_.__value_.__r.__words[0];
          std::string::size_type v18 = *(void *)v59.__r_.__value_.__l.__data_;
          std::string::size_type v19 = *(void *)(v59.__r_.__value_.__r.__words[0] + 8);
          goto LABEL_27;
        }
LABEL_67:
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v58, (char *)&v53);
        std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&v58, 0);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v37 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v37 = v53.__r_.__value_.__l.__size_;
        }
        unint64_t v38 = __p;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v37 + 5);
        if (v55 < 0) {
          unint64_t v38 = (void **)__p[0];
        }
        if (v37)
        {
          if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v39 = &v53;
          }
          else {
            int v39 = (std::string *)v53.__r_.__value_.__r.__words[0];
          }
          memmove(v38, v39, v37);
        }
        strcpy((char *)v38 + v37, "/test");
        if (v55 >= 0) {
          size_t v40 = __p;
        }
        else {
          size_t v40 = (void **)__p[0];
        }
        unint64_t v41 = fopen((const char *)v40, "w");
        if (v41)
        {
          fclose(v41);
          int v28 = 0;
        }
        else
        {
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
            BOOL v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Not writable (via fopen): ", 26);
            if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v43 = &v53;
            }
            else {
              size_t v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
            }
            if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v58);
          }
          int v28 = 1;
        }
        if (v55 < 0) {
          operator delete(__p[0]);
        }
        char v27 = 0;
        goto LABEL_96;
      }
      int v17 = (std::string *)v59.__r_.__value_.__r.__words[0];
LABEL_49:
      std::string::size_type v32 = v17->__r_.__value_.__r.__words[0];
      int v33 = LOWORD(v17->__r_.__value_.__r.__words[1]);
      if (v32 != 0x697263736E617274 || v33 != 25954) {
        goto LABEL_67;
      }
      goto LABEL_38;
    }
    if (v59.__r_.__value_.__l.__size_ != 29)
    {
      if (v59.__r_.__value_.__l.__size_ != 50) {
        goto LABEL_67;
      }
      uint64_t v23 = (std::string *)v59.__r_.__value_.__r.__words[0];
LABEL_37:
      if (!memcmp(v23, "com.apple.SpeechRecognitionCore.speechrecognitiond", 0x32uLL)) {
        goto LABEL_38;
      }
      goto LABEL_67;
    }
    int v17 = (std::string *)v59.__r_.__value_.__r.__words[0];
    std::string::size_type v29 = *(void *)v59.__r_.__value_.__l.__data_;
    std::string::size_type v30 = *(void *)(v59.__r_.__value_.__r.__words[0] + 8);
    std::string::size_type v31 = *(void *)(v59.__r_.__value_.__r.__words[0] + 16);
  }
  else
  {
    int v17 = &v59;
    if (HIBYTE(v59.__r_.__value_.__r.__words[2]) <= 0x1Cu)
    {
      if (HIBYTE(v59.__r_.__value_.__r.__words[2]) != 10)
      {
        if (HIBYTE(v59.__r_.__value_.__r.__words[2]) == 22)
        {
          std::string::size_type v19 = v59.__r_.__value_.__l.__size_;
          std::string::size_type v18 = v59.__r_.__value_.__r.__words[0];
LABEL_27:
          uint64_t v20 = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 6);
          BOOL v21 = v18 == 0x6570736C61636F6CLL && v19 == 0x676F636572686365;
          uint64_t v22 = 0x6E6F6974696E676FLL;
          goto LABEL_63;
        }
        goto LABEL_67;
      }
      goto LABEL_49;
    }
    if (HIBYTE(v59.__r_.__value_.__r.__words[2]) != 29)
    {
      if (HIBYTE(v59.__r_.__value_.__r.__words[2]) != 50) {
        goto LABEL_67;
      }
      uint64_t v23 = &v59;
      goto LABEL_37;
    }
    std::string::size_type v30 = v59.__r_.__value_.__l.__size_;
    std::string::size_type v29 = v59.__r_.__value_.__r.__words[0];
    std::string::size_type v31 = v59.__r_.__value_.__r.__words[2];
  }
  uint64_t v20 = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[2] + 5);
  BOOL v21 = v29 == 0x6C7070612E6D6F63 && v30 == 0x652E697269732E65 && v31 == 0x736465646465626DLL;
  uint64_t v22 = 0x6863656570736465;
LABEL_63:
  if (!v21 || v20 != v22) {
    goto LABEL_67;
  }
LABEL_38:
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    size_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Writable (via processName): ", 28);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v25 = &v53;
    }
    else {
      size_t v25 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v26 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v26 = v53.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v58);
  }
  char v27 = 1;
  int v28 = 1;
LABEL_96:
  if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v28) {
      goto LABEL_98;
    }
LABEL_101:
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
      size_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Writable: ", 10);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v47 = &v53;
      }
      else {
        size_t v47 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v48 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v48 = v53.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v58);
    }
    goto LABEL_109;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
  if (!v28) {
    goto LABEL_101;
  }
LABEL_98:
  if ((v27 & 1) == 0)
  {
    CC_LONG v45 = strlen((const char *)this);
    CC_SHA256(this, v45, (unsigned __int8 *)&v59);
    confstr(65537, (char *)&v58, 0x400uLL);
    snprintf(a3, (size_t)a4, "%s/%02x%02x%02x%02x.%s", (const char *)&v58, v59.__r_.__value_.__s.__data_[0], v59.__r_.__value_.__s.__data_[1], v59.__r_.__value_.__s.__data_[2], v59.__r_.__value_.__s.__data_[3], a2);
    goto LABEL_114;
  }
LABEL_109:
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v58, (char *)&v53);
  std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&v58, 0);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  unint64_t v49 = &v53;
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v49 = (std::string *)v53.__r_.__value_.__r.__words[0];
  }
  snprintf(a3, (size_t)a4, "%s/%02x%02x%02x%02x.%s", (const char *)v49, md[0], md[1], md[2], md[3], a2);
LABEL_114:
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
}

void sub_1B1D48B0C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B1D48B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (SLOBYTE(STACK[0x4A7]) < 0) {
    operator delete((void *)STACK[0x490]);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void sub_1B1D48B54(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (SLOBYTE(STACK[0x4A7]) < 0) {
      JUMPOUT(0x1B1D48B68);
    }
    JUMPOUT(0x1B1D48B78);
  }
  _Unwind_Resume(a1);
}

void sub_1B1D48B70(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    if (*(char *)(v21 - 89) < 0) {
      operator delete(*(void **)(v21 - 112));
    }
    __cxa_begin_catch(a1);
    if ((*v20 & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&STACK[0x490]);
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x490], (uint64_t)"Not writable (via catch): ", 26);
      if (a20 >= 0) {
        uint64_t v24 = (uint64_t)&a15;
      }
      else {
        uint64_t v24 = a15;
      }
      if (a20 >= 0) {
        uint64_t v25 = a20;
      }
      else {
        uint64_t v25 = a16;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v24, v25);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&STACK[0x490]);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B1D4892CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1B1D48C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    JUMPOUT(0x1B1D48C44);
  }
  JUMPOUT(0x1B1D48C50);
}

void sub_1B1D48C34(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x4A7]) < 0) {
    JUMPOUT(0x1B1D48C44);
  }
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_1B1D48CA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::LmeFstBuilderCompact::LmeFstBuilderCompact(kaldi::quasar::LmeFstBuilderCompact *this)
{
}

void sub_1B1D48D30(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C40611EBE97);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LmeFstBuilderCompact::~LmeFstBuilderCompact(kaldi::quasar::LmeTrie **this)
{
}

void kaldi::quasar::LmeFstBuilderCompact::AddPath(uint64_t *a1, uint64_t a2, int a3, float a4)
{
}

void kaldi::quasar::LmeTrie::AddPath(uint64_t a1, uint64_t a2, int a3, float a4)
{
  unint64_t v6 = *(const void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6 != (const void *)v7)
  {
    if (a3 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "olabel > 0");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    std::string __p = 0;
    int v50 = 0;
    size_t v51 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v6, v7, (v7 - (uint64_t)v6) >> 2);
    int v10 = *(_DWORD *)(a1 + 56);
    if (v10) {
      long long v11 = (int *)(*(void *)(a1 + 32) + 4 * v10);
    }
    else {
      long long v11 = 0;
    }
    uint64_t v12 = (char *)__p;
    if (v50 != __p)
    {
      unint64_t v13 = 0;
      int v14 = 0;
      float v15 = 0.0;
      while (1)
      {
        int v16 = *(_DWORD *)&v12[4 * v13];
        int v17 = *v11;
        if (v17)
        {
          int v48 = a3;
          int v18 = 0;
          uint64_t v19 = 0;
          do
          {
            uint64_t v20 = *(void *)(a1 + 8) + 24 * v17;
            float v21 = *(float *)(v20 + 8);
            if (v15 == -INFINITY || v21 == -INFINITY)
            {
              float v22 = NAN;
            }
            else
            {
              BOOL v23 = v21 == INFINITY || v15 == INFINITY;
              float v22 = v15 + v21;
              if (v23) {
                float v22 = INFINITY;
              }
            }
            *(float *)(v20 + 8) = v22;
            int v24 = *(_DWORD *)v20;
            if (*(_DWORD *)v20 == v16) {
              uint64_t v25 = v20;
            }
            else {
              uint64_t v25 = v19;
            }
            if (v24 == v16 || v14 == 0)
            {
              uint64_t v19 = v25;
            }
            else
            {
              kaldi::quasar::LmeTrie::ArcSetOlabel(a1, v20, v14);
              int v24 = *(_DWORD *)v20;
            }
            if (*(_DWORD *)a1 <= v24 && v24 < *(_DWORD *)(a1 + 4) + *(_DWORD *)a1) {
              ++v18;
            }
            int v17 = *(_DWORD *)(v20 + 20);
          }
          while (v17);
          a3 = v48;
        }
        else
        {
          uint64_t v19 = 0;
          int v18 = 0;
        }
        if (v16 == -1)
        {
          if (v18 >= *(_DWORD *)(a1 + 4)) {
            goto LABEL_105;
          }
          int v16 = *(_DWORD *)a1 + v18;
          if (!v19)
          {
LABEL_39:
            if (v13 + 1 == (v50 - (unsigned char *)__p) >> 2)
            {
              int v29 = *(_DWORD *)(a1 + 60);
              if (v10) {
                goto LABEL_41;
              }
LABEL_43:
              std::string::size_type v30 = 0;
            }
            else
            {
              int v29 = kaldi::quasar::LmeTrie::StateNew((kaldi::quasar::LmeTrie *)a1);
              if (!v10) {
                goto LABEL_43;
              }
LABEL_41:
              std::string::size_type v30 = (int *)(*(void *)(a1 + 32) + 4 * v10);
            }
            int v31 = kaldi::quasar::LmeTrie::ArcNew((void *)a1, v30, v16, v29, a4);
            a4 = 0.0;
            int v14 = 0;
            if (v31) {
              uint64_t v19 = *(void *)(a1 + 8) + 24 * v31;
            }
            else {
              uint64_t v19 = 0;
            }
            float v15 = 0.0;
            if (!a3) {
              goto LABEL_97;
            }
            goto LABEL_92;
          }
        }
        else if (!v19)
        {
          goto LABEL_39;
        }
        if (*(_DWORD *)(v19 + 16) == *(_DWORD *)(a1 + 60))
        {
          int v27 = kaldi::quasar::LmeTrie::StateNew((kaldi::quasar::LmeTrie *)a1);
          *(_DWORD *)(v19 + 16) = v27;
          if (v27) {
            int v28 = (int *)(*(void *)(a1 + 32) + 4 * v27);
          }
          else {
            int v28 = 0;
          }
          uint64_t v32 = *(void *)(a1 + 8);
          kaldi::quasar::LmeTrie::ArcNew((void *)a1, v28, *(_DWORD *)a1, *(_DWORD *)(a1 + 60), 0.0);
          unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v32) >> 3);
          if (v33) {
            uint64_t v19 = *(void *)(a1 + 8) + 24 * (int)v33;
          }
          else {
            uint64_t v19 = 0;
          }
        }
        size_t v34 = (char *)__p;
        size_t v35 = v50;
        if (v13 + 1 == (v50 - (unsigned char *)__p) >> 2)
        {
          if (v50 >= v51)
          {
            unint64_t v37 = v13 + 2;
            if ((v13 + 2) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v38 = v51 - (unsigned char *)__p;
            if ((v51 - (unsigned char *)__p) >> 1 > v37) {
              unint64_t v37 = v38 >> 1;
            }
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v37;
            }
            if (v39)
            {
              size_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v51, v39);
              size_t v34 = (char *)__p;
              size_t v35 = v50;
            }
            else
            {
              size_t v40 = 0;
            }
            unint64_t v41 = &v40[4 * v13 + 4];
            *(_DWORD *)unint64_t v41 = -1;
            unint64_t v36 = v41 + 4;
            while (v35 != v34)
            {
              int v42 = *((_DWORD *)v35 - 1);
              v35 -= 4;
              *((_DWORD *)v41 - 1) = v42;
              v41 -= 4;
            }
            std::string __p = v41;
            int v50 = v36;
            size_t v51 = &v40[4 * v39];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *(_DWORD *)int v50 = -1;
            unint64_t v36 = v35 + 4;
          }
          int v50 = v36;
        }
        float v43 = kaldi::quasar::LmeTrie::Plus((kaldi::quasar::LmeTrie *)a1, *(float *)(v19 + 8), a4);
        float v44 = *(float *)(v19 + 8);
        if (*(unsigned char *)(a1 + 68))
        {
          float v15 = NAN;
          if (v44 != -INFINITY)
          {
            BOOL v23 = v44 == INFINITY;
            float v45 = v44 - v43;
            if (v23) {
              float v45 = INFINITY;
            }
            if ((LODWORD(v43) & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
              float v15 = v45;
            }
            else {
              float v15 = NAN;
            }
          }
          float v46 = NAN;
          if (a4 != -INFINITY) {
            goto LABEL_79;
          }
        }
        else
        {
          float v15 = NAN;
          if (v44 != -INFINITY)
          {
            BOOL v23 = v44 == INFINITY;
            float v47 = v44 - v43;
            if (v23) {
              float v47 = INFINITY;
            }
            if ((LODWORD(v43) & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
              float v15 = v47;
            }
            else {
              float v15 = NAN;
            }
          }
          float v46 = NAN;
          if (a4 != -INFINITY)
          {
LABEL_79:
            if ((LODWORD(v43) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              float v46 = INFINITY;
              if (a4 != INFINITY) {
                float v46 = a4 - v43;
              }
            }
            else
            {
              float v46 = NAN;
            }
          }
        }
        *(float *)(v19 + 8) = v43;
        a4 = v46;
        if (!a3) {
          goto LABEL_97;
        }
LABEL_92:
        if (!v14)
        {
          int v14 = *(_DWORD *)(v19 + 4);
          if (v14 == a3) {
            goto LABEL_100;
          }
          if (!*(unsigned char *)(v19 + 12))
          {
            kaldi::quasar::LmeTrie::ArcSetOlabel(a1, v19, a3);
LABEL_100:
            int v14 = 0;
            a3 = 0;
            goto LABEL_101;
          }
          if (v14) {
            *(_DWORD *)(v19 + 4) = 0;
          }
LABEL_98:
          *(unsigned char *)(v19 + 12) = 1;
          goto LABEL_101;
        }
LABEL_97:
        if (a3) {
          goto LABEL_98;
        }
LABEL_101:
        int v10 = *(_DWORD *)(v19 + 16);
        if (v10) {
          long long v11 = (int *)(*(void *)(a1 + 32) + 4 * v10);
        }
        else {
          long long v11 = 0;
        }
        ++v13;
        uint64_t v12 = (char *)__p;
        if (v13 >= (v50 - (unsigned char *)__p) >> 2)
        {
LABEL_105:
          if (!a3) {
            ++*(_DWORD *)(a1 + 64);
          }
          uint64_t v12 = (char *)__p;
          break;
        }
      }
    }
    if (v12)
    {
      int v50 = v12;
      operator delete(v12);
    }
  }
}

void sub_1B1D492D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t kaldi::quasar::LmeTrie::GetFst(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 248))(a2, (*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2);
  int v5 = *(_DWORD *)(a1 + 56);
  int v4 = *(_DWORD *)(a1 + 60);
  if (*(void *)(a1 + 40) - *(void *)(a1 + 32) >= 5uLL)
  {
    unint64_t v6 = 1;
    do
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      if (v6 - 1 != v7)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v18, "fst_state_id == trie_state_id - 1");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v18);
      }
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = *(_DWORD *)(v9 + 4 * v6);
      if (v10)
      {
        int v11 = *(_DWORD *)(*(void *)(a1 + 8) + 24 * v10 + 20);
        if (v11)
        {
          uint64_t v12 = 1;
          do
          {
            ++v12;
            int v11 = *(_DWORD *)(*(void *)(a1 + 8) + 24 * v11 + 20);
          }
          while (v11);
        }
        else
        {
          uint64_t v12 = 1;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 256))(a2, v7, v12);
      for (int i = *(_DWORD *)(v9 + 4 * v6); i; int i = *(_DWORD *)(v14 + 20))
      {
        uint64_t v14 = *(void *)(a1 + 8) + 24 * i;
        int v15 = *(_DWORD *)(v14 + 8);
        int v16 = *(_DWORD *)(v14 + 16) - 1;
        uint64_t v18 = *(void *)v14;
        int v19 = v15;
        int v20 = v16;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 208))(a2, v8, &v18);
      }
      ++v6;
    }
    while (v6 < (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2);
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, (v5 - 1));
  return (*(uint64_t (**)(uint64_t, void, double))(*(void *)a2 + 184))(a2, (v4 - 1), 0.0);
}

void kaldi::quasar::LmeFstBuilderCompact::GetFinalLmeFst(kaldi::quasar::LmeTrie **a1, uint64_t a2, _DWORD *a3)
{
  int v4 = *a1;
  if (v4)
  {
    *a3 = *((_DWORD *)v4 + 16);
    kaldi::quasar::LmeTrie::GetFst((uint64_t)v4, a2);
    std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](a1, 0);
    fst::MinimizeEncoded<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2, 0.00097656);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "trie");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
}

void fst::MinimizeEncoded<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, float a2)
{
  float v3 = a2;
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::QuantizeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, &v3);
  fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::EncodeMapper(&v2, 3, 1);
}

void sub_1B1D497B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(void *a1)
{
  v1[0] = a1;
  v1[1] = &v4;
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1D4982C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::LmeTrie::ArcSetOlabel(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a2 + 4);
  if (*(unsigned char *)(a2 + 12) != (v3 != 0))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "static_cast<BOOL>(arc->has_word) == static_cast<BOOL>(arc->olabel)");
    goto LABEL_8;
  }
  if (*(unsigned char *)(a2 + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "!arc->has_word");
    goto LABEL_8;
  }
  if (v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "!arc->olabel");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  *(unsigned char *)(a2 + 12) = 1;
  *(_DWORD *)(a2 + 4) = a3;
}

unint64_t kaldi::quasar::LmeTrie::StateNew(kaldi::quasar::LmeTrie *this)
{
  uint64_t v2 = *((void *)this + 4);
  int v3 = (_DWORD *)*((void *)this + 5);
  uint64_t v4 = (uint64_t)v3 - v2;
  int v5 = (char *)this + 32;
  unint64_t v8 = *((void *)v5 + 2);
  uint64_t v6 = (uint64_t)(v5 + 16);
  unint64_t v7 = v8;
  if ((unint64_t)v3 >= v8)
  {
    unint64_t v10 = (v4 >> 2) + 1;
    if (v10 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v7 - v2;
    unint64_t v12 = (uint64_t)(v7 - v2) >> 1;
    if (v12 <= v10) {
      unint64_t v12 = (v4 >> 2) + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    int v15 = &v14[4 * (v4 >> 2)];
    int v16 = &v14[4 * v13];
    *(_DWORD *)int v15 = 0;
    uint64_t v9 = v15 + 4;
    int v17 = (char *)*((void *)this + 4);
    for (int i = (char *)*((void *)this + 5); i != v17; i -= 4)
    {
      int v19 = *((_DWORD *)i - 1);
      *((_DWORD *)v15 - 1) = v19;
      v15 -= 4;
    }
    *((void *)this + 4) = v15;
    *((void *)this + 5) = v9;
    *((void *)this + 6) = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *int v3 = 0;
    uint64_t v9 = v3 + 1;
  }
  unint64_t result = (unint64_t)v4 >> 2;
  *((void *)this + 5) = v9;
  *(v9 - 1) = 0;
  return result;
}

uint64_t kaldi::quasar::LmeTrie::ArcNew(void *a1, int *a2, int a3, int a4, float a5)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = (void *)a1[2];
  unint64_t v12 = (void **)(a1 + 1);
  uint64_t v13 = ((uint64_t)v11 - v10) / 24;
  uint64_t v14 = a1 + 1;
  unint64_t v17 = v14[2];
  uint64_t v15 = (uint64_t)(v14 + 2);
  unint64_t v16 = v17;
  if ((unint64_t)v11 >= v17)
  {
    if ((unint64_t)(v13 + 1) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v10) >> 3);
    uint64_t v20 = 2 * v19;
    if (2 * v19 <= v13 + 1) {
      uint64_t v20 = v13 + 1;
    }
    if (v19 >= 0x555555555555555) {
      unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      float v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v15, v21);
    }
    else {
      float v22 = 0;
    }
    BOOL v23 = &v22[24 * v13];
    int v24 = &v22[24 * v21];
    *(void *)BOOL v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = 0;
    uint64_t v18 = v23 + 24;
    std::string::size_type v26 = (char *)a1[1];
    uint64_t v25 = (char *)a1[2];
    if (v25 != v26)
    {
      do
      {
        long long v27 = *(_OWORD *)(v25 - 24);
        *((void *)v23 - 1) = *((void *)v25 - 1);
        *(_OWORD *)(v23 - 24) = v27;
        v23 -= 24;
        v25 -= 24;
      }
      while (v25 != v26);
      uint64_t v25 = (char *)*v12;
    }
    a1[1] = v23;
    a1[2] = v18;
    a1[3] = v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    void *v11 = 0;
    v11[1] = 0;
    uint64_t v18 = v11 + 3;
    void v11[2] = 0;
  }
  a1[2] = v18;
  *((_DWORD *)v18 - 6) = a3;
  *((_DWORD *)v18 - 5) = 0;
  *((float *)v18 - 4) = a5;
  *((unsigned char *)v18 - 12) = 0;
  int v28 = *a2;
  *((_DWORD *)v18 - 2) = a4;
  *((_DWORD *)v18 - 1) = v28;
  *a2 = v13;
  return v13;
}

float kaldi::quasar::LmeTrie::Plus(kaldi::quasar::LmeTrie *this, float a2, float a3)
{
  float v3 = a3;
  float v4 = a2;
  if (*((unsigned char *)this + 68))
  {
    if (a2 >= a3) {
      a2 = a3;
    }
    if (a3 == -INFINITY || v4 == -INFINITY) {
      return NAN;
    }
    else {
      return a2;
    }
  }
  else if (a2 != INFINITY)
  {
    if (a3 == INFINITY)
    {
      return a2;
    }
    else if (a2 <= a3)
    {
      float v8 = expf(-(float)(a3 - a2));
      return v4 - logf(v8 + 1.0);
    }
    else
    {
      float v7 = expf(-(float)(a2 - a3));
      return v3 - logf(v7 + 1.0);
    }
  }
  return v3;
}

uint64_t fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, void **a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = (unint64_t)a2[5]; ; a2[5] = (void *)i)
        {
          uint64_t v9 = a2[2];
          if (i >= ((unsigned char *)a2[3] - v9) >> 4) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 208))(a1, v7, &v9[16 * i]);
          unint64_t i = (unint64_t)a2[5] + 1;
        }
        (*(void (**)(void *, uint64_t))(*(void *)*a2 + 32))(*a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 184))(a1, v7);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192);
    return v10(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(void **a1, uint64_t a2)
{
  a1[5] = 0;
  float v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(void *))(*(void *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v26 = 0;
  (*(void (**)(void *, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v24);
  while (1)
  {
    if (!v24[0])
    {
      if (v26 >= v24[2]) {
        goto LABEL_29;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v24[0] + 24))(v24[0])) {
      break;
    }
    if (v24[0])
    {
      uint64_t v7 = (_OWORD *)(*(uint64_t (**)(void))(*(void *)v24[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = (_OWORD *)(v24[1] + 16 * v26);
LABEL_8:
    uint64_t v9 = (char *)a1[3];
    unint64_t v8 = (unint64_t)a1[4];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = (v9 - (unsigned char *)*v4) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v8 - (void)*v4;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v14);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v16 = &v15[16 * v11];
      *(_OWORD *)unint64_t v16 = *v7;
      uint64_t v18 = (char *)a1[2];
      unint64_t v17 = (char *)a1[3];
      unint64_t v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        unint64_t v17 = (char *)*v4;
      }
      uint64_t v10 = v16 + 16;
      a1[2] = v19;
      a1[3] = v16 + 16;
      a1[4] = &v15[16 * v14];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *v7;
      uint64_t v10 = v9 + 16;
    }
    a1[3] = v10;
    if (v24[0]) {
      (*(void (**)(void))(*(void *)v24[0] + 40))(v24[0]);
    }
    else {
      ++v26;
    }
  }
  if (v24[0])
  {
    (*(void (**)(void))(*(void *)v24[0] + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v25) {
    --*v25;
  }
LABEL_31:
  uint64_t v20 = (__n128 *)a1[2];
  unint64_t v21 = (long long *)a1[3];
  unint64_t v22 = 126 - 2 * __clz(((char *)v21 - (char *)v20) >> 4);
  if (v21 == (long long *)v20) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(v20, v21, (uint64_t)v24, v23, 1);
}

void sub_1B1D4A16C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(__n128 *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      float v4 = result;
      do
      {
        char v5 = v2;
        uint64_t v6 = v4[2];
        if ((int)v6 < *(_DWORD *)v4)
        {
          uint64_t v7 = v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            int v9 = *(_DWORD *)((char *)result + v8 - 16);
            v8 -= 16;
            if ((int)v6 >= v9)
            {
              uint64_t v10 = (void *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *uint64_t v10 = v6;
          v10[1] = v7;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        float v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(long long *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a3;
  if (*a2 < *(_DWORD *)a1)
  {
    if (v4 < v3)
    {
      long long v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 >= *a2) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 >= *(_DWORD *)a1) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

_DWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(_OWORD *a1, _OWORD *a2)
{
  long long v2 = *a1;
  int v3 = *a1;
  if (v3 >= *((_DWORD *)a2 - 4))
  {
    long long v6 = a1 + 1;
    do
    {
      int v4 = v6;
      if (v6 >= (_DWORD *)a2) {
        break;
      }
      v6 += 4;
    }
    while (v3 >= *v4);
  }
  else
  {
    int v4 = a1;
    do
    {
      int v5 = v4[4];
      v4 += 4;
    }
    while (v3 >= v5);
  }
  if (v4 < (_DWORD *)a2)
  {
    do
      int v7 = *((_DWORD *)a2-- - 4);
    while (v3 < v7);
  }
  while (v4 < (_DWORD *)a2)
  {
    long long v11 = *(_OWORD *)v4;
    *(_OWORD *)int v4 = *a2;
    *a2 = v11;
    do
    {
      int v8 = v4[4];
      v4 += 4;
    }
    while (v3 >= v8);
    do
      int v9 = *((_DWORD *)a2-- - 4);
    while (v3 < v9);
  }
  if (v4 - 4 != (_DWORD *)a1) {
    *a1 = *((_OWORD *)v4 - 1);
  }
  *((_OWORD *)v4 - 1) = v2;
  return v4;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(long long *a1, long long *a2)
{
  uint64_t v2 = 0;
  long long v3 = *a1;
  int v4 = *a1;
  do
    int v5 = a1[++v2];
  while (v4 > v5);
  long long v6 = &a1[v2];
  int v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      int v9 = *((_DWORD *)a2-- - 4);
    }
    while (v4 <= v9);
  }
  else
  {
    do
      int v8 = *((_DWORD *)a2-- - 4);
    while (v4 <= v8);
  }
  if (v6 < a2)
  {
    uint64_t v10 = &a1[v2];
    long long v11 = a2;
    do
    {
      long long v12 = *v10;
      *uint64_t v10 = *v11;
      long long *v11 = v12;
      do
        int v13 = *((_DWORD *)v10++ + 4);
      while (v4 > v13);
      do
        int v14 = *((_DWORD *)v11-- - 4);
      while (v4 <= v14);
    }
    while (v10 < v11);
    int v7 = v10 - 1;
  }
  if (v7 != a1) {
    *a1 = *v7;
  }
  *int v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (long long *)&a2[-1];
      if ((signed __int32)a2[-1].n128_u32[0] < *(_DWORD *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *long long v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), (int *)&a2[-1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (__n128 *)a2[-1].n128_u64);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (__n128 *)(a1 + 48), a2 - 1);
      return 1;
    default:
      int v8 = (_DWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      int v9 = (_OWORD *)(a1 + 48);
      if ((__n128 *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    long long v12 = *v9;
    int v13 = *v9;
    if (v13 < *v8)
    {
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = *(_DWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v13 >= v15)
        {
          unint64_t v16 = (_OWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (_OWORD *)a1;
LABEL_12:
      _OWORD *v16 = v12;
      if (++v11 == 8) {
        return v9 + 1 == (_OWORD *)a2;
      }
    }
    int v8 = v9;
    v10 += 16;
    if (++v9 == (_OWORD *)a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(long long *a1, int *a2, int *a3, _OWORD *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, a2, a3);
  if (*(_DWORD *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_DWORD *)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(long long *a1, int *a2, int *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, a2, a3, a4).n128_u64[0];
  if ((signed __int32)a5->n128_u32[0] < (signed __int32)a4->n128_u32[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if ((signed __int32)a4->n128_u32[0] < *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(_DWORD *)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    long long v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1)
        {
          long long v15 = *v14;
          long long *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v30 = *a1;
        uint64_t v18 = a1;
        do
        {
          uint64_t v19 = (uint64_t)&v18[v17 + 1];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && *(_DWORD *)v19 < *(_DWORD *)(v19 + 16))
          {
            v19 += 16;
            uint64_t v20 = v21;
          }
          _OWORD *v18 = *(_OWORD *)v19;
          uint64_t v18 = (_OWORD *)v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if ((long long *)v19 == --v6)
        {
          *(_OWORD *)uint64_t v19 = v30;
        }
        else
        {
          *(_OWORD *)uint64_t v19 = *v6;
          *long long v6 = v30;
          uint64_t v22 = v19 - (void)a1 + 16;
          if (v22 >= 17)
          {
            unint64_t v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            int v24 = &a1[v23];
            uint64_t v25 = *(void *)v19;
            if (*(_DWORD *)v24 < (int)*(void *)v19)
            {
              uint64_t v26 = *(void *)(v19 + 8);
              do
              {
                long long v27 = v24;
                *(_OWORD *)uint64_t v19 = *v24;
                if (!v23) {
                  break;
                }
                unint64_t v23 = (v23 - 1) >> 1;
                int v24 = &a1[v23];
                uint64_t v19 = (uint64_t)v27;
              }
              while (*(_DWORD *)v24 < (int)v25);
              *(void *)long long v27 = v25;
              *((void *)v27 + 1) = v26;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (long long *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      uint64_t v10 = *(void *)v8;
      if (v9 < a3 && (int)v10 < (int)*((void *)v8 + 2))
      {
        uint64_t v10 = *((void *)v8++ + 2);
        uint64_t v7 = v9;
      }
      long long v11 = *a4;
      int v12 = *a4;
      if (v12 <= (int)v10)
      {
        do
        {
          int v13 = v8;
          *a4 = *v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v14 = (2 * v7) | 1;
          uint64_t v8 = (long long *)(result + 16 * v14);
          uint64_t v15 = 2 * v7 + 2;
          uint64_t v16 = *(void *)v8;
          if (v15 < a3 && (int)v16 < (int)*((void *)v8 + 2))
          {
            uint64_t v16 = *((void *)v8++ + 2);
            uint64_t v14 = v15;
          }
          a4 = v13;
          uint64_t v7 = v14;
        }
        while (v12 <= (int)v16);
        *int v13 = v11;
      }
    }
  }
  return result;
}

uint64_t fst::AcceptorMinimize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x200010000, 1)) {
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1);
  }
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  long long v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"FST is not an unweighted acceptor", 33);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
}

void sub_1B1D4B0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1D4B128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    JUMPOUT(0x1B1D4B11CLL);
  }
  JUMPOUT(0x1B1D4B120);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::QuantizeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, float *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v6, &v12);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 24))(v12))
        {
          uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
          float v8 = *(float *)(v7 + 8);
          if ((LODWORD(v8) & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
            float v8 = *a2 * floorf((float)(v8 / *a2) + 0.5);
          }
          uint64_t v9 = *(unsigned int *)(v7 + 12);
          v11[0] = *(void *)v7;
          v11[1] = LODWORD(v8) | (unint64_t)(v9 << 32);
          (*(void (**)(uint64_t, void *))(*(void *)v12 + 88))(v12, v11);
          (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
        }
        if (v12) {
          (*(void (**)(void))(*(void *)v12 + 8))();
        }
        v10.n128_f32[0] = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v6);
        if ((v10.n128_u32[0] & 0x7FFFFFFF) <= 0x7F7FFFFF) {
          v10.n128_f32[0] = *a2 * floorf((float)(v10.n128_f32[0] / *a2) + 0.5);
        }
        (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)a1 + 184))(a1, v6, v10);
        uint64_t v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v5 & 0x3FFCFFFF0007, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1D4B45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::EncodeMapper(_DWORD *a1, int a2, int a3)
{
  *a1 = a2;
  a1[1] = a3;
  operator new();
}

void sub_1B1D4B4FC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A0C40782F6942);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::EncodeTable(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v4 = a2;
  char v5 = a2 & 1;
  BOOL v6 = (a2 & 2) != 0;
  std::unordered_map<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,std::allocator<std::pair<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const* const,int>>>::unordered_map(a1 + 32, 0x400uLL, &v4);
  *(_DWORD *)(a1 + 8std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 1;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  return a1;
}

void sub_1B1D4B590(_Unwind_Exception *exception_object)
{
  long long v3 = v2;
  char v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,std::allocator<std::pair<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const* const,int>>>::unordered_map(uint64_t a1, size_t a2, int *a3)
{
  int v4 = *a3;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 36) = v4 & 1;
  *(unsigned char *)(a1 + 37) = (v4 & 2) != 0;
  *(_DWORD *)(a1 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 1065353216;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1D4B600(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a1 + 280))(a1, 0);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 288))(a1, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if (*(_DWORD *)(a2 + 4) == 1 && (*(unsigned char *)a2 & 2) != 0)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)a1 + 184))(a1, v5, 0.0);
      char v6 = 0;
    }
    else
    {
      LODWORD(v5) = -1;
      char v6 = 1;
    }
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      while (1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v7, &v34);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v34 + 24))(v34))
        {
          float v8 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v34 + 32))(v34);
          unint64_t v32 = fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()((int *)a2, v8);
          unint64_t v33 = v9;
          (*(void (**)(uint64_t, unint64_t *))(*(void *)v34 + 88))(v34, &v32);
          (*(void (**)(uint64_t))(*(void *)v34 + 40))(v34);
        }
        if (v34) {
          (*(void (**)(void))(*(void *)v34 + 8))();
        }
        if (v6) {
          break;
        }
        if (v7 != v5)
        {
          *(float *)&unsigned int v18 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v7);
          unint64_t v32 = 0;
          unint64_t v33 = v18 | 0xFFFFFFFF00000000;
          unint64_t v19 = fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()((int *)a2, (unsigned int *)&v32);
          if (!v19 && (*(float *)&unint64_t v32 = v20, LODWORD(v34) = 2139095040, v20 == INFINITY))
          {
            v12.n128_u32[0] = 2139095040;
          }
          else
          {
            unint64_t v32 = v19;
            unint64_t v33 = __PAIR64__(v5, LODWORD(v20));
            (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(void *)a1 + 208))(a1, v7, &v32);
            v12.n128_u32[0] = 2139095040;
          }
          goto LABEL_30;
        }
LABEL_31:
        uint64_t v7 = (v7 + 1);
        if ((int)v7 >= (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1)) {
          goto LABEL_34;
        }
      }
      *(float *)&unsigned int v10 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v7);
      unint64_t v32 = 0;
      unint64_t v33 = v10 | 0xFFFFFFFF00000000;
      unint64_t v11 = fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()((int *)a2, (unsigned int *)&v32);
      unsigned __int32 v14 = v13;
      if (!v11)
      {
LABEL_29:
        v12.n128_u32[0] = v14;
LABEL_30:
        (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)a1 + 184))(a1, v7, v12);
        goto LABEL_31;
      }
      int v15 = FLAGS_fst_error_fatal;
      if (FLAGS_fst_error_fatal)
      {
        std::string::basic_string[abi:ne180100]<0>(v29, "FATAL");
        uint64_t v16 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)v29);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        uint64_t v16 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)__p);
      }
      uint64_t v17 = (void *)fst::cerr(v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
      if (v15)
      {
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
        if (v30 < 0)
        {
          uint64_t v21 = (void *)v29[0];
LABEL_27:
          operator delete(v21);
        }
      }
      else
      {
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
        if (v27 < 0)
        {
          uint64_t v21 = __p[0];
          goto LABEL_27;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
      goto LABEL_29;
    }
LABEL_34:
    uint64_t v22 = 0x3FFF00000007;
    if ((*(_DWORD *)a2 & 1) == 0) {
      uint64_t v22 = 0x3FFFFFFF0007;
    }
    if ((*(_DWORD *)a2 & 2) != 0)
    {
      uint64_t v23 = 0x1D7C48100007;
      if (*(_DWORD *)(a2 + 4) == 1) {
        uint64_t v23 = 0x2EBC84200007;
      }
      v22 &= v23;
    }
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v24 = v25 | 4;
    }
    else {
      uint64_t v24 = v25;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v22 & v24, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1D4BBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    unsigned int v6 = *(_DWORD *)a1 | 4;
  }
  else
  {
    uint64_t result = 0;
    unsigned int v6 = *(_DWORD *)a1 & 0xFFFFFFFB;
  }
  *(void *)(a1 + 88) = result;
  *(_DWORD *)a1 = v6;
  return result;
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 96);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    unsigned int v6 = *(_DWORD *)a1 | 8;
  }
  else
  {
    uint64_t result = 0;
    unsigned int v6 = *(_DWORD *)a1 & 0xFFFFFFF7;
  }
  *(void *)(a1 + 96) = result;
  *(_DWORD *)a1 = v6;
  return result;
}

unint64_t fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(int *a1, unsigned int *a2)
{
  unsigned int v4 = a2[3];
  if (a1[1] == 1)
  {
    if (v4 == -1)
    {
      if ((*(unsigned char *)a1 & 2) == 0
        || (LODWORD(__p[0]) = 0, LODWORD(__p[0]) = a2[2], LODWORD(v21[0]) = 2139095040, *(float *)__p == INFINITY))
      {
LABEL_14:
        unsigned int v5 = *a2;
        uint64_t v6 = a2[1];
        return v5 | (unint64_t)(v6 << 32);
      }
    }
    unsigned int v5 = fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Encode(*((int8x8_t **)a1 + 1), (uint64_t)a2);
    LODWORD(v6) = a2[1];
    if (*a1) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = v6;
    }
  }
  else
  {
    if (v4 == -1 || !*a2) {
      goto LABEL_14;
    }
    int v7 = *a1;
    if ((*a1 & 1) != 0 && *a2 != a2[1])
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      float v8 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"EncodeMapper: Label-encoded arc has different input and output labels", 69);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      *((unsigned char *)a1 + 16) = 1;
      int v7 = *a1;
    }
    if ((v7 & 2) != 0)
    {
      LODWORD(v21[0]) = 0;
      LODWORD(v21[0]) = a2[2];
      LODWORD(v18[0]) = 0;
      if (*(float *)v21 != 0.0)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(v21, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(v21, "ERROR");
        }
        unsigned int v10 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)v21);
        unint64_t v11 = (void *)fst::cerr(v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"EncodeMapper: Weight-encoded arc has non-trivial weight", 55);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
        if (v22 < 0) {
          operator delete(v21[0]);
        }
        *((unsigned char *)a1 + 16) = 1;
      }
    }
    __n128 v12 = (unsigned int *)fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Decode(*((void *)a1 + 1), *a2);
    if (v12)
    {
      unsigned __int32 v13 = v12;
      unsigned int v5 = *v12;
      if (*a1) {
        unsigned __int32 v14 = v13;
      }
      else {
        unsigned __int32 v14 = a2;
      }
      uint64_t v6 = v14[1];
    }
    else
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(v18, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(v18, "ERROR");
      }
      uint64_t v16 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)v18);
      uint64_t v17 = (void *)fst::cerr(v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"EncodeMapper: decode failed", 27);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      *((unsigned char *)a1 + 16) = 1;
      unsigned int v5 = -1;
      uint64_t v6 = 0xFFFFFFFFLL;
    }
  }
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B1D4C09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Encode(int8x8_t *a1, uint64_t a2)
{
  int v2 = (a1->i32[0] << 31 >> 31) & *(_DWORD *)(a2 + 4);
  float v3 = *(float *)(a2 + 8);
  if ((a1->i32[0] & 2) == 0) {
    float v3 = 0.0;
  }
  v6[0] = *(_DWORD *)a2;
  v6[1] = v2;
  *(float *)&v6[2] = v3;
  int v7 = v6;
  unsigned int v4 = std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>>>::find<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*>(a1 + 4, (uint64_t *)&v7);
  if (!v4) {
    operator new();
  }
  return *((unsigned int *)v4 + 6);
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Decode(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (a2 <= (unint64_t)((*(void *)(a1 + 16) - v2) >> 3)) {
      return *(void *)(v2 + 8 * (a2 - 1));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  float v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
  unsigned int v4 = (void *)fst::cerr(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"EncodeTable::Decode: unknown decode key: ", 41);
  std::ostream::operator<<();
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1D4C374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>>>::find<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*>(int8x8_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(int *)*a2;
  if (!a1[4].i8[4])
  {
    if (!a1[4].i8[5])
    {
      unint64_t v5 = *(int *)*a2;
      goto LABEL_7;
    }
    unint64_t v5 = 7867 * *(unsigned int *)(v3 + 8);
    goto LABEL_6;
  }
  unint64_t v5 = v4 + 7853 * *(int *)(v3 + 4);
  if (a1[4].i8[5])
  {
    uint64_t v4 = 7867 * *(unsigned int *)(v3 + 8);
LABEL_6:
    v5 += v4;
  }
LABEL_7:
  int8x8_t v6 = a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v5;
    if (v5 >= *(void *)&v6) {
      unint64_t v9 = v5 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v6 - 1) & v5;
  }
  unsigned int v10 = *(void **)(*(void *)a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)&a1[5];
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v5)
      {
        if (fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual::operator()(v12, v11[2], *a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v6) {
            v13 %= *(void *)&v6;
          }
        }
        else
        {
          v13 &= *(void *)&v6 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

BOOL fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)a2 == *(_DWORD *)a3
      && *(_DWORD *)(a2 + 4) == *(_DWORD *)(a3 + 4)
      && *(float *)(a2 + 8) == *(float *)(a3 + 8);
}

void *std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>>>::__emplace_unique_key_args<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::piecewise_construct_t const&,std::tuple<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const* const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = *(int *)*a2;
  if (!*(unsigned char *)(a1 + 36))
  {
    if (!*(unsigned char *)(a1 + 37))
    {
      unint64_t v10 = *(int *)*a2;
      goto LABEL_7;
    }
    unint64_t v10 = 7867 * *(unsigned int *)(v8 + 8);
    goto LABEL_6;
  }
  unint64_t v10 = v9 + 7853 * *(int *)(v8 + 4);
  if (*(unsigned char *)(a1 + 37))
  {
    uint64_t v9 = 7867 * *(unsigned int *)(v8 + 8);
LABEL_6:
    v10 += v9;
  }
LABEL_7:
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    unsigned __int32 v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      int v15 = *v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual::operator()(a1 + 40, v15[2], *a2))
            {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          int v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  int v15 = operator new(0x20uLL);
  void *v15 = 0;
  v15[1] = v10;
  v15[2] = **a4;
  *((_DWORD *)v15 + 6) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    void *v15 = *v24;
LABEL_45:
    *uint64_t v24 = v15;
    goto LABEL_46;
  }
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v25 = *(void *)(*v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_45;
  }
LABEL_46:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1B1D4C7BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::MergeStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(void *a1, uint64_t a2)
{
  std::vector<int>::vector(&v16, (int)((uint64_t)(a1[5] - a1[4]) >> 3));
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v6 = v4 - v5;
  if (((unint64_t)(v4 - v5) >> 3))
  {
    uint64_t v7 = 0;
    unint64_t v8 = (int)(v6 >> 3);
    std::vector<int>::pointer begin = v16.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      *begin++ = **(_DWORD **)(v5 + (v7 >> 29));
      v7 += 0x100000000;
      --v8;
    }
    while (v8);
  }
  if ((v6 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v10 = 0;
    do
    {
      unint64_t v11 = *(unsigned int **)(v5 + 8 * (int)v10);
      if (v11)
      {
        do
        {
          int v12 = *v11;
          (*(void (**)(uint64_t, void, uint64_t *))(*(void *)a2 + 296))(a2, *v11, &v15);
          while (!(*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
          {
            long long v14 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
            HIDWORD(v14) = v16.__begin_[*(int *)(a1[10] + 4 * SHIDWORD(v14))];
            if (v12 == v16.__begin_[v10]) {
              (*(void (**)(uint64_t, long long *))(*(void *)v15 + 88))(v15, &v14);
            }
            else {
              (*(void (**)(uint64_t))(*(void *)a2 + 208))(a2);
            }
            (*(void (**)(uint64_t))(*(void *)v15 + 40))(v15);
          }
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
          unint64_t v11 = (unsigned int *)*((void *)v11 + 1);
        }
        while (v11);
        uint64_t v5 = a1[4];
        uint64_t v4 = a1[5];
      }
      ++v10;
    }
    while (v10 < (int)((unint64_t)(v4 - v5) >> 3));
  }
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, v16.__begin_[*(int *)(a1[10] + 4 * v13)]);
  fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
}

void sub_1B1D4CA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AcyclicMinimizer(uint64_t a1, void *a2)
{
  BOOL v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1) == 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = v4;
  if (!(*(uint64_t (**)(void *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1)) {
    FstCheck(1, "Weight::Properties() & kIdempotent", "../libquasar/libkaldi/tools/openfst/src/include/fst/minimize.h");
  }
  fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Initialize(a1, (uint64_t)a2);
  fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Refine((void *)a1, a2);
  return a1;
}

void sub_1B1D4CBDC(_Unwind_Exception *a1)
{
  fst::Partition<int>::~Partition(v1);
  _Unwind_Resume(a1);
}

void fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Initialize(uint64_t a1, uint64_t a2)
{
}

void sub_1B1D4CCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Refine(void *a1, void *a2)
{
  uint64_t v2 = a1[5] - a1[4];
  if (((unint64_t)v2 >> 3))
  {
    uint64_t v5 = 0;
    unint64_t v6 = (int)(v2 >> 3);
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
    do
    {
      v17[0] = 0;
      v17[1] = 0;
      v17[2] = a2;
      void v17[3] = a1;
      int v18 = 7;
      std::vector<int> v16 = (uint64_t *)v17;
      uint64_t v8 = *(void *)(a1[4] + 8 * (int)v5);
      int v15 = *(_DWORD *)v8;
      BOOL v19 = (unsigned int *)&v15;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8) = v5;
      for (uint64_t i = *(void *)(v8 + 8); i; uint64_t i = *(void *)(i + 8))
      {
        int v15 = 0;
        int v15 = *(_DWORD *)i;
        uint64_t v10 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>((uint64_t)&v16, (unsigned int *)&v15);
        if (v17 == (void **)v10) {
          int v11 = fst::Partition<int>::AddClass((uint64_t)a1);
        }
        else {
          int v11 = *(_DWORD *)(v10 + 32);
        }
        BOOL v19 = (unsigned int *)&v15;
        *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8) = v11;
      }
      uint64_t v12 = *(void *)(a1[4] + 8 * (int)v5);
      while (v12)
      {
        int v15 = 0;
        int v15 = *(_DWORD *)v12;
        int v13 = *(_DWORD *)(a1[10] + 4 * v15);
        BOOL v19 = (unsigned int *)&v15;
        int v14 = *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8);
        uint64_t v12 = *(void *)(v12 + 8);
        if (v13 != v14) {
          fst::Partition<int>::Move(a1, v15, v14);
        }
      }
      std::__tree<int>::destroy((uint64_t)&v16, v17[0]);
      ++v5;
    }
    while (v5 != v7);
  }
}

void sub_1B1D4CEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void fst::Partition<int>::Initialize(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = a1 + 8;
  if (v5 == v4)
  {
    uint64_t v4 = *(void *)(a1 + 16);
  }
  else
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(v4 + 8 * v7);
      if (v8)
      {
        MEMORY[0x1B3EA8670](v8, 0x1020C40F89CB87BLL);
        uint64_t v4 = *(void *)(a1 + 8);
        uint64_t v5 = *(void *)(a1 + 16);
      }
      ++v7;
    }
    while (v7 < (v5 - v4) >> 3);
  }
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = *(void *)(a1 + 32);
  *(void *)(a1 + 88) = v9;
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(v6, a2);
  std::vector<int>::value_type __x = -1;
  std::vector<int>::resize((std::vector<int> *)(a1 + 80), a2, &__x);
  std::vector<int>::reserve((std::vector<unsigned int> *)(a1 + 104), a2);
  if (a2) {
    operator new();
  }
  *(_DWORD *)a1 = 0;
}

void fst::Partition<int>::AllocateClasses(uint64_t a1, int a2)
{
  uint64_t v2 = (std::vector<int> *)(a1 + 32);
  unint64_t v3 = ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3) + a2;
  *(void *)std::vector<int>::value_type __x = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(a1 + 32, v3, __x);
  __x[0] = 0;
  std::vector<int>::resize(v2 + 3, v3, __x);
  *(void *)std::vector<int>::value_type __x = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)&v2[1], v3, __x);
  __x[0] = 0;
  std::vector<int>::resize(v2 + 4, v3, __x);
}

uint64_t fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HeightVisitor,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    memset(&v6, 0, sizeof(v6));
    long long v4 = 0u;
    long long v5 = 0u;
    long long v3 = 0u;
    fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MemoryPool(v2, 64);
  }
  return result;
}

void sub_1B1D4D888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HeightVisitor::InitState(char **a1, int a2)
{
  long long v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 2;
  unint64_t v6 = a2;
  if (v5 <= a2)
  {
    unint64_t v7 = a1 + 2;
    do
    {
      if ((unint64_t)v4 >= *v7)
      {
        uint64_t v9 = *a1;
        uint64_t v10 = (v4 - *a1) >> 2;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = *v7 - (void)v9;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), v13);
          uint64_t v9 = *a1;
          long long v4 = a1[1];
        }
        else
        {
          uint64_t v14 = 0;
        }
        uint64_t v15 = &v14[4 * v10];
        *(_DWORD *)uint64_t v15 = -1;
        uint64_t v8 = v15 + 4;
        while (v4 != v9)
        {
          int v16 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }
        *a1 = v15;
        a1[1] = v8;
        a1[2] = &v14[4 * v13];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *(_DWORD *)long long v4 = -1;
        uint64_t v8 = v4 + 4;
      }
      a1[1] = v8;
      ++v5;
      long long v4 = v8;
    }
    while (v5 <= v6);
  }
  if ((unint64_t)a1[4] <= v6) {
    a1[4] = (char *)(a2 + 1);
  }
  return 1;
}

uint64_t fst::Partition<int>::AddClass(uint64_t a1)
{
  uint64_t v1 = (std::vector<int> *)(a1 + 32);
  uint64_t v2 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3;
  *(void *)std::vector<int>::value_type __x = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(a1 + 32, v2 + 1, __x);
  __x[0] = 0;
  std::vector<int>::resize(v1 + 3, v2 + 1, __x);
  *(void *)std::vector<int>::value_type __x = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)&v1[1], v2 + 1, __x);
  __x[0] = 0;
  std::vector<int>::resize(v1 + 4, v2 + 1, __x);
  return v2;
}

void *fst::Partition<int>::Move(void *result, int a2, int a3)
{
  uint64_t v3 = *(int *)(result[10] + 4 * a2);
  uint64_t v4 = result[1];
  uint64_t v5 = *(void *)(v4 + 8 * a2);
  uint64_t v6 = *(void *)(v5 + 8);
  if (v6) {
    *(void *)(v6 + 16) = *(void *)(v5 + 16);
  }
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7)
  {
    *(void *)(v7 + 8) = v6;
  }
  else
  {
    *(void *)(result[4] + 8 * v3) = v6;
    uint64_t v4 = result[1];
  }
  uint64_t v8 = *(void *)(v4 + 8 * a2);
  uint64_t v9 = result[4];
  uint64_t v10 = *(void *)(v9 + 8 * a3);
  if (v10)
  {
    *(void *)(v10 + 16) = v8;
    uint64_t v10 = *(void *)(v9 + 8 * a3);
  }
  *(void *)(v8 + 8) = v10;
  *(void *)(v8 + 16) = 0;
  *(void *)(v9 + 8 * a3) = v8;
  *(_DWORD *)(result[10] + 4 * a2) = a3;
  uint64_t v11 = result[13];
  ++*(_DWORD *)(v11 + 4 * a3);
  --*(_DWORD *)(v11 + 4 * v3);
  return result;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v6 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>((uint64_t)a1, &v10, a2);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = **a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = (void *)(a1 + 24);
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        if (!fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(v7, *a3, *((unsigned int *)v4 + 7)))break; {
        uint64_t v4 = (uint64_t *)*v8;
        }
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(v7, *((unsigned int *)v8 + 7), *a3))break; {
      uint64_t v5 = v8 + 1;
      }
      uint64_t v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(void *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *((_DWORD *)a1 + 4);
  if (v6)
  {
    float v16 = (*(float (**)(void))(*(void *)*a1 + 32))();
    float v17 = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a3);
    if (LODWORD(v16) < LODWORD(v17)) {
      return 1;
    }
    if (LODWORD(v16) <= LODWORD(v17) && (a1[2] & 2) != 0) {
      goto LABEL_3;
    }
    return 0;
  }
  if ((v6 & 2) == 0) {
    return 0;
  }
LABEL_3:
  unint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 40))(*a1, a2);
  if (v7 < (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 40))(*a1, a3)) {
    return 1;
  }
  unint64_t v8 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 40))(*a1, a2);
  if (v8 > (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 40))(*a1, a3) || (a1[2] & 4) == 0) {
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v26 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v9 + 136))(v9, a2, v24);
  uint64_t v10 = *a1;
  unint64_t v23 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v10 + 136))(v10, a3, v21);
  while (1)
  {
    if (v24[0])
    {
      if ((*(uint64_t (**)(void))(*(void *)v24[0] + 24))(v24[0])) {
        goto LABEL_36;
      }
    }
    else if (v26 >= v24[2])
    {
      goto LABEL_36;
    }
    if (v21[0])
    {
      if ((*(uint64_t (**)(void))(*(void *)v21[0] + 24))(v21[0])) {
        goto LABEL_36;
      }
    }
    else if (v23 >= v21[2])
    {
LABEL_36:
      uint64_t v18 = 0;
      char v19 = 1;
      goto LABEL_39;
    }
    if (v24[0]) {
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)v24[0] + 32))(v24[0]);
    }
    else {
      uint64_t v11 = (_DWORD *)(v24[1] + 16 * v26);
    }
    if (v21[0]) {
      uint64_t v12 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)v21[0] + 32))(v21[0]);
    }
    else {
      uint64_t v12 = (_DWORD *)(v21[1] + 16 * v23);
    }
    if (*v11 < *v12) {
      goto LABEL_37;
    }
    if (*v11 > *v12) {
      break;
    }
    uint64_t v13 = *(void *)(a1[1] + 80);
    int v14 = *(_DWORD *)(v13 + 4 * (int)v11[3]);
    int v15 = *(_DWORD *)(v13 + 4 * (int)v12[3]);
    if (v14 < v15)
    {
LABEL_37:
      char v19 = 0;
      uint64_t v18 = 1;
      goto LABEL_39;
    }
    if (v14 > v15) {
      break;
    }
    if (v24[0]) {
      (*(void (**)(void))(*(void *)v24[0] + 40))(v24[0]);
    }
    else {
      ++v26;
    }
    if (v21[0]) {
      (*(void (**)(void))(*(void *)v21[0] + 40))(v21[0]);
    }
    else {
      ++v23;
    }
  }
  char v19 = 0;
  uint64_t v18 = 0;
LABEL_39:
  if (v21[0])
  {
    (*(void (**)(void))(*(void *)v21[0] + 8))(v21[0]);
  }
  else if (v22)
  {
    --*v22;
  }
  if (v24[0])
  {
    (*(void (**)(void))(*(void *)v24[0] + 8))(v24[0]);
  }
  else if (v25)
  {
    --*v25;
  }
  if (v19) {
    return 0;
  }
  return v18;
}

void sub_1B1D4E10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 24);
  uint64_t v6 = a1 + 8;
  do
  {
    int v7 = fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(v5, *(unsigned int *)(v3 + 28), *a2);
    unint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      unint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2
    || fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(v5, *a2, *(unsigned int *)(v6 + 28)))
  {
    return v2;
  }
  return v6;
}

void *fst::Partition<int>::~Partition(void *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x1B3EA8670](v5, 0x1020C40F89CB87BLL);
        uint64_t v3 = a1[1];
        uint64_t v2 = a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = (void *)a1[19];
  if (v6)
  {
    a1[20] = v6;
    operator delete(v6);
  }
  int v7 = (void *)a1[16];
  if (v7)
  {
    a1[17] = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)a1[13];
  if (v8)
  {
    a1[14] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[10];
  if (v9)
  {
    a1[11] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[7];
  if (v10)
  {
    a1[8] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)a1[4];
  if (v11)
  {
    a1[5] = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)a1[1];
  if (v12)
  {
    a1[2] = v12;
    operator delete(v12);
  }
  return a1;
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::CyclicMinimizer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x40000, 1);
  *(_OWORD *)(a1 + 20std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = v3 == 0;
  *(_DWORD *)(a1 + 192) = 2;
  *(unsigned char *)(a1 + 196) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 184) = &unk_1F0A450C0;
  fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFst();
}

void sub_1B1D4E448(_Unwind_Exception *a1)
{
  std::deque<int>::~deque[abi:ne180100](v2);
  fst::Partition<int>::~Partition(v1);
  _Unwind_Resume(a1);
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::Initialize(void *a1, uint64_t a2)
{
  unint64_t v4 = a1 + 31;
  fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, a1 + 31, 1);
  fst::ArcSort<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v4);
  fst::Partition<int>::Initialize((uint64_t)a1, (((*(void *)(a1[32] + 72) - *(void *)(a1[32] + 64)) << 29) - 0x100000000) >> 32);
  fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::PrePartition(a1, a2);
  operator new();
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::Compute(void *a1)
{
  uint64_t v1 = a1[30];
  if (v1)
  {
    uint64_t v3 = (uint64_t)(a1 + 25);
    do
    {
      int v4 = *(_DWORD *)(*(void *)(a1[26] + ((a1[29] >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (a1[29] & 0x3FFLL));
      ++a1[29];
      a1[30] = v1 - 1;
      std::deque<int>::__maybe_remove_front_spare[abi:ne180100](v3, 1);
      fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::Split(a1, v4);
      uint64_t v1 = a1[30];
    }
    while (v1);
  }
}

void fst::ArcSort<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(void *a1)
{
  v1[0] = a1;
  v1[1] = &v4;
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  fst::StateMap<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>((uint64_t)a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1D4E5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::PrePartition(void *a1, uint64_t a2)
{
  if (FLAGS_v >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    char v4 = fst::LogMessage::LogMessage((fst *)&v32, (uint64_t)&__p);
    uint64_t v5 = (void *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"PrePartition", 12);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v32);
    if (SHIBYTE(v37) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v37 = 0;
  uint64_t v38 = a2;
  unint64_t v39 = a1;
  int v40 = 1;
  std::string __p = &v36;
  unint64_t v36 = 0;
  int v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v32);
  int v6 = fst::Partition<int>::AddClass((uint64_t)a1);
  if (v32) {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
  }
  else {
    int v7 = v34;
  }
  uint64_t v8 = *(void *)(a1[1] + 8 * v7);
  uint64_t v9 = a1[4];
  uint64_t v10 = *(void *)(v9 + 8 * v6);
  if (v10)
  {
    *(void *)(v10 + 16) = v8;
    uint64_t v10 = *(void *)(v9 + 8 * v6);
  }
  *(void *)(v8 + 8) = v10;
  *(void *)(v8 + 16) = 0;
  *(void *)(v9 + 8 * v6) = v8;
  *(_DWORD *)(a1[10] + 4 * v7) = v6;
  ++*(_DWORD *)(a1[13] + 4 * v6);
  if (v32) {
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
  }
  else {
    int v11 = v34;
  }
  int v31 = v11;
  v29[0] = &v31;
  *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v6;
  LODWORD(v29[0]) = v6;
  std::deque<int>::push_front((uint64_t)(a1 + 25), v29);
  uint64_t v12 = v32;
  if (v32) {
    goto LABEL_28;
  }
  ++v34;
  while (v32)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32)) {
      goto LABEL_30;
    }
    int v31 = 0;
    if (!v32) {
      goto LABEL_19;
    }
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
LABEL_20:
    int v31 = v13;
    uint64_t v14 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>((uint64_t)&__p, (unsigned int *)&v31);
    if (&v36 == (void **)v14)
    {
      int v21 = fst::Partition<int>::AddClass((uint64_t)a1);
      int v22 = v21;
      uint64_t v23 = v31;
      uint64_t v24 = *(void *)(a1[1] + 8 * v31);
      uint64_t v25 = a1[4];
      uint64_t v26 = *(void *)(v25 + 8 * v21);
      if (v26)
      {
        *(void *)(v26 + 16) = v24;
        uint64_t v26 = *(void *)(v25 + 8 * v21);
      }
      *(void *)(v24 + 8) = v26;
      *(void *)(v24 + 16) = 0;
      *(void *)(v25 + 8 * v21) = v24;
      *(_DWORD *)(a1[10] + 4 * v23) = v21;
      ++*(_DWORD *)(a1[13] + 4 * v21);
      v29[0] = &v31;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v21;
      LODWORD(v29[0]) = v22;
      std::deque<int>::push_front((uint64_t)(a1 + 25), v29);
    }
    else
    {
      uint64_t v15 = v31;
      int v16 = *(_DWORD *)(v14 + 32);
      uint64_t v17 = *(void *)(a1[1] + 8 * v31);
      uint64_t v18 = a1[4];
      uint64_t v19 = *(void *)(v18 + 8 * v16);
      if (v19)
      {
        *(void *)(v19 + 16) = v17;
        uint64_t v19 = *(void *)(v18 + 8 * v16);
      }
      *(void *)(v17 + 8) = v19;
      *(void *)(v17 + 16) = 0;
      *(void *)(v18 + 8 * v16) = v17;
      *(_DWORD *)(a1[10] + 4 * v15) = v16;
      ++*(_DWORD *)(a1[13] + 4 * v16);
      int v20 = *(_DWORD *)(v14 + 32);
      v29[0] = &v31;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v20;
    }
    uint64_t v12 = v32;
    if (v32) {
LABEL_28:
    }
      (*(void (**)(uint64_t))(*(void *)v32 + 32))(v12);
    else {
      ++v34;
    }
  }
  if (v34 < v33)
  {
LABEL_19:
    int v13 = v34;
    goto LABEL_20;
  }
LABEL_30:
  if (FLAGS_v >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "INFO");
    char v27 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)v29);
    char v28 = (void *)fst::cerr(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Initial Partition: ", 19);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (v30 < 0) {
      operator delete(v29[0]);
    }
  }
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  std::__tree<int>::destroy((uint64_t)&__p, v36);
}

void sub_1B1D4EA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  std::__tree<int>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

uint64_t fst::StateMap<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, void **a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = (unint64_t)a2[5]; ; a2[5] = (void *)i)
        {
          uint64_t v9 = a2[2];
          if (i >= ((unsigned char *)a2[3] - v9) >> 4) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 208))(a1, v7, &v9[16 * i]);
          unint64_t i = (unint64_t)a2[5] + 1;
        }
        (*(void (**)(void *, uint64_t))(*(void *)*a2 + 32))(*a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 184))(a1, v7);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192);
    return v10(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(void **a1, uint64_t a2)
{
  a1[5] = 0;
  char v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(void *))(*(void *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v26 = 0;
  (*(void (**)(void *, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v24);
  while (1)
  {
    if (!v24[0])
    {
      if (v26 >= v24[2]) {
        goto LABEL_29;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v24[0] + 24))(v24[0])) {
      break;
    }
    if (v24[0])
    {
      uint64_t v7 = (_OWORD *)(*(uint64_t (**)(void))(*(void *)v24[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = (_OWORD *)(v24[1] + 16 * v26);
LABEL_8:
    uint64_t v9 = (char *)a1[3];
    unint64_t v8 = (unint64_t)a1[4];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = (v9 - (unsigned char *)*v4) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v8 - (void)*v4;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v14);
      }
      else {
        uint64_t v15 = 0;
      }
      int v16 = &v15[16 * v11];
      *(_OWORD *)int v16 = *v7;
      uint64_t v18 = (char *)a1[2];
      uint64_t v17 = (char *)a1[3];
      uint64_t v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        uint64_t v17 = (char *)*v4;
      }
      uint64_t v10 = v16 + 16;
      a1[2] = v19;
      a1[3] = v16 + 16;
      a1[4] = &v15[16 * v14];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *v7;
      uint64_t v10 = v9 + 16;
    }
    a1[3] = v10;
    if (v24[0]) {
      (*(void (**)(void))(*(void *)v24[0] + 40))(v24[0]);
    }
    else {
      ++v26;
    }
  }
  if (v24[0])
  {
    (*(void (**)(void))(*(void *)v24[0] + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v25) {
    --*v25;
  }
LABEL_31:
  int v20 = (__n128 *)a1[2];
  int v21 = (long long *)a1[3];
  unint64_t v22 = 126 - 2 * __clz(((char *)v21 - (char *)v20) >> 4);
  if (v21 == (long long *)v20) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,false>(v20, v21, (uint64_t)v24, v23, 1);
}

void sub_1B1D4F08C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,false>(__n128 *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v6 = (long long *)&a2[-1];
      if ((signed __int32)a2[-1].n128_u32[0] < *(_DWORD *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *char v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), (int *)&a2[-1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (__n128 *)a2[-1].n128_u64);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (__n128 *)(a1 + 48), a2 - 1);
      return 1;
    default:
      unint64_t v8 = (_DWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      uint64_t v9 = (_OWORD *)(a1 + 48);
      if ((__n128 *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    long long v12 = *v9;
    int v13 = *v9;
    if (v13 < *v8)
    {
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = *(_DWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v13 >= v15)
        {
          unint64_t v16 = (_OWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (_OWORD *)a1;
LABEL_12:
      _OWORD *v16 = v12;
      if (++v11 == 8) {
        return v9 + 1 == (_OWORD *)a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    if (++v9 == (_OWORD *)a2) {
      return 1;
    }
  }
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::Split(void *a1, int a2)
{
  for (unint64_t i = *(int **)(a1[4] + 8 * a2); i; unint64_t i = (int *)*((void *)i + 1))
  {
    if (*(void *)(*(void *)(*(void *)(a1[32] + 64) + 8 * (*i + 1)) + 32) != *(void *)(*(void *)(*(void *)(a1[32] + 64) + 8 * (*i + 1)) + 24)) {
      operator new();
    }
  }
  uint64_t v4 = a1[33];
  char v5 = *(void **)v4;
  char v6 = (void *)(v4 + 8);
  uint64_t v7 = *(void *)(v4 + 8);
  if (*(void *)v4 != v7)
  {
    int v8 = -1;
    while (1)
    {
      uint64_t v9 = (void *)*v5;
      size_t v35 = *(void **)(v4 + 24);
      if (v7 - (uint64_t)v5 >= 9)
      {
        uint64_t v10 = (void *)*v5;
        int v11 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> **>>(v5, (uint64_t)&v35, (unint64_t)(v7 - (void)v5) >> 3);
        long long v12 = (void *)(v7 - 8);
        if ((void **)(v7 - 8) == v11)
        {
          __n128 *v11 = v10;
        }
        else
        {
          __n128 *v11 = (void *)*v12;
          *long long v12 = v10;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> **>>((BOOL)v5, (uint64_t)(v11 + 1), (uint64_t)&v35, v11 + 1 - (void **)v5);
        }
      }
      *v6 -= 8;
      if (!*v9) {
        break;
      }
      char v13 = (*(uint64_t (**)(void))(*(void *)*v9 + 24))(*v9);
      uint64_t v14 = *v9;
      if ((v13 & 1) == 0)
      {
        if (v14)
        {
          unint64_t v16 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
          if (*v9)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)*v9 + 32))(*v9);
            goto LABEL_24;
          }
        }
        else
        {
LABEL_22:
          unint64_t v16 = (int *)(v9[1] + 16 * v9[4]);
        }
        uint64_t v17 = v9[1] + 16 * v9[4];
LABEL_24:
        uint64_t v18 = *(int *)(v17 + 12);
        int v19 = *v16;
        if (v8 != *v16) {
          fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>((uint64_t)a1, (uint64_t)(a1 + 23));
        }
        if (*(_DWORD *)(a1[13] + 4 * *(int *)(a1[10] + 4 * (v18 - 1))) >= 2u) {
          fst::Partition<int>::SplitOn(a1, v18 - 1);
        }
        if (*v9)
        {
          (*(void (**)(void))(*(void *)*v9 + 40))(*v9);
          if (*v9)
          {
            if ((*(uint64_t (**)(void))(*(void *)*v9 + 24))(*v9))
            {
              if (*v9)
              {
                (*(void (**)(void))(*(void *)*v9 + 8))(*v9);
                goto LABEL_39;
              }
LABEL_37:
              uint64_t v24 = (_DWORD *)v9[3];
              if (v24) {
                --*v24;
              }
LABEL_39:
              MEMORY[0x1B3EA8670](v9, 0x1070C401ACC3EEFLL);
LABEL_55:
              int v8 = v19;
              goto LABEL_56;
            }
LABEL_35:
            BOOL v20 = (void **)a1[33];
            int v21 = (char *)v20[1];
            unint64_t v22 = (unint64_t)v20[2];
            if ((unint64_t)v21 >= v22)
            {
              uint64_t v25 = (v21 - (unsigned char *)*v20) >> 3;
              if ((unint64_t)(v25 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v26 = v22 - (void)*v20;
              uint64_t v27 = v26 >> 2;
              if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
                uint64_t v27 = v25 + 1;
              }
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v27;
              }
              if (v28) {
                long long v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v20 + 2), v28);
              }
              else {
                long long v29 = 0;
              }
              long long v30 = &v29[8 * v25];
              *(void *)long long v30 = v9;
              uint64_t v23 = (uint64_t)(v30 + 8);
              uint64_t v32 = (char *)*v20;
              int v31 = (char *)v20[1];
              if (v31 != *v20)
              {
                do
                {
                  uint64_t v33 = *((void *)v31 - 1);
                  v31 -= 8;
                  *((void *)v30 - 1) = v33;
                  v30 -= 8;
                }
                while (v31 != v32);
                int v31 = (char *)*v20;
              }
              *BOOL v20 = v30;
              v20[1] = (void *)v23;
              _DWORD v20[2] = &v29[8 * v28];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(void *)int v21 = v9;
              uint64_t v23 = (uint64_t)(v21 + 8);
            }
            v20[1] = (void *)v23;
            int v34 = *v20;
            size_t v35 = v20[3];
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> **>>((BOOL)v34, v23, (uint64_t)&v35, (v23 - (uint64_t)v34) >> 3);
            goto LABEL_55;
          }
        }
        else
        {
          ++v9[4];
        }
        if (v9[4] >= v9[2]) {
          goto LABEL_37;
        }
        goto LABEL_35;
      }
      if (!v14) {
        goto LABEL_16;
      }
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
LABEL_18:
      MEMORY[0x1B3EA8670](v9, 0x1070C401ACC3EEFLL);
LABEL_56:
      uint64_t v4 = a1[33];
      char v5 = *(void **)v4;
      char v6 = (void *)(v4 + 8);
      uint64_t v7 = *(void *)(v4 + 8);
      if (*(void *)v4 == v7) {
        goto LABEL_57;
      }
    }
    if (v9[4] < v9[2]) {
      goto LABEL_22;
    }
LABEL_16:
    int v15 = (_DWORD *)v9[3];
    if (v15) {
      --*v15;
    }
    goto LABEL_18;
  }
LABEL_57:
  fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>((uint64_t)a1, (uint64_t)(a1 + 23));
}

void sub_1B1D4FBB0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C401ACC3EEFLL);
  _Unwind_Resume(a1);
}

void fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 160);
  if (v3 != *(void *)(a1 + 152))
  {
    unint64_t v5 = 0;
    uint64_t v6 = a2 + 16;
    uint64_t v3 = *(void *)(a1 + 152);
    do
    {
      int v7 = fst::Partition<int>::SplitRefine(a1, *(_DWORD *)(v3 + 4 * v5));
      if (a2 && v7 != -1)
      {
        int v8 = v7;
        std::deque<int>::push_front(v6, &v8);
      }
      ++v5;
      uint64_t v3 = *(void *)(a1 + 152);
    }
    while (v5 < (*(void *)(a1 + 160) - v3) >> 2);
  }
  *(void *)(a1 + 16std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = v3;
}

void *fst::Partition<int>::SplitOn(void *result, int a2)
{
  int v2 = *(_DWORD *)(result[10] + 4 * a2);
  if (*(_DWORD *)(result[13] + 4 * v2) != 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = result[16];
    int v6 = *(_DWORD *)(v5 + 4 * v2);
    if (!v6)
    {
      unint64_t v7 = result[21];
      int v8 = (int *)result[20];
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = (int *)result[19];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = v7 - (void)v10;
        unint64_t v13 = (uint64_t)(v7 - (void)v10) >> 1;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v4 + 21), v14);
          uint64_t v10 = (int *)v4[19];
          int v8 = (int *)v4[20];
        }
        else
        {
          int v15 = 0;
        }
        unint64_t v16 = (int *)&v15[4 * v11];
        uint64_t v17 = &v15[4 * v14];
        int *v16 = v2;
        uint64_t v9 = v16 + 1;
        while (v8 != v10)
        {
          int v18 = *--v8;
          *--unint64_t v16 = v18;
        }
        v4[19] = v16;
        v4[20] = v9;
        v4[21] = v17;
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *int v8 = v2;
        uint64_t v9 = v8 + 1;
      }
      v4[20] = v9;
      *(void *)(v4[7] + 8 * v2) = *(void *)(v4[4] + 8 * v2);
      uint64_t v5 = v4[16];
      int v6 = *(_DWORD *)(v5 + 4 * v2);
    }
    *(_DWORD *)(v5 + 4 * v2) = v6 + 1;
    uint64_t v19 = v4[7];
    uint64_t v20 = *(void *)(v19 + 8 * v2);
    if (v20 && v20 == *(void *)(v4[1] + 8 * a2)) {
      *(void *)(v19 + 8 * v2) = *(void *)(v20 + 8);
    }
    return fst::Partition<int>::Move(v4, a2, v2);
  }
  return result;
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> **>>(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = v4 >> 1;
    int v8 = (void **)(result + 8 * (v4 >> 1));
    uint64_t v9 = (void **)(a2 - 8);
    BOOL result = fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a3, *v8, *(void **)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        int v8 = (void **)(v6 + 8 * v7);
        BOOL result = fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a3, *v8, v10);
        uint64_t v9 = (void **)v11;
      }
      while (result);
      void *v11 = v10;
    }
  }
  return result;
}

BOOL fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(uint64_t a1, void *a2, void *a3)
{
  if (*a2) {
    unint64_t v4 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)*a2 + 32))(*a2);
  }
  else {
    unint64_t v4 = (_DWORD *)(a2[1] + 16 * a2[4]);
  }
  if (*a3) {
    uint64_t v5 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 32))(*a3);
  }
  else {
    uint64_t v5 = (_DWORD *)(a3[1] + 16 * a3[4]);
  }
  return *v4 > *v5;
}

void **std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> **>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = (void **)&a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a2, *v9, (void *)a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t fst::Partition<int>::SplitRefine(uint64_t a1, int a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8 * a2);
  if (v4)
  {
    uint64_t result = fst::Partition<int>::AddClass(a1);
    if (*(unsigned char *)(a1 + 176))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8 * v3);
      if (v6 == v4)
      {
        unsigned int v7 = 0;
      }
      else
      {
        unsigned int v7 = 0;
        do
        {
          ++v7;
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6 != v4);
      }
      *(_DWORD *)(*(void *)(a1 + 128) + 4 * v3) = v7;
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(*(void *)(a1 + 128) + 4 * v3);
    }
    unsigned int v8 = *(_DWORD *)(*(void *)(a1 + 104) + 4 * v3) - v7;
    if (v8 >= v7)
    {
      uint64_t v9 = (int)result;
      *(void *)(*(void *)(a1 + 32) + 8 * (int)result) = *(void *)(*(void *)(a1 + 32) + 8 * v3);
      uint64_t v11 = *(void *)(a1 + 104);
      *(_DWORD *)(v11 + 4 * v3) = v8;
      *(_DWORD *)(v11 + 4 * (int)result) = *(_DWORD *)(*(void *)(a1 + 128) + 4 * v3);
      *(void *)(*(void *)(v4 + 16) + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)(*(void *)(a1 + 32) + 8 * v3) = v4;
    }
    else
    {
      uint64_t v9 = (int)result;
      *(void *)(*(void *)(a1 + 32) + 8 * (int)result) = v4;
      *(void *)(*(void *)(v4 + 16) + 8) = 0;
      *(void *)(v4 + 16) = 0;
      uint64_t v10 = *(void *)(a1 + 104);
      *(_DWORD *)(v10 + 4 * v3) = *(_DWORD *)(*(void *)(a1 + 128) + 4 * v3);
      *(_DWORD *)(v10 + 4 * (int)result) = v8;
    }
    unint64_t v12 = *(int **)(*(void *)(a1 + 32) + 8 * v9);
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * *v12) = result;
        unint64_t v12 = (int *)*((void *)v12 + 1);
      }
      while (v12);
    }
    *(void *)(*(void *)(a1 + 56) + 8 * v3) = 0;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
  }
  *(_DWORD *)(*(void *)(a1 + 128) + 4 * v3) = 0;
  return result;
}

void *fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::~CyclicMinimizer(void *a1)
{
  uint64_t v2 = a1[33];
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1B3EA8670](v2, 0xE0C40DD5D8FE3);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ImplToFst(a1 + 31);
  std::deque<int>::~deque[abi:ne180100](a1 + 25);
  return fst::Partition<int>::~Partition(a1);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = a2[5]; ; a2[5] = i)
        {
          uint64_t v9 = a2[2];
          if (i >= (a2[3] - v9) >> 4) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 208))(a1, v7, v9 + 16 * i);
          unint64_t i = a2[5] + 1;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)*a2 + 32))(*a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 184))(a1, v7);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192);
    return v10(a1, v5 & 0xA6A0A950007, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetState(uint64_t *a1, uint64_t a2)
{
  a1[5] = 0;
  uint64_t v4 = (void **)(a1 + 2);
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v27 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v25);
  while (1)
  {
    if (!v25[0])
    {
      if (v27 >= v25[2]) {
        goto LABEL_29;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v25[0] + 24))(v25[0])) {
      break;
    }
    if (v25[0])
    {
      uint64_t v7 = (_OWORD *)(*(uint64_t (**)(void))(*(void *)v25[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = (_OWORD *)(v25[1] + 16 * v27);
LABEL_8:
    uint64_t v9 = (char *)a1[3];
    unint64_t v8 = a1[4];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = (v9 - (unsigned char *)*v4) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v8 - (void)*v4;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v14);
      }
      else {
        int v15 = 0;
      }
      unint64_t v16 = &v15[16 * v11];
      *(_OWORD *)unint64_t v16 = *v7;
      int v18 = (char *)a1[2];
      uint64_t v17 = (char *)a1[3];
      uint64_t v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        uint64_t v17 = (char *)*v4;
      }
      uint64_t v10 = v16 + 16;
      a1[2] = (uint64_t)v19;
      a1[3] = (uint64_t)(v16 + 16);
      a1[4] = (uint64_t)&v15[16 * v14];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *v7;
      uint64_t v10 = v9 + 16;
    }
    a1[3] = (uint64_t)v10;
    if (v25[0]) {
      (*(void (**)(void))(*(void *)v25[0] + 40))(v25[0]);
    }
    else {
      ++v27;
    }
  }
  if (v25[0])
  {
    (*(void (**)(void))(*(void *)v25[0] + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v26) {
    --*v26;
  }
LABEL_31:
  uint64_t v20 = (int *)a1[2];
  int v21 = (int *)a1[3];
  unint64_t v22 = 126 - 2 * __clz(((char *)v21 - (char *)v20) >> 4);
  if (v21 == v20) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(v20, v21, (uint64_t)v25, v23, 1);
  uint64_t v24 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *>,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Equal &>(a1[2], (_OWORD *)a1[3], (uint64_t)v25);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::resize((uint64_t)v4, (v24 - a1[2]) >> 4);
}

void sub_1B1D50718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::__append((char **)a1, a2 - v2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(int *a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
_OWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(_OWORD *result, _OWORD *a2)
{
  if (result == a2) {
    return result;
  }
  unint64_t v2 = result + 1;
  if (result + 1 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result;
  do
  {
    char v5 = v4;
    uint64_t v4 = v2;
    int v6 = v5[4];
    if (v6 >= *v5)
    {
      if (v6 > *v5) {
        goto LABEL_22;
      }
      int v7 = v5[5];
      int v14 = v5[1];
      if (v7 >= v14 && (v7 > v14 || v5[7] >= v5[3])) {
        goto LABEL_22;
      }
    }
    else
    {
      int v7 = v5[5];
    }
    int v8 = v5[6];
    int v9 = v5[7];
    *uint64_t v4 = *(_OWORD *)v5;
    uint64_t v10 = result;
    if (v5 == (_DWORD *)result) {
      goto LABEL_21;
    }
    uint64_t v11 = v3;
    while (1)
    {
      int v12 = *(_DWORD *)((char *)result + v11 - 16);
      if (v6 >= v12)
      {
        if (v6 > v12) {
          goto LABEL_20;
        }
        int v13 = *(_DWORD *)((char *)result + v11 - 12);
        if (v7 >= v13) {
          break;
        }
      }
LABEL_13:
      v5 -= 4;
      *(_OWORD *)((char *)result + v11) = *(_OWORD *)((char *)result + v11 - 16);
      v11 -= 16;
      if (!v11)
      {
        uint64_t v10 = result;
        goto LABEL_21;
      }
    }
    if (v7 <= v13)
    {
      uint64_t v10 = (_DWORD *)((char *)result + v11);
      if (v9 >= *(_DWORD *)((char *)result + v11 - 4)) {
        goto LABEL_21;
      }
      goto LABEL_13;
    }
LABEL_20:
    uint64_t v10 = v5;
LABEL_21:
    *uint64_t v10 = v6;
    v10[1] = v7;
    void v10[2] = v8;
    void v10[3] = v9;
LABEL_22:
    unint64_t v2 = v4 + 1;
    v3 += 16;
  }
  while (v4 + 1 != a2);
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    while (1)
    {
      if (result + 4 == a2) {
        return result;
      }
      unint64_t v2 = result;
      result += 4;
      int v3 = v2[4];
      if (v3 >= *v2)
      {
        if (v3 <= *v2)
        {
          int v4 = v2[5];
          int v5 = v2[1];
          if (v4 < v5 || v4 <= v5 && v2[7] < v2[3]) {
            goto LABEL_9;
          }
        }
      }
      else
      {
        int v4 = v2[5];
LABEL_9:
        int v6 = v2[6];
        int v7 = v2[7];
        do
        {
          do
          {
            int v8 = v2;
            *((_OWORD *)v2 + 1) = *(_OWORD *)v2;
            int v9 = *(v2 - 4);
            v2 -= 4;
            BOOL v10 = v3 <= v9;
          }
          while (v3 < v9);
          if (!v10) {
            break;
          }
          int v11 = *(v8 - 3);
        }
        while (v4 < v11 || v4 <= v11 && v7 < *(v8 - 1));
        *int v8 = v3;
        v8[1] = v4;
        int32x2_t v8[2] = v6;
        void v8[3] = v7;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(long long *a1, int *a2, long long *a3)
{
  int v3 = *a2;
  if (*a2 < *(_DWORD *)a1
    || v3 <= *(_DWORD *)a1
    && ((int v14 = a2[1], v15 = *((_DWORD *)a1 + 1), v14 < v15) || v14 <= v15 && a2[3] < *((_DWORD *)a1 + 3)))
  {
    if (*(_DWORD *)a3 < v3
      || *(_DWORD *)a3 <= v3
      && ((int v10 = *((_DWORD *)a3 + 1), v11 = a2[1], v10 < v11) || v10 <= v11 && *((_DWORD *)a3 + 3) < a2[3]))
    {
      long long v4 = *a1;
      *a1 = *a3;
      *a3 = v4;
    }
    else
    {
      long long v12 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v12;
      if (*(_DWORD *)a3 < *a2
        || *(_DWORD *)a3 <= *a2
        && ((v18 = *((_DWORD *)a3 + 1), int v19 = a2[1], v18 < v19) || v18 <= v19 && *((_DWORD *)a3 + 3) < a2[3]))
      {
        long long v13 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *a3;
        *a3 = v13;
        return 2;
      }
    }
    return 1;
  }
  if (*(_DWORD *)a3 < v3
    || *(_DWORD *)a3 <= v3
    && ((int v6 = *((_DWORD *)a3 + 1), v7 = a2[1], v6 < v7) || v6 <= v7 && *((_DWORD *)a3 + 3) < a2[3]))
  {
    long long v8 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *a3;
    *a3 = v8;
    if (*a2 < *(_DWORD *)a1
      || *a2 <= *(_DWORD *)a1
      && ((int v16 = a2[1], v17 = *((_DWORD *)a1 + 1), v16 < v17) || v16 <= v17 && a2[3] < *((_DWORD *)a1 + 3)))
    {
      long long v9 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v9;
      return 2;
    }
    return 1;
  }
  return 0;
}

_DWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &>(_DWORD *a1, unint64_t a2)
{
  int v2 = *a1;
  int v3 = a1[1];
  int v4 = a1[3];
  int v5 = *(_DWORD *)(a2 - 16);
  if (*a1 >= v5 && (v2 > v5 || (int v6 = *(_DWORD *)(a2 - 12), v3 >= v6) && (v3 > v6 || v4 >= *(_DWORD *)(a2 - 4))))
  {
    for (unint64_t i = a1 + 4; (unint64_t)i < a2; i += 4)
    {
      if (v2 < *i) {
        break;
      }
      if (v2 <= *i)
      {
        int v21 = i[1];
        if (v3 < v21 || v3 <= v21 && v4 < i[3]) {
          break;
        }
      }
    }
  }
  else
  {
    unint64_t i = a1;
    while (1)
    {
      int v9 = i[4];
      i += 4;
      int v8 = v9;
      if (v2 < v9) {
        break;
      }
      if (v2 <= v8)
      {
        int v10 = i[1];
        if (v3 < v10 || v3 <= v10 && v4 < i[3]) {
          break;
        }
      }
    }
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 16; ; a2 -= 16)
    {
      if (v2 >= v5)
      {
        if (v2 > v5) {
          break;
        }
        int v11 = *(_DWORD *)(a2 + 4);
        if (v3 >= v11 && (v3 > v11 || v4 >= *(_DWORD *)(a2 + 12))) {
          break;
        }
      }
      int v12 = *(_DWORD *)(a2 - 16);
      int v5 = v12;
    }
  }
  int v13 = a1[2];
  while ((unint64_t)i < a2)
  {
    long long v22 = *(_OWORD *)i;
    *(_OWORD *)unint64_t i = *(_OWORD *)a2;
    *(_OWORD *)a2 = v22;
    while (1)
    {
      int v15 = i[4];
      i += 4;
      int v14 = v15;
      if (v2 < v15) {
        break;
      }
      if (v2 <= v14)
      {
        int v16 = i[1];
        if (v3 < v16 || v3 <= v16 && v4 < i[3]) {
          break;
        }
      }
    }
    do
    {
      do
      {
        int v17 = *(_DWORD *)(a2 - 16);
        a2 -= 16;
        BOOL v18 = v2 <= v17;
      }
      while (v2 < v17);
      if (!v18) {
        break;
      }
      int v19 = *(_DWORD *)(a2 + 4);
    }
    while (v3 < v19 || v3 <= v19 && v4 < *(_DWORD *)(a2 + 12));
  }
  if (i - 4 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)i - 1);
  }
  *(i - 4) = v2;
  *(i - 3) = v3;
  *(i - 2) = v13;
  *(i - 1) = v4;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &>(int *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  int v4 = a1[1];
  int v5 = a1[2];
  int v6 = a1[3];
  while (1)
  {
    int v7 = a1[v2 + 4];
    if (v7 >= v3)
    {
      if (v7 > v3) {
        break;
      }
      int v8 = a1[v2 + 5];
      if (v8 >= v4 && (v8 > v4 || a1[v2 + 7] >= v6)) {
        break;
      }
    }
    v2 += 4;
  }
  unint64_t v9 = (unint64_t)&a1[v2 + 4];
  if (v2 * 4)
  {
    while (1)
    {
      int v11 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
      int v10 = v11;
      if (v11 < v3) {
        break;
      }
      if (v10 <= v3)
      {
        int v12 = *(_DWORD *)(a2 + 4);
        if (v12 < v4 || v12 <= v4 && *(_DWORD *)(a2 + 12) < v6) {
          break;
        }
      }
    }
  }
  else
  {
LABEL_25:
    if (v9 < a2)
    {
      do
      {
        int v14 = *(_DWORD *)(a2 - 16);
        a2 -= 16;
        int v13 = v14;
        if (v14 < v3) {
          break;
        }
        if (v13 > v3) {
          goto LABEL_25;
        }
        int v15 = *(_DWORD *)(a2 + 4);
        if (v15 < v4) {
          break;
        }
        if (v15 > v4) {
          goto LABEL_25;
        }
      }
      while (*(_DWORD *)(a2 + 12) >= v6 && v9 < a2);
    }
  }
  unint64_t v17 = v9;
  if (v9 < a2)
  {
    unint64_t v18 = a2;
    do
    {
      long long v26 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
      *(_OWORD *)unint64_t v18 = v26;
      do
      {
        do
        {
          int v19 = *(_DWORD *)(v17 + 16);
          v17 += 16;
          BOOL v20 = v19 <= v3;
        }
        while (v19 < v3);
        if (!v20) {
          break;
        }
        int v21 = *(_DWORD *)(v17 + 4);
      }
      while (v21 < v4 || v21 <= v4 && *(_DWORD *)(v17 + 12) < v6);
      while (1)
      {
        int v23 = *(_DWORD *)(v18 - 16);
        v18 -= 16;
        int v22 = v23;
        if (v23 < v3) {
          break;
        }
        if (v22 <= v3)
        {
          int v24 = *(_DWORD *)(v18 + 4);
          if (v24 < v4 || v24 <= v4 && *(_DWORD *)(v18 + 12) < v6) {
            break;
          }
        }
      }
    }
    while (v17 < v18);
  }
  if ((int *)(v17 - 16) != a1) {
    *(_OWORD *)a1 = *(_OWORD *)(v17 - 16);
  }
  *(_DWORD *)(v17 - 16) = v3;
  *(_DWORD *)(v17 - 12) = v4;
  *(_DWORD *)(v17 - 8) = v5;
  *(_DWORD *)(v17 - 4) = v6;
  return v17 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t a1, long long *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = a2 - 1;
      int v7 = *((_DWORD *)a2 - 4);
      if (v7 < *(_DWORD *)a1
        || v7 <= *(_DWORD *)a1
        && ((int v22 = *((_DWORD *)a2 - 3), v23 = *(_DWORD *)(a1 + 4), v22 < v23)
         || v22 <= v23 && *((_DWORD *)a2 - 1) < *(_DWORD *)(a1 + 12)))
      {
        long long v8 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *int v6 = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, (int *)(a1 + 16), a1 + 32, (uint64_t)(a2 - 1));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, (int *)(a1 + 16), a1 + 32, a1 + 48, (uint64_t)(a2 - 1));
      return 1;
    default:
      unint64_t v9 = (long long *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), (long long *)(a1 + 32));
      int v10 = (long long *)(a1 + 48);
      if ((long long *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    int v13 = *(_DWORD *)v10;
    if (*(_DWORD *)v10 < *(_DWORD *)v9) {
      break;
    }
    if (v13 <= *(_DWORD *)v9)
    {
      int v14 = *((_DWORD *)v10 + 1);
      int v21 = *((_DWORD *)v9 + 1);
      if (v14 < v21 || v14 <= v21 && *((_DWORD *)v10 + 3) < *((_DWORD *)v9 + 3)) {
        goto LABEL_9;
      }
    }
LABEL_26:
    unint64_t v9 = v10;
    v11 += 16;
    if (++v10 == a2) {
      return 1;
    }
  }
  int v14 = *((_DWORD *)v10 + 1);
LABEL_9:
  int v15 = *((_DWORD *)v10 + 2);
  int v16 = *((_DWORD *)v10 + 3);
  *int v10 = *v9;
  unint64_t v17 = (_DWORD *)a1;
  if (v9 != (long long *)a1)
  {
    uint64_t v18 = v11;
    while (1)
    {
      int v19 = *(_DWORD *)(a1 + v18 + 16);
      if (v13 >= v19)
      {
        if (v13 > v19) {
          goto LABEL_23;
        }
        int v20 = *(_DWORD *)(a1 + v18 + 20);
        if (v14 >= v20)
        {
          if (v14 > v20)
          {
LABEL_23:
            unint64_t v17 = v9;
            goto LABEL_25;
          }
          if (v16 >= *(_DWORD *)(a1 + v18 + 28)) {
            break;
          }
        }
      }
      --v9;
      *(_OWORD *)(a1 + v18 + 32) = *(_OWORD *)(a1 + v18 + 16);
      v18 -= 16;
      if (v18 == -32)
      {
        unint64_t v17 = (_DWORD *)a1;
        goto LABEL_25;
      }
    }
    unint64_t v17 = (_DWORD *)(a1 + v18 + 32);
  }
LABEL_25:
  _DWORD *v17 = v13;
  v17[1] = v14;
  v17[2] = v15;
  void v17[3] = v16;
  if (++v12 != 8) {
    goto LABEL_26;
  }
  return v10 + 1 == a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, a2, (long long *)a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3
    || *(_DWORD *)a4 <= *(_DWORD *)a3
    && ((int v9 = *(_DWORD *)(a4 + 4), v10 = *(_DWORD *)(a3 + 4), v9 < v10)
     || v9 <= v10 && *(_DWORD *)(a4 + 12) < *(_DWORD *)(a3 + 12)))
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_DWORD *)a3 < *a2
      || *(_DWORD *)a3 <= *a2
      && ((v11 = *(_DWORD *)(a3 + 4), int v12 = a2[1], v11 < v12) || v11 <= v12 && *(_DWORD *)(a3 + 12) < a2[3]))
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_DWORD *)a1
        || *a2 <= *(_DWORD *)a1
        && ((int v13 = a2[1], v14 = *(_DWORD *)(a1 + 4), v13 < v14) || v13 <= v14 && a2[3] < *(_DWORD *)(a1 + 12)))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, a2, a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4
    || *(_DWORD *)a5 <= *(_DWORD *)a4
    && ((v20 = *(_DWORD *)(a5 + 4), int v21 = *(_DWORD *)(a4 + 4), v20 < v21)
     || v20 <= v21 && *(_DWORD *)(a5 + 12) < *(_DWORD *)(a4 + 12)))
  {
    long long v10 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v10;
    if (*(_DWORD *)a4 < *(_DWORD *)a3
      || *(_DWORD *)a4 <= *(_DWORD *)a3
      && ((v11 = *(_DWORD *)(a4 + 4), int v12 = *(_DWORD *)(a3 + 4), v11 < v12)
       || v11 <= v12 && *(_DWORD *)(a4 + 12) < *(_DWORD *)(a3 + 12)))
    {
      long long v13 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v13;
      if (*(_DWORD *)a3 < *a2
        || *(_DWORD *)a3 <= *a2
        && ((int v14 = *(_DWORD *)(a3 + 4), v15 = a2[1], v14 < v15) || v14 <= v15 && *(_DWORD *)(a3 + 12) < a2[3]))
      {
        long long v16 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v16;
        if (*a2 < *(_DWORD *)a1
          || *a2 <= *(_DWORD *)a1
          && ((int v17 = a2[1], v18 = *(_DWORD *)(a1 + 4), v17 < v18) || v17 <= v18 && a2[3] < *(_DWORD *)(a1 + 12)))
        {
          long long v19 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)a2 = v19;
        }
      }
    }
  }
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        if (*v14 < *a1 || *v14 <= *a1 && ((int v15 = v14[1], v16 = a1[1], v15 < v16) || v15 <= v16 && v14[3] < a1[3]))
        {
          long long v17 = *(_OWORD *)v14;
          *(_OWORD *)int v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v18 = (unint64_t)v8 >> 4;
      long long v19 = a2 - 4;
      do
      {
        long long v23 = *(_OWORD *)a1;
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, a4, v18);
        if (v19 == v20)
        {
          *(_OWORD *)int v20 = v23;
        }
        else
        {
          *(_OWORD *)int v20 = *(_OWORD *)v19;
          *(_OWORD *)long long v19 = v23;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, (uint64_t)(v20 + 4), a4, ((char *)(v20 + 4) - (char *)a1) >> 4);
        }
        v19 -= 4;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (int *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = v8[4];
        if (*v8 < v10
          || *v8 <= v10
          && ((v11 = *(_DWORD *)(result + 16 * v7 + 4), int v12 = v8[5], v11 < v12)
           || v11 <= v12 && *(_DWORD *)(result + 16 * v7 + 12) < v8[7]))
        {
          v8 += 4;
          uint64_t v7 = v9;
        }
      }
      int v13 = *a4;
      if (*v8 >= *a4)
      {
        if (*v8 <= v13)
        {
          int v15 = v8[1];
          int v14 = a4[1];
          if (v15 < v14 || v15 <= v14 && v8[3] < a4[3]) {
            return result;
          }
        }
        else
        {
          int v14 = a4[1];
        }
        int v16 = a4[2];
        int v17 = a4[3];
        *(_OWORD *)a4 = *(_OWORD *)v8;
        while (v5 >= v7)
        {
          uint64_t v18 = v8;
          uint64_t v19 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (int *)(result + 16 * v7);
          uint64_t v20 = v19 + 2;
          if (v20 < a3)
          {
            int v21 = v8[4];
            if (*v8 < v21
              || *v8 <= v21
              && ((int v22 = *(_DWORD *)(result + 16 * v7 + 4), v23 = v8[5], v22 < v23)
               || v22 <= v23 && *(_DWORD *)(result + 16 * v7 + 12) < v8[7]))
            {
              v8 += 4;
              uint64_t v7 = v20;
            }
          }
          if (*v8 < v13 || *v8 <= v13 && ((int v24 = v8[1], v24 < v14) || v24 <= v14 && v8[3] < v17))
          {
            uint64_t v8 = v18;
            break;
          }
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v8;
        }
        *uint64_t v8 = v13;
        v8[1] = v14;
        int32x2_t v8[2] = v16;
        void v8[3] = v17;
      }
    }
  }
  return result;
}

__n128 std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    uint64_t v7 = v3 + 1;
    a1 += 4 * v3 + 4;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      int v10 = a1[4];
      if (*a1 < v10
        || *a1 <= v10 && ((v11 = DWORD1(v6[v7]), int v12 = a1[5], v11 < v12) || v11 <= v12 && SHIDWORD(v6[v7]) < a1[7]))
      {
        a1 += 4;
        uint64_t v3 = v9;
      }
    }
    __n128 result = *(__n128 *)a1;
    *uint64_t v6 = *(_OWORD *)a1;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (_DWORD *)(result + 16 * (v4 >> 1));
    int v7 = *(_DWORD *)(a2 - 16);
    if (*v6 >= v7)
    {
      if (*v6 > v7) {
        return result;
      }
      int v9 = *(_DWORD *)(result + 16 * v5 + 4);
      int v8 = *(_DWORD *)(a2 - 12);
      if (v9 >= v8 && (v9 > v8 || *(_DWORD *)(result + 16 * v5 + 12) >= *(_DWORD *)(a2 - 4))) {
        return result;
      }
    }
    else
    {
      int v8 = *(_DWORD *)(a2 - 12);
    }
    int v10 = *(_DWORD *)(a2 - 8);
    int v11 = *(_DWORD *)(a2 - 4);
    *(_OWORD *)(a2 - 16) = *(_OWORD *)v6;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v13 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        int v12 = (_DWORD *)(result + 16 * v5);
        if (*v12 >= v7)
        {
          if (*v12 > v7) {
            break;
          }
          int v14 = *(_DWORD *)(result + 16 * v5 + 4);
          if (v14 >= v8 && (v14 > v8 || *(_DWORD *)(result + 16 * v5 + 12) >= v11)) {
            break;
          }
        }
        *(_OWORD *)uint64_t v6 = *(_OWORD *)v12;
        uint64_t v6 = (_DWORD *)(result + 16 * v5);
        if (v13 <= 1) {
          goto LABEL_16;
        }
      }
    }
    int v12 = v6;
LABEL_16:
    *int v12 = v7;
    v12[1] = v8;
    void v12[2] = v10;
    void v12[3] = v11;
  }
  return result;
}

uint64_t std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *>,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Equal &>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t result = (uint64_t)a2;
  if ((_OWORD *)a1 != a2)
  {
    do
    {
      uint64_t v7 = a1 + 16;
      if ((_OWORD *)(a1 + 16) == a2) {
        return (uint64_t)a2;
      }
      BOOL v8 = fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Equal::operator()(a3, a1, a1 + 16);
      a1 = v7;
    }
    while (!v8);
    int v9 = (_OWORD *)(v7 + 16);
    uint64_t v10 = v7 - 16;
    while (v9 != a2)
    {
      if (!fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Equal::operator()(a3, v10, (uint64_t)v9))
      {
        *(_OWORD *)(v10 + 16) = *v9;
        v10 += 16;
      }
      ++v9;
    }
    return v10 + 16;
  }
  return result;
}

BOOL fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Equal::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)a2 == *(_DWORD *)a3
      && *(_DWORD *)(a2 + 4) == *(_DWORD *)(a3 + 4)
      && *(_DWORD *)(a2 + 12) == *(_DWORD *)(a3 + 12)
      && *(float *)(a2 + 8) == *(float *)(a3 + 8);
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = a1[2];
  uint64_t v6 = a1[1];
  if (a2 <= (v5 - v6) >> 4)
  {
    a1[1] = &v6[16 * a2];
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v8 = v6 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - v7;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v12);
      uint64_t v7 = *a1;
      uint64_t v6 = a1[1];
    }
    else
    {
      unint64_t v13 = 0;
    }
    int v14 = &v13[16 * v10];
    int v15 = &v13[16 * v12];
    int v16 = &v14[16 * a2];
    if (v6 != v7)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v7);
      uint64_t v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void fst::RmFinalEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  memset(v4, 0, 24);
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = 0;
  v1[0] = 0;
  v1[1] = v4;
  v1[2] = v3;
  v1[3] = &v2;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (uint64_t)v1);
}

void sub_1B1D52700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a21);
  int v23 = *(void **)(v21 - 152);
  if (v23) {
    operator delete(v23);
  }
  int v24 = *(void **)(v21 - 128);
  if (v24) {
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~EncodeMapper(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(v2 + 80) - 1;
  *(_DWORD *)(v2 + 8std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = v3;
  if (!v3)
  {
    uint64_t v4 = fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~EncodeTable((void *)v2);
    MEMORY[0x1B3EA8670](v4, 0x10A0C40782F6942);
  }
  return a1;
}

void *fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~EncodeTable(void *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x1B3EA8670](v5, 0x1000C403E1C8BA9);
        uint64_t v3 = a1[1];
        uint64_t v2 = a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[11];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[12];
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 4));
  uint64_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

kaldi::quasar::LmeTrie *kaldi::quasar::LmeTrie::LmeTrie(kaldi::quasar::LmeTrie *this, int a2, int a3, char a4)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3 - a2 + 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v5 = (char **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v6 = (std::vector<unsigned int> *)((char *)this + 32);
  *(_OWORD *)((char *)this + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0u;
  *((unsigned char *)this + 68) = a4;
  std::vector<kaldi::quasar::LmeTrie::Arc>::reserve((void **)this + 1, 0x400000uLL);
  std::vector<int>::reserve(v6, 0x200000uLL);
  unint64_t v7 = *((void *)this + 3);
  uint64_t v8 = (void *)*((void *)this + 2);
  if ((unint64_t)v8 >= v7)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - *v5) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*v5) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 24, v13);
    }
    else {
      int v14 = 0;
    }
    int v15 = &v14[24 * v10];
    int v16 = &v14[24 * v13];
    *(void *)int v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = 0;
    unint64_t v9 = v15 + 24;
    uint64_t v18 = (char *)*((void *)this + 1);
    int v17 = (char *)*((void *)this + 2);
    if (v17 != v18)
    {
      do
      {
        long long v19 = *(_OWORD *)(v17 - 24);
        *((void *)v15 - 1) = *((void *)v17 - 1);
        *(_OWORD *)(v15 - 24) = v19;
        v15 -= 24;
        v17 -= 24;
      }
      while (v17 != v18);
      int v17 = *v5;
    }
    *((void *)this + 1) = v15;
    *((void *)this + 2) = v9;
    *((void *)this + 3) = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *uint64_t v8 = 0;
    v8[1] = 0;
    unint64_t v9 = v8 + 3;
    int32x2_t v8[2] = 0;
  }
  unint64_t v20 = *((void *)this + 6);
  *((void *)this + 2) = v9;
  uint64_t v21 = (_DWORD *)*((void *)this + 5);
  if ((unint64_t)v21 >= v20)
  {
    uint64_t v23 = v21 - v6->__begin_;
    if ((unint64_t)(v23 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = v20 - (unint64_t)v6->__begin_;
    uint64_t v25 = v24 >> 1;
    if (v24 >> 1 <= (unint64_t)(v23 + 1)) {
      uint64_t v25 = v23 + 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26) {
      int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 48, v26);
    }
    else {
      int v27 = 0;
    }
    long long v28 = &v27[4 * v23];
    long long v29 = &v27[4 * v26];
    *(_DWORD *)long long v28 = 0;
    int v22 = v28 + 4;
    long long v30 = (char *)*((void *)this + 4);
    for (unint64_t i = (char *)*((void *)this + 5); i != v30; i -= 4)
    {
      int v32 = *((_DWORD *)i - 1);
      *((_DWORD *)v28 - 1) = v32;
      v28 -= 4;
    }
    *((void *)this + 4) = v28;
    *((void *)this + 5) = v22;
    *((void *)this + 6) = v29;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *uint64_t v21 = 0;
    int v22 = v21 + 1;
  }
  *((void *)this + 5) = v22;
  *((_DWORD *)this + 14) = kaldi::quasar::LmeTrie::StateNew(this);
  *((_DWORD *)this + 15) = kaldi::quasar::LmeTrie::StateNew(this);
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_1B1D52BC8(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<kaldi::quasar::LmeTrie::Arc>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v3, a2);
    unint64_t v7 = &v6[24 * v5];
    unint64_t v9 = &v6[24 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

kaldi::quasar::LmeTrie *std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](kaldi::quasar::LmeTrie **a1, kaldi::quasar::LmeTrie *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::LmeTrie::~LmeTrie(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void kaldi::quasar::LmeTrie::~LmeTrie(kaldi::quasar::LmeTrie *this)
{
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LmeTrie: arc_count ", 19);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" arc_sizeof ", 12);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" arc_bytes ", 11);
    unint64_t v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" state_count ", 13);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" state_sizeof ", 14);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" state_bytes ", 13);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v9);
  }
  unint64_t v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 5) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 1);
  if (v8)
  {
    *((void *)this + 2) = v8;
    operator delete(v8);
  }
}

uint64_t quasar::SyncSpeechRecognizer::SyncSpeechRecognizer(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1F0A554C0;
  *(void *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v3;
  }
  *(unsigned char *)(a1 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 48));
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(void *)(a1 + 164std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = a1 + 1648;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(void *)(a1 + 1664) = a1 + 1672;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(void *)(a1 + 1688) = a1 + 1696;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(void *)(a1 + 1776) = 0;
  *(_OWORD *)(a1 + 176std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(void *)(a1 + 1784) = a1 + 1792;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(void *)(a1 + 1808) = a1 + 1816;
  *(_OWORD *)(a1 + 184std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0u;
  *(void *)(a1 + 1832) = a1 + 1840;
  *(_OWORD *)(a1 + 188std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0u;
  *(void *)(a1 + 1872) = a1 + 1880;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(void *)(a1 + 1896) = a1 + 1904;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(void *)(a1 + 192std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = a1 + 1928;
  *(void *)(a1 + 196std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_DWORD *)(a1 + 1968) = 27;
  *(unsigned char *)(a1 + 1972) = 0;
  kaldi::Srand((kaldi *)0x2A);
  return a1;
}

void sub_1B1D52FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, quasar::SystemConfig *a10, uint64_t *a11, uint64_t a12)
{
  uint64_t v13 = *a11;
  *a11 = 0;
  if (v13) {
    std::default_delete<quasar::SessionData>::operator()[abi:ne180100]((uint64_t)a11, v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SyncSpeechRecognizer::init(quasar::SyncSpeechRecognizer *this, char a2)
{
  unint64_t v4 = (quasar::SyncSpeechRecognizer *)((char *)this + 48);
  unint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v28 = 0u;
  LODWORD(v29) = 1065353216;
  int JsonFile = quasar::SystemConfig::readJsonFile((uint64_t)this + 48, (uint64_t)this + 16, (uint64_t *)&v36, (uint64_t)__p, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (JsonFile != 2)
  {
    uint64_t ModelLoader = quasar::SystemConfig::getModelLoader(v4);
    quasar::ModelLoader::enableEmbeddedMlock(ModelLoader, a2);
    uint64_t SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo(v4);
    quasar::SpeechModelInfo::operator=((uint64_t)this + 1592, SpeechModelInfo);
    std::string::basic_string[abi:ne180100]<0>(__p, "recognizers");
    uint64_t Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v4, (uint64_t)__p);
    if (SBYTE7(v28) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = quasar::PTree::begin(Ptree);
    uint64_t v11 = quasar::PTree::end(Ptree);
    if (v10 != v11)
    {
      unint64_t v12 = (void *)((char *)this + 1944);
      do
      {
        int String = (std::string *)quasar::PTree::getString((quasar::PTree *)(v10 + 24));
        std::string::basic_string[abi:ne180100]<0>(&v36, "::");
        quasar::splitAndTrim(String, (char *)&v36, (uint64_t *)__p);
        if (SHIBYTE(v38) < 0) {
          operator delete(v36);
        }
        quasar::SyncSpeechRecognizer::getFrontend((const void **)__p[0], v4, (uint64_t **)this + 234, v35);
        (*(void (**)(uint64_t *__return_ptr, quasar::SyncSpeechRecognizer *, char *))(*(void *)this + 72))(&v33, this, (char *)__p[0] + 24);
        (*(void (**)(void **__return_ptr, quasar::SyncSpeechRecognizer *, char *))(*(void *)this + 64))(v32, this, (char *)__p[0] + 48);
        uint64_t ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion(v4);
        uint64_t v14 = quasar::PTree::getString((quasar::PTree *)(v10 + 24));
        std::allocate_shared[abi:ne180100]<quasar::RecognizerComponents<quasar::SyncDecoder>,std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::SyncDecoder>> &,void>((uint64_t)&ConfigFileVersion, v10, v14, v35, &v33, v32, &v31);
        int v15 = (_OWORD *)*((void *)this + 244);
        unint64_t v16 = *((void *)this + 245);
        if ((unint64_t)v15 >= v16)
        {
          uint64_t v17 = ((uint64_t)v15 - *v12) >> 4;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v16 - *v12;
          if (v19 >> 3 > v18) {
            unint64_t v18 = v19 >> 3;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          int v40 = (char *)this + 1960;
          uint64_t v21 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 1960, v20);
          int v22 = &v21[2 * v17];
          unint64_t v36 = v21;
          uint64_t v37 = v22;
          unint64_t v39 = &v21[2 * v23];
          *(_OWORD *)int v22 = v31;
          long long v31 = 0uLL;
          uint64_t v38 = v22 + 2;
          std::vector<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>>::__swap_out_circular_buffer((uint64_t *)this + 243, &v36);
          uint64_t v24 = *((void *)this + 244);
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v36);
          uint64_t v25 = (std::__shared_weak_count *)*((void *)&v31 + 1);
          *((void *)this + 244) = v24;
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
        }
        else
        {
          _OWORD *v15 = v31;
          *((void *)this + 244) = v15 + 1;
        }
        unint64_t v36 = (void **)v32;
        std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v36);
        if (v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        }
        unint64_t v36 = (void **)v35;
        std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v36);
        unint64_t v36 = __p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
        v10 += 88;
      }
      while (v10 != v11);
    }
    if (quasar::RecognizerComponents<quasar::SyncDecoder>::validateFilters((void *)this + 199, (uint64_t *)this + 243))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "feature-read.");
      quasar::SystemConfig::setPrefix((std::string *)v4, (const std::string *)__p);
      if (SBYTE7(v28) < 0) {
        operator delete(__p[0]);
      }
      kaldi::OnlineFeatureMatrixOptions::Register((uint64_t)this + 1968, (uint64_t)v4);
      std::string::basic_string[abi:ne180100]<0>(__p, "feature-read");
      quasar::SystemConfig::readPtree((uint64_t)v4, (uint64_t)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "Found missing recognizer request handlers.");
    quasar::PTree::Error::Error(exception, __p);
  }
  return 1;
}

void sub_1B1D53594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long __p, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27)
{
  if (a2 == 2)
  {
    int v27 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
LABEL_8:
      long long v28 = v27;
      a26 = 0u;
      a27 = 0u;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error reading JSON config file: ", 32);
      long long v30 = (const char *)(*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
      size_t v31 = strlen(v30);
      int v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v32);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    int v27 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1) {
      goto LABEL_8;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1B1D530E8);
}

void sub_1B1D538AC()
{
}

void sub_1B1D538D0(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  JUMPOUT(0x1B1D538DCLL);
}

void *quasar::SyncSpeechRecognizer::getFrontend@<X0>(const void **a1@<X0>, quasar::SystemConfig *a2@<X1>, uint64_t **a3@<X2>, void *a4@<X8>)
{
  if (a3 + 1 == (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a3, a1))
  {
    std::operator+<char>();
    uint64_t Ptree = quasar::SystemConfig::getPtree((uint64_t)a2, (uint64_t)&__p);
    LODWORD(v25) = *(_DWORD *)Ptree;
    if (*(char *)(Ptree + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(Ptree + 8), *(void *)(Ptree + 16));
    }
    else
    {
      long long v9 = *(_OWORD *)(Ptree + 8);
      v26.__r_.__value_.__r.__words[2] = *(void *)(Ptree + 24);
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v9;
    }
    memset(&v27, 0, sizeof(v27));
    std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v27, *(void *)(Ptree + 32), *(void *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(Ptree + 40) - *(void *)(Ptree + 32)) >> 3));
    char v28 = *(unsigned char *)(Ptree + 56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    memset(&__p, 0, sizeof(__p));
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    uint64_t v10 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, a1, (uint64_t)&std::piecewise_construct, (long long **)&v21);
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate(v10 + 7);
    *(std::string *)(v10 + 7) = __p;
    memset(&__p, 0, sizeof(__p));
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    uint64_t v11 = quasar::PTree::begin((quasar::PTree *)&v25);
    if (v11 != quasar::PTree::end((quasar::PTree *)&v25))
    {
      std::operator+<char>();
      unint64_t v12 = std::string::append(&v21, ".");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      int v14 = *(char *)(v11 + 23);
      if (v14 >= 0) {
        int v15 = (const std::string::value_type *)v11;
      }
      else {
        int v15 = *(const std::string::value_type **)v11;
      }
      if (v14 >= 0) {
        std::string::size_type v16 = *(unsigned __int8 *)(v11 + 23);
      }
      else {
        std::string::size_type v16 = *(void *)(v11 + 8);
      }
      uint64_t v17 = std::string::append(&v22, v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      quasar::FeatureExtractorSimpleFactory::createFeatureExtractor(&__p, &v23);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      quasar::FeatureExtractor::init(v23, a2);
    }
    quasar::PTree::~PTree((quasar::PTree *)&v25);
  }
  uint64_t v25 = a1;
  uint64_t v19 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, a1, (uint64_t)&std::piecewise_construct, (long long **)&v25);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return std::vector<std::shared_ptr<quasar::FeatureExtractor>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*>(a4, (void *)v19[7], (void *)v19[8], (v19[8] - v19[7]) >> 4);
}

void sub_1B1D53BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

uint64_t quasar::RecognizerComponents<quasar::SyncDecoder>::validateFilters(void *a1, uint64_t *a2)
{
  uint64_t v3 = 1;
  __int16 v39 = 1;
  quasar::RecogRequestFilter::getPowerContextOptions((uint64_t)&v37);
  unint64_t v4 = (void *)a1[6];
  uint64_t v5 = a1 + 7;
  if (v4 != a1 + 7)
  {
    uint64_t v6 = a1 + 10;
    do
    {
      unint64_t v7 = (void *)a1[9];
      if (v7 != v6)
      {
        unsigned int v32 = *((_DWORD *)v4 + 7);
        char v28 = v5;
        long long v29 = a1;
        std::string v27 = v6;
        while (2)
        {
          uint64_t v8 = 0;
          long long v30 = v7;
          long long v9 = (unsigned __int8 **)(v7 + 4);
          do
          {
            uint64_t v10 = v37;
            if (v37 != v38)
            {
              int v11 = *((unsigned __int8 *)&v39 + v8);
              uint64_t v31 = v8;
              while (1)
              {
                unint64_t v12 = v37;
                if (v37 != v38) {
                  break;
                }
LABEL_27:
                uint64_t v19 = v10[1];
                if (v19)
                {
                  do
                  {
                    unint64_t v20 = (char **)v19;
                    uint64_t v19 = *(char **)v19;
                  }
                  while (v19);
                }
                else
                {
                  do
                  {
                    unint64_t v20 = (char **)v10[2];
                    BOOL v16 = *v20 == (char *)v10;
                    uint64_t v10 = v20;
                  }
                  while (!v16);
                }
                uint64_t v10 = v20;
                uint64_t v8 = v31;
                if (v20 == v38) {
                  goto LABEL_33;
                }
              }
              while (1)
              {
                long long v13 = v37;
                if (v37 != v38) {
                  break;
                }
LABEL_21:
                uint64_t v17 = v12[1];
                if (v17)
                {
                  do
                  {
                    long long v18 = (char **)v17;
                    uint64_t v17 = *(char **)v17;
                  }
                  while (v17);
                }
                else
                {
                  do
                  {
                    long long v18 = (char **)v12[2];
                    BOOL v16 = *v18 == (char *)v12;
                    unint64_t v12 = v18;
                  }
                  while (!v16);
                }
                unint64_t v12 = v18;
                if (v18 == v38) {
                  goto LABEL_27;
                }
              }
              while (1)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "*");
                quasar::RecognizerComponents<quasar::SyncDecoder>::lookupRecognizerComponents((std::string *)(v13 + 4), v32, v9, &__p, v11 != 0, 1, (std::string *)(v10 + 4), (std::string *)(v12 + 4), &v35, a2);
                uint64_t v3 = v35;
                if (v36) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (!v3) {
                  goto LABEL_46;
                }
                int v14 = v13[1];
                if (v14)
                {
                  do
                  {
                    int v15 = (char **)v14;
                    int v14 = *(char **)v14;
                  }
                  while (v14);
                }
                else
                {
                  do
                  {
                    int v15 = (char **)v13[2];
                    BOOL v16 = *v15 == (char *)v13;
                    long long v13 = v15;
                  }
                  while (!v16);
                }
                long long v13 = v15;
                if (v15 == v38) {
                  goto LABEL_21;
                }
              }
            }
LABEL_33:
            ++v8;
          }
          while (v8 != 2);
          std::string v21 = v30;
          std::string v22 = (void *)v30[1];
          if (v22)
          {
            do
            {
              uint64_t v23 = v22;
              std::string v22 = (void *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              uint64_t v23 = (void *)v21[2];
              BOOL v16 = *v23 == (void)v21;
              std::string v21 = v23;
            }
            while (!v16);
          }
          unint64_t v7 = v23;
          uint64_t v6 = v27;
          uint64_t v5 = v28;
          a1 = v29;
          if (v23 != v27) {
            continue;
          }
          break;
        }
      }
      uint64_t v24 = (void *)v4[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          uint64_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v25 = (void *)v4[2];
          BOOL v16 = *v25 == (void)v4;
          unint64_t v4 = v25;
        }
        while (!v16);
      }
      uint64_t v3 = 1;
      unint64_t v4 = v25;
    }
    while (v25 != v5);
  }
LABEL_46:
  std::__tree<std::string>::destroy((uint64_t)&v37, v38[0]);
  return v3;
}

void sub_1B1D53F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,char *a27)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__tree<std::string>::destroy((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

void *quasar::SyncSpeechRecognizer::getDecoderChain@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (uint64_t **)(a1 + 1920);
  if (a1 + 1928 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1920, a2))
  {
    unint64_t v7 = (quasar::SystemConfig *)(a1 + 48);
    std::operator+<char>();
    uint64_t Ptree = quasar::SystemConfig::getPtree((uint64_t)v7, (uint64_t)__p);
    LODWORD(v28) = *(_DWORD *)Ptree;
    if (*(char *)(Ptree + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(Ptree + 8), *(void *)(Ptree + 16));
    }
    else
    {
      long long v9 = *(_OWORD *)(Ptree + 8);
      v29.__r_.__value_.__r.__words[2] = *(void *)(Ptree + 24);
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v9;
    }
    memset(&v30, 0, sizeof(v30));
    std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v30, *(void *)(Ptree + 32), *(void *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(Ptree + 40) - *(void *)(Ptree + 32)) >> 3));
    char v31 = *(unsigned char *)(Ptree + 56);
    if (SHIBYTE(v27) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v27 = 0;
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    uint64_t v10 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v22);
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate(v10 + 7);
    *(_OWORD *)(v10 + 7) = *(_OWORD *)__p;
    v10[9] = v27;
    __p[1] = 0;
    uint64_t v27 = 0;
    __p[0] = 0;
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
    uint64_t v11 = quasar::PTree::begin((quasar::PTree *)&v28);
    for (uint64_t i = quasar::PTree::end((quasar::PTree *)&v28); v11 != i; v11 += 88)
    {
      std::operator+<char>();
      long long v13 = std::string::append(&v22, ".");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      int v15 = *(char *)(v11 + 23);
      if (v15 >= 0) {
        BOOL v16 = (const std::string::value_type *)v11;
      }
      else {
        BOOL v16 = *(const std::string::value_type **)v11;
      }
      if (v15 >= 0) {
        std::string::size_type v17 = *(unsigned __int8 *)(v11 + 23);
      }
      else {
        std::string::size_type v17 = *(void *)(v11 + 8);
      }
      long long v18 = std::string::append(&v23, v16, v17);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      uint64_t v27 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      quasar::SyncDecoder::createDecoder((uint64_t)__p, (uint64_t)&v24);
      if (SHIBYTE(v27) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (v24) {
        quasar::SyncDecoder::init(v24, v7);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
    }
    quasar::PTree::~PTree((quasar::PTree *)&v28);
  }
  char v28 = a2;
  unint64_t v20 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v28);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return std::vector<std::shared_ptr<quasar::SyncDecoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::SyncDecoder>*,std::shared_ptr<quasar::SyncDecoder>*>(a3, (void *)v20[7], (void *)v20[8], (v20[8] - v20[7]) >> 4);
}

void sub_1B1D54220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

void **std::vector<std::shared_ptr<quasar::SyncDecoder>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    void v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    std::vector<std::shared_ptr<quasar::SyncDecoder>>::__swap_out_circular_buffer(a1, v18);
    long long v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1D543E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *quasar::SyncSpeechRecognizer::getDecodable@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = (uint64_t **)(a1 + 1896);
  if (a1 + 1904 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1896, a2))
  {
    unint64_t v7 = (std::string *)(a1 + 48);
    std::operator+<char>();
    uint64_t Ptree = quasar::SystemConfig::getPtree((uint64_t)v7, (uint64_t)&__p);
    LODWORD(v24) = *(_DWORD *)Ptree;
    if (*(char *)(Ptree + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(Ptree + 8), *(void *)(Ptree + 16));
    }
    else
    {
      long long v9 = *(_OWORD *)(Ptree + 8);
      v25.__r_.__value_.__r.__words[2] = *(void *)(Ptree + 24);
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
    }
    memset(&v26, 0, sizeof(v26));
    std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v26, *(void *)(Ptree + 32), *(void *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(Ptree + 40) - *(void *)(Ptree + 32)) >> 3));
    char v27 = *(unsigned char *)(Ptree + 56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::operator+<char>();
    uint64_t v10 = std::string::append(&v20, ".");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = quasar::PTree::begin((quasar::PTree *)&v24);
    int v13 = *(char *)(v12 + 23);
    if (v13 >= 0) {
      long long v14 = (const std::string::value_type *)v12;
    }
    else {
      long long v14 = *(const std::string::value_type **)v12;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(v12 + 8);
    }
    uint64_t v16 = std::string::append(&v21, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    quasar::Decodable::createDecodable(&__p, &v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    quasar::Decodable::init(v22, v7);
  }
  uint64_t v24 = a2;
  uint64_t result = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v24);
  uint64_t v19 = result[8];
  *a3 = result[7];
  a3[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1B1D54658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a32);
  _Unwind_Resume(a1);
}

void quasar::SyncSpeechRecognizer::reset(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  int v13 = a2;
  char v12 = a8;
  char v11 = a9;
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v9 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v9) {
      std::default_delete<quasar::SessionData>::operator()[abi:ne180100](a1 + 8, v9);
    }
    std::make_unique[abi:ne180100]<quasar::SessionData,unsigned int &,std::string const&,std::string const&,BOOL &,BOOL &,char const(&)[1],char const(&)[1],char const(&)[1],std::string const&,unsigned int const&,std::vector<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>> &,kaldi::OnlineFeatureMatrixOptions &>();
  }
  memset(v10, 0, sizeof(v10));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "SyncSpeechRecognizer not initialized");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
}

void sub_1B1D548D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<quasar::SessionData,unsigned int &,std::string const&,std::string const&,BOOL &,BOOL &,char const(&)[1],char const(&)[1],char const(&)[1],std::string const&,unsigned int const&,std::vector<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>> &,kaldi::OnlineFeatureMatrixOptions &>()
{
}

void sub_1B1D54A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  MEMORY[0x1B3EA8670](v31, 0x20C40313AD07FLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::SyncSpeechRecognizer::addAudio@<X0>(quasar::SyncRecogAudioBuffer ***this@<X0>, const __int16 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  quasar::SyncRecogAudioBuffer::addAudio(*this[1], a2, a3);
  return quasar::SyncSpeechRecognizer::runDecoders((uint64_t)this, a4);
}

uint64_t quasar::SyncSpeechRecognizer::runDecoders@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)(this + 8);
  uint64_t v4 = v3[2];
  unint64_t v5 = *(uint64_t **)(v4 + 80);
  unint64_t v6 = *(uint64_t **)(v4 + 88);
  if (v5 != v6)
  {
    uint64_t v7 = this;
    do
    {
      uint64_t v8 = *v5;
      v5 += 2;
      this = (*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 16))(v8, *(void *)(v7 + 8));
    }
    while (v5 != v6);
    uint64_t v3 = *(void **)(v7 + 8);
  }
  uint64_t v10 = v3[11];
  uint64_t v9 = v3[12];
  *a2 = v10;
  a2[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t quasar::SyncSpeechRecognizer::addScaledAudio@<X0>(quasar::SyncRecogAudioBuffer ***this@<X0>, float *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  quasar::SyncRecogAudioBuffer::addScaledAudio(*this[1], a2, a3);
  return quasar::SyncSpeechRecognizer::runDecoders((uint64_t)this, a4);
}

uint64_t quasar::SyncSpeechRecognizer::addUnscaledAudio@<X0>(quasar::SyncRecogAudioBuffer ***this@<X0>, float *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  quasar::SyncRecogAudioBuffer::addUnscaledAudio(*this[1], a2, a3);
  return quasar::SyncSpeechRecognizer::runDecoders((uint64_t)this, a4);
}

uint64_t quasar::SyncSpeechRecognizer::endAudio@<X0>(quasar::SyncSpeechRecognizer *this@<X0>, void *a2@<X8>)
{
  quasar::SyncRecogAudioBuffer::endAudio(**((void **)this + 1));
  return quasar::SyncSpeechRecognizer::runDecoders((uint64_t)this, a2);
}

void quasar::SyncSpeechRecognizer::~SyncSpeechRecognizer(quasar::SyncSpeechRecognizer *this)
{
  quasar::SyncSpeechRecognizer::~SyncSpeechRecognizer(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t v2;
  void **v3;

  *(void *)this = &unk_1F0A554C0;
  uint64_t v3 = (void **)((char *)this + 1944);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy((uint64_t)this + 1920, *((void **)this + 241));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1896, *((void **)this + 238));
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy((uint64_t)this + 1872, *((void **)this + 235));
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::SyncSpeechRecognizer *)((char *)this + 1592));
  quasar::SystemConfig::~SystemConfig((quasar::SyncSpeechRecognizer *)((char *)this + 48));
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<quasar::SessionData>::operator()[abi:ne180100]((uint64_t)this + 8, v2);
  }
}

void quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage(quasar::QuasarProdInfoMessage *this)
{
  uint64_t v2 = (void (*)(uint64_t))quasar::QuasarProdInfoMessage::logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  uint64_t v3 = MEMORY[0x1E4FBA418];
  uint64_t v4 = *MEMORY[0x1E4FBA418];
  *(void *)this = *MEMORY[0x1E4FBA418];
  *(void *)((char *)this + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *((void *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520]((char *)this + 112);
}

void std::default_delete<quasar::SessionData>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 96);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 80);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    unint64_t v5 = *(std::__shared_weak_count **)(a2 + 64);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    uint64_t v8 = (void **)(a2 + 32);
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v8);
    char v6 = *(std::__shared_weak_count **)(a2 + 24);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    MEMORY[0x1B3EA8670](a2, 0x20C40313AD07FLL);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::RecognizerComponents<quasar::SyncDecoder>,std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::SyncDecoder>> &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void **a4@<X4>, uint64_t *a5@<X5>, void **a6@<X6>, void *a7@<X8>)
{
  long long v14 = operator new(0x98uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::SyncDecoder>>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::SyncDecoder>> &,std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1B1D55024(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::SyncDecoder>>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::SyncDecoder>> &,std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, uint64_t *a6, void **a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60B80;
  std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>::construct[abi:ne180100]<quasar::RecognizerComponents<quasar::SyncDecoder>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::SyncDecoder>> &>((uint64_t)&v9, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_1B1D550A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::SyncDecoder>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::SyncDecoder>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::SyncDecoder>>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>::construct[abi:ne180100]<quasar::RecognizerComponents<quasar::SyncDecoder>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::SyncDecoder>> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, uint64_t *a7, void **a8)
{
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v18 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v17 = *(std::string *)a5;
  }
  long long v14 = (std::__shared_weak_count *)a7[1];
  uint64_t v15 = *a7;
  uint64_t v16 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::RecognizerComponents<quasar::SyncDecoder>::RecognizerComponents(a2, a3, (uint64_t)&v18, (uint64_t)&v17, a6, &v15, a8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1B1D5525C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::RecognizerComponents<quasar::SyncDecoder>::RecognizerComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, void *a6, void **a7)
{
  std::allocate_shared[abi:ne180100]<quasar::RecogRequestFilter,std::allocator<quasar::RecogRequestFilter>,quasar::SystemConfig::Version const&,std::string const&,void>(&v15);
  *(_OWORD *)a1 = v15;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    long long v12 = *(_OWORD *)a4;
    *(void *)(a1 + 32) = *(void *)(a4 + 16);
    *(_OWORD *)(a1 + 16) = v12;
  }
  *(void *)(a1 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  std::vector<std::shared_ptr<quasar::FeatureExtractor>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*>((void *)(a1 + 40), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  *(void *)(a1 + 64) = *a6;
  uint64_t v13 = a6[1];
  *(void *)(a1 + 72) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 8std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<std::shared_ptr<quasar::SyncDecoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::SyncDecoder>*,std::shared_ptr<quasar::SyncDecoder>*>((void *)(a1 + 80), *a7, a7[1], ((char *)a7[1] - (char *)*a7) >> 4);
  quasar::removeSpaces(a4, (std::string *)(a1 + 104));
  return a1;
}

void sub_1B1D5539C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  char v11 = *(std::__shared_weak_count **)(v9 + 8);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::RecogRequestFilter,std::allocator<quasar::RecogRequestFilter>,quasar::SystemConfig::Version const&,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xF0uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::RecogRequestFilter>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig::Version const&,std::string const&,std::allocator<quasar::RecogRequestFilter>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1D55450(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::RecogRequestFilter>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig::Version const&,std::string const&,std::allocator<quasar::RecogRequestFilter>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A606E8;
  quasar::RecogRequestFilter::RecogRequestFilter(a1 + 3);
  return a1;
}

void sub_1B1D554AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RecogRequestFilter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A606E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RecogRequestFilter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A606E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::RecogRequestFilter>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 127) < 0) {
    operator delete(*(void **)(a2 + 104));
  }
  unint64_t v5 = (void **)(a2 + 80);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 72);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v5 = (void **)(a2 + 40);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t std::vector<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>*>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>*>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>*>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>*>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void quasar::RecognizerComponents<quasar::SyncDecoder>::lookupRecognizerComponents(std::string *__str@<X7>, uint64_t a2@<X0>, unsigned __int8 **a3@<X1>, std::string *a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X4>, std::string *a7@<X5>, std::string *a8@<X6>, void *a9@<X8>, uint64_t *a10)
{
  uint64_t v19 = *a10;
  uint64_t v18 = a10[1];
  while (v19 != v18)
  {
    if (quasar::RecogRequestFilter::isMatch(**(void **)v19, a2, a3, a4, a5, a6, a7, a8, __str))
    {
      uint64_t v22 = *(void *)(v19 + 8);
      *a9 = *(void *)v19;
      a9[1] = v22;
      if (v22) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    }
    v19 += 16;
  }
  if (quasar::gLogLevel >= 1)
  {
    memset(v26, 0, 272);
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    quasar::RecogRequestFilter::noMatchingComponentErrorMessage(a2, (uint64_t)a3, (uint64_t)a4, a5, a6, (uint64_t)a7, (uint64_t)a8, (uint64_t)__str);
    if ((v25 & 0x80u) == 0) {
      std::string v20 = __p;
    }
    else {
      std::string v20 = (void **)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      uint64_t v21 = v25;
    }
    else {
      uint64_t v21 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v20, v21);
    if ((char)v25 < 0) {
      operator delete(__p[0]);
    }
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v26);
  }
  *a9 = 0;
  a9[1] = 0;
}

void sub_1B1D55888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a18);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    int32x2_t v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  _OWORD v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1D559E4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<std::shared_ptr<quasar::SyncDecoder>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::SyncDecoder>>,std::reverse_iterator<std::shared_ptr<quasar::SyncDecoder>*>,std::reverse_iterator<std::shared_ptr<quasar::SyncDecoder>*>,std::reverse_iterator<std::shared_ptr<quasar::SyncDecoder>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::SyncDecoder>>,std::reverse_iterator<std::shared_ptr<quasar::SyncDecoder>*>,std::reverse_iterator<std::shared_ptr<quasar::SyncDecoder>*>,std::reverse_iterator<std::shared_ptr<quasar::SyncDecoder>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::SyncDecoder>>,std::reverse_iterator<std::shared_ptr<quasar::SyncDecoder>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::SyncDecoder>>,std::reverse_iterator<std::shared_ptr<quasar::SyncDecoder>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::shared_ptr<quasar::SyncDecoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::SyncDecoder>*,std::shared_ptr<quasar::SyncDecoder>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::SyncDecoder>>,std::shared_ptr<quasar::SyncDecoder>*,std::shared_ptr<quasar::SyncDecoder>*,std::shared_ptr<quasar::SyncDecoder>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1D55C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::SyncDecoder>>,std::shared_ptr<quasar::SyncDecoder>*,std::shared_ptr<quasar::SyncDecoder>*,std::shared_ptr<quasar::SyncDecoder>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::SyncDecoder>>,std::shared_ptr<quasar::SyncDecoder>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::SyncDecoder>>,std::shared_ptr<quasar::SyncDecoder>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::shared_ptr<quasar::FeatureExtractor>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1D55D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::shared_ptr<quasar::FeatureExtractor>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::shared_ptr<quasar::FeatureExtractor>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void kaldi::quasar::Mil2BnnsCompiler::readCompileOptionsFromConfig(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v12 = 0;
  kaldi::Input::Input(v11, a2, &v12);
  uint64_t v3 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v11);
  while ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 2) == 0)
  {
    char v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    kaldi::ReadToken(v3, v12, (uint64_t)&v8);
    if (SHIBYTE(v10) < 0)
    {
      if (v9 == 8)
      {
        uint64_t v4 = v8;
        goto LABEL_7;
      }
    }
    else if (SHIBYTE(v10) == 8)
    {
      uint64_t v4 = &v8;
LABEL_7:
      if (*v4 == 0x3E656E69676E453CLL)
      {
        int v5 = v12;
        std::string::basic_string[abi:ne180100]<0>(__p, "</Engine>");
        (*(void (**)(uint64_t, uint64_t *, BOOL, void **))(*(void *)a1 + 16))(a1, v3, v5 != 0, __p);
        if (v7 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v3);
    if (SHIBYTE(v10) < 0) {
      operator delete(v8);
    }
  }
  kaldi::Input::~Input((kaldi::Input *)v11);
}

void sub_1B1D55FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

BOOL kaldi::quasar::onDeviceMil2BnnsCompile(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4) {
    return 0;
  }
  kaldi::quasar::BNNSGraphNetworkConfig::BNNSGraphNetworkConfig((uint64_t)v9, a1, (long long *)a2);
  v9[0] = &unk_1F0A50AC0;
  kaldi::quasar::Mil2BnnsCompiler::readCompileOptionsFromConfig((uint64_t)v9, a3);
  kaldi::quasar::BNNSGraphNetworkConfig::CompiledBNNSGraph((kaldi::quasar::BNNSGraphNetworkConfig *)v9, (uint64_t)v7);
  BOOL v5 = v7[0] != 0;
  if (v8) {
    munmap(v7[0], (size_t)v7[1]);
  }
  else {
    free(v7[0]);
  }
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig(v9);
  return v5;
}

void sub_1B1D560AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig((void **)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::validateBnnsIr(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (!v1) {
    return 0;
  }
  uint64_t result = (uint64_t)kaldi::quasar::BNNSGraphNetworkConfig::MapBNNSIRFile(a1);
  if (result)
  {
    munmap((void *)result, v3);
    return 1;
  }
  return result;
}

void kaldi::quasar::Mil2BnnsCompiler::~Mil2BnnsCompiler(void **this)
{
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig(void **this)
{
  *this = &unk_1F0A510A8;
  uint64_t v2 = this + 16;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)this);
}

{
  uint64_t vars8;

  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig(this);
  JUMPOUT(0x1B3EA8670);
}

void sub_1B1D562EC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B1D56710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a2 == 1)
  {
    size_t v51 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      size_t v52 = v51;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::string v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"EAR Initialization failed for QuasarEuclid, error:", 50);
      int v54 = (const char *)(*(uint64_t (**)(void *))(*(void *)v52 + 16))(v52);
      size_t v55 = strlen(v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B1D566C4);
  }
  _Block_object_dispose(&a35, 8);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v49);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a46);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__5(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 48);
}

void sub_1B1D569A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B1D56BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1B1D56D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B1D56EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _Unwind_Resume(a1);
}

void sub_1B1D56FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1B1D57058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B1D57174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1D5720C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1B1D572A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1B1D57344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void *std::vector<quasar::Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::Token>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1D57444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      quasar::Token::Token((std::string *)(a4 + v7), (const quasar::Token *)(a2 + v7));
      v7 += 224;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1D574C4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 224;
    do
    {
      quasar::Token::~Token((void **)(v4 + v2));
      v2 -= 224;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::mt::utils::readWordsFromFile@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v36[19] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  std::ifstream::basic_ifstream(v34);
  uint64_t v4 = v34[0];
  if ((v35[*(void *)(v34[0] - 24) + 16] & 5) != 0)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"failed to open word list file '", 31);
    int v12 = *(char *)(a1 + 23);
    if (v12 >= 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = *(void *)a1;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v14 = *(void *)(a1 + 8);
    }
    long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v17 = 0;
  BOOL v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(v4 - 24)));
    uint64_t v6 = std::locale::use_facet(&v33, v5);
    unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v33);
    char v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v34, (uint64_t)__p, v7);
    uint64_t v9 = (void *)BYTE7(v17);
    if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
      break;
    }
    if (SBYTE7(v17) < 0) {
      uint64_t v9 = __p[1];
    }
    if (v9) {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, (unsigned __int8 *)__p, (uint64_t)__p);
    }
    uint64_t v4 = v34[0];
  }
  if ((BYTE7(v17) & 0x80) != 0) {
    operator delete(__p[0]);
  }
  v34[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v35);
  std::istream::~istream();
  return MEMORY[0x1B3EA8520](v36);
}

void sub_1B1D577B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::locale a46,char a47)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1D5833C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1D58618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **p_p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);

  _Unwind_Resume(a1);
}

void sub_1B1D58768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)_EARLanguageDetectorV2;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B1D58998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(a1);
}

void sub_1B1D58A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1D58B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1D58D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void sub_1B1D58E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t maxpool(uint64_t a1, void *a2)
{
  uint64_t result = kaldi::MatrixBase<float>::NumCols(a1);
  if ((int)result >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      float v6 = kaldi::MatrixBase<float>::MaxByCol(a1, v5, 0);
      if (v6 < *(float *)(*a2 + 4 * v5)) {
        float v6 = *(float *)(*a2 + 4 * v5);
      }
      *(float *)(*a2 + 4 * v5++) = v6;
      uint64_t result = kaldi::MatrixBase<float>::NumCols(a1);
    }
    while (v5 < (int)result);
  }
  return result;
}

void sub_1B1D59354(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c54_ZTSNSt3__110shared_ptrIN6quasar17PSRAudioProcessorEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_48c54_ZTSNSt3__110shared_ptrIN6quasar17PSRAudioProcessorEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int,void>(uint64_t a1, int *a2, int *a3, int *a4, char *a5, char *a6, long long *a7, int *a8)
{
  long long v15 = operator new(0x160uLL);
  std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int,std::allocator<quasar::RecogAudioBuffer>,0>(v15, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B1D595AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int,std::allocator<quasar::RecogAudioBuffer>,0>(void *a1, int *a2, int *a3, int *a4, char *a5, char *__s, long long *a7, int *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60250;
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int>((int)&v8, (uint64_t)(a1 + 3), a2, a3, a4, a5, __s, a7, a8);
}

void sub_1B1D59638(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int>(int a1, uint64_t a2, int *a3, int *a4, int *a5, char *a6, char *__s, long long *a8, int *a9)
{
  int v11 = *a3;
  int v12 = *a4;
  int v13 = *a5;
  char v14 = *a6;
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  long long v15 = *a8;
  *(void *)a8 = 0;
  *((void *)a8 + 1) = 0;
  quasar::RecogAudioBuffer::RecogAudioBuffer(a2, v11, v12, v13, v14, &__p, &v15, *a9, 0, 4000);
}

void sub_1B1D59708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int>((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::PSRAudioProcessor,std::allocator<quasar::PSRAudioProcessor>,quasar::SystemConfig &,std::string,unsigned long &,std::shared_ptr<quasar::RecogAudioBuffer> &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0x68uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,std::shared_ptr<quasar::RecogAudioBuffer> &,std::allocator<quasar::PSRAudioProcessor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B1D59790(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,std::shared_ptr<quasar::RecogAudioBuffer> &,std::allocator<quasar::PSRAudioProcessor>,0>(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A603D8;
  quasar::PSRAudioProcessor::PSRAudioProcessor(a1 + 3, a2, a3, *a4);
  return a1;
}

void sub_1B1D597F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A603D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A603D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::PSRAudioProcessor>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::PSRAudioProcessor>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void **)(a2 + 56);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)(a2 + 32);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v5);
  size_t v3 = *(std::__shared_weak_count **)(a2 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t quasar::PTree::getInt<int>(uint64_t a1)
{
  return std::stoi((const std::string *)(a1 + 8), 0, 10);
}

void quasar::PTree::getInt<int>(uint64_t a1, uint64_t a2)
{
}

void quasar::PTree::getChild(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  quasar::split(a2, (uint64_t *)__p, 0, (unint64_t)&v4);
}

{
  void *__p[2];
  uint64_t v4;

  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  quasar::split(a2, (uint64_t *)__p, 0, (unint64_t)&v4);
}

void sub_1B1D59AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PTree::getIntOptional<int>(uint64_t a1, uint64_t a2)
{
}

void quasar::PTree::getChildOptional(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  quasar::split(a2, (uint64_t *)__p, 0, (unint64_t)v4);
}

{
  void *__p[2];
  unsigned char v4[24];

  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  quasar::split(a2, (uint64_t *)__p, 0, (unint64_t)v4);
}

void sub_1B1D59BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PTree::getAndEraseInt<int>(uint64_t a1, uint64_t a2)
{
}

void quasar::PTree::erase(uint64_t a1, unsigned __int8 *a2)
{
  signed __int8 v4 = a2[23];
  if (v4 >= 0) {
    int64_t v5 = a2[23];
  }
  else {
    int64_t v5 = *((void *)a2 + 1);
  }
  if (v4 >= 0) {
    float v6 = (char *)a2;
  }
  else {
    float v6 = *(char **)a2;
  }
  if (v5 >= 1)
  {
    unsigned __int8 v7 = &v6[v5];
    char v8 = v6;
    do
    {
      uint64_t v9 = (char *)memchr(v8, 46, v5);
      if (!v9) {
        break;
      }
      if (*v9 == 46)
      {
        if (v9 != v7 && v9 - v6 != -1)
        {
          memset(v20, 0, sizeof(v20));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "nested erase() not implemented");
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v20);
        }
        break;
      }
      char v8 = v9 + 1;
      int64_t v5 = v7 - (unsigned char *)v8;
    }
    while (v7 - (unsigned char *)v8 >= 1);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  int v11 = *(long long **)(a1 + 40);
  while ((long long *)v10 != v11)
  {
    uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      uint64_t v13 = *(void *)(v10 + 8);
    }
    uint64_t v14 = a2[23];
    int v15 = (char)v14;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *((void *)a2 + 1);
    }
    if (v13 == v14)
    {
      if (v15 >= 0) {
        uint64_t v16 = a2;
      }
      else {
        uint64_t v16 = *(unsigned __int8 **)a2;
      }
      if ((v12 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v10, v16, *(void *)(v10 + 8)))
        {
LABEL_33:
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,0>((long long *)(v10 + 88), v11, v10);
          int v11 = v18;
          uint64_t v19 = *(void *)(a1 + 40);
          if ((long long *)v19 != v18)
          {
            do
            {
              v19 -= 88;
              std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100](a1 + 48, v19);
            }
            while ((long long *)v19 != v11);
          }
          *(void *)(a1 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = v11;
          continue;
        }
      }
      else
      {
        if (!*(unsigned char *)(v10 + 23)) {
          goto LABEL_33;
        }
        long long v17 = (unsigned __int8 *)v10;
        while (*v17 == *v16)
        {
          ++v17;
          ++v16;
          if (!--v12) {
            goto LABEL_33;
          }
        }
      }
    }
    v10 += 88;
  }
}

unint64_t quasar::PTree::getInt<unsigned int>(uint64_t a1)
{
}

unint64_t quasar::anonymous namespace'::StringToInteger<unsigned int>::convert(uint64_t a1)
{
  *__error() = 0;
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v2 = (const char *)a1;
  }
  else {
    uint64_t v2 = *(const char **)a1;
  }
  unint64_t v3 = strtoul(v2, 0, 10);
  if (*__error() == 34)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "strtoul: out of range");
    __cxa_throw(exception, (struct type_info *)off_1E5FFDF20, MEMORY[0x1E4FBA1D0]);
  }
  return v3;
}

void sub_1B1D59EB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void quasar::PTree::getIntOptional<unsigned int>(uint64_t a1, uint64_t a2)
{
}

void quasar::PTree::putChild(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  int v6 = (char)v5;
  std::string::size_type v7 = *(void *)(a2 + 8);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (!v5)
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__str, "Use add() to append array elements");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  char v8 = (uint64_t *)a1;
  if (*(unsigned char *)(a1 + 56))
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__str, "Leaves can't have children");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  memset(&v33, 0, sizeof(v33));
  uint64_t v27 = a3;
  if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, ".");
    quasar::split(a2, (uint64_t *)&__p, 0, (unint64_t)__str);
  }
  if (v6 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)a2, v7);
  }
  else
  {
    *(_OWORD *)std::string __str = *(_OWORD *)a2;
    *(void *)&__str[16] = *(void *)(a2 + 16);
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v33, (std::string *)__str, (long long *)&__str[24], 1uLL);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  std::vector<std::wstring>::pointer begin = v33.__begin_;
  std::vector<std::wstring>::pointer end = v33.__end_;
  if (v33.__begin_ == v33.__end_) {
    goto LABEL_47;
  }
LABEL_13:
  uint64_t v13 = v8[4];
  uint64_t v12 = v8[5];
  if (v13 == v12) {
    goto LABEL_39;
  }
  int v14 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
  if (v14 >= 0) {
    std::wstring::size_type size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
  }
  else {
    std::wstring::size_type size = begin->__r_.__value_.__l.__size_;
  }
  uint64_t v16 = v8[4];
  while (1)
  {
    uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
    uint64_t v18 = (v17 & 0x80u) == 0 ? *(unsigned __int8 *)(v16 + 23) : *(void *)(v16 + 8);
    if (v18 == size)
    {
      if (v14 >= 0) {
        std::vector<std::wstring>::pointer v19 = begin;
      }
      else {
        std::vector<std::wstring>::pointer v19 = (std::vector<std::wstring>::pointer)begin->__r_.__value_.__r.__words[0];
      }
      if ((v17 & 0x80) == 0)
      {
        if (!*(unsigned char *)(v16 + 23)) {
          break;
        }
        uint64_t v20 = 0;
        while (*(unsigned __int8 *)(v16 + v20) == *((unsigned __int8 *)&v19->__r_.__value_.__l.__data_ + v20))
        {
          if (v17 == ++v20) {
            goto LABEL_36;
          }
        }
        goto LABEL_32;
      }
      if (!memcmp(*(const void **)v16, v19, *(void *)(v16 + 8))) {
        break;
      }
    }
LABEL_32:
    v16 += 88;
    if (v16 == v12)
    {
      if (*(char *)(v13 + 23) < 0)
      {
        if (!*(void *)(v13 + 8)) {
          goto LABEL_57;
        }
      }
      else if (!*(unsigned char *)(v13 + 23))
      {
LABEL_57:
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v35 = 0u;
        memset(__str, 0, sizeof(__str));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Can't add a value dictionary-like to a tree that is already array-like", 70);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
      }
LABEL_39:
      if (&begin[1] == end)
      {
        std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string&,quasar::PTree const&,0>((std::string *)__str, (long long *)begin, v27);
        unint64_t v24 = v8[5];
        if (v24 >= v8[6])
        {
          uint64_t v25 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(v8 + 4, (long long *)__str);
        }
        else
        {
          std::pair<std::string,quasar::PTree>::pair[abi:ne180100](v8[5], (long long *)__str);
          uint64_t v25 = v24 + 88;
          v8[5] = v24 + 88;
        }
        v8[5] = v25;
        quasar::PTree::~PTree((void **)&__str[24]);
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        goto LABEL_56;
      }
      LODWORD(__p) = 0;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      char v32 = 0;
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string&,quasar::PTree,0>((std::string *)__str, (long long *)begin, (uint64_t)&__p);
      unint64_t v21 = v8[5];
      if (v21 >= v8[6])
      {
        uint64_t v22 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(v8 + 4, (long long *)__str);
      }
      else
      {
        std::pair<std::string,quasar::PTree>::pair[abi:ne180100](v8[5], (long long *)__str);
        uint64_t v22 = v21 + 88;
        v8[5] = v21 + 88;
      }
      v8[5] = v22;
      quasar::PTree::~PTree((void **)&__str[24]);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      quasar::PTree::~PTree(&__p);
      char v8 = (uint64_t *)(v8[5] - 64);
      std::vector<std::wstring>::pointer end = v33.__end_;
LABEL_46:
      if (++begin == end)
      {
LABEL_47:
        exception = __cxa_allocate_exception(0x20uLL);
        quasar::PTree::BadPath::BadPath(exception, (long long *)a2);
      }
      goto LABEL_13;
    }
  }
LABEL_36:
  char v8 = (uint64_t *)(v16 + 24);
  if (&begin[1] != end) {
    goto LABEL_46;
  }
  *(_DWORD *)(v16 + 24) = *(_DWORD *)v27;
  std::string::operator=((std::string *)(v16 + 32), (const std::string *)(v27 + 8));
  if (v8 != (uint64_t *)v27) {
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(v16 + 56, *(std::string **)(v27 + 32), *(std::string **)(v27 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v27 + 40) - *(void *)(v27 + 32)) >> 3));
  }
  *(unsigned char *)(v16 + 8std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = *(unsigned char *)(v27 + 56);
LABEL_56:
  *(void *)std::string __str = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
}

void sub_1B1D5A418(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1D5A484);
}

void sub_1B1D5A428()
{
}

void sub_1B1D5A434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  *(void *)(v25 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = v26;
  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a25);
  quasar::PTree::~PTree(&a13);
  a25 = (void **)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

void sub_1B1D5A460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

void sub_1B1D5A468()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1B1D5A474);
}

quasar::PTree *quasar::PTree::PTree(quasar::PTree *this, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  *(_DWORD *)this = 0;
  unint64_t v3 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v4 = SHIBYTE(v7);
    *((void *)this + 5) = 0;
    *((void *)this + 6) = 0;
    *((void *)this + 4) = 0;
    *((unsigned char *)this + 56) = 1;
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void *)this + 3) = v7;
    *((void *)this + 5) = 0;
    *((void *)this + 6) = 0;
    *((void *)this + 4) = 0;
    *((unsigned char *)this + 56) = 1;
  }
  return this;
}

void sub_1B1D5A51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PTree::addChild(quasar::PTree *this, const quasar::PTree *a2)
{
  uint64_t v3 = *((void *)this + 4);
  int v4 = (uint64_t *)((char *)this + 32);
  if (v3 != *((void *)this + 5))
  {
    if ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(v3 + 23)) {
        goto LABEL_4;
      }
LABEL_12:
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      *(_OWORD *)long long __p = 0u;
      long long v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Can't add a value array-like to a tree that is already dictionary-like");
      goto LABEL_14;
    }
    if (*(void *)(v3 + 8)) {
      goto LABEL_12;
    }
  }
LABEL_4:
  if (*((unsigned char *)this + 56))
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Leaves can't have children");
LABEL_14:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  uint64_t v26 = "";
  std::pair<char const*,quasar::PTree>::pair[abi:ne180100]<true,0>((uint64_t)v7, &v26, (uint64_t)a2);
  std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<char const*,quasar::PTree,0>((uint64_t)__p, (uint64_t)v7);
  unint64_t v5 = *((void *)this + 5);
  if (v5 >= *((void *)this + 6))
  {
    uint64_t v6 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(v4, (long long *)__p);
  }
  else
  {
    std::pair<std::string,quasar::PTree>::pair[abi:ne180100](*((void *)this + 5), (long long *)__p);
    uint64_t v6 = v5 + 88;
    *((void *)this + 5) = v5 + 88;
  }
  *((void *)this + 5) = v6;
  quasar::PTree::~PTree((void **)&v10 + 1);
  if (SBYTE7(v10) < 0) {
    operator delete(__p[0]);
  }
  quasar::PTree::~PTree(&v8);
}

void quasar::PTree::~PTree(void **this)
{
  uint64_t v2 = this + 4;
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

double quasar::PTree::PTree(quasar::PTree *this)
{
  *(_DWORD *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0u;
  *((unsigned char *)this + 56) = 0;
  return result;
}

void quasar::PTree::getMatrix<float>(uint64_t a1@<X0>, int32x2_t *a2@<X8>)
{
  kaldi::Matrix<float>::Matrix((uint64_t)a2);
  if (!*(unsigned char *)(a1 + 56))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    if (v12 == *(void *)(a1 + 40)) {
      return;
    }
    if (*(char *)(v12 + 23) < 0)
    {
      if (!*(void *)(v12 + 8)) {
        goto LABEL_2;
      }
    }
    else if (!*(unsigned char *)(v12 + 23))
    {
      goto LABEL_2;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "encoding");
    quasar::PTree::getChildOptional(a1, (uint64_t)__p);
  }
LABEL_2:
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v4 == v5) {
    goto LABEL_14;
  }
  if ((*(char *)(v4 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v4 + 23)) {
      goto LABEL_5;
    }
LABEL_14:
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to convert non-list structure to matrix.", 47);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (*(void *)(v4 + 8)) {
    goto LABEL_14;
  }
LABEL_5:
  kaldi::Matrix<float>::Resize(a2, -1171354717 * ((unint64_t)(v5 - v4) >> 3), -1171354717 * ((*(void *)(v4 + 64) - *(void *)(v4 + 56)) >> 3), 0, 0);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v7 != v6)
  {
    int v8 = 0;
    do
    {
      int32x2_t v9 = *a2;
      __int32 v10 = a2[2].i32[0];
      unsigned int v11 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
      *(void *)&long long v14 = 0;
      __p[0] = (void *)(*(void *)&v9 + 4 * v10 * v8);
      __p[1] = (void *)v11;
      quasar::PTree::getVector<float>(v7 + 24, (uint64_t)&v30);
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)__p, (const void **)&v30.__r_.__value_.__l.__data_);
      kaldi::Vector<float>::Destroy((uint64_t)&v30);
      v7 += 88;
      ++v8;
    }
    while (v7 != v6);
  }
}

void sub_1B1D5AC6C(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void sub_1B1D5AC80()
{
  kaldi::Vector<float>::Destroy(v0 - 96);
  JUMPOUT(0x1B1D5AC70);
}

BOOL quasar::PTree::isDict(quasar::PTree *this)
{
  if (*((unsigned char *)this + 56)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 4);
  if (v2 == *((void *)this + 5)) {
    return 1;
  }
  if (*(char *)(v2 + 23) < 0) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  }
  return v3 != 0;
}

BOOL quasar::PTree::empty(quasar::PTree *this)
{
  return *((void *)this + 4) == *((void *)this + 5);
}

uint64_t quasar::PTree::getString(quasar::PTree *this)
{
  return (uint64_t)this + 8;
}

BOOL quasar::PTree::isList(quasar::PTree *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 == *((void *)this + 5)) {
    return 0;
  }
  if (*(char *)(v1 + 23) < 0) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  }
  return v2 == 0;
}

uint64_t quasar::PTree::size(quasar::PTree *this)
{
  return 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 3);
}

uint64_t quasar::PTree::begin(quasar::PTree *this)
{
  return *((void *)this + 4);
}

uint64_t quasar::PTree::end(quasar::PTree *this)
{
  return *((void *)this + 5);
}

void quasar::PTree::getVector<float>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 56)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v3 == v4;
  }
  if (v5)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return;
  }
  if (v3 == v4) {
    goto LABEL_15;
  }
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v3 + 23)) {
      goto LABEL_8;
    }
LABEL_15:
    memset(v12, 0, sizeof(v12));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "Unable to convert non-list structure to vector.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
  }
  if (*(void *)(v3 + 8)) {
    goto LABEL_15;
  }
LABEL_8:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)a2, -1171354717 * ((unint64_t)(v4 - v3) >> 3), 0);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      float v11 = std::stod((const std::string *)(v8 + 32), 0);
      ++v10;
      *(float *)(*(void *)a2 + (v9 >> 30)) = v11;
      v8 += 88;
      v9 += 0x100000000;
    }
    while (v8 != v7);
  }
}

void sub_1B1D5AEA8(_Unwind_Exception *a1)
{
  kaldi::Vector<float>::Destroy(v1);
  _Unwind_Resume(a1);
}

double quasar::PTree::getDouble(quasar::PTree *this)
{
  return std::stod((const std::string *)((char *)this + 8), 0);
}

void quasar::PTree::getSparseMatrix<float>(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "num_rows");
  quasar::PTree::getChild(a1, (uint64_t)__p);
}

void sub_1B1D5B298(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    JUMPOUT(0x1B1D5B2CCLL);
  }
  JUMPOUT(0x1B1D5B2D0);
}

void quasar::PTree::getDouble(uint64_t a1, uint64_t a2)
{
}

uint64_t quasar::getType(quasar *this, float a2)
{
  return 1;
}

uint64_t quasar::getType(quasar *this)
{
  return 3;
}

{
  return 2;
}

void *quasar::PTree::BadPath::BadPath(void *a1, long long *a2)
{
  *a1 = &unk_1F0A58F38;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1B1D5B398(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::PTree::BadPath::what(quasar::PTree::BadPath *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void *quasar::PTree::Error::Error(void *a1, long long *a2)
{
  *a1 = &unk_1F0A58F10;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1B1D5B430(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::PTree::Error::what(quasar::PTree::Error *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void *quasar::PTree::JsonParseError::JsonParseError(void *a1, long long *a2)
{
  *a1 = &unk_1F0A58EE8;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1B1D5B4CC(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::PTree::JsonParseError::what(quasar::PTree::JsonParseError *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t quasar::PTree::PTree(uint64_t a1, long long *a2)
{
  *(_DWORD *)a1 = 0;
  uint64_t v3 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  return a1;
}

void quasar::PTree::readJson()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  operator new();
}

void sub_1B1D5B658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a19);
  if (a2 == 1)
  {
    long long v21 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    long long v23 = (char *)(*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
    std::string::basic_string[abi:ne180100]<0>(&__p, v23);
    quasar::PTree::JsonParseError::JsonParseError(exception, &__p);
  }
  _Unwind_Resume(a1);
}

void boost::property_tree::json_parser::read_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>()
{
}

void sub_1B1D5B7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PTreeHelper::PTreeFromPTree(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  long long v4 = (std::string *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0u;
  *(unsigned char *)(a2 + 56) = 0;
  if (!*(void *)(*(void *)(a1 + 24) + 24))
  {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    if (v5) {
      *(unsigned char *)(a2 + 56) = 1;
    }
  }
  std::string::operator=(v4, (const std::string *)a1);
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v7 = *(void *)(v6 + 88);
  if (v7) {
    uint64_t v8 = v7 - 80;
  }
  else {
    uint64_t v8 = 0;
  }
  while (v8 != v6)
  {
    quasar::PTreeHelper::PTreeFromPTree(v12, v8 + 24);
    std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string const&,quasar::PTree,0>(&__p, (long long *)v8, (uint64_t)v12);
    unint64_t v9 = *(void *)(a2 + 40);
    if (v9 >= *(void *)(a2 + 48))
    {
      uint64_t v10 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>((uint64_t *)(a2 + 32), (long long *)&__p);
    }
    else
    {
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100](*(void *)(a2 + 40), (long long *)&__p);
      uint64_t v10 = v9 + 88;
      *(void *)(a2 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = v9 + 88;
    }
    *(void *)(a2 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = v10;
    quasar::PTree::~PTree(&v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    quasar::PTree::~PTree(v12);
    uint64_t v11 = *(void *)(v8 + 88);
    if (v11) {
      uint64_t v8 = v11 - 80;
    }
    else {
      uint64_t v8 = 0;
    }
  }
}

void sub_1B1D5B91C(_Unwind_Exception *a1)
{
  quasar::PTree::~PTree(v1);
  _Unwind_Resume(a1);
}

void quasar::PTree::JsonParseError::~JsonParseError(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F0A58EE8;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1F0A58EE8;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::PTree::readJsonFromFile()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  operator new();
}

void sub_1B1D5BAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a19);
  if (a2 == 1)
  {
    long long v21 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    long long v23 = (char *)(*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
    std::string::basic_string[abi:ne180100]<0>(&__p, v23);
    quasar::PTree::JsonParseError::JsonParseError(exception, &__p);
  }
  _Unwind_Resume(a1);
}

void boost::property_tree::json_parser::read_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(long long *a1, uint64_t a2, const std::locale *a3)
{
  v12[72] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v12);
  uint64_t v5 = (std::ios_base *)((char *)v12 + *(void *)(v12[0] - 24));
  if ((v5->__rdstate_ & 5) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[0] - 24)));
    std::ios_base::imbue(v5, a3);
    std::locale::~locale(&v11);
    rdbuf = (std::locale *)v5->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a3);
      uint64_t v7 = rdbuf + 1;
      std::locale::locale(&v10, v7);
      std::locale::operator=(v7, a3);
      std::locale::~locale(&v10);
    }
    std::locale::~locale(&v8);
    boost::property_tree::json_parser::detail::read_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>();
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "cannot open file");
  boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v11, (uint64_t)&v10, a1, 0);
  v11.__locale_ = (std::locale::__imp *)&unk_1F0A46D30;
  v9[0] = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/boost/property_tree/json_parser.hpp";
  v9[1] = "void boost::property_tree::json_parser::read_json(const std::string &, Ptree &, const std::locale &) [uint64_t Ptree = "
          "boost::property_tree::basic_ptree<std::string, std::string>]";
  void v9[2] = 73;
  boost::throw_exception<boost::property_tree::json_parser::json_parser_error>((uint64_t)&v11, (uint64_t)v9);
}

void sub_1B1D5BE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, std::runtime_error a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a28);
  _Unwind_Resume(a1);
}

void quasar::PTree::writeJsonToFile()
{
  quasar::PTreeHelper::PTreeFromPTree(v0);
}

void sub_1B1D5BF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, char a11)
{
}

void quasar::PTreeHelper::PTreeFromPTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  operator new();
}

void sub_1B1D5C06C(_Unwind_Exception *a1)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::json_parser::write_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(long long *a1, uint64_t a2, const std::locale *a3, uint64_t a4)
{
  v18[19] = *MEMORY[0x1E4F143B8];
  std::ofstream::basic_ofstream(&v16);
  std::locale v8 = (std::ios_base *)((char *)&v16 + *(void *)(v16 - 24));
  if ((v8->__rdstate_ & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "cannot open file");
    boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v15, (uint64_t)&v14, a1, 0);
    v15.__locale_ = (std::locale::__imp *)&unk_1F0A46D30;
    v13[0] = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Deve"
             "loper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/boost/property"
             "_tree/json_parser.hpp";
    v13[1] = "void boost::property_tree::json_parser::write_json(const std::string &, const Ptree &, const std::locale &,"
             " BOOL) [uint64_t Ptree = boost::property_tree::basic_ptree<std::string, std::string>]";
    v13[2] = 126;
    boost::throw_exception<boost::property_tree::json_parser::json_parser_error>((uint64_t)&v15, (uint64_t)v13);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v16 + *(void *)(v16 - 24)));
  std::ios_base::imbue(v8, a3);
  std::locale::~locale(&v15);
  rdbuf = (std::locale *)v8->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a3);
    std::locale v10 = rdbuf + 1;
    std::locale::locale(&v14, v10);
    std::locale::operator=(v10, a3);
    std::locale::~locale(&v14);
  }
  std::locale::~locale(&v12);
  boost::property_tree::json_parser::write_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(&v16, a2, a1, a4);
  uint64_t v16 = *MEMORY[0x1E4FBA400];
  *(uint64_t *)((char *)&v16 + *(void *)(v16 - 24)) = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1B3EA7CF0](&v17);
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](v18);
}

void sub_1B1D5C344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ofstream::~ofstream(&a27);
  _Unwind_Resume(a1);
}

void quasar::PTree::writeJson()
{
  quasar::PTreeHelper::PTreeFromPTree(v0);
}

void sub_1B1D5C3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::PTree::getBool(quasar::PTree *this)
{
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 8);
  }
  uint64_t v1 = quasar::PTree::toBool(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v1;
}

void sub_1B1D5C46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PTree::toBool(std::string *this)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v3 = (std::string *)this->__r_.__value_.__r.__words[0];
    uint64_t v2 = (std::string *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
  }
  else
  {
    uint64_t v2 = (std::string *)((char *)this + HIBYTE(this->__r_.__value_.__r.__words[2]));
    uint64_t v3 = this;
  }
  while (v3 != v2)
  {
    v3->__r_.__value_.__s.__data_[0] = __tolower(v3->__r_.__value_.__s.__data_[0]);
    uint64_t v3 = (std::string *)((char *)v3 + 1);
  }
  if (!std::string::compare(this, "true") || !std::string::compare(this, "t") || !std::string::compare(this, "1")) {
    return 1;
  }
  uint64_t result = std::string::compare(this, "false");
  if (result)
  {
    uint64_t result = std::string::compare(this, "f");
    if (result)
    {
      uint64_t result = std::string::compare(this, "0");
      if (result)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        quasar::PTree::Error::Error(exception, &v6);
      }
    }
  }
  return result;
}

void sub_1B1D5C5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void quasar::PTree::getBool(uint64_t a1, uint64_t a2)
{
}

void sub_1B1D5C670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PTree::getBoolOptional(uint64_t a1, uint64_t a2)
{
}

void sub_1B1D5C714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PTree::getDoubleOptional(uint64_t a1, uint64_t a2)
{
}

void quasar::PTree::getAndEraseDouble(uint64_t a1, uint64_t a2)
{
}

void quasar::PTree::getString(uint64_t a1, uint64_t a2)
{
}

void quasar::PTree::getAndEraseString(uint64_t a1, uint64_t a2)
{
}

void sub_1B1D5C840(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PTree::getStringOptional(uint64_t a1, uint64_t a2)
{
}

void sub_1B1D5CA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PTree::BadPath::~BadPath(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F0A58F38;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1F0A58F38;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::PTree::getChildWithoutSplit(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v2 == v3) {
    return 0;
  }
  char v4 = *((unsigned char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v5 = a2[1];
  }
  if (v4 >= 0) {
    long long v6 = (unsigned __int8 *)a2;
  }
  else {
    long long v6 = *a2;
  }
  while (1)
  {
    uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
    if ((v7 & 0x80u) == 0) {
      std::locale v8 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 23);
    }
    else {
      std::locale v8 = *(unsigned __int8 **)(v2 + 8);
    }
    if (v8 != v5) {
      goto LABEL_19;
    }
    if ((v7 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(v2 + 23)) {
      return v2 + 24;
    }
    uint64_t v9 = 0;
    while (*(unsigned __int8 *)(v2 + v9) == v6[v9])
    {
      if (v7 == ++v9) {
        return v2 + 24;
      }
    }
LABEL_19:
    v2 += 88;
    if (v2 == v3) {
      return 0;
    }
  }
  if (memcmp(*(const void **)v2, v6, *(void *)(v2 + 8))) {
    goto LABEL_19;
  }
  return v2 + 24;
}

void sub_1B1D5CC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PTree::getChildOptional(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v4 == v5) {
    return 0;
  }
  while (2)
  {
    int v6 = *(char *)(v2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(v2 + 8);
    }
    while (1)
    {
      uint64_t v8 = *(unsigned __int8 *)(v4 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = *(unsigned __int8 *)(v4 + 23);
      }
      else {
        uint64_t v9 = *(void *)(v4 + 8);
      }
      if (v9 != v7) {
        goto LABEL_20;
      }
      std::locale v10 = v6 >= 0 ? (unsigned __int8 *)v2 : *(unsigned __int8 **)v2;
      if ((v8 & 0x80) != 0) {
        break;
      }
      if (!*(unsigned char *)(v4 + 23)) {
        goto LABEL_22;
      }
      uint64_t v11 = 0;
      while (*(unsigned __int8 *)(v4 + v11) == v10[v11])
      {
        if (v8 == ++v11) {
          goto LABEL_22;
        }
      }
LABEL_20:
      v4 += 88;
      if (v4 == v5) {
        return 0;
      }
    }
    if (memcmp(*(const void **)v4, v10, *(void *)(v4 + 8))) {
      goto LABEL_20;
    }
LABEL_22:
    v2 += 24;
    if (v2 != v3)
    {
      uint64_t v5 = *(void *)(v4 + 64);
      uint64_t v4 = *(void *)(v4 + 56);
      if (v4 == v5) {
        return 0;
      }
      continue;
    }
    return v4 + 24;
  }
}

void quasar::PTree::replaceChild(uint64_t a1, uint64_t a2)
{
}

uint64_t quasar::PTree::isLeaf(quasar::PTree *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t quasar::PTree::getDataType(quasar::PTree *this)
{
  if (*((unsigned char *)this + 56)) {
    return *(unsigned int *)this;
  }
  else {
    return 4;
  }
}

void quasar::PTree::writeProperJson()
{
  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "writeProperJson unsupported");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

std::string *std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string const&,quasar::PTree,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    this[2].__r_.__value_.__r.__words[0] = *(void *)(a3 + 24);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 56), *(void *)(a3 + 32), *(void *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  this[3].__r_.__value_.__s.__data_[8] = *(unsigned char *)(a3 + 56);
  return this;
}

void sub_1B1D5D040(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string const&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  operator new();
}

void sub_1B1D5D124(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v3 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
  }
  operator new();
}

void sub_1B1D5D218(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string&,quasar::PTree const&,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    this[2].__r_.__value_.__r.__words[0] = *(void *)(a3 + 24);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 56), *(void *)(a3 + 32), *(void *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  this[3].__r_.__value_.__s.__data_[8] = *(unsigned char *)(a3 + 56);
  return this;
}

void sub_1B1D5D338(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string&,quasar::PTree,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    this[2].__r_.__value_.__r.__words[0] = *(void *)(a3 + 24);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 56), *(void *)(a3 + 32), *(void *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  this[3].__r_.__value_.__s.__data_[8] = *(unsigned char *)(a3 + 56);
  return this;
}

void sub_1B1D5D438(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<char const*,quasar::PTree>::pair[abi:ne180100]<true,0>(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a3 + 8);
    *(void *)(a1 + 32) = *(void *)(a3 + 24);
    *(_OWORD *)(a1 + 16) = v5;
  }
  *(void *)(a1 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(a1 + 40), *(void *)(a3 + 32), *(void *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a3 + 56);
  return a1;
}

void sub_1B1D5D514(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<char const*,quasar::PTree,0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::string::basic_string[abi:ne180100]<0>((void *)a1, *(char **)a2);
  *((_DWORD *)v4 + 6) = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 4), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    int32x2_t v4[6] = *(void *)(a2 + 32);
    *((_OWORD *)v4 + 2) = v5;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(a1 + 56), *(void *)(a2 + 40), *(void *)(a2 + 48), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(unsigned char *)(a1 + 8std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = *(unsigned char *)(a2 + 64);
  return a1;
}

void sub_1B1D5D5D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    std::locale v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v7, v9);
  }
  else {
    std::locale v10 = 0;
  }
  long long v13 = v10;
  std::locale v14 = &v10[88 * v4];
  int v16 = &v10[88 * v9];
  std::pair<std::string,quasar::PTree>::pair[abi:ne180100]((uint64_t)v14, a2);
  std::locale v15 = v14 + 88;
  std::vector<std::pair<std::string,quasar::PTree>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::pair<std::string,quasar::PTree>>::~__split_buffer(&v13);
  return v11;
}

void sub_1B1D5D718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,quasar::PTree>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,quasar::PTree>::pair[abi:ne180100](uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v5;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(a1 + 56), *((void *)a2 + 7), *((void *)a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
  *(unsigned char *)(a1 + 8std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = *((unsigned char *)a2 + 80);
  return a1;
}

void sub_1B1D5D7E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::string,quasar::PTree>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>>((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      unint64_t v9 = (long long *)((char *)v9 - 88);
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100]((std::string *)(v7 - 88), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 88;
      *((void *)&v15 + 1) -= 88;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1B1D5D938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::string,quasar::PTree>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::string,quasar::PTree>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100](v4, i - 88);
  }
}

void boost::property_tree::json_parser::detail::read_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>()
{
  long long v0 = 0uLL;
  uint64_t v1 = 0;
  operator new();
}

void sub_1B1D5DB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~standard_callbacks((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::property_tree::json_parser::detail::read_json_internal<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::property_tree::json_parser::detail::encoding<char>,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, std::string *__str)
{
  v7[0] = a4;
  v7[1] = a3;
  uint64_t v8 = a3;
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&__p, __str);
  v9[0] = a1;
  v9[1] = (uint64_t)a2;
  boost::property_tree::json_parser::detail::utf8_utf8_encoding::skip_introduction<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(v8, v9, a2);
  uint64_t v11 = 1;
  boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(v7);
  boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::finish((uint64_t)v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1D5DC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~standard_callbacks(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a1);
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(uint64_t *a1)
{
  uint64_t result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_object(a1);
  if ((result & 1) == 0)
  {
    uint64_t result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_array((void **)a1);
    if ((result & 1) == 0)
    {
      uint64_t result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_string(a1);
      if ((result & 1) == 0)
      {
        uint64_t result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_BOOLean(a1);
        if ((result & 1) == 0)
        {
          uint64_t result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_null(a1);
          if ((result & 1) == 0)
          {
            uint64_t result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_number((long long *)a1);
            if ((result & 1) == 0)
            {
              boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error((uint64_t)(a1 + 2), "expected value");
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::finish(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  BOOL v3 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)(a1 + 24));
  BOOL result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)(a1 + 32));
  if (v3 != result) {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "garbage after data");
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::utf8_utf8_encoding::skip_introduction<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)a2);
  char v6 = result;
  if (!a3 || a3[3] == a3[4] && (uint64_t result = (*(uint64_t (**)(void *))(*a3 + 72))(a3), result == -1))
  {
    if (v6) {
      return result;
    }
    a3 = 0;
  }
  else if ((v6 & 1) == 0)
  {
    return result;
  }
  uint64_t result = *a2;
  uint64_t v7 = *(unsigned __int8 **)(*a2 + 24);
  if (v7 == *(unsigned __int8 **)(*a2 + 32))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 72))(result);
    int v8 = result;
  }
  else
  {
    int v8 = *v7;
  }
  if (v8 == 239)
  {
    unint64_t v9 = (void *)*a2;
    uint64_t v10 = *(void *)(*a2 + 24);
    if (v10 == *(void *)(*a2 + 32)) {
      (*(void (**)(void *))(*v9 + 80))(v9);
    }
    else {
      void v9[3] = v10 + 1;
    }
    uint64_t result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)a2);
    int v11 = result;
    if (a3)
    {
      if (a3[3] == a3[4])
      {
        uint64_t result = (*(uint64_t (**)(void *))(*a3 + 72))(a3);
        if (result == -1) {
          a3 = 0;
        }
        if (v11 == (result == -1)) {
          return result;
        }
      }
      else if ((result & 1) == 0)
      {
        return result;
      }
    }
    else
    {
      if (result) {
        return result;
      }
      a3 = 0;
    }
    std::locale v12 = (void *)*a2;
    uint64_t v13 = *(void *)(*a2 + 24);
    if (v13 == *(void *)(*a2 + 32)) {
      (*(void (**)(void *))(*v12 + 80))(v12);
    }
    else {
      void v12[3] = v13 + 1;
    }
    uint64_t result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)a2);
    int v14 = result;
    if (!a3)
    {
      if (result) {
        return result;
      }
      a3 = 0;
      goto LABEL_36;
    }
    if (a3[3] != a3[4])
    {
      if ((result & 1) == 0) {
        return result;
      }
      goto LABEL_36;
    }
    uint64_t result = (*(uint64_t (**)(void *))(*a3 + 72))(a3);
    if (result == -1) {
      a3 = 0;
    }
    if (v14 != (result == -1))
    {
LABEL_36:
      long long v15 = (void *)*a2;
      uint64_t v16 = *(void *)(*a2 + 24);
      if (v16 == *(void *)(*a2 + 32)) {
        (*(void (**)(void *))(*v15 + 80))(v15);
      }
      else {
        void v15[3] = v16 + 1;
      }
      uint64_t result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)a2);
      if (a3 && a3[3] == a3[4])
      {
        uint64_t v17 = *(uint64_t (**)(void *))(*a3 + 72);
        return v17(a3);
      }
    }
  }
  return result;
}

BOOL std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v2[3] != v2[4]) {
      return 0;
    }
    if ((*(unsigned int (**)(void *))(*v2 + 72))(v2) != -1) {
      return *a1 == 0;
    }
    *a1 = 0;
  }
  return 1;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_object(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  uint64_t v3 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_open_brace, 0);
  if (v3)
  {
    uint64_t v4 = *a1;
    boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree((void *)*a1);
    *(_DWORD *)(*(void *)(v4 + 64) - 16) = 1;
    while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
    if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_brace, 0) & 1) == 0)
    {
      do
      {
        if ((boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_string(a1) & 1) == 0) {
          boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "expected key string");
        }
        while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
        boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_colon, 0, "expected ':'");
        boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(a1);
        while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
      }
      while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_comma, 0) & 1) != 0);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_brace, 0, "expected '}' or ','");
    }
    uint64_t v5 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v5 - 16) == 3) {
      v5 -= 16;
    }
    *(void *)(*a1 + 64) = v5 - 16;
  }
  return v3;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_array(void **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  uint64_t v3 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_open_bracket, 0);
  if (v3)
  {
    uint64_t v4 = (uint64_t)*a1;
    boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(*a1);
    *(_DWORD *)(*(void *)(v4 + 64) - 16) = 0;
    while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
    if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_bracket, 0) & 1) == 0)
    {
      do
      {
        boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(a1);
        while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
      }
      while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_comma, 0) & 1) != 0);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_bracket, 0, "expected ']' or ','");
    }
    uint64_t v5 = (*a1)[8];
    if (*(_DWORD *)(v5 - 16) == 3) {
      v5 -= 16;
    }
    (*a1)[8] = v5 - 16;
  }
  return v3;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_string(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  uint64_t v3 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_quote, 0);
  if (v3)
  {
    boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*a1);
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(v2, "unterminated string") != 34)
    {
      char v6 = a1 + 3;
      do
      {
        uint64_t v7 = *(unsigned __int8 **)(*v6 + 24);
        if (v7 == *(unsigned __int8 **)(*v6 + 32)) {
          int v8 = (*(unsigned __int8 (**)(void))(*(void *)*v6 + 72))(*v6);
        }
        else {
          int v8 = *v7;
        }
        if (v8 == 92)
        {
          boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
          boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_escape(a1);
        }
        else
        {
          unint64_t v9 = (void *)a1[4];
          v12[0] = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::on_code_unit;
          v12[1] = 0;
          void v12[2] = v5;
          v11[0] = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error;
          v11[1] = 0;
          void v11[2] = a1;
          void v11[3] = "invalid code sequence";
          boost::property_tree::json_parser::detail::utf8_utf8_encoding::transcode_codepoint<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>,char const*>,boost::_bi::list2<boost::_bi::value<boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>*>,boost::_bi::value<char const*>>>>(v4, (void **)a1 + 3, v9, (uint64_t)v12, (uint64_t)v11);
        }
      }
      while (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(v2, "unterminated string") != 34);
    }
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  }
  return v3;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_BOOLean(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_t, 0))
  {
    uint64_t v3 = "expected 'true'";
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_r, 0, "expected 'true'");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0, "expected 'true'");
    uint64_t v4 = "true";
  }
  else
  {
    uint64_t result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_f, 0);
    if (!result) {
      return result;
    }
    uint64_t v3 = "expected 'false'";
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_a, 0, "expected 'false'");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l, 0, "expected 'false'");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_s, 0, "expected 'false'");
    uint64_t v4 = "false";
  }
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_e, 0, v3);
  char v6 = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*a1);
  MEMORY[0x1B3EA7B20](v6, v4);
  return 1;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_null(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  uint64_t v3 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_n, 0);
  if (v3)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0, "expected 'null'");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l, 0, "expected 'null'");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l, 0, "expected 'null'");
    uint64_t v4 = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*a1);
    MEMORY[0x1B3EA7B20](v4, "null");
  }
  return v3;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_number(long long *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  long long v5 = *a1;
  char v6 = 1;
  int v3 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_minus, 0, (uint64_t)&v5);
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_0, 0, (uint64_t)&v5) & 1) != 0|| (boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_int_part((uint64_t)a1, (uint64_t)&v5))
  {
    boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_frac_part((uint64_t)a1, (uint64_t)&v5);
    boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_exp_part((uint64_t)a1, (uint64_t)&v5);
    return 1;
  }
  else
  {
    if (v3) {
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "expected digits after -");
    }
    return 0;
  }
}

void boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(uint64_t a1, char *a2)
{
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_open_brace(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 123;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_brace(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 125;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_colon(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 58;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_comma(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 44;
}

uint64_t boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, unsigned int a2)
{
  return (a2 < 0x21) & (0x100002600uLL >> a2);
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(uint64_t a1, uint64_t (*a2)(void *, void), uint64_t a3)
{
  char v6 = (void *)(a1 + 8);
  uint64_t v7 = (void **)(a1 + 16);
  BOOL v8 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)(a1 + 8));
  if (v8 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](v7)) {
    return 0;
  }
  unint64_t v9 = (void *)(*(void *)a1 + (a3 >> 1));
  if (a3) {
    a2 = *(uint64_t (**)(void *, void))(*v9 + a2);
  }
  int v11 = *(char **)(*v6 + 24);
  if (v11 == *(char **)(*v6 + 32)) {
    char v12 = (*(uint64_t (**)(void))(*(void *)*v6 + 72))(*v6);
  }
  else {
    char v12 = *v11;
  }
  uint64_t result = a2(v9, v12);
  if (result)
  {
    if (*(void *)(*v6 + 24) == *(void *)(*v6 + 32)) {
      (*(void (**)(void))(*(void *)*v6 + 72))(*v6);
    }
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(a1);
    return 1;
  }
  return result;
}

void *boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  int v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4]) {
    int v4 = (*(unsigned __int8 (**)(void *))(*v2 + 72))(v2);
  }
  else {
    int v4 = *v3;
  }
  if (v4 == 10) {
    *(void *)(a1 + 48) = (*(_DWORD *)(a1 + 48) + 1);
  }
  else {
    ++*(_DWORD *)(a1 + 52);
  }
  uint64_t result = *(void **)(a1 + 8);
  uint64_t v6 = result[3];
  if (v6 == result[4])
  {
    uint64_t v7 = *(uint64_t (**)(void))(*result + 80);
    return (void *)v7();
  }
  else
  {
    result[3] = v6 + 1;
  }
  return result;
}

void *boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  int v3 = (void *)a1[8];
  int v4 = (void **)(a1 + 7);
  if (v2 != v3)
  {
    long long v5 = v3 - 2;
    do
    {
      if (*v5 != 3)
      {
        if (!*v5) {
          operator new();
        }
        operator new();
      }
      a1[8] = v5;
      BOOL v6 = v5 == (_DWORD *)v2;
      v5 -= 4;
    }
    while (!v6);
  }
  uint64_t v7 = (uint64_t)(a1 + 9);
  unint64_t v8 = a1[9];
  if ((unint64_t)v2 >= v8)
  {
    uint64_t v10 = v8 - (void)v2;
    uint64_t v11 = v10 >> 3;
    if ((unint64_t)(v10 >> 3) <= 1) {
      uint64_t v11 = 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v7, v12);
    long long v15 = &v13[2 * v14];
    *uint64_t v13 = 3;
    v13[1] = a1;
    unint64_t v9 = v13 + 2;
    uint64_t v17 = (char *)a1[7];
    uint64_t v16 = (char *)a1[8];
    if (v16 != v17)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v16 - 1);
        v13 -= 2;
        v16 -= 16;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*v4;
    }
    a1[7] = v13;
    a1[8] = v9;
    a1[9] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v2 = 3;
    v2[1] = a1;
    unint64_t v9 = v2 + 2;
  }
  a1[8] = v9;
  return a1;
}

void sub_1B1D5F0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair(v23 - 104);
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair((uint64_t)&a23);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(uint64_t a1, long long *a2, long long *a3)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v4 = *a3;
    *(void *)(a1 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v4;
  }
  operator new();
}

void sub_1B1D5F220(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  operator new();
}

void sub_1B1D5F324(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(uint64_t a1, uint64_t (*a2)(void *, void), uint64_t a3, char *a4)
{
  uint64_t result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(a1, a2, a3);
  if ((result & 1) == 0) {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(a1, a4);
  }
  return result;
}

void boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(uint64_t a1, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  boost::property_tree::file_parser_error::file_parser_error((uint64_t)v5, (uint64_t)v4, (long long *)(a1 + 24), *(int *)(a1 + 48));
  v5[0] = &unk_1F0A46D30;
  v3[0] = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/boost/property_tree/"
          "json_parser/detail/parser.hpp";
  v3[1] = "void boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<cha"
          "r>, std::istreambuf_iterator<char>, std::istreambuf_iterator<char>>::parse_error(const char *) [Encoding = boo"
          "st::property_tree::json_parser::detail::encoding<char>, Iterator = std::istreambuf_iterator<char>, Sentinel = "
          "std::istreambuf_iterator<char>]";
  std::string v3[2] = 47;
  boost::throw_exception<boost::property_tree::json_parser::json_parser_error>((uint64_t)v5, (uint64_t)v3);
}

void sub_1B1D5F440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_open_bracket(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 91;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_bracket(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 93;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_quote(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 34;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_backslash(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 92;
}

void boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_escape(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>((uint64_t)(a1 + 2), (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_quote, 0))
  {
    uint64_t v3 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v3 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v3 - 8);
    }
    std::string::value_type v6 = 34;
LABEL_43:
    std::string::push_back(v4, v6);
    return;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_backslash, 0))
  {
    uint64_t v5 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v5 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v5 - 8);
    }
    std::string::value_type v6 = 92;
    goto LABEL_43;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_slash, 0))
  {
    uint64_t v7 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v7 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v7 - 8);
    }
    std::string::value_type v6 = 47;
    goto LABEL_43;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_b, 0))
  {
    uint64_t v8 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v8 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v8 - 8);
    }
    std::string::value_type v6 = 8;
    goto LABEL_43;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_f, 0))
  {
    uint64_t v9 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v9 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v9 - 8);
    }
    std::string::value_type v6 = 12;
    goto LABEL_43;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_n, 0))
  {
    uint64_t v10 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v10 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v10 - 8);
    }
    std::string::value_type v6 = 10;
    goto LABEL_43;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_r, 0))
  {
    uint64_t v11 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v11 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v11 - 8);
    }
    std::string::value_type v6 = 13;
    goto LABEL_43;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_t, 0))
  {
    uint64_t v12 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v12 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v12 - 8);
    }
    std::string::value_type v6 = 9;
    goto LABEL_43;
  }
  if (!boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0))boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "invalid escape sequence"); {
  boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_codepoint_ref(a1);
  }
}

void *boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 56);
  uint64_t v2 = *(_DWORD **)(a1 + 64);
  if (v1 == v2) {
    return boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree((void *)a1);
  }
  for (uint64_t i = v2 - 4; *i == 3; i -= 4)
  {
    *(void *)(a1 + 64) = i;
    if (i == v1) {
      return boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree((void *)a1);
    }
  }
  if (*i != 1) {
    return boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree((void *)a1);
  }
  _DWORD *i = 2;
  if (*(char *)(a1 + 55) < 0)
  {
    **(unsigned char **)(a1 + 32) = 0;
    *(void *)(a1 + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 55) = 0;
  }
  return (void *)(a1 + 32);
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(uint64_t a1, char *a2)
{
  long long v4 = (void *)(a1 + 8);
  uint64_t v5 = (void **)(a1 + 16);
  BOOL v6 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)(a1 + 8));
  if (v6 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](v5)) {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(a1, a2);
  }
  uint64_t v7 = *(char **)(*v4 + 24);
  if (v7 == *(char **)(*v4 + 32)) {
    return (char)(*(uint64_t (**)(void))(*(void *)*v4 + 72))(*v4);
  }
  else {
    return *v7;
  }
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_slash(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 47;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_b(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 98;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_f(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 102;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_n(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 110;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_r(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 114;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_t(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 116;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 117;
}

void boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_codepoint_ref(uint64_t *a1)
{
  unsigned int v2 = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_hex_quad((uint64_t)a1);
  if ((v2 & 0xFC00) == 0xD800)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect((uint64_t)(a1 + 2), (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_backslash, 0, "invalid codepoint, stray high surrogate");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect((uint64_t)(a1 + 2), (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0, "expected codepoint reference after high surrogate");
    __int16 v3 = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_hex_quad((uint64_t)a1);
    if ((v3 & 0xFC00) != 0xDC00) {
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error((uint64_t)(a1 + 2), "expected low surrogate after high surrogate");
    }
    unsigned int v2 = (v3 & 0x3FF | ((v2 & 0x3FF) << 10)) + 0x10000;
  }
  else if ((v2 & 0xFC00) == 0xDC00)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error((uint64_t)(a1 + 2), "invalid codepoint, stray low surrogate");
  }
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  v6[0] = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::on_code_unit;
  v6[1] = 0;
  v6[2] = v5;
  boost::property_tree::json_parser::detail::utf8_utf8_encoding::feed_codepoint<boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>>(v4, v2, (uint64_t)v6);
}

void boost::property_tree::json_parser::detail::utf8_utf8_encoding::feed_codepoint<boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        if (HIWORD(a2) > 0x10u) {
          return;
        }
        uint64_t v12 = (a2 >> 18) | 0xFFFFFFF0;
        uint64_t v13 = *(void *)(a3 + 8);
        uint64_t v14 = *(void (**)(void *, uint64_t))a3;
        long long v15 = (void *)(*(void *)(a3 + 16) + (v13 >> 1));
        if (v13) {
          uint64_t v14 = *(void (**)(void *, uint64_t))(*v15 + v14);
        }
        v14(v15, v12);
        uint64_t v11 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
      }
      else
      {
        uint64_t v11 = (a2 >> 12) | 0xFFFFFFE0;
      }
      uint64_t v16 = *(void *)(a3 + 8);
      uint64_t v17 = *(void (**)(void *, uint64_t))a3;
      long long v18 = (void *)(*(void *)(a3 + 16) + (v16 >> 1));
      if (v16) {
        uint64_t v17 = *(void (**)(void *, uint64_t))(*v18 + v17);
      }
      v17(v18, v11);
      uint64_t v9 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    }
    else
    {
      uint64_t v9 = (a2 >> 6) | 0xFFFFFFC0;
    }
    uint64_t v19 = *(void *)(a3 + 8);
    long long v20 = *(void (**)(void *, uint64_t))a3;
    long long v21 = (void *)(*(void *)(a3 + 16) + (v19 >> 1));
    if (v19) {
      long long v20 = *(void (**)(void *, uint64_t))(*v21 + v20);
    }
    v20(v21, v9);
    uint64_t v10 = a2 & 0x3F | 0xFFFFFF80;
    uint64_t v22 = *(void *)(a3 + 8);
    uint64_t v7 = *(void (**)(void *, uint64_t))a3;
    uint64_t v8 = (void *)(*(void *)(a3 + 16) + (v22 >> 1));
    if (v22) {
      uint64_t v7 = *(void (**)(void *, uint64_t))(*v8 + v7);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v7 = *(void (**)(void *, uint64_t))a3;
    uint64_t v8 = (void *)(v5 + (v6 >> 1));
    if (v6) {
      uint64_t v7 = *(void (**)(void *, uint64_t))(*v8 + v7);
    }
    uint64_t v10 = (char)a2;
  }
  v7(v8, v10);
}

void boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::on_code_unit(uint64_t a1, std::string::value_type a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(_DWORD *)(v2 - 16) == 2) {
    __int16 v3 = (std::string *)(a1 + 32);
  }
  else {
    __int16 v3 = *(std::string **)(v2 - 8);
  }
  std::string::push_back(v3, a2);
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_hex_quad(uint64_t a1)
{
  LODWORD(v1) = 0;
  uint64_t v2 = a1 + 16;
  int v3 = 4;
  do
  {
    int v4 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(v2, "invalid escape sequence");
    int v5 = v4 - 48;
    if ((v4 - 48) <= 9) {
      goto LABEL_5;
    }
    if ((v4 - 65) <= 5)
    {
      int v5 = v4 - 55;
LABEL_5:
      if (v5 < 0) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
    if ((v4 - 97) > 5 || (int v5 = v4 - 87, v4 - 87 < 0)) {
LABEL_9:
    }
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "invalid escape sequence");
LABEL_10:
    uint64_t v1 = (v5 + 16 * v1);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
    --v3;
  }
  while (v3);
  return v1;
}

void *boost::property_tree::json_parser::detail::utf8_utf8_encoding::transcode_codepoint<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>,char const*>,boost::_bi::list2<boost::_bi::value<boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>*>,boost::_bi::value<char const*>>>>(uint64_t a1, void **a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  uint64_t v10 = (unsigned __int8 *)(*a2)[3];
  uint64_t v11 = (unsigned __int8 *)(*a2)[4];
  if (v10 == v11)
  {
    unint64_t v12 = (*(uint64_t (**)(void *))(*v9 + 72))(v9);
    uint64_t v9 = *a2;
    uint64_t v10 = (unsigned __int8 *)(*a2)[3];
    uint64_t v11 = (unsigned __int8 *)(*a2)[4];
  }
  else
  {
    unint64_t v12 = *v10;
  }
  if (v10 == v11)
  {
    (*(void (**)(void *))(*v9 + 80))(v9);
    if ((v12 & 0x80) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    void v9[3] = v10 + 1;
    if ((v12 & 0x80) == 0)
    {
LABEL_6:
      if (v12 <= 0x1Fu)
      {
        uint64_t v13 = *(void (**)(void, void))a5;
        uint64_t v14 = *(void *)(a5 + 8);
        long long v15 = (void *)(*(void *)(a5 + 16) + (v14 >> 1));
        if (v14) {
          uint64_t v13 = *(void (**)(void, void))(*v15 + v13);
        }
        v13(v15, *(void *)(a5 + 24));
      }
      uint64_t v21 = *(void *)(a4 + 8);
      uint64_t v22 = *(void (**)(void, void))a4;
      uint64_t v23 = (void *)(*(void *)(a4 + 16) + (v21 >> 1));
      if (v21) {
        uint64_t v22 = *(void (**)(void, void))(*v23 + v22);
      }
      return (void *)((uint64_t (*)(void *, void))v22)(v23, (char)v12);
    }
  }
  uint64_t v16 = (v12 >> 3) & 0xF;
  LOBYTE(v17) = boost::property_tree::json_parser::detail::utf8_utf8_encoding::trail_table(unsigned char)const::table[v16];
  if ((unint64_t)(v16 - 15) <= 0xFFFFFFFFFFFFFFF8)
  {
    long long v18 = *(void (**)(void, void))a5;
    uint64_t v19 = *(void *)(a5 + 8);
    long long v20 = (void *)(*(void *)(a5 + 16) + (v19 >> 1));
    if (v19) {
      long long v18 = *(void (**)(void, void))(*v20 + v18);
    }
    v18(v20, *(void *)(a5 + 24));
  }
  uint64_t v25 = *(void *)(a4 + 8);
  long long v26 = *(void (**)(void, void))a4;
  long long v27 = (void *)(*(void *)(a4 + 16) + (v25 >> 1));
  if (v25) {
    long long v26 = *(void (**)(void, void))(*v27 + v26);
  }
  uint64_t result = (void *)((uint64_t (*)(void *, void))v26)(v27, (char)v12);
  if ((unint64_t)(v16 - 8) <= 6)
  {
    if ((char)v17 <= 1) {
      int v17 = 1;
    }
    else {
      int v17 = (char)v17;
    }
    do
    {
      BOOL v28 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
      BOOL v29 = v28;
      if (a3)
      {
        if (a3[3] == a3[4])
        {
          int v30 = (*(uint64_t (**)(void *))(*a3 + 72))(a3);
          if (v30 == -1) {
            a3 = 0;
          }
          if (v29 == (v30 == -1))
          {
LABEL_41:
            uint64_t v33 = *(void *)(a5 + 8);
            int v34 = *(void (**)(void, void))a5;
            long long v35 = (void *)(*(void *)(a5 + 16) + (v33 >> 1));
            if (v33) {
              int v34 = *(void (**)(void, void))(*v35 + v34);
            }
            v34(v35, *(void *)(a5 + 24));
            goto LABEL_44;
          }
        }
        else if (!v28)
        {
          goto LABEL_41;
        }
      }
      else if (v28)
      {
        goto LABEL_41;
      }
      long long v31 = (char *)(*a2)[3];
      if (v31 == (char *)(*a2)[4]) {
        char v32 = (*(uint64_t (**)(void))(**a2 + 72))(*a2);
      }
      else {
        char v32 = *v31;
      }
      if ((v32 & 0xC0) != 0x80) {
        goto LABEL_41;
      }
LABEL_44:
      long long v36 = (char *)(*a2)[3];
      if (v36 == (char *)(*a2)[4]) {
        char v37 = (*(uint64_t (**)(void))(**a2 + 72))(*a2);
      }
      else {
        char v37 = *v36;
      }
      uint64_t v38 = *(void *)(a4 + 8);
      long long v39 = *(void (**)(void, void))a4;
      long long v40 = (void *)(*(void *)(a4 + 16) + (v38 >> 1));
      if (v38) {
        long long v39 = *(void (**)(void, void))(*v40 + v39);
      }
      v39(v40, v37);
      uint64_t result = *a2;
      uint64_t v41 = (*a2)[3];
      if (v41 == (*a2)[4]) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 80))(result);
      }
      else {
        result[3] = v41 + 1;
      }
      --v17;
    }
    while (v17);
  }
  return result;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_e(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 101;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_a(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 97;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 108;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_s(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 115;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_minus(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 45;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_0(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 48;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_int_part(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  uint64_t v4 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(a1 + 16, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit0, 0, a2);
  if (v4)
  {
    while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2) & 1) != 0);
  }
  return v4;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_frac_part(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  uint64_t result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(a1 + 16, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_dot, 0, a2);
  if (result)
  {
    if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2) & 1) == 0)boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v3, "need at least one digit after '.'"); {
    do
    }
      uint64_t result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2);
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_exp_part(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  uint64_t result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(a1 + 16, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_eE, 0, a2);
  if (result)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_plusminus, 0, a2);
    if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2) & 1) == 0)boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v3, "need at least one digit in exponent"); {
    do
    }
      uint64_t result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2);
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(uint64_t a1, uint64_t (*a2)(void *, void), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)(a1 + 8);
  uint64_t v9 = (void **)(a1 + 16);
  BOOL v10 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)(a1 + 8));
  if (v10 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](v9)) {
    return 0;
  }
  uint64_t v11 = (void *)(*(void *)a1 + (a3 >> 1));
  if (a3) {
    a2 = *(uint64_t (**)(void *, void))(*v11 + a2);
  }
  uint64_t v13 = *(char **)(*v8 + 24);
  if (v13 == *(char **)(*v8 + 32)) {
    char v14 = (*(uint64_t (**)(void))(*(void *)*v8 + 72))(*v8);
  }
  else {
    char v14 = *v13;
  }
  uint64_t result = a2(v11, v14);
  if (result)
  {
    long long v15 = *(std::string::value_type **)(*v8 + 24);
    if (v15 == *(std::string::value_type **)(*v8 + 32)) {
      std::string::value_type v16 = (*(uint64_t (**)(void))(*(void *)*v8 + 72))(*v8);
    }
    else {
      std::string::value_type v16 = *v15;
    }
    boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>::operator()(a4, v16);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(a1);
    return 1;
  }
  return result;
}

void boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>::operator()(uint64_t a1, std::string::value_type __c)
{
  if (*(unsigned char *)(a1 + 16))
  {
    boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*(void *)a1);
    *(unsigned char *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 64);
  if (*(_DWORD *)(v4 - 16) == 2) {
    int v5 = (std::string *)(*(void *)a1 + 32);
  }
  else {
    int v5 = *(std::string **)(v4 - 8);
  }
  std::string::push_back(v5, __c);
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit0(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, unsigned __int8 a2)
{
  return a2 - 49 < 9;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, unsigned __int8 a2)
{
  return a2 - 48 < 0xA;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_dot(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 46;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_eE(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, char a2)
{
  return (a2 & 0xDF) == 69;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_plusminus(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 43 || a2 == 45;
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,0>(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::pair<std::string,quasar::PTree>::operator=[abi:ne180100](a3, v4);
      uint64_t v4 = (long long *)((char *)v4 + 88);
      a3 += 88;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::pair<std::string,quasar::PTree>::operator=[abi:ne180100](uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 2));
  if ((long long *)a1 != a2) {
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(a1 + 56, *((std::string **)a2 + 7), *((std::string **)a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
  }
  *(unsigned char *)(a1 + 8std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = *((unsigned char *)a2 + 80);
  return a1;
}

_DWORD *kaldi::quasar::SparseMatrix<float>::CheckBounds(_DWORD *result, int a2, int a3)
{
  if (a2 < 0 || a3 < 0 || *result <= a2 || result[1] <= a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Index (", 7);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
    long long v4 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, ") is out of bounds.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  return result;
}

char *std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__find_equal<std::pair<int,int>>((uint64_t)a1, &v10, a2);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (char *)operator new(0x28uLL);
    *(void *)(v7 + 28) = **a4;
    *((_DWORD *)v7 + 9) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__find_equal<std::pair<int,int>>(uint64_t a1, void *a2, int *a3)
{
  int v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  long long v4 = v5;
  if (v5)
  {
    int v6 = *a3;
    int v7 = a3[1];
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v4;
        int v9 = *((_DWORD *)v4 + 7);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        long long v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        int v10 = *((_DWORD *)v8 + 8);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      uint64_t result = v8 + 1;
      long long v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t TInputStream::verifyVersion(TInputStream *this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  int v10 = (char *)this + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  unint64_t v12 = (char *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v10, (const void **)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if ((char *)this + 160 != v12)
  {
    LOBYTE(__p[0]) = 0;
    uint64_t v13 = (unsigned int *)(v12 + 56);
    if (v12[79] < 0) {
      uint64_t v13 = *(unsigned int **)v13;
    }
    {
      operator new();
    }
    unsigned int v14 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v13, (BOOL *)__p);
    if (LOBYTE(__p[0]))
    {
      long long v15 = (void *)((char *)this + 16);
      if (*((char *)this + 39) < 0) {
        long long v15 = (void *)*v15;
      }
      tknPrintf("Error: %s : Expected %s in range [%llu,%llu]\n", v11, v15, a2, a3, a4);
      return 1;
    }
    a5 = v14;
  }
  if (a5 >= a3 && a5 <= a4) {
    return 0;
  }
  int v17 = (void *)((char *)this + 16);
  if (*((char *)this + 39) < 0) {
    int v17 = (void *)*v17;
  }
  tknPrintf("Error: %s : %llu : Expected %s in range [%llu,%llu]\n", v11, v17, a5, a2, a3, a4);
  return 1;
}

void sub_1B1D607FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  MEMORY[0x1B3EA8670](v19, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TInputStream::verifyHeader(uint64_t a1, char *__s, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const void **)(a1 + 40);
  size_t v9 = strlen(__s);
  size_t v11 = v9;
  uint64_t v12 = *(unsigned __int8 *)(a1 + 63);
  if (*(char *)(a1 + 63) < 0)
  {
    if (v9 != *(void *)(a1 + 48)) {
      goto LABEL_9;
    }
    if (v9 == -1) {
      goto LABEL_57;
    }
    uint64_t v13 = *v8;
  }
  else
  {
    if (v9 != v12) {
      goto LABEL_9;
    }
    uint64_t v13 = v8;
    if (v11 == -1) {
LABEL_57:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (memcmp(v13, __s, v11))
  {
LABEL_9:
    unsigned int v14 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
    {
      unsigned int v14 = (void *)*v14;
      if ((v12 & 0x80) == 0) {
        goto LABEL_11;
      }
    }
    else if ((v12 & 0x80) == 0)
    {
LABEL_11:
      tknPrintf("Error: File '%s' : '%s' : Bad file type, expected '%s'\n", v10, v14, v8, __s);
      return 1;
    }
    uint64_t v8 = (const void **)*v8;
    goto LABEL_11;
  }
  uint64_t v34 = a3;
  if (!a4)
  {
LABEL_37:
    long long v27 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      long long v27 = (void *)*v27;
    }
    BOOL v28 = (void *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      BOOL v28 = (void *)*v28;
    }
    tknPrintf("Error: File '%s' : '%s' : Unsupported file version prefix. Supported file versions: ", v10, v27, v28);
    if (a4)
    {
      int v30 = (void *)(v34 + 24);
      char v31 = 1;
      do
      {
        if (!*(v30 - 2))
        {
          if ((v31 & 1) == 0) {
            tknPrintString(", ");
          }
          if (*(unsigned char *)*(v30 - 1)) {
            tknPrintf("%s.", v29, *(v30 - 1));
          }
          tknPrintf("%llu", v29, *v30);
          char v31 = 0;
        }
        v30 += 4;
        --a4;
      }
      while (a4);
    }
    tknPrintString("\n");
    return 1;
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = *(unsigned __int8 *)(a1 + 95);
  uint64_t v20 = v34 + 16;
  uint64_t v21 = a4;
  do
  {
    size_t v22 = strlen(*(const char **)v20);
    size_t v23 = v22;
    if ((v19 & 0x80) != 0)
    {
      if (v22 != *(void *)(a1 + 80)) {
        goto LABEL_31;
      }
      if (v22 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      long long v24 = *(const void **)(a1 + 72);
    }
    else
    {
      long long v24 = (const void *)(a1 + 72);
      if (v23 != v19) {
        goto LABEL_31;
      }
    }
    if (!memcmp(v24, *(const void **)v20, v23))
    {
      if (*(void *)(a1 + 96) == *(void *)(v20 + 8)) {
        uint64_t v21 = v16;
      }
      if (v18) {
        uint64_t v25 = v18;
      }
      else {
        uint64_t v25 = *(void *)(v20 + 8);
      }
      if (!*(void *)(v20 - 8))
      {
        uint64_t v18 = v25;
        uint64_t v17 = *(void *)(v20 + 8);
      }
    }
LABEL_31:
    ++v16;
    v20 += 32;
  }
  while (a4 != v16);
  if (!v18) {
    goto LABEL_37;
  }
  if (v21 == a4)
  {
    long long v26 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      long long v26 = (void *)*v26;
    }
    tknPrintf("Error: %s : %llu : Expected file version in range [%llu,%llu]\n", v10, v26, *(void *)(a1 + 96), v18, v17);
    return 1;
  }
  uint64_t v32 = *(void *)(v34 + 32 * v21 + 8);
  if (v32)
  {
    uint64_t v33 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v33 = (void *)*v33;
    }
    tknPrintf("Error: %s : %llu : Deprecated in or around TextProc version %s. Expected file version in range [%llu,%llu]\n", v10, v33, *(void *)(a1 + 96), v32, v18, v17);
    return 1;
  }
  return 0;
}

uint64_t TInputStream::readHeader(TInputStream *this)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  uint64_t v2 = (std::string *)((char *)this + 72);
  MEMORY[0x1B3EA7B20]((char *)this + 72, "");
  *((void *)this + 12) = 1;
  if (*((char *)this + 63) < 0)
  {
    **((unsigned char **)this + 5) = 0;
    *((void *)this + 6) = 0;
  }
  else
  {
    *((unsigned char *)this + 4std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0;
    *((unsigned char *)this + 63) = 0;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  *((void *)this + 19) = (char *)this + 160;
  *((void *)this + 21) = 0;
  *((void *)this + 2std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = 0;
  std::istream::tellg();
  uint64_t v4 = v126;
  std::string __s1 = v140;
  long long v139 = xmmword_1B25607E0;
  char v141 = 1;
  TInputStream::getNextLine((uint64_t)this, (uint64_t)&__s1);
  if (*((void *)&v139 + 1) >= (unint64_t)v139)
  {
    if (v141)
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v139 + 1), (char *)&__str, 1uLL);
      --*((void *)&v139 + 1);
    }
    else if ((void)v139)
    {
      __s1[(void)v139 - 1] = 0;
    }
  }
  else
  {
    __s1[*((void *)&v139 + 1)] = 0;
  }
  int v5 = __s1;
  if (!strncmp(__s1, "TKNHEADER_", 0xAuLL))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1B25607E0;
    char v127 = 1;
    while (1)
    {
      if (*((void *)&v139 + 1) >= (unint64_t)v139)
      {
        if (v141)
        {
          LOBYTE(v133.__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v139 + 1), (char *)&v133, 1uLL);
          --*((void *)&v139 + 1);
        }
        else if ((void)v139)
        {
          __s1[(void)v139 - 1] = 0;
        }
      }
      else
      {
        __s1[*((void *)&v139 + 1)] = 0;
      }
      NextToken = getNextToken(__s1, (uint64_t)&__str, " ");
      if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
      {
        if (v127)
        {
          LOBYTE(v133.__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, (char *)&v133, 1uLL);
        }
        else if (__str.__r_.__value_.__l.__size_)
        {
          *(unsigned char *)(__str.__r_.__value_.__l.__size_ + __str.__r_.__value_.__r.__words[0] - 1) = 0;
        }
      }
      else
      {
        *(unsigned char *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__r.__words[2]) = 0;
      }
      int v7 = (void **)__str.__r_.__value_.__r.__words[0];
      if (!strcmp(__str.__r_.__value_.__l.__data_, "TKNHEADER_END")) {
        break;
      }
      if (!NextToken)
      {
        size_t v52 = (void *)((char *)this + 16);
        if (*((char *)this + 39) < 0) {
          size_t v52 = (void *)*v52;
        }
        uint64_t v53 = TBuffer<char>::c_str((uint64_t)&__s1);
        tknPrintf("Error: File '%s' : '%s' : Bad entry in file header\n", v54, v52, v53);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(&v133, (long long *)&__p);
        v133.__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
        if (v136 >= 0) {
          size_t v55 = (const char *)&v134;
        }
        else {
          size_t v55 = (const char *)v134;
        }
        conditionalAssert(v55, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 239);
        TException::~TException(&v133);
        if (SHIBYTE(v130) < 0) {
          operator delete(__p);
        }
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v133, "");
        TException::TException(exception, (long long *)&v133);
        void *exception = &unk_1F0A33FD8;
      }
      if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
      {
        if (v127)
        {
          LOBYTE(v133.__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, (char *)&v133, 1uLL);
        }
        else if (__str.__r_.__value_.__l.__size_)
        {
          *((unsigned char *)v7 + __str.__r_.__value_.__l.__size_ - 1) = 0;
        }
      }
      else
      {
        *((unsigned char *)v7 + __str.__r_.__value_.__r.__words[2]) = 0;
      }
      std::string::size_type v9 = __str.__r_.__value_.__r.__words[0];
      if (!strcmp(__str.__r_.__value_.__l.__data_, "TKNHEADER_FILETYPE"))
      {
        getNextToken(NextToken, (uint64_t)&__str, " ");
        if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
        {
          if (v127)
          {
            LOBYTE(v133.__vftable) = 0;
            TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, (char *)&v133, 1uLL);
          }
          else if (__str.__r_.__value_.__l.__size_)
          {
            *(unsigned char *)(__str.__r_.__value_.__l.__size_ + __str.__r_.__value_.__r.__words[0] - 1) = 0;
          }
        }
        else
        {
          *(unsigned char *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__r.__words[2]) = 0;
        }
        MEMORY[0x1B3EA7B20]((char *)this + 40, __str.__r_.__value_.__r.__words[0]);
      }
      else
      {
        if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
        {
          if (v127)
          {
            LOBYTE(v133.__vftable) = 0;
            TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, (char *)&v133, 1uLL);
          }
          else if (__str.__r_.__value_.__l.__size_)
          {
            *(unsigned char *)(__str.__r_.__value_.__l.__size_ + v9 - 1) = 0;
          }
        }
        else
        {
          *(unsigned char *)(v9 + __str.__r_.__value_.__r.__words[2]) = 0;
        }
        if (strcmp(__str.__r_.__value_.__l.__data_, "TKNHEADER_FILEVERSION"))
        {
          uint64_t v60 = (void *)((char *)this + 16);
          if (*((char *)this + 39) < 0) {
            uint64_t v60 = (void *)*v60;
          }
          uint64_t v61 = TBuffer<char>::c_str((uint64_t)&__str);
          tknPrintf("Error: File '%s' : '%s' : Bad entry in file header\n", v62, v60, v61);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v133, (long long *)&__p);
          v133.__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
          if (v136 >= 0) {
            int v63 = (const char *)&v134;
          }
          else {
            int v63 = (const char *)v134;
          }
          conditionalAssert(v63, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 255);
          TException::~TException(&v133);
          if (SHIBYTE(v130) < 0) {
            operator delete(__p);
          }
          long long v64 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v133, "");
          TException::TException(v64, (long long *)&v133);
          *long long v64 = &unk_1F0A33FD8;
        }
        *((void *)this + 12) = atol(NextToken);
      }
      if (!TInputStream::getNextLine((uint64_t)this, (uint64_t)&__s1))
      {
        size_t v11 = (void *)((char *)this + 16);
        if (*((char *)this + 39) < 0) {
          size_t v11 = (void *)*v11;
        }
        tknPrintf("Error: File '%s' : Missing TKNHEADER_END\n", v10, v11);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(&v133, (long long *)&__p);
        v133.__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
        if (v136 >= 0) {
          uint64_t v12 = (const char *)&v134;
        }
        else {
          uint64_t v12 = (const char *)v134;
        }
        conditionalAssert(v12, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 263);
        TException::~TException(&v133);
        if (SHIBYTE(v130) < 0) {
          operator delete(__p);
        }
        uint64_t v13 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v133, "");
        TException::TException(v13, (long long *)&v133);
        *uint64_t v13 = &unk_1F0A33FD8;
      }
    }
    if (!NextToken)
    {
      unint64_t v84 = (void *)((char *)this + 16);
      if (*((char *)this + 39) < 0) {
        unint64_t v84 = (void *)*v84;
      }
      tknPrintf("Error: '%s' : TKNHEADER_END does not take a parameter\n", v8, v84);
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      TException::TException(&v133, (long long *)&__p);
      v133.__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
      if (v136 >= 0) {
        unint64_t v85 = (const char *)&v134;
      }
      else {
        unint64_t v85 = (const char *)v134;
      }
      conditionalAssert(v85, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 228);
      TException::~TException(&v133);
      if (SHIBYTE(v130) < 0) {
        operator delete(__p);
      }
      unint64_t v86 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v133, "");
      TException::TException(v86, (long long *)&v133);
      *unint64_t v86 = &unk_1F0A33FD8;
    }
    if (*((char *)this + 63) < 0)
    {
      if (*((void *)this + 6))
      {
LABEL_64:
        if (v127 && v7 != v124 && v7)
        {
          unsigned int v14 = (std::exception_vtbl *)v7;
          goto LABEL_266;
        }
LABEL_267:
        uint64_t v3 = 1;
        goto LABEL_268;
      }
    }
    else if (*((unsigned char *)this + 63))
    {
      goto LABEL_64;
    }
    long long v15 = (void *)((char *)this + 16);
    if (*((char *)this + 39) < 0) {
      long long v15 = (void *)*v15;
    }
    tknPrintf("Error: File '%s' : Missing TKNHEADER_FILETYPE\n", v8, v15);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(&v133, (long long *)&__p);
    v133.__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
    if (v136 >= 0) {
      uint64_t v16 = (const char *)&v134;
    }
    else {
      uint64_t v16 = (const char *)v134;
    }
    conditionalAssert(v16, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 269);
    TException::~TException(&v133);
    if (SHIBYTE(v130) < 0) {
      operator delete(__p);
    }
    uint64_t v17 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v133, "");
    TException::TException(v17, (long long *)&v133);
    void *v17 = &unk_1F0A33FD8;
  }
  if (*((void *)&v139 + 1) >= (unint64_t)v139)
  {
    if (v141)
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v139 + 1), (char *)&__str, 1uLL);
      --*((void *)&v139 + 1);
    }
    else if ((void)v139)
    {
      v5[(void)v139 - 1] = 0;
    }
  }
  else
  {
    v5[*((void *)&v139 + 1)] = 0;
  }
  if (!strcmp(__s1, "HEADER_BEGIN"))
  {
    v133.__vftable = (std::exception_vtbl *)v135;
    long long v134 = xmmword_1B25607E0;
    char v18 = 1;
    char v137 = 1;
    std::string __p = v131;
    long long v130 = xmmword_1B25607E0;
    char v132 = 1;
    int v107 = *(_DWORD *)(*((void *)this + 22) + 64);
    memset(&v113, 0, sizeof(v113));
    while (1)
    {
      if (!TInputStream::getNextLine((uint64_t)this, (uint64_t)&__s1))
      {
        long long v57 = (void *)((char *)this + 16);
        if (*((char *)this + 39) < 0) {
          long long v57 = (void *)*v57;
        }
        tknPrintf("Error: File '%s' : Missing HEADER_END\n", v19, v57);
        std::string::basic_string[abi:ne180100]<0>(v110, "");
        TException::TException(&__str, (long long *)v110);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A33FD8;
        if (SHIBYTE(v124[0]) >= 0) {
          std::wstring::size_type size = &__str.__r_.__value_.__s.__data_[8];
        }
        else {
          std::wstring::size_type size = (const char *)__str.__r_.__value_.__l.__size_;
        }
        conditionalAssert(size, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 384);
        TException::~TException((std::exception *)&__str);
        if (v111 < 0) {
          operator delete(v110[0].__vftable);
        }
        std::string v59 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__str, "");
        TException::TException(v59, (long long *)&__str);
        void *v59 = &unk_1F0A33FD8;
      }
      if (*((void *)&v139 + 1) >= (unint64_t)v139)
      {
        if (v141)
        {
          LOBYTE(v110[0].__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v139 + 1), (char *)v110, 1uLL);
          --*((void *)&v139 + 1);
        }
        else if ((void)v139)
        {
          __s1[(void)v139 - 1] = 0;
        }
      }
      else
      {
        __s1[*((void *)&v139 + 1)] = 0;
      }
      uint64_t v20 = getNextToken(__s1, (uint64_t)&v133, " ");
      uint64_t v21 = getNextToken(v20, (uint64_t)&__p, " ");
      if (*((void *)&v134 + 1) >= (unint64_t)v134)
      {
        if (v137)
        {
          LOBYTE(v110[0].__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v110, 1uLL);
          --*((void *)&v134 + 1);
        }
        else if ((void)v134)
        {
          *((unsigned char *)v133.__vftable + v134 - 1) = 0;
        }
      }
      else
      {
        *((unsigned char *)&v133.~exception + *((void *)&v134 + 1)) = 0;
      }
      size_t v22 = v133.__vftable;
      if (!strcmp((const char *)v133.__vftable, "HEADER_END"))
      {
        if (v21)
        {
          uint64_t v87 = (void *)((char *)this + 16);
          if (*((char *)this + 39) < 0) {
            uint64_t v87 = (void *)*v87;
          }
          tknPrintf("Error: '%s' : HEADER_END does not take a parameter\n", v23, v87);
          std::string::basic_string[abi:ne180100]<0>(v110, "");
          TException::TException(&__str, (long long *)v110);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A33FD8;
          if (SHIBYTE(v124[0]) >= 0) {
            v88 = &__str.__r_.__value_.__s.__data_[8];
          }
          else {
            v88 = (const char *)__str.__r_.__value_.__l.__size_;
          }
          conditionalAssert(v88, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 297);
          TException::~TException((std::exception *)&__str);
          if (v111 < 0) {
            operator delete(v110[0].__vftable);
          }
          unint64_t v89 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          TException::TException(v89, (long long *)&__str);
          *unint64_t v89 = &unk_1F0A33FD8;
        }
        if (*((char *)this + 63) < 0) {
          uint64_t v43 = *((void *)this + 6);
        }
        else {
          uint64_t v43 = *((unsigned __int8 *)this + 63);
        }
        if (!v43)
        {
          uint64_t v90 = (void *)((char *)this + 16);
          if (*((char *)this + 39) < 0) {
            uint64_t v90 = (void *)*v90;
          }
          tknPrintf("Error: File '%s' : Missing FILE_TYPE\n", v23, v90);
          std::string::basic_string[abi:ne180100]<0>(v110, "");
          TException::TException(&__str, (long long *)v110);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A33FD8;
          if (SHIBYTE(v124[0]) >= 0) {
            uint64_t v91 = &__str.__r_.__value_.__s.__data_[8];
          }
          else {
            uint64_t v91 = (const char *)__str.__r_.__value_.__l.__size_;
          }
          conditionalAssert(v91, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 390);
          TException::~TException((std::exception *)&__str);
          if (v111 < 0) {
            operator delete(v110[0].__vftable);
          }
          unint64_t v92 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          TException::TException(v92, (long long *)&__str);
          *unint64_t v92 = &unk_1F0A33FD8;
        }
        if (*(_DWORD *)(*((void *)this + 22) + 64) != v107)
        {
          int v93 = (void *)((char *)this + 16);
          if (*((char *)this + 39) < 0) {
            int v93 = (void *)*v93;
          }
          tknPrintf("Error: File '%s' : File codepage does not match the voc codepage\n", v23, v93);
          std::string::basic_string[abi:ne180100]<0>(v110, "");
          TException::TException(&__str, (long long *)v110);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A340F0;
          if (SHIBYTE(v124[0]) >= 0) {
            long long v94 = &__str.__r_.__value_.__s.__data_[8];
          }
          else {
            long long v94 = (const char *)__str.__r_.__value_.__l.__size_;
          }
          conditionalAssert(v94, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 397);
          TException::~TException((std::exception *)&__str);
          if (v111 < 0) {
            operator delete(v110[0].__vftable);
          }
          long long v95 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          TException::TException(v95, (long long *)&__str);
          *long long v95 = &unk_1F0A340F0;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1B25607E0;
        char v128 = 1;
        if (v113.__end_ == v113.__begin_) {
          goto LABEL_257;
        }
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        do
        {
          TBuffer<wchar_t>::resize((uint64_t)&__str, 0);
          p_second = &v113.__begin_[v44].second;
          if (SHIBYTE(v113.__begin_[v44].second.__r_.__value_.__r.__words[2]) < 0) {
            p_second = (std::string *)p_second->__r_.__value_.__r.__words[0];
          }
          TLocaleInfo::multiByteToUnicode(*((void *)this + 22), (unsigned __int8 *)p_second, (uint64_t)&__str);
          long long v47 = &v113.__begin_[v44];
          if (SHIBYTE(v113.__begin_[v44].first.__r_.__value_.__r.__words[2]) < 0) {
            long long v47 = (std::pair<std::string, std::string> *)v47->first.__r_.__value_.__r.__words[0];
          }
          if (TInputStream::isParameter(this, (char *)v47))
          {
            unsigned __int8 v75 = (void *)((char *)this + 16);
            if (*((char *)this + 39) < 0) {
              unsigned __int8 v75 = (void *)*v75;
            }
            int v76 = &v113.__begin_[v44];
            if (SHIBYTE(v113.__begin_[v44].first.__r_.__value_.__r.__words[2]) < 0) {
              int v76 = (std::pair<std::string, std::string> *)v76->first.__r_.__value_.__r.__words[0];
            }
            tknPrintf("Error: %s : Duplicate setting for %s parameter\n", v48, v75, v76);
            std::string::basic_string[abi:ne180100]<0>(v108, "");
            TException::TException(v110, (long long *)v108);
            v110[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
            if (v112 >= 0) {
              uint64_t v77 = (std::exception_vtbl *)&v110[1];
            }
            else {
              uint64_t v77 = v110[1].__vftable;
            }
            conditionalAssert((const char *)v77, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 414);
            TException::~TException(v110);
            if (v109 < 0) {
              operator delete(v108[0]);
            }
            BOOL v78 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v110, "");
            TException::TException(v78, (long long *)v110);
            *BOOL v78 = &unk_1F0A33B90;
          }
          if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
          {
            if (v128)
            {
              LODWORD(v110[0].__vftable) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2], (int *)v110, 1uLL);
              std::string::size_type v49 = __str.__r_.__value_.__r.__words[0];
              --__str.__r_.__value_.__r.__words[2];
            }
            else
            {
              std::string::size_type v49 = __str.__r_.__value_.__r.__words[0];
              if (__str.__r_.__value_.__l.__size_) {
                *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * __str.__r_.__value_.__l.__size_ - 4) = 0;
              }
            }
          }
          else
          {
            std::string::size_type v49 = __str.__r_.__value_.__r.__words[0];
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * __str.__r_.__value_.__r.__words[2]) = 0;
          }
          v110[0].__vftable = (std::exception_vtbl *)&v113.__begin_[v44];
          uint64_t v50 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 19, (const void **)&v113.__begin_[v44].first.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)v110);
          MEMORY[0x1B3EA7C30](v50 + 7, v49);
          ++v45;
          ++v44;
        }
        while (v45 < 0xAAAAAAAAAAAAAAABLL * (((char *)v113.__end_ - (char *)v113.__begin_) >> 4));
        if (v128)
        {
LABEL_257:
          if ((void **)__str.__r_.__value_.__l.__data_ != v124 && __str.__r_.__value_.__r.__words[0]) {
            MEMORY[0x1B3EA8630]();
          }
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (v132 && __p != v131 && __p) {
          MEMORY[0x1B3EA8630]();
        }
        if (v137)
        {
          unsigned int v14 = v133.__vftable;
          if (v133.__vftable != (std::exception_vtbl *)v135)
          {
            if (v133.__vftable) {
LABEL_266:
            }
              MEMORY[0x1B3EA8630](v14, 0x1000C8077774924);
          }
        }
        goto LABEL_267;
      }
      if (!v21)
      {
        long long v65 = (void *)((char *)this + 16);
        if (*((char *)this + 39) < 0) {
          long long v65 = (void *)*v65;
        }
        uint64_t v66 = TBuffer<char>::c_str((uint64_t)&__s1);
        tknPrintf("Error: File '%s' : %s : Syntax error in header\n", v67, v65, v66);
        std::string::basic_string[abi:ne180100]<0>(v110, "");
        TException::TException(&__str, (long long *)v110);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A33FD8;
        if (SHIBYTE(v124[0]) >= 0) {
          uint64_t v68 = &__str.__r_.__value_.__s.__data_[8];
        }
        else {
          uint64_t v68 = (const char *)__str.__r_.__value_.__l.__size_;
        }
        conditionalAssert(v68, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 308);
        TException::~TException((std::exception *)&__str);
        if (v111 < 0) {
          operator delete(v110[0].__vftable);
        }
        uint64_t v69 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__str, "");
        TException::TException(v69, (long long *)&__str);
        *uint64_t v69 = &unk_1F0A33FD8;
      }
      if (*((void *)&v134 + 1) >= (unint64_t)v134)
      {
        if (v137)
        {
          LOBYTE(v110[0].__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v110, 1uLL);
          --*((void *)&v134 + 1);
        }
        else if ((void)v134)
        {
          *((unsigned char *)v22 + v134 - 1) = 0;
        }
      }
      else
      {
        *((unsigned char *)&v22->~exception + *((void *)&v134 + 1)) = 0;
      }
      long long v24 = v133.__vftable;
      if (!strcmp((const char *)v133.__vftable, "VERSION")) {
        break;
      }
      if (*((void *)&v134 + 1) >= (unint64_t)v134)
      {
        if (v137)
        {
          LOBYTE(v110[0].__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v110, 1uLL);
          --*((void *)&v134 + 1);
        }
        else if ((void)v134)
        {
          *((unsigned char *)v24 + v134 - 1) = 0;
        }
      }
      else
      {
        *((unsigned char *)&v24->~exception + *((void *)&v134 + 1)) = 0;
      }
      long long v26 = v133.__vftable;
      if (!strcmp((const char *)v133.__vftable, "FILE_TYPE"))
      {
        if (*((void *)&v130 + 1) >= (unint64_t)v130)
        {
          if (v132)
          {
            LOBYTE(v110[0].__vftable) = 0;
            TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
            --*((void *)&v130 + 1);
          }
          else if ((void)v130)
          {
            *((char *)__p + v130 - 1) = 0;
          }
        }
        else
        {
          *((unsigned char *)__p + *((void *)&v130 + 1)) = 0;
        }
        MEMORY[0x1B3EA7B20]((char *)this + 40, __p);
        goto LABEL_196;
      }
      if (*((void *)&v134 + 1) >= (unint64_t)v134)
      {
        if (v137)
        {
          LOBYTE(v110[0].__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v110, 1uLL);
          --*((void *)&v134 + 1);
        }
        else if ((void)v134)
        {
          *((unsigned char *)v26 + v134 - 1) = 0;
        }
      }
      else
      {
        *((unsigned char *)&v26->~exception + *((void *)&v134 + 1)) = 0;
      }
      long long v27 = v133.__vftable;
      if (!strcmp((const char *)v133.__vftable, "FILE_VERSION"))
      {
        if (*((void *)&v130 + 1) >= (unint64_t)v130)
        {
          if (v132)
          {
            LOBYTE(v110[0].__vftable) = 0;
            TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
            --*((void *)&v130 + 1);
          }
          else if ((void)v130)
          {
            *((char *)__p + v130 - 1) = 0;
          }
        }
        else
        {
          *((unsigned char *)__p + *((void *)&v130 + 1)) = 0;
        }
        char v31 = __p;
        uint64_t v32 = strrchr((char *)__p, 46);
        if (v32)
        {
          uint64_t v33 = v32;
          if (*((void *)&v130 + 1) >= (unint64_t)v130)
          {
            if (v132)
            {
              LOBYTE(v110[0].__vftable) = 0;
              TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
              --*((void *)&v130 + 1);
            }
            else if ((void)v130)
            {
              v31[(void)v130 - 1] = 0;
            }
          }
          else
          {
            v31[*((void *)&v130 + 1)] = 0;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, (char *)__p);
          if (*((void *)&v130 + 1) >= (unint64_t)v130)
          {
            if (v132)
            {
              LOBYTE(v110[0].__vftable) = 0;
              TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
              --*((void *)&v130 + 1);
            }
            else if ((void)v130)
            {
              *((char *)__p + v130 - 1) = 0;
            }
          }
          else
          {
            *((unsigned char *)__p + *((void *)&v130 + 1)) = 0;
          }
          std::string::assign(v2, &__str, 0, v33 - (unsigned char *)__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v34 = v33 + 1;
        }
        else
        {
          if (*((void *)&v130 + 1) >= (unint64_t)v130)
          {
            if (v132)
            {
              LOBYTE(v110[0].__vftable) = 0;
              TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
              --*((void *)&v130 + 1);
            }
            else if ((void)v130)
            {
              v31[(void)v130 - 1] = 0;
            }
          }
          else
          {
            v31[*((void *)&v130 + 1)] = 0;
          }
          uint64_t v34 = (const char *)__p;
        }
        *((void *)this + 12) = atol(v34);
        goto LABEL_196;
      }
      if (*((void *)&v134 + 1) >= (unint64_t)v134)
      {
        if (v137)
        {
          LOBYTE(v110[0].__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v110, 1uLL);
          --*((void *)&v134 + 1);
        }
        else if ((void)v134)
        {
          *((unsigned char *)v27 + v134 - 1) = 0;
        }
      }
      else
      {
        *((unsigned char *)&v27->~exception + *((void *)&v134 + 1)) = 0;
      }
      BOOL v28 = v133.__vftable;
      if (!strcmp((const char *)v133.__vftable, "PARAMETER"))
      {
        uint64_t v29 = getNextToken(v20 + 1, (uint64_t)&v133, "=");
        if (!v29)
        {
          std::string v70 = (void *)((char *)this + 16);
          if (*((char *)this + 39) < 0) {
            std::string v70 = (void *)*v70;
          }
          uint64_t v71 = TBuffer<char>::c_str((uint64_t)&__s1);
          tknPrintf("Error: File '%s' : %s : PARAMETER must contain 'name=value'\n", v72, v70, v71);
          std::string::basic_string[abi:ne180100]<0>(v110, "");
          TException::TException(&__str, (long long *)v110);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A33FD8;
          if (SHIBYTE(v124[0]) >= 0) {
            unsigned __int8 v73 = &__str.__r_.__value_.__s.__data_[8];
          }
          else {
            unsigned __int8 v73 = (const char *)__str.__r_.__value_.__l.__size_;
          }
          conditionalAssert(v73, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 353);
          TException::~TException((std::exception *)&__str);
          if (v111 < 0) {
            operator delete(v110[0].__vftable);
          }
          char v74 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          TException::TException(v74, (long long *)&__str);
          void *v74 = &unk_1F0A33FD8;
        }
        if (*((void *)&v134 + 1) >= (unint64_t)v134)
        {
          if (v137)
          {
            LOBYTE(v108[0]) = 0;
            TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v108, 1uLL);
            --*((void *)&v134 + 1);
          }
          else if ((void)v134)
          {
            *((unsigned char *)v133.__vftable + v134 - 1) = 0;
          }
        }
        else
        {
          *((unsigned char *)&v133.~exception + *((void *)&v134 + 1)) = 0;
        }
        v110[0] = v133;
        v110[1].__vftable = (std::exception_vtbl *)(v29 + 1);
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(&__str, (char **)v110);
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v113, (long long *)&__str);
        if (v125 < 0) {
          operator delete(v124[0]);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        char v18 = 0;
      }
      else
      {
        if (*((void *)&v134 + 1) >= (unint64_t)v134)
        {
          if (v137)
          {
            LOBYTE(v110[0].__vftable) = 0;
            TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v110, 1uLL);
            --*((void *)&v134 + 1);
          }
          else if ((void)v134)
          {
            *((unsigned char *)v28 + v134 - 1) = 0;
          }
        }
        else
        {
          *((unsigned char *)&v28->~exception + *((void *)&v134 + 1)) = 0;
        }
        if (!strcmp((const char *)v133.__vftable, "CODEPAGE"))
        {
          if (*((void *)&v130 + 1) >= (unint64_t)v130)
          {
            if (v132)
            {
              LOBYTE(v110[0].__vftable) = 0;
              TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
              --*((void *)&v130 + 1);
            }
            else if ((void)v130)
            {
              *((char *)__p + v130 - 1) = 0;
            }
          }
          else
          {
            *((unsigned char *)__p + *((void *)&v130 + 1)) = 0;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, (char *)__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__l.__size_ != 4)
            {
              if (__str.__r_.__value_.__l.__size_ == 5)
              {
                if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 759583829
                  || *(unsigned char *)(__str.__r_.__value_.__r.__words[0] + 4) != 56)
                {
                  goto LABEL_380;
                }
                int v42 = 2;
              }
              else
              {
                if (__str.__r_.__value_.__l.__size_ != 7) {
                  goto LABEL_380;
                }
                if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 1769234764
                  || *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 3) != 1227714153)
                {
                  goto LABEL_380;
                }
LABEL_233:
                int v42 = 1;
              }
              int v107 = v42;
              operator delete(__str.__r_.__value_.__l.__data_);
              goto LABEL_196;
            }
            if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 842347057) {
              goto LABEL_380;
            }
            goto LABEL_233;
          }
          if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 4)
          {
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 5)
            {
              if (LODWORD(__str.__r_.__value_.__l.__data_) != 759583829 || __str.__r_.__value_.__s.__data_[4] != 56)
              {
LABEL_379:
                p_str = &__str;
LABEL_380:
                tknPrintf("Error: '%s' : Invalid codepage.\n", v35, p_str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                long long v102 = (void *)((char *)this + 16);
                if (*((char *)this + 39) < 0) {
                  long long v102 = (void *)*v102;
                }
                uint64_t v103 = TBuffer<char>::c_str((uint64_t)&__p);
                tknPrintf("Error: File '%s' : '%s' : Invalid codepage\n", v104, v102, v103);
                std::string::basic_string[abi:ne180100]<0>(v110, "");
                TException::TException(&__str, (long long *)v110);
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A340F0;
                if (SHIBYTE(v124[0]) >= 0) {
                  long long v105 = &__str.__r_.__value_.__s.__data_[8];
                }
                else {
                  long long v105 = (const char *)__str.__r_.__value_.__l.__size_;
                }
                conditionalAssert(v105, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 367);
                TException::~TException((std::exception *)&__str);
                if (v111 < 0) {
                  operator delete(v110[0].__vftable);
                }
                long long v106 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(&__str, "");
                TException::TException(v106, (long long *)&__str);
                *long long v106 = &unk_1F0A340F0;
              }
              int v40 = 2;
            }
            else
            {
              if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 7) {
                goto LABEL_379;
              }
              if (LODWORD(__str.__r_.__value_.__l.__data_) != 1769234764
                || *(_DWORD *)((char *)__str.__r_.__value_.__r.__words + 3) != 1227714153)
              {
                goto LABEL_379;
              }
LABEL_224:
              int v40 = 1;
            }
            int v107 = v40;
            goto LABEL_196;
          }
          if (LODWORD(__str.__r_.__value_.__l.__data_) != 842347057) {
            goto LABEL_379;
          }
          goto LABEL_224;
        }
LABEL_196:
        char v18 = 0;
        if (getNextToken(v21, (uint64_t)&__p, " "))
        {
          uint64_t v79 = (void *)((char *)this + 16);
          if (*((char *)this + 39) < 0) {
            uint64_t v79 = (void *)*v79;
          }
          uint64_t v80 = TBuffer<char>::c_str((uint64_t)&__s1);
          tknPrintf("Error: File '%s' : %s : Syntax error in header\n", v81, v79, v80);
          std::string::basic_string[abi:ne180100]<0>(v110, "");
          TException::TException(&__str, (long long *)v110);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A33FD8;
          if (SHIBYTE(v124[0]) >= 0) {
            long long v82 = &__str.__r_.__value_.__s.__data_[8];
          }
          else {
            long long v82 = (const char *)__str.__r_.__value_.__l.__size_;
          }
          conditionalAssert(v82, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 375);
          TException::~TException((std::exception *)&__str);
          if (v111 < 0) {
            operator delete(v110[0].__vftable);
          }
          long long v83 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          TException::TException(v83, (long long *)&__str);
          *long long v83 = &unk_1F0A33FD8;
        }
      }
    }
    if ((v18 & 1) == 0)
    {
      long long v96 = (void *)((char *)this + 16);
      if (*((char *)this + 39) < 0) {
        long long v96 = (void *)*v96;
      }
      tknPrintf("Error: '%s' : VERSION must be the first line in header\n", v25, v96);
      std::string::basic_string[abi:ne180100]<0>(v110, "");
      TException::TException(&__str, (long long *)v110);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A33FD8;
      if (SHIBYTE(v124[0]) >= 0) {
        long long v97 = &__str.__r_.__value_.__s.__data_[8];
      }
      else {
        long long v97 = (const char *)__str.__r_.__value_.__l.__size_;
      }
      conditionalAssert(v97, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 317);
      TException::~TException((std::exception *)&__str);
      if (v111 < 0) {
        operator delete(v110[0].__vftable);
      }
      long long v98 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      TException::TException(v98, (long long *)&__str);
      *long long v98 = &unk_1F0A33FD8;
    }
    if (*((void *)&v130 + 1) >= (unint64_t)v130)
    {
      if (v132)
      {
        LOBYTE(v110[0].__vftable) = 0;
        TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
        --*((void *)&v130 + 1);
      }
      else if ((void)v130)
      {
        *((char *)__p + v130 - 1) = 0;
      }
    }
    else
    {
      *((unsigned char *)__p + *((void *)&v130 + 1)) = 0;
    }
    if (atol((const char *)__p) != 1)
    {
      long long v99 = (void *)((char *)this + 16);
      if (*((char *)this + 39) < 0) {
        long long v99 = (void *)*v99;
      }
      tknPrintf("Error: '%s' : VERSION must be 1\n", v30, v99);
      std::string::basic_string[abi:ne180100]<0>(v110, "");
      TException::TException(&__str, (long long *)v110);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A340F0;
      if (SHIBYTE(v124[0]) >= 0) {
        long long v100 = &__str.__r_.__value_.__s.__data_[8];
      }
      else {
        long long v100 = (const char *)__str.__r_.__value_.__l.__size_;
      }
      conditionalAssert(v100, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 325);
      TException::~TException((std::exception *)&__str);
      if (v111 < 0) {
        operator delete(v110[0].__vftable);
      }
      long long v101 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      TException::TException(v101, (long long *)&__str);
      void *v101 = &unk_1F0A340F0;
    }
    goto LABEL_196;
  }
  long long v114 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  uint64_t v122 = v4;
  std::istream::seekg();
  uint64_t v3 = 0;
LABEL_268:
  if (v141 && __s1 != v140 && __s1) {
    MEMORY[0x1B3EA8630]();
  }
  return v3;
}

void sub_1B1D62B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,std::exception a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0)
  {
    operator delete(__p);
    if ((v52 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v52)
  {
LABEL_6:
    std::string __p = &a26;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (LOBYTE(STACK[0x660]))
    {
      if (STACK[0x548] != a13 && STACK[0x548] != 0) {
        MEMORY[0x1B3EA8630]();
      }
    }
    if (LOBYTE(STACK[0x780]))
    {
      unint64_t v55 = STACK[0x668];
      if (STACK[0x668] != a14)
      {
        if (v55) {
          MEMORY[0x1B3EA8630](v55, 0x1000C8077774924);
        }
      }
    }
    if (LOBYTE(STACK[0x8A0]))
    {
      unint64_t v56 = STACK[0x788];
      if (STACK[0x788] != a16)
      {
        if (v56) {
          MEMORY[0x1B3EA8630](v56, 0x1000C8077774924);
        }
      }
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v51);
  goto LABEL_6;
}

BOOL TInputStream::getNextLine(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (const char **)(a1 + 104);
  uint64_t v4 = (std::locale::id *)MEMORY[0x1E4FBA258];
  uint64_t v5 = MEMORY[0x1E4F14390];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)(*(void *)a1 + *(void *)(**(void **)a1 - 24)));
    int v6 = std::locale::use_facet(&v23, v4);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v23);
    int v7 = (void *)std::istream::getline();
    int v8 = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5;
    if (v8) {
      return v8 == 0;
    }
    ++*(void *)(a1 + 64);
    if (*(char *)(a1 + 127) < 0)
    {
      if (*(void *)(a1 + 112))
      {
        std::string::size_type v9 = *v3;
LABEL_8:
        uint64_t v10 = strstr(__s1, v9);
        if (v10) {
          *uint64_t v10 = 0;
        }
      }
    }
    else
    {
      std::string::size_type v9 = (const char *)v3;
      if (*(unsigned char *)(a1 + 127)) {
        goto LABEL_8;
      }
    }
    unsigned int v11 = __s1[0];
    if (__s1[0])
    {
      uint64_t v12 = __s1;
      do
      {
        if ((v11 & 0x80) != 0) {
          int v13 = __maskrune(v11, 0x4000uLL);
        }
        else {
          int v13 = *(_DWORD *)(v5 + 4 * v11 + 60) & 0x4000;
        }
        if (!v13) {
          break;
        }
        unsigned int v14 = *++v12;
        unsigned int v11 = v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v12 = __s1;
    }
    long long v15 = &__s1[strlen(__s1)];
    unint64_t v16 = v15 - v12;
    do
    {
      uint64_t v17 = v15;
      unint64_t v18 = v16;
      if (v15 <= v12) {
        break;
      }
      --v15;
      uint64_t v19 = *(v17 - 1);
      int v20 = *(v17 - 1) < 0 ? __maskrune(v19, 0x4000uLL) : *(_DWORD *)(v5 + 4 * v19 + 60) & 0x4000;
      unint64_t v16 = v18 - 1;
    }
    while (v20);
    if (v17 != v12)
    {
      TBuffer<char>::resize(a2, 0);
      TBuffer<char>::insert(a2, 0, v12, v18);
      return v8 == 0;
    }
  }
}

{
  const std::locale::facet *v3;
  void *v4;
  int v5;
  __int32 *v6;
  const __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  unint64_t v10;
  int v11;
  unint64_t v15;
  int v16;
  __int32 *v19;
  const __int32 **v22;
  __int32 *__s1;
  long long v24;
  unsigned char v25[1024];
  char v26;
  std::locale v27;
  unsigned __int8 v28[2048];
  uint64_t v29;

  uint64_t v29 = *MEMORY[0x1E4F143B8];
  size_t v22 = (const __int32 **)(a1 + 128);
  std::string __s1 = (__int32 *)v25;
  long long v24 = xmmword_1B25607E0;
  long long v26 = 1;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)(*(void *)a1 + *(void *)(**(void **)a1 - 24)));
    uint64_t v3 = std::locale::use_facet(&v27, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(&v27);
    uint64_t v4 = (void *)std::istream::getline();
    uint64_t v5 = *(_DWORD *)((unsigned char *)v4 + *(void *)(*v4 - 24) + 32) & 5;
    if (v5) {
      goto LABEL_78;
    }
    ++*(void *)(a1 + 64);
    TBuffer<wchar_t>::resize((uint64_t)&__s1, 0);
    TLocaleInfo::multiByteToUnicode(*(void *)(a1 + 176), v28, (uint64_t)&__s1);
    if (*(char *)(a1 + 151) < 0)
    {
      if (*(void *)(a1 + 136))
      {
LABEL_7:
        if (*((void *)&v24 + 1) >= (unint64_t)v24)
        {
          if (v26)
          {
            LODWORD(v27.__locale_) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v24 + 1), (int *)&v27, 1uLL);
            int v6 = __s1;
            --*((void *)&v24 + 1);
          }
          else
          {
            int v6 = __s1;
            if ((void)v24) {
              __s1[(void)v24 - 1] = 0;
            }
          }
        }
        else
        {
          int v6 = __s1;
          __s1[*((void *)&v24 + 1)] = 0;
        }
        int v7 = (const __int32 *)v22;
        if (*(char *)(a1 + 151) < 0) {
          int v7 = *v22;
        }
        int v8 = wcsstr(v6, v7);
        if (v8)
        {
          if (*((void *)&v24 + 1) >= (unint64_t)v24)
          {
            if (v26)
            {
              LODWORD(v27.__locale_) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v24 + 1), (int *)&v27, 1uLL);
              std::string::size_type v9 = __s1;
              --*((void *)&v24 + 1);
            }
            else
            {
              std::string::size_type v9 = __s1;
              if ((void)v24) {
                __s1[(void)v24 - 1] = 0;
              }
            }
          }
          else
          {
            std::string::size_type v9 = __s1;
            __s1[*((void *)&v24 + 1)] = 0;
          }
          TBuffer<wchar_t>::resize((uint64_t)&__s1, v8 - v9);
        }
      }
    }
    else if (*(unsigned char *)(a1 + 151))
    {
      goto LABEL_7;
    }
    if (*((void *)&v24 + 1))
    {
      uint64_t v10 = 0;
      while (1)
      {
        unsigned int v11 = __s1[v10];
        {
          operator new();
        }
        if (v11 <= 159)
        {
          if (v11 > 0x20 || ((1 << v11) & 0x100002600) == 0) {
            goto LABEL_48;
          }
          goto LABEL_44;
        }
        if (v11 >= 12288) {
          break;
        }
        if (v11 != 160 && v11 != 8203) {
          goto LABEL_48;
        }
LABEL_44:
        ++v10;
        long long v15 = *((void *)&v24 + 1);
        if (v10 >= *((void *)&v24 + 1)) {
          goto LABEL_49;
        }
      }
      if (v11 == 12288 || v11 == 65279) {
        goto LABEL_44;
      }
LABEL_48:
      long long v15 = *((void *)&v24 + 1);
LABEL_49:
      if (v15 > v10)
      {
        do
        {
          unint64_t v16 = __s1[v15 - 1];
          {
            operator new();
          }
          if (v16 > 159)
          {
            if (v16 >= 12288)
            {
              if (v16 != 65279 && v16 != 12288) {
                goto LABEL_70;
              }
            }
            else if (v16 != 160 && v16 != 8203)
            {
              goto LABEL_70;
            }
          }
          else if (v16 > 0x20 || ((1 << v16) & 0x100002600) == 0)
          {
            goto LABEL_70;
          }
          --v15;
        }
        while (v15 > v10);
        long long v15 = v10;
      }
LABEL_70:
      if (v15 != v10) {
        break;
      }
    }
  }
  if (*((void *)&v24 + 1) >= (unint64_t)v24)
  {
    if (v26)
    {
      LODWORD(v27.__locale_) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v24 + 1), (int *)&v27, 1uLL);
      uint64_t v19 = __s1;
      --*((void *)&v24 + 1);
    }
    else
    {
      uint64_t v19 = __s1;
      if ((void)v24) {
        __s1[(void)v24 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v19 = __s1;
    __s1[*((void *)&v24 + 1)] = 0;
  }
  TBuffer<wchar_t>::resize(a2, 0);
  TBuffer<wchar_t>::insert(a2, 0, &v19[v10], v15 - v10);
LABEL_78:
  if (v26 && __s1 != (__int32 *)v25 && __s1) {
    MEMORY[0x1B3EA8630]();
  }
  return v5 == 0;
}

void sub_1B1D63144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t TBuffer<char>::c_str(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= v3)
  {
    if (*(unsigned char *)(a1 + 280))
    {
      char v5 = 0;
      TBuffer<char>::insert(a1, v2, &v5, 1uLL);
      --*(void *)(a1 + 16);
    }
    else if (v3)
    {
      *(unsigned char *)(v3 + *(void *)a1 - 1) = 0;
    }
  }
  else
  {
    *(unsigned char *)(*(void *)a1 + v2) = 0;
  }
  return *(void *)a1;
}

BOOL TInputStream::isParameter(TInputStream *this, char *a2)
{
  unint64_t v3 = (char *)this + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v4 = (TInputStream *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v3, (const void **)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return (TInputStream *)((char *)this + 160) != v4;
}

void sub_1B1D63240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1D63704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (LOBYTE(STACK[0x440]))
  {
    if (a14 != a11 && a14 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TInputStream::getStringParameter(uint64_t a1, char *a2, uint64_t a3, int *a4)
{
  uint64_t v7 = a1 + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v7, (const void **)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 160 != v8)
  {
    a4 = (int *)(v8 + 56);
    if (*(char *)(v8 + 79) < 0) {
      a4 = *(int **)a4;
    }
  }
  return TBuffer<wchar_t>::assign(a3, a4);
}

void sub_1B1D6382C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TBuffer<char>::resize(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 280) && *(void *)(a1 + 8) < a2)
  {
    *(void *)(a1 + 8) = a2 + 1;
    operator new[]();
  }
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 < a2)
  {
    unint64_t v5 = a2;
    if (*(unsigned char *)(a1 + 280)
      || ((unint64_t v6 = *(void *)(a1 + 8), v6 >= a2) ? (v5 = a2) : (v5 = *(void *)(a1 + 8)),
          v4 < v6 ? (BOOL v7 = v5 == v4) : (BOOL v7 = 1),
          !v7))
    {
      bzero((void *)(*(void *)a1 + v4), v5 - v4);
    }
  }
  *(void *)(a1 + 16) = a2;
}

void TInputModel::TInputModel(TInputModel *this, const TDataManager *a2, const TDataManager *a3, char a4, const char *a5)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  int IntVar = TInputModel::getIntVar((TDataManager **)this, "Version", 1);
  *((void *)this + 2) = IntVar;
  if ((IntVar - 3) <= 0xFFFFFFFD)
  {
    tknPrintf("Error: %llu : Expected %s in range [%llu,%llu]\n", v8, IntVar, "Version", 1, 2);
    std::string::basic_string[abi:ne180100]<0>(&__s1, "Unsupported version");
    TException::TException(v47, &__s1);
    v47[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
    if (v48 >= 0) {
      int v20 = (std::exception_vtbl *)&v47[1];
    }
    else {
      int v20 = v47[1].__vftable;
    }
    conditionalAssert((const char *)v20, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 609);
    TException::~TException(v47);
    if (SHIBYTE(v46) < 0) {
      operator delete((void *)__s1);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "Unsupported version");
    TException::TException(exception, (long long *)v47);
    void *exception = &unk_1F0A33B90;
  }
  if (IntVar == 2)
  {
    uint64_t v10 = *((void *)this + 1);
    if (v10)
    {
      if (!(*(uint64_t (**)(uint64_t, const char *, void, void))(*(void *)v10 + 40))(v10, "Version", 0, 0))
      {
        tknPrintf("Error: bad model. Couldn't locate %s in static component.\n", v11, "Version");
        std::string::basic_string[abi:ne180100]<0>(&__s1, "");
        TException::TException(v47, &__s1);
        v47[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
        if (v48 >= 0) {
          BOOL v28 = (std::exception_vtbl *)&v47[1];
        }
        else {
          BOOL v28 = v47[1].__vftable;
        }
        conditionalAssert((const char *)v28, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 683);
        TException::~TException(v47);
        if (SHIBYTE(v46) < 0) {
          operator delete((void *)__s1);
        }
        uint64_t v29 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v47, "");
        TException::TException(v29, (long long *)v47);
        *uint64_t v29 = &unk_1F0A33B90;
      }
      if ((TDataManager::getBoolVar(*((TDataManager **)this + 1), "IsStaticComponent", 0) & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__s1, "Bad static data spec");
        TException::TException(v47, &__s1);
        v47[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
        if (v48 >= 0) {
          uint64_t v30 = (std::exception_vtbl *)&v47[1];
        }
        else {
          uint64_t v30 = v47[1].__vftable;
        }
        conditionalAssert((const char *)v30, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 689);
        TException::~TException(v47);
        if (SHIBYTE(v46) < 0) {
          operator delete((void *)__s1);
        }
        char v31 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v47, "Bad static data spec");
        TException::TException(v31, (long long *)v47);
        *char v31 = &unk_1F0A33B90;
      }
    }
    if (*(void *)this)
    {
      if (!(*(uint64_t (**)(void, const char *, void, void))(**(void **)this + 40))(*(void *)this, "Version", 0, 0))
      {
        tknPrintf("Error: bad model. Couldn't locate %s in dynamic component.\n", v12, "Version");
        std::string::basic_string[abi:ne180100]<0>(&__s1, "");
        TException::TException(v47, &__s1);
        v47[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
        if (v48 >= 0) {
          uint64_t v32 = (std::exception_vtbl *)&v47[1];
        }
        else {
          uint64_t v32 = v47[1].__vftable;
        }
        conditionalAssert((const char *)v32, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 699);
        TException::~TException(v47);
        if (SHIBYTE(v46) < 0) {
          operator delete((void *)__s1);
        }
        uint64_t v33 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v47, "");
        TException::TException(v33, (long long *)v47);
        void *v33 = &unk_1F0A33B90;
      }
      if (TDataManager::getBoolVar(*(TDataManager **)this, "IsStaticComponent", 0))
      {
        std::string::basic_string[abi:ne180100]<0>(&__s1, "Bad dynamic data spec");
        TException::TException(v47, &__s1);
        v47[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
        if (v48 >= 0) {
          uint64_t v34 = (std::exception_vtbl *)&v47[1];
        }
        else {
          uint64_t v34 = v47[1].__vftable;
        }
        conditionalAssert((const char *)v34, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 705);
        TException::~TException(v47);
        if (SHIBYTE(v46) < 0) {
          operator delete((void *)__s1);
        }
        uint64_t v35 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v47, "Bad dynamic data spec");
        TException::TException(v35, (long long *)v47);
        void *v35 = &unk_1F0A33B90;
      }
      if (*(void *)this)
      {
        int v13 = (TDataManager *)*((void *)this + 1);
        if (v13)
        {
          int v14 = TDataManager::getIntVar(v13, "Version", 1);
          if (v14 != TDataManager::getIntVar(*(TDataManager **)this, "Version", 1))
          {
            tknPrintf("Error: %s : Unmatched dynamic and static data specs\n", v15, "Version");
            std::string::basic_string[abi:ne180100]<0>(&__s1, "");
            TException::TException(v47, &__s1);
            v47[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
            if (v48 >= 0) {
              int v40 = (std::exception_vtbl *)&v47[1];
            }
            else {
              int v40 = v47[1].__vftable;
            }
            conditionalAssert((const char *)v40, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 715);
            TException::~TException(v47);
            if (SHIBYTE(v46) < 0) {
              operator delete((void *)__s1);
            }
            uint64_t v41 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v47, "");
            TException::TException(v41, (long long *)v47);
            *uint64_t v41 = &unk_1F0A33B90;
          }
          long long __s1 = 0uLL;
          uint64_t v46 = 0;
          TDataManager::getStringVar(*(void *)this);
          std::string __p = 0;
          uint64_t v43 = 0;
          uint64_t v44 = 0;
          TDataManager::getStringVar(*((void *)this + 1));
        }
      }
    }
    if (g_bCheckVocCompatibility)
    {
      long long __s1 = 0uLL;
      TInputModel::getStringVar((uint64_t *)this, (uint64_t)"VocVersionID");
    }
  }
  else if (IntVar == 1)
  {
    if (!*(void *)this)
    {
      tknPrintf("Error: Bad model. %s is 1 but there is not dynamic component.\n", v8, "Version");
      std::string::basic_string[abi:ne180100]<0>(&__s1, "");
      TException::TException(v47, &__s1);
      v47[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
      if (v48 >= 0) {
        size_t v22 = (std::exception_vtbl *)&v47[1];
      }
      else {
        size_t v22 = v47[1].__vftable;
      }
      conditionalAssert((const char *)v22, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 617);
      TException::~TException(v47);
      if (SHIBYTE(v46) < 0) {
        operator delete((void *)__s1);
      }
      std::locale v23 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v47, "");
      TException::TException(v23, (long long *)v47);
      *std::locale v23 = &unk_1F0A33B90;
    }
    if (!(*(uint64_t (**)(void, const char *, void, void))(**(void **)this + 40))(*(void *)this, "Version", 0, 0))
    {
      tknPrintf("Error: Bad model. Couldn't locate %s\n", v9, "Version");
      std::string::basic_string[abi:ne180100]<0>(&__s1, "");
      TException::TException(v47, &__s1);
      v47[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
      if (v48 >= 0) {
        long long v24 = (std::exception_vtbl *)&v47[1];
      }
      else {
        long long v24 = v47[1].__vftable;
      }
      conditionalAssert((const char *)v24, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 624);
      TException::~TException(v47);
      if (SHIBYTE(v46) < 0) {
        operator delete((void *)__s1);
      }
      uint64_t v25 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v47, "");
      TException::TException(v25, (long long *)v47);
      *uint64_t v25 = &unk_1F0A33B90;
    }
    if (g_bCheckVocCompatibility)
    {
      long long __s1 = 0uLL;
      uint64_t v46 = 0;
      TDataManager::getStringVar(*(void *)this);
    }
    if (TDataManager::getBoolVar(*(TDataManager **)this, "IsStaticComponent", 0))
    {
      std::string::basic_string[abi:ne180100]<0>(&__s1, "Bad data spec");
      TException::TException(v47, &__s1);
      v47[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
      if (v48 >= 0) {
        long long v26 = (std::exception_vtbl *)&v47[1];
      }
      else {
        long long v26 = v47[1].__vftable;
      }
      conditionalAssert((const char *)v26, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 641);
      TException::~TException(v47);
      if (SHIBYTE(v46) < 0) {
        operator delete((void *)__s1);
      }
      long long v27 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v47, "Bad data spec");
      TException::TException(v27, (long long *)v47);
      *long long v27 = &unk_1F0A33B90;
    }
    uint64_t v16 = *((void *)this + 1);
    int BoolVar = TDataManager::getBoolVar(*(TDataManager **)this, "HasStaticComponent", 0);
    if (v16)
    {
      if ((BoolVar & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__s1, "Bad static data spec");
        TException::TException(v47, &__s1);
        v47[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
        if (v48 >= 0) {
          long long v36 = (std::exception_vtbl *)&v47[1];
        }
        else {
          long long v36 = v47[1].__vftable;
        }
        conditionalAssert((const char *)v36, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 657);
        TException::~TException(v47);
        if (SHIBYTE(v46) < 0) {
          operator delete((void *)__s1);
        }
        char v37 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v47, "Bad static data spec");
        TException::TException(v37, (long long *)v47);
        *char v37 = &unk_1F0A33B90;
      }
      if ((TDataManager::getBoolVar(*((TDataManager **)this + 1), "IsStaticComponent", 0) & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__s1, "Bad static data spec");
        TException::TException(v47, &__s1);
        v47[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
        if (v48 >= 0) {
          uint64_t v38 = (std::exception_vtbl *)&v47[1];
        }
        else {
          uint64_t v38 = v47[1].__vftable;
        }
        conditionalAssert((const char *)v38, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 662);
        TException::~TException(v47);
        if (SHIBYTE(v46) < 0) {
          operator delete((void *)__s1);
        }
        long long v39 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v47, "Bad static data spec");
        TException::TException(v39, (long long *)v47);
        *long long v39 = &unk_1F0A33B90;
      }
      long long __s1 = 0uLL;
      uint64_t v46 = 0;
      TDataManager::getStringVar(*(void *)this);
      std::string __p = 0;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      TDataManager::getStringVar(*((void *)this + 1));
    }
    else if ((a4 & 1) == 0 && ((BoolVar ^ 1) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__s1, "The data spec has a static component but it was not specified");
      TException::TException(v47, &__s1);
      v47[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
      if (v48 >= 0) {
        unint64_t v18 = (std::exception_vtbl *)&v47[1];
      }
      else {
        unint64_t v18 = v47[1].__vftable;
      }
      conditionalAssert((const char *)v18, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 649);
      TException::~TException(v47);
      if (SHIBYTE(v46) < 0) {
        operator delete((void *)__s1);
      }
      uint64_t v19 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v47, "The data spec has a static component but it was not specified");
      TException::TException(v19, (long long *)v47);
      *uint64_t v19 = &unk_1F0A33B90;
    }
  }
}

void sub_1B1D64D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (*(char *)(v33 - 57) < 0)
  {
    operator delete(*(void **)(v33 - 80));
    if ((v32 & 1) == 0)
    {
LABEL_6:
      if (a31 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

uint64_t TInputModel::getIntVar(TDataManager **this, const char *a2, uint64_t a3)
{
  unint64_t v6 = *this;
  if (v6
    && (*(uint64_t (**)(TDataManager *, const char *, void, void))(*(void *)v6 + 40))(v6, a2, 0, 0))
  {
    BOOL v7 = *this;
  }
  else
  {
    BOOL v7 = this[1];
    if (!v7) {
      return a3;
    }
  }
  return TDataManager::getIntVar(v7, a2, a3);
}

void TInputModel::getStringVar(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (v3 && (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v3 + 40))(v3, a2, 0, 0))
  {
    uint64_t v4 = *a1;
  }
  else
  {
    uint64_t v4 = a1[1];
    if (!v4)
    {
      JUMPOUT(0x1B3EA7B20);
    }
  }
  TDataManager::getStringVar(v4);
}

BOOL TInputModel::isVar(TInputModel *this, const char *a2)
{
  uint64_t v4 = *(void *)this;
  BOOL result = 1;
  if (!v4
    || !(*(uint64_t (**)(uint64_t, const char *, void, void))(*(void *)v4 + 40))(v4, a2, 0, 0))
  {
    uint64_t v5 = *((void *)this + 1);
    if (!v5
      || !(*(uint64_t (**)(uint64_t, const char *, void, void))(*(void *)v5 + 40))(v5, a2, 0, 0))
    {
      return 0;
    }
  }
  return result;
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(void *a1, char **a2)
{
  uint64_t v4 = std::string::basic_string[abi:ne180100]<0>(a1, *a2);
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, a2[1]);
  return a1;
}

void sub_1B1D651A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::NumFrames(int a1, uint64_t a2)
{
  float v2 = *(float *)(a2 + 52);
  if (v2 <= 0.0) {
    float v2 = *(float *)a2;
  }
  double v3 = v2 * 0.001;
  int v4 = (int)(v3 * *(float *)(a2 + 4));
  if (!*(unsigned char *)(a2 + 49)) {
    return (int)(float)((float)((float)a1 / (float)v4) + 0.5);
  }
  double v5 = v3 * *(float *)(a2 + 8);
  if (a1 >= (int)v5) {
    return ((a1 - (int)v5) / v4 + 1);
  }
  else {
    return 0;
  }
}

void kaldi::Dither(uint64_t a1, float a2)
{
  if (*(int *)(a1 + 8) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      float v5 = ((double)(int)kaldi::Rand(0) + 1.0) / 2147483650.0;
      float v6 = sqrtf(logf(v5) * -2.0);
      float v7 = ((double)(int)kaldi::Rand(0) + 1.0) / 2147483650.0;
      float v8 = v7 * 6.28318531;
      float v9 = cosf(v8);
      uint64_t v10 = *(int *)(a1 + 8);
      *(float *)(*(void *)a1 + 4 * v4) = *(float *)(*(void *)a1 + 4 * v4) + (float)((float)(v6 * v9) * a2);
      ++v4;
    }
    while (v4 < v10);
  }
}

kaldi::FeatureWindowFunction *kaldi::FeatureWindowFunction::FeatureWindowFunction(kaldi::FeatureWindowFunction *this, const kaldi::FrameExtractionOptions *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  float v4 = *((float *)a2 + 13);
  if (v4 <= 0.0) {
    float v4 = *(float *)a2;
  }
  uint64_t v5 = (int)(v4 * 0.001 * *((float *)a2 + 2));
  kaldi::Vector<float>::Resize((void **)this, v5, 0);
  uint64_t v6 = 0;
  float v7 = (char *)a2 + 24;
  double v8 = (double)((int)v5 - 1);
  do
  {
    float v9 = (float)(int)v6;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
      int v10 = *((unsigned __int8 *)a2 + 47);
      if (v10 == 5)
      {
        if (*(_DWORD *)v7 != 1702260592 || *((unsigned char *)a2 + 28) != 121)
        {
LABEL_52:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
          uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid window type ", 20);
          int v30 = *((char *)a2 + 47);
          if (v30 >= 0) {
            char v31 = (char *)a2 + 24;
          }
          else {
            char v31 = (char *)*((void *)a2 + 3);
          }
          if (v30 >= 0) {
            uint64_t v32 = *((unsigned __int8 *)a2 + 47);
          }
          else {
            uint64_t v32 = *((void *)a2 + 4);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
        }
LABEL_46:
        long double v26 = cos(v9 * 6.28318531 / v8);
        double v27 = pow(v26 * -0.5 + 0.5, 0.85);
      }
      else
      {
        if (v10 != 7)
        {
          uint64_t v11 = (uint64_t *)((char *)a2 + 24);
          if (v10 != 11) {
            goto LABEL_52;
          }
          goto LABEL_27;
        }
        if (*(_DWORD *)v7 == 1852727656 && *(_DWORD *)((char *)a2 + 27) == 1735289198)
        {
LABEL_47:
          double v27 = cos(v9 * 6.28318531 / v8) * -0.5 + 0.5;
        }
        else
        {
          if (*(_DWORD *)v7 != 1835884904 || *(_DWORD *)((char *)a2 + 27) != 1735289197) {
            goto LABEL_52;
          }
LABEL_48:
          double v27 = cos(v9 * 6.28318531 / v8) * -0.46 + 0.54;
        }
      }
      float v22 = v27;
      goto LABEL_50;
    }
    uint64_t v12 = *((void *)a2 + 4);
    if (v12 == 7)
    {
      int v13 = *(int **)v7;
      if (**(_DWORD **)v7 == 1852727656 && *(_DWORD *)(*(void *)v7 + 3) == 1735289198) {
        goto LABEL_47;
      }
      int v15 = *v13;
      int v16 = *(int *)((char *)v13 + 3);
      if (v15 == 1835884904 && v16 == 1735289197) {
        goto LABEL_48;
      }
      uint64_t v12 = *((void *)a2 + 4);
    }
    if (v12 == 5)
    {
      if (**(_DWORD **)v7 == 1702260592 && *(unsigned char *)(*(void *)v7 + 4) == 121) {
        goto LABEL_46;
      }
      uint64_t v12 = *((void *)a2 + 4);
    }
    if (v12 != 11) {
      goto LABEL_52;
    }
    uint64_t v11 = *(uint64_t **)v7;
LABEL_27:
    uint64_t v19 = *v11;
    uint64_t v20 = *(uint64_t *)((char *)v11 + 3);
    BOOL v21 = v19 == 0x75676E6174636572 && v20 == 0x72616C75676E6174;
    float v22 = 1.0;
    if (!v21) {
      goto LABEL_52;
    }
LABEL_50:
    *(float *)(*(void *)this + 4 * v6++) = v22;
  }
  while (v5 != v6);
  return this;
}

void kaldi::ExtractWindow(uint64_t *a1, int a2, uint64_t a3, float **a4, void **a5, float *a6)
{
  float v12 = *(float *)(a3 + 52);
  if (v12 <= 0.0) {
    float v12 = *(float *)a3;
  }
  double v13 = v12 * 0.001;
  int v14 = (int)(v13 * *(float *)(a3 + 4));
  uint64_t v15 = (int)(v13 * *(float *)(a3 + 8));
  memset(v44, 0, sizeof(v44));
  kaldi::Vector<float>::Resize((void **)v44, v15, 0);
  if (*(unsigned char *)(a3 + 49))
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v41 = (float *)(*a1 + 4 * (v14 * a2));
    LODWORD(v42) = v15;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)v44, (const void **)&v41);
  }
  else
  {
    if ((int)v15 >= 0) {
      int v16 = v15;
    }
    else {
      int v16 = v15 + 1;
    }
    int v17 = (int)(((double)a2 + 0.5) * (double)v14) - (v16 >> 1);
    int v18 = v17 + v15;
    unsigned int v19 = v17 & ~(v17 >> 31);
    int v20 = *((_DWORD *)a1 + 2);
    if (v20 >= v17 + (int)v15) {
      int v20 = v17 + v15;
    }
    uint64_t v43 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = (float *)((char *)v44[0] + 4 * (int)(v19 - v17));
    uint64_t v42 = v20 - v19;
    uint64_t v38 = *a1 + 4 * v19;
    uint64_t v39 = v42;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v41, (const void **)&v38);
    uint64_t v21 = *((int *)a1 + 2);
    if (v17 < 0)
    {
      uint64_t v22 = 0;
      uint64_t v23 = *a1;
      long long v24 = v44[0];
      do
        v24[v22] = *(_DWORD *)(v23 + 4 * ((v17 + (int)v22) / (int)v21 * v21 - (v17 + v22)));
      while (v17 + 1 + v22++ != 0);
    }
    if ((int)v21 < v18)
    {
      uint64_t v26 = 0;
      uint64_t v27 = *a1;
      BOOL v28 = (char *)v44[0] + 4 * v21 + -4 * v17;
      do
      {
        *(_DWORD *)&v28[4 * v26] = *(_DWORD *)(v27 + 4 * ((int)v21 + ~((int)v26 % (int)v21)));
        ++v26;
      }
      while (v21 + v26 < v18);
    }
  }
  uint64_t v29 = kaldi::FrameExtractionOptions::PaddedWindowSize((kaldi::FrameExtractionOptions *)a3);
  if (*((_DWORD *)a5 + 2) != v29) {
    kaldi::Vector<float>::Resize(a5, v29, 0);
  }
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v41 = (float *)*a5;
  LODWORD(v42) = v15;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v41, v44);
  float v30 = *(float *)(a3 + 12);
  if (v30 != 0.0) {
    kaldi::Dither((uint64_t)&v41, v30);
  }
  if (*(unsigned char *)(a3 + 20))
  {
    double v31 = kaldi::VectorBase<float>::Sum((uint64_t)&v41);
    kaldi::VectorBase<float>::Add((uint64_t)&v41, (float)-*(float *)&v31 / (float)(int)v15);
  }
  if (a6)
  {
    float v32 = kaldi::VecVec<float>((uint64_t)&v41, (const float **)&v41);
    if (v32 < 1.1755e-38) {
      float v32 = 1.1755e-38;
    }
    *a6 = v32;
  }
  float v33 = *(float *)(a3 + 16);
  if (v33 != 0.0)
  {
    unint64_t v34 = v42;
    uint64_t v35 = v41;
    float v36 = -v33;
    if ((int)v42 >= 2)
    {
      do
        v35[(v34 - 1)] = v35[(v34 - 1)] + (float)(v36 * v35[(v34 - 2)]);
      while (v34-- > 2);
    }
    float *v35 = *v35 + (float)(v36 * *v35);
  }
  kaldi::VectorBase<float>::MulElements((uint64_t)&v41, a4);
  if (v29 != v15)
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v38 = (uint64_t)*a5 + 4 * (int)v15;
    uint64_t v39 = (v29 - v15);
    kaldi::VectorBase<float>::SetZero((uint64_t)&v38);
  }
  kaldi::Vector<float>::Destroy((uint64_t)v44);
}

void sub_1B1D65928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::ExtractWaveformRemainder(uint64_t a1, float *a2, void **a3)
{
  float v5 = a2[13];
  if (v5 <= 0.0) {
    float v5 = *a2;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  float v6 = a2[1];
  int v8 = kaldi::NumFrames(v7, (uint64_t)a2) * (int)(v5 * 0.001 * v6);
  kaldi::Vector<float>::Resize(a3, (v7 - v8), 0);
  if (v7 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v9 = *(void *)a1 + 4 * v8;
    uint64_t v10 = (v7 - v8);
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)a3, (const void **)&v9);
  }
}

float kaldi::ComputePowerSpectrum(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 0) {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  else {
    int v2 = v1 + 1;
  }
  int v3 = v2 >> 1;
  float v4 = *(float **)a1;
  float v5 = **(float **)a1;
  float v6 = *(float *)(*(void *)a1 + 4);
  if (v1 >= 4)
  {
    uint64_t v7 = 2;
    if (v3 <= 2) {
      uint64_t v8 = 2;
    }
    else {
      uint64_t v8 = v3;
    }
    uint64_t v9 = v4 + 3;
    for (uint64_t i = 1; i != v8; ++i)
    {
      v4[i] = (float)(*v9 * *v9) + (float)(*(v9 - 1) * *(v9 - 1));
      v7 += 2;
      v9 += 2;
    }
  }
  float result = v5 * v5;
  *float v4 = result;
  v4[v3] = v6 * v6;
  return result;
}

void *kaldi::DeltaFeatures::DeltaFeatures(void *a1, unsigned int *a2)
{
  *a1 = *(void *)a2;
  a1[1] = 0;
  float v4 = (void ***)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  std::vector<kaldi::Vector<float>>::resize(a1 + 1, *a2 + 1);
  kaldi::Vector<float>::Resize(*v4, 1, 0);
  *(_DWORD *)**float v4 = 1065353216;
  if ((int)*a2 >= 1)
  {
    uint64_t v5 = 1;
    do
    {
      float v6 = &(*v4)[3 * v5];
      unsigned int v7 = a2[1];
      int v8 = *((_DWORD *)v6 - 4);
      if (v8 >= 1) {
        int v9 = v8 - 1;
      }
      else {
        int v9 = *((_DWORD *)v6 - 4);
      }
      kaldi::Vector<float>::Resize(&(*v4)[3 * v5], v8 + 2 * v7, 0);
      if ((v7 & 0x80000000) != 0)
      {
        float v15 = 0.0;
      }
      else
      {
        int v10 = 0;
        int v11 = v9 >> 1;
        int v12 = -v7;
        if (v9 >> 1 >= 0) {
          int v13 = v9 >> 1;
        }
        else {
          int v13 = -v11;
        }
        int v14 = v11 + v13 + 1;
        float v15 = 0.0;
        do
        {
          if ((v8 & 0x80000000) == 0)
          {
            uint64_t v16 = 0;
            uint64_t v17 = (uint64_t)*(v6 - 3);
            int v18 = (float *)*v6;
            do
            {
              v18[v10 + (int)v16] = v18[v10 + (int)v16] + (float)((float)v12 * *(float *)(v17 + 4 * v16));
              ++v16;
            }
            while (v14 != v16);
          }
          float v15 = v15 + (float)(v12 * v12);
          ++v10;
        }
        while (v12++ != v7);
      }
      kaldi::VectorBase<float>::Scale((uint64_t)v6, 1.0 / v15);
    }
    while (v5++ < (int)*a2);
  }
  return a1;
}

void sub_1B1D65BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void kaldi::DeltaFeatures::Process(_DWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  int v8 = kaldi::MatrixBase<float>::NumRows(a2);
  uint64_t v25 = (void *)a4;
  int v26 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::VectorBase<float>::SetZero(a4);
  int v9 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    uint64_t v10 = 0;
    uint64_t v23 = a3;
    long long v24 = a1;
    do
    {
      uint64_t v11 = *((void *)a1 + 1) + 24 * v10;
      int v12 = *(_DWORD *)(v11 + 8);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v31 = *v25 + 4 * v10 * v26;
      LODWORD(v32) = v26;
      if ((v12 & 0x80000000) == 0)
      {
        int v13 = v12 - 1;
        if (v12 < 1) {
          int v13 = v12;
        }
        uint64_t v14 = (v13 >> 1);
        uint64_t v15 = v14 - (int)v14;
        uint64_t v16 = v23 - (int)v14;
        int v17 = v13 | 1;
        do
        {
          float v18 = *(float *)(*(void *)v11 + 4 * v15);
          if (v18 != 0.0)
          {
            if (v16 >= v8) {
              int v19 = v8 - 1;
            }
            else {
              int v19 = v16;
            }
            if (v16 < 0) {
              int v19 = 0;
            }
            int v20 = (const float *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * v19);
            int v21 = kaldi::MatrixBase<float>::NumCols(a2);
            int v29 = 0;
            uint64_t v30 = 0;
            uint64_t v27 = v20;
            int v28 = v21;
            kaldi::VectorBase<float>::AddVec<float>((uint64_t)&v31, &v27, v18);
          }
          ++v15;
          ++v16;
          --v17;
        }
        while (v17);
        a1 = v24;
        int v9 = *v24;
      }
    }
    while (v10++ < v9);
  }
}

void kaldi::ComputeDeltas(unsigned int *a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v6 = kaldi::MatrixBase<float>::NumRows(a2);
  int v7 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::Matrix<float>::Resize(a3, v6, v7 + v7 * *a1, 0, 0);
  kaldi::DeltaFeatures::DeltaFeatures(&v12, a1);
  for (int i = 0; i < (int)kaldi::MatrixBase<float>::NumRows(a2); ++i)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    int v9 = (void **)(*(void *)a3 + 4 * a3[2].i32[0] * i);
    LODWORD(v1std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0) = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
    kaldi::DeltaFeatures::Process(&v12, a2, i, (uint64_t)&v9);
  }
  int v9 = (void **)&v13;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_1B1D65E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  a10 = (void **)&a14;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SlidingWindowCmnOptions::Check(uint64_t this)
{
  if (*(unsigned char *)(this + 13))
  {
    int v1 = *(_DWORD *)(this + 8);
    if (v1)
    {
      if (v1 != *(_DWORD *)this - (*(_DWORD *)this >> 1))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Inconsistent setting: center=true but lookahead is set to ", 58);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
      }
    }
  }
  return this;
}

void kaldi::SlidingWindowCmnInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::SlidingWindowCmnOptions::Check(a1);
  int v6 = kaldi::MatrixBase<float>::NumRows(a2);
  uint64_t v7 = kaldi::MatrixBase<float>::NumCols(a2);
  memset(v36, 0, 24);
  kaldi::Vector<double>::Resize((void **)v36, v7, 0);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  int v22 = v7;
  kaldi::Vector<double>::Resize(&v33, v7, 0);
  if (v6 >= 1)
  {
    int v8 = 0;
    int v9 = -1;
    unsigned int v10 = -1;
    do
    {
      unsigned int v11 = v10;
      int v12 = *(_DWORD *)a1;
      if (*(unsigned char *)(a1 + 13))
      {
        if (v12 >= 0) {
          int v13 = *(_DWORD *)a1;
        }
        else {
          int v13 = v12 + 1;
        }
        int v14 = (v8 - (v13 >> 1)) & ~((v8 - (v13 >> 1)) >> 31);
        int v15 = v14 + v12;
      }
      else
      {
        int v16 = v8 + *(_DWORD *)(a1 + 8);
        int v17 = v16 + 1;
        int v18 = v16 - v12;
        int v14 = v18 & ~(v18 >> 31);
        int v15 = v17 - (v18 & (v18 >> 31));
        if (v15 > v8)
        {
          int v15 = *(_DWORD *)(a1 + 4);
          if (v17 > v15) {
            int v15 = v17;
          }
        }
      }
      if (v15 <= v6) {
        unsigned int v10 = v14;
      }
      else {
        unsigned int v10 = (v14 + v6 - v15) & ~((v14 + v6 - v15) >> 31);
      }
      if (v15 >= v6) {
        int v19 = v6;
      }
      else {
        int v19 = v15;
      }
      if (v11 == -1)
      {
        kaldi::SubMatrix<double>::SubMatrix((uint64_t)&v23, a2, v10, v19 - v10, 0, v22);
        kaldi::VectorBase<double>::AddRowSumMat((uint64_t)v36, (const double **)&v23, 1.0, 0.0);
        if (*(unsigned char *)(a1 + 12)) {
          kaldi::VectorBase<double>::AddDiagMat2((uint64_t)&v33, (const double **)&v23, 112, 1.0, 0.0);
        }
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
      }
      else
      {
        if (v10 > v11)
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v23 = (double *)(*(void *)a2 + 8 * (int)(*(_DWORD *)(a2 + 16) * v11));
          LODWORD(v24) = kaldi::MatrixBase<float>::NumCols(a2);
          kaldi::VectorBase<double>::AddVec<double>((uint64_t)v36, (const double **)&v23, -1.0);
          if (*(unsigned char *)(a1 + 12)) {
            kaldi::VectorBase<double>::AddVec2((uint64_t)&v33, &v23, -1.0);
          }
        }
        if (v19 > v9)
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v23 = (double *)(*(void *)a2 + 8 * *(_DWORD *)(a2 + 16) * v9);
          LODWORD(v24) = kaldi::MatrixBase<float>::NumCols(a2);
          kaldi::VectorBase<double>::AddVec<double>((uint64_t)v36, (const double **)&v23, 1.0);
          if (*(unsigned char *)(a1 + 12)) {
            kaldi::VectorBase<double>::AddVec2((uint64_t)&v33, &v23, 1.0);
          }
        }
      }
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v30 = *(void *)a2 + 8 * *(_DWORD *)(a2 + 16) * v8;
      LODWORD(v31) = kaldi::MatrixBase<float>::NumCols(a2);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v27 = *(void *)a3 + 8 * *(_DWORD *)(a3 + 16) * v8;
      LODWORD(v28) = kaldi::MatrixBase<float>::NumCols(a3);
      kaldi::VectorBase<double>::CopyFromVec((uint64_t)&v27, (const void **)&v30);
      int v20 = v19 - v10;
      kaldi::VectorBase<double>::AddVec<double>((uint64_t)&v27, v36, -1.0 / (double)(int)(v19 - v10));
      if (*(unsigned char *)(a1 + 12))
      {
        if (v20 == 1)
        {
          kaldi::VectorBase<double>::Set((uint64_t)&v27, 0.0);
        }
        else
        {
          memset(v26, 0, sizeof(v26));
          kaldi::Vector<double>::Resize((void **)v26, v34, 1);
          kaldi::VectorBase<double>::CopyFromVec((uint64_t)v26, (const void **)&v33);
          kaldi::VectorBase<double>::Scale((uint64_t)v26, 1.0 / (double)v20);
          kaldi::VectorBase<double>::AddVec2((uint64_t)v26, (double **)v36, -1.0 / (double)(v20 * v20));
          if ((int)kaldi::VectorBase<double>::ApplyFloor((uint64_t)v26, 1.0e-10) >= 1
            && v6 != 1
            && kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Flooring variance When normalizing variance, floored ", 53);
            int v21 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" elements; num-frames was ",
              26);
            std::ostream::operator<<();
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
          }
          kaldi::VectorBase<double>::ApplyPow((uint64_t)v26, -0.5);
          kaldi::VectorBase<double>::MulElements((uint64_t)&v27, v26);
          kaldi::Vector<float>::Destroy((uint64_t)v26);
        }
      }
      ++v8;
      int v9 = v19;
    }
    while (v6 != v8);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v33);
  kaldi::Vector<float>::Destroy((uint64_t)v36);
}

void sub_1B1D66338(_Unwind_Exception *a1)
{
  kaldi::Vector<float>::Destroy(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SlidingWindowCmn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::SameDim<float>(a2, a3);
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::Matrix<double>::Matrix<float>(v10, a2, 111);
  uint64_t v6 = kaldi::MatrixBase<float>::NumRows(a2);
  uint64_t v7 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::Matrix<double>::Matrix((uint64_t)v9, v6, v7, 0, 0);
  kaldi::SlidingWindowCmnInternal(a1, (uint64_t)v10, (uint64_t)v9);
  kaldi::MatrixBase<float>::CopyFromMat<double>(a3, (uint64_t)v9, 111);
  kaldi::Matrix<float>::~Matrix((uint64_t)v9);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v10);
}

void sub_1B1D66480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void StorageAccessor::MMapFileAccessor::~MMapFileAccessor(StorageAccessor::MMapFileAccessor *this)
{
}

uint64_t *StorageAccessor::MMapFileAccessor::MMapFileAccessor(uint64_t *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[5] = 0;
  a1[6] = 0;
  a1[4] = 0;
  if (*(char *)(a2 + 23) >= 0) {
    float v4 = (const char *)a2;
  }
  else {
    float v4 = *(const char **)a2;
  }
  if (stat(v4, &v16))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v19);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  st_std::wstring::size_type size = v16.st_size;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v6 = (const char *)a2;
  }
  else {
    uint64_t v6 = *(const char **)a2;
  }
  uint64_t v7 = fopen(v6, "r+");
  int v8 = v7;
  if (!v7)
  {
    int v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v15, &v19);
    __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v9 = fileno(v7);
  unsigned int v10 = mmap(0, st_size, 3, 1, v9, 0);
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5A8B8;
  v17.__r_.__value_.__l.__size_ = st_size;
  int v18 = &v17;
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v19.__r_.__value_.__l.__size_, (uint64_t)&v17);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v17);
  std::string::size_type v11 = v19.__r_.__value_.__r.__words[0];
  if (v19.__r_.__value_.__r.__words[0] + 1 <= 1)
  {
    int v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v13, &v17);
    __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!st_size) {
    std::string::size_type v11 = 0;
  }
  a1[5] = v11;
  a1[6] = st_size;
  std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:ne180100](a1, (uint64_t *)&v19);
  std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v19, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v19.__r_.__value_.__l.__size_);
  fclose(v8);
  return a1;
}

void sub_1B1D66750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v35 - 89) < 0)
  {
    operator delete(*(void **)(v35 - 112));
    if ((v34 & 1) == 0)
    {
LABEL_6:
      std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100](v32, 0);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v32 + 1);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

unint64_t StorageAccessor::MMapFileAccessor::ReadData(StorageAccessor::MMapFileAccessor *this, unint64_t a2, uint64_t a3)
{
  return StorageAccessor::Span<unsigned char,18446744073709551615ul>::Slice((void *)this + 5, a2, a3);
}

unint64_t StorageAccessor::Span<unsigned char,18446744073709551615ul>::Slice(void *a1, unint64_t a2, uint64_t a3)
{
  if (!a3 || ((v3 = a1[1], v3 > a2) ? (BOOL v4 = a3 + a2 > v3) : (BOOL v4 = 1), v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E5FFDF10, MEMORY[0x1E4FBA1B8]);
  }
  return *a1 + a2;
}

void sub_1B1D668D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *StorageAccessor::MMapFileAccessor::WriteData(void *result, uint64_t a2, uint64_t a3)
{
  size_t v4 = *(void *)(a3 + 8);
  if (v4 + a2 > result[6])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E5FFDF10, MEMORY[0x1E4FBA1B8]);
  }
  if (v4)
  {
    uint64_t v5 = (void *)(*result + a2);
    uint64_t v6 = *(const void **)a3;
    return memmove(v5, v6, v4);
  }
  return result;
}

void sub_1B1D66980(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *float result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t std::function<void ()(void *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0,std::allocator<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0,std::allocator<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0>,void ()(void *)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1F0A5A8B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0,std::allocator<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5A8B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0,std::allocator<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  return munmap(*a2, *(void *)(a1 + 8));
}

uint64_t std::__function::__func<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0,std::allocator<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0,std::allocator<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0>,void ()(void *)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

float kaldi::quasar::InverseLengthPenaltyValue(kaldi::quasar *this, float a2)
{
  return pow(((double)(int)this + 5.0) / 6.0, (float)-a2);
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::Initialize(kaldi::quasar::SeevaBeamSearchBase *a1, uint64_t *a2, int a3)
{
  int v97 = *(_DWORD *)(*((void *)a1 + 2) + 152);
  std::vector<int>::vector(&v96, v97, (const std::vector<int>::value_type *)a1 + 8);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(*((void *)a1 + 1) + 16) + 16))(&v95);
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v6 = *((void *)a1 + 1);
  *(void *)std::vector<int>::value_type __x = 0;
  long long v99 = 0;
  long long v100 = 0;
  kaldi::quasar::SeevaStepInference::RunDecoder(v6, &v95, a2, __x, 1, (uint64_t)&v92);
  v88 = __x;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  uint64_t v7 = *(void *)(v93 - 8);
  *(void *)(v93 - 8) = 0;
  unint64_t v90 = 0;
  uint64_t v91 = v7;
  int v8 = *(_DWORD *)(*((void *)a1 + 1) + 564);
  v88 = 0;
  unint64_t v89 = 0;
  uint64_t v9 = v93;
  if (v92 != v93)
  {
    unsigned int v10 = 0;
    int v11 = v8 - 1;
    uint64_t v12 = v92 + 8;
    do
    {
      if ((unint64_t)v10 >= v90)
      {
        uint64_t v14 = (v10 - (char *)v88) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = (uint64_t)(v90 - (void)v88) >> 2;
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        if (v90 - (unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        long long v102 = &v90;
        if (v16) {
          std::string v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v90, v16);
        }
        else {
          std::string v17 = 0;
        }
        int v18 = &v17[8 * v14];
        *(void *)std::vector<int>::value_type __x = v17;
        long long v99 = v18;
        long long v101 = &v17[8 * v16];
        uint64_t v19 = *(void *)(v12 - 8);
        *(void *)(v12 - 8) = 0;
        *(void *)int v18 = v19;
        long long v100 = v18 + 8;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer((uint64_t *)&v88, __x);
        unsigned int v10 = v89;
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)__x);
      }
      else
      {
        uint64_t v13 = *(void *)(v12 - 8);
        *(void *)(v12 - 8) = 0;
        *(void *)unsigned int v10 = v13;
        v10 += 8;
      }
      unint64_t v89 = v10;
      if (!v11) {
        break;
      }
      --v11;
      BOOL v20 = v12 == v9;
      v12 += 8;
    }
    while (!v20);
  }
  if (a3 & 1) == 0 && (kaldi::quasar::SeevaBeamSearchBase::ShouldWait((uint64_t)a1, &v88))
  {
    uint64_t v21 = 0;
    goto LABEL_102;
  }
  int v22 = (void **)*((void *)a1 + 32);
  uint64_t v23 = (void **)*((void *)a1 + 33);
  if (v23 == v22)
  {
    uint64_t v27 = (void *)((char *)a1 + 288);
    uint64_t v23 = (void **)*((void *)a1 + 32);
  }
  else
  {
    unint64_t v24 = *((void *)a1 + 35);
    uint64_t v25 = &v22[v24 / 0xAA];
    unint64_t v26 = (unint64_t)*v25 + 24 * (v24 % 0xAA);
    uint64_t v27 = (void *)((char *)a1 + 288);
    unint64_t v28 = (unint64_t)v22[(*((void *)a1 + 36) + v24) / 0xAA] + 24 * ((*((void *)a1 + 36) + v24) % 0xAA);
    if (v26 != v28)
    {
      do
      {
        *(void *)std::vector<int>::value_type __x = v26;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
        v26 += 24;
        if (v26 - (void)*v25 == 4080)
        {
          unint64_t v29 = (unint64_t)v25[1];
          ++v25;
          unint64_t v26 = v29;
        }
      }
      while (v26 != v28);
      int v22 = (void **)*((void *)a1 + 32);
      uint64_t v23 = (void **)*((void *)a1 + 33);
    }
  }
  *uint64_t v27 = 0;
  unint64_t v30 = (char *)v23 - (char *)v22;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v22);
      uint64_t v31 = *((void *)a1 + 33);
      int v22 = (void **)(*((void *)a1 + 32) + 8);
      *((void *)a1 + 32) = v22;
      unint64_t v30 = v31 - (void)v22;
    }
    while (v30 > 0x10);
  }
  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 85;
  }
  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_35;
    }
    uint64_t v32 = 170;
  }
  *((void *)a1 + 35) = v32;
LABEL_35:
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>((void *)a1 + 31, (uint64_t)&v88);
  uint64_t v33 = (void **)*((void *)a1 + 38);
  int v34 = (void **)*((void *)a1 + 39);
  if (v34 == v33)
  {
    uint64_t v38 = (void *)((char *)a1 + 336);
    int v34 = (void **)*((void *)a1 + 38);
  }
  else
  {
    unint64_t v35 = *((void *)a1 + 41);
    float v36 = &v33[v35 >> 9];
    char v37 = (uint64_t *)((char *)*v36 + 8 * (v35 & 0x1FF));
    uint64_t v38 = (void *)((char *)a1 + 336);
    uint64_t v39 = *(uint64_t *)((char *)v33 + (((*((void *)a1 + 42) + v35) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*((void *)a1 + 42) + v35) & 0x1FF);
    if (v37 != (uint64_t *)v39)
    {
      do
      {
        uint64_t v40 = *v37;
        *char v37 = 0;
        if (v40) {
          (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
        }
        if ((char *)++v37 - (unsigned char *)*v36 == 4096)
        {
          uint64_t v41 = (uint64_t *)v36[1];
          ++v36;
          char v37 = v41;
        }
      }
      while (v37 != (uint64_t *)v39);
      uint64_t v33 = (void **)*((void *)a1 + 38);
      int v34 = (void **)*((void *)a1 + 39);
    }
  }
  *uint64_t v38 = 0;
  unint64_t v42 = (char *)v34 - (char *)v33;
  if (v42 >= 0x11)
  {
    do
    {
      operator delete(*v33);
      uint64_t v43 = *((void *)a1 + 39);
      uint64_t v33 = (void **)(*((void *)a1 + 38) + 8);
      *((void *)a1 + 38) = v33;
      unint64_t v42 = v43 - (void)v33;
    }
    while (v42 > 0x10);
  }
  if (v42 >> 3 == 1)
  {
    uint64_t v44 = 256;
  }
  else
  {
    if (v42 >> 3 != 2) {
      goto LABEL_51;
    }
    uint64_t v44 = 512;
  }
  *((void *)a1 + 4std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v44;
LABEL_51:
  std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::push_back((void *)a1 + 37, &v91);
  unint64_t v45 = (void **)*((void *)a1 + 11);
  uint64_t v46 = (void **)*((void *)a1 + 12);
  if (v46 == v45)
  {
    long long v47 = (void *)((char *)a1 + 120);
    uint64_t v46 = (void **)*((void *)a1 + 11);
  }
  else
  {
    long long v47 = (void *)((char *)a1 + 120);
    unint64_t v48 = *((void *)a1 + 14);
    std::string::size_type v49 = &v45[v48 / 0xAA];
    unint64_t v50 = (unint64_t)*v49;
    unint64_t v51 = (unint64_t)*v49 + 24 * (v48 % 0xAA);
    unint64_t v52 = (unint64_t)v45[(*((void *)a1 + 15) + v48) / 0xAA] + 24 * ((*((void *)a1 + 15) + v48) % 0xAA);
    if (v51 != v52)
    {
      do
      {
        uint64_t v53 = *(void **)v51;
        if (*(void *)v51)
        {
          *(void *)(v51 + 8) = v53;
          operator delete(v53);
          unint64_t v50 = (unint64_t)*v49;
        }
        v51 += 24;
        if (v51 - v50 == 4080)
        {
          unint64_t v54 = (unint64_t)v49[1];
          ++v49;
          unint64_t v50 = v54;
          unint64_t v51 = v54;
        }
      }
      while (v51 != v52);
      unint64_t v45 = (void **)*((void *)a1 + 11);
      uint64_t v46 = (void **)*((void *)a1 + 12);
    }
  }
  void *v47 = 0;
  unint64_t v55 = (char *)v46 - (char *)v45;
  if ((unint64_t)((char *)v46 - (char *)v45) >= 0x11)
  {
    do
    {
      operator delete(*v45);
      uint64_t v56 = *((void *)a1 + 12);
      unint64_t v45 = (void **)(*((void *)a1 + 11) + 8);
      *((void *)a1 + 1std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v45;
      unint64_t v55 = v56 - (void)v45;
    }
    while (v55 > 0x10);
  }
  if (v55 >> 3 == 1)
  {
    uint64_t v57 = 85;
  }
  else
  {
    if (v55 >> 3 != 2) {
      goto LABEL_67;
    }
    uint64_t v57 = 170;
  }
  *((void *)a1 + 14) = v57;
LABEL_67:
  *(void *)std::vector<int>::value_type __x = 0;
  std::deque<std::vector<float>>::emplace_back<int const&,double>((void *)a1 + 10, &v97, (double *)__x);
  std::string v58 = (void **)*((void *)a1 + 17);
  std::string v59 = (void **)*((void *)a1 + 18);
  if (v59 == v58)
  {
    uint64_t v60 = (void *)((char *)a1 + 168);
    std::string v59 = (void **)*((void *)a1 + 17);
  }
  else
  {
    uint64_t v60 = (void *)((char *)a1 + 168);
    unint64_t v61 = *((void *)a1 + 20);
    uint64_t v62 = &v58[v61 / 0xAA];
    int v63 = *v62;
    long long v64 = (void **)((char *)*v62 + 24 * (v61 % 0xAA));
    unint64_t v65 = (unint64_t)v58[(*((void *)a1 + 21) + v61) / 0xAA] + 24 * ((*((void *)a1 + 21) + v61) % 0xAA);
    if (v64 != (void **)v65)
    {
      do
      {
        if (*v64)
        {
          operator delete(*v64);
          int v63 = *v62;
        }
        v64 += 3;
        if ((char *)v64 - v63 == 4080)
        {
          uint64_t v66 = (void **)v62[1];
          ++v62;
          int v63 = v66;
          long long v64 = v66;
        }
      }
      while (v64 != (void **)v65);
      std::string v58 = (void **)*((void *)a1 + 17);
      std::string v59 = (void **)*((void *)a1 + 18);
    }
  }
  *uint64_t v60 = 0;
  unint64_t v67 = (char *)v59 - (char *)v58;
  if ((unint64_t)((char *)v59 - (char *)v58) >= 0x11)
  {
    do
    {
      operator delete(*v58);
      uint64_t v68 = *((void *)a1 + 18);
      std::string v58 = (void **)(*((void *)a1 + 17) + 8);
      *((void *)a1 + 17) = v58;
      unint64_t v67 = v68 - (void)v58;
    }
    while (v67 > 0x10);
  }
  if (v67 >> 3 == 1)
  {
    uint64_t v69 = 85;
  }
  else
  {
    if (v67 >> 3 != 2) {
      goto LABEL_83;
    }
    uint64_t v69 = 170;
  }
  *((void *)a1 + 2std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = v69;
LABEL_83:
  LOBYTE(__x[0]) = 0;
  std::deque<std::vector<BOOL>>::emplace_back<int const&,BOOL>((void *)a1 + 16, &v97, (unsigned __int8 *)__x);
  std::string v70 = (void **)*((void *)a1 + 23);
  uint64_t v71 = (void **)*((void *)a1 + 24);
  if (v71 == v70)
  {
    uint64_t v72 = (void *)((char *)a1 + 216);
    uint64_t v71 = (void **)*((void *)a1 + 23);
  }
  else
  {
    uint64_t v72 = (void *)((char *)a1 + 216);
    unint64_t v73 = *((void *)a1 + 26);
    char v74 = &v70[v73 / 0xAA];
    unint64_t v75 = (unint64_t)*v74;
    unint64_t v76 = (unint64_t)*v74 + 24 * (v73 % 0xAA);
    unint64_t v77 = (unint64_t)v70[(*((void *)a1 + 27) + v73) / 0xAA] + 24 * ((*((void *)a1 + 27) + v73) % 0xAA);
    if (v76 != v77)
    {
      do
      {
        BOOL v78 = *(void **)v76;
        if (*(void *)v76)
        {
          *(void *)(v76 + 8) = v78;
          operator delete(v78);
          unint64_t v75 = (unint64_t)*v74;
        }
        v76 += 24;
        if (v76 - v75 == 4080)
        {
          unint64_t v79 = (unint64_t)v74[1];
          ++v74;
          unint64_t v75 = v79;
          unint64_t v76 = v79;
        }
      }
      while (v76 != v77);
      std::string v70 = (void **)*((void *)a1 + 23);
      uint64_t v71 = (void **)*((void *)a1 + 24);
    }
  }
  *uint64_t v72 = 0;
  unint64_t v80 = (char *)v71 - (char *)v70;
  if ((unint64_t)((char *)v71 - (char *)v70) >= 0x11)
  {
    do
    {
      operator delete(*v70);
      uint64_t v81 = *((void *)a1 + 24);
      std::string v70 = (void **)(*((void *)a1 + 23) + 8);
      *((void *)a1 + 23) = v70;
      unint64_t v80 = v81 - (void)v70;
    }
    while (v80 > 0x10);
  }
  if (v80 >> 3 == 1)
  {
    uint64_t v82 = 85;
    goto LABEL_98;
  }
  if (v80 >> 3 == 2)
  {
    uint64_t v82 = 170;
LABEL_98:
    *((void *)a1 + 26) = v82;
  }
  __x[0] = 0;
  std::deque<std::vector<int>>::emplace_back<int const&,int>((void *)a1 + 22, &v97, __x);
  uint64_t v84 = *((void *)a1 + 28);
  for (uint64_t i = *((void *)a1 + 29);
        i != v84;
        std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::destroy[abi:ne180100]((uint64_t)a1 + 240, i))
  {
    i -= 72;
  }
  *((void *)a1 + 29) = v84;
  (*(void (**)(kaldi::quasar::SeevaBeamSearchBase *))(*(void *)a1 + 24))(a1);
  uint64_t v21 = a3 | kaldi::quasar::SeevaBeamSearchBase::UpdateSearchStats(a1, 1) ^ 1;
LABEL_102:
  *(void *)std::vector<int>::value_type __x = &v88;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  uint64_t v85 = v91;
  uint64_t v91 = 0;
  if (v85) {
    (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
  }
  *(void *)std::vector<int>::value_type __x = &v92;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  uint64_t v86 = v95;
  uint64_t v95 = 0;
  if (v86) {
    (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
  }
  if (v96.__begin_)
  {
    v96.__end_ = v96.__begin_;
    operator delete(v96.__begin_);
  }
  return v21;
}

void sub_1B1D6757C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  *(void *)(v21 - 88) = &a9;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  uint64_t v23 = a12;
  a12 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  a9 = &a13;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  uint64_t v24 = a16;
  a16 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::ShouldWait(uint64_t a1, void *a2)
{
  kaldi::quasar::SeevaBeamSearchBase::GetCurrentAlignment(a1, a2, &v25);
  unsigned int v3 = kaldi::MatrixBase<float>::NumCols(v25);
  uint64_t v4 = v25;
  uint64_t v5 = v26;
  if (v25 == v26)
  {
    char v7 = 0;
LABEL_24:
    char v21 = 0;
  }
  else
  {
    int v6 = v3;
    char v7 = 0;
    uint64_t v8 = v3;
    while (1)
    {
      int v9 = kaldi::MatrixBase<float>::NumRows(v4);
      if (v9 >= 1) {
        break;
      }
      int v11 = 0;
LABEL_18:
      v7 |= v11 == v9;
      v4 += 40;
      if (v4 == v5) {
        goto LABEL_24;
      }
    }
    int v10 = 0;
    int v11 = 0;
    uint64_t v12 = *(void *)(a1 + 16);
    float v13 = *(float *)(v12 + 196);
    int v14 = *(_DWORD *)(v12 + 172);
    while (1)
    {
      if (v6 < 1)
      {
        float v18 = -1.0;
        int v17 = -1;
      }
      else
      {
        uint64_t v15 = 0;
        int v17 = -1;
        float v18 = -1.0;
        do
        {
          uint64_t v16 = *(void *)v4 + 4 * *(_DWORD *)(v4 + 16) * v10;
          if (*(float *)(v16 + 4 * v15) > v18)
          {
            int v17 = v15;
            float v18 = *(float *)(v16 + 4 * v15);
          }
          ++v15;
        }
        while (v8 != v15);
      }
      if (v6 - v17 < v14) {
        break;
      }
      if (v18 > v13) {
        ++v11;
      }
      if (++v10 == v9) {
        goto LABEL_18;
      }
    }
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v24, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"On beam ", 8);
      uint64_t v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" peak attention at ", 19);
      BOOL v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" which is too close to ", 23);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v24);
    }
    char v21 = 1;
  }
  char v22 = v21 | ~v7;
  v24[0] = (void **)&v25;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](v24);
  return v22 & 1;
}

void sub_1B1D67820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 104);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::push_back(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  uint64_t v9 = *(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
  uint64_t v10 = *a2;
  *a2 = 0;
  *(void *)(v9 + 8 * (v8 & 0x1FF)) = v10;
  a1[5] = v7 + 1;
}

uint64_t std::deque<std::vector<float>>::emplace_back<int const&,double>(void *a1, int *a2, double *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = 170 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  if (v8 == a1[5] + a1[4])
  {
    std::deque<std::vector<float>>::__add_back_capacity(a1);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
  }
  if (v7 == v6)
  {
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = a1[5] + a1[4];
    uint64_t v10 = (void *)(*(void *)(v6 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA));
  }
  unint64_t v11 = *a2;
  float v12 = *a3;
  float v20 = v12;
  std::vector<float>::vector(v10, v11, &v20);
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5] + 1;
  a1[5] = v14;
  unint64_t v15 = v13 + v14;
  uint64_t v16 = a1[1];
  int v17 = (void *)(v16 + 8 * (v15 / 0xAA));
  uint64_t v18 = *v17 + 24 * (v15 % 0xAA);
  if (a1[2] == v16) {
    uint64_t v18 = 0;
  }
  if (v18 == *v17) {
    uint64_t v18 = *(v17 - 1) + 4080;
  }
  return v18 - 24;
}

uint64_t std::deque<std::vector<BOOL>>::emplace_back<int const&,BOOL>(void *a1, int *a2, unsigned __int8 *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = 170 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  if (v8 == a1[5] + a1[4])
  {
    std::deque<std::vector<BOOL>>::__add_back_capacity(a1);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
  }
  if (v7 == v6)
  {
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = a1[5] + a1[4];
    uint64_t v10 = (void *)(*(void *)(v6 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA));
  }
  std::vector<BOOL>::vector(v10, *a2, a3);
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[5] + 1;
  a1[5] = v12;
  unint64_t v13 = v11 + v12;
  uint64_t v14 = a1[1];
  unint64_t v15 = (void *)(v14 + 8 * (v13 / 0xAA));
  uint64_t v16 = *v15 + 24 * (v13 % 0xAA);
  if (a1[2] == v14) {
    uint64_t v16 = 0;
  }
  if (v16 == *v15) {
    uint64_t v16 = *(v15 - 1) + 4080;
  }
  return v16 - 24;
}

uint64_t std::deque<std::vector<int>>::emplace_back<int const&,int>(void *a1, int *a2, std::vector<int>::value_type *__x)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = 170 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  if (v8 == a1[5] + a1[4])
  {
    std::deque<std::vector<int>>::__add_back_capacity(a1);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
  }
  if (v7 == v6)
  {
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = a1[5] + a1[4];
    uint64_t v10 = (std::vector<int> *)(*(void *)(v6 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA));
  }
  std::vector<int>::vector(v10, *a2, __x);
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[5] + 1;
  a1[5] = v12;
  unint64_t v13 = v11 + v12;
  uint64_t v14 = a1[1];
  unint64_t v15 = (void *)(v14 + 8 * (v13 / 0xAA));
  uint64_t v16 = *v15 + 24 * (v13 % 0xAA);
  if (a1[2] == v14) {
    uint64_t v16 = 0;
  }
  if (v16 == *v15) {
    uint64_t v16 = *(v15 - 1) + 4080;
  }
  return v16 - 24;
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::UpdateSearchStats(kaldi::quasar::SeevaBeamSearchBase *this, uint64_t a2)
{
  unint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  unint64_t v4 = *((void *)this + 42) + *((void *)this + 41) - 1;
  uint64_t v5 = *(void *)(*(void *)(*((void *)this + 38) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
  (*(void (**)(uint64_t, _DWORD **))(*(void *)v5 + 56))(v5, &v42);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  char v37 = 0;
  uint64_t v38 = 0;
  float v36 = 0;
  (*(void (**)(kaldi::quasar::SeevaBeamSearchBase *, uint64_t, _DWORD **, void **, void **))(*(void *)this + 16))(this, a2, &v42, &v39, &v36);
  int v35 = *(_DWORD *)(*((void *)this + 2) + 152);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&__p, v36, (uint64_t)v36 + 4 * v35, v35);
  unint64_t v6 = *((void *)this + 29);
  if (v6 >= *((void *)this + 30))
  {
    uint64_t v7 = std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__emplace_back_slow_path<int const&>((uint64_t *)this + 28, &v35);
  }
  else
  {
    kaldi::quasar::SeevaBeamSearchBase::Breadcrumb::Breadcrumb(*((kaldi::quasar::SeevaBeamSearchBase::Breadcrumb **)this + 29), v35);
    uint64_t v7 = v6 + 72;
    *((void *)this + 29) = v6 + 72;
  }
  *((void *)this + 29) = v7;
  if (v35 < 1) {
    goto LABEL_16;
  }
  uint64_t v8 = 0;
  unint64_t v9 = (int *)__p;
  uint64_t v10 = *(void *)(v7 - 48);
  uint64_t v11 = *(void *)(v7 - 72);
  uint64_t v12 = v42;
  uint64_t v13 = *(void *)(v7 - 24);
  do
  {
    *(_DWORD *)(v10 + 4 * v8) = v9[v8] % *((_DWORD *)this + 11);
    *(_DWORD *)(v11 + 4 * v8) = v9[v8] / *((_DWORD *)this + 11);
    *(_DWORD *)(v13 + 4 * v8) = v12[v9[v8]];
    ++v8;
  }
  while (v8 < v35);
  uint64_t v14 = v35;
  if (v35 < 1)
  {
LABEL_16:
    char v25 = 1;
  }
  else
  {
    unint64_t v15 = (int *)__p;
    uint64_t v16 = v39;
    unint64_t v17 = *((void *)this + 15) + *((void *)this + 14) - 1;
    uint64_t v18 = *(_DWORD **)(*(void *)(*((void *)this + 11) + 8 * (v17 / 0xAA)) + 24 * (v17 % 0xAA));
    uint64_t v19 = v35;
    do
    {
      uint64_t v20 = *v15++;
      *v18++ = v16[v20];
      --v19;
    }
    while (v19);
    unint64_t v21 = 0;
    uint64_t v22 = *(void *)(v7 - 48);
    int v23 = *((_DWORD *)this + 9);
    uint64_t v24 = *((void *)this + 17);
    char v25 = 1;
    do
    {
      unint64_t v26 = *((void *)this + 21) + *((void *)this + 20) - 1;
      uint64_t v27 = *(void *)(*(void *)(v24 + 8 * (v26 / 0xAA)) + 24 * (v26 % 0xAA));
      unint64_t v28 = v21 >> 6;
      uint64_t v29 = 1 << v21;
      if (*(_DWORD *)(v22 + 4 * v21) == v23)
      {
        uint64_t v30 = *(void *)(v27 + 8 * v28) | v29;
      }
      else
      {
        char v25 = 0;
        uint64_t v30 = *(void *)(v27 + 8 * v28) & ~v29;
      }
      *(void *)(v27 + 8 * v28) = v30;
      ++v21;
    }
    while (v14 != v21);
  }
  if (__p)
  {
    uint64_t v33 = __p;
    operator delete(__p);
  }
  if (v36)
  {
    char v37 = v36;
    operator delete(v36);
  }
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
  if (v42)
  {
    uint64_t v43 = v42;
    operator delete(v42);
  }
  return v25 & 1;
}

void sub_1B1D67ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  uint64_t v20 = *(void **)(v18 - 40);
  if (v20)
  {
    *(void *)(v18 - 32) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::BeamSearch(uint64_t *a1, uint64_t *a2, int a3)
{
  int v3 = a3;
  unint64_t v5 = *(int *)(a1[2] + 152);
  uint64_t v49 = 0x71C71C71C71C71C7 * ((a1[29] - a1[28]) >> 3);
  uint64_t v53 = a1 + 37;
  uint64_t v6 = *(unsigned int *)(a1[1] + 564);
  unint64_t v52 = a1 + 31;
  do
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1[1] + 16) + 16))(&v69);
    uint64_t v66 = 0;
    unint64_t v67 = 0;
    unint64_t v68 = 0;
    if ((int)v6 >= 1)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1[1] + 16) + 104))(&v63);
        std::vector<kaldi::quasar::ComputeEngineBufferItf *>::vector(&v60, v5);
        uint64_t v8 = a1[29];
        unint64_t v9 = *(int **)(v8 - 72);
        uint64_t v10 = *(int **)(v8 - 64);
        if (v9 != v10)
        {
          uint64_t v11 = 0;
          do
          {
            uint64_t v12 = *v9++;
            *(void *)&v60[v11] = *(void *)(v63 + 8 * v12);
            v11 += 8;
          }
          while (v9 != v10);
        }
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1[1] + 16) + 96))(&v70);
        uint64_t v13 = v67;
        if ((unint64_t)v67 >= v68)
        {
          uint64_t v16 = ((uint64_t)v67 - v66) >> 3;
          if ((unint64_t)(v16 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v17 = (uint64_t)(v68 - v66) >> 2;
          if (v17 <= v16 + 1) {
            unint64_t v17 = v16 + 1;
          }
          if (v68 - v66 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v17;
          }
          std::string v59 = &v68;
          if (v18) {
            uint64_t v19 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v68, v18);
          }
          else {
            uint64_t v19 = 0;
          }
          uint64_t v20 = &v19[v16];
          unint64_t v55 = v19;
          uint64_t v56 = v20;
          std::string v58 = &v19[v18];
          uint64_t v21 = v70;
          uint64_t v70 = 0;
          *uint64_t v20 = v21;
          uint64_t v57 = v20 + 1;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(&v66, &v55);
          unint64_t v15 = v67;
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v55);
        }
        else
        {
          uint64_t v14 = v70;
          uint64_t v70 = 0;
          *unint64_t v67 = v14;
          unint64_t v15 = v13 + 1;
        }
        unint64_t v67 = v15;
        uint64_t v22 = v70;
        uint64_t v70 = 0;
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
        if (v60)
        {
          unint64_t v61 = v60;
          operator delete(v60);
        }
        unint64_t v55 = &v63;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
      }
    }
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    kaldi::quasar::SeevaStepInference::RunDecoder(a1[1], &v69, a2, &v66, 0, (uint64_t)&v63);
    kaldi::quasar::SeevaBeamSearchBase::ControlSearchStatsSize((kaldi::quasar::SeevaBeamSearchBase *)a1, v3);
    std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::push_back(v53, (uint64_t *)(v64 - 8));
    uint64_t v60 = 0;
    unint64_t v61 = 0;
    unint64_t v62 = 0;
    uint64_t v23 = v64;
    if (v63 != v64)
    {
      uint64_t v24 = 0;
      uint64_t v25 = v63 + 8;
      int v26 = v6 - 1;
      do
      {
        if ((unint64_t)v24 >= v62)
        {
          uint64_t v28 = (v24 - v60) >> 3;
          if ((unint64_t)(v28 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v29 = (uint64_t)(v62 - (void)v60) >> 2;
          if (v29 <= v28 + 1) {
            unint64_t v29 = v28 + 1;
          }
          if (v62 - (unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          std::string v59 = &v62;
          if (v30) {
            uint64_t v31 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v62, v30);
          }
          else {
            uint64_t v31 = 0;
          }
          uint64_t v32 = &v31[v28];
          unint64_t v55 = v31;
          uint64_t v56 = v32;
          std::string v58 = &v31[v30];
          uint64_t v33 = *(void *)(v25 - 8);
          *(void *)(v25 - 8) = 0;
          *uint64_t v32 = v33;
          uint64_t v57 = v32 + 1;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer((uint64_t *)&v60, &v55);
          uint64_t v24 = v61;
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v55);
        }
        else
        {
          uint64_t v27 = *(void *)(v25 - 8);
          *(void *)(v25 - 8) = 0;
          *(void *)uint64_t v24 = v27;
          v24 += 8;
        }
        unint64_t v61 = v24;
        if (!v26) {
          break;
        }
        --v26;
        BOOL v34 = v25 == v23;
        v25 += 8;
      }
      while (!v34);
    }
    std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(v52, (uint64_t)&v60);
    int updated = kaldi::quasar::SeevaBeamSearchBase::UpdateSearchStats((kaldi::quasar::SeevaBeamSearchBase *)a1, 0);
    int v3 = a3;
    char v36 = updated;
    if ((a3 & 1) == 0)
    {
      if (updated)
      {
        int v37 = *(_DWORD *)(a1[2] + 184);
      }
      else
      {
        unint64_t v38 = a1[36] + a1[35] - 1;
        int ShouldWait = kaldi::quasar::SeevaBeamSearchBase::ShouldWait((uint64_t)a1, (void *)(*(void *)(a1[32] + 8 * (v38 / 0xAA)) + 24 * (v38 % 0xAA)));
        uint64_t v41 = a1[28];
        uint64_t v40 = a1[29];
        uint64_t v42 = a1[2];
        if (!ShouldWait) {
          goto LABEL_53;
        }
        unint64_t v43 = *(int *)(v42 + 188);
        unint64_t v44 = v49 - 0x71C71C71C71C71C7 * ((v40 - v41) >> 3);
        if (v44 >= v43) {
          int v37 = v43;
        }
        else {
          int v37 = v44;
        }
      }
      if (v37 >= 1)
      {
        char v50 = kaldi::quasar::SeevaBeamSearchBase::Rollback((kaldi::quasar::SeevaBeamSearchBase *)a1, v37);
        int v45 = 1;
        goto LABEL_56;
      }
    }
    if (v36)
    {
      int v45 = 3;
      goto LABEL_56;
    }
    uint64_t v41 = a1[28];
    uint64_t v40 = a1[29];
    uint64_t v42 = a1[2];
LABEL_53:
    if (0x8E38E38E38E38E39 * ((v40 - v41) >> 3) >= *(int *)(v42 + 160)) {
      int v45 = 3;
    }
    else {
      int v45 = 0;
    }
LABEL_56:
    unint64_t v55 = (uint64_t *)&v60;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
    unint64_t v55 = &v63;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
    unint64_t v55 = &v66;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
    uint64_t v46 = v69;
    uint64_t v69 = 0;
    if (v46) {
      (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
    }
  }
  while (!v45);
  if (v45 == 3)
  {
    char v47 = 1;
    if (a3 && kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"total rollbacked steps are ", 27);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55);
      char v47 = 1;
    }
  }
  else
  {
    char v47 = v50;
  }
  return v47 & 1;
}

void sub_1B1D68520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void *kaldi::quasar::SeevaBeamSearchBase::ControlSearchStatsSize(kaldi::quasar::SeevaBeamSearchBase *this, int a2)
{
  int v3 = (void *)((char *)this + 296);
  if (a2)
  {
    std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::pop_front(v3);
    return (void *)std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_front((int64x2_t *)((char *)this + 248));
  }
  else
  {
    if (*((_DWORD *)this + 12) <= (int)*((void *)this + 42))
    {
      std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::pop_front(v3);
      std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_front((int64x2_t *)((char *)this + 248));
      std::deque<std::vector<float>>::pop_front((void *)this + 10);
      std::deque<std::vector<BOOL>>::pop_front((void *)this + 16);
      std::deque<std::vector<float>>::pop_front((void *)this + 22);
    }
    unint64_t v5 = *((void *)this + 15) + *((void *)this + 14) - 1;
    std::deque<std::vector<float>>::push_back((void *)this + 10, *(void *)(*((void *)this + 11) + 8 * (v5 / 0xAA)) + 24 * (v5 % 0xAA));
    unint64_t v6 = *((void *)this + 21) + *((void *)this + 20) - 1;
    std::deque<std::vector<BOOL>>::push_back((void *)this + 16, *(void *)(*((void *)this + 17) + 8 * (v6 / 0xAA)) + 24 * (v6 % 0xAA));
    unint64_t v7 = *((void *)this + 27) + *((void *)this + 26) - 1;
    uint64_t v8 = *(void *)(*((void *)this + 23) + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
    return std::deque<std::vector<int>>::push_back((void *)this + 22, v8);
  }
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::Rollback(kaldi::quasar::SeevaBeamSearchBase *this, int a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)this + 29) - *((void *)this + 28)) >> 3);
  if (v3 <= a2 || *((void *)this + 15) <= (unint64_t)a2)
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v8, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not enough steps to rollback, need wait for more audio and reinitialization", 75);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v8);
      unint64_t v3 = 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)this + 29) - *((void *)this + 28)) >> 3);
    }
    uint64_t result = 0;
    *((_DWORD *)this + 13) += v3;
  }
  else
  {
    if (a2 >= 1)
    {
      int v5 = a2;
      do
      {
        uint64_t v6 = *((void *)this + 29) - 72;
        std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::destroy[abi:ne180100]((uint64_t)this + 240, v6);
        *((void *)this + 29) = v6;
        std::deque<std::vector<float>>::pop_back((void *)this + 10);
        std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_back((void *)this + 31);
        std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::pop_back((void *)this + 37);
        std::deque<std::vector<BOOL>>::pop_back((void *)this + 16);
        std::deque<std::vector<float>>::pop_back((void *)this + 22);
        --v5;
      }
      while (v5);
    }
    *((_DWORD *)this + 13) += a2;
    return 1;
  }
  return result;
}

void sub_1B1D688FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::pop_front(void *a1)
{
  unint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(a1[1] + ((v2 >> 6) & 0x3FFFFFFFFFFFFF8));
  uint64_t v4 = *(void *)(v3 + 8 * (v2 & 0x1FF));
  *(void *)(v3 + 8 * (v2 & 0x1FF)) = 0;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    unint64_t v2 = a1[4];
  }
  uint64_t v5 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v5;
  return std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_front(int64x2_t *a1)
{
  uint64_t v3 = (void **)(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0xAAuLL)) + 24 * (a1[2].i64[0] % 0xAAuLL));
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B255E5F0);
  return std::deque<kaldi::Vector<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<std::vector<float>>::pop_front(void *a1)
{
  unint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(a1[1] + 8 * (v2 / 0xAA));
  uint64_t v4 = *(void **)(v3 + 24 * (v2 % 0xAA));
  if (v4)
  {
    *(void *)(v3 + 24 * (v2 % 0xAA) + 8) = v4;
    operator delete(v4);
    unint64_t v2 = a1[4];
  }
  uint64_t v5 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v5;
  return std::deque<kaldi::Vector<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<std::vector<BOOL>>::pop_front(void *a1)
{
  unint64_t v2 = a1[4];
  uint64_t v3 = *(void **)(*(void *)(a1[1] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA));
  if (v3)
  {
    operator delete(v3);
    unint64_t v2 = a1[4];
  }
  uint64_t v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return std::deque<kaldi::Vector<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

void *std::deque<std::vector<float>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::vector<float>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (void *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  *uint64_t v8 = 0;
  v8[1] = 0;
  int32x2_t v8[2] = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v8, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  ++a1[5];
  return result;
}

void *std::deque<std::vector<BOOL>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::vector<BOOL>>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = (void *)(*(void *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  uint64_t result = std::vector<BOOL>::vector(v8, a2);
  ++a1[5];
  return result;
}

void *std::deque<std::vector<int>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::vector<int>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (void *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  *uint64_t v8 = 0;
  v8[1] = 0;
  int32x2_t v8[2] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  ++a1[5];
  return result;
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::GetCurrentAlignment@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)(result + 8);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v5 = *(void **)(v4 + 568);
  uint64_t v6 = (void *)(v4 + 576);
  if (v5 != (void *)(v4 + 576))
  {
    do
    {
      uint64_t v8 = *((int *)v5 + 7);
      unint64_t v9 = a3[1];
      if (v9 >= a3[2])
      {
        uint64_t v11 = std::vector<kaldi::Matrix<float>>::__emplace_back_slow_path<>(a3);
      }
      else
      {
        v10.n128_f64[0] = kaldi::Matrix<float>::Matrix(a3[1]);
        uint64_t v11 = v9 + 40;
        a3[1] = v9 + 40;
      }
      a3[1] = v11;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, __n128))(**(void **)(*a2 + 8 * v8) + 24))(*(void *)(*a2 + 8 * v8), v11 - 40, v10);
      uint64_t v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v5[2];
          BOOL v14 = *v13 == (void)v5;
          uint64_t v5 = v13;
        }
        while (!v14);
      }
      uint64_t v5 = v13;
    }
    while (v13 != v6);
  }
  return result;
}

void sub_1B1D68E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 8) = v11;
  a10 = (void **)v10;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::vector<float>>::pop_back(void *a1)
{
  uint64_t v2 = a1[5] - 1;
  unint64_t v3 = v2 + a1[4];
  uint64_t v4 = *(void *)(a1[1] + 8 * (v3 / 0xAA));
  unint64_t v5 = v3 % 0xAA;
  uint64_t v6 = *(void **)(v4 + 24 * v5);
  if (v6)
  {
    *(void *)(v4 + 24 * v5 + 8) = v6;
    operator delete(v6);
    uint64_t v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::pop_back(void *a1)
{
  uint64_t v2 = a1[5] - 1;
  unint64_t v3 = v2 + a1[4];
  uint64_t v4 = *(void *)(a1[1] + ((v3 >> 6) & 0x3FFFFFFFFFFFFF8));
  unint64_t v5 = v3 & 0x1FF;
  uint64_t v6 = *(void *)(v4 + 8 * v5);
  *(void *)(v4 + 8 * v5) = 0;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<std::vector<BOOL>>::pop_back(void *a1)
{
  uint64_t v2 = a1[5] - 1;
  unint64_t v3 = *(void **)(*(void *)(a1[1] + 8 * ((v2 + a1[4]) / 0xAAuLL)) + 24 * ((v2 + a1[4]) % 0xAAuLL));
  if (v3)
  {
    operator delete(v3);
    uint64_t v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

void kaldi::quasar::SeevaBeamSearchBase::UpdateBeamScore(uint64_t a1, int a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v9 = *(int *)(*(void *)(a1 + 16) + 152);
  if (a2)
  {
    if (a4 != (char *)a3) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    }
    uint64_t v10 = *(float **)a4;
    unint64_t v11 = *(int *)(a1 + 44);
    uint64_t v12 = *(void *)a4 + 4 * v11;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    std::string __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&__p, v10, v12, v11);
    kaldi::quasar::argsortn<float,false>((uint64_t *)&__p, v9, &v24);
  }
  else
  {
    kaldi::quasar::SeevaBeamSearchBase::MaskEos(a1, (void *)a3);
    kaldi::quasar::SeevaBeamSearchBase::UpdateBeamLength((void *)a1);
    if (a4 != (char *)a3) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    }
    if ((int)v9 >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(unsigned int *)(a1 + 44);
      unint64_t v15 = *(float **)a4;
      do
      {
        if ((int)v14 >= 1)
        {
          unint64_t v16 = *(void *)(a1 + 120) + *(void *)(a1 + 112) - 1;
          uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8 * (v16 / 0xAA)) + 24 * (v16 % 0xAA));
          uint64_t v18 = v14;
          uint64_t v19 = v15;
          do
          {
            *uint64_t v19 = *(float *)(v17 + 4 * v13) + *v19;
            ++v19;
            --v18;
          }
          while (v18);
        }
        ++v13;
        v15 += (int)v14;
      }
      while (v13 != v9);
    }
    kaldi::quasar::SeevaBeamSearchBase::ApplyLengthNorm(a1, (uint64_t)a4, (float **)&__p);
    kaldi::quasar::argsortn<float,false>((uint64_t *)&__p, v9, &v24);
  }
  uint64_t v20 = *(void **)a5;
  if (*(void *)a5)
  {
    *(void *)(a5 + 8) = v20;
    operator delete(v20);
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
  *(std::vector<int> *)a5 = v24;
  memset(&v24, 0, sizeof(v24));
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
}

void sub_1B1D691D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *kaldi::quasar::argsortn<float,false>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::vector<int> *a3@<X8>)
{
  std::vector<int>::vector(a3, (a1[1] - *a1) >> 2);
  uint64_t result = a3->__begin_;
  std::vector<std::wstring>::pointer end = a3->__end_;
  if (a3->__begin_ != end)
  {
    int v8 = 0;
    std::vector<std::wstring>::pointer begin = a3->__begin_;
    do
      *begin++ = v8++;
    while (begin != end);
  }
  uint64_t v10 = a1;
  if (a2) {
    return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(result, &result[a2], end, &v10);
  }
  return result;
}

void sub_1B1D6927C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::MaskEos(uint64_t result, void *a2)
{
  uint64_t v2 = *(unsigned int *)(*(void *)(result + 16) + 152);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = 0;
    unint64_t v4 = *(void *)(result + 168) + *(void *)(result + 160) - 1;
    uint64_t v5 = *(void *)(*(void *)(*(void *)(result + 136) + 8 * (v4 / 0xAA)) + 24 * (v4 % 0xAA));
    int64x2_t v6 = vdupq_n_s64(2uLL);
    do
    {
      if ((*(void *)(v5 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3))
      {
        uint64_t v7 = *(unsigned int *)(result + 44);
        if ((int)v7 >= 1)
        {
          uint64_t v8 = *(unsigned int *)(result + 36);
          uint64_t v9 = (v7 + 1) & 0x1FFFFFFFELL;
          uint64x2_t v10 = (uint64x2_t)vdupq_n_s64(v7 - 1);
          unint64_t v11 = (float *)(*a2 + 4 * (int)v7 * (int)v3 + 4);
          int64x2_t v12 = (int64x2_t)xmmword_1B255FA20;
          do
          {
            int32x2_t v13 = vmovn_s64((int64x2_t)vcgeq_u64(v10, (uint64x2_t)v12));
            if (v13.i8[0])
            {
              if (v8) {
                float v14 = -1000000000.0;
              }
              else {
                float v14 = 0.0;
              }
              *(v11 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v14;
            }
            if (v13.i8[4])
            {
              if (v8 == 1) {
                float v15 = 0.0;
              }
              else {
                float v15 = -1000000000.0;
              }
              float *v11 = v15;
            }
            int64x2_t v12 = vaddq_s64(v12, v6);
            v8 -= 2;
            v11 += 2;
            v9 -= 2;
          }
          while (v9);
        }
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

void *kaldi::quasar::SeevaBeamSearchBase::UpdateBeamLength(void *this)
{
  uint64_t v1 = *(unsigned int *)(this[2] + 152);
  if ((int)v1 >= 1)
  {
    unint64_t v2 = 0;
    unint64_t v3 = this[21] + this[20] - 1;
    uint64_t v4 = *(void *)(*(void *)(this[17] + 8 * (v3 / 0xAA)) + 24 * (v3 % 0xAA));
    do
    {
      if (((*(void *)(v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v2) & 1) == 0)
      {
        unint64_t v5 = this[27] + this[26] - 1;
        uint64_t v6 = *(void *)(*(void *)(this[23] + 8 * (v5 / 0xAA)) + 24 * (v5 % 0xAA));
        ++*(_DWORD *)(v6 + 4 * v2);
      }
      ++v2;
    }
    while (v1 != v2);
  }
  return this;
}

void kaldi::quasar::SeevaBeamSearchBase::ApplyLengthNorm(uint64_t a1@<X0>, uint64_t a2@<X1>, float **a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(unsigned int *)(v5 + 152);
  float v7 = *(float *)(v5 + 8);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  if ((int)v6 >= 1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = *(void *)(a1 + 216) + *(void *)(a1 + 208) - 1;
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 184) + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA));
    long double v11 = (float)-v7;
    uint64_t v12 = *(unsigned int *)(a1 + 44);
    int32x2_t v13 = *a3;
    do
    {
      double v14 = pow(((double)*(int *)(v10 + 4 * v8) + 5.0) / 6.0, v11);
      if ((int)v12 >= 1)
      {
        float v15 = v14;
        uint64_t v16 = v12;
        uint64_t v17 = v13;
        do
        {
          float *v17 = *v17 * v15;
          ++v17;
          --v16;
        }
        while (v16);
      }
      ++v8;
      v13 += (int)v12;
    }
    while (v8 != v6);
  }
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::EndCurrentSearch(kaldi::quasar::SeevaBeamSearchBase *this)
{
  return 0;
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::GetCurrentBreadcrumb(kaldi::quasar::SeevaBeamSearchBase *this)
{
  return (uint64_t)this + 224;
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::DecodedSteps(kaldi::quasar::SeevaBeamSearchBase *this)
{
  return 954437177 * ((*((void *)this + 29) - *((void *)this + 28)) >> 3);
}

void kaldi::quasar::SeevaBeamSearchBase::TraceBack(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 16) + 152);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 8std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_DWORD *)(a3 + 96) = 0;
  std::vector<std::vector<int>>::vector(&v56, (int)v8);
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a3);
  *(std::vector<int> *)a3 = v56;
  memset(&v56, 0, sizeof(v56));
  uint64_t v57 = &v56;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  std::vector<std::vector<float>>::vector(&v56, (int)v8);
  unint64_t v9 = (void *)(a3 + 24);
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(a3 + 24));
  *(std::vector<int> *)(a3 + 24) = v56;
  memset(&v56, 0, sizeof(v56));
  uint64_t v57 = &v56;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  if ((int)v8 >= 1)
  {
    uint64_t v10 = 0;
    unint64_t v55 = 0x8E38E38E38E38E39 * ((v6 - v7) >> 3);
    std::vector<int>::size_type v11 = v55 - 1;
    do
    {
      std::vector<int>::vector(&v56, v11);
      uint64_t v12 = *(void *)a3 + v10;
      int32x2_t v13 = *(void **)v12;
      if (*(void *)v12)
      {
        *(void *)(v12 + 8) = v13;
        operator delete(v13);
        *(void *)uint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        *(void *)(v12 + 16) = 0;
      }
      *(std::vector<int> *)uint64_t v12 = v56;
      std::vector<float>::vector(&v56, v11);
      uint64_t v14 = *v9 + v10;
      float v15 = *(void **)v14;
      if (*(void *)v14)
      {
        *(void *)(v14 + 8) = v15;
        operator delete(v15);
        *(void *)uint64_t v14 = 0;
        *(void *)(v14 + 8) = 0;
        *(void *)(v14 + 16) = 0;
      }
      *(std::vector<int> *)uint64_t v14 = v56;
      v10 += 24;
    }
    while (24 * v8 != v10);
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(*a2 + 72 * v11);
    uint64_t v18 = *(void *)a3;
    uint64_t v19 = *(void *)(a3 + 24);
    uint64_t v20 = *a2 + 72 * (v55 - 2) + 24;
    do
    {
      if (((v55 - 2) & 0x80000000) == 0)
      {
        uint64_t v21 = (int *)(v17 + 4 * v16);
        uint64_t v22 = *(void *)(v18 + 24 * v16);
        uint64_t v23 = *(void *)(v19 + 24 * v16);
        std::vector<int> v24 = (void *)v20;
        uint64_t v25 = (v55 - 2);
        do
        {
          uint64_t v26 = *v21;
          *(_DWORD *)(v22 + 4 * v25) = *(_DWORD *)(*v24 + 4 * v26);
          *(_DWORD *)(v23 + 4 * v25) = *(_DWORD *)(v24[3] + 4 * v26);
          uint64_t v21 = (int *)(*(v24 - 3) + 4 * v26);
          v24 -= 9;
        }
        while (v25-- > 0);
      }
      ++v16;
    }
    while (v16 != v8);
  }
  std::vector<int>::vector(&v56, (int)v8);
  uint64_t v28 = *(void **)(a3 + 72);
  if (v28)
  {
    *(void *)(a3 + 8std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = v28;
    operator delete(v28);
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 8std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
    *(void *)(a3 + 88) = 0;
  }
  *(std::vector<int> *)(a3 + 72) = v56;
  std::vector<float>::vector(&v56, (int)v8);
  unint64_t v29 = *(void **)(a3 + 48);
  if (v29)
  {
    *(void *)(a3 + 56) = v29;
    operator delete(v29);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
  }
  std::vector<int>::pointer begin = v56.__begin_;
  *(std::vector<int> *)(a3 + 48) = v56;
  *(_DWORD *)(a3 + 96) = v8;
  if ((int)v8 >= 1)
  {
    uint64_t v31 = 0;
    uint64_t v32 = *(void *)a3;
    uint64_t v33 = *(void *)(a3 + 72);
    uint64_t v34 = *(void *)(a3 + 24);
    long double v35 = (float)-*(float *)(*(void *)(a1 + 16) + 8);
    std::vector<int>::pointer v36 = begin;
    do
    {
      int v37 = (char **)(v32 + 24 * v31);
      unint64_t v38 = *v37;
      uint64_t v41 = v37[1];
      uint64_t v39 = v37 + 1;
      uint64_t v40 = v41;
      if (v38 == v41)
      {
LABEL_25:
        uint64_t v46 = v38;
      }
      else
      {
        int v42 = *(_DWORD *)(a1 + 36);
        unint64_t v43 = (void *)(*v9 + 24 * v31 + 8);
        unint64_t v44 = v40 - 4;
        while (*(_DWORD *)v44 == v42)
        {
          *uint64_t v39 = v44;
          *v43 -= 4;
          BOOL v45 = v44 == v38;
          v44 -= 4;
          if (v45) {
            goto LABEL_25;
          }
        }
        uint64_t v46 = v44 + 4;
      }
      unint64_t v47 = (unint64_t)(v46 - v38) >> 2;
      *(_DWORD *)(v33 + 4 * v3std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v47;
      unint64_t v48 = (float **)(v34 + 24 * v31);
      uint64_t v49 = *v48;
      char v50 = v48[1];
      double v51 = 0.0;
      while (v49 != v50)
      {
        float v52 = *v49++;
        double v51 = v51 + v52;
      }
      float v53 = pow(((double)(int)v47 + 5.0) / 6.0, v35);
      *(float *)&int v54 = v51 * v53;
      v36[v31++] = v54;
    }
    while (v31 != v8);
  }
}

void sub_1B1D6994C(_Unwind_Exception *a1)
{
  kaldi::quasar::SeevaBeamSearchBase::DecodeOutputData::~DecodeOutputData(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaBeamSearchBase::DecodeOutputData::~DecodeOutputData(kaldi::quasar::SeevaBeamSearchBase::DecodeOutputData *this)
{
  unint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 1std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 24);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)this;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      long double v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      long double v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::vector<int> v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v54 + 8 * v26;
  float v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1D69CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::vector<float>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      long double v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      long double v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::vector<int> v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v54 + 8 * v26;
  float v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1D69FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::vector<BOOL>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      long double v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      long double v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::vector<int> v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v54 + 8 * v26;
  float v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1D6A2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::vector<int>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      long double v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      long double v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::vector<int> v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v54 + 8 * v26;
  float v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1D6A5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void **)(a2 + 48);
  if (v3)
  {
    *(void *)(a2 + 56) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a2 + 24);
  if (v4)
  {
    *(void *)(a2 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v5;
    operator delete(v5);
  }
}

uint64_t std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__emplace_back_slow_path<int const&>(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  BOOL v14 = (kaldi::quasar::SeevaBeamSearchBase::Breadcrumb *)&v10[72 * v4];
  uint64_t v15 = v14;
  uint64_t v16 = &v10[72 * v9];
  kaldi::quasar::SeevaBeamSearchBase::Breadcrumb::Breadcrumb(v14, *a2);
  uint64_t v15 = (kaldi::quasar::SeevaBeamSearchBase::Breadcrumb *)((char *)v14 + 72);
  std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::~__split_buffer(&v13);
  return v11;
}

void sub_1B1D6A7B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

kaldi::quasar::SeevaBeamSearchBase::Breadcrumb *kaldi::quasar::SeevaBeamSearchBase::Breadcrumb::Breadcrumb(kaldi::quasar::SeevaBeamSearchBase::Breadcrumb *this, int a2)
{
  *((_OWORD *)this + 3) = 0u;
  uint64_t v3 = (char *)this + 48;
  *((void *)this + 8) = 0;
  *((_OWORD *)this + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  unint64_t v4 = (char *)this + 24;
  *(_OWORD *)this = 0u;
  std::vector<int>::size_type v5 = a2;
  std::vector<int>::vector(&v10, a2);
  uint64_t v6 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v6;
    operator delete(v6);
    *(void *)this = 0;
    *((void *)this + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
  *(std::vector<int> *)this = v10;
  std::vector<int>::vector(&v10, v5);
  uint64_t v7 = *(void **)v4;
  if (*(void *)v4)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
    *(void *)unint64_t v4 = 0;
    *((void *)v4 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
    *((void *)v4 + 2) = 0;
  }
  *((std::vector<int> *)this + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v10;
  std::vector<float>::vector(&v10, v5);
  unint64_t v8 = *(void **)v3;
  if (*(void *)v3)
  {
    *((void *)this + 7) = v8;
    operator delete(v8);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
    *((void *)v3 + 2) = 0;
  }
  *((std::vector<int> *)this + 2) = v10;
  return this;
}

void sub_1B1D6A8B4(_Unwind_Exception *exception_object)
{
  std::vector<int>::size_type v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 72;
      std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan>(a1, (void *)(v7 - 72), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 72;
      *((void *)&v16 + 1) -= 72;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::destroy[abi:ne180100](v4, i - 72);
  }
}

void *std::vector<kaldi::quasar::ComputeEngineBufferItf *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B1D6AB8C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void *std::vector<BOOL>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(void **)a2, 0, (void *)(*(void *)a2 + 8 * (*(void *)(a2 + 8) >> 6)), *(void *)(a2 + 8) & 0x3F, *(void *)(a2 + 8));
  }
  return a1;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(void *a1, void *a2, unint64_t a3, void *a4, int a5, uint64_t a6)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41) {
      unint64_t v8 = (v7 - 1) >> 6;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
  }
  uint64_t v9 = *a1 + 8 * (v6 >> 6);
  int v10 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  LODWORD(v6) = a2;
  unint64_t v7 = *(uint64_t **)a5;
  int v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || a2 != a4)
  {
    do
    {
      uint64_t v9 = 1 << v8;
      if ((*a1 >> a2)) {
        uint64_t v10 = *v7 | v9;
      }
      else {
        uint64_t v10 = *v7 & ~v9;
      }
      *unint64_t v7 = v10;
      BOOL v11 = v6 == 63;
      BOOL v12 = v6 == 63;
      uint64_t v6 = (a2 + 1);
      if (v11) {
        uint64_t v6 = 0;
      }
      if (v8 == 63)
      {
        int v8 = 0;
        *(void *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || v6 != a4);
    a1 = a3;
  }
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = kaldi::Matrix<float>::~Matrix(v4 - 40);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<kaldi::Matrix<float>>::__emplace_back_slow_path<>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v2) >> 3);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0x333333333333333) {
    unint64_t v7 = 0x666666666666666;
  }
  else {
    unint64_t v7 = v4;
  }
  long long v15 = a1 + 2;
  if (v7) {
    int v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v5, v7);
  }
  else {
    int v8 = 0;
  }
  BOOL v11 = v8;
  BOOL v12 = &v8[40 * v3];
  char v14 = &v8[40 * v7];
  kaldi::Matrix<float>::Matrix((uint64_t)v12);
  uint64_t v13 = v12 + 40;
  std::vector<kaldi::Matrix<float>>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1B1D6AEF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(int *a1, int *a2, int *a3, uint64_t **a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      BOOL v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    if (a2 == a3)
    {
      a3 = a2;
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v14 = *v13;
        uint64_t v15 = *a1;
        if (*(float *)(**a4 + 4 * v14) > *(float *)(**a4 + 4 * v15))
        {
          *uint64_t v13 = v15;
          *a1 = v14;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)a1, a4, v9, a1);
        }
        ++v13;
      }
      while (v13 != a3);
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      uint64_t v17 = a2 - 1;
      do
      {
        int v18 = *a1;
        uint64_t v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(a1, a4, v16);
        if (v17 == v19)
        {
          *uint64_t v19 = v18;
        }
        else
        {
          *uint64_t v19 = *v17;
          int *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(uint64_t result, uint64_t **a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v5 = ((uint64_t)a4 - result) >> 1;
      uint64_t v6 = v5 | 1;
      unint64_t v7 = (int *)(result + 4 * (v5 | 1));
      uint64_t v8 = v5 + 2;
      uint64_t v9 = **a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        uint64_t v6 = v8;
      }
      uint64_t v10 = *v7;
      uint64_t v11 = *a4;
      float v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) <= v12)
      {
        do
        {
          *a4 = v10;
          a4 = v7;
          if (v4 < v6) {
            break;
          }
          uint64_t v13 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          unint64_t v7 = (int *)(result + 4 * v6);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            uint64_t v6 = v14;
          }
          uint64_t v10 = *v7;
        }
        while (*(float *)(v9 + 4 * v10) <= v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(int *result, void **a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  uint64_t v6 = *a2;
  do
  {
    unint64_t v7 = result;
    result += v3 + 1;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3 && *(float *)(*v6 + 4 * *result) > *(float *)(*v6 + 4 * result[1]))
    {
      ++result;
      uint64_t v3 = v9;
    }
    *unint64_t v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (int *)(result + 4 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(int *)(a2 - 4);
    unint64_t v7 = (_DWORD *)(a2 - 4);
    int v8 = v9;
    uint64_t v10 = **a3;
    float v11 = *(float *)(v10 + 4 * v9);
    if (*(float *)(v10 + 4 * v6) > v11)
    {
      do
      {
        float v12 = v5;
        *unint64_t v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (int *)(result + 4 * v4);
        uint64_t v6 = *v5;
        unint64_t v7 = v12;
      }
      while (*(float *)(v10 + 4 * v6) > v11);
      *float v12 = v8;
    }
  }
  return result;
}

double quasar::PronGuessStats::PronGuessStats(quasar::PronGuessStats *this)
{
  *((void *)this + 8) = 0;
  *((void *)this + 7) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 25) = 0u;
  *((void *)this + 6) = (char *)this + 56;
  return result;
}

void quasar::PronGuessStats::addRecord(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if ((a4 & 0x80000000) != 0)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Detected latency overflow, change to int_max.", 45);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    uint64_t v4 = 0x7FFFFFFFLL;
  }
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 48, (const void **)a2);
  if (a1 + 56 == v8)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      *(void *)&long long v16 = *(void *)(a2 + 16);
    }
    *((void *)&v16 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a3 | (unint64_t)(v4 << 32);
    std::__tree<std::__value_type<std::string,quasar::PronGuessStats::Record>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PronGuessStats::Record>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PronGuessStats::Record>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::PronGuessStats::Record>>((uint64_t **)(a1 + 48), (const void **)__p, (uint64_t)__p);
    if (SBYTE7(v16) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v9 = v8;
    if (quasar::gLogLevel >= 5)
    {
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"dup stat: token=", 16);
      int v11 = *(char *)(a2 + 23);
      if (v11 >= 0) {
        float v12 = (const void *)a2;
      }
      else {
        float v12 = *(const void **)a2;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v13 = *(void *)(a2 + 8);
      }
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", source=", 9);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    if (*(_DWORD *)(v9 + 60) < (int)v4)
    {
      *(_DWORD *)(v9 + 56) = a3;
      *(_DWORD *)(v9 + 6std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = v4;
    }
  }
}

void sub_1B1D6B410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void quasar::G2P::~G2P(quasar::G2P *this)
{
  *(void *)this = &unk_1F0A58CA8;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)this + 112);
  std::locale::~locale((std::locale *)this + 13);
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  std::unique_ptr<quasar::PronCombinator>::reset[abi:ne180100]((uint64_t *)this + 5, 0);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void quasar::G2P::getProns(void *a1@<X0>, long long ***a2@<X2>, _DWORD *a3@<X3>, void *a4@<X4>, unsigned char *a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v8 = *a2;
  double v51 = a2[1];
  if (*a2 == v51)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      memset(v66, 0, sizeof(v66));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Empty tokenStrings received", 27);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v66);
    }
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
  else
  {
    uint64_t v50 = a7;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v65 = 0;
    do
    {
      long long v61 = 0uLL;
      uint64_t v62 = 0;
      std::string v58 = 0;
      std::string v59 = 0;
      unint64_t v60 = 0;
      uint64_t v15 = *v8;
      uint64_t v14 = v8[1];
      uint64_t v52 = v8;
      if (*v8 == v14)
      {
        if (quasar::gLogLevel >= 4)
        {
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v67 = 0u;
          memset(v66, 0, sizeof(v66));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Empty tokenStrings[0] received", 30);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v66);
        }
      }
      else
      {
        do
        {
          if (*((char *)v15 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v66, *(const std::string::value_type **)v15, *((void *)v15 + 1));
          }
          else
          {
            long long v16 = *v15;
            *(void *)&v66[16] = *((void *)v15 + 2);
            *(_OWORD *)uint64_t v66 = v16;
          }
          *(_DWORD *)&v66[24] = *((_DWORD *)v15 + 6);
          std::string __p = 0;
          std::vector<int> v56 = 0;
          uint64_t v57 = 0;
          long long v17 = (std::__shared_weak_count *)a4[1];
          v54[0] = *a4;
          v54[1] = v17;
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v18 = a1;
          int HumanReadableProns = quasar::G2P::getHumanReadableProns(a1, (uint64_t)v66, (uint64_t)&__p, a3, (uint64_t)v54, a5, a6);
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          if (HumanReadableProns == -1)
          {
            int v21 = 5;
          }
          else
          {
            long long v20 = v59;
            if (__p == v56)
            {
              long long v22 = v58;
              while (v20 != v22)
              {
                v20 -= 3;
                v82[0] = v20;
                std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](v82);
              }
              int v21 = 4;
            }
            else if ((unint64_t)v59 >= v60)
            {
              long long v22 = (void **)std::vector<std::vector<quasar::PronChoice>>::__push_back_slow_path<std::vector<quasar::PronChoice> const&>((uint64_t *)&v58, (uint64_t *)&__p);
              int v21 = 0;
            }
            else
            {
              unint64_t *v59 = 0;
              v20[1] = 0;
              _DWORD v20[2] = 0;
              std::vector<quasar::PronChoice>::__init_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(v20, (uint64_t)__p, (uint64_t)v56, 0xCCCCCCCCCCCCCCCDLL * ((v56 - (unsigned char *)__p) >> 3));
              int v21 = 0;
              long long v22 = v20 + 3;
            }
            std::string v59 = v22;
          }
          a1 = v18;
          v82[0] = &__p;
          std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](v82);
          if ((v66[23] & 0x80000000) != 0) {
            operator delete(*(void **)v66);
          }
          if (v21 != 5 && v21) {
            break;
          }
          v15 += 2;
        }
        while (v15 != v14);
        long long v23 = (int *)v18[5];
        std::string::basic_string[abi:ne180100]<0>(&__p, ".");
        quasar::PronCombinator::operator()(v23, &v58, (uint64_t *)v66);
        std::vector<quasar::PronChoice>::__vdeallocate((uint64_t *)&v61);
        long long v61 = *(_OWORD *)v66;
        uint64_t v62 = *(void *)&v66[16];
        memset(v66, 0, 24);
        v82[0] = (void **)v66;
        std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](v82);
        if (SHIBYTE(v57) < 0) {
          operator delete(__p);
        }
        unint64_t v24 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v61 + 1) - v61) >> 3));
        if (*((void *)&v61 + 1) == (void)v61) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v24;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *,false>(v61, *((uint64_t *)&v61 + 1), (uint64_t)&__p, v25, 1);
        long long v26 = v64;
        if ((unint64_t)v64 >= v65)
        {
          uint64_t v27 = std::vector<std::vector<quasar::PronChoice>>::__push_back_slow_path<std::vector<quasar::PronChoice> const&>((uint64_t *)&v63, (uint64_t *)&v61);
        }
        else
        {
          *uint64_t v64 = 0;
          v26[1] = 0;
          v26[2] = 0;
          std::vector<quasar::PronChoice>::__init_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(v26, v61, *((uint64_t *)&v61 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v61 + 1) - v61) >> 3));
          uint64_t v27 = (uint64_t)(v26 + 3);
        }
        uint64_t v64 = (void *)v27;
      }
      *(void *)uint64_t v66 = &v58;
      std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
      *(void *)uint64_t v66 = &v61;
      std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
      uint64_t v8 = v52 + 4;
    }
    while (v52 + 4 != v51);
    *(_OWORD *)&v66[8] = 0uLL;
    *(void *)uint64_t v66 = &v66[8];
    uint64_t v29 = (uint64_t)v63;
    long long v28 = v64;
    if (v64 == v63)
    {
      *uint64_t v50 = 0;
      v50[1] = 0;
      void v50[2] = 0;
    }
    else
    {
      uint64_t v53 = (uint64_t)a1;
      unint64_t v30 = 0;
      do
      {
        unint64_t v31 = v29 + 24 * v30;
        long long v32 = *(int **)v31;
        unint64_t v33 = *(int **)(v31 + 8);
        if (*(int **)v31 != v33)
        {
          do
          {
            *(void *)&long long v61 = v32;
            uint64_t v34 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v66, v32, (uint64_t)&std::piecewise_construct, (_DWORD **)&v61);
            std::vector<std::vector<quasar::PronChoice>>::resize((uint64_t *)v34 + 5, 0xAAAAAAAAAAAAAAABLL * (v64 - v63));
            *(void *)&long long v61 = v32;
            long double v35 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v66, v32, (uint64_t)&std::piecewise_construct, (_DWORD **)&v61)[5];
            uint64_t v36 = &v35[3 * v30];
            unint64_t v38 = (_DWORD *)v36[1];
            unint64_t v37 = v36[2];
            uint64_t v39 = v36 + 1;
            if ((unint64_t)v38 >= v37)
            {
              uint64_t v40 = std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice const&>(&v35[3 * v30], (uint64_t)v32);
            }
            else
            {
              quasar::PronChoice::PronChoice(v38, (uint64_t)v32);
              uint64_t v40 = (uint64_t)(v38 + 10);
              *uint64_t v39 = (uint64_t)(v38 + 10);
            }
            *uint64_t v39 = v40;
            v32 += 10;
          }
          while (v32 != v33);
          uint64_t v29 = (uint64_t)v63;
          long long v28 = v64;
        }
        ++v30;
      }
      while (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v28 - v29) >> 3) > v30);
      uint64_t v41 = *(unsigned char **)v66;
      v50[1] = 0;
      void v50[2] = 0;
      *uint64_t v50 = 0;
      if (v41 != &v66[8])
      {
        do
        {
          quasar::G2P::selectTopProns(v53, (uint64_t)(v41 + 40), (uint64_t *)&v61);
          unint64_t v42 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v61 + 1) - v61) >> 3);
          unint64_t v43 = *(int *)(v53 + 100);
          if (v42 <= v43)
          {
            unint64_t v45 = 126 - 2 * __clz(v42);
            if (*((void *)&v61 + 1) == (void)v61) {
              uint64_t v46 = 0;
            }
            else {
              uint64_t v46 = v45;
            }
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *,false>(v61, *((uint64_t *)&v61 + 1), (uint64_t)&__p, v46, 1);
          }
          else
          {
            if (v43)
            {
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>,std::__wrap_iter<quasar::PronChoice *>>(v61, v61 + 40 * (int)v43, *((uint64_t *)&v61 + 1), (uint64_t)&__p);
              int v44 = *(_DWORD *)(v53 + 100);
            }
            else
            {
              int v44 = 0;
            }
            std::vector<quasar::PronChoice>::resize((uint64_t *)&v61, v44);
          }
          std::vector<quasar::PronChoice>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::PronChoice*>,std::__wrap_iter<quasar::PronChoice*>>(v50, v50[1], v61, *((uint64_t *)&v61 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v61 + 1) - v61) >> 3));
          std::string v58 = (void **)&v61;
          std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v58);
          uint64_t v47 = (void *)*((void *)v41 + 1);
          if (v47)
          {
            do
            {
              unint64_t v48 = v47;
              uint64_t v47 = (void *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              unint64_t v48 = (unsigned char *)*((void *)v41 + 2);
              BOOL v49 = *(void *)v48 == (void)v41;
              uint64_t v41 = v48;
            }
            while (!v49);
          }
          uint64_t v41 = v48;
        }
        while (v48 != &v66[8]);
      }
    }
    std::__tree<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>>>::destroy((uint64_t)v66, *(char **)&v66[8]);
    *(void *)uint64_t v66 = &v63;
    std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
  }
}

void sub_1B1D6BAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

uint64_t quasar::G2P::getHumanReadableProns(void *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, unsigned char *a6, uint64_t a7)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v67 = *(std::string *)a2;
  }
  int v68 = *(_DWORD *)(a2 + 24);
  __int16 v66 = 0;
  uint64_t v14 = *(atomic_ullong **)(a5 + 8);
  v65[0] = *(quasar::LmeData **)a5;
  v65[1] = (quasar::LmeData *)v14;
  if (v14) {
    atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
  }
  int v16 = quasar::G2P::lookupHumanReadableProns(a1, (uint64_t)&v67, (uint64_t *)a3, (uint64_t)a4, v65, (unsigned char *)&v66 + 1, (BOOL *)&v66, a7);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14);
  }
  if (v16 == -1)
  {
    uint64_t v31 = 0xFFFFFFFFLL;
    goto LABEL_36;
  }
  if (HIBYTE(v66))
  {
    char v63 = 1;
    kaldi::Timer::Reset((kaldi::Timer *)&v61, v15);
    uint64_t v64 = 0;
    (*(void (**)(void **__return_ptr, void *, std::string *, uint64_t))(*a1 + 16))(v44, a1, &v67, a7);
    std::vector<quasar::PronChoice>::__vdeallocate((uint64_t *)a3);
    *(_OWORD *)a3 = *(_OWORD *)v44;
    *(void **)(a3 + 16) = __p[0];
    v44[1] = 0;
    __p[0] = 0;
    v44[0] = 0;
    v69[0] = v44;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](v69);
    v44[0] = 0;
    v44[1] = 0;
    __p[0] = 0;
    long long v17 = *(int **)a3;
    long long v18 = *(int **)(a3 + 8);
    while (v17 != v18)
    {
      if (quasar::pronTypeMatchesPronRequest(*v17, a7))
      {
        long long v19 = (char *)v44[1];
        if (v44[1] >= __p[0])
        {
          long long v20 = (void *)std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice const&>((uint64_t *)v44, (uint64_t)v17);
        }
        else
        {
          quasar::PronChoice::PronChoice((_DWORD *)v44[1], (uint64_t)v17);
          long long v20 = v19 + 40;
        }
        v44[1] = v20;
      }
      v17 += 10;
    }
    if (v44 != (void **)a3) {
      std::vector<quasar::PronChoice>::__assign_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(a3, (uint64_t)v44[0], (uint64_t)v44[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v44[1] - (char *)v44[0]) >> 3));
    }
    v69[0] = v44;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](v69);
    *a6 = 1;
    uint64_t v22 = *(void *)a3;
    uint64_t v23 = *(void *)(a3 + 8);
    if (*(void *)a3 != v23)
    {
      double Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v21);
      double v25 = v61;
      kaldi::Timer::Reset((kaldi::Timer *)&v61, v26);
      quasar::PronGuessStats::addRecord((uint64_t)a4, (uint64_t)&v67, 3u, (int)((Seconds - v25) * 1000000.0));
      quasar::fromPronChoices((uint64_t *)a3, (uint64_t)v44);
      int updated = quasar::G2P::updateCache((uint64_t)a1, (uint64_t)&v67, (uint64_t)v44);
      v69[0] = v44;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v69);
      int v30 = (int)((kaldi::Timer::GetSeconds((kaldi::Timer *)5, v28) - v61) * 1000000.0);
LABEL_33:
      quasar::G2P::updateCacheSetStats(v29, (uint64_t)&v67, v30, updated, v22 == v23, a4);
      goto LABEL_34;
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v46 = 0u;
      *(_OWORD *)int v44 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
      long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Failed to generated pronunciations for word=", 44);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v33 = &v67;
      }
      else {
        unint64_t v33 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v67.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, size);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v44);
    }
    ++a4[5];
    if (*(unsigned char *)(a1[1] + 8))
    {
      v44[0] = 0;
      v44[1] = 0;
      __p[0] = 0;
      int updated = quasar::G2P::updateCache((uint64_t)a1, (uint64_t)&v67, (uint64_t)v44);
      v69[0] = v44;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v69);
      int v30 = 0;
      goto LABEL_33;
    }
  }
LABEL_34:
  if (!(_BYTE)v66)
  {
    uint64_t v36 = *(quasar::LmeData **)a5;
    if (v36)
    {
      if (a7 == 2)
      {
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v43, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
        }
        else {
          std::string v43 = v67;
        }
        std::string::basic_string[abi:ne180100]<0>(v41, "");
        quasar::LmeDataFactoryBase::PronSet::PronSet(&v61, a3);
        quasar::LmeDataFactoryBase::Word::Word(v44, &v43, v41, 1, &v61);
        quasar::LmeData::addWordToEmbeddingCache(v36, (std::string *)v44, 3);
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v47 + 8, (char *)v48);
        if (SHIBYTE(v46) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v44[0]);
        }
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v61, v62);
        if (v42 < 0) {
          operator delete(v41[0]);
        }
        if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_35;
        }
        unint64_t v37 = (void *)v43.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v40, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
        }
        else {
          std::string v40 = v67;
        }
        std::string::basic_string[abi:ne180100]<0>(v38, "");
        quasar::LmeDataFactoryBase::PronSet::PronSet(&v61, a3);
        quasar::LmeDataFactoryBase::Word::Word(v44, &v40, v38, 1, &v61);
        quasar::LmeData::addWordToPronCache(v36, (std::string *)v44, 3);
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v47 + 8, (char *)v48);
        if (SHIBYTE(v46) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v44[0]);
        }
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v61, v62);
        if (v39 < 0) {
          operator delete(v38[0]);
        }
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_35;
        }
        unint64_t v37 = (void *)v40.__r_.__value_.__r.__words[0];
      }
      operator delete(v37);
    }
  }
LABEL_35:
  uint64_t v31 = 0;
LABEL_36:
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  return v31;
}

void sub_1B1D6C168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36)
{
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<quasar::PronChoice>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<quasar::PronChoice>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t quasar::G2P::selectTopProns@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v14 = result;
  unint64_t v4 = 0;
  BOOL v5 = 0;
  unint64_t v6 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  do
  {
    if (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *a3) >> 3) >= *(int *)(v14 + 100)) {
      break;
    }
    uint64_t v8 = *(void **)a2;
    uint64_t v7 = *(void **)(a2 + 8);
    if (*(void **)a2 == v7)
    {
      int v9 = 0;
      uint64_t v13 = *(void **)a2;
    }
    else
    {
      int v9 = 0;
      do
      {
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8[1] - *v8) >> 3) <= v6)
        {
          ++v9;
        }
        else
        {
          uint64_t v10 = *a3;
          if ((_DWORD *)*a3 != v5)
          {
            uint64_t v11 = *v8 + 40 * v6;
            while (1)
            {
              double result = quasar::PronChoice::operator==(v10, v11);
              if (result) {
                break;
              }
              v10 += 40;
              if ((_DWORD *)v10 == v5) {
                goto LABEL_13;
              }
            }
            BOOL v5 = (_DWORD *)v10;
LABEL_13:
            unint64_t v4 = (_DWORD *)a3[1];
          }
          if (v5 == v4)
          {
            uint64_t v12 = *v8 + 40 * v6;
            if ((unint64_t)v4 >= a3[2])
            {
              double result = std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice const&>(a3, v12);
              unint64_t v4 = (_DWORD *)result;
            }
            else
            {
              double result = (uint64_t)quasar::PronChoice::PronChoice(v4, v12);
              v4 += 10;
              a3[1] = (uint64_t)v4;
            }
            a3[1] = (uint64_t)v4;
          }
          BOOL v5 = v4;
        }
        v8 += 3;
      }
      while (v8 != v7);
      uint64_t v8 = *(void **)a2;
      uint64_t v13 = *(void **)(a2 + 8);
    }
    ++v6;
  }
  while (0xAAAAAAAAAAAAAAABLL * (v13 - v8) != v9);
  return result;
}

void sub_1B1D6C4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::PronChoice>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<quasar::PronChoice>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 40 * a2;
    while (v3 != v7)
    {
      if (*(char *)(v3 - 9) < 0) {
        operator delete(*(void **)(v3 - 32));
      }
      v3 -= 40;
    }
    a1[1] = v7;
  }
}

void quasar::G2P::convertPhonemePronsToAllProns(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    unint64_t v5 = 0;
    unint64_t v6 = (unint64_t *)(a2 + 2);
    do
    {
      int v7 = 0;
      int v8 = 1;
      if (v5 >= *v6)
      {
        unint64_t v5 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,int>(a2, &v8, v2, &v7);
      }
      else
      {
        std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,int>((uint64_t)v6, v5, &v8, v2, &v7);
        v5 += 40;
        a2[1] = v5;
      }
      a2[1] = v5;
      v2 += 24;
    }
    while (v2 != v3);
  }
}

void sub_1B1D6C640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::G2P::lookupHumanReadableProns(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, quasar::LmeData **a5, unsigned char *a6, BOOL *a7, int a8)
{
  char v94 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v93, (clockid_t)a2);
  uint64_t v95 = 0;
  *a7 = 0;
  *a6 = 0;
  uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
  char v18 = v17;
  uint64_t v19 = *(void *)(a2 + 8);
  if ((v17 & 0x80u) == 0) {
    uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v20 = *(void *)(a2 + 8);
  }
  if (!v20) {
    return 0xFFFFFFFFLL;
  }
  clockid_t v21 = (std::string *)a1[3];
  if (v21)
  {
    quasar::LmeDataFactory::applyG2PRewrite(v21, a2);
    uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v19 = *(void *)(a2 + 8);
    char v18 = *(unsigned char *)(a2 + 23);
  }
  if (v18 < 0) {
    uint64_t v17 = v19;
  }
  if (!v17) {
    return 0xFFFFFFFFLL;
  }
  if (!*a5) {
    goto LABEL_49;
  }
  quasar::LmeDataFactoryBase::PronSet::PronSet(&v81);
  uint64_t v22 = *a5;
  if (a8 == 2)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v92 = *(std::string *)a2;
    }
    std::string::basic_string[abi:ne180100]<0>(v90, "");
    uint64_t v87 = 0;
    v88 = 0;
    uint64_t v89 = 0;
    quasar::LmeDataFactoryBase::Word::Word(v64, &v92, v90, 0, &v87);
    *a7 = quasar::LmeData::lookupWordEmbeddingCache(v22, (const quasar::LmeDataFactoryBase::Word *)v64, 3, (char **)&v81);
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v67 + 8, (char *)v68);
    if (SHIBYTE(v66) < 0) {
      operator delete(*((void **)&v65 + 1));
    }
    if (SBYTE7(v65) < 0) {
      operator delete(v64[0]);
    }
    v63[0] = (void **)&v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v63);
    if (v91 < 0) {
      operator delete(v90[0]);
    }
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    uint64_t v23 = (void *)v92.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v86 = *(std::string *)a2;
    }
    std::string::basic_string[abi:ne180100]<0>(v84, "");
    uint64_t v87 = 0;
    v88 = 0;
    uint64_t v89 = 0;
    quasar::LmeDataFactoryBase::Word::Word(v64, &v86, v84, 0, &v87);
    *a7 = quasar::LmeData::lookupWordPronCache(v22, (const quasar::LmeDataFactoryBase::Word *)v64, 3, (char **)&v81);
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v67 + 8, (char *)v68);
    if (SHIBYTE(v66) < 0) {
      operator delete(*((void **)&v65 + 1));
    }
    if (SBYTE7(v65) < 0) {
      operator delete(v64[0]);
    }
    v63[0] = (void **)&v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v63);
    if (v85 < 0) {
      operator delete(v84[0]);
    }
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    uint64_t v23 = (void *)v86.__r_.__value_.__r.__words[0];
  }
  operator delete(v23);
LABEL_35:
  if (*a7)
  {
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v81);
    clockid_t v26 = (int *)(v25 + 1);
    uint64_t v27 = (int *)*v25;
    if ((void *)*v25 != v25 + 1)
    {
      unint64_t v28 = a3[1];
      do
      {
        if (v28 >= a3[2])
        {
          unint64_t v28 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType const&,std::string const&,float const&>(a3, v27 + 8, (uint64_t)(v27 + 10), v27 + 16);
        }
        else
        {
          std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType const&,std::string const&,float const&>((uint64_t)(a3 + 2), v28, v27 + 8, (uint64_t)(v27 + 10), v27 + 16);
          v28 += 40;
          a3[1] = v28;
        }
        a3[1] = v28;
        uint64_t v29 = (int *)*((void *)v27 + 1);
        if (v29)
        {
          do
          {
            int v30 = v29;
            uint64_t v29 = *(int **)v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            int v30 = (int *)*((void *)v27 + 2);
            BOOL v31 = *(void *)v30 == (void)v27;
            uint64_t v27 = v30;
          }
          while (!v31);
        }
        uint64_t v27 = v30;
      }
      while (v30 != v26);
    }
    double Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v24);
    quasar::PronGuessStats::addRecord(a4, a2, 2u, (int)((Seconds - v93[0]) * 1000000.0));
  }
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v81, *((char **)&v81 + 1));
LABEL_49:
  if (!*a7)
  {
    kaldi::Timer::Reset((kaldi::Timer *)v93, v16);
    long long v81 = 0u;
    long long v82 = 0u;
    int v83 = 1065353216;
    uint64_t v33 = a1[3];
    if (v33)
    {
      int v34 = quasar::LmeDataFactory::lookUpProns(v33, a2, (uint64_t)&v81);
      int v36 = *((void *)&v82 + 1) ? v34 : 0;
      if (v36 == 1)
      {
        if (quasar::gLogLevel >= 5)
        {
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          *(_OWORD *)uint64_t v64 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
          unint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Token=", 6);
          int v38 = *(char *)(a2 + 23);
          if (v38 >= 0) {
            uint64_t v39 = a2;
          }
          else {
            uint64_t v39 = *(void *)a2;
          }
          if (v38 >= 0) {
            uint64_t v40 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            uint64_t v40 = *(void *)(a2 + 8);
          }
          uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
          char v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" found in Lexicon, prons=", 25);
          v63[0] = (void **)", ";
          v63[1] = (void **)2;
          quasar::join<std::unordered_set<std::string>>((uint64_t)&v81, (uint64_t *)v63);
          if (v89 >= 0) {
            std::string v43 = (void **)&v87;
          }
          else {
            std::string v43 = v87;
          }
          if (v89 >= 0) {
            uint64_t v44 = HIBYTE(v89);
          }
          else {
            uint64_t v44 = (uint64_t)v88;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
          if (SHIBYTE(v89) < 0) {
            operator delete(v87);
          }
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v64);
        }
        unint64_t v45 = (void *)v82;
        if ((void)v82)
        {
          unint64_t v46 = a3[1];
          do
          {
            LODWORD(v64[0]) = 1;
            LODWORD(v87) = 0;
            if (v46 >= a3[2])
            {
              unint64_t v46 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,int>(a3, (int *)v64, (uint64_t)(v45 + 2), (int *)&v87);
            }
            else
            {
              std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,int>((uint64_t)(a3 + 2), v46, (int *)v64, (uint64_t)(v45 + 2), (int *)&v87);
              v46 += 40;
              a3[1] = v46;
            }
            a3[1] = v46;
            unint64_t v45 = (void *)*v45;
          }
          while (v45);
        }
        double v47 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v35);
        quasar::PronGuessStats::addRecord(a4, a2, 0, (int)((v47 - v93[0]) * 1000000.0));
LABEL_107:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v81);
        return 0;
      }
    }
    char v62 = 0;
    char v48 = (*(uint64_t (**)(void *, uint64_t, char *))(*a1 + 40))(a1, a2, &v62);
    if (v62) {
      *(unsigned char *)(a4 + 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = 1;
    }
    if (v48)
    {
      kaldi::Timer::Reset((kaldi::Timer *)v93, v49);
      int v61 = 0;
      quasar::G2P::getFromCache((uint64_t)a1, a2, (uint64_t)&v61);
      if (v87 == v88)
      {
        switch(v61)
        {
          case 0:
            ++*(_DWORD *)a4;
            goto LABEL_104;
          case 1:
            goto LABEL_104;
          case 2:
            ++*(_DWORD *)(a4 + 4);
            goto LABEL_104;
          case 5:
            ++*(_DWORD *)(a4 + 36);
            break;
          default:
            ++*(_DWORD *)(a4 + 12);
LABEL_104:
            *a6 = 1;
            break;
        }
      }
      else
      {
        double v51 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v50);
        quasar::PronGuessStats::addRecord(a4, a2, 1u, (int)((v51 - v93[0]) * 1000000.0));
        quasar::toPronChoices((uint64_t *)&v87, (uint64_t *)v64);
        std::vector<quasar::PronChoice>::__vdeallocate(a3);
        *(_OWORD *)a3 = *(_OWORD *)v64;
        a3[2] = v65;
        v64[1] = 0;
        *(void *)&long long v65 = 0;
        v64[0] = 0;
        v63[0] = v64;
        std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](v63);
        if (quasar::gLogLevel >= 5)
        {
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          *(_OWORD *)uint64_t v64 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
          int v52 = *(char *)(a2 + 23);
          if (v52 >= 0) {
            uint64_t v53 = a2;
          }
          else {
            uint64_t v53 = *(void *)a2;
          }
          if (v52 >= 0) {
            uint64_t v54 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            uint64_t v54 = *(void *)(a2 + 8);
          }
          long long v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, v53, v54);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" found in PronCache", 19);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v64);
        }
      }
      v64[0] = &v87;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
      goto LABEL_107;
    }
    if (quasar::gLogLevel >= 5)
    {
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      *(_OWORD *)uint64_t v64 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
      long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Skipping invalid token=", 23);
      int v57 = *(char *)(a2 + 23);
      if (v57 >= 0) {
        uint64_t v58 = a2;
      }
      else {
        uint64_t v58 = *(void *)a2;
      }
      if (v57 >= 0) {
        uint64_t v59 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v59 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v58, v59);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v64);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v81);
    return 0xFFFFFFFFLL;
  }
  return 0;
}

void sub_1B1D6CE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  a13 = v57 - 208;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a47);
  _Unwind_Resume(a1);
}

uint64_t quasar::join<std::unordered_set<std::string>>(uint64_t a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::unordered_set<std::string>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B1D6D110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::G2P::getFromCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  quasar::G2P::generateCacheKey(a1, a2, &__p);
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v4 + 32))(v4, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1D6D1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::toPronChoices(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      quasar::PronChoice::fromString((std::string *)(v3 + v5), (uint64_t)&v11);
      unint64_t v7 = a2[1];
      if (v7 >= a2[2])
      {
        uint64_t v10 = std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice>(a2, (uint64_t)&v11);
      }
      else
      {
        *(_DWORD *)unint64_t v7 = v11;
        char v8 = (std::string *)(v7 + 8);
        if (SHIBYTE(v13) < 0)
        {
          std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
        }
        else
        {
          long long v9 = __p;
          *(void *)(v7 + 24) = v13;
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
        }
        *(_DWORD *)(v7 + 32) = v14;
        uint64_t v10 = v7 + 40;
        a2[1] = v7 + 40;
      }
      a2[1] = v10;
      if (SHIBYTE(v13) < 0) {
        operator delete((void *)__p);
      }
      ++v6;
      uint64_t v3 = *a1;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v6);
  }
}

void sub_1B1D6D2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v16 + 8) = v17;
  if (a16 < 0) {
    operator delete(__p);
  }
  a10 = v16;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t quasar::G2P::updateCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  quasar::G2P::generateCacheKey(a1, a2, &__p);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)v4 + 16))(v4, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1B1D6D388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::fromPronChoices(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      quasar::PronChoice::toString((uint64_t *)__p, (quasar::PronChoice *)(v3 + v5));
      unint64_t v8 = *(void *)(a2 + 8);
      unint64_t v7 = *(void *)(a2 + 16);
      if (v8 >= v7)
      {
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(void *)a2) >> 3);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(void *)a2) >> 3);
        if (2 * v12 > v11) {
          unint64_t v11 = 2 * v12;
        }
        if (v12 >= 0x555555555555555) {
          unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v13 = v11;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v13) {
          int v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v13);
        }
        else {
          int v14 = 0;
        }
        clockid_t v15 = v14 + v10;
        __v.__first_ = v14;
        __v.__begin_ = v15;
        __v.__end_cap_.__value_ = &v14[v13];
        long long v16 = *(_OWORD *)__p;
        v15->__r_.__value_.__r.__words[2] = v20;
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        __p[1] = 0;
        std::string::size_type v20 = 0;
        __p[0] = 0;
        __v.__end_ = v15 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        uint64_t v17 = *(void *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        int v18 = SHIBYTE(v20);
        *(void *)(a2 + 8) = v17;
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v9 = *(_OWORD *)__p;
        *(void *)(v8 + 16) = v20;
        *(_OWORD *)unint64_t v8 = v9;
        *(void *)(a2 + 8) = v8 + 24;
      }
      ++v6;
      uint64_t v3 = *a1;
      v5 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3) > v6);
  }
}

void sub_1B1D6D540(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

void quasar::G2P::updateCacheSetStats(uint64_t a1, uint64_t a2, int a3, int a4, int a5, _DWORD *a6)
{
  if (a4 == 2)
  {
    ++a6[2];
  }
  else if (a4 == 1)
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(v12, 0, sizeof(v12));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"in backoff window, skip updating pron cache for token ", 54);
      int v8 = *(char *)(a2 + 23);
      if (v8 >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(void *)a2;
      }
      if (v8 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v10 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v12);
    }
  }
  else if (a4)
  {
    ++a6[4];
  }
  else if (a5)
  {
    ++a6[8];
  }
  else
  {
    int v11 = a6[7] + a3;
    ++a6[6];
    a6[7] = v11;
  }
}

void sub_1B1D6D684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::G2P::generateCacheKey(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 48), (const void **)(a1 + 72), (uint64_t)&v21);
  std::to_string(&v20, *(_DWORD *)(a1 + 96));
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v6 = &v20;
  }
  else {
    unint64_t v6 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v20.__r_.__value_.__l.__size_;
  }
  int v8 = std::string::append(&v21, (const std::string::value_type *)v6, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  std::to_string(&v19, v10);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v11 = &v19;
  }
  else {
    int v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v12 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v12 = v19.__r_.__value_.__l.__size_;
  }
  unint64_t v13 = std::string::append(&v22, (const std::string::value_type *)v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  int v15 = *(char *)(a2 + 23);
  if (v15 >= 0) {
    long long v16 = (const std::string::value_type *)a2;
  }
  else {
    long long v16 = *(const std::string::value_type **)a2;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a2 + 8);
  }
  int v18 = std::string::append(&v23, v16, v17);
  *a3 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1B1D6D81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void quasar::getAlternativeSpelledProns(uint64_t *a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  std::string v23 = 0;
  clockid_t v24 = 0;
  unint64_t v25 = 0;
  if (a1[1] != *a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v24;
      if ((unint64_t)v24 >= v25)
      {
        unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3);
        unint64_t v8 = v7 + 1;
        if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v25 - (void)v23) >> 3) > v8) {
          unint64_t v8 = 0x5555555555555556 * ((uint64_t)(v25 - (void)v23) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)v23) >> 3) >= 0x555555555555555) {
          unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v9 = v8;
        }
        uint64_t v29 = &v25;
        if (v9) {
          int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v25, v9);
        }
        else {
          int v10 = 0;
        }
        int v11 = &v10[24 * v7];
        __p[0] = v10;
        __p[1] = v11;
        unint64_t v28 = &v10[24 * v9];
        *(void *)int v11 = 0;
        *((void *)v11 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
        *((void *)v11 + 2) = 0;
        uint64_t v27 = v11 + 24;
        std::vector<std::vector<std::string>>::__swap_out_circular_buffer((uint64_t *)&v23, __p);
        unint64_t v6 = v24;
        std::__split_buffer<std::vector<std::string>>::~__split_buffer(__p);
      }
      else
      {
        *(void *)clockid_t v24 = 0;
        *((void *)v5 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
        unint64_t v6 = v5 + 24;
        *((void *)v5 + 2) = 0;
      }
      clockid_t v24 = v6;
      uint64_t v12 = *a1;
      uint64_t v13 = *a1 + 72 * v4;
      uint64_t v14 = *(void *)(v13 + 24);
      uint64_t v15 = *(void *)(v13 + 32);
      if (v14 != v15)
      {
        do
        {
          long long v16 = v24;
          std::string::size_type v17 = (uint64_t *)(v24 - 24);
          int v18 = (long long *)(v14 + 8);
          unint64_t v19 = *((void *)v24 - 2);
          if (v19 >= *((void *)v24 - 1))
          {
            uint64_t v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v17, v18);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v17, v18);
            uint64_t v20 = v19 + 24;
          }
          *((void *)v16 - 2) = v20;
          v14 += 40;
        }
        while (v14 != v15);
        uint64_t v12 = *a1;
      }
      ++v4;
    }
    while (0x8E38E38E38E38E39 * ((a1[1] - v12) >> 3) > v4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  quasar::PronCombinator::operator()(a2, &v23, (uint64_t)__p, a3);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = &v23;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1D6DAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  a23 = &a12;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

uint64_t quasar::G2P::tokenIsLegal(quasar::G2P *this, const Token *a2, BOOL *a3)
{
  return 1;
}

void std::vector<quasar::PronChoice>::__assign_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void *)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::PronChoice>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>(v8, a2, a3, *(_DWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 8) - v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((*(void *)(a1 + 8) - v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::PronChoice *>,std::__wrap_iter<quasar::PronChoice *>,quasar::PronChoice *,0>(a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>(v8, v13, a3, *(_DWORD **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::PronChoice *>,std::__wrap_iter<quasar::PronChoice *>,quasar::PronChoice *,0>(a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 9) < 0) {
        operator delete(*(void **)(v16 - 32));
      }
      v16 -= 40;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1D6DC60(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1D6DC68(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::PronChoice>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<quasar::PronChoice>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_OWORD *std::__tree<std::__value_type<std::string,quasar::PronGuessStats::Record>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PronGuessStats::Record>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PronGuessStats::Record>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::PronGuessStats::Record>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x40uLL);
    void v6[2] = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v8 = *(void *)(a3 + 16);
    uint64_t v9 = *(void *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *((void *)v6 + 6) = v8;
    *((void *)v6 + 7) = v9;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t std::vector<std::vector<quasar::PronChoice>>::__push_back_slow_path<std::vector<quasar::PronChoice> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  std::string::size_type v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<quasar::PronChoice>::__init_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(v11, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<quasar::PronChoice>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer(v14);
  return v12;
}

void sub_1B1D6DE50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<quasar::PronChoice>::__init_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1D6DECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::PronChoice>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::PronChoice>>,std::reverse_iterator<std::vector<quasar::PronChoice>*>,std::reverse_iterator<std::vector<quasar::PronChoice>*>,std::reverse_iterator<std::vector<quasar::PronChoice>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::PronChoice>>,std::reverse_iterator<std::vector<quasar::PronChoice>*>,std::reverse_iterator<std::vector<quasar::PronChoice>*>,std::reverse_iterator<std::vector<quasar::PronChoice>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice>>,std::reverse_iterator<std::vector<quasar::PronChoice>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice>>,std::reverse_iterator<std::vector<quasar::PronChoice>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice>>,std::reverse_iterator<std::vector<quasar::PronChoice>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice>>,std::reverse_iterator<std::vector<quasar::PronChoice>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<quasar::PronChoice>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *,false>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  uint64_t v24 = a2;
  unint64_t v25 = a1;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = v9 - v10;
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v24 = v9 - 40;
          if (*(float *)(v9 - 8) < *(float *)(v10 + 32)) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>((uint64_t *)&v25, &v24);
          }
          break;
        case 3uLL:
          uint64_t v24 = v9 - 40;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v10, v10 + 40, v9 - 40);
          break;
        case 4uLL:
          uint64_t v24 = v9 - 40;
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v10, v10 + 40, v10 + 80, v9 - 40);
          break;
        case 5uLL:
          uint64_t v24 = v9 - 40;
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v10, v10 + 40, v10 + 80, v10 + 120, v9 - 40);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 959)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v10, v9);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v10, v9);
      }
      return;
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 40;
    if ((unint64_t)v12 >= 0x1401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v10, v10 + 40 * (v13 >> 1), v15);
      uint64_t v16 = v24;
      uint64_t v17 = 5 * v14;
      uint64_t v18 = 40 * v14;
      uint64_t v19 = 40 * v14 - 40;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v25 + 40, v25 + v19, v24 - 80);
      v18 += 40;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v25 + 80, v25 + v18, v16 - 120);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v25 + v19, v25 + 8 * v17, v25 + v18);
      unint64_t v23 = v25 + 8 * v17;
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *>((uint64_t *)&v25, (uint64_t *)&v23);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v10 + 40 * (v13 >> 1), v10, v15);
    }
    if (a5)
    {
      uint64_t v9 = v24;
    }
    else
    {
      uint64_t v9 = v24;
      if (*(float *)(v25 - 8) >= *(float *)(v25 + 32))
      {
        uint64_t v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PronChoice *,std::__less<void,void> &>(v25, v24);
        goto LABEL_22;
      }
    }
    unint64_t v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PronChoice *,std::__less<void,void> &>(v25, v9);
    if ((v21 & 1) == 0) {
      goto LABEL_20;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v25, v20);
    uint64_t v10 = v20 + 40;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v20 + 40, v9))
    {
      if (v22) {
        return;
      }
      uint64_t v24 = v20;
      uint64_t v10 = v25;
      uint64_t v9 = v20;
    }
    else
    {
      if (!v22)
      {
LABEL_20:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *,false>(v25, v20, a3, -i, a5 & 1);
        uint64_t v10 = v20 + 40;
LABEL_22:
        a5 = 0;
        unint64_t v25 = v10;
        a4 = -i;
        goto LABEL_2;
      }
      unint64_t v25 = v20 + 40;
    }
  }
  if (v10 != v9) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *,quasar::PronChoice *>(v10, v9, v9, a3);
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  quasar::PronChoice::PronChoice(&v4, *a1);
  *(_DWORD *)uint64_t v2 = *(_DWORD *)v3;
  std::string::operator=((std::string *)(v2 + 8), (const std::string *)(v3 + 8));
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(v3 + 32);
  *(_DWORD *)uint64_t v3 = v4;
  std::string::operator=((std::string *)(v3 + 8), &__p);
  *(_DWORD *)(v3 + 32) = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1D6E4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 40;
    if (a1 + 40 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = a1;
      do
      {
        float v7 = *(float *)(v6 + 72);
        float v8 = *(float *)(v6 + 32);
        uint64_t v6 = v4;
        if (v7 < v8)
        {
          quasar::PronChoice::PronChoice(&v13, v4);
          uint64_t v9 = v5;
          while (1)
          {
            uint64_t v10 = v9;
            uint64_t v11 = a1 + v9;
            *(_DWORD *)(a1 + v9 + 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = *(_DWORD *)(a1 + v9);
            std::string::operator=((std::string *)(a1 + v9 + 48), (const std::string *)(a1 + v9 + 8));
            *(_DWORD *)(v11 + 72) = *(_DWORD *)(v11 + 32);
            if (!v10) {
              break;
            }
            uint64_t v9 = v10 - 40;
            if (v15 >= *(float *)(a1 + v10 - 8))
            {
              uint64_t v12 = a1 + v10;
              goto LABEL_10;
            }
          }
          uint64_t v12 = a1;
LABEL_10:
          *(_DWORD *)uint64_t v12 = v13;
          std::string::operator=((std::string *)(a1 + v10 + 8), &__p);
          *(float *)(v12 + 32) = v15;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v4 = v6 + 40;
        v5 += 40;
      }
      while (v6 + 40 != a2);
    }
  }
}

void sub_1B1D6E5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = a1 + 40;
    if (a1 + 40 != a2)
    {
      uint64_t v5 = (std::string *)(a1 + 72);
      do
      {
        float v6 = *(float *)(v3 + 72);
        float v7 = *(float *)(v3 + 32);
        uint64_t v3 = v4;
        if (v6 < v7)
        {
          quasar::PronChoice::PronChoice(&v11, v4);
          float v8 = v5;
          do
          {
            LODWORD(v8[-2].__r_.__value_.__r.__words[2]) = v8[-3].__r_.__value_.__l.__data_;
            std::string::operator=(v8 - 1, (std::string *)((char *)v8 - 64));
            uint64_t v9 = (float *)&v8[-2].__r_.__value_.__r.__words[1];
            LODWORD(v8->__r_.__value_.__l.__data_) = v8[-2].__r_.__value_.__r.__words[1];
            float v10 = *(float *)&v8[-4].__r_.__value_.__r.__words[2];
            float v8 = (std::string *)((char *)v8 - 40);
          }
          while (v13 < v10);
          *((_DWORD *)v9 - 8) = v11;
          std::string::operator=((std::string *)v9 - 1, &__p);
          *uint64_t v9 = v13;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v4 = v3 + 40;
        uint64_t v5 = (std::string *)((char *)v5 + 40);
      }
      while (v3 + 40 != a2);
    }
  }
}

void sub_1B1D6E6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = a1;
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  float v3 = *(float *)(a2 + 32);
  float v4 = *(float *)(a3 + 32);
  if (v3 < *(float *)(a1 + 32))
  {
    if (v4 < v3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v10, &v8);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v10, &v9);
    if (*(float *)(v8 + 32) >= *(float *)(v9 + 32)) {
      return 1;
    }
    uint64_t v5 = &v9;
    float v6 = &v8;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(v5, v6);
    return 2;
  }
  if (v4 < v3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v9, &v8);
    if (*(float *)(v9 + 32) >= *(float *)(v10 + 32)) {
      return 1;
    }
    uint64_t v5 = &v10;
    float v6 = &v9;
    goto LABEL_9;
  }
  return 0;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  quasar::PronChoice::PronChoice(&v4, *a1);
  *(_DWORD *)uint64_t v2 = *(_DWORD *)v3;
  std::string::operator=((std::string *)(v2 + 8), (const std::string *)(v3 + 8));
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(v3 + 32);
  *(_DWORD *)uint64_t v3 = v4;
  std::string::operator=((std::string *)(v3 + 8), &__p);
  *(_DWORD *)(v3 + 32) = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1D6E860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PronChoice *,std::__less<void,void> &>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v18 = a2;
  quasar::PronChoice::PronChoice(&v15, a1);
  if (v17 >= *(float *)(v2 - 8))
  {
    unint64_t v7 = a1 + 40;
    do
    {
      unint64_t v5 = v7;
      if (v7 >= v2) {
        break;
      }
      float v8 = *(float *)(v7 + 32);
      v7 += 40;
    }
    while (v17 >= v8);
  }
  else
  {
    uint64_t v4 = a1;
    do
    {
      unint64_t v5 = v4 + 40;
      float v6 = *(float *)(v4 + 72);
      v4 += 40;
    }
    while (v17 >= v6);
  }
  unint64_t v19 = v5;
  if (v5 < v2)
  {
    do
    {
      float v9 = *(float *)(v2 - 8);
      v2 -= 40;
    }
    while (v17 < v9);
    unint64_t v18 = v2;
  }
  if (v5 < v2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>((uint64_t *)&v19, (uint64_t *)&v18);
      unint64_t v5 = v19;
      do
      {
        float v10 = *(float *)(v5 + 72);
        v5 += 40;
      }
      while (v17 >= v10);
      unint64_t v19 = v5;
      unint64_t v11 = v18;
      do
      {
        float v12 = *(float *)(v11 - 8);
        v11 -= 40;
      }
      while (v17 < v12);
      unint64_t v18 = v11;
    }
    while (v5 < v11);
  }
  if (v5 - 40 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v5 - 40);
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(v5 - 32));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v5 - 8);
  }
  *(_DWORD *)(v5 - 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = v15;
  std::string::operator=((std::string *)(v5 - 32), &__p);
  *(float *)(v5 - 8) = v17;
  uint64_t v13 = v19;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_1B1D6E9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PronChoice *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  quasar::PronChoice::PronChoice(&v15, a1);
  uint64_t v4 = 0;
  do
  {
    float v5 = *(float *)(a1 + v4 + 72);
    v4 += 40;
  }
  while (v5 < v17);
  unint64_t v6 = a1 + v4;
  unint64_t v19 = a1 + v4;
  if (v4 == 40)
  {
    while (v6 < a2)
    {
      unint64_t v7 = a2 - 40;
      float v9 = *(float *)(a2 - 8);
      a2 -= 40;
      if (v9 < v17) {
        goto LABEL_9;
      }
    }
    unint64_t v7 = a2;
  }
  else
  {
    do
    {
      unint64_t v7 = a2 - 40;
      float v8 = *(float *)(a2 - 8);
      a2 -= 40;
    }
    while (v8 >= v17);
  }
LABEL_9:
  unint64_t v18 = v7;
  unint64_t v10 = a1 + v4;
  if (v6 < v7)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>((uint64_t *)&v19, (uint64_t *)&v18);
      unint64_t v10 = v19;
      do
      {
        float v11 = *(float *)(v10 + 72);
        v10 += 40;
      }
      while (v11 < v17);
      unint64_t v19 = v10;
      unint64_t v12 = v18;
      do
      {
        float v13 = *(float *)(v12 - 8);
        v12 -= 40;
      }
      while (v13 >= v17);
      unint64_t v18 = v12;
    }
    while (v10 < v12);
  }
  if (v10 - 40 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v10 - 40);
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(v10 - 32));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v10 - 8);
  }
  *(_DWORD *)(v10 - 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = v15;
  std::string::operator=((std::string *)(v10 - 32), &__p);
  *(float *)(v10 - 8) = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10 - 40;
}

void sub_1B1D6EB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v13 = a2;
  uint64_t v14 = a1;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v13 = a2 - 40;
      if (*(float *)(a2 - 8) < *(float *)(a1 + 32))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v14, &v13);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a1 + 40, a2 - 40);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v6 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a1 + 40, a1 + 80);
      uint64_t v7 = a1 + 120;
      if (v7 == v2) {
        return 1;
      }
      int v8 = 0;
      break;
  }
  while (1)
  {
    if (*(float *)(v7 + 32) < *(float *)(v6 + 32))
    {
      quasar::PronChoice::PronChoice(&v10, v7);
      do
      {
        uint64_t v9 = v6;
        *(_DWORD *)(v6 + 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = *(_DWORD *)v6;
        std::string::operator=((std::string *)(v6 + 48), (const std::string *)(v6 + 8));
        *(_DWORD *)(v6 + 72) = *(_DWORD *)(v6 + 32);
        if (v6 == v14) {
          break;
        }
        v6 -= 40;
      }
      while (v12 < *(float *)(v9 - 8));
      *(_DWORD *)uint64_t v9 = v10;
      std::string::operator=((std::string *)(v9 + 8), &__p);
      *(float *)(v9 + 32) = v12;
      uint64_t v2 = v13;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (++v8 == 8) {
        break;
      }
    }
    uint64_t v6 = v7;
    v7 += 40;
    if (v7 == v2) {
      return 1;
    }
  }
  return v7 + 40 == v2;
}

void sub_1B1D6ED70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  uint64_t v8 = a4;
  uint64_t v9 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a2, a3);
  if (*(float *)(a4 + 32) < *(float *)(a3 + 32))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v9, &v8);
    if (*(float *)(v9 + 32) < *(float *)(a2 + 32))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v10, &v9);
      if (*(float *)(v10 + 32) < *(float *)(a1 + 32)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v11, &v10);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a1;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  uint64_t v10 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a2, a3, a4);
  if (*(float *)(a5 + 32) < *(float *)(a4 + 32))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v11, &v10);
    if (*(float *)(v11 + 32) < *(float *)(a3 + 32))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v12, &v11);
      if (*(float *)(v12 + 32) < *(float *)(a2 + 32))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v13, &v12);
        if (*(float *)(v13 + 32) < *(float *)(a1 + 32)) {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v14, &v13);
        }
      }
    }
  }
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a1;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 40;
    if (a2 - a1 >= 41)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 40 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v7, a4, v9, v12);
        v12 -= 40;
        --v11;
      }
      while (v11);
    }
    uint64_t v18 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      uint64_t v13 = v6;
      do
      {
        if (*(float *)(v13 + 32) < *(float *)(v19 + 32))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v18, &v19);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v19, a4, v9, v19);
          uint64_t v13 = v18;
        }
        v13 += 40;
        uint64_t v18 = v13;
      }
      while (v13 != a3);
      uint64_t v7 = v19;
      uint64_t v8 = v6 - v19;
    }
    if (v8 >= 41)
    {
      unint64_t v14 = v8 / 0x28uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,quasar::PronChoice *>(v7, v6, a4, v14);
        v6 -= 40;
        BOOL v15 = v14 >= 2;
        BOOL v16 = v14-- == 2;
      }
      while (!v16 && v15);
      return v18;
    }
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a4 - a1) >> 3)))
    {
      int64_t v9 = (0x999999999999999ALL * ((a4 - a1) >> 3)) | 1;
      uint64_t v10 = a1 + 40 * v9;
      if ((uint64_t)(0x999999999999999ALL * ((a4 - a1) >> 3) + 2) < a3
        && *(float *)(a1 + 40 * v9 + 32) < *(float *)(v10 + 72))
      {
        v10 += 40;
        int64_t v9 = 0x999999999999999ALL * ((a4 - a1) >> 3) + 2;
      }
      if (*(float *)(v10 + 32) >= *(float *)(a4 + 32))
      {
        quasar::PronChoice::PronChoice(&v14, a4);
        do
        {
          uint64_t v11 = v10;
          uint64_t v12 = (std::string *)(v10 + 8);
          *(_DWORD *)uint64_t v5 = *(_DWORD *)v10;
          std::string::operator=((std::string *)(v5 + 8), (const std::string *)(v10 + 8));
          *(_DWORD *)(v5 + 32) = *(_DWORD *)(v10 + 32);
          if (v7 < v9) {
            break;
          }
          uint64_t v13 = (2 * v9) | 1;
          uint64_t v10 = a1 + 40 * v13;
          if (2 * v9 + 2 < a3 && *(float *)(a1 + 40 * v13 + 32) < *(float *)(v10 + 72))
          {
            v10 += 40;
            uint64_t v13 = 2 * v9 + 2;
          }
          uint64_t v5 = v11;
          int64_t v9 = v13;
        }
        while (*(float *)(v10 + 32) >= v16);
        *(_DWORD *)uint64_t v11 = v14;
        std::string::operator=(v12, &__p);
        *(float *)(v11 + 32) = v16;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
}

void sub_1B1D6F208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    quasar::PronChoice::PronChoice(&v10, a1);
    uint64_t v8 = (_DWORD *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a3, a4);
    int64_t v9 = (std::string *)(v8 + 2);
    if (v8 == (_DWORD *)(a2 - 40))
    {
      *uint64_t v8 = v10;
      std::string::operator=(v9, &__p);
      v8[8] = v12;
    }
    else
    {
      *uint64_t v8 = *(_DWORD *)(a2 - 40);
      std::string::operator=(v9, (const std::string *)(a2 - 32));
      v8[8] = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = v10;
      std::string::operator=((std::string *)(a2 - 32), &__p);
      *(_DWORD *)(a2 - 8) = v12;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, (uint64_t)(v8 + 10), a3, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v8 - a1 + 40) >> 3));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B1D6F334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1;
    uint64_t v9 = v5 + 1;
    a1 += 40 * (v5 + 1);
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v11 < a3 && *(float *)(v8 + 40 * v9 + 32) < *(float *)(a1 + 72))
    {
      a1 += 40;
      uint64_t v5 = v11;
    }
    *(_DWORD *)uint64_t v8 = *(_DWORD *)a1;
    std::string::operator=((std::string *)(v8 + 8), (const std::string *)(a1 + 8));
    *(_DWORD *)(v8 + 32) = *(_DWORD *)(a1 + 32);
  }
  while (v5 <= v7);
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v6 = v4 >> 1;
    if (*(float *)(a1 + 40 * (v4 >> 1) + 32) < *(float *)(a2 - 8))
    {
      uint64_t v7 = a2 - 40;
      quasar::PronChoice::PronChoice(&v9, a2 - 40);
      do
      {
        uint64_t v8 = a1 + 40 * v6;
        *(_DWORD *)uint64_t v7 = *(_DWORD *)v8;
        std::string::operator=((std::string *)(v7 + 8), (const std::string *)(v8 + 8));
        *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = v8;
      }
      while (*(float *)(a1 + 40 * v6 + 32) < v11);
      *(_DWORD *)uint64_t v8 = v9;
      std::string::operator=((std::string *)(v8 + 8), &__p);
      *(float *)(v8 + 32) = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1B1D6F4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>>>::destroy(a1, *((void *)a2 + 1));
    unint64_t v4 = (void **)(a2 + 40);
    std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::vector<std::vector<quasar::PronChoice>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      int v12 = 0;
    }
    BOOL v15 = v12;
    float v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    float v17 = &v16[v14];
    std::vector<std::vector<quasar::PronChoice>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer(&v15);
  }
}

void sub_1B1D6F6D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  size_t v13 = v10;
  size_t v14 = &v10[40 * v4];
  float v16 = &v10[40 * v9];
  quasar::PronChoice::PronChoice(v14, a2);
  BOOL v15 = v14 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1D6F7D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>,std::__wrap_iter<quasar::PronChoice *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a1;
    uint64_t v8 = (a2 - a1) / 40;
    if (a2 - a1 >= 41)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = a1 + 40 * v9;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>>(v7, a4, v8, v11);
        v11 -= 40;
        --v10;
      }
      while (v10);
    }
    uint64_t v18 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      uint64_t v12 = v6;
      do
      {
        if (*(float *)(v12 + 32) < *(float *)(v17 + 32))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<quasar::PronChoice *> &,std::__wrap_iter<quasar::PronChoice *> &>(&v18, &v17);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>>(v17, a4, v8, v17);
          uint64_t v12 = v18;
        }
        v12 += 40;
        uint64_t v18 = v12;
      }
      while (v12 != a3);
      uint64_t v7 = v17;
    }
    if (v6 - v7 >= 41)
    {
      unint64_t v13 = (v6 - v7) / 0x28uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<quasar::PronChoice *>>(v7, v6, a4, v13);
        v6 -= 40;
        BOOL v14 = v13 >= 2;
        BOOL v15 = v13-- == 2;
      }
      while (!v15 && v14);
      return v18;
    }
  }
  return a3;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<quasar::PronChoice *> &,std::__wrap_iter<quasar::PronChoice *> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  quasar::PronChoice::PronChoice(&v4, *a1);
  *(_DWORD *)uint64_t v2 = *(_DWORD *)v3;
  std::string::operator=((std::string *)(v2 + 8), (const std::string *)(v3 + 8));
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(v3 + 32);
  *(_DWORD *)uint64_t v3 = v4;
  std::string::operator=((std::string *)(v3 + 8), &__p);
  *(_DWORD *)(v3 + 32) = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1D6F9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a4 - a1) >> 3)))
    {
      int64_t v9 = (0x999999999999999ALL * ((a4 - a1) >> 3)) | 1;
      uint64_t v10 = a1 + 40 * v9;
      if ((uint64_t)(0x999999999999999ALL * ((a4 - a1) >> 3) + 2) < a3
        && *(float *)(a1 + 40 * v9 + 32) < *(float *)(v10 + 72))
      {
        v10 += 40;
        int64_t v9 = 0x999999999999999ALL * ((a4 - a1) >> 3) + 2;
      }
      if (*(float *)(v10 + 32) >= *(float *)(a4 + 32))
      {
        quasar::PronChoice::PronChoice(&v14, a4);
        do
        {
          uint64_t v11 = v5;
          uint64_t v5 = v10;
          uint64_t v12 = (std::string *)(v10 + 8);
          *(_DWORD *)uint64_t v11 = *(_DWORD *)v10;
          std::string::operator=((std::string *)(v11 + 8), (const std::string *)(v10 + 8));
          *(_DWORD *)(v11 + 32) = *(_DWORD *)(v10 + 32);
          if (v7 < v9) {
            break;
          }
          uint64_t v13 = (2 * v9) | 1;
          uint64_t v10 = a1 + 40 * v13;
          if (2 * v9 + 2 < a3 && *(float *)(a1 + 40 * v13 + 32) < *(float *)(v10 + 72))
          {
            v10 += 40;
            uint64_t v13 = 2 * v9 + 2;
          }
          int64_t v9 = v13;
        }
        while (*(float *)(v10 + 32) >= v16);
        *(_DWORD *)uint64_t v5 = v14;
        std::string::operator=(v12, &__p);
        *(float *)(v5 + 32) = v16;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
}

void sub_1B1D6FB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<quasar::PronChoice *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    quasar::PronChoice::PronChoice(&v10, a1);
    uint64_t v8 = (_DWORD *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a3, a4);
    int64_t v9 = (std::string *)(v8 + 2);
    if ((_DWORD *)(a2 - 40) == v8)
    {
      *uint64_t v8 = v10;
      std::string::operator=(v9, &__p);
      v8[8] = v12;
    }
    else
    {
      *uint64_t v8 = *(_DWORD *)(a2 - 40);
      std::string::operator=(v9, (const std::string *)(a2 - 32));
      v8[8] = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = v10;
      std::string::operator=((std::string *)(a2 - 32), &__p);
      *(_DWORD *)(a2 - 8) = v12;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>>(a1, (uint64_t)(v8 + 10), a3, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v8 - a1 + 40) >> 3));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B1D6FCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v6 = v4 >> 1;
    if (*(float *)(a1 + 40 * (v4 >> 1) + 32) < *(float *)(a2 - 8))
    {
      uint64_t v7 = a2 - 40;
      quasar::PronChoice::PronChoice(&v9, a2 - 40);
      do
      {
        uint64_t v8 = a1 + 40 * v6;
        *(_DWORD *)uint64_t v7 = *(_DWORD *)v8;
        std::string::operator=((std::string *)(v7 + 8), (const std::string *)(v8 + 8));
        *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = v8;
      }
      while (*(float *)(a1 + 40 * v6 + 32) < v11);
      *(_DWORD *)uint64_t v8 = v9;
      std::string::operator=((std::string *)(v8 + 8), &__p);
      *(float *)(v8 + 32) = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1B1D6FDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::PronChoice>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 40 * a2;
      do
      {
        *(_DWORD *)uint64_t v7 = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 32) = 0;
        v7 += 40;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v11);
    }
    else {
      int v12 = 0;
    }
    int v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[40 * v11];
    BOOL v15 = &v14[40 * a2];
    do
    {
      *(_DWORD *)int v14 = 0;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
      *((_DWORD *)v14 + 8) = 0;
      v14 += 40;
    }
    while (v14 != v15);
    std::locale v16[2] = v15;
    std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1B1D6FF14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *quasar::joinToStream<std::unordered_set<std::string>>(void *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(uint64_t ***)(a2 + 16);
  if (v3)
  {
    uint64_t v5 = result;
    char v6 = 1;
    do
    {
      if ((v6 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, *a3, a3[1]);
      }
      int v7 = *((char *)v3 + 39);
      if (v7 >= 0) {
        uint64_t v8 = (uint64_t)(v3 + 2);
      }
      else {
        uint64_t v8 = (uint64_t)v3[2];
      }
      if (v7 >= 0) {
        uint64_t v9 = *((unsigned __int8 *)v3 + 39);
      }
      else {
        uint64_t v9 = (uint64_t)v3[3];
      }
      uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v8, v9);
      char v6 = 0;
      uint64_t v3 = (uint64_t **)*v3;
    }
    while (v3);
  }
  return result;
}

uint64_t quasar::PronChoice::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v3 != v4) {
    return 0;
  }
  char v6 = (const void **)(a1 + 8);
  uint64_t v9 = *(unsigned __int8 **)(a2 + 8);
  int v7 = (unsigned __int8 *)(a2 + 8);
  uint64_t v8 = v9;
  if (v5 < 0) {
    int v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *(void *)(a1 + 16)) == 0;
  }
  if (!*(unsigned char *)(a1 + 31)) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    char v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  int v14 = &v10[40 * v4];
  BOOL v16 = &v10[40 * v9];
  quasar::PronChoice::PronChoice(v14, a2);
  BOOL v15 = v14 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1D70148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::TrainingGraphCompiler::TrainingGraphCompiler(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 3, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  a1[6] = 0;
  a1[7] = 0x43E800000;
  *((unsigned char *)a1 + 64) = 1;
  *(uint64_t *)((char *)a1 + 68) = 0x100000002;
  uint64_t v9 = *a6;
  *((_DWORD *)a1 + 22) = *((_DWORD *)a6 + 2);
  a1[10] = v9;
  uint64_t v10 = (int **)*a1;
  uint64_t v11 = (int *)(*(void *)*a1 + 4);
  do
  {
    if (v11 == *(int **)(*a1 + 8)) {
      break;
    }
    int v13 = *(v11 - 1);
    int v12 = *v11++;
  }
  while (v12 > v13);
  std::__sort<std::__less<int,int> &,int *>();
  BOOL v15 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>((int *)a1[3], (int *)a1[4]);
  BOOL v16 = (int *)a1[3];
  if ((int *)a1[4] != v15)
  {
    uint64_t v14 = a1[4];
    a1[4] = (uint64_t)v15;
  }
  uint64_t v17 = v10[1];
  if (v15 == v16)
  {
    int v27 = *(v17 - 1);
  }
  else
  {
    uint64_t v18 = 0;
    unint64_t v19 = v15 - v16;
    if (v19 <= 1) {
      unint64_t v19 = 1;
    }
    do
    {
      if (v17 != *v10)
      {
        int v20 = v16[v18];
        char v21 = *v10;
        unint64_t v22 = v17 - *v10;
        do
        {
          unint64_t v23 = v22 >> 1;
          uint64_t v24 = &v21[v22 >> 1];
          int v26 = *v24;
          unint64_t v25 = v24 + 1;
          uint64_t v14 = v26;
          v22 += ~(v22 >> 1);
          if (v26 < v20) {
            char v21 = v25;
          }
          else {
            unint64_t v22 = v23;
          }
        }
        while (v22);
        if (v21 != v17 && v20 >= *v21)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Disambiguation symbol ", 22);
          int v30 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" is also a phone.", 17);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
        }
      }
      ++v18;
    }
    while (v18 != v19);
    if (*(v17 - 1) <= *(v15 - 1)) {
      int v27 = *(v15 - 1);
    }
    else {
      int v27 = *(v17 - 1);
    }
  }
  int v28 = (**(uint64_t (***)(uint64_t, uint64_t))a3)(a3, v14);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 8))(a3) != v28 - 1) {
    fst::AddSubsequentialLoop<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v27 + 1, a1[2]);
  }
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((void *)a1[2]);
  return a1;
}

void fst::AddSubsequentialLoop<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(unsigned int a1, uint64_t a2)
{
  std::string __p = 0;
  int v26 = 0;
  int v27 = 0;
  unsigned int v24 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v21);
  while (1)
  {
    if (!v21)
    {
      if ((int)v24 >= v22) {
        goto LABEL_31;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 16))(v21)) {
      break;
    }
    if (v21)
    {
      uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v21 + 24))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v4 = v24;
LABEL_8:
    v20[0] = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v4);
    int v28 = 2139095040;
    if (v20[0] != INFINITY)
    {
      unint64_t v5 = v26;
      if (v26 >= v27)
      {
        uint64_t v7 = (char *)__p;
        uint64_t v8 = (v26 - (unsigned char *)__p) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v27 - (unsigned char *)__p;
        if ((v27 - (unsigned char *)__p) >> 1 > v9) {
          unint64_t v9 = v10 >> 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v27, v11);
          uint64_t v7 = (char *)__p;
          unint64_t v5 = v26;
        }
        else
        {
          int v12 = 0;
        }
        int v13 = &v12[4 * v8];
        *(_DWORD *)int v13 = v4;
        char v6 = v13 + 4;
        while (v5 != v7)
        {
          int v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v14;
          v13 -= 4;
        }
        std::string __p = v13;
        int v26 = v6;
        int v27 = &v12[4 * v11];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(_DWORD *)int v26 = v4;
        char v6 = v5 + 4;
      }
      int v26 = v6;
    }
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 32))(v21);
    }
    else {
      ++v24;
    }
  }
  if (v21) {
    (*(void (**)(void))(*(void *)v21 + 8))();
  }
LABEL_31:
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
  uint64_t v21 = a1;
  int v22 = 0;
  int v23 = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 208))(a2, v15, &v21);
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)a2 + 184))(a2, v15, 0.0);
  BOOL v16 = (char *)__p;
  if (v26 == __p)
  {
    if (__p) {
      goto LABEL_36;
    }
  }
  else
  {
    unint64_t v17 = 0;
    do
    {
      uint64_t v18 = *(unsigned int *)&v16[4 * v17];
      float v19 = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v18);
      LODWORD(v20[0]) = a1;
      v20[1] = 0.0;
      _DWORD v20[2] = v19;
      LODWORD(v20[3]) = v15;
      (*(void (**)(uint64_t, uint64_t, float *))(*(void *)a2 + 208))(a2, v18, v20);
      BOOL v16 = (char *)__p;
      int v23 = *((_DWORD *)__p + v17++);
    }
    while (v17 < (v26 - (unsigned char *)__p) >> 2);
LABEL_36:
    int v26 = v16;
    operator delete(v16);
  }
}

void sub_1B1D707D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(void *a1)
{
  v1[0] = a1;
  v1[1] = &v4;
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1D70890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::TrainingGraphCompiler::CompileGraphFromText()
{
}

void sub_1B1D7091C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::MakeLinearAcceptor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>(void *a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v4);
  if (a1[1] == *a1)
  {
    uint64_t v6 = v4;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      v8[0] = *(_DWORD *)(*a1 + 4 * v5);
      v8[1] = v8[0];
      int32x2_t v8[2] = 0;
      void v8[3] = v6;
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 208))(a2, v4, v8);
      ++v5;
      uint64_t v4 = v6;
    }
    while (v5 < (uint64_t)(a1[1] - *a1) >> 2);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a2 + 184))(a2, v6, 0.0);
}

void kaldi::TrainingGraphCompiler::CompileGraph()
{
}

void sub_1B1D70E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a15);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a17);
  _Unwind_Resume(a1);
}

void fst::TableCompose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (a4[6] == 1)
  {
    if (!*(void *)a4) {
      operator new();
    }
    (*(void (**)(void, void))(**(void **)a4 + 16))(*(void *)a4, 0);
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
  }
  if (!*(void *)a4) {
    operator new();
  }
  (*(void (**)(void, void))(**(void **)a4 + 16))(*(void *)a4, 0);
  fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
}

void sub_1B1D710FC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void fst::ComposeContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>()
{
  char v0 = FLAGS_fst_default_cache_gc;
  long long v1 = 0u;
  long long v2 = 0u;
  long long v3 = 0u;
  char v4 = 0;
  fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
}

void sub_1B1D711F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void fst::TableCompose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a4 + 16) == 1)
  {
    char v4 = FLAGS_fst_default_cache_gc;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    char v8 = 0;
    operator new();
  }
  char v4 = FLAGS_fst_default_cache_gc;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  char v8 = 0;
  operator new();
}

void sub_1B1D713C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void fst::RemoveSomeInputSymbols<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>(uint64_t a1, uint64_t a2)
{
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v7, a1);
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v3, (uint64_t)v7);
  fst::Map<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a2, (uint64_t)v3);
  if (__p)
  {
    long long v6 = __p;
    operator delete(__p);
  }
  if (v4) {
    operator delete(v4);
  }
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  if (v8) {
    operator delete(v8);
  }
}

void sub_1B1D71488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

uint64_t fst::DeterminizeStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, char a5, float a6)
{
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v12);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v13);
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::DeterminizerStar((uint64_t)v16, a1, a4, a5, a6);
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Determinize((uint64_t)v16, a3);
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Output((uint64_t)v16, a2, 1);
  uint64_t v14 = v16[90];
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~DeterminizerStar((uint64_t)v16);
  return v14;
}

void sub_1B1D71604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~DeterminizerStar((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~ArcPosingFst()
{
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumArcs(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumInputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumOutputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

void fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Copy()
{
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 112))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::OutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))();
}

void fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitStateIterator()
{
}

void sub_1B1D718B4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C406469E31DLL);
  _Unwind_Resume(a1);
}

void fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitArcIterator()
{
}

void sub_1B1D71978(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C40B8D9E71ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 160))();
}

void *fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39748;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39748;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done_(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 16))();
  }
  else {
    return *(_DWORD *)(a1 + 24) >= *(_DWORD *)(a1 + 16);
  }
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value_(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 24))();
  }
  else {
    return *(unsigned int *)(a1 + 24);
  }
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reset_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

void *fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ArcIterator(void *a1)
{
  *a1 = &unk_1F0A37760;
  uint64_t v2 = a1[1];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  else
  {
    long long v3 = (_DWORD *)a1[4];
    if (v3) {
      --*v3;
    }
  }
  return a1;
}

void fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ArcIterator(void *a1)
{
  *a1 = &unk_1F0A37760;
  uint64_t v2 = a1[1];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  else
  {
    long long v3 = (_DWORD *)a1[4];
    if (v3) {
      --*v3;
    }
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done_(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 24))();
  }
  else {
    return a1[5] >= a1[3];
  }
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value_(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 32))();
  }
  else {
    return a1[2] + 16 * a1[5];
  }
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  ++*(void *)(a1 + 40);
  return result;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Position_(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 48))();
  }
  else {
    return *(void *)(a1 + 40);
  }
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reset_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  *(void *)(a1 + 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  return result;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Seek_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  *(void *)(a1 + 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = a2;
  return result;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Flags_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 72))();
  }
  else {
    return 15;
  }
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFlags_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 80))();
  }
  return result;
}

void fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~MutableArcPosingFst()
{
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumArcs(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumInputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumOutputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 72))();
}

void fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Copy()
{
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 112))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::OutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))();
}

void fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitStateIterator()
{
}

void sub_1B1D72160(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C406469E31DLL);
  _Unwind_Resume(a1);
}

void fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitArcIterator()
{
}

void sub_1B1D72224(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C40B8D9E71ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 160))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetStart(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 176))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetFinal(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 184))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetProperties(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 192))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddState(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 200))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddArc(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 208))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeleteStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 216))();
}

{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 224))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeleteArcs(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 232))();
}

{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 240))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReserveStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 248))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReserveArcs(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 256))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MutableInputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 264))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MutableOutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 272))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetInputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 280))();
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetOutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 288))();
}

void fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitMutableArcIterator()
{
}

void sub_1B1D725A0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator=(uint64_t a1, uint64_t a2)
{
  v4[0] = &unk_1F0A38428;
  v4[1] = a2;
  (*(void (**)(void, void *))(**(void **)(a1 + 24) + 168))(*(void *)(a1 + 24), v4);
  return a1;
}

void non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~MutableArcPosingFst()
{
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumArcs(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumInputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumOutputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

void non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Copy()
{
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 112))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::OutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))();
}

void non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitStateIterator()
{
}

void non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitArcIterator()
{
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 160))();
}

uint64_t covariant return thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator=(uint64_t a1, uint64_t a2)
{
  v4[0] = &unk_1F0A38428;
  v4[1] = a2;
  (*(void (**)(void, void *))(**(void **)(a1 + 8) + 168))(*(void *)(a1 + 8), v4);
  return a1;
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetStart(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 176))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetFinal(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 184))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetProperties(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 192))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddState(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 200))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddArc(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 208))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeleteStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 216))();
}

{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 224))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeleteArcs(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 232))();
}

{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 240))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReserveStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 248))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReserveArcs(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 256))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MutableInputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 264))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MutableOutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 272))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetInputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 280))();
}

uint64_t non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetOutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 288))();
}

void non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitMutableArcIterator()
{
}

void *fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ArcIterator(void *a1)
{
  *a1 = &unk_1F0A37900;
  uint64_t v2 = a1[1];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  else
  {
    long long v3 = (_DWORD *)a1[4];
    if (v3) {
      --*v3;
    }
  }
  return a1;
}

void fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ArcIterator(void *a1)
{
  *a1 = &unk_1F0A37900;
  uint64_t v2 = a1[1];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  else
  {
    long long v3 = (_DWORD *)a1[4];
    if (v3) {
      --*v3;
    }
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done_(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 24))();
  }
  else {
    return a1[5] >= a1[3];
  }
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value_(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 32))();
  }
  else {
    return a1[2] + 16 * a1[5];
  }
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  ++*(void *)(a1 + 40);
  return result;
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Position_(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 48))();
  }
  else {
    return *(void *)(a1 + 40);
  }
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reset_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  *(void *)(a1 + 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  return result;
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Seek_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  *(void *)(a1 + 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = a2;
  return result;
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Flags_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 72))();
  }
  else {
    return 15;
  }
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFlags_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 80))();
  }
  return result;
}

void *fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~MutableArcIterator(void *a1)
{
  *a1 = &unk_1F0A3E3D0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~MutableArcIterator(void *a1)
{
  *a1 = &unk_1F0A3E3D0;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Position_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))();
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reset_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Seek_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))();
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Flags_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFlags_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))();
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetValue_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))();
}

void fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~ArcPosingFst()
{
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::NumArcs(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::NumInputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::NumOutputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

void fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Copy()
{
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::InputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 112))();
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::OutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))();
}

void fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::InitStateIterator()
{
}

void sub_1B1D7338C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C406469E31DLL);
  _Unwind_Resume(a1);
}

void fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::InitArcIterator()
{
}

void sub_1B1D73450(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C40B8D9E71ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::NumStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 160))();
}

void *fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39788;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39788;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done_(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 16))();
  }
  else {
    return *(_DWORD *)(a1 + 24) >= *(_DWORD *)(a1 + 16);
  }
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Value_(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 24))();
  }
  else {
    return *(unsigned int *)(a1 + 24);
  }
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Next_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Reset_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

void *fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ArcIterator(void *a1)
{
  *a1 = &unk_1F0A377C8;
  uint64_t v2 = a1[1];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  else
  {
    long long v3 = (_DWORD *)a1[4];
    if (v3) {
      --*v3;
    }
  }
  return a1;
}

void fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ArcIterator(void *a1)
{
  *a1 = &unk_1F0A377C8;
  uint64_t v2 = a1[1];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  else
  {
    long long v3 = (_DWORD *)a1[4];
    if (v3) {
      --*v3;
    }
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done_(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 24))();
  }
  else {
    return a1[5] >= a1[3];
  }
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Value_(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 32))();
  }
  else {
    return a1[2] + 16 * a1[5];
  }
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Next_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  ++*(void *)(a1 + 40);
  return result;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Position_(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 48))();
  }
  else {
    return *(void *)(a1 + 40);
  }
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Reset_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  *(void *)(a1 + 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  return result;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Seek_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  *(void *)(a1 + 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = a2;
  return result;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Flags_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 72))();
  }
  else {
    return 15;
  }
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetFlags_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 80))();
  }
  return result;
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Determinize(uint64_t a1, unsigned char *a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72));
  if (v4 != -1)
  {
    int v5 = v4;
    int v6 = *(_DWORD *)(a1 + 204);
    std::string __p = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    long long v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v25, 1uLL);
    unint64_t v9 = &v7[3 * v8];
    *long long v7 = v5;
    v7[1] = v6;
    uint64_t v7[2] = 0;
    uint64_t v10 = v7 + 3;
    uint64_t v12 = __p;
    unint64_t v11 = v24;
    if (v24 != __p)
    {
      do
      {
        uint64_t v13 = *(void *)(v11 - 3);
        v11 -= 3;
        int v14 = v11[2];
        *(void *)(v7 - 3) = v13;
        v7 -= 3;
        uint64_t v7[2] = v14;
      }
      while (v11 != v12);
      unint64_t v11 = __p;
    }
    std::string __p = v7;
    unsigned int v24 = v10;
    unint64_t v25 = v9;
    if (v11) {
      operator delete(v11);
    }
    unsigned int v24 = v10;
    fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetToStateId(a1, &__p);
    if (__p)
    {
      unsigned int v24 = __p;
      operator delete(__p);
    }
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15)
    {
      while (1)
      {
        unint64_t v16 = *(void *)(a1 + 32);
        long long v26 = *(_OWORD *)(*(void *)(*(void *)(a1 + 8) + ((v16 >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v16);
        *(void *)(a1 + 32) = v16 + 1;
        *(void *)(a1 + 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = v15 - 1;
        std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__maybe_remove_front_spare[abi:ne180100](a1, 1);
        fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessSubset((fst *)a1, (uint64_t)&v26);
        if (a2 && *a2) {
          fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Debug((fst *)a1);
        }
        unint64_t v18 = *(unsigned int *)(a1 + 84);
        if ((int)v18 >= 1 && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3) > v18) {
          break;
        }
        uint64_t v15 = *(void *)(a1 + 40);
        if (!v15) {
          goto LABEL_21;
        }
      }
      if (!*(unsigned char *)(a1 + 89))
      {
        int v20 = (void *)fst::cerr(v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Determinization aborted since passed ", 37);
        uint64_t v21 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" states.\n", 9);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "max-states reached in determinization");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Determinization terminated since passed ", 40);
        float v19 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" states, partial results will be generated.", 43);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      }
      *(unsigned char *)(a1 + 9std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = 1;
    }
  }
LABEL_21:
  *(unsigned char *)(a1 + 88) = 1;
}

void sub_1B1D73BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Output(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    *(unsigned char *)(a1 + 88) = 0;
    int v5 = (void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56) - *(void *)(a1 + 48);
    fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::FreeMostMemory(a1);
  }
  else
  {
    int v5 = (void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56) - *(void *)(a1 + 48);
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  if (v7)
  {
    uint64_t v33 = a1;
    if ((int)v7 < 1)
    {
      (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, 0);
      goto LABEL_50;
    }
    int v8 = v7;
    do
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
      --v8;
    }
    while (v8);
    (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, 0);
    uint64_t v9 = 0;
    uint64_t v34 = v7;
    while (1)
    {
      uint64_t v10 = (int **)(*v5 + 24 * v9);
      unint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      while (v11 != v12)
      {
        memset(&__p, 0, sizeof(__p));
        fst::StringRepository<int,int>::SeqOfId(v33 + 136, v11[1], &__p);
        std::vector<unsigned int>::pointer begin = __p.__begin_;
        std::vector<unsigned int>::pointer end = __p.__end_;
        if (v11[2] != -1)
        {
          if ((std::vector<unsigned int>::pointer)((char *)__p.__end_ - (char *)__p.__begin_) <= (std::vector<unsigned int>::pointer)4)
          {
            int v38 = v11[2];
            uint64_t v18 = v9;
          }
          else
          {
            uint64_t v16 = 0;
            uint64_t v17 = v9;
            do
            {
              uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
              int v38 = v18;
              int v19 = 0;
              if (!v16) {
                int v19 = v11[3];
              }
              int v37 = v19;
              int v20 = *v11;
              if (v16) {
                int v20 = 0;
              }
              LODWORD(p_p) = v20;
              HIDWORD(p_p) = __p.__begin_[v16];
              (*(void (**)(uint64_t, uint64_t, std::vector<unsigned int> **))(*(void *)a2 + 208))(a2, v17, &p_p);
              std::vector<unsigned int>::pointer begin = __p.__begin_;
              std::vector<unsigned int>::pointer end = __p.__end_;
              unint64_t v21 = v16 + 2;
              ++v16;
              uint64_t v17 = v18;
            }
            while (v21 < __p.__end_ - __p.__begin_);
            int v38 = v11[2];
            if ((std::vector<unsigned int>::pointer)((char *)__p.__end_ - (char *)__p.__begin_) > (std::vector<unsigned int>::pointer)7)
            {
              int v22 = 0;
              int v23 = 0;
LABEL_31:
              int v37 = v23;
              if (v22) {
                int v28 = *v11;
              }
              else {
                int v28 = 0;
              }
              LODWORD(p_p) = v28;
              if (end == begin) {
                int v29 = 0;
              }
              else {
                int v29 = *(end - 1);
              }
              HIDWORD(p_p) = v29;
              (*(void (**)(uint64_t, uint64_t, std::vector<unsigned int> **))(*(void *)a2 + 208))(a2, v18, &p_p);
              goto LABEL_38;
            }
          }
          int v23 = v11[3];
          int v22 = 1;
          goto LABEL_31;
        }
        uint64_t v24 = v9;
        if (__p.__end_ == __p.__begin_) {
          goto LABEL_27;
        }
        unint64_t v25 = 0;
        uint64_t v26 = v9;
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
          int v38 = v24;
          int v27 = 0;
          if (!v25) {
            int v27 = v11[3];
          }
          int v37 = v27;
          LODWORD(p_p) = 0;
          HIDWORD(p_p) = __p.__begin_[v25];
          (*(void (**)(uint64_t, uint64_t, std::vector<unsigned int> **))(*(void *)a2 + 208))(a2, v26, &p_p);
          ++v25;
          uint64_t v26 = v24;
        }
        while (v25 < __p.__end_ - __p.__begin_);
        v13.n128_u64[0] = 0;
        if (__p.__end_ == __p.__begin_) {
LABEL_27:
        }
          v13.n128_u32[0] = v11[3];
        (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)a2 + 184))(a2, v24, v13);
LABEL_38:
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        v11 += 4;
      }
      if (a3)
      {
        int v30 = *v10;
        v10[1] = 0;
        void v10[2] = 0;
        *uint64_t v10 = 0;
        if (v30) {
          operator delete(v30);
        }
      }
      if (++v9 == v34)
      {
LABEL_50:
        if (a3)
        {
          *(_OWORD *)&__p.__begin_ = *(_OWORD *)(v33 + 48);
          long long v32 = *(unsigned int **)(v33 + 64);
          *(void *)(v33 + 56) = 0;
          *(void *)(v33 + 64) = 0;
          *(void *)(v33 + 48) = 0;
          __p.__end_cap_.__value_ = v32;
          fst::StringRepository<int,int>::Destroy(v33 + 136);
          p_p = &__p;
          std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        }
        return;
      }
    }
  }
  BOOL v31 = *(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176);
  v31(a2, 0xFFFFFFFFLL);
}

void sub_1B1D740E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::DeterminizerStar(uint64_t a1, uint64_t a2, int a3, char a4, float a5)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(float *)(a1 + 92) = a5;
  *(void *)(a1 + 72) = v10;
  *(float *)(a1 + 8std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = a5;
  *(_DWORD *)(a1 + 84) = a3;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 89) = a4;
  *(unsigned char *)(a1 + 9std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
    if (v11 >= 0) {
      int v12 = v11;
    }
    else {
      int v12 = v11 + 1;
    }
    size_t v13 = (v12 >> 1) + 3;
  }
  else
  {
    size_t v13 = 20;
  }
  std::unordered_map<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,std::allocator<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const* const,int>>>::unordered_map(a1 + 96, v13, a1 + 91, (int *)(a1 + 92));
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 20std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = xmmword_1B256C590;
  return a1;
}

void sub_1B1D74274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::~deque[abi:ne180100]((void *)v10);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,std::allocator<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const* const,int>>>::unordered_map(uint64_t a1, size_t a2, uint64_t a3, int *a4)
{
  int v5 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 36) = v5;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1D742D4(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetToStateId(uint64_t a1, void *a2)
{
  std::vector<unsigned int> __p = a2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::find<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*>((void *)(a1 + 96), (uint64_t **)&__p);
  if (!v2) {
    operator new();
  }
  return *((unsigned int *)v2 + 6);
}

void sub_1B1D744D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessSubset(fst *a1, uint64_t a2)
{
  long long v3 = *(const void ***)a2;
  int v4 = *(_DWORD *)(a2 + 8);
  std::vector<unsigned int> __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::EpsilonClosure((uint64_t)a1, v3, (uint64_t)&__p);
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessFinal((uint64_t)a1, (float **)&__p, v4);
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessTransitions(a1, (float **)&__p, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_1B1D74580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Debug(fst *a1)
{
  uint64_t v2 = (void *)fst::cerr(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Debug function called (probably SIGUSR1 caught).\n", 49);
  memset(v51, 0, sizeof(v51));
  uint64_t v52 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)v51, (uint64_t)a1 + 96);
  long long v3 = (fst *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v51);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 7) - *((void *)a1 + 6)) >> 3);
  unint64_t v5 = v4 - 2;
  if (v4 <= 2)
  {
    uint64_t v6 = (void *)fst::cerr(v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Nothing to trace back");
    exit(1);
  }
  uint64_t v7 = (fst *)std::vector<int>::vector((std::vector<int> *)v51, v4 - 1, &fst::kNoStateId);
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = *((void *)a1 + 6);
    do
    {
      uint64_t v10 = (uint64_t *)(v9 + 24 * v8);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1] - *v10;
      if (v12)
      {
        unint64_t v13 = v12 >> 4;
        uint64_t v14 = *(void *)v51;
        if (v13 <= 1) {
          unint64_t v13 = 1;
        }
        uint64_t v15 = (int *)(v11 + 8);
        do
        {
          unint64_t v17 = *v15;
          v15 += 4;
          unint64_t v16 = v17;
          if (v5 >= v17 && v8 < v16) {
            *(_DWORD *)(v14 + 4 * v16) = v8;
          }
          --v13;
        }
        while (v13);
      }
      ++v8;
    }
    while (v8 != v5);
    char v48 = 0;
    clockid_t v49 = 0;
    clockid_t v50 = 0;
    if ((v5 - 1) <= 0xFFFFFFFD)
    {
      int v19 = 0;
      do
      {
        int v20 = v5;
        LODWORD(v5) = *(_DWORD *)(*(void *)v51 + 4 * (int)v5);
        uint64_t v21 = *(void *)(*((void *)a1 + 6) + 24 * (int)v5);
        uint64_t v22 = *(void *)(*((void *)a1 + 6) + 24 * (int)v5 + 8) - v21;
        if (v22)
        {
          unint64_t v23 = v22 >> 4;
          if (v23 <= 1) {
            unint64_t v23 = 1;
          }
          uint64_t v24 = (unsigned int *)(v21 + 4);
          while (v24[1] != v20)
          {
            v24 += 4;
            if (!--v23) {
              goto LABEL_43;
            }
          }
          uint64_t v25 = *(v24 - 1);
          uint64_t v26 = *v24;
          if (v19 >= v50)
          {
            uint64_t v27 = (v19 - v48) >> 3;
            if ((unint64_t)(v27 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v28 = (v50 - v48) >> 2;
            if (v28 <= v27 + 1) {
              unint64_t v28 = v27 + 1;
            }
            if ((unint64_t)(v50 - v48) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v28;
            }
            if (v29) {
              uint64_t v7 = (fst *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v50, v29);
            }
            else {
              uint64_t v7 = 0;
            }
            int v30 = (uint64_t *)((char *)v7 + 8 * v27);
            *int v30 = v25 | (v26 << 32);
            int v19 = (char *)(v30 + 1);
            long long v32 = v48;
            BOOL v31 = v49;
            if (v49 != v48)
            {
              do
              {
                uint64_t v33 = *((void *)v31 - 1);
                v31 -= 8;
                *--int v30 = v33;
              }
              while (v31 != v32);
              BOOL v31 = v48;
            }
            char v48 = (char *)v30;
            clockid_t v49 = v19;
            clockid_t v50 = (char *)v7 + 8 * v29;
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *(void *)int v19 = v25 | (v26 << 32);
            v19 += 8;
          }
          clockid_t v49 = v19;
        }
LABEL_43:
        ;
      }
      while ((v5 - 1) < 0xFFFFFFFE);
    }
    if (v5 == -1)
    {
      uint64_t v34 = (void *)fst::cerr(v7);
      uint64_t v7 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Traceback did not reach start state (possibly debug-code error)", 63);
    }
  }
  else
  {
    char v48 = 0;
    clockid_t v49 = 0;
    clockid_t v50 = 0;
  }
  clockid_t v35 = (void *)fst::cerr(v7);
  std::vector<unsigned int>::pointer begin = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Traceback below (or on standard error) in format ilabel (olabel olabel) ilabel (olabel) ...\n", 92);
  if (v49 - v48 >= 1)
  {
    uint64_t v37 = (unint64_t)(v49 - v48) >> 3;
    uint64_t v38 = (uint64_t)a1 + 136;
    do
    {
      fst::cerr(begin);
      uint64_t v39 = (void *)std::ostream::operator<<();
      LOBYTE(__p.__begin_) = 32;
      uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)&__p, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"( ", 2);
      memset(&__p, 0, sizeof(__p));
      fst::StringRepository<int,int>::SeqOfId(v38, *(_DWORD *)&v48[8 * v37 - 4], &__p);
      if (__p.__end_ != __p.__begin_)
      {
        unint64_t v42 = 0;
        do
        {
          fst::cerr(v41);
          std::string v43 = (void *)std::ostream::operator<<();
          char v53 = 32;
          uint64_t v41 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v53, 1);
          ++v42;
        }
        while (v42 < __p.__end_ - __p.__begin_);
      }
      uint64_t v44 = (void *)fst::cerr(v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)") ", 2);
      std::vector<unsigned int>::pointer begin = (fst *)__p.__begin_;
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
    }
    while (v37-- > 1);
  }
  unint64_t v46 = (void *)fst::cerr(begin);
  LOBYTE(__p.__begin_) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)&__p, 1);
  exit(1);
}

void sub_1B1D74938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    std::locale v16[2] = v14 + 24;
    std::vector<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>::__swap_out_circular_buffer(a1, v16);
    unint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    uint64_t v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    uint64_t v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    unint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1D74AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

int64x2_t std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::push_front(uint64_t a1, _OWORD *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = (void *)(v5 + 8 * (v4 >> 8));
  uint64_t v7 = *v6 + 16 * v4;
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  *(_OWORD *)(v7 - 16) = *a2;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1B255FD00);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

__n128 std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

uint64_t **std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::find<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*>(void *a1, uint64_t **a2)
{
  long long v3 = (int *)**a2;
  uint64_t v4 = (int *)(*a2)[1];
  if (v3 == v4)
  {
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v6 = 1;
    do
    {
      uint64_t v7 = *v3;
      int v8 = v3[1];
      v3 += 3;
      unint64_t v5 = v7 + v5 * v6 + 103333 * v8;
      v6 *= 23531;
    }
    while (v3 != v4);
  }
  int8x8_t v9 = (int8x8_t)a1[1];
  if (!*(void *)&v9) {
    return 0;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  unint64_t v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v12 = v5;
    if (v5 >= *(void *)&v9) {
      unint64_t v12 = v5 % *(void *)&v9;
    }
  }
  else
  {
    unint64_t v12 = (*(void *)&v9 - 1) & v5;
  }
  unint64_t v13 = *(uint64_t ****)(*a1 + 8 * v12);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = *v13;
  if (*v13)
  {
    uint64_t v15 = (float *)a1 + 9;
    do
    {
      unint64_t v16 = (unint64_t)v14[1];
      if (v16 == v5)
      {
        if (fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual::operator()(v15, (unint64_t *)v14[2], *a2))return v14; {
      }
        }
      else
      {
        if (v11 > 1)
        {
          if (v16 >= *(void *)&v9) {
            v16 %= *(void *)&v9;
          }
        }
        else
        {
          v16 &= *(void *)&v9 - 1;
        }
        if (v16 != v12) {
          return 0;
        }
      }
      uint64_t v14 = (uint64_t **)*v14;
    }
    while (v14);
  }
  return v14;
}

uint64_t fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual::operator()(float *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  uint64_t v5 = *a3;
  if (v3 - *a2 != a3[1] - *a3) {
    return 0;
  }
  while (v4 < v3)
  {
    if (*(_DWORD *)v4 != *(_DWORD *)v5 || *(_DWORD *)(v4 + 4) != *(_DWORD *)(v5 + 4)) {
      return 0;
    }
    float v6 = *(float *)(v4 + 8);
    float v7 = *(float *)(v5 + 8);
    if (v7 > (float)(*a1 + v6) || v6 > (float)(*a1 + v7)) {
      return 0;
    }
    v4 += 12;
    v5 += 12;
  }
  return 1;
}

void *std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::__init_with_size[abi:ne180100]<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element*,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    __n128 result = std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1D74DEC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::__emplace_unique_key_args<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::piecewise_construct_t const&,std::tuple<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const* const&>,std::tuple<>>(uint64_t a1, uint64_t **a2, uint64_t a3, void **a4)
{
  size_t v8 = (int *)**a2;
  int8x8_t v9 = (int *)(*a2)[1];
  if (v8 == v9)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 1;
    do
    {
      uint64_t v12 = *v8;
      int v13 = v8[1];
      v8 += 3;
      unint64_t v10 = v12 + v10 * v11 + 103333 * v13;
      v11 *= 23531;
    }
    while (v8 != v9);
  }
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    unint64_t v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v14) {
        unint64_t v4 = v10 % v14;
      }
    }
    else
    {
      unint64_t v4 = (v14 - 1) & v10;
    }
    unint64_t v17 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v17)
    {
      for (uint64_t i = *v17; i; uint64_t i = *(void **)i)
      {
        unint64_t v19 = *((void *)i + 1);
        if (v19 == v10)
        {
          if (fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual::operator()((float *)(a1 + 36), *((unint64_t **)i + 2), *a2))return i; {
        }
          }
        else
        {
          if (v16 > 1)
          {
            if (v19 >= v14) {
              v19 %= v14;
            }
          }
          else
          {
            v19 &= v14 - 1;
          }
          if (v19 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v10;
  *((void *)i + 2) = **a4;
  *((_DWORD *)i + 6) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v14 || (float)(v21 * (float)v14) < v20)
  {
    BOOL v22 = 1;
    if (v14 >= 3) {
      BOOL v22 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v14);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v10 >= v14) {
        unint64_t v4 = v10 % v14;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v14 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_43:
    *uint64_t v27 = i;
    goto LABEL_44;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v26 + 8 * v4) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v28 >= v14) {
        v28 %= v14;
      }
    }
    else
    {
      v28 &= v14 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_43;
  }
LABEL_44:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1D75078(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__add_front_capacity(void **a1)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 32 * (v3 - v2) - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x100)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    long long v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::vector<unsigned int> __p = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v11);
      std::string v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      unint64_t v45 = (char *)__p + 8 * v12;
      uint64_t v41 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&__p, &v41);
      long long v13 = (char *)a1[1];
      long long v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              long long v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                long long v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              BOOL v31 = __p;
              std::vector<unsigned int> __p = v24;
              std::string v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              unint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                long long v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              float v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                long long v14 = v43;
              }
              BOOL v22 = &v14[-8 * (v19 >> 1)];
              long long v14 = &v20[v21];
              std::string v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)long long v14 = v32;
          long long v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }
      int v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::vector<unsigned int> __p = v36;
      std::string v43 = v33;
      uint64_t v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      unint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 128;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 256;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::vector<unsigned int> __p = operator new(0x1000uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &__p);
        uint64_t v34 = a1[2];
        std::vector<unsigned int> __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::vector<unsigned int> __p = operator new(0x1000uLL);
      }
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 128;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 256;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 256;
    std::vector<unsigned int> __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1B1D754A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      char v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      std::string v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v54 + 8 * v26;
  char v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1D757C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2 = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::EpsilonClosure(uint64_t a1, const void **a2, uint64_t a3)
{
  long long v129 = 0;
  unint64_t v130 = 0;
  char v128 = (uint64_t *)&v129;
  uint64_t v6 = (char *)*a2;
  if (a2[1] != *a2)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = (uint64_t *)&v129;
    do
    {
      uint64_t v10 = &v6[v7];
      LODWORD(v119) = *(_DWORD *)v10;
      uint64_t v11 = *(void *)v10;
      HIDWORD(v119) = *((_DWORD *)v10 + 2);
      *(void *)((char *)&v119 + 4) = v11;
      uint64_t v9 = (uint64_t *)std::__tree<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>>::__emplace_hint_unique_key_args<int,std::pair<int const,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> const&>(&v128, v9, (int *)&v119, &v119);
      ++v8;
      uint64_t v6 = (char *)*a2;
      v7 += 12;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a2[1] - (unsigned char *)*a2) >> 2));
  }
  int v12 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 72) + 64))(*(void *)(a1 + 72), 0x10000000, 0);
  char v125 = 0;
  uint64_t v126 = 0;
  char v127 = 0;
  uint64_t v13 = (fst *)std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::__init_with_size[abi:ne180100]<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element*,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element*>(&v125, *a2, (uint64_t)a2[1], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a2[1] - (unsigned char *)*a2) >> 2));
  uint64_t v15 = v126;
  if (v126 == v125) {
    goto LABEL_118;
  }
  int v115 = 0;
  char v16 = 0;
  uint64_t v17 = a1 + 136;
  do
  {
    uint64_t v19 = *(void *)(v15 - 3);
    uint64_t v18 = v15 - 3;
    float v124 = v18[2];
    *(void *)long long v123 = v19;
    uint64_t v126 = v18;
    if (v16)
    {
      *(void *)&long long v119 = v123;
      uint64_t v13 = (fst *)std::__tree<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v128, v123, (uint64_t)&std::piecewise_construct, (_DWORD **)&v119);
      if (*((_DWORD *)v13 + 8) != v123[0]
        || *((_DWORD *)v13 + 9) != v123[1]
        || (LODWORD(v119) = 0,
            LODWORD(v119) = *((_DWORD *)v13 + 10),
            *(float *)&__p.__begin_ = v124,
            v14.n128_u32[0] = v119,
            *(float *)&v119 != v124))
      {
        char v16 = 1;
        goto LABEL_117;
      }
    }
    int v20 = *(_DWORD *)(a1 + 84);
    if (v20 >= 1)
    {
      if (v115 > v20)
      {
        long long v108 = (void *)fst::cerr(v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"Determinization aborted since looped more than ", 47);
        char v109 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)" times during epsilon closure.\n", 31);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "looped more than max-states times in determinization");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      ++v115;
    }
    uint64_t v21 = *(void *)(a1 + 72);
    unint64_t v122 = 0;
    (*(void (**)(uint64_t, void, long long *, __n128))(*(void *)v21 + 136))(v21, v123[0], &v119, v14);
    while (1)
    {
      uint64_t v13 = (fst *)v119;
      if (!(void)v119)
      {
        if (v122 >= v120) {
          goto LABEL_115;
        }
LABEL_20:
        uint64_t v23 = *((void *)&v119 + 1) + 16 * v122;
        goto LABEL_21;
      }
      char v22 = (*(uint64_t (**)(void))(*(void *)v119 + 24))(v119);
      uint64_t v13 = (fst *)v119;
      if (v22) {
        goto LABEL_113;
      }
      if (!(void)v119) {
        goto LABEL_20;
      }
      uint64_t v13 = (fst *)(*(uint64_t (**)(void))(*(void *)v119 + 32))();
      uint64_t v23 = (uint64_t)v13;
LABEL_21:
      int v24 = *(_DWORD *)v23;
      if ((v12 & 0x10000000) != 0)
      {
        if (v24) {
          break;
        }
      }
      if (!v24)
      {
        v117[0] = *(_DWORD *)(v23 + 12);
        float v25 = NAN;
        if (v124 != -INFINITY)
        {
          float v26 = *(float *)(v23 + 8);
          float v25 = NAN;
          if (v26 != -INFINITY)
          {
            float v25 = INFINITY;
            BOOL v27 = v26 == INFINITY || v124 == INFINITY;
            if (!v27) {
              float v25 = v124 + v26;
            }
          }
        }
        float v118 = v25;
        if (*(_DWORD *)(v23 + 4))
        {
          memset(&__p, 0, sizeof(__p));
          fst::StringRepository<int,int>::SeqOfId(a1 + 136, v123[1], &__p);
          unsigned int v28 = *(_DWORD *)(v23 + 4);
          if (v28)
          {
            std::vector<unsigned int>::pointer end = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = __p.__begin_;
              int64_t v32 = __p.__end_ - __p.__begin_;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              int64_t v34 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
              if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v33) {
                unint64_t v33 = v34 >> 1;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v35);
                std::vector<unsigned int>::pointer begin = __p.__begin_;
                std::vector<unsigned int>::pointer end = __p.__end_;
                unsigned int v28 = *(_DWORD *)(v23 + 4);
              }
              else
              {
                uint64_t v36 = 0;
              }
              uint64_t v37 = (unsigned int *)&v36[4 * v32];
              *uint64_t v37 = v28;
              long long v30 = v37 + 1;
              while (end != begin)
              {
                unsigned int v38 = *--end;
                *--uint64_t v37 = v38;
              }
              __p.__begin_ = v37;
              __p.__end_ = v30;
              __p.__end_cap_.__value_ = (unsigned int *)&v36[4 * v35];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *__p.__end_ = v28;
              long long v30 = end + 1;
            }
            __p.__end_ = v30;
          }
          v117[1] = fst::StringRepository<int,int>::IdOfSeq(a1 + 136, (uint64_t)&__p);
          uint64_t v13 = (fst *)__p.__begin_;
          if (__p.__begin_)
          {
            __p.__end_ = __p.__begin_;
            operator delete(__p.__begin_);
          }
        }
        else
        {
          v117[1] = v123[1];
        }
        uint64_t v39 = v129;
        if (!v129) {
          goto LABEL_62;
        }
        uint64_t v40 = &v129;
        do
        {
          uint64_t v41 = v39;
          uint64_t v42 = v40;
          int v43 = *((_DWORD *)v39 + 7);
          uint64_t v44 = v39 + 1;
          if (v43 >= v117[0])
          {
            uint64_t v44 = v41;
            uint64_t v40 = (void **)v41;
          }
          uint64_t v39 = (void *)*v44;
        }
        while (v39);
        if (v40 == &v129) {
          goto LABEL_62;
        }
        if (v43 < v117[0]) {
          uint64_t v41 = v42;
        }
        if (v117[0] >= *((_DWORD *)v41 + 7))
        {
          if (*((_DWORD *)v40 + 9) != v117[1])
          {
            long long v100 = (void *)fst::cerr(v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"DeterminizerStar: FST was not functional -> not determinizable\n", 63);
            memset(&__p, 0, sizeof(__p));
            fst::StringRepository<int,int>::SeqOfId(a1 + 136, *((_DWORD *)v40 + 9), &__p);
            long long v102 = (void *)fst::cerr(v101);
            uint64_t v103 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"First string: ", 14);
            if (__p.__end_ != __p.__begin_)
            {
              unint64_t v111 = 0;
              do
              {
                fst::cerr(v103);
                char v112 = (void *)std::ostream::operator<<();
                uint64_t v103 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)" ", 1);
                ++v111;
              }
              while (v111 < __p.__end_ - __p.__begin_);
            }
            uint64_t v104 = (void *)fst::cerr(v103);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"\nSecond string: ", 16);
            fst::StringRepository<int,int>::SeqOfId(v17, v117[1], &__p);
            if (__p.__end_ != __p.__begin_)
            {
              unint64_t v113 = 0;
              do
              {
                fst::cerr(v105);
                long long v114 = (void *)std::ostream::operator<<();
                long long v105 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)" ", 1);
                ++v113;
              }
              while (v113 < __p.__end_ - __p.__begin_);
            }
            long long v106 = (void *)fst::cerr(v105);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)"\n", 1);
            if (__p.__begin_)
            {
              __p.__end_ = __p.__begin_;
              operator delete(__p.__begin_);
            }
            int v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v107, "Non-functional FST: cannot determinize.\n");
            __cxa_throw(v107, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          float v53 = *((float *)v40 + 10);
          float v54 = v118;
          if (v53 == INFINITY)
          {
            float v55 = v118;
          }
          else
          {
            float v55 = *((float *)v40 + 10);
            if (v118 != INFINITY)
            {
              if (v53 <= v118)
              {
                float v64 = expf(-(float)(v118 - v53));
                float v55 = v53 - logf(v64 + 1.0);
              }
              else
              {
                float v63 = expf(-(float)(v53 - v118));
                float v55 = v54 - logf(v63 + 1.0);
              }
            }
          }
          float v65 = *(float *)(a1 + 80);
          float v66 = v53 + v65;
          v14.n128_f32[0] = v55 + v65;
          if (v53 > v14.n128_f32[0] || v55 > v66)
          {
            long long v68 = v126;
            if (v126 >= (float *)v127)
            {
              unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * (((char *)v126 - (unsigned char *)v125) >> 2);
              unint64_t v72 = v71 + 1;
              if (v71 + 1 > 0x1555555555555555) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((v127 - (unsigned char *)v125) >> 2) > v72) {
                unint64_t v72 = 0x5555555555555556 * ((v127 - (unsigned char *)v125) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v127 - (unsigned char *)v125) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v73 = 0x1555555555555555;
              }
              else {
                unint64_t v73 = v72;
              }
              if (v73) {
                long long v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v127, v73);
              }
              else {
                long long v74 = 0;
              }
              long long v75 = (float *)&v74[12 * v71];
              long long v76 = *(uint64_t **)v117;
              _OWORD v75[2] = v118;
              *(void *)long long v75 = v76;
              long long v78 = v125;
              long long v77 = v126;
              long long v79 = v75;
              if (v126 != v125)
              {
                do
                {
                  uint64_t v80 = *(void *)(v77 - 3);
                  v77 -= 3;
                  int v81 = v77[2];
                  *(void *)(v79 - 3) = v80;
                  v79 -= 3;
                  *((_DWORD *)v79 + 2) = v81;
                }
                while (v77 != v78);
                long long v77 = v125;
              }
              long long v70 = v75 + 3;
              char v125 = v79;
              uint64_t v126 = v75 + 3;
              char v127 = &v74[12 * v73];
              if (v77) {
                operator delete(v77);
              }
            }
            else
            {
              long long v69 = *(uint64_t **)v117;
              v126[2] = v118;
              *(void *)long long v68 = v69;
              long long v70 = v68 + 3;
            }
            uint64_t v126 = v70;
            char v16 = 1;
          }
          *((float *)v40 + 1std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = v55;
        }
        else
        {
LABEL_62:
          __p.__begin_ = (std::vector<unsigned int>::pointer)v117;
          uint64_t v45 = std::__tree<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v128, v117, (uint64_t)&std::piecewise_construct, &__p.__begin_);
          void v45[4] = *(uint64_t **)v117;
          *((float *)v45 + 1std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = v118;
          unint64_t v46 = v126;
          if (v126 >= (float *)v127)
          {
            unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * (((char *)v126 - (unsigned char *)v125) >> 2);
            unint64_t v50 = v49 + 1;
            if (v49 + 1 > 0x1555555555555555) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((v127 - (unsigned char *)v125) >> 2) > v50) {
              unint64_t v50 = 0x5555555555555556 * ((v127 - (unsigned char *)v125) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v127 - (unsigned char *)v125) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v51 = 0x1555555555555555;
            }
            else {
              unint64_t v51 = v50;
            }
            if (v51) {
              uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v127, v51);
            }
            else {
              uint64_t v52 = 0;
            }
            long long v56 = (float *)&v52[12 * v49];
            uint64_t v57 = *(uint64_t **)v117;
            v56[2] = v118;
            *(void *)long long v56 = v57;
            uint64_t v59 = v125;
            uint64_t v58 = v126;
            long long v60 = v56;
            if (v126 != v125)
            {
              do
              {
                uint64_t v61 = *(void *)(v58 - 3);
                v58 -= 3;
                int v62 = v58[2];
                *(void *)(v60 - 3) = v61;
                v60 -= 3;
                *((_DWORD *)v60 + 2) = v62;
              }
              while (v58 != v59);
              uint64_t v58 = v125;
            }
            char v48 = v56 + 3;
            char v125 = v60;
            uint64_t v126 = v56 + 3;
            char v127 = &v52[12 * v51];
            if (v58) {
              operator delete(v58);
            }
          }
          else
          {
            uint64_t v47 = *(uint64_t **)v117;
            v126[2] = v118;
            *(void *)unint64_t v46 = v47;
            char v48 = v46 + 3;
          }
          uint64_t v126 = v48;
        }
      }
      if ((void)v119) {
        (*(void (**)(void))(*(void *)v119 + 40))(v119);
      }
      else {
        ++v122;
      }
    }
    uint64_t v13 = (fst *)v119;
LABEL_113:
    if (v13)
    {
      uint64_t v13 = (fst *)(*(uint64_t (**)(fst *))(*(void *)v13 + 8))(v13);
      goto LABEL_117;
    }
LABEL_115:
    if (v121) {
      --*v121;
    }
LABEL_117:
    uint64_t v15 = v126;
  }
  while (v126 != v125);
LABEL_118:
  *(void *)(a3 + 8) = *(void *)a3;
  std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::reserve((char **)a3, v130);
  long long v82 = v128;
  if (v128 != (uint64_t *)&v129)
  {
    int v83 = (void *)(a3 + 16);
    uint64_t v84 = *(char **)(a3 + 8);
    do
    {
      char v85 = v82 + 4;
      if ((unint64_t)v84 >= *v83)
      {
        unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v84[-*(void *)a3] >> 2);
        unint64_t v88 = v87 + 1;
        if (v87 + 1 > 0x1555555555555555) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(*v83 - *(void *)a3) >> 2) > v88) {
          unint64_t v88 = 0x5555555555555556 * ((uint64_t)(*v83 - *(void *)a3) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v83 - *(void *)a3) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v89 = 0x1555555555555555;
        }
        else {
          unint64_t v89 = v88;
        }
        if (v89) {
          unint64_t v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(a3 + 16, v89);
        }
        else {
          unint64_t v90 = 0;
        }
        char v91 = &v90[12 * v87];
        uint64_t v92 = *v85;
        *((_DWORD *)v91 + 2) = *((_DWORD *)v82 + 10);
        *(void *)char v91 = v92;
        char v94 = *(char **)a3;
        uint64_t v93 = *(char **)(a3 + 8);
        uint64_t v95 = v91;
        if (v93 != *(char **)a3)
        {
          do
          {
            uint64_t v96 = *(void *)(v93 - 12);
            v93 -= 12;
            int v97 = *((_DWORD *)v93 + 2);
            *(void *)(v95 - 12) = v96;
            v95 -= 12;
            *((_DWORD *)v95 + 2) = v97;
          }
          while (v93 != v94);
          uint64_t v93 = *(char **)a3;
        }
        uint64_t v84 = v91 + 12;
        *(void *)a3 = v95;
        *(void *)(a3 + 8) = v91 + 12;
        *(void *)(a3 + 16) = &v90[12 * v89];
        if (v93) {
          operator delete(v93);
        }
      }
      else
      {
        uint64_t v86 = *v85;
        *((_DWORD *)v84 + 2) = *((_DWORD *)v82 + 10);
        *(void *)uint64_t v84 = v86;
        v84 += 12;
      }
      *(void *)(a3 + 8) = v84;
      long long v98 = (uint64_t *)v82[1];
      if (v98)
      {
        do
        {
          long long v99 = v98;
          long long v98 = (uint64_t *)*v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          long long v99 = (uint64_t *)v82[2];
          BOOL v27 = *v99 == (void)v82;
          long long v82 = v99;
        }
        while (!v27);
      }
      long long v82 = v99;
    }
    while (v99 != (uint64_t *)&v129);
  }
  if (v125)
  {
    uint64_t v126 = (float *)v125;
    operator delete(v125);
  }
  std::__tree<int>::destroy((uint64_t)&v128, v129);
}

void sub_1B1D763B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_DWORD *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,void *a29)
{
  __cxa_free_exception(v29);
  if (a18)
  {
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
  }
  else if (a21)
  {
    --*a21;
  }
  if (__p) {
    operator delete(__p);
  }
  std::__tree<int>::destroy((uint64_t)&a28, a29);
  _Unwind_Resume(a1);
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessFinal(uint64_t a1, float **a2, int a3)
{
  int v4 = *a2;
  uint64_t v5 = (unsigned int *)a2[1];
  if (*a2 == (float *)v5) {
    return;
  }
  char v8 = 0;
  unsigned int v9 = 0;
  do
  {
    float v11 = (*(float (**)(void, void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72), *(unsigned int *)v4);
    if (v11 == INFINITY) {
      goto LABEL_32;
    }
    if (v8)
    {
      if (v9 != *((_DWORD *)v4 + 1))
      {
        unint64_t v35 = (void *)fst::cerr(v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"DeterminizerStar: FST was not functional -> not determinizable\n", 63);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Non-functional FST: cannot determinize.\n");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      float v12 = v4[2];
      if (v12 == -INFINITY || v11 == -INFINITY)
      {
        float v15 = NAN;
        if (v3 == INFINITY) {
          goto LABEL_27;
        }
      }
      else
      {
        BOOL v13 = v12 == INFINITY || v11 == INFINITY;
        float v14 = v11 + v12;
        if (v13) {
          float v15 = INFINITY;
        }
        else {
          float v15 = v14;
        }
        if (v3 == INFINITY)
        {
LABEL_27:
          char v8 = 1;
          float v3 = v15;
          goto LABEL_32;
        }
        if (v15 == INFINITY) {
          goto LABEL_31;
        }
      }
      if (v3 <= v15)
      {
        float v20 = expf(-(float)(v15 - v3));
        float v3 = v3 - logf(v20 + 1.0);
      }
      else
      {
        float v19 = expf(-(float)(v3 - v15));
        float v3 = v15 - logf(v19 + 1.0);
      }
LABEL_31:
      char v8 = 1;
      goto LABEL_32;
    }
    float v16 = v4[2];
    char v8 = 1;
    float v3 = NAN;
    unsigned int v9 = *((_DWORD *)v4 + 1);
    if (v16 != -INFINITY)
    {
      unsigned int v9 = *((_DWORD *)v4 + 1);
      if (v11 != -INFINITY)
      {
        BOOL v17 = v16 == INFINITY || v11 == INFINITY;
        float v18 = v11 + v16;
        if (v17) {
          float v3 = INFINITY;
        }
        else {
          float v3 = v18;
        }
        unsigned int v9 = *((_DWORD *)v4 + 1);
      }
    }
LABEL_32:
    v4 += 3;
  }
  while (v4 != (float *)v5);
  if (v8)
  {
    uint64_t v21 = (void **)(*(void *)(a1 + 48) + 24 * a3);
    uint64_t v23 = v21 + 1;
    char v22 = (char *)v21[1];
    int v24 = (char *)v21[2];
    if (v22 >= v24)
    {
      uint64_t v26 = (v22 - (unsigned char *)*v21) >> 4;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = v24 - (unsigned char *)*v21;
      if (v28 >> 3 > v27) {
        unint64_t v27 = v28 >> 3;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29) {
        long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v21 + 2), v29);
      }
      else {
        long long v30 = 0;
      }
      long long v31 = &v30[16 * v26];
      int64_t v32 = &v30[16 * v29];
      *(_DWORD *)long long v31 = 0;
      *((_DWORD *)v31 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
      *((_DWORD *)v31 + 2) = -1;
      *((float *)v31 + 3) = v3;
      float v25 = v31 + 16;
      unint64_t v33 = (char *)*v23;
      int64_t v34 = (char *)*v21;
      if (*v23 != *v21)
      {
        do
        {
          *((_OWORD *)v31 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_OWORD *)v33 - 1);
          v31 -= 16;
          v33 -= 16;
        }
        while (v33 != v34);
        unint64_t v33 = (char *)*v21;
      }
      *uint64_t v21 = v31;
      *uint64_t v23 = v25;
      v21[2] = v32;
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *(_DWORD *)char v22 = 0;
      *((_DWORD *)v22 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
      *((_DWORD *)v22 + 2) = -1;
      *((float *)v22 + 3) = v3;
      float v25 = v22 + 16;
    }
    *uint64_t v23 = v25;
  }
}

void sub_1B1D767CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessTransitions(fst *a1, float **a2, int a3)
{
  long long v67 = 0;
  long long v68 = 0;
  long long v69 = 0;
  float v3 = *a2;
  uint64_t v58 = (unsigned int *)a2[1];
  if (*a2 == (float *)v58)
  {
    unsigned int v38 = 0;
    uint64_t v37 = 0;
    goto LABEL_66;
  }
  uint64_t v4 = (uint64_t)a1 + 136;
  do
  {
    uint64_t v5 = *((void *)a1 + 9);
    uint64_t v6 = *(unsigned int *)v3;
    unint64_t v66 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v5 + 136))(v5, v6, &v62);
    while (1)
    {
      if (!v62)
      {
        if (v66 >= (unint64_t)v64) {
          goto LABEL_61;
        }
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void *))(*(void *)v62 + 24))(v62)) {
        break;
      }
      if (v62)
      {
        uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v62 + 32))();
        goto LABEL_10;
      }
LABEL_9:
      uint64_t v7 = (uint64_t)&v63[4 * v66];
LABEL_10:
      int v8 = *(_DWORD *)v7;
      if (*(_DWORD *)v7)
      {
        float v9 = v3[2];
        float v10 = NAN;
        if (v9 != -INFINITY)
        {
          float v11 = *(float *)(v7 + 8);
          float v10 = NAN;
          if (v11 != -INFINITY)
          {
            BOOL v12 = v11 == INFINITY || v9 == INFINITY;
            float v13 = v9 + v11;
            if (v12) {
              float v10 = INFINITY;
            }
            else {
              float v10 = v13;
            }
          }
        }
        int v14 = *(_DWORD *)(v7 + 12);
        if (*(_DWORD *)(v7 + 4))
        {
          memset(&__p, 0, sizeof(__p));
          fst::StringRepository<int,int>::SeqOfId(v4, *((_DWORD *)v3 + 1), &__p);
          std::vector<unsigned int>::pointer end = __p.__end_;
          if (__p.__end_ >= __p.__end_cap_.__value_)
          {
            std::vector<unsigned int>::pointer begin = __p.__begin_;
            int64_t v19 = __p.__end_ - __p.__begin_;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            int64_t v21 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
            if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v20) {
              unint64_t v20 = v21 >> 1;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22)
            {
              uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v22);
              std::vector<unsigned int>::pointer begin = __p.__begin_;
              std::vector<unsigned int>::pointer end = __p.__end_;
            }
            else
            {
              uint64_t v23 = 0;
            }
            int v24 = (unsigned int *)&v23[4 * v19];
            *int v24 = *(_DWORD *)(v7 + 4);
            float v16 = v24 + 1;
            while (end != begin)
            {
              unsigned int v25 = *--end;
              *--int v24 = v25;
            }
            __p.__begin_ = v24;
            __p.__end_ = v16;
            __p.__end_cap_.__value_ = (unsigned int *)&v23[4 * v22];
            if (begin) {
              operator delete(begin);
            }
          }
          else
          {
            *__p.__end_ = *(_DWORD *)(v7 + 4);
            float v16 = end + 1;
          }
          __p.__end_ = v16;
          unsigned int v17 = fst::StringRepository<int,int>::IdOfSeq(v4, (uint64_t)&__p);
          if (__p.__begin_)
          {
            __p.__end_ = __p.__begin_;
            operator delete(__p.__begin_);
          }
        }
        else
        {
          unsigned int v17 = *((_DWORD *)v3 + 1);
        }
        uint64_t v26 = v68;
        if (v68 >= v69)
        {
          uint64_t v28 = (v68 - (unsigned char *)v67) >> 4;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = v69 - (unsigned char *)v67;
          if ((v69 - (unsigned char *)v67) >> 3 > v29) {
            unint64_t v29 = v30 >> 3;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31) {
            int64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v69, v31);
          }
          else {
            int64_t v32 = 0;
          }
          unint64_t v33 = &v32[16 * v28];
          *(_DWORD *)unint64_t v33 = v8;
          *((_DWORD *)v33 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v14;
          *((_DWORD *)v33 + 2) = v17;
          *((float *)v33 + 3) = v10;
          unint64_t v35 = (char *)v67;
          int64_t v34 = v68;
          uint64_t v36 = v33;
          if (v68 != v67)
          {
            do
            {
              *((_OWORD *)v36 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_OWORD *)v34 - 1);
              v36 -= 16;
              v34 -= 16;
            }
            while (v34 != v35);
            int64_t v34 = (char *)v67;
          }
          unint64_t v27 = v33 + 16;
          long long v67 = v36;
          long long v68 = v33 + 16;
          long long v69 = &v32[16 * v31];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(_DWORD *)long long v68 = v8;
          *((_DWORD *)v26 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v14;
          *((_DWORD *)v26 + 2) = v17;
          unint64_t v27 = v26 + 16;
          *((float *)v26 + 3) = v10;
        }
        long long v68 = v27;
      }
      if (v62) {
        (*(void (**)(void *))(*(void *)v62 + 40))(v62);
      }
      else {
        ++v66;
      }
    }
    if (v62)
    {
      (*(void (**)(void))(*(void *)v62 + 8))();
      goto LABEL_63;
    }
LABEL_61:
    if (v65) {
      --*v65;
    }
LABEL_63:
    v3 += 3;
  }
  while (v3 != (float *)v58);
  uint64_t v37 = (int *)v67;
  unsigned int v38 = (int *)v68;
LABEL_66:
  unint64_t v39 = 126 - 2 * __clz(((char *)v38 - (char *)v37) >> 4);
  if (v38 == v37) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = v39;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,false>((uint64_t)v37, v38, (uint64_t)&v62, v40, 1);
  uint64_t v41 = (int *)v67;
  uint64_t v42 = (int *)v68;
  int v62 = 0;
  float v63 = 0;
  float v64 = 0;
  while (v41 != v42)
  {
    int v43 = *v41;
    uint64_t v44 = (char *)v62;
    float v63 = v62;
    while (*v41 == v43)
    {
      uint64_t v45 = (uint64_t *)(v41 + 1);
      if (v44 >= v64)
      {
        unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((v44 - (unsigned char *)v62) >> 2);
        unint64_t v48 = v47 + 1;
        if (v47 + 1 > 0x1555555555555555) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v64 - (unsigned char *)v62) >> 2) > v48) {
          unint64_t v48 = 0x5555555555555556 * ((v64 - (unsigned char *)v62) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v64 - (unsigned char *)v62) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v49 = 0x1555555555555555;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49) {
          unint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v64, v49);
        }
        else {
          unint64_t v50 = 0;
        }
        unint64_t v51 = &v50[12 * v47];
        uint64_t v52 = *v45;
        *((_DWORD *)v51 + 2) = v41[3];
        *(void *)unint64_t v51 = v52;
        float v54 = v62;
        float v53 = v63;
        float v55 = v51;
        if (v63 != v62)
        {
          do
          {
            uint64_t v56 = *(void *)(v53 - 3);
            v53 -= 3;
            int v57 = v53[2];
            *(void *)(v55 - 12) = v56;
            v55 -= 12;
            *((_DWORD *)v55 + 2) = v57;
          }
          while (v53 != v54);
          float v53 = v62;
        }
        uint64_t v44 = v51 + 12;
        int v62 = v55;
        float v63 = v51 + 12;
        float v64 = &v50[12 * v49];
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        uint64_t v46 = *v45;
        *((_DWORD *)v44 + 2) = v41[3];
        *(void *)uint64_t v44 = v46;
        v44 += 12;
      }
      float v63 = v44;
      v41 += 4;
      if (v41 == v42)
      {
        uint64_t v41 = v42;
        break;
      }
    }
    fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessTransition(a1, a3, v43, (float **)&v62);
  }
  if (v62)
  {
    float v63 = v62;
    operator delete(v62);
  }
  if (v67)
  {
    long long v68 = (char *)v67;
    operator delete(v67);
  }
}

void sub_1B1D76D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::StringRepository<int,int>::SeqOfId(uint64_t a1, int a2, std::vector<unsigned int> *a3)
{
  if (*(_DWORD *)(a1 + 68) == a2)
  {
    a3->__end_ = a3->__begin_;
  }
  else if (*(_DWORD *)(a1 + 72) <= a2)
  {
    std::vector<int>::resize(a3, 1uLL);
    *a3->__begin_ = a2 - *(_DWORD *)(a1 + 72);
  }
  else
  {
    uint64_t v6 = *(void *)(*(void *)a1 + 8 * a2);
    if ((std::vector<unsigned int> *)v6 != a3)
    {
      uint64_t v7 = *(char **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      unint64_t v9 = (v8 - *(void *)v6) >> 2;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, v7, v8, v9);
    }
  }
}

uint64_t fst::StringRepository<int,int>::IdOfSeq(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
  if (v2 == 1) {
    return fst::StringRepository<int,int>::IdOfLabel(a1, **(_DWORD **)a2);
  }
  if (v2) {
    return fst::StringRepository<int,int>::IdOfSeqInternal(a1, a2);
  }
  return *(unsigned int *)(a1 + 68);
}

void std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::reserve(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (a1[1] - *a1) / 12;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(v3, a2);
    uint64_t v7 = &v6[12 * v5];
    unint64_t v9 = &v6[12 * v8];
    float v11 = *a1;
    float v10 = a1[1];
    BOOL v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *(void *)(v10 - 12);
        v10 -= 12;
        int v14 = *((_DWORD *)v10 + 2);
        *(void *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      float v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

char *std::__tree<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>>::__emplace_hint_unique_key_args<int,std::pair<int const,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> const&>(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__find_equal<quasar::PronType>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 28) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t **std::__tree<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    float v11 = operator new(0x30uLL);
    v11[7] = **a4;
    v11[10] = 0;
    *((void *)v11 + 4) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t fst::StringRepository<int,int>::IdOfLabel(uint64_t a1, int a2)
{
  if ((a2 & 0x80000000) == 0 && *(_DWORD *)(a1 + 76) >= a2) {
    return (*(_DWORD *)(a1 + 72) + a2);
  }
  int v10 = 0;
  uint64_t v4 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v10, 1uLL);
  *uint64_t v4 = a2;
  std::vector<unsigned int> __p = v4;
  int v10 = &v4[v5];
  unint64_t v9 = v4 + 1;
  uint64_t v6 = fst::StringRepository<int,int>::IdOfSeqInternal(a1, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_1B1D77220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StringRepository<int,int>::IdOfSeqInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,int>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorKey,fst::StringRepository<int,int>::VectorEqual,true>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorEqual,fst::StringRepository<int,int>::VectorKey,true>,std::allocator<std::__hash_value_type<std::vector<int> const*,int>>>::find<std::vector<int> const*>((void *)(a1 + 24), &v4);
  if (!v2) {
    operator new();
  }
  return *((unsigned int *)v2 + 6);
}

void sub_1B1D773B8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

const void ***std::__hash_table<std::__hash_value_type<std::vector<int> const*,int>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorKey,fst::StringRepository<int,int>::VectorEqual,true>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorEqual,fst::StringRepository<int,int>::VectorKey,true>,std::allocator<std::__hash_value_type<std::vector<int> const*,int>>>::find<std::vector<int> const*>(void *a1, uint64_t *a2)
{
  uint64_t v3 = *(int **)*a2;
  uint64_t v4 = *(int **)(*a2 + 8);
  if (v3 == v4)
  {
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v6 = 1;
    do
    {
      uint64_t v7 = *v3++;
      v5 += v6 * v7;
      v6 *= 103333;
    }
    while (v3 != v4);
  }
  int8x8_t v8 = (int8x8_t)a1[1];
  if (!*(void *)&v8) {
    return 0;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v5;
    if (v5 >= *(void *)&v8) {
      unint64_t v11 = v5 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v8 - 1) & v5;
  }
  BOOL v12 = *(const void *****)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v15 = (unint64_t)v13[1];
      if (v15 == v5)
      {
        if (std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorEqual,fst::StringRepository<int,int>::VectorKey,true>::operator()[abi:ne180100](v14, v13 + 2, a2))
        {
          return v13;
        }
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(void *)&v8) {
            v15 %= *(void *)&v8;
          }
        }
        else
        {
          v15 &= *(void *)&v8 - 1;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      uint64_t v13 = (const void ***)*v13;
    }
    while (v13);
  }
  return v13;
}

BOOL std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorEqual,fst::StringRepository<int,int>::VectorKey,true>::operator()[abi:ne180100](uint64_t a1, const void ***a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = **a2;
  size_t v5 = (unsigned char *)(*a2)[1] - v4;
  return v5 == *(void *)(v3 + 8) - *(void *)v3 && memcmp(v4, *(const void **)v3, v5) == 0;
}

void *std::__hash_table<std::__hash_value_type<std::vector<int> const*,int>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorKey,fst::StringRepository<int,int>::VectorEqual,true>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorEqual,fst::StringRepository<int,int>::VectorKey,true>,std::allocator<std::__hash_value_type<std::vector<int> const*,int>>>::__emplace_unique_key_args<std::vector<int> const*,std::piecewise_construct_t const&,std::tuple<std::vector<int> const* const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  int8x8_t v8 = *(int **)*a2;
  uint8x8_t v9 = *(int **)(*a2 + 8);
  if (v8 == v9)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 1;
    do
    {
      uint64_t v12 = *v8++;
      v10 += v11 * v12;
      v11 *= 103333;
    }
    while (v8 != v9);
  }
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    unint64_t v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v13) {
        unint64_t v4 = v10 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v10;
    }
    float v16 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v16)
    {
      for (uint64_t i = *v16; i; uint64_t i = *(void **)i)
      {
        unint64_t v18 = *((void *)i + 1);
        if (v18 == v10)
        {
          if (std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorEqual,fst::StringRepository<int,int>::VectorKey,true>::operator()[abi:ne180100](a1 + 32, (const void ***)i + 2, a2))
          {
            return i;
          }
        }
        else
        {
          if (v15 > 1)
          {
            if (v18 >= v13) {
              v18 %= v13;
            }
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v10;
  *((void *)i + 2) = **a4;
  *((_DWORD *)i + 6) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    BOOL v21 = 1;
    if (v13 >= 3) {
      BOOL v21 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v13);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    unint64_t v13 = *(void *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v10 >= v13) {
        unint64_t v4 = v10 % v13;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_43:
    *uint64_t v26 = i;
    goto LABEL_44;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v25 + 8 * v4) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v27 >= v13) {
        v27 %= v13;
      }
    }
    else
    {
      v27 &= v13 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_43;
  }
LABEL_44:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1D777BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessTransition(fst *a1, int a2, int a3, float **a4)
{
  int8x8_t v8 = *a4;
  uint8x8_t v9 = (int *)a4[1];
  if (*a4 == (float *)v9)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = *a4;
    while (1)
    {
      if (v8 != v11)
      {
        uint64_t v12 = *(void *)v8;
        void v11[2] = v8[2];
        *(void *)uint64_t v11 = v12;
      }
      v8 += 3;
      if (v8 == (float *)v9) {
        break;
      }
      int v13 = *(_DWORD *)v11;
      while (*(_DWORD *)v8 == v13)
      {
        if (*((_DWORD *)v8 + 1) != *((_DWORD *)v11 + 1))
        {
          uint64_t v52 = (void *)fst::cerr(a1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"DeterminizerStar: FST was not functional -> not determinizable\n", 63);
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Non-functional FST: cannot determinize.\n");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        float v14 = v11[2];
        float v15 = v8[2];
        if (v14 != INFINITY)
        {
          if (v15 == INFINITY)
          {
            float v15 = v11[2];
          }
          else if (v14 <= v15)
          {
            float v17 = expf(-(float)(v15 - v14));
            float v15 = v14 - logf(v17 + 1.0);
          }
          else
          {
            float v16 = expf(-(float)(v14 - v15));
            float v15 = v15 - logf(v16 + 1.0);
          }
        }
        void v11[2] = v15;
        v8 += 3;
        if (v8 == (float *)v9) {
          goto LABEL_19;
        }
      }
      v11 += 3;
      ++v10;
      if (v8 == (float *)v9) {
        goto LABEL_21;
      }
    }
LABEL_19:
    ++v10;
  }
LABEL_21:
  std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::resize((uint64_t)a4, v10);
  memset(&v56, 0, sizeof(v56));
  unint64_t v18 = (int *)*a4;
  float v19 = (int *)a4[1];
  memset(&__p, 0, sizeof(__p));
  if (v18 != v19)
  {
    float v20 = v18;
    while (1)
    {
      if (v20 == v18)
      {
        fst::StringRepository<int,int>::SeqOfId((uint64_t)a1 + 136, v18[1], &v56);
        std::vector<unsigned int>::pointer begin = v56.__begin_;
        std::vector<unsigned int>::pointer end = v56.__end_;
      }
      else
      {
        fst::StringRepository<int,int>::SeqOfId((uint64_t)a1 + 136, v20[1], &__p);
        std::vector<unsigned int>::size_type v21 = __p.__end_ - __p.__begin_;
        std::vector<unsigned int>::pointer begin = v56.__begin_;
        std::vector<unsigned int>::pointer end = v56.__end_;
        if (v21 < v56.__end_ - v56.__begin_)
        {
          std::vector<int>::resize(&v56, v21);
          std::vector<unsigned int>::pointer begin = v56.__begin_;
          std::vector<unsigned int>::pointer end = v56.__end_;
        }
        if (end == begin) {
          break;
        }
        std::vector<unsigned int>::size_type v24 = 0;
        do
        {
          if (__p.__begin_[v24] != begin[v24])
          {
            std::vector<int>::resize(&v56, v24);
            std::vector<unsigned int>::pointer begin = v56.__begin_;
            std::vector<unsigned int>::pointer end = v56.__end_;
          }
          ++v24;
        }
        while (v24 < end - begin);
      }
      if (end != begin)
      {
        v20 += 3;
        if (v20 != v19) {
          continue;
        }
      }
      break;
    }
  }
  int v25 = fst::StringRepository<int,int>::IdOfSeq((uint64_t)a1 + 136, (uint64_t)&v56);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  float v26 = *((float *)v18 + 2);
  unint64_t v27 = v18 + 3;
  if (v18 + 3 == v19)
  {
    float v28 = *((float *)v18 + 2);
  }
  else
  {
    do
    {
      float v28 = *((float *)v27 + 2);
      if (v26 != INFINITY)
      {
        if (v28 == INFINITY)
        {
          float v28 = v26;
        }
        else if (v26 <= v28)
        {
          float v30 = expf(-(float)(v28 - v26));
          float v28 = v26 - logf(v30 + 1.0);
        }
        else
        {
          float v29 = expf(-(float)(v26 - v28));
          float v28 = v28 - logf(v29 + 1.0);
        }
      }
      v27 += 3;
      float v26 = v28;
    }
    while (v27 != v19);
  }
  int v54 = a3;
  unint64_t v31 = v56.__begin_;
  if (v18 != v19)
  {
    uint64_t v32 = v56.__end_ - v56.__begin_;
    do
    {
      float v33 = *((float *)v18 + 2);
      if (v33 == -INFINITY || (LODWORD(v28) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        float v34 = NAN;
      }
      else
      {
        BOOL v35 = v33 == INFINITY;
        float v34 = v33 - v28;
        if (v35) {
          float v34 = INFINITY;
        }
      }
      *((float *)v18 + 2) = v34;
      v18[1] = fst::StringRepository<int,int>::RemovePrefix((uint64_t)a1 + 136, v18[1], v32);
      v18 += 3;
    }
    while (v18 != v19);
    unint64_t v31 = v56.__begin_;
  }
  if (v31)
  {
    v56.__end_ = v31;
    operator delete(v31);
  }
  int v36 = fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetToStateId((uint64_t)a1, a4);
  int v37 = v36;
  unsigned int v38 = (void **)(*((void *)a1 + 6) + 24 * a2);
  uint64_t v40 = v38 + 1;
  unint64_t v39 = (char *)v38[1];
  uint64_t v41 = (char *)v38[2];
  if (v39 >= v41)
  {
    uint64_t v43 = (v39 - (unsigned char *)*v38) >> 4;
    unint64_t v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v45 = v41 - (unsigned char *)*v38;
    if (v45 >> 3 > v44) {
      unint64_t v44 = v45 >> 3;
    }
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v44;
    }
    if (v46) {
      unint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v38 + 2), v46);
    }
    else {
      unint64_t v47 = 0;
    }
    unint64_t v48 = &v47[16 * v43];
    unint64_t v49 = &v47[16 * v46];
    *(_DWORD *)unint64_t v48 = v54;
    *((_DWORD *)v48 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v25;
    *((_DWORD *)v48 + 2) = v37;
    *((float *)v48 + 3) = v28;
    uint64_t v42 = v48 + 16;
    unint64_t v50 = (char *)*v40;
    unint64_t v51 = (char *)*v38;
    if (*v40 != *v38)
    {
      do
      {
        *((_OWORD *)v48 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_OWORD *)v50 - 1);
        v48 -= 16;
        v50 -= 16;
      }
      while (v50 != v51);
      unint64_t v50 = (char *)*v38;
    }
    *unsigned int v38 = v48;
    *uint64_t v40 = v42;
    v38[2] = v49;
    if (v50) {
      operator delete(v50);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v39 = a3;
    *((_DWORD *)v39 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v25;
    *((_DWORD *)v39 + 2) = v36;
    uint64_t v42 = v39 + 16;
    *((float *)v39 + 3) = v28;
  }
  *uint64_t v40 = v42;
}

void sub_1B1D77CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = ((uint64_t)a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v24 = *(a2 - 4);
          int v25 = *(_DWORD *)v11;
          if (v24 < *(_DWORD *)v11 || v24 <= v25 && *(a2 - 3) < *(_DWORD *)(v11 + 4))
          {
            *(_DWORD *)uint64_t v11 = v24;
            *(a2 - 4) = v25;
            uint64_t v28 = *(void *)(v11 + 4);
            int v30 = *(_DWORD *)(v11 + 12);
            uint64_t v26 = *(void *)(a2 - 3);
            *(_DWORD *)(v11 + 12) = *(a2 - 1);
            *(void *)(v11 + 4) = v26;
            *(void *)(a2 - 3) = v28;
            *(a2 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v30;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)v11, (int *)(v11 + 16), a2 - 4);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(v11, v11 + 16, v11 + 32, (uint64_t)(a2 - 4));
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(v11, v11 + 16, v11 + 32, v11 + 48, a2 - 4);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if ((int *)v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = v11 + 16 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)v11, (int *)(v11 + 16 * (v15 >> 1)), a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)(v11 + 16), (int *)(v17 - 16), a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)(v11 + 32), (int *)(v11 + 16 + 16 * v16), a2 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)(v17 - 16), (int *)v17, (int *)(v11 + 16 + 16 * v16));
      int v18 = *(_DWORD *)v11;
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v17;
      *(_DWORD *)unint64_t v17 = v18;
      int v29 = *(_DWORD *)(v11 + 12);
      uint64_t v27 = *(void *)(v11 + 4);
      uint64_t v19 = *(void *)(v17 + 4);
      *(_DWORD *)(v11 + 12) = *(_DWORD *)(v17 + 12);
      *(void *)(v11 + 4) = v19;
      *(_DWORD *)(v17 + 12) = v29;
      *(void *)(v17 + 4) = v27;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)(v11 + 16 * (v15 >> 1)), (int *)v11, a2 - 4);
      if (a5) {
        goto LABEL_16;
      }
    }
    int v20 = *(_DWORD *)(v11 - 16);
    if (v20 >= *(_DWORD *)v11 && (v20 > *(_DWORD *)v11 || *(_DWORD *)(v11 - 12) >= *(_DWORD *)(v11 + 4)))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &>((int *)v11, a2);
      uint64_t v11 = result;
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &>((int *)v11, a2);
    if ((v22 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(v11, v21);
    uint64_t v11 = v21 + 16;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(v21 + 16, (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (int *)v21;
      if (v23) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_19:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,false>(v10, v21, a3, -v13, a5 & 1);
      uint64_t v11 = v21 + 16;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)v11, a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)v11, a2);
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(int *result, int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 4;
    if (result + 4 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      while (1)
      {
        char v5 = v4;
        unint64_t v4 = v2;
        int v6 = v5[4];
        int v7 = *v5;
        if (v6 < *v5) {
          break;
        }
        if (v6 <= v7)
        {
          int v8 = v5[5];
          if (v8 < v5[1]) {
            goto LABEL_6;
          }
        }
LABEL_17:
        uint64_t v2 = v4 + 4;
        v3 += 16;
        if (v4 + 4 == a2) {
          return result;
        }
      }
      int v8 = v5[5];
LABEL_6:
      uint64_t v9 = *((void *)v5 + 3);
      v5[4] = v7;
      uint64_t v10 = v5 + 1;
      *(void *)(v4 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *(void *)(v5 + 1);
      void v4[3] = v5[3];
      if (v5 == result)
      {
LABEL_13:
        char v5 = result;
      }
      else
      {
        uint64_t v11 = v3;
        while (1)
        {
          uint64_t v12 = (uint64_t)result + v11;
          int v13 = *(int *)((char *)result + v11 - 16);
          if (v6 >= v13)
          {
            if (v6 > v13) {
              goto LABEL_14;
            }
            if (v8 >= *(int *)((char *)result + v11 - 12)) {
              break;
            }
          }
          uint64_t v10 = v5 - 3;
          v5 -= 4;
          *(_DWORD *)uint64_t v12 = v13;
          *(void *)(v12 + 4) = *(void *)(v12 - 12);
          *(_DWORD *)(v12 + 12) = *(_DWORD *)(v12 - 4);
          v11 -= 16;
          if (!v11)
          {
            uint64_t v10 = result + 1;
            goto LABEL_13;
          }
        }
        uint64_t v10 = (int *)((char *)result + v11 + 4);
        char v5 = (int *)((char *)result + v11);
      }
LABEL_14:
      int *v5 = v6;
      *uint64_t v10 = v8;
      *((void *)v5 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
      goto LABEL_17;
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(int *result, int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 4;
    if (result + 4 != a2)
    {
      for (uint64_t i = result + 1; ; i += 4)
      {
        unint64_t v4 = result;
        uint64_t result = v2;
        int v5 = v4[4];
        int v6 = *v4;
        if (v5 < *v4) {
          break;
        }
        if (v5 <= v6)
        {
          int v7 = v4[5];
          if (v7 < v4[1]) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 4;
        if (result + 4 == a2) {
          return result;
        }
      }
      int v7 = v4[5];
LABEL_6:
      uint64_t v8 = *((void *)v4 + 3);
      for (uint64_t j = i; ; j -= 4)
      {
        j[3] = v6;
        *((void *)j + 2) = *(void *)j;
        j[6] = j[2];
        int v6 = *(j - 5);
        if (v5 >= v6 && (v5 > v6 || v7 >= *(j - 4))) {
          break;
        }
      }
      *(j - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
      *uint64_t j = v7;
      *(void *)(j + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(int *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a1;
  if (*a2 < *a1 || v3 <= v4 && a2[1] < a1[1])
  {
    int v5 = *a3;
    if (*a3 < v3 || v5 <= v3 && a3[1] < a2[1])
    {
      *a1 = v5;
      *a3 = v4;
      int v6 = a1[3];
      uint64_t v7 = *(void *)(a1 + 1);
      int v8 = a3[3];
      *(void *)(a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *(void *)(a3 + 1);
      a1[3] = v8;
      *(void *)(a3 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
      a3[3] = v6;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      int v20 = (uint64_t *)(a2 + 1);
      int v21 = a1[3];
      uint64_t v22 = *(void *)(a1 + 1);
      int v23 = a2[3];
      *(void *)(a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *(void *)(a2 + 1);
      a1[3] = v23;
      *(void *)(a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v22;
      a2[3] = v21;
      int v24 = *a3;
      int v25 = *a2;
      if (*a3 < *a2 || v24 <= v25 && a3[1] < *(_DWORD *)v20)
      {
        *a2 = v24;
        *a3 = v25;
        int v26 = a2[3];
        uint64_t v27 = *v20;
        int v28 = a3[3];
        *int v20 = *(void *)(a3 + 1);
        a2[3] = v28;
        *(void *)(a3 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v27;
        a3[3] = v26;
        return 2;
      }
    }
    return 1;
  }
  int v10 = *a3;
  if (*a3 < v3 || v10 <= v3 && a3[1] < a2[1])
  {
    *a2 = v10;
    *a3 = v3;
    uint64_t v11 = a2 + 1;
    uint64_t v12 = *(void *)(a2 + 1);
    int v13 = a2[3];
    int v14 = a3[3];
    *(void *)(a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *(void *)(a3 + 1);
    a2[3] = v14;
    *(void *)(a3 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v12;
    a3[3] = v13;
    int v15 = *a2;
    int v16 = *a1;
    if (*a2 < *a1 || v15 <= v16 && *(_DWORD *)v11 < a1[1])
    {
      *a1 = v15;
      *a2 = v16;
      int v17 = a1[3];
      uint64_t v18 = *(void *)(a1 + 1);
      int v19 = a2[3];
      *(void *)(a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *v11;
      a1[3] = v19;
      void *v11 = v18;
      a2[3] = v17;
      return 2;
    }
    return 1;
  }
  return 0;
}

_DWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &>(int *a1, _DWORD *a2)
{
  int v2 = *a1;
  int v3 = a1[1];
  int v4 = *(a2 - 4);
  if (*a1 >= v4 && (v2 > v4 || v3 >= *(a2 - 3)))
  {
    for (uint64_t i = a1 + 4; i < a2 && v2 >= *i && (v2 > *i || v3 >= i[1]); i += 4)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      int v7 = i[4];
      i += 4;
      int v6 = v7;
    }
    while (v2 >= v7 && (v2 > v6 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 4; v2 < v4 || v2 <= v4 && v3 < a2[1]; a2 -= 4)
    {
      int v8 = *(a2 - 4);
      int v4 = v8;
    }
  }
  uint64_t v9 = *((void *)a1 + 1);
  if (i < a2)
  {
    int v10 = *i;
    int v11 = *a2;
    do
    {
      _DWORD *i = v11;
      *a2 = v10;
      int v19 = i[3];
      uint64_t v18 = *(void *)(i + 1);
      uint64_t v12 = *(void *)(a2 + 1);
      i[3] = a2[3];
      *(void *)(i + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v12;
      a2[3] = v19;
      *(void *)(a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v18;
      do
      {
        int v13 = i[4];
        i += 4;
        int v10 = v13;
      }
      while (v2 >= v13 && (v2 > v10 || v3 >= i[1]));
      do
      {
        do
        {
          int v14 = *(a2 - 4);
          a2 -= 4;
          int v11 = v14;
          BOOL v15 = v2 <= v14;
        }
        while (v2 < v14);
      }
      while (v15 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 4 != a1)
  {
    *a1 = *(i - 4);
    uint64_t v16 = *(void *)(i - 3);
    a1[3] = *(i - 1);
    *(void *)(a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
  }
  *(i - 4) = v2;
  *(i - 3) = v3;
  *((void *)i - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &>(int *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  int v4 = a1[1];
  uint64_t v5 = *((void *)a1 + 1);
  while (1)
  {
    int v6 = a1[v2 + 4];
    if (v6 >= v3 && (v6 > v3 || a1[v2 + 5] >= v4)) {
      break;
    }
    v2 += 4;
  }
  unint64_t v7 = (unint64_t)&a1[v2 + 4];
  if (v2 * 4)
  {
    do
    {
      int v9 = *(a2 - 4);
      a2 -= 4;
      int v8 = v9;
    }
    while (v9 >= v3 && (v8 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v7 < (unint64_t)a2)
    {
      do
      {
        int v11 = *(a2 - 4);
        a2 -= 4;
        int v10 = v11;
        if (v11 < v3) {
          break;
        }
        if (v10 > v3) {
          goto LABEL_19;
        }
      }
      while (a2[1] >= v4 && v7 < (unint64_t)a2);
    }
  }
  if (v7 >= (unint64_t)a2)
  {
    unint64_t v14 = v7;
  }
  else
  {
    int v13 = *a2;
    unint64_t v14 = v7;
    BOOL v15 = a2;
    do
    {
      *(_DWORD *)unint64_t v14 = v13;
      _DWORD *v15 = v6;
      int v23 = *(_DWORD *)(v14 + 12);
      uint64_t v22 = *(void *)(v14 + 4);
      uint64_t v16 = *(void *)(v15 + 1);
      *(_DWORD *)(v14 + 12) = v15[3];
      *(void *)(v14 + 4) = v16;
      void v15[3] = v23;
      *(void *)(v15 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v22;
      do
      {
        do
        {
          int v17 = *(_DWORD *)(v14 + 16);
          v14 += 16;
          int v6 = v17;
          BOOL v18 = v17 <= v3;
        }
        while (v17 < v3);
      }
      while (v18 && *(_DWORD *)(v14 + 4) < v4);
      do
      {
        int v19 = *(v15 - 4);
        v15 -= 4;
        int v13 = v19;
      }
      while (v19 >= v3 && (v13 > v3 || v15[1] >= v4));
    }
    while (v14 < (unint64_t)v15);
  }
  if ((int *)(v14 - 16) != a1)
  {
    *a1 = *(_DWORD *)(v14 - 16);
    uint64_t v20 = *(void *)(v14 - 12);
    a1[3] = *(_DWORD *)(v14 - 4);
    *(void *)(a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v20;
  }
  *(_DWORD *)(v14 - 16) = v3;
  *(_DWORD *)(v14 - 12) = v4;
  *(void *)(v14 - 8) = v5;
  return v14 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(_DWORD *)(a2 - 16);
      int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1 || v6 <= v7 && *(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 4))
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        int v8 = *(_DWORD *)(a1 + 12);
        uint64_t v9 = *(void *)(a1 + 4);
        int v10 = *(_DWORD *)(a2 - 4);
        *(void *)(a1 + 4) = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 12) = v10;
        *(void *)(a2 - 12) = v9;
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)a1, (int *)(a1 + 16), (int *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, a1 + 16, a1 + 32, a1 + 48, (int *)(a2 - 16));
      return 1;
    default:
      uint64_t v11 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      uint64_t v12 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    int v15 = *(_DWORD *)v12;
    int v16 = *(_DWORD *)v11;
    if (*(_DWORD *)v12 < *(_DWORD *)v11) {
      break;
    }
    if (v15 <= v16)
    {
      int v17 = *(_DWORD *)(v12 + 4);
      if (v17 < *(_DWORD *)(v11 + 4)) {
        goto LABEL_12;
      }
    }
LABEL_21:
    uint64_t v11 = v12;
    v13 += 16;
    v12 += 16;
    if (v12 == a2) {
      return 1;
    }
  }
  int v17 = *(_DWORD *)(v12 + 4);
LABEL_12:
  uint64_t v18 = *(void *)(v12 + 8);
  *(_DWORD *)uint64_t v12 = v16;
  int v19 = (_DWORD *)(v11 + 4);
  *(void *)(v12 + 4) = *(void *)(v11 + 4);
  *(_DWORD *)(v12 + 12) = *(_DWORD *)(v11 + 12);
  if (v11 == a1)
  {
LABEL_19:
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v20 = v13;
    while (1)
    {
      uint64_t v21 = a1 + v20;
      int v22 = *(_DWORD *)(a1 + v20 + 16);
      if (v15 >= v22)
      {
        if (v15 > v22) {
          goto LABEL_20;
        }
        uint64_t v23 = a1 + v20;
        if (v17 >= *(_DWORD *)(a1 + v20 + 20)) {
          break;
        }
      }
      int v19 = (_DWORD *)(v11 - 12);
      v11 -= 16;
      *(_DWORD *)(v21 + 32) = v22;
      *(void *)(v21 + 36) = *(void *)(v21 + 20);
      *(_DWORD *)(v21 + 44) = *(_DWORD *)(v21 + 28);
      v20 -= 16;
      if (v20 == -32)
      {
        int v19 = (_DWORD *)(a1 + 4);
        goto LABEL_19;
      }
    }
    int v19 = (_DWORD *)(v23 + 36);
    uint64_t v11 = v23 + 32;
  }
LABEL_20:
  *(_DWORD *)uint64_t v11 = v15;
  *int v19 = v17;
  *(void *)(v11 + 8) = v18;
  if (++v14 != 8) {
    goto LABEL_21;
  }
  return v12 + 16 == a2;
}