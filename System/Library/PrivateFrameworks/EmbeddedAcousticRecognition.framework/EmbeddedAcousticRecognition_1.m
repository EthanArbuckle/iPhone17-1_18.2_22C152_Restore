void sub_1B1B0CC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  quasar::AppLmData::Oov::~Oov((char **)&a49);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (long long *)(a2 - 56);
      if (*(char *)(a2 - 33) < 0)
      {
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a2 - 56), *(void *)(a2 - 48));
      }
      else
      {
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *v6;
        v57.__r_.__value_.__r.__words[2] = *(void *)(a2 - 40);
      }
      std::set<std::string>::set[abi:ne180100](v58, (const void ***)(a2 - 32));
      unsigned int v59 = *(_DWORD *)(a2 - 8);
      if (*(char *)(a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else {
        std::string v54 = *(std::string *)a1;
      }
      v32 = std::set<std::string>::set[abi:ne180100](v55, (const void ***)(a1 + 24));
      unsigned int v33 = *(_DWORD *)(a1 + 48);
      unsigned int v56 = v33;
      unsigned int v34 = v59;
      std::__tree<std::string>::destroy((uint64_t)v32, (char *)v55[1]);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      std::__tree<std::string>::destroy((uint64_t)v58, (char *)v58[1]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if (v34 > v33) {
        std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a1, v6);
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1, a1 + 56, a2 - 56);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1, a1 + 56, a1 + 112, a2 - 56);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *,0>(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return 1;
    default:
      uint64_t v7 = a1 + 112;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1, a1 + 56, a1 + 112);
      uint64_t v8 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v35 = 0;
      uint64_t v36 = a2;
      break;
  }
  do
  {
    if (*(char *)(v8 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
    }
    else {
      std::string v51 = *(std::string *)v8;
    }
    std::set<std::string>::set[abi:ne180100](v52, (const void ***)(v8 + 24));
    unsigned int v53 = *(_DWORD *)(v8 + 48);
    if (*(char *)(v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)v7;
      v48.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v10;
    }
    v11 = std::set<std::string>::set[abi:ne180100](v49, (const void ***)(v7 + 24));
    unsigned int v12 = *(_DWORD *)(v7 + 48);
    unsigned int v50 = v12;
    unsigned int v13 = v53;
    std::__tree<std::string>::destroy((uint64_t)v11, (char *)v49[1]);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    std::__tree<std::string>::destroy((uint64_t)v52, (char *)v52[1]);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (v13 <= v12)
    {
      uint64_t v19 = v36;
      goto LABEL_48;
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
    std::string::size_type v14 = *(void *)(v8 + 16);
    v15 = *(const void ***)(v8 + 24);
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)uint64_t v8 = 0;
    __p.__r_.__value_.__r.__words[2] = v14;
    v44 = v15;
    v16 = (void *)(v8 + 32);
    uint64_t v17 = *(void *)(v8 + 32);
    uint64_t v18 = *(void *)(v8 + 40);
    v45 = (char *)v17;
    uint64_t v46 = v18;
    if (v18)
    {
      *(void *)(v17 + 16) = &v45;
      *(void *)(v8 + 24) = v16;
      void *v16 = 0;
      *(void *)(v8 + 40) = 0;
    }
    else
    {
      v44 = (const void **)&v45;
    }
    unsigned int v47 = *(_DWORD *)(v8 + 48);
    for (uint64_t i = v9; ; i -= 56)
    {
      uint64_t v21 = a1 + i;
      v22 = (void **)(a1 + i + 168);
      if (*(char *)(a1 + i + 191) < 0) {
        operator delete(*v22);
      }
      *(_OWORD *)v22 = *(_OWORD *)(v21 + 112);
      *(void *)(a1 + i + 184) = *(void *)(v21 + 128);
      *(unsigned char *)(v21 + 135) = 0;
      *(unsigned char *)(v21 + 112) = 0;
      std::__tree<std::string>::__move_assign(v21 + 192, (void *)(v21 + 136));
      *(_DWORD *)(v21 + 216) = *(_DWORD *)(v21 + 160);
      if (i == -112)
      {
        uint64_t v7 = a1;
        goto LABEL_40;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v40, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v40 = __p;
      }
      std::set<std::string>::set[abi:ne180100](v41, &v44);
      unsigned int v42 = v47;
      v23 = (const std::string::value_type **)(a1 + i + 56);
      if (*(char *)(a1 + i + 79) < 0)
      {
        std::string::__init_copy_ctor_external(&v37, *v23, *(void *)(a1 + i + 64));
      }
      else
      {
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)v23;
        v37.__r_.__value_.__r.__words[2] = *(void *)(a1 + i + 72);
      }
      std::set<std::string>::set[abi:ne180100](v38, (const void ***)(a1 + i + 80));
      unsigned int v24 = *(_DWORD *)(a1 + i + 104);
      unsigned int v39 = v24;
      unsigned int v25 = v42;
      std::__tree<std::string>::destroy((uint64_t)v38, (char *)v38[1]);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      std::__tree<std::string>::destroy((uint64_t)v41, (char *)v41[1]);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v25 <= v24) {
        goto LABEL_40;
      }
LABEL_37:
      v7 -= 56;
    }
    operator delete(v40.__r_.__value_.__l.__data_);
    if (v25 > v24) {
      goto LABEL_37;
    }
    uint64_t v7 = a1 + i + 112;
LABEL_40:
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    v26 = (uint64_t *)(a1 + i + 136);
    long long v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v7 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v7 = v27;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v28 = v7 + 32;
    std::__tree<std::string>::destroy((uint64_t)v26, *(char **)(v7 + 32));
    v29 = v45;
    uint64_t *v26 = (uint64_t)v44;
    *(void *)(v7 + 32) = v29;
    uint64_t v30 = v46;
    *(void *)(v7 + 40) = v46;
    if (v30)
    {
      v31 = 0;
      *((void *)v29 + 2) = v28;
      v44 = (const void **)&v45;
      v45 = 0;
      uint64_t v46 = 0;
    }
    else
    {
      uint64_t *v26 = v28;
      v31 = v45;
    }
    *(_DWORD *)(v7 + 48) = v47;
    std::__tree<std::string>::destroy((uint64_t)&v44, v31);
    uint64_t v19 = v36;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (++v35 == 8) {
      return v8 + 56 == v36;
    }
LABEL_48:
    uint64_t v7 = v8;
    v9 += 56;
    v8 += 56;
  }
  while (v8 != v19);
  return 1;
}

void sub_1B1B0D284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  quasar::AppLmData::Oov::~Oov((char **)(v61 - 144));
  _Unwind_Resume(a1);
}

void std::swap[abi:ne180100]<quasar::AppLmData::Oov>(uint64_t a1, long long *a2)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a1;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v5 = a1 + 24;
  uint64_t v15 = v4;
  v16 = *(uint64_t **)(a1 + 24);
  v6 = (void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  if (v8)
  {
    *(void *)(v7 + 16) = &v17;
    *(void *)(a1 + 24) = v6;
    void *v6 = 0;
    *(void *)(a1 + 40) = 0;
    int v9 = *(char *)(a1 + 23);
    int v19 = *(_DWORD *)(a1 + 48);
    if (v9 < 0) {
      operator delete(*(void **)a1);
    }
  }
  else
  {
    v16 = &v17;
    int v19 = *(_DWORD *)(a1 + 48);
  }
  long long v10 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v10;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  std::__tree<std::string>::__move_assign(v5, (void *)a2 + 3);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  if (*((char *)a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *a2 = *(_OWORD *)__p;
  *((void *)a2 + 2) = v15;
  v11 = a2 + 2;
  std::__tree<std::string>::destroy((uint64_t)a2 + 24, *((char **)a2 + 4));
  uint64_t v12 = v17;
  *((void *)a2 + 3) = v16;
  *((void *)a2 + 4) = v12;
  uint64_t v13 = v18;
  *((void *)a2 + 5) = v18;
  if (v13)
  {
    *(void *)(v12 + 16) = v11;
    uint64_t v12 = 0;
    v16 = &v17;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    *((void *)a2 + 3) = v11;
  }
  *((_DWORD *)a2 + 12) = v19;
  std::__tree<std::string>::destroy((uint64_t)&v16, (char *)v12);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1, a2, a3);
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v32 = *(std::string *)a4;
  }
  std::set<std::string>::set[abi:ne180100](v33, (const void ***)(a4 + 24));
  unsigned int v34 = *(_DWORD *)(a4 + 48);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v29 = *(std::string *)a3;
  }
  uint64_t v8 = std::set<std::string>::set[abi:ne180100](v30, (const void ***)(a3 + 24));
  unsigned int v9 = *(_DWORD *)(a3 + 48);
  unsigned int v31 = v9;
  unsigned int v10 = v34;
  std::__tree<std::string>::destroy((uint64_t)v8, (char *)v30[1]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::__tree<std::string>::destroy((uint64_t)v33, (char *)v33[1]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (v10 > v9)
  {
    std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a3, (long long *)a4);
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v26 = *(std::string *)a3;
    }
    std::set<std::string>::set[abi:ne180100](v27, (const void ***)(a3 + 24));
    unsigned int v28 = *(_DWORD *)(a3 + 48);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v23 = *(std::string *)a2;
    }
    v11 = std::set<std::string>::set[abi:ne180100](v24, (const void ***)(a2 + 24));
    unsigned int v12 = *(_DWORD *)(a2 + 48);
    unsigned int v25 = v12;
    unsigned int v13 = v28;
    std::__tree<std::string>::destroy((uint64_t)v11, (char *)v24[1]);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    std::__tree<std::string>::destroy((uint64_t)v27, (char *)v27[1]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (v13 > v12)
    {
      std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a2, (long long *)a3);
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v20 = *(std::string *)a2;
      }
      std::set<std::string>::set[abi:ne180100](v21, (const void ***)(a2 + 24));
      unsigned int v22 = *(_DWORD *)(a2 + 48);
      if (*(char *)(a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else {
        std::string __p = *(std::string *)a1;
      }
      std::string::size_type v14 = std::set<std::string>::set[abi:ne180100](v18, (const void ***)(a1 + 24));
      unsigned int v15 = *(_DWORD *)(a1 + 48);
      unsigned int v19 = v15;
      unsigned int v16 = v22;
      std::__tree<std::string>::destroy((uint64_t)v14, (char *)v18[1]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::__tree<std::string>::destroy((uint64_t)v21, (char *)v21[1]);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (v16 > v15) {
        std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a1, (long long *)a2);
      }
    }
  }
}

void sub_1B1B0D79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    std::string::size_type v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  std::string v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *std::string v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B1B0DAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  BOOL result = std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1B0DB44(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[2].__r_.__value_.__l.__size_;
  LODWORD(this[3].__r_.__value_.__l.__data_) = 1;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::AppLmData::Oov>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::AppLmData::Oov>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__construct_node_hash<std::pair<std::string const,quasar::AppLmData::Oov>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B1B0DE8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__construct_node_hash<std::pair<std::string const,quasar::AppLmData::Oov>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  BOOL result = std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1B0DF04(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = *(long long *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
  v6 = (void *)a2 + 7;
  std::string::size_type v7 = *((void *)a2 + 7);
  this[2].__r_.__value_.__l.__size_ = v7;
  unint64_t v8 = &this[2].__r_.__value_.__s.__data_[8];
  std::string::size_type v9 = *((void *)a2 + 8);
  this[2].__r_.__value_.__r.__words[2] = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *((void *)a2 + 6) = v6;
    void *v6 = 0;
    *((void *)a2 + 8) = 0;
  }
  else
  {
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  }
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  long long v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  BOOL result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  unint64_t v3 = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(void *)(a1 + 8) = v3;
  long long v4 = (void *)*((void *)v3 + 1);
  if (v4)
  {
    do
    {
      long long v5 = v4;
      long long v4 = (void *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      long long v5 = (void *)*((void *)v3 + 2);
      BOOL v6 = *v5 == (void)v3;
      unint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

_OWORD *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  BOOL v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v11, &v10, a3);
  std::string::size_type v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::string::size_type v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::AppLmData::Oov>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  std::string::size_type v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  float v16 = operator new(0x60uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  void *v16 = 0;
  v16[1] = v9;
  std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string,quasar::AppLmData::Oov,0>((uint64_t)(v16 + 2), a3);
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B1B0E3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string,quasar::AppLmData::Oov,0>(uint64_t result, long long *a2)
{
  long long v2 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)BOOL result = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v3 = *(long long *)((char *)a2 + 24);
  *(void *)(result + 40) = *((void *)a2 + 5);
  *(_OWORD *)(result + 24) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)(result + 48) = *((void *)a2 + 6);
  long long v4 = (void *)a2 + 7;
  uint64_t v5 = *((void *)a2 + 7);
  *(void *)(result + 56) = v5;
  uint64_t v6 = result + 56;
  uint64_t v7 = *((void *)a2 + 8);
  *(void *)(result + 64) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *((void *)a2 + 6) = v4;
    *long long v4 = 0;
    *((void *)a2 + 8) = 0;
  }
  else
  {
    *(void *)(result + 48) = v6;
  }
  *(_DWORD *)(result + 72) = *((_DWORD *)a2 + 18);
  return result;
}

void *std::allocate_shared[abi:ne180100]<quasar::LmeDataFactory,std::allocator<quasar::LmeDataFactory>,std::string const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0xAF0uLL);
  BOOL result = std::__shared_ptr_emplace<quasar::LmeDataFactory>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LmeDataFactory>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1B0E490(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::LmeDataFactory>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LmeDataFactory>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FCD8;
  std::allocator<quasar::LmeDataFactory>::construct[abi:ne180100]<quasar::LmeDataFactory,std::string const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1B0E500(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LmeDataFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FCD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LmeDataFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FCD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::LmeDataFactory>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<quasar::LmeDataFactory>::construct[abi:ne180100]<quasar::LmeDataFactory,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(v3, 0, sizeof(v3));
  quasar::LmeDataFactory::LmeDataFactory(a2, a3, 1, 1, v3);
  char v4 = (void **)v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void sub_1B1B0E604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::GlobalLRUCache<std::string,std::vector<std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FC30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::GlobalLRUCache<std::string,std::vector<std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FC30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::GlobalLRUCache<std::string,std::vector<std::string>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *quasar::GlobalLRUCache<std::string,std::vector<std::string>>::~GlobalLRUCache(void *a1)
{
  *a1 = &unk_1F0A52720;
  long long v2 = a1 + 2;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 5));
  std::__list_imp<std::pair<std::string,std::vector<std::string>>>::clear(v2);
  return a1;
}

void quasar::GlobalLRUCache<std::string,std::vector<std::string>>::~GlobalLRUCache(void *a1)
{
  *a1 = &unk_1F0A52720;
  uint64_t v1 = a1 + 2;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 5));
  std::__list_imp<std::pair<std::string,std::vector<std::string>>>::clear(v1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::GlobalLRUCache<std::string,std::vector<std::string>>::insert(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  uint64_t v6 = (void *)(a1 + 40);
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 40), a2);
  if (v7)
  {
    unint64_t v8 = (uint64_t *)*((void *)v7 + 5);
    uint64_t v9 = *v8;
    *(void *)(v9 + 8) = v8[1];
    *(void *)v8[1] = v9;
    --*(void *)(a1 + 32);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v8 + 2));
    operator delete(v8);
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__erase_unique<std::string>(v6, a2);
  }
  std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<true,0>(&__p, (long long *)a2, a3);
  unint64_t v10 = (char *)operator new(0x40uLL);
  *(std::string *)(v10 + 16) = __p;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(v10 + 40) = v16;
  *((void *)v10 + 7) = v17;
  __p.__r_.__value_.__r.__words[2] = 0;
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  uint8x8_t v11 = *(void **)(a1 + 24);
  *(void *)unint64_t v10 = a1 + 16;
  *((void *)v10 + 1) = v11;
  void *v11 = v10;
  uint64_t v12 = *(void *)(a1 + 32) + 1;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v12;
  float v18 = (void **)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = *(void *)(a1 + 24);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 5) = v13;
  if (*(void *)(a1 + 64) > (unint64_t)*(int *)(a1 + 12))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__erase_unique<std::string>(v6, (unsigned __int8 *)(*(void *)(a1 + 16) + 16));
    std::list<std::pair<std::string,std::vector<std::string>>>::pop_back((uint64_t **)(a1 + 16));
  }
  return 0;
}

void sub_1B1B0E8E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::string,std::vector<std::string>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL quasar::GlobalLRUCache<std::string,std::vector<std::string>>::exists(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = 0;
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 40), a2) != 0;
}

std::string *quasar::GlobalLRUCache<std::string,std::vector<std::string>>::get@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _DWORD *a3@<X2>, std::string *a4@<X8>)
{
  *a3 = 0;
  BOOL result = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 40), a2);
  if (result)
  {
    uint64_t v7 = result;
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 16, *(uint64_t **)(a1 + 24), a1 + 16, (uint64_t *)result[1].__r_.__value_.__r.__words[2]);
    std::string::size_type v8 = v7[1].__r_.__value_.__r.__words[2];
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    uint64_t v9 = *(long long **)(v8 + 40);
    unint64_t v10 = *(long long **)(v8 + 48);
    return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a4, v9, v10, 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v9) >> 3));
  }
  else
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  return result;
}

uint64_t quasar::GlobalLRUCache<std::string,std::vector<std::string>>::mget(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v3 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    int v17 = 0;
    do
    {
      (*(void (**)(long long **__return_ptr, uint64_t, uint64_t, int *))(*(void *)a1 + 32))(&v15, a1, v3 + v7, &v17);
      uint64_t v9 = *a2;
      int v11 = v17;
      memset(&v12, 0, sizeof(v12));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v15, v16, 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v15) >> 3));
      std::pair<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>::pair[abi:ne180100]<std::string const&,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>,0>(&__p, (long long *)(v9 + v7), (uint64_t)&v11);
      std::__tree<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>>(a3, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
      float v18 = (std::string *)&v14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      float v18 = &v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      ++v8;
      uint64_t v3 = *a2;
      v7 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v8);
  }
  return 0;
}

void sub_1B1B0EB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  std::pair<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>::~pair((uint64_t)&a13);
  *(void *)(v21 - 88) = v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a13 = (void **)&a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void std::__list_imp<std::pair<std::string,std::vector<std::string>>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t std::pair<std::string,std::vector<std::string>>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::list<std::pair<std::string,std::vector<std::string>>>::pop_back(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  *(void *)(v2 + 8) = (*a1)[1];
  *(void *)v1[1] = v2;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v1 + 2));
  operator delete(v1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  BOOL result = (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (void **)__p;
  std::string __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

std::string *std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, long long **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return this;
}

void sub_1B1B0ED7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B1B0EE28(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::list<std::pair<std::string,std::vector<std::string>>>::splice(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  if (a2 != a4)
  {
    uint64_t v4 = (uint64_t *)a4[1];
    if (v4 != a2)
    {
      uint64_t v5 = *a4;
      *(void *)(v5 + 8) = v4;
      *(void *)a4[1] = v5;
      uint64_t v6 = *a2;
      *(void *)(v6 + 8) = a4;
      *a4 = v6;
      *a2 = (uint64_t)a4;
      a4[1] = (uint64_t)a2;
      --*(void *)(a3 + 16);
      ++*(void *)(result + 16);
    }
  }
  return result;
}

uint64_t std::pair<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

_OWORD *std::__tree<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x58uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    v6[4] = *(_OWORD *)(a3 + 32);
    *((void *)v6 + 10) = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    char v10 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

std::string *std::pair<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>::pair[abi:ne180100]<std::string const&,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(a3 + 8);
  this[2].__r_.__value_.__r.__words[0] = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  return this;
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a2 + 56, *(char **)(a2 + 64));
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::__tree<std::string>::__move_assign(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
  *(void *)a1 = *a2;
  long long v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *long long v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,std::string const&,int,std::set<std::string> &>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v12 = 0x333333333333333;
  }
  else {
    unint64_t v12 = v7;
  }
  uint64_t v20 = a1 + 2;
  if (v12) {
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  }
  else {
    uint64_t v13 = 0;
  }
  long long v16 = v13;
  int v17 = &v13[80 * v6];
  BOOL v19 = &v13[80 * v12];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,int,std::set<std::string> &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  float v18 = v17 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v16);
  return v14;
}

void sub_1B1B0F480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,int,std::set<std::string> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v11 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  quasar::LmeDataFactoryBase::Word::Word(a2, &v11, &__p, *a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B0F558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(void *)(v7 - 64) = *(void *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(a3 - 72) = 0;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 80) = 0;
      long long v9 = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 40) = *(void *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 56) = 0;
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(a3 - 32);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      char v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - 24) = v10;
        *char v10 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v12;
      }
      a3 -= 80;
      uint64_t v7 = *((void *)&v19 + 1) - 80;
      *((void *)&v19 + 1) -= 80;
    }
    while (a3 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::LmeDataFactoryBase::Word>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100](v4, i - 80);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1B0F930(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

std::string *std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word> const&>(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  uint64_t result = std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(v3, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  *(void *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_1B1B0F9F8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__push_back_slow_path<std::vector<quasar::LmeDataFactoryBase::Word> const&>(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    char v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    char v10 = 0;
  }
  uint64_t v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  long long v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(v11, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  ++v15;
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer(v14);
  return v12;
}

void sub_1B1B0FB10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1B0FB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  uint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word&>(v7, v4, v6);
      v6 += 5;
      unint64_t v4 = (std::string *)((char *)v12 + 80);
      uint64_t v12 = (std::string *)((char *)v12 + 80);
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1B0FC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__l.__size_, (uint64_t)a3 + 56);
}

void sub_1B1B0FCF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::pair<quasar::PronType,std::string>,float>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1B1B0FD64(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::pair<quasar::PronType,std::string>,float>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__emplace_hint_unique_key_args<std::pair<quasar::PronType,std::string>,std::pair<std::pair<quasar::PronType,std::string> const,float> const&>(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      int v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__emplace_hint_unique_key_args<std::pair<quasar::PronType,std::string>,std::pair<std::pair<quasar::PronType,std::string> const,float> const&>(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_equal<std::pair<quasar::PronType,std::string>>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__construct_node<std::pair<std::pair<quasar::PronType,std::string> const,float> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_equal<std::pair<quasar::PronType,std::string>>(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2
    && !std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if (!std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (void *)a2[1];
      do
      {
        unint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      long long v18 = a2;
      do
      {
        unint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        long long v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))goto LABEL_28; {
      uint64_t v13 = *a4;
      }
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    uint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    long long v16 = a2;
    do
    {
      uint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      long long v16 = v12;
    }
    while (v17);
  }
  if (std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5))goto LABEL_16; {
LABEL_28:
  }
  return std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_equal<std::pair<quasar::PronType,std::string>>((uint64_t)a1, a3, a5);
}

_DWORD *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__construct_node<std::pair<std::pair<quasar::PronType,std::string> const,float> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = quasar::PronChoice::PronChoice(v6 + 8, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1B100A0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_equal<std::pair<quasar::PronType,std::string>>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))break; {
        unint64_t v4 = (void *)*v8;
        }
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      unint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 < *(_DWORD *)a3) {
    return 1;
  }
  if (*(_DWORD *)a3 < *(_DWORD *)a2) {
    return 0;
  }
  long long v6 = *(const void **)(a3 + 8);
  uint64_t v4 = a3 + 8;
  uint64_t v5 = v6;
  int v7 = *(char *)(v4 + 23);
  uint64_t v10 = *(const void **)(a2 + 8);
  uint64_t v8 = a2 + 8;
  uint64_t v9 = v10;
  int v11 = *(char *)(v8 + 23);
  if (v11 >= 0) {
    size_t v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    size_t v12 = *(void *)(v8 + 8);
  }
  if (v11 >= 0) {
    uint64_t v13 = (const void *)v8;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v7 >= 0) {
    size_t v14 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    size_t v14 = *(void *)(v4 + 8);
  }
  if (v7 >= 0) {
    unint64_t v15 = (const void *)v4;
  }
  else {
    unint64_t v15 = v5;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  if (v17) {
    return v17 < 0;
  }
  else {
    return v12 < v14;
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0) {
      operator delete(__p[5]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 80;
      std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void quasar::WatermarkDetector::WatermarkDetector(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A53E08;
  *(_OWORD *)(v3 + 448) = xmmword_1B255FC60;
  *(void *)(v3 + 464) = 0xA23000016D5;
  *(void *)(v3 + 472) = 0x4023CCCCCCCCCCCDLL;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 480), "VoiceTrigger");
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(void *)(a1 + 544) = 0;
  operator new();
}

void sub_1B1B1064C(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 544);
  *(void *)(v1 + 544) = 0;
  if (v5) {
    MEMORY[0x1B3EA8670](v5, 0x1000C40D39BF8FDLL);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v3);
  if (*(char *)(v1 + 503) < 0) {
    operator delete(*v2);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v1);
  _Unwind_Resume(a1);
}

void quasar::WatermarkDetector::finishInit(quasar::WatermarkDetector *this)
{
  uint64_t v2 = (const std::string *)((char *)this + 480);
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitAndTrimNoEmpty(v2, (char *)__p, &v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = v8;
  uint64_t v4 = v9;
  if (v8 != v9)
  {
    uint64_t v5 = (char *)this + 504;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v5, v3, (uint64_t)v3);
      v3 += 24;
    }
    while (v3 != v4);
  }
  __p[0] = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1B10744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::WatermarkDetector::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  char v7 = (void *)(a1 + 504);
  InputOrigin = (unsigned __int8 *)quasar::SpeechRequestData::getInputOrigin(*a4);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v7, InputOrigin))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"WatermarkDetector not run on input origin ", 42);
      uint64_t v11 = quasar::SpeechRequestData::getInputOrigin(*a4);
      int v12 = *(char *)(v11 + 23);
      if (v12 >= 0) {
        uint64_t v13 = v11;
      }
      else {
        uint64_t v13 = *(void *)v11;
      }
      if (v12 >= 0) {
        uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
      }
      else {
        uint64_t v14 = *(void *)(v11 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
      goto LABEL_13;
    }
LABEL_14:
    *(_DWORD *)(*a3 + 684) = 0;
    return 0;
  }
  double v9 = (double)quasar::SpeechRequestData::getEndpointStartMs(*a4) / 1000.0;
  if (v9 > 5.0)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"WatermarkDetector: not enough audio cached.", 43);
LABEL_13:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  long long v40 = xmmword_1B255FC70;
  int v41 = 1064849900;
  char v42 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v43, "povey");
  __int16 v45 = 257;
  uint64_t v46 = 3212836864;
  __int16 v47 = 0;
  char v48 = 1;
  unint64_t v15 = *a4;
  *(float *)&long long v40 = (float)*(unsigned int *)(*((void *)*a4 + 3) + 24);
  int v41 = 1065353216;
  MultiBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(v15);
  quasar::MultiAudioBuffer::getBuffer(*MultiBuffer, 0, &__p);
  quasar::RecogAudioBuffer::getRawAudioCache((quasar::RecogAudioBuffer *)__p, &v38);
  if (*((void *)&__p + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
  }
  int v17 = (int)(v9 * (float)*(unsigned int *)(*((void *)*a4 + 3) + 24));
  if (v17 <= (unint64_t)((v39 - (unsigned char *)v38) >> 2))
  {
    v37[2] = 0;
    v37[0] = v38;
    v37[1] = v17;
    kaldi::Spectrogram::Spectrogram(v36, &v40);
    kaldi::Matrix<float>::Matrix((uint64_t)v35);
    kaldi::Spectrogram::Compute((uint64_t)v36, (uint64_t)v37, v35, 0);
    quasar::NotchDetector::measureNotch(*(int **)(a1 + 544), (uint64_t)v35, (float)*(unsigned int *)(*((void *)*a4 + 3) + 24));
    double v20 = v19;
    double v21 = v18;
    if (v18 < *(double *)(a1 + 472)) {
      int v22 = 1;
    }
    else {
      int v22 = 2;
    }
    uint64_t v23 = *a3;
    *(_DWORD *)(v23 + 684) = v22;
    *(double *)(v23 + 688) = v18;
    uint64_t v24 = *(void *)(v23 + 424);
    std::string::basic_string[abi:ne180100]<0>(&__p, "WatermarkPeakAvg");
    quasar::SpeechRequestResultData::addDumpAA(v24, &__p, 1, v21);
    if (SBYTE7(v50) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v25 = *(void *)(*a3 + 424);
    std::string::basic_string[abi:ne180100]<0>(&__p, "WatermarkPeakMax");
    quasar::SpeechRequestResultData::addDumpAA(v25, &__p, 1, v20);
    if (SBYTE7(v50) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v26 = *(void *)(*a3 + 424);
    std::string::basic_string[abi:ne180100]<0>(&__p, "WatermarkDetected");
    char v27 = (char *)quasar::fingerprintDetectionResultString(*(_DWORD *)(*a3 + 684));
    std::string::basic_string[abi:ne180100]<0>(&v34, v27);
    quasar::SpeechRequestResultData::addDumpAA(v26, &__p, &v34);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v50) < 0) {
      operator delete((void *)__p);
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"WatermarkDetector peakMax=", 26);
      unsigned int v28 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", peakAvg=", 10);
      std::string v29 = (void *)std::ostream::operator<<();
      uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", detected=", 11);
      unsigned int v31 = quasar::fingerprintDetectionResultString(*(_DWORD *)(*a3 + 684));
      size_t v32 = strlen(v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)v35);
    kaldi::Spectrogram::~Spectrogram((kaldi::Spectrogram *)v36);
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"WatermarkDetector: not enough audio cached.", 43);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    *(_DWORD *)(*a3 + 684) = 0;
  }
  if (v38)
  {
    unsigned int v39 = v38;
    operator delete(v38);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  return 0;
}

void sub_1B1B10C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void quasar::WatermarkDetector::registerParams(quasar::WatermarkDetector *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "watermark-detector");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 105, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "watermark-detector");
  quasar::SystemConfig::enforceMaxVersion((uint64_t)a2, 145, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "above-hi");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of top of upper band");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "above-lo");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of bottom of upper band");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 452, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "notch-hi");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of top of notch");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 456, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "notch-lo");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of bottom of notch");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 460, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "below-hi");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of top of lower band");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 464, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "below-lo");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of bottom of lower band");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 468, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "supported-input-origins-list");
  std::string::basic_string[abi:ne180100]<0>(v4, "The input origins that are supported (should be comma separated)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 480, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "watermark-threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "Average notch threshold value to detect a watermark");
  quasar::SystemConfig::Register<double>((uint64_t)a2, (const void **)__p, (uint64_t)this + 472, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1B111E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<double>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  double v21 = __p;
  unint64_t v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v15[7] = v20;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  double v21 = __p;
  size_t v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5) {
      return;
    }
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  int v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (long long **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1B113F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::WatermarkDetector::affectsRecognitionResults(quasar::WatermarkDetector *this)
{
  return 1;
}

uint64_t quasar::WatermarkDetector::supportsEager(quasar::WatermarkDetector *this)
{
  return 1;
}

uint64_t quasar::WatermarkDetector::decoderNeedsCachedRawAudio(quasar::WatermarkDetector *this)
{
  return 1;
}

void quasar::WatermarkDetector::~WatermarkDetector(quasar::WatermarkDetector *this)
{
  quasar::WatermarkDetector::~WatermarkDetector(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A53E08;
  uint64_t v2 = *((void *)this + 68);
  *((void *)this + 68) = 0;
  if (v2) {
    MEMORY[0x1B3EA8670](v2, 0x1000C40D39BF8FDLL);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 504);
  if (*((char *)this + 503) < 0) {
    operator delete(*((void **)this + 60));
  }
  quasar::Decoder::~Decoder(this);
}

void Array<double>::alloc()
{
}

uint64_t Array<double>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (a2 != result)
  {
    uint64_t v4 = *(void *)(result + 8);
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8000313F17);
    }
    *(void *)uint64_t v2 = *(void *)a2;
    *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 4);
    operator new[]();
  }
  return result;
}

uint64_t Array<double>::operator[](int *a1, uint64_t a2)
{
  unint64_t v2 = a2 - *a1;
  if (v2 >= a1[1])
  {
    a1[1] = v2 + 1;
    if (v2 >= a1[4]) {
      Array<double>::alloc();
    }
  }
  return *((void *)a1 + 1) + 8 * v2;
}

uint64_t Discount::vocabSize(Discount *this, Vocab *a2)
{
  VocabIter::VocabIter((VocabIter *)v6, this, 0);
  uint64_t v3 = 0;
  unsigned int v5 = 0;
  while (VocabIter::next((VocabIter *)v6, &v5))
  {
    if ((*(unsigned int (**)(Discount *, void))(*(void *)this + 176))(this, v5)) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = (v3 + 1);
    }
  }
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)v6);
  return v3;
}

void sub_1B1B11738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

void GoodTuring::GoodTuring(GoodTuring *this, unsigned int a2, unsigned int a3)
{
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 2) = MEMORY[0x1E4FBA240];
  *((unsigned char *)this + 24) = 0;
  *(void *)this = &unk_1F0A32D18;
  *((void *)this + 4) = a2;
  *((void *)this + 5) = a3;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 6) = 0;
  *(void *)Array<double>::operator[]((int *)this + 12, 0) = 0x3FF0000000000000;
}

void sub_1B1B117CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 56);
  if (v3) {
    MEMORY[0x1B3EA8630](v3, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

double GoodTuring::discount(GoodTuring *this, unint64_t a2)
{
  double result = 1.0;
  if (a2)
  {
    double result = 0.0;
    if (*((void *)this + 4) <= a2)
    {
      double result = 1.0;
      if (*((void *)this + 5) >= a2) {
        return *(double *)Array<double>::operator[]((int *)this + 12, a2);
      }
    }
  }
  return result;
}

BOOL GoodTuring::nodiscount(GoodTuring *this)
{
  return *((void *)this + 4) <= 1uLL && *((void *)this + 5) == 0;
}

BOOL GoodTuring::write(GoodTuring *this, File *a2)
{
  snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4));
  File::fprintf(a2, "mincount %s\n", ctsBuffer);
  snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 5));
  File::fprintf(a2, "maxcount %s\n", ctsBuffer);
  BOOL result = File::error(a2);
  if (!result)
  {
    unsigned int v5 = 1;
    do
    {
      if (*((void *)this + 5) < (unint64_t)v5) {
        break;
      }
      uint64_t v6 = (double *)Array<double>::operator[]((int *)this + 12, v5);
      File::fprintf(a2, "discount %u %lf\n", v5++, *v6);
      BOOL result = File::error(a2);
    }
    while (!result);
  }
  return result;
}

uint64_t GoodTuring::read(GoodTuring *this, File *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = File::getline(a2);
  if (!v4)
  {
LABEL_18:
    unint64_t v10 = *((void *)this + 4);
    if (v10 <= *((void *)this + 5))
    {
      uint64_t v11 = (void *)MEMORY[0x1E4FBA240];
      do
      {
        if (*(double *)Array<double>::operator[]((int *)this + 12, v10) == 0.0)
        {
          int v12 = File::position((const char **)a2, v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"warning: discount coefficient ", 30);
          uint64_t v13 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" = 0.0\n", 7);
        }
        ++v10;
      }
      while (v10 <= *((void *)this + 5));
    }
    return 1;
  }
  unsigned int v5 = v4;
  uint64_t v6 = (unint64_t *)((char *)this + 40);
  while (1)
  {
    unsigned int v18 = 0;
    uint64_t v17 = 0;
    if (sscanf(v5, "mincount %99s", v19) == 1 && v19[0] != 45 && sscanf(v19, "%lu", (char *)this + 32) == 1) {
      goto LABEL_17;
    }
    if (sscanf(v5, "maxcount %99s", v19) == 1 && v19[0] != 45 && sscanf(v19, "%lu", (char *)this + 40) == 1) {
      break;
    }
    if (sscanf(v5, "discount %u %lf", &v18, &v17) != 2)
    {
      unint64_t v15 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"unrecognized parameter\n", 23);
      return 0;
    }
    if (v18 > 0x64)
    {
      double v9 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"warning: count value out of range\n", 34);
    }
    else
    {
      uint64_t v8 = v17;
      *(void *)Array<double>::operator[]((int *)this + 12, v18) = v8;
    }
LABEL_17:
    unsigned int v5 = File::getline(a2);
    if (!v5) {
      goto LABEL_18;
    }
  }
  if (*v6 <= 0x64)
  {
    unint64_t v7 = 0;
    do
      *(void *)Array<double>::operator[]((int *)this + 12, v7++) = 0;
    while (v7 <= *v6);
    goto LABEL_17;
  }
  size_t v16 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"maxcount value out of range\n", 28);
  return 0;
}

uint64_t GoodTuring::estimate(GoodTuring *this, NgramStats *a2, uint64_t a3)
{
  int v3 = a3;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  int v48 = 0;
  *(_DWORD *)&v44[8] = 0;
  int v45 = 0;
  int v43 = 0;
  *(void *)char v44 = (a3 + 1);
  if (a3 != -1) {
    Array<unsigned int>::alloc();
  }
  TrieIter2<unsigned int,unsigned long>::TrieIter2(v42, (char *)a2 + 160, 0, a3, 0);
  unint64_t v6 = 0;
  do
    *(void *)Array<unsigned long>::operator[]((int *)&v46, v6++) = 0;
  while (v6 <= *((void *)this + 5) + 1);
  int v7 = v3 - 1;
  while (1)
  {
    uint64_t v8 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v42);
    if (!v8) {
      break;
    }
    if (!(*(unsigned int (**)(void, void))(**((void **)a2 + 3) + 176))(*((void *)a2 + 3), *(unsigned int *)(*(void *)&v44[4] + 4 * (v7 - v43))))
    {
      if ((*(unsigned int (**)(void, void))(**((void **)a2 + 3) + 224))(*((void *)a2 + 3), *(unsigned int *)(*(void *)&v44[4] + 4 * (v7 - v43))))
      {
        unsigned int v9 = (*(uint64_t (**)(void, void))(**((void **)a2 + 3) + 232))(*((void *)a2 + 3), *(unsigned int *)(*(void *)&v44[4] + 4 * (v7 - v43)));
        if (v9 && *((void *)this + 5) + 1 >= (unint64_t)v9)
        {
          uint64_t v10 = *(void *)(v8 + 8);
          uint64_t v11 = (void *)Array<unsigned long>::operator[]((int *)&v46, v9);
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = *(void *)(v8 + 8);
        if (v12 <= *((void *)this + 5) + 1)
        {
          uint64_t v11 = (void *)Array<unsigned long>::operator[]((int *)&v46, v12);
          uint64_t v10 = 1;
LABEL_14:
          *v11 += v10;
        }
      }
    }
  }
  if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
  {
    uint64_t v13 = (void *)(*(uint64_t (**)(GoodTuring *))(*(void *)this + 24))(this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Good-Turing discounting ", 24);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"-grams\n", 7);
    unint64_t v15 = 0;
    size_t v16 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      uint64_t v17 = (void *)(*(uint64_t (**)(GoodTuring *))(*(void *)this + 24))(this);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"GT-count [", 10);
      unsigned int v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] = ", 4);
      Array<unsigned long>::operator[]((int *)&v46, v15);
      char v19 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
      uint64_t v20 = std::locale::use_facet(&v49, v16);
      ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
      std::locale::~locale(&v49);
      std::ostream::put();
      std::ostream::flush();
      ++v15;
    }
    while (v15 <= *((void *)this + 5) + 1);
  }
  if (!*(void *)Array<unsigned long>::operator[]((int *)&v46, 1))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"warning: no singleton counts\n", 29);
    *((void *)this + 5) = 0;
LABEL_27:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"GT discounting disabled\n", 24);
    goto LABEL_28;
  }
  uint64_t v21 = *((void *)this + 5);
  if (!v21) {
    goto LABEL_27;
  }
  uint64_t v22 = v21 + 1;
  uint64_t v23 = (void *)MEMORY[0x1E4FBA240];
  while (!*(void *)Array<unsigned long>::operator[]((int *)&v46, v22))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"warning: count of count ", 24);
    uint64_t v24 = (void *)std::ostream::operator<<();
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" is zero ", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-- lowering maxcount\n", 21);
    uint64_t v22 = *((void *)this + 5);
    *((void *)this + 5) = v22 - 1;
    if (v22 == 1) {
      goto LABEL_27;
    }
  }
  uint64_t v27 = *((void *)this + 5);
  if (!v27) {
    goto LABEL_27;
  }
  unint64_t v28 = v27 + 1;
  unint64_t v29 = *(void *)Array<unsigned long>::operator[]((int *)&v46, v27 + 1);
  uint64_t v30 = (unint64_t *)Array<unsigned long>::operator[]((int *)&v46, 1);
  if (*((void *)this + 5))
  {
    double v31 = (double)v28 * (double)v29 / (double)*v30;
    unint64_t v32 = 1;
    unsigned int v33 = (void *)MEMORY[0x1E4FBA240];
    do
    {
      if (*(void *)Array<unsigned long>::operator[]((int *)&v46, v32))
      {
        unint64_t v34 = *(void *)Array<unsigned long>::operator[]((int *)&v46, v32 + 1);
        double v35 = (double)(v32 + 1)
            * (double)v34
            / ((double)v32
             * (double)*(unint64_t *)Array<unsigned long>::operator[]((int *)&v46, v32));
        double v36 = (v35 - v31) / (1.0 - v31);
        if (COERCE__INT64(fabs(v36)) > 0x7FEFFFFFFFFFFFFFLL || v35 > 1.0 || v36 <= 0.000003)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"warning: discount coeff ", 24);
          unsigned int v39 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" is out of range: ", 18);
          long long v40 = (void *)std::ostream::operator<<();
          double v36 = 1.0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
        }
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"warning: count of count ", 24);
        int v41 = (void *)std::ostream::operator<<();
        double v36 = 1.0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" is zero\n", 9);
      }
      *(double *)Array<double>::operator[]((int *)this + 12, v32++) = v36;
    }
    while (v32 <= *((void *)this + 5));
  }
LABEL_28:
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(v42);
  if (*(void *)&v44[4]) {
    MEMORY[0x1B3EA8630](*(void *)&v44[4], 0x1000C8052888210);
  }
  if (v47) {
    MEMORY[0x1B3EA8630](v47, 0x1000C8000313F17);
  }
  return 1;
}

void sub_1B1B12240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25)
{
  if (a20) {
    MEMORY[0x1B3EA8630](a20, 0x1000C8052888210);
  }
  if (a23) {
    MEMORY[0x1B3EA8630](a23, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

double NaturalDiscount::discount(NaturalDiscount *this, unint64_t a2, unint64_t a3, unint64_t a4)
{
  double result = 0.0;
  if (*((double *)this + 4) <= (double)a2)
  {
    LODWORD(result) = *((_DWORD *)this + 7);
    double v5 = (double)*(unint64_t *)&result;
    double result = 1.0;
    if ((double)a4 != v5) {
      return ((1.0 - (double)a4) * (double)a4 + (double)a3 * ((double)a3 + 1.0))
    }
           / ((double)a4 + (double)a4 + (double)a3 * ((double)a3 + 1.0));
  }
  return result;
}

uint64_t NaturalDiscount::estimate(NaturalDiscount *this, Discount **a2)
{
  *((_DWORD *)this + 7) = Discount::vocabSize(a2[3], (Vocab *)a2);
  return 1;
}

double KneserNey::discount(KneserNey *this, unint64_t a2)
{
  if (!a2) {
    return 1.0;
  }
  double result = 0.0;
  if (*((void *)this + 4) <= a2) {
    return ((double)a2 - *((double *)this + 5)) / (double)a2;
  }
  return result;
}

double KneserNey::lowerOrderWeight(KneserNey *this, unint64_t a2, unint64_t a3)
{
  return *((double *)this + 5) * (double)a3 / (double)a2;
}

uint64_t KneserNey::write(KneserNey *this, File *a2)
{
  return File::fprintf(a2, "discount1 %lf\n", *((double *)this + 5));
}

uint64_t KneserNey::read(KneserNey *this, File *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = File::getline(a2);
  if (!v4) {
    return 1;
  }
  double v5 = v4;
  while (sscanf(v5, "mincount %99s", v8) == 1 && v8[0] != 45 && sscanf(v8, "%lu", (char *)this + 32) == 1
       || sscanf(v5, "discount1 %lf", (char *)this + 40) == 1)
  {
    double v5 = File::getline(a2);
    if (!v5) {
      return 1;
    }
  }
  int v7 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"unrecognized parameter\n", 23);
  return 0;
}

uint64_t KneserNey::estimate(KneserNey *this, NgramStats *a2, uint64_t a3)
{
  if (!*((unsigned char *)this + 49)) {
    (*(void (**)(KneserNey *, NgramStats *, uint64_t, void))(*(void *)this + 112))(this, a2, a3, *((unsigned int *)a2 + 39));
  }
  *(_DWORD *)&v25[8] = 0;
  int v26 = 0;
  int v24 = 0;
  *(void *)uint64_t v25 = (a3 + 1);
  if (a3 != -1) {
    Array<unsigned int>::alloc();
  }
  TrieIter2<unsigned int,unsigned long>::TrieIter2(v23, (char *)a2 + 160, 0, a3, 0);
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v23);
    if (!v8) {
      break;
    }
    if (!(*(unsigned int (**)(void, void))(**((void **)a2 + 3) + 176))(*((void *)a2 + 3), *(unsigned int *)(*(void *)&v25[4] + 4 * (-2 - v24))))
    {
      if ((*(unsigned int (**)(void, void))(**((void **)a2 + 3) + 224))(*((void *)a2 + 3), *(unsigned int *)(*(void *)&v25[4] + 4 * (-2 - v24))))
      {
        int v9 = (*(uint64_t (**)(void, void))(**((void **)a2 + 3) + 232))(*((void *)a2 + 3), *(unsigned int *)(*(void *)&v25[4] + 4 * (-2 - v24)));
        if (v9 == 1) {
          goto LABEL_14;
        }
        if (v9 == 2) {
LABEL_15:
        }
          ++v7;
      }
      else
      {
        uint64_t v10 = *(void *)(v8 + 8);
        if (v10 == 2) {
          goto LABEL_15;
        }
        if (v10 == 1) {
LABEL_14:
        }
          ++v6;
      }
    }
  }
  if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
  {
    uint64_t v11 = (void *)(*(uint64_t (**)(KneserNey *))(*(void *)this + 24))(this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Kneser-Ney smoothing ", 21);
    unint64_t v12 = (void *)std::ostream::operator<<();
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"-grams\n", 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"n1 = ", 5);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
    unint64_t v15 = std::locale::use_facet(&v27, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"n2 = ", 5);
    size_t v16 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    uint64_t v17 = std::locale::use_facet(&v27, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    std::ostream::flush();
  }
  if (v6 && v7)
  {
    *((double *)this + 5) = (double)v6 / ((double)v6 + (double)(unint64_t)(2 * v7));
    if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
    {
      unsigned int v18 = (void *)(*(uint64_t (**)(KneserNey *))(*(void *)this + 24))(this);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"D = ", 4);
      char v19 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
      uint64_t v20 = std::locale::use_facet(&v27, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
    }
    if (*((unsigned char *)this + 49)) {
      (*(void (**)(KneserNey *, NgramStats *, uint64_t, void))(*(void *)this + 112))(this, a2, a3, *((unsigned int *)a2 + 39));
    }
    uint64_t v21 = 1;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"one of required KneserNey count-of-counts is zero\n", 50);
    uint64_t v21 = 0;
  }
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(v23);
  if (*(void *)&v25[4]) {
    MEMORY[0x1B3EA8630](*(void *)&v25[4], 0x1000C8052888210);
  }
  return v21;
}

void sub_1B1B12A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::locale::~locale((std::locale *)(v20 - 72));
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(&a9);
  if (a20) {
    MEMORY[0x1B3EA8630](a20, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

uint64_t KneserNey::prepareCounts(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a3 < a4)
  {
    uint64_t v4 = result;
    if (!*(unsigned char *)(result + 48))
    {
      if (!*(unsigned char *)(result + 8) && (Debug::debugAll || *(_DWORD *)(result + 12)))
      {
        uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"modifying ", 10);
        uint64_t v8 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"-gram counts for Kneser-Ney smoothing\n", 38);
      }
      *(_DWORD *)&v14[8] = 0;
      int v15 = 0;
      int v13 = 0;
      *(void *)uint64_t v14 = (a3 + 2);
      if (a3 != -2) {
        Array<unsigned int>::alloc();
      }
      TrieIter2<unsigned int,unsigned long>::TrieIter2(v12, a2 + 160, 0, a3, 0);
      while (1)
      {
        uint64_t v9 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v12);
        if (!v9) {
          break;
        }
        if (!(*(unsigned int (**)(void, void))(**(void **)(a2 + 24) + 176))(*(void *)(a2 + 24), *(unsigned int *)(*(void *)&v14[4] - 4 * v13)))*(void *)(v9 + 8) = 0; {
      }
        }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v12);
      TrieIter2<unsigned int,unsigned long>::TrieIter2(v12, a2 + 160, *(void *)&v14[4] - 4 * v13, 0xFFFFFFFFLL, 0);
      while (1)
      {
        uint64_t v10 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v12);
        if (!v10) {
          break;
        }
        if (*(void *)(v10 + 8))
        {
          if (!(*(unsigned int (**)(void, void))(**(void **)(a2 + 24) + 176))(*(void *)(a2 + 24), *(unsigned int *)(*(void *)&v14[4] + 4 * (1 - v13))))
          {
            char v16 = 0;
            uint64_t Trie = Trie<unsigned int,unsigned int>::findTrie((_DWORD **)(a2 + 160), (unsigned int *)(*(void *)&v14[4] + 4 * (1 - v13)), &v16);
            if (Trie) {
              ++*(void *)(Trie + 8);
            }
          }
        }
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v12);
      *(unsigned char *)(v4 + 48) = 1;
      double result = *(void *)&v14[4];
      if (*(void *)&v14[4]) {
        return MEMORY[0x1B3EA8630](*(void *)&v14[4], 0x1000C8052888210);
      }
    }
  }
  return result;
}

void sub_1B1B12CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    MEMORY[0x1B3EA8630](a20, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

double ModKneserNey::discount(ModKneserNey *this, unint64_t a2)
{
  if (!a2) {
    return 1.0;
  }
  double result = 0.0;
  if (*((void *)this + 4) <= a2)
  {
    if (a2 == 2)
    {
      return (2.0 - *((double *)this + 7)) * 0.5;
    }
    else if (a2 == 1)
    {
      return 1.0 - *((double *)this + 5);
    }
    else
    {
      return ((double)a2 - *((double *)this + 8)) / (double)a2;
    }
  }
  return result;
}

double ModKneserNey::lowerOrderWeight(ModKneserNey *this, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return (*((double *)this + 7) * (double)(a4 - a5)
        + *((double *)this + 5) * (double)(unint64_t)(a3 - a4)
        + *((double *)this + 8) * (double)a5)
       / (double)a2;
}

uint64_t ModKneserNey::write(ModKneserNey *this, File *a2)
{
  return File::fprintf(a2, "discount3+ %lf\n", *((double *)this + 8));
}

uint64_t ModKneserNey::read(ModKneserNey *this, File *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = File::getline(a2);
  if (!v4) {
    return 1;
  }
  double v5 = v4;
  while (sscanf(v5, "mincount %99s", v8) == 1 && v8[0] != 45 && sscanf(v8, "%lu", (char *)this + 32) == 1
       || sscanf(v5, "discount1 %lf", (char *)this + 40) == 1
       || sscanf(v5, "discount2 %lf", (char *)this + 56) == 1
       || sscanf(v5, "discount3+ %lf", (char *)this + 64) == 1)
  {
    double v5 = File::getline(a2);
    if (!v5) {
      return 1;
    }
  }
  uint64_t v7 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"unrecognized parameter\n", 23);
  return 0;
}

uint64_t ModKneserNey::estimate(ModKneserNey *this, NgramStats *a2, uint64_t a3)
{
  if (!*((unsigned char *)this + 49)) {
    (*(void (**)(ModKneserNey *, NgramStats *, uint64_t, void))(*(void *)this + 112))(this, a2, a3, *((unsigned int *)a2 + 39));
  }
  *(_DWORD *)&v35[8] = 0;
  int v36 = 0;
  int v34 = 0;
  *(void *)double v35 = (a3 + 1);
  if (a3 != -1) {
    Array<unsigned int>::alloc();
  }
  TrieIter2<unsigned int,unsigned long>::TrieIter2(v33, (char *)a2 + 160, 0, a3, 0);
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v33);
    if (!v10) {
      break;
    }
    if (!(*(unsigned int (**)(void, void))(**((void **)a2 + 3) + 176))(*((void *)a2 + 3), *(unsigned int *)(*(void *)&v35[4] + 4 * (-2 - v34))))
    {
      if ((*(unsigned int (**)(void, void))(**((void **)a2 + 3) + 224))(*((void *)a2 + 3), *(unsigned int *)(*(void *)&v35[4] + 4 * (-2 - v34))))
      {
        switch((*(unsigned int (**)(void, void))(**((void **)a2 + 3) + 232))(*((void *)a2 + 3), *(unsigned int *)(*(void *)&v35[4] + 4 * (-2 - v34))))
        {
          case 1u:
            goto LABEL_11;
          case 2u:
            goto LABEL_12;
          case 3u:
            goto LABEL_13;
          case 4u:
            goto LABEL_14;
          default:
            continue;
        }
      }
      else
      {
        switch(*(void *)(v10 + 8))
        {
          case 1:
LABEL_11:
            ++v6;
            break;
          case 2:
LABEL_12:
            ++v7;
            break;
          case 3:
LABEL_13:
            ++v8;
            break;
          case 4:
LABEL_14:
            ++v9;
            break;
          default:
            continue;
        }
      }
    }
  }
  if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
  {
    uint64_t v11 = (void *)(*(uint64_t (**)(ModKneserNey *))(*(void *)this + 24))(this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Kneser-Ney smoothing ", 21);
    unint64_t v12 = (void *)std::ostream::operator<<();
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"-grams\n", 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"n1 = ", 5);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
    int v15 = std::locale::use_facet(&v37, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v37);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"n2 = ", 5);
    char v16 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    uint64_t v17 = std::locale::use_facet(&v37, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v37);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"n3 = ", 5);
    unsigned int v18 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    char v19 = std::locale::use_facet(&v37, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v37);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"n4 = ", 5);
    uint64_t v20 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
    uint64_t v21 = std::locale::use_facet(&v37, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(&v37);
    std::ostream::put();
    std::ostream::flush();
  }
  if (!v6 || !v7 || !v8 || !v9)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"one of required modified KneserNey count-of-counts is zero\n", 59);
    goto LABEL_32;
  }
  double v22 = (double)v6 / (double)(v6 + 2 * v7);
  double v23 = 1.0 - (v22 + v22) * (double)v7 / (double)v6;
  *((double *)this + 5) = v23;
  *((double *)this + 7) = 2.0 - v22 * 3.0 * (double)v8 / (double)v7;
  *((double *)this + 8) = v22 * -4.0 * (double)v9 / (double)v8 + 3.0;
  if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
  {
    int v24 = (void *)(*(uint64_t (**)(ModKneserNey *))(*(void *)this + 24))(this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"D1 = ", 5);
    uint64_t v25 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
    int v26 = std::locale::use_facet(&v37, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale(&v37);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"D2 = ", 5);
    std::locale v27 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
    unint64_t v28 = std::locale::use_facet(&v37, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
    std::locale::~locale(&v37);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"D3+ = ", 6);
    unint64_t v29 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    uint64_t v30 = std::locale::use_facet(&v37, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v37);
    std::ostream::put();
    std::ostream::flush();
    double v23 = *((double *)this + 5);
  }
  if (v23 < 0.0 || *((double *)this + 7) < 0.0 || *((double *)this + 8) < 0.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"one of modified KneserNey discounts is negative\n", 48);
LABEL_32:
    uint64_t v31 = 0;
    goto LABEL_33;
  }
  if (*((unsigned char *)this + 49)) {
    (*(void (**)(ModKneserNey *, NgramStats *, uint64_t, void))(*(void *)this + 112))(this, a2, a3, *((unsigned int *)a2 + 39));
  }
  uint64_t v31 = 1;
LABEL_33:
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(v33);
  if (*(void *)&v35[4]) {
    MEMORY[0x1B3EA8630](*(void *)&v35[4], 0x1000C8052888210);
  }
  return v31;
}

void sub_1B1B13844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::locale::~locale((std::locale *)(v20 - 88));
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(&a9);
  if (a20) {
    MEMORY[0x1B3EA8630](a20, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

void NaturalDiscount::~NaturalDiscount(NaturalDiscount *this)
{
}

uint64_t Debug::debugme(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

uint64_t Debug::dout(Debug *this)
{
  return *((void *)this + 2);
}

uint64_t Debug::dout(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  return a2;
}

uint64_t Discount::discount(Discount *this, double a2, double a3, uint64_t a4)
{
  return (*(uint64_t (**)(Discount *, unint64_t, unint64_t, uint64_t))(*(void *)this + 40))(this, vcvtpd_u64_f64(a2), vcvtpd_u64_f64(a3), a4);
}

double Discount::lowerOrderWeight(Discount *this)
{
  return 0.0;
}

uint64_t Discount::lowerOrderWeight(Discount *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(Discount *, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this + 56))(this, vcvtpd_u64_f64(a2), a3, a4, a5);
}

uint64_t NaturalDiscount::nodiscount(NaturalDiscount *this)
{
  return 0;
}

uint64_t Discount::read()
{
  return 0;
}

uint64_t NaturalDiscount::estimate()
{
  return 0;
}

void KneserNey::~KneserNey(KneserNey *this)
{
}

uint64_t KneserNey::nodiscount(KneserNey *this)
{
  return 0;
}

uint64_t Discount::estimate(uint64_t a1)
{
  uint64_t v1 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"discounting method does not support float counts\n", 49);
  return 0;
}

void ModKneserNey::~ModKneserNey(ModKneserNey *this)
{
}

uint64_t ModKneserNey::nodiscount(ModKneserNey *this)
{
  return 0;
}

void GoodTuring::~GoodTuring(GoodTuring *this)
{
  *(void *)this = &unk_1F0A32D18;
  uint64_t v1 = *((void *)this + 7);
  if (v1) {
    MEMORY[0x1B3EA8630](v1, 0x1000C8000313F17);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0A32D18;
  uint64_t v1 = *((void *)this + 7);
  if (v1) {
    MEMORY[0x1B3EA8630](v1, 0x1000C8000313F17);
  }
  JUMPOUT(0x1B3EA8670);
}

void Array<unsigned long>::alloc()
{
}

uint64_t Array<unsigned long>::operator[](int *a1, uint64_t a2)
{
  unint64_t v2 = a2 - *a1;
  if (v2 >= a1[1])
  {
    a1[1] = v2 + 1;
    if (v2 >= a1[4]) {
      Array<unsigned long>::alloc();
    }
  }
  return *((void *)a1 + 1) + 8 * v2;
}

void std::vector<float>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      unint64_t v8 = *(_DWORD **)a1;
      unint64_t v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    int v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    unint64_t v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v6 = *a2;
    unint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  MEMORY[0x1B3EA7D80](&v20, a1, 0);
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  unint64_t v7 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    uint64_t v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    unint64_t v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    uint64_t v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1B1B13F1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1B1B13ED8);
  }
  __cxa_rethrow();
}

void sub_1B1B13FB8(_Unwind_Exception *a1)
{
}

void std::vector<double>::push_back[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
      uint64_t v8 = *(void **)a1;
      uint64_t v6 = *(void **)(a1 + 8);
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    unint64_t v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    void *v6 = *a2;
    unint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  unint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1B1B14158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t kaldi::quasar::AttributeClusterer::AccumulateAttributes(uint64_t a1, unsigned int a2, uint64_t a3, void *a4)
{
  long long v40 = 0u;
  long long v41 = 0u;
  int v42 = 1065353216;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4 != v5)
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void **)(v5 + 40 * v10 + 16);
      if (v11)
      {
        do
        {
          std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AbstractAttribute * const&>((uint64_t)&v40, v11 + 2, v11 + 2);
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
        uint64_t v5 = *(void *)(a1 + 16);
        uint64_t v4 = *(void *)(a1 + 24);
      }
      ++v10;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) > v10);
    unint64_t v12 = (void *)v41;
    if ((void)v41)
    {
      unint64_t v13 = a2 | (unint64_t)(a3 << 32);
      do
      {
        unsigned int v39 = (_DWORD *)v12[2];
        int v14 = v39[2];
        if (v14 != 4 && v14 != 8)
        {
          uint64_t v16 = std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::find<kaldi::quasar::AbstractAttribute *>(a4, &v39);
          uint64_t v17 = v16;
          if (v16)
          {
            uint64_t v18 = (uint64_t)(v16 + 5);
            unint64_t v19 = (unint64_t)v17[5];
            char v20 = v17[4];
            if ((unint64_t)v20 >= v19)
            {
              int v24 = v17[3];
              uint64_t v25 = v20 - v24;
              if ((unint64_t)(v25 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v26 = v19 - (void)v24;
              uint64_t v27 = v26 >> 2;
              if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
                uint64_t v27 = v25 + 1;
              }
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v27;
              }
              if (v28) {
                unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v18, v28);
              }
              else {
                unint64_t v29 = 0;
              }
              uint64_t v30 = (uint64_t *)&v29[8 * v25];
              *uint64_t v30 = v13;
              uint64_t v21 = v30 + 1;
              unint64_t v32 = v17[3];
              uint64_t v31 = v17[4];
              if (v31 != v32)
              {
                do
                {
                  uint64_t v33 = *--v31;
                  *--uint64_t v30 = v33;
                }
                while (v31 != v32);
                uint64_t v31 = v17[3];
              }
              v17[3] = v30;
              v17[4] = v21;
              v17[5] = (uint64_t *)&v29[8 * v28];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *char v20 = v13;
              uint64_t v21 = v20 + 1;
            }
            v17[4] = v21;
          }
          else
          {
            unint64_t v36 = v13;
            std::vector<std::pair<int,int>>::vector(&v37, 1uLL, &v36);
            uint64_t v35 = (*(uint64_t (**)(_DWORD *))(*(void *)v39 + 32))(v39);
            int v43 = &v35;
            double v22 = std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,std::piecewise_construct_t const&,std::tuple<kaldi::quasar::AbstractAttribute *&&>,std::tuple<>>((uint64_t)a4, &v35, (uint64_t)&std::piecewise_construct, &v43);
            double v23 = (void *)v22[3];
            if (v23)
            {
              v22[4] = v23;
              operator delete(v23);
              v22[3] = 0;
              v22[4] = 0;
              v22[5] = 0;
            }
            *(_OWORD *)(v22 + 3) = v37;
            v22[5] = v38;
          }
        }
        unint64_t v12 = (void *)*v12;
      }
      while (v12);
    }
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v40);
}

void sub_1B1B143D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    unint64_t v2 = __p;
    do
    {
      int v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    unint64_t v2 = __p;
    do
    {
      int v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[2];
      if (v4)
      {
        v2[3] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,int>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    int v3 = (void *)__p[2];
    if (v3)
    {
      __p[3] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AbstractAttribute * const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if ((*(uint64_t (**)(void, void))(*(void *)v13[2] + 24))(v13[2], *a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = operator new(0x18uLL);
  *unint64_t v13 = 0;
  v13[1] = v8;
  v13[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  double v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *unint64_t v13 = *v22;
LABEL_38:
    *double v22 = v13;
    goto LABEL_39;
  }
  *unint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    double v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1B1B147E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t **std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::find<kaldi::quasar::AbstractAttribute *>(void *a1, void *a2)
{
  unint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint8x8_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v12 = (unint64_t)i[1];
    if (v6 == v12)
    {
      if ((*(uint64_t (**)(uint64_t *, void))(*i[2] + 24))(i[2], *a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,std::piecewise_construct_t const&,std::tuple<kaldi::quasar::AbstractAttribute *&&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if ((*(uint64_t (**)(void, void))(*(void *)v14[2] + 24))(v14[2], *a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  float v16 = (void *)(a1 + 16);
  unint64_t v14 = operator new(0x30uLL);
  *unint64_t v14 = 0;
  v14[1] = v9;
  v14[2] = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v14[5] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  int v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *unint64_t v14 = *v24;
LABEL_38:
    *int v24 = v14;
    goto LABEL_39;
  }
  *unint64_t v14 = *v16;
  void *v16 = v14;
  *(void *)(v23 + 8 * v4) = v16;
  if (*v14)
  {
    unint64_t v25 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    int v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1B1B14C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<int,int>>::__assign_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = a1[2];
  double result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    float v18 = (char *)a1[1];
    unint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6++;
          *(void *)uint64_t v27 = v28;
          v27 += 8;
          v26 += 8;
        }
        while (v6 != a3);
      }
      float v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = &a2[v19];
      if (v12 != result)
      {
        uint64_t v21 = 8 * v19;
        do
        {
          uint64_t v22 = *v6++;
          *(void *)double result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      uint64_t v23 = v12;
      if (v20 != a3)
      {
        int v24 = v12;
        do
        {
          uint64_t v25 = *v20++;
          *(void *)int v24 = v25;
          v24 += 8;
          v23 += 8;
        }
        while (v20 != a3);
      }
      float v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, v11);
    unint64_t v14 = (char *)a1[1];
    unint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    unint64_t v15 = v14;
    if (v6 != a3)
    {
      unint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v6++;
        *(void *)unint64_t v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    float v17 = (char *)(v15 - v12);
  }
  *unint64_t v13 = &v17[(void)v12];
  return result;
}

void std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::find<kaldi::quasar::AbstractAttribute *>(void *a1, void *a2)
{
  unint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if ((*(uint64_t (**)(uint64_t *, void))(*i[2] + 24))(i[2], *a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void *std::vector<std::pair<int,int>>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint8x8_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1B14F8C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::DecoderOptions::defaultDecoderOptions(quasar::DecoderOptions *this)
{
  {
    operator new();
  }
  return quasar::DecoderOptions::defaultDecoderOptions(void)::options;
}

void sub_1B1B1501C(_Unwind_Exception *a1)
{
}

void quasar::RegexRules::clear(std::locale **this)
{
  unint64_t v3 = *this;
  uint64_t v2 = this[1];
  if (v2 != *this)
  {
    do
    {
      v2 -= 11;
      std::allocator<quasar::RegexReplacementRule>::destroy[abi:ne180100](this + 16, v2);
    }
    while (v2 != v3);
    uint64_t v2 = *this;
  }
  v5[0] = v2;
  v5[1] = v3;
  *this = 0;
  this[1] = 0;
  unint64_t v4 = this[2];
  this[2] = 0;
  v5[2] = v4;
  unint64_t v6 = (void **)v5;
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void quasar::RegexReplacementRule::RegexReplacementRule(std::regex_traits<char> *a1)
{
  uint64_t v1 = std::regex_traits<char>::regex_traits(a1);
  *(_OWORD *)&v1[1].__loc_.__locale_ = 0u;
  *(_OWORD *)&v1[2].__ct_ = 0u;
  *(_OWORD *)&v1[3].__loc_.__locale_ = 0u;
  *(_OWORD *)&v1[1].__col_ = 0u;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v10 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  long long v3 = 0u;
  memset(v4, 0, sizeof(v4));
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v2, "s/(.*)/(.*)/(g|gI);", 0);
}

void sub_1B1B15558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::locale a58)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a58);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)(v60 - 240));
  long long v62 = *(void **)(v60 - 176);
  if (v62)
  {
    *(void *)(v60 - 168) = v62;
    operator delete(v62);
  }
  if (*(char *)(v58 + 87) < 0) {
    operator delete(*v59);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)v58);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)locale);
  }
  std::locale::~locale(this);
}

double quasar::RegexReplacementRule::applyRule(uint64_t a1, std::__wrap_iter<const char *> a2)
{
  uint64_t i = (char *)a2.__i_;
  memset(&v8, 0, sizeof(v8));
  uint64_t v3 = *((unsigned __int8 *)a2.__i_ + 23);
  uint64_t v4 = *((void *)a2.__i_ + 1);
  if ((v3 & 0x80u) != 0)
  {
    a2.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a2.__i_;
    uint64_t v3 = v4;
  }
  if (*(char *)(a1 + 87) >= 0) {
    uint64_t v6 = (char *)(a1 + 64);
  }
  else {
    uint64_t v6 = *(char **)(a1 + 64);
  }
  v5.__i_ = &a2.__i_[v3];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v8, a2, v5, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)a1, v6, 0);
  if (i[23] < 0) {
    operator delete(*(void **)i);
  }
  double result = *(double *)&v8.__r_.__value_.__l.__data_;
  *(std::string *)uint64_t i = v8;
  return result;
}

void sub_1B1B156F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::RegexRules::RegexRules(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  quasar::RegexRules::loadFromFile((uint64_t)a1, a2);
  return a1;
}

void sub_1B1B1574C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL quasar::RegexRules::loadFromFile(uint64_t a1, uint64_t a2)
{
  v38[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v35);
  memset(&v34, 0, sizeof(v34));
  uint64_t v4 = v37;
  if (v37)
  {
    std::__wrap_iter<const char *> v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(v35[0] - 24)));
      uint64_t v6 = std::locale::use_facet((const std::locale *)__p, v5);
      unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
      std::locale::~locale((std::locale *)__p);
      std::string v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v35, (uint64_t)&v34, v7);
      if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
        break;
      }
      quasar::trim(&v34);
      std::string::basic_string[abi:ne180100]<0>(__p, "#");
      if (quasar::startsWith((unsigned __int8 *)&v34, (unsigned __int8 *)__p))
      {
        if (SBYTE7(v18) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v34.__r_.__value_.__l.__size_;
        }
        if (SBYTE7(v18) < 0)
        {
          operator delete(__p[0]);
          if (size)
          {
LABEL_14:
            if (*(void *)(a1 + 8) < *(void *)(a1 + 16)) {
              quasar::RegexReplacementRule::RegexReplacementRule(*(std::regex_traits<char> **)(a1 + 8));
            }
            std::vector<quasar::RegexReplacementRule>::__emplace_back_slow_path<std::string &>((uint64_t *)a1);
          }
        }
        else if (size)
        {
          goto LABEL_14;
        }
      }
    }
    if (v37 && !std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v35 + *(void *)(v35[0] - 24)), *(_DWORD *)&v36[*(void *)(v35[0] - 24) + 16] | 4);
    }
    if (quasar::gLogLevel >= 5)
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      *(_OWORD *)long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loaded ", 7);
      char v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" rules.", 7);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to open the file to read: '", 34);
    int v12 = *(char *)(a2 + 23);
    if (v12 >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = *(void *)a2;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v14 = *(void *)(a2 + 8);
    }
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  v35[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v35 + *(void *)(v35[0] - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v36);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v38);
  return v4 != 0;
}

void sub_1B1B15C58()
{
}

void sub_1B1B15C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B1B15C90(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1B15CF8);
}

void sub_1B1B15CB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1B15CE0);
}

void sub_1B1B15CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1B1B15CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a50);
  _Unwind_Resume(a1);
}

void quasar::RegexRules::applyRules(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  while (v5 != v6)
  {
    v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)a3;
    quasar::RegexReplacementRule::applyRule(v5, v7);
    v5 += 88;
  }
}

void sub_1B1B15D7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = v4;
  a1[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x1B3EA7CE0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;

  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = v4;
  a1[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x1B3EA7CE0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_1B1B15F30(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = *(void *)(v2 + 24);
  MEMORY[0x1B3EA7CF0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](a1 + 53);
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, const char *a2, int a3)
{
  uint64_t v5 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v5[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v5[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v5[1].__col_ + 4) = 0u;
  HIDWORD(v5[2].__ct_) = 0;
  strlen(a2);
  std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
}

void sub_1B1B160AC(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B16110(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v2, a2);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  uint64_t v4 = (char *)a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      uint64_t v6 = v3;
      uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, (char *)v3, v4);
    }
    while (v3 != v6);
    if (v6 != (unsigned __int8 *)v4)
    {
      if (v6 + 1 != (unsigned __int8 *)v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v3 = a3;
  end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  std::string v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (std::basic_regex<char> *)v8;
    }
    uint64_t v9 = a1->__end_;
    char v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    std::string v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  end = a1->__end_;
  uint64_t v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    std::string v8 = v7;
  }
  else {
    std::string v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    char v11 = v8 == a3 ? v8 : v8 + 1;
    if (v11 == a3) {
      break;
    }
    uint64_t v9 = (unsigned __int8 *)memchr(v11, 10, a3 - v11);
    if (v9) {
      std::string v8 = v9;
    }
    else {
      std::string v8 = a3;
    }
    char v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  end = a1->__end_;
  uint64_t v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    std::string v8 = v7;
  }
  else {
    std::string v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    char v11 = v8 == a3 ? v8 : (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3) {
      break;
    }
    uint64_t v9 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v9) {
      std::string v8 = v9;
    }
    else {
      std::string v8 = a3;
    }
    char v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B165D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1B16668(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
  JUMPOUT(0x1B3EA8670);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void sub_1B1B16A98(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B16B00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5D758;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5D758;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_1F0A5D470;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(unsigned char *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F0A5D470;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F0A5D470;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  JUMPOUT(0x1B3EA8670);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  memset(&v22, 0, 17);
  char v23 = 0;
  uint64_t v24 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::wcsub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v18.first = *(const __int32 **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  uint64_t v19 = v5;
  uint64_t v20 = v5;
  char v21 = 0;
  std::vector<std::wcsub_match>::value_type v22 = v18;
  uint64_t v24 = v5;
  char v23 = 1;
  uint64_t v6 = *(const __int32 **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const __int32 **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const __int32 **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a1 + 80);
  uint64_t v13 = *(void *)(a2 + 32);
  unint64_t v14 = 1;
  do
  {
    unint64_t v15 = &begin[v14];
    uint64_t v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const wchar_t *, const wchar_t *> *)uint64_t v16 = v15->std::pair<const wchar_t *, const wchar_t *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    unint64_t v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1B1B1735C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B1742C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B17484(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  int v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  void v16[3] = &v10[96 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)int v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_1B1B175D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 48) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 11) = *(void *)(a3 - 11);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  int v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (void *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::wcsub_match> *this, std::vector<std::wcsub_match>::size_type __n, std::vector<std::wcsub_match>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      long long v15 = &v9[__n];
      std::vector<std::wcsub_match>::size_type v16 = 24 * __n;
      do
      {
        std::pair<const wchar_t *, const wchar_t *> v17 = __x->std::pair<const wchar_t *, const wchar_t *>;
        *(void *)&v9->matched = *(void *)&__x->matched;
        v9->std::pair<const wchar_t *, const wchar_t *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    unint64_t v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v13);
    }
    else {
      long long v14 = 0;
    }
    std::vector<std::wcsub_match>::value_type v18 = (std::sub_match<const wchar_t *> *)&v14[24 * v10];
    uint64_t v19 = &v18[__n];
    std::vector<std::wcsub_match>::size_type v20 = 24 * __n;
    char v21 = v18;
    do
    {
      std::pair<const wchar_t *, const wchar_t *> v22 = __x->std::pair<const wchar_t *, const wchar_t *>;
      v21[1].first = *(const __int32 **)&__x->matched;
      *char v21 = v22;
      char v21 = (std::pair<const wchar_t *, const wchar_t *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    char v23 = (std::sub_match<const wchar_t *> *)&v14[24 * v13];
    std::vector<std::wcsub_match>::pointer begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const wchar_t *, const wchar_t *> v26 = end[-1].std::pair<const wchar_t *, const wchar_t *>;
        *(void *)&v18[-1].matched = *(void *)&end[-1].matched;
        v18[-1].std::pair<const wchar_t *, const wchar_t *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
    {
      operator delete(end);
    }
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1B17A2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1B17AA0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  unint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  double result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    double result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      double result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (result == v5) {
        return a2;
      }
    }
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B17D80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B17ED0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = *a2;
  unsigned int v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      int v8 = *v7;
      if ((v8 - 48) > 9) {
        break;
      }
      if (v5 >= 0x19999999) {
        goto LABEL_16;
      }
      ++v7;
      unsigned int v5 = v8 + 10 * v5 - 48;
      if (v7 == a3) {
        goto LABEL_12;
      }
    }
    uint64_t v6 = v7;
LABEL_12:
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v5 > a1->__marked_count_) {
LABEL_16:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      BOOL v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      BOOL v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100) {
      return v3;
    }
    BOOL v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    int v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      BOOL v6 = 1;
      goto LABEL_12;
    case 'S':
      BOOL v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      int v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      BOOL v5 = 1;
LABEL_15:
      unint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  int v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      char v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_64;
          }
          int v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
            goto LABEL_64;
          }
          int v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_64;
          }
          int v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_24;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6) {
            goto LABEL_64;
          }
          char v11 = -87;
LABEL_24:
          char v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_64;
          }
          int v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_30;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6) {
            goto LABEL_64;
          }
          char v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_64;
          }
          int v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
            goto LABEL_35;
          }
          v14 |= 0x20u;
          if ((v14 - 97) >= 6) {
            goto LABEL_64;
          }
          char v15 = -87;
LABEL_35:
          std::string::value_type v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4) {
            std::string::operator=(a4, v16);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        uint64_t v7 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_50;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          uint64_t v7 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_50:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          uint64_t v7 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_64;
    }
    char v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v17 & 0xDF) - 65) > 0x19u) {
      goto LABEL_64;
    }
    std::string::value_type v18 = v17 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v18);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B1B18494(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B184FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F0A5DA40;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3);
  return a1;
}

void sub_1B1B186D4(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  uint64_t v4 = (uint64_t)v1[1];
  if (v4) {
    std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5DA40;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5DA40;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        double result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5DC60;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5DC60;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5D838;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5D838;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        double result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5D9E0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5D9E0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      int v9 = *(unsigned __int8 **)(a2 + 16);
      uint64_t v10 = v6;
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v9++;
        if (v11 != v13) {
          break;
        }
        if (!--v10) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        double result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (double result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::wcsub_match>::size_type v20 = &v8[(void)v12];
        char v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          std::pair<const wchar_t *, const wchar_t *> v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      long long v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::wcsub_match>::size_type v20 = &v25[(void)v12];
        char v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          long long v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned int v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  char v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  std::vector<std::wcsub_match>::size_type v20 = &v15[(void)v12];
  char v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    long long v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_1B1B19500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::string v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  unint64_t v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  unint64_t v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *unint64_t v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  unint64_t v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  std::basic_regex<char>::value_type locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  unint64_t v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1B19720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B198B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char *,char *>(void *result, char *a2, char *a3, unint64_t a4)
{
  unint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    double result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *unint64_t v4 = result;
    unint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)unint64_t v4 = v10;
    unint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)unint64_t v4 = 0;
  return result;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = (unsigned char *)a4;
      }
      else {
        char v10 = *(unsigned char **)a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1B19A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B19AE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  for (uint64_t i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_33;
    }
  }
  if (&a2[i] == a3) {
LABEL_33:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    uint64_t v8 = v19;
    if (v19)
    {
      int v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v8 = v18;
  if (!v18) {
    goto LABEL_34;
  }
  int v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<char *>(a1, v9, &v9[v8], (uint64_t)__p);
  unint64_t v10 = v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (long long *)__p);
  }
  else
  {
    uint64_t v11 = v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v11 = v18;
    }
    if (v11 == 2)
    {
      unint64_t v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        unint64_t v13 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      }
      unsigned __int8 v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        unsigned __int8 v12 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v17);
  }
  return (uint64_t)&a2[i + 2];
}

void sub_1B1B19CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_11;
    }
  }
  if (&a2[i] == a3) {
LABEL_11:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  int v7 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, &a2[i], *(unsigned char *)(a1 + 24) & 1);
  if (!v7) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  }
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return (uint64_t)&a2[i + 2];
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        long long v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      goto LABEL_25;
    }
    std::string::value_type v9 = 0;
    long long v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
LABEL_25:
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            unint64_t v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            unint64_t v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        unint64_t v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      unint64_t v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        int v8 = v4;
        if (v4[23] < 0) {
          int v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        int v10 = v4;
        if (v4[23] < 0) {
          int v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        unint64_t v13 = v3;
        if (v3[23] < 0) {
          unint64_t v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        std::string v15 = v3;
        if (v3[23] < 0) {
          std::string v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        unsigned __int8 v19 = a2;
        if (a2[23] < 0) {
          unsigned __int8 v19 = *(char **)a2;
        }
        std::vector<std::wcsub_match>::size_type v20 = a2;
        if (a2[23] < 0) {
          std::vector<std::wcsub_match>::size_type v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        char v23 = a3;
        if (a3[23] < 0) {
          char v23 = *(char **)a3;
        }
        unint64_t v24 = a3;
        if (a3[23] < 0) {
          unint64_t v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      unint64_t v26 = v4;
      unint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      size_t v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)long long v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)std::vector<std::wcsub_match> __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v29 = *((void *)a3 + 1)) : (uint64_t v29 = a3[23]), v29 != 1)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      char v30 = a2;
      if (a2[23] < 0) {
        char v30 = *(char **)a2;
      }
      char v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v30);
      char v32 = v4;
      if (v4[23] < 0) {
        char v32 = *(unsigned char **)v4;
      }
      unsigned char *v32 = v31;
      long long v33 = v3;
      if (v3[23] < 0) {
        long long v33 = *(char **)v3;
      }
      char v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v33);
      uint64_t v35 = v3;
      if (v3[23] < 0) {
        uint64_t v35 = *(unsigned char **)v3;
      }
      *uint64_t v35 = v34;
    }
    *(_OWORD *)long long v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = 0;
    *(_OWORD *)std::vector<std::wcsub_match> __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_1B1B1A5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v18 = a1 + 128;
    unint64_t v19 = *(void *)(a1 + 128);
    int v10 = (char **)(a1 + 112);
    __int16 v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v9 = *(_WORD **)(a1 + 120);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = v19 - (void)*v10;
        if (v22 <= (v20 >> 1) + 1) {
          unint64_t v23 = v21 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v27 = &v25[2 * v21];
        size_t v28 = &v25[2 * v24];
        *(_WORD *)uint64_t v27 = v8;
        unint64_t v26 = v27 + 2;
        long long v38 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v38) {
          goto LABEL_46;
        }
        do
        {
          __int16 v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        uint64_t v33 = v32 >> 1;
        unint64_t v34 = v19 - (void)*v10;
        if (v34 <= (v32 >> 1) + 1) {
          unint64_t v35 = v33 + 1;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v27 = &v37[2 * v33];
        size_t v28 = &v37[2 * v36];
        *(_WORD *)uint64_t v27 = v8;
        unint64_t v26 = v27 + 2;
        long long v40 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v40) {
          goto LABEL_46;
        }
        do
        {
          __int16 v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  __int16 v8 = v5 | (unsigned __int16)(v6 << 8);
  char v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *char v9 = v8;
    unint64_t v26 = v9 + 1;
    goto LABEL_48;
  }
  int v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3) {
    goto LABEL_49;
  }
  uint64_t v13 = v12 >> 1;
  unint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    unint64_t v15 = v13 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v27 = &v17[2 * v13];
  size_t v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  unint64_t v26 = v27 + 2;
  char v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    __int16 v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 120) = v26;
  *(void *)(a1 + 128) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 120) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B1A894(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1B1B1A944(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B1A990(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0) {
    __int16 v8 = __p;
  }
  else {
    __int16 v8 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_1B1B1AA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = (unint64_t *)(a1 + 64);
      unint64_t v7 = *(void *)(a1 + 64);
      __int16 v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          unsigned __int8 v12 = operator new(v11);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        uint64_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          unint64_t v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned __int8 v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  unint64_t v6 = (unint64_t *)(a1 + 64);
  unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          unsigned __int8 v12 = operator new(v28);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        uint64_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          __int16 v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned __int8 v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  unint64_t v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    unsigned __int8 v12 = operator new(v18);
  }
  else {
    unsigned __int8 v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  uint64_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  unsigned __int8 v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 80) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  unsigned __int8 v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14) {
      unint64_t v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)p_end_cap, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    long long v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_1B1B1AE18(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B1AE70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B1B2E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B1B338(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x1B3EA8670);
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    uint64_t v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(void *)(v7 - 8) = v5;
      *(void *)uint64_t v7 = v5;
      *(unsigned char *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B3EA7AA0](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B1B1B4B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (unsigned __int8 *)a2;
  }
  end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  long long v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }
  size_t v9 = a1->__marked_count_ + 1;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, v9);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  uint64_t v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      int v8 = a2[1];
      if (v8 == 40)
      {
        uint64_t v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int marked_count = a1->__marked_count_;
        do
        {
          long long v11 = (char *)v9;
          uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        uint64_t v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        BOOL v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        uint64_t v14 = 2;
        if (!v13) {
          uint64_t v14 = 0;
        }
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    unsigned int v7 = __mexp_end;
    unsigned int v8 = __mexp_begin;
    int v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      BOOL v13 = a2 + 2;
      int v25 = 0;
      uint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        long long v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          long long v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            size_t v19 = v24;
            size_t v18 = v25;
            if (v24 == -1)
            {
              size_t v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            uint64_t v6 = &v17[2 * (v17[1] == 125)];
            size_t v20 = v8;
            size_t v21 = v7;
            unint64_t v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          uint64_t v6 = v14 + 2;
          size_t v18 = v25;
          size_t v20 = v8;
          size_t v21 = v7;
          unint64_t v22 = this;
          size_t v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
  }
  else
  {
    int v6 = *a2;
    if ((a2 + 1 != a3 || v6 != 36)
      && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
      return a2 + 1;
    }
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
    if (*a2 == 46) {
      operator new();
    }
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unsigned int v7 = v6;
    int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(a1, a2, a3);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3) {
    goto LABEL_12;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_8;
  }
  if (locale_low == 40)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
    unsigned int v11 = a1->__marked_count_;
    ++a1->__open_count_;
    unint64_t v12 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v12 == a3 || (BOOL v13 = v12, LOBYTE(v12->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v11);
    --a1->__open_count_;
    uint64_t v9 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (unsigned __int8 *)a2) {
      goto LABEL_13;
    }
    return (unsigned __int8 *)a2;
  }
  if (locale_low != 94) {
    return (unsigned __int8 *)a2;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_8:
  uint64_t v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
LABEL_13:
  size_t v14 = a1->__marked_count_ + 1;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v14);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46) {
        operator new();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  uint64_t v3 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    uint64_t v5 = (locale_low - 36);
    if (v5 > 0x3A) {
      goto LABEL_8;
    }
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0) {
      return v3;
    }
    if (v5 == 5)
    {
      if (a1->__open_count_) {
        return v3;
      }
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2) {
        return v3;
      }
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  int v5 = *v4;
  std::basic_regex<char>::value_type v6 = *v4;
  BOOL v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    BOOL v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    uint64_t v10 = 2;
    if (!v9) {
      uint64_t v10 = 0;
    }
    v3 += v10;
    return v3;
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
}

uint64_t std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(__int32 *__f, __int32 *__l, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5 = a5;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  int v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, __f, __l, &__p, a5 | 0x1040u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::wssub_match> *)a3, (uint64_t)__f, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)__l, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (!v9) {
    return 0;
  }
  if (!*(unsigned char *)(a3 + 88)) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)(a3 + 8) = *(void *)a3;
  return result;
}

void sub_1B1B1C034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::wssub_match> *a1, uint64_t a2, std::sub_match<std::__wrap_iter<const wchar_t *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  std::vector<std::wssub_match>::pointer begin = a1->__begin_;
  if (a1->__end_ != a1->__begin_)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v15 = *a4;
    uint64_t v14 = a4[1];
    do
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      long long v17 = (void *)(v15 + v12 * 24);
      if (v16 <= v13) {
        size_t v18 = a4 + 3;
      }
      else {
        size_t v18 = v17;
      }
      begin[v12].first.__i_ = (std::__wrap_iter<const wchar_t *>::iterator_type)(a2 + *v18 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13) {
        size_t v19 = a4 + 3;
      }
      else {
        size_t v19 = (uint64_t *)(*a4 + v12 * 24);
      }
      a1->__begin_[v12].second.__i_ = (std::__wrap_iter<const wchar_t *>::iterator_type)(a2 + v19[1] - v10);
      uint64_t v15 = *a4;
      uint64_t v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13) {
        size_t v20 = a4 + 3;
      }
      else {
        size_t v20 = (uint64_t *)(*a4 + v12 * 24);
      }
      char v21 = *((unsigned char *)v20 + 16);
      std::vector<std::wssub_match>::pointer begin = a1->__begin_;
      std::vector<std::wssub_match>::pointer end = a1->__end_;
      a1->__begin_[v12].matched = v21;
      ++v13;
      ++v12;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  }
  a1[1].__begin_ = a3;
  a1[1].__end_ = a3;
  LOBYTE(a1[1].__end_cap_.__value_) = 0;
  char v23 = (std::sub_match<std::__wrap_iter<const wchar_t *>> *)(a2 + a4[6] - v10);
  a1[2].__begin_ = v23;
  a1[2].__end_ = (std::vector<std::wssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(a1[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  a1[3].__begin_ = (std::vector<std::wssub_match>::pointer)(a2 + a4[9] - v10);
  a1[3].__end_ = (std::vector<std::wssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(a1[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    a1[4].__end_ = v23;
  }
  LOBYTE(a1[4].__begin_) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)long long v57 = 0;
    memset(&v57[8], 0, 32);
    long long v58 = 0uLL;
    *(_OWORD *)std::match_results<const wchar_t *> __p = 0uLL;
    memset(v60, 0, 21);
    std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v57[32])
    {
      *(void *)&long long v58 = *(void *)&v57[32];
      operator delete(*(void **)&v57[32]);
    }
    long long v52 = a4;
    uint64_t v12 = *((void *)&v61 + 1);
    unint64_t v13 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v61 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const wchar_t *>> *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    char v55 = 0;
    unsigned int v18 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = a2;
    uint64_t v19 = a3 - a2;
    uint64_t v20 = *((void *)&v63 + 1);
    uint64_t v21 = *((void *)&v61 + 1);
    unint64_t v22 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v23 = v22 / 0x2A;
    unint64_t v24 = 3 * (v22 % 0x2A);
    *(void *)(*(void *)(*((void *)&v61 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    uint64_t v25 = *(void *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(unsigned char *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unint64_t v27 = v20 + v63 - 1;
      uint64_t v28 = *(void *)(*((void *)&v61 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      char v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == a3;
          BOOL v36 = v33 != v54 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v53;
          if ((v55 & (v53 >= v37)) == 0) {
            uint64_t v38 = v37;
          }
          if (v38 != v19)
          {
            uint64_t v53 = v38;
            std::deque<std::__state<char>>::pop_back(&v61);
            char v55 = 1;
            goto LABEL_38;
          }
          __int16 v39 = (void **)*((void *)&v61 + 1);
          uint64_t v40 = v62;
          if ((void)v62 == *((void *)&v61 + 1))
          {
            uint64_t v40 = *((void *)&v61 + 1);
          }
          else
          {
            __int16 v41 = (void *)(*((void *)&v61 + 1) + 8 * ((unint64_t)v63 / 0x2A));
            int v42 = (void *)(*v41 + 96 * ((unint64_t)v63 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v61 + 1) + 8 * ((*((void *)&v63 + 1) + (void)v63) / 0x2AuLL))
                + 96 * ((*((void *)&v63 + 1) + (void)v63) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v63 + 8, v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  char v44 = (void *)v41[1];
                  ++v41;
                  int v42 = v44;
                }
              }
              while (v42 != (void *)v43);
              __int16 v39 = (void **)*((void *)&v61 + 1);
              uint64_t v40 = v62;
            }
          }
          *((void *)&v63 + 1) = 0;
          unint64_t v47 = v40 - (void)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              __int16 v39 = (void **)(*((void *)&v61 + 1) + 8);
              *((void *)&v61 + 1) = v39;
              unint64_t v47 = v62 - (void)v39;
            }
            while ((void)v62 - (void)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            uint64_t v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v48 = 42;
          }
          *(void *)&long long v63 = v48;
LABEL_53:
          char v55 = 1;
          uint64_t v53 = v19;
LABEL_38:
          uint64_t v20 = *((void *)&v63 + 1);
          if (*((void *)&v63 + 1)) {
            continue;
          }
          if ((v55 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v49 = *v52;
          *(void *)uint64_t v49 = v54;
          *(void *)(v49 + 8) = v54 + v53;
          uint64_t v50 = 1;
          *(unsigned char *)(v49 + 16) = 1;
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v61, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v61);
          goto LABEL_38;
        case 0xFFFFFC20:
          long long v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)long long v57 = *(_OWORD *)v30;
          *(_OWORD *)&v57[16] = v45;
          long long v58 = 0uLL;
          *(void *)&v57[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v57[32], *(long long **)(v28 + 96 * v29 + 32), *(long long **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v60[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v28 + 96 * v29 + 56), *(long long **)(v28 + 96 * v29 + 64), (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v46 = *v32;
          *(void *)((char *)&v60[1] + 5) = *(void *)(v30 + 85);
          v60[1] = v46;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(void, void, unsigned char *))(*(void *)v60[1] + 24))(v60[1], 0, v57);
          std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v57[32])
          {
            *(void *)&long long v58 = *(void *)&v57[32];
            operator delete(*(void **)&v57[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  else
  {
LABEL_56:
    uint64_t v50 = 0;
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v61);
  return v50;
}

void sub_1B1B1C718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const __int32 *a2, const __int32 *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v54 = 0;
  char v55 = 0;
  v56[0] = 0;
  *(_DWORD *)long long v51 = 0;
  memset(&v51[8], 0, 32);
  long long v52 = 0u;
  memset(v53, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)unint64_t v47 = 0;
    memset(&v47[8], 0, 48);
    *(_OWORD *)std::match_results<const wchar_t *> __p = 0uLL;
    memset(v49, 0, 21);
    char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v47[32])
    {
      *(void *)&v47[40] = *(void *)&v47[32];
      operator delete(*(void **)&v47[32]);
    }
    int v42 = a4;
    unsigned int v11 = v55;
    *((_DWORD *)v55 - 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 10) = a2;
    *((void *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::wcsub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const wchar_t *>> *)((char *)v55 - 40), *(unsigned int *)(a1 + 32));
    unint64_t v43 = a3;
    char v44 = 0;
    char v12 = 0;
    unsigned int v13 = 0;
    unint64_t v14 = (char *)((char *)a3 - (char *)a2);
    uint64_t v15 = v55;
    *((void *)v55 - 2) = v6;
    *((_DWORD *)v15 - 2) = a5;
    *((unsigned char *)v15 - 4) = a6;
    do
    {
      BOOL v16 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)v14;
      if (!v16) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unsigned int v18 = v15 - 1;
      uint64_t v17 = *((void *)v15 - 2);
      uint64_t v19 = v15 - 6;
      if (v17) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 16))(v17, v15 - 6);
      }
      switch(*(_DWORD *)v19)
      {
        case 0xFFFFFC18:
          uint64_t v20 = (const __int32 *)*((void *)v15 - 10);
          if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v43) {
            goto LABEL_19;
          }
          char v27 = v12;
          uint64_t v28 = (char *)v20 - *((void *)v15 - 11);
          unint64_t v29 = v44;
          if ((v27 & ((uint64_t)v44 >= (uint64_t)v28)) == 0)
          {
            long long v30 = *(v15 - 5);
            *(_OWORD *)long long v51 = *(_OWORD *)v19;
            *(_OWORD *)&v51[16] = v30;
            if (v51 != v19)
            {
              std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v51[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
              std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v53, *((uint64_t **)v15 - 5), *((uint64_t **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
            }
            uint64_t v31 = (void *)*v18;
            *(void **)((char *)&v53[3] + 5) = *(void **)((char *)v15 - 11);
            v53[3] = v31;
            unint64_t v29 = v28;
          }
          char v32 = v55;
          if (v29 == v14)
          {
            uint64_t v33 = (uint64_t)v54;
            while (v32 != (void *)v33)
            {
              v32 -= 12;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, v32);
            }
            char v55 = (_OWORD *)v33;
            char v12 = 1;
            char v44 = v14;
          }
          else
          {
            char v44 = v29;
            unint64_t v34 = v55 - 6;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
            char v55 = v34;
            char v12 = 1;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          break;
        case 0xFFFFFC1F:
LABEL_19:
          uint64_t v21 = v55 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
          char v55 = v21;
          break;
        case 0xFFFFFC20:
          long long v22 = *(v15 - 5);
          *(_OWORD *)unint64_t v47 = *(_OWORD *)v19;
          *(_OWORD *)&v47[16] = v22;
          memset(&v47[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v47[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v49[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v15 - 5), *((long long **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
          unint64_t v23 = (void *)*v18;
          *(void *)((char *)&v49[1] + 5) = *(void *)((char *)v15 - 11);
          v49[1] = v23;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v18 + 24))(*v18, 1, v15 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v49[1] + 24))(v49[1], 0, v47);
          unint64_t v24 = v55;
          if ((unint64_t)v55 >= v56[0])
          {
            char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v25 = *(_OWORD *)&v47[16];
            *char v55 = *(_OWORD *)v47;
            v24[1] = v25;
            *((void *)v24 + 4) = 0;
            *((void *)v24 + 5) = 0;
            *((void *)v24 + 6) = 0;
            *((void *)v24 + 7) = 0;
            v24[2] = *(_OWORD *)&v47[32];
            *((void *)v24 + 6) = *(void *)&v47[48];
            memset(&v47[32], 0, 24);
            *((void *)v24 + 8) = 0;
            *((void *)v24 + 9) = 0;
            *(_OWORD *)((char *)v24 + 56) = *(_OWORD *)__p;
            *((void *)v24 + 9) = v49[0];
            __p[0] = 0;
            __p[1] = 0;
            v49[0] = 0;
            uint64_t v26 = v49[1];
            *(void *)((char *)v24 + 85) = *(void *)((char *)&v49[1] + 5);
            *((void *)v24 + 10) = v26;
            char v55 = v24 + 6;
          }
          if (*(void *)&v47[32])
          {
            *(void *)&v47[40] = *(void *)&v47[32];
            operator delete(*(void **)&v47[32]);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      uint64_t v15 = v55;
    }
    while (v54 != v55);
    if (v12)
    {
      uint64_t v35 = *v42;
      *(void *)uint64_t v35 = a2;
      *(void *)(v35 + 8) = &v44[(void)a2];
      *(unsigned char *)(v35 + 16) = 1;
      if ((void)v52 != *(void *)&v51[32])
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(void *)&v51[32]) >> 3);
        uint64_t v37 = (unsigned char *)(*(void *)&v51[32] + 16);
        unsigned int v38 = 1;
        do
        {
          uint64_t v39 = v35 + 24 * v38;
          *(_OWORD *)uint64_t v39 = *((_OWORD *)v37 - 1);
          char v40 = *v37;
          v37 += 24;
          *(unsigned char *)(v39 + 16) = v40;
          BOOL v16 = v36 > v38++;
        }
        while (v16);
      }
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  if (*(void *)&v51[32])
  {
    *(void *)&long long v52 = *(void *)&v51[32];
    operator delete(*(void **)&v51[32]);
  }
  *(void *)long long v51 = &v54;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
  return v6;
}

void sub_1B1B1CCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a17);
  std::__state<char>::~__state(&a33);
  a33 = v33 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(void *a1)
{
  unsigned int v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (void *)(*(void *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(void *)(v7 - 56) = 0;
  *(void *)(v7 - 48) = 0;
  *(void *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v7 - 40) = 0;
  *(void *)(v7 - 32) = 0;
  *(void *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 16) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1B255FD00);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    char v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFC0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1B1D2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    long long v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::match_results<const wchar_t *> __p = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v11);
      unint64_t v43 = (char *)__p;
      char v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      __int16 v41 = operator new(0xFC0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      BOOL v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              BOOL v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                BOOL v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::match_results<const wchar_t *> __p = v24;
              unint64_t v43 = &v24[8 * (v23 >> 2)];
              char v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                BOOL v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              int64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                BOOL v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              BOOL v14 = &v20[v21];
              unint64_t v43 = v22;
              char v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)BOOL v14 = v32;
          BOOL v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::match_results<const wchar_t *> __p = v36;
      unint64_t v43 = v33;
      unsigned int v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      char v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        char v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::match_results<const wchar_t *> __p = operator new(0xFC0uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &__p);
        unint64_t v34 = a1[2];
        std::match_results<const wchar_t *> __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::match_results<const wchar_t *> __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 21;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    std::match_results<const wchar_t *> __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1B1B1D644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }
  void *v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    BOOL v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          v26[16] = *((unsigned char *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }
    else
    {
      int64_t v21 = (long long *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)int64x2_t result = *v6;
          result[16] = *((unsigned char *)v6 + 16);
          uint64_t v6 = (long long *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      unint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          long long v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          int64_t v21 = (long long *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      int64_t v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    int64x2_t result = std::vector<std::string>::__vallocate[abi:ne180100](a1, v12);
    int64_t v15 = (char *)a1[1];
    BOOL v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        long long v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    int64_t v18 = v16 - v13;
  }
  *BOOL v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      long long v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = (long long *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)int64x2_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      unint64_t v23 = v12;
      if (v20 != (long long *)a3)
      {
        long long v24 = v12;
        do
        {
          long long v25 = *v20++;
          *(_OWORD *)long long v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (long long *)a3);
      }
      long long v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](a1, v11);
    BOOL v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        long long v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)int64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    long long v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::wssub_match> *this, std::vector<std::wssub_match>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      uint64_t v13 = &v7[__n];
      std::vector<std::wssub_match>::size_type v14 = 24 * __n;
      do
      {
        v7->first.__i_ = 0;
        v7->second.__i_ = 0;
        v7->matched = 0;
        ++v7;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    this->__end_ = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    int64_t v15 = (std::sub_match<std::__wrap_iter<const wchar_t *>> *)&v12[24 * v8];
    long long v16 = &v15[__n];
    std::vector<std::wssub_match>::size_type v17 = 24 * __n;
    int64_t v18 = v15;
    do
    {
      v18->first.__i_ = 0;
      v18->second.__i_ = 0;
      v18->matched = 0;
      ++v18;
      v17 -= 24;
    }
    while (v17);
    unint64_t v19 = (std::sub_match<std::__wrap_iter<const wchar_t *>> *)&v12[24 * v11];
    std::vector<std::wssub_match>::pointer begin = this->__begin_;
    std::vector<std::wssub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>> v22 = end[-1].std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>>;
        *(void *)&v15[-1].matched = *(void *)&end[-1].matched;
        v15[-1].std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>> = v22;
        --v15;
        --end;
      }
      while (end != begin);
      std::vector<std::wssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v15;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v19;
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(std::regex_traits<char> *a1, uint64_t a2, int a3)
{
  unint64_t v4 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v4[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v4[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v4[1].__col_ + 4) = 0u;
  HIDWORD(v4[2].__ct_) = 0;
  std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>();
}

void sub_1B1B1DCEC(_Unwind_Exception *a1)
{
  std::basic_regex<char>::value_type locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>()
{
}

void sub_1B1B1DECC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::wssub_match>::pointer end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2) {
    operator new();
  }
  while (v7 != (unsigned __int8 *)a3)
  {
    if (*v7 != 124) {
      return v7;
    }
    unint64_t v8 = a1->__end_;
    unint64_t v9 = v7 + 1;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(a1, v7 + 1, a3);
    if (v9 == v7) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v8);
  }
  return (unsigned __int8 *)a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  unint64_t v4 = (char *)a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      uint64_t v6 = v3;
      uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(this, (char *)v3, v4);
    }
    while (v6 != v3);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::vector<std::wssub_match>::pointer end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  unint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (std::basic_regex<char> *)v8;
    }
    unint64_t v9 = a1->__end_;
    unint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(v8 + 1), a3);
    if (v8 + 1 == v10) {
      goto LABEL_9;
    }
    unint64_t v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::vector<std::wssub_match>::pointer end = a1->__end_;
  uint64_t v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
  while (1)
  {
    unint64_t v11 = v8 == a3 ? v8 : v8 + 1;
    if (v11 == a3) {
      break;
    }
    unint64_t v9 = (unsigned __int8 *)memchr(v11, 10, a3 - v11);
    if (v9) {
      unint64_t v8 = v9;
    }
    else {
      unint64_t v8 = a3;
    }
    unint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::vector<std::wssub_match>::pointer end = a1->__end_;
  uint64_t v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
  while (1)
  {
    unint64_t v11 = v8 == a3 ? v8 : (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3) {
      break;
    }
    unint64_t v9 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v9) {
      unint64_t v8 = v9;
    }
    else {
      unint64_t v8 = a3;
    }
    unint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  do
  {
    unint64_t v5 = a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, (char *)a2, a3);
  }
  while (v5 != a2);
  return v5;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  int64x2_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    std::vector<std::wssub_match>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    unint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, (unsigned __int8 *)a2, a3);
    int64x2_t result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
    {
      size_t v10 = a1->__marked_count_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v10);
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        int v7 = a2[2];
        if (v7 == 33)
        {
          std::regex_traits<char>::regex_traits(&v14.__traits_);
          memset(&v14.__flags_, 0, 40);
          v14.__flags_ = this->__flags_;
          unint64_t v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v14, v3 + 3, a3);
          unsigned int marked_count = v14.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v14, 1, this->__marked_count_);
          this->__marked_count_ += marked_count;
          if (v8 == a3 || *v8 != 41) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          }
          goto LABEL_27;
        }
        if (v7 == 61)
        {
          std::regex_traits<char>::regex_traits(&v14.__traits_);
          memset(&v14.__flags_, 0, 40);
          v14.__flags_ = this->__flags_;
          unint64_t v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v14, v3 + 3, a3);
          unsigned int v9 = v14.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v14, 0, this->__marked_count_);
          this->__marked_count_ += v9;
          if (v8 == a3 || *v8 != 41) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          }
LABEL_27:
          uint64_t v3 = v8 + 1;
          std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v14.__traits_.__loc_);
          return v3;
        }
      }
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return ++v3;
  }
  if (a2 + 1 != a3)
  {
    int v11 = a2[1];
    if (v11 == 66)
    {
      BOOL v12 = 1;
    }
    else
    {
      if (v11 != 98) {
        return v3;
      }
      BOOL v12 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v12);
    v3 += 2;
  }
  return v3;
}

void sub_1B1B1E748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    int v6 = (char)*a2;
    if (v6 <= 62)
    {
      if (v6 != 40)
      {
        if (v6 == 46) {
          operator new();
        }
        if ((v6 - 42) >= 2) {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
        }
LABEL_28:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      }
      unint64_t v8 = a2 + 1;
      if (a2 + 1 != (unsigned __int8 *)a3)
      {
        if (a2 + 2 != (unsigned __int8 *)a3 && *v8 == 63 && a2[2] == 58)
        {
          ++this->__open_count_;
          unsigned int v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 3, a3);
          if (v9 != a3 && *v9 == 41)
          {
            --this->__open_count_;
            return (unsigned __int8 *)(v9 + 1);
          }
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
          unsigned int marked_count = this->__marked_count_;
          ++this->__open_count_;
          int v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, v8, a3);
          if (v11 != a3)
          {
            BOOL v12 = v11;
            if (*v11 == 41)
            {
              std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
              --this->__open_count_;
              return (unsigned __int8 *)(v12 + 1);
            }
          }
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if (v6 > 91)
    {
      if (v6 == 92) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, a2, (unsigned __int8 *)a3);
      }
      if (v6 == 123) {
        goto LABEL_28;
      }
    }
    else
    {
      if (v6 == 91) {
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, a3);
      }
      if (v6 == 63) {
        goto LABEL_28;
      }
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      uint64_t v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        uint64_t v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    uint64_t v13 = a2;
    if (v12 != 123) {
      return v13;
    }
    int64_t v15 = a2 + 1;
    long long v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            uint64_t v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              uint64_t v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              uint64_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            uint64_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        unint64_t v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          uint64_t v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            uint64_t v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        long long v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            uint64_t v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                uint64_t v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    uint64_t v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      uint64_t v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  uint64_t v13 = a2;
  if (v12 == 43)
  {
    uint64_t v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      uint64_t v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  unint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int64x2_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
  if (v5 == result)
  {
    int64x2_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (v5 == result)
    {
      int64x2_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (v5 == result) {
        return a2;
      }
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    unint64_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    unsigned int v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      unint64_t v8 = v5;
      unint64_t v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v5, a3, v7);
    }
    while (v8 != v5);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = *a2;
    unsigned int v5 = v4 - 48;
    if (v4 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return ++v3;
    }
    if ((v4 - 49) > 8) {
      return v3;
    }
    if (++v3 == a3)
    {
      uint64_t v3 = a3;
    }
    else
    {
      while (1)
      {
        int v6 = *v3;
        if ((v6 - 48) > 9) {
          break;
        }
        if (v5 >= 0x19999999) {
          goto LABEL_16;
        }
        ++v3;
        unsigned int v5 = v6 + 10 * v5 - 48;
        if (v3 == a3)
        {
          uint64_t v3 = a3;
          break;
        }
      }
      if (!v5) {
        goto LABEL_16;
      }
    }
    if (v5 <= a1->__marked_count_)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
      return v3;
    }
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  int v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      char v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            unsigned int v7 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_52;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_61;
        case 'r':
          if (a4)
          {
            unsigned int v7 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_52;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_61;
        case 't':
          if (a4)
          {
            unsigned int v7 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_52;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_61;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_66;
          }
          int v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
            goto LABEL_66;
          }
          int v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_66;
          }
          int v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_24;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6) {
            goto LABEL_66;
          }
          char v11 = -87;
LABEL_24:
          char v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_66;
          }
          int v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_30;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6) {
            goto LABEL_66;
          }
          char v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_66;
          }
          int v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
            goto LABEL_35;
          }
          v14 |= 0x20u;
          if ((v14 - 97) >= 6) {
            goto LABEL_66;
          }
          char v15 = -87;
LABEL_35:
          std::string::value_type v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4) {
            std::string::operator=(a4, v16);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            unsigned int v7 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_52;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_47;
      }
      goto LABEL_61;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        unsigned int v7 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_52;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_61:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          unsigned int v7 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_52:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_61;
      }
LABEL_47:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          unsigned int v7 = a4;
          goto LABEL_52;
        }
        goto LABEL_61;
      }
LABEL_66:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_66;
    }
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65) {
      goto LABEL_66;
    }
    unsigned int v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v17 >= 0x5B && (v17 - 97) > 0x19u) {
      goto LABEL_66;
    }
    std::string::value_type v18 = v17 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v18);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  int v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      int v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_38;
    }
    if (v9 == 61)
    {
      int v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
LABEL_38:
      uint64_t v6 = (uint64_t)v10;
      char v21 = 0;
      goto LABEL_42;
    }
    goto LABEL_9;
  }
  BOOL v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)&v26);
  int v4 = v19;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  int v14 = v19;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        char v13 = v4 + 1;
        if (v11)
        {
          int v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          int v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    int v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (unsigned int v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          std::string::value_type v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_40:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
          goto LABEL_41;
        }
        std::string::value_type v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_25;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      std::string::value_type v16 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_40;
      }
LABEL_25:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0]);
    }
LABEL_41:
    char v21 = 1;
    int v4 = v14;
    goto LABEL_42;
  }
  memset(&v25, 0, sizeof(v25));
  int v4 = v14 + 2;
  if (v14 + 2 != a3 && *v17 == 91 && *v4 == 46)
  {
    std::string::value_type v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    int v4 = v18;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v17) = *v17;
    if (v17 == 92)
    {
      if (v11) {
        std::string::value_type v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      }
      else {
        std::string::value_type v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v17) = *v17;
  }
  std::string::operator=(&v25, (std::string::value_type)v17);
LABEL_56:
  std::string v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v21 = 1;
LABEL_42:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v21) {
    return v4;
  }
  return (char *)v6;
}

void sub_1B1B1F540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  uint64_t v6 = a3 - 2;
  unsigned int v7 = a2;
  unint64_t v8 = a2;
  for (i = a2; ; unint64_t v8 = i)
  {
    int v10 = *i++;
    if (v10 == 61 && *i == 93) {
      break;
    }
    if (a2 == v6) {
      goto LABEL_33;
    }
    ++v7;
    --v6;
  }
  if (v8 == a3) {
LABEL_33:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, v7, (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    uint64_t v11 = v22;
    if (v22)
    {
      int v12 = (char *)&v20;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v11 = v21;
  if (!v21) {
    goto LABEL_34;
  }
  int v12 = (char *)v20;
LABEL_14:
  std::regex_traits<char>::__transform_primary<char *>(a1, v12, &v12[v11], (uint64_t)__p);
  unint64_t v13 = v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v13 = (unint64_t)__p[1];
  }
  if (v13)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (long long *)__p);
  }
  else
  {
    uint64_t v14 = v22;
    if ((v22 & 0x80u) != 0) {
      uint64_t v14 = v21;
    }
    if (v14 == 2)
    {
      std::string::value_type v16 = (char *)&v20;
      if ((v22 & 0x80u) != 0) {
        std::string::value_type v16 = (char *)v20;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      }
      int v15 = (char *)&v20;
      if ((v22 & 0x80u) != 0) {
        int v15 = (char *)v20;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v15);
    }
  }
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v22 < 0) {
    operator delete(v20);
  }
  return v7 + 2;
}

void sub_1B1B1F760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  int v5 = a3 - 2;
  uint64_t v6 = a2;
  unsigned int v7 = a2;
  for (i = a2; ; unsigned int v7 = i)
  {
    int v9 = *i++;
    if (v9 == 58 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_11;
    }
    ++v6;
    --v5;
  }
  if (v7 == a3) {
LABEL_11:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  int v10 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, v6, *(_DWORD *)(a1 + 24) & 1);
  if (!v10) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  }
  *(_DWORD *)(a4 + 160) |= v10;
  return v6 + 2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int v5 = a3 - 2;
  uint64_t v6 = a2;
  unsigned int v7 = a2;
  for (i = a2; ; unsigned int v7 = i)
  {
    int v9 = *i++;
    if (v9 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    ++v6;
    --v5;
  }
  if (v7 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        unint64_t v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    std::string::value_type v9 = 0;
    unint64_t v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        uint64_t v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      uint64_t v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
  {
    uint64_t v5 = a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  }
  while (v5 != a2);
  return v5;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (unsigned __int8 *)a2;
  }
  std::vector<std::wssub_match>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  int v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }
  size_t v9 = a1->__marked_count_ + 1;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, v9);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  std::string::value_type v7 = v6;
  if (a2 == v6 && a2 != a3 && a2 + 1 != a3)
  {
    uint64_t v9 = (uint64_t)v6;
    if (*a2 == 92) {
      uint64_t v9 = (uint64_t)&a2[2 * (a2[1] == 40)];
    }
    if ((char *)v9 == a2)
    {
      if (*a2 == 92)
      {
        BOOL v12 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, a2[1]);
        uint64_t v13 = 2;
        if (!v12) {
          uint64_t v13 = 0;
        }
        return &a2[v13];
      }
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      unsigned int marked_count = a1->__marked_count_;
      std::string::value_type v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (uint64_t)a3);
      if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      std::string::value_type v7 = v11 + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    unsigned int v7 = __mexp_end;
    unsigned int v8 = __mexp_begin;
    int v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      uint64_t v13 = a2 + 2;
      int v25 = 0;
      unint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v13 == v14) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        int v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          unsigned int v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            size_t v19 = v24;
            size_t v18 = v25;
            if (v24 == -1)
            {
              size_t v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            uint64_t v6 = &v17[2 * (v17[1] == 125)];
            size_t v20 = v8;
            size_t v21 = v7;
            unsigned __int8 v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          uint64_t v6 = v14 + 2;
          size_t v18 = v25;
          size_t v20 = v8;
          size_t v21 = v7;
          unsigned __int8 v22 = this;
          size_t v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 == a3)
  {
    int64x2_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
  }
  else
  {
    int v6 = *a2;
    if ((a2 + 1 != a3 || v6 != 36)
      && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
      return a2 + 1;
    }
    int64x2_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
    if (*a2 == 46) {
      operator new();
    }
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unsigned int v7 = v6;
    int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::vector<std::wssub_match>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>(a1, a2, a3);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3) {
    goto LABEL_12;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_8;
  }
  if (locale_low == 40)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
    unsigned int v11 = a1->__marked_count_;
    ++a1->__open_count_;
    BOOL v12 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v12 == a3 || (uint64_t v13 = v12, LOBYTE(v12->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v11);
    --a1->__open_count_;
    uint64_t v9 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (unsigned __int8 *)a2) {
      goto LABEL_13;
    }
    return (unsigned __int8 *)a2;
  }
  if (locale_low != 94) {
    return (unsigned __int8 *)a2;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_8:
  uint64_t v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
LABEL_13:
  size_t v14 = a1->__marked_count_ + 1;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v14);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int64x2_t result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    int64x2_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46) {
        operator new();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = a2 + 1;
    if (v3 + 1 != a3 && *v3 == 92)
    {
      int v5 = *v4;
      char v6 = *v4;
      BOOL v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
      if (v7 && (v5 - 123) >= 3)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
        {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
        }
        else
        {
          BOOL v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
          uint64_t v10 = 2;
          if (!v9) {
            uint64_t v10 = 0;
          }
          v3 += v10;
        }
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
        v3 += 2;
      }
    }
  }
  return v3;
}

std::string *std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, std::__wrap_iter<const char *> a2, std::__wrap_iter<const char *> a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, char *a5, unsigned __int32 __m)
{
  __int16 v6 = __m;
  uint64_t i = (std::string::value_type *)a2.__i_;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v18, a2, a3, a4, (std::regex_constants::match_flag_type)__m);
  memset(&v17.__match_.__prefix_, 0, 17);
  memset(&v17.__match_.__suffix_, 0, 17);
  v17.__match_.__ready_ = 0;
  v17.__match_.__position_start_.__i_ = 0;
  memset(&v17.__match_, 0, 41);
  memset(&v17, 0, 28);
  if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v18, &v17))
  {
    if ((v6 & 0x200) == 0)
    {
      while (i != a3.__i_)
        std::string::push_back(a1, *i++);
    }
  }
  else
  {
    std::__wrap_iter<const char *>::iterator_type v11 = 0;
    BOOL v12 = 0;
    uint64_t v13 = (unsigned __int8 *)&a5[strlen(a5)];
    while (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v18, &v17))
    {
      if ((v6 & 0x200) == 0)
      {
        size_t v14 = (std::string::value_type *)v18.__match_.__prefix_.first.__i_;
        std::__wrap_iter<const char *>::iterator_type v15 = v18.__match_.__prefix_.second.__i_;
        while (v14 != v15)
          std::string::push_back(a1, *v14++);
      }
      a1 = std::match_results<std::__wrap_iter<char const*>>::format<std::back_insert_iterator<std::string>>((std::string::value_type ***)&v18.__match_, a1, (unsigned __int8 *)a5, v13, v6);
      BOOL v12 = (std::string::value_type *)v18.__match_.__suffix_.first.__i_;
      std::__wrap_iter<const char *>::iterator_type v11 = v18.__match_.__suffix_.second.__i_;
      if ((v6 & 0x400) != 0) {
        break;
      }
      std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v18);
    }
    if ((v6 & 0x200) == 0)
    {
      while (v12 != v11)
        std::string::push_back(a1, *v12++);
    }
  }
  if (v17.__match_.__matches_.__begin_)
  {
    v17.__match_.__matches_.__end_ = v17.__match_.__matches_.__begin_;
    operator delete(v17.__match_.__matches_.__begin_);
  }
  if (v18.__match_.__matches_.__begin_)
  {
    v18.__match_.__matches_.__end_ = v18.__match_.__matches_.__begin_;
    operator delete(v18.__match_.__matches_.__begin_);
  }
  return a1;
}

void sub_1B1B20610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::match_results<std::__wrap_iter<char const*>>::format<std::back_insert_iterator<std::string>>(std::string::value_type ***a1, std::string *this, unsigned __int8 *a3, unsigned __int8 *a4, __int16 a5)
{
  __int16 v6 = a3;
  if ((a5 & 0x100) != 0)
  {
    if (a3 == a4) {
      return this;
    }
    while (1)
    {
      int v30 = *v6;
      if (v30 == 92)
      {
        unint64_t v34 = v6 + 1;
        if (v6 + 1 != a4)
        {
          int v30 = *v34;
          if ((v30 - 48) <= 9u)
          {
            unint64_t v35 = (v30 - 48);
            if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v35) {
              uint64_t v36 = (uint64_t)(a1 + 3);
            }
            else {
              uint64_t v36 = (uint64_t)&(*a1)[3 * v35];
            }
            uint64_t v37 = *(std::string::value_type **)v36;
            unsigned int v38 = *(std::string::value_type **)(v36 + 8);
            while (v37 != v38)
            {
              std::string::value_type v39 = *v37++;
              std::string::push_back(this, v39);
            }
            goto LABEL_55;
          }
          ++v6;
        }
      }
      else if (v30 == 38)
      {
        long long v31 = **a1;
        uint64_t v32 = (*a1)[1];
        while (v31 != v32)
        {
          std::string::value_type v33 = *v31++;
          std::string::push_back(this, v33);
        }
        goto LABEL_54;
      }
      std::string::push_back(this, v30);
LABEL_54:
      unint64_t v34 = v6;
LABEL_55:
      __int16 v6 = v34 + 1;
      if (v34 + 1 == a4) {
        return this;
      }
    }
  }
  if (a3 != a4)
  {
    do
    {
      int v9 = *v6;
      uint64_t v10 = v6 + 1;
      if (v9 == 36 && v10 != a4)
      {
        int v12 = (char)*v10;
        int v9 = *v10;
        if (v12 > 38)
        {
          if (v12 == 39)
          {
            size_t v19 = (std::string::value_type *)a1[9];
            size_t v20 = (std::string::value_type *)a1[10];
            while (v19 != v20)
            {
              std::string::value_type v21 = *v19++;
              std::string::push_back(this, v21);
            }
            goto LABEL_10;
          }
          if (v12 == 96)
          {
            int v16 = (std::string::value_type *)a1[6];
            std::regex_iterator<std::__wrap_iter<const char *>, char> v17 = (std::string::value_type *)a1[7];
            while (v16 != v17)
            {
              std::string::value_type v18 = *v16++;
              std::string::push_back(this, v18);
            }
            goto LABEL_10;
          }
        }
        else
        {
          if (v12 == 36) {
            goto LABEL_9;
          }
          if (v12 == 38)
          {
            uint64_t v13 = **a1;
            size_t v14 = (*a1)[1];
            while (v13 != v14)
            {
              std::string::value_type v15 = *v13++;
              std::string::push_back(this, v15);
            }
            goto LABEL_10;
          }
        }
        if ((v9 - 48) <= 9)
        {
          unint64_t v22 = *v10 - 48;
          if (v6 + 2 != a4)
          {
            uint64_t v23 = v6[2];
            unsigned int v24 = v23 - 48;
            uint64_t v25 = v23 + 10 * (int)v22 - 48;
            if (v24 > 9)
            {
              uint64_t v10 = v6 + 1;
            }
            else
            {
              unint64_t v22 = v25;
              uint64_t v10 = v6 + 2;
            }
          }
          if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v22) {
            uint64_t v26 = (uint64_t)(a1 + 3);
          }
          else {
            uint64_t v26 = (uint64_t)&(*a1)[3 * (int)v22];
          }
          int v27 = *(std::string::value_type **)v26;
          uint64_t v28 = *(std::string::value_type **)(v26 + 8);
          while (v27 != v28)
          {
            std::string::value_type v29 = *v27++;
            std::string::push_back(this, v29);
          }
          goto LABEL_10;
        }
        LOBYTE(v9) = 36;
      }
      uint64_t v10 = v6;
LABEL_9:
      std::string::push_back(this, v9);
LABEL_10:
      __int16 v6 = v10 + 1;
    }
    while (v10 + 1 != a4);
  }
  return this;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_iterator<std::__wrap_iter<const char *>, char> *this)
{
  p_match = &this->__match_;
  std::vector<std::wssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  int i = (int)p_match[-1].__position_start_.__i_;
  unsigned __int32 flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin) {
    p_unmatched = &p_match->__unmatched_;
  }
  else {
    p_unmatched = begin;
  }
  BOOL v7 = (__int32 *)p_unmatched->second.__i_;
  if ((__int32 *)p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    int v9 = (__int32 *)this->__end_.__i_;
    pregex = this->__pregex_;
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    char v10 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)pregex, v7, v9, &__p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::wssub_match> *)p_match, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)v9, (uint64_t *)&__p, (flags & 0x800) != 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if ((v10 & 1) == 0)
    {
      std::vector<std::wssub_match>::pointer begin = p_match->__matches_.__begin_;
LABEL_14:
      if (begin)
      {
        this->__match_.__matches_.__end_ = begin;
        operator delete(begin);
        p_match->__matches_.__begin_ = 0;
        p_match->__matches_.__end_ = 0;
        p_match->__matches_.__end_cap_.__value_ = 0;
      }
      this->__match_.__ready_ = 0;
      *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
      *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
      *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                                   + 1) = 0u;
      this->__match_.__prefix_.first.__i_ = 0;
      this->__match_.__prefix_.second.__i_ = 0;
      this->__match_.__prefix_.matched = 0;
      this->__match_.__suffix_.first.__i_ = 0;
      this->__match_.__suffix_.second.__i_ = 0;
      this->__match_.__suffix_.matched = 0;
      this->__match_.__position_start_.__i_ = 0;
      return this;
    }
    return this;
  }
  std::__wrap_iter<const char *>::iterator_type v11 = (__int32 *)this->__end_.__i_;
  if (v11 == v7) {
    goto LABEL_14;
  }
  int v12 = this->__pregex_;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  char v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v12, v7, v11, &__p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::wssub_match> *)p_match, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)v11, (uint64_t *)&__p, 1);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if ((v13 & 1) == 0)
  {
    BOOL v7 = (__int32 *)((char *)v7 + 1);
    unsigned __int32 flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_1B1B20A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(char **)a1, *(char **)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  }
  else
  {
    std::match_results<const wchar_t *> __p = 0;
    size_t v19 = 0;
    uint64_t v20 = 0;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&v15, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    unsigned int v3 = HIBYTE(v17);
    int v5 = v15;
    size_t v4 = v16;
  }
  else
  {
    size_t v4 = 0;
    int v5 = 0;
    unsigned int v3 = 0;
    std::string::value_type v15 = 0;
    size_t v16 = 0;
    uint64_t v17 = 0;
  }
  char v6 = HIBYTE(v20);
  if (v20 >= 0) {
    size_t v7 = HIBYTE(v20);
  }
  else {
    size_t v7 = v19;
  }
  if (v20 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v9 = v3;
  }
  else {
    size_t v9 = v4;
  }
  if ((v3 & 0x80u) == 0) {
    char v10 = (void **)&v15;
  }
  else {
    char v10 = v5;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  unsigned int v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  unsigned int v13 = v9 < v7;
  if (v7 < v9) {
    unsigned int v13 = -1;
  }
  if (v12) {
    return v12;
  }
  else {
    return v13;
  }
}

void sub_1B1B20B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x1B3EA7D80](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    size_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    unsigned int v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1B1B20D10(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1B1B20CD0);
  }
  __cxa_rethrow();
}

void sub_1B1B20D8C(_Unwind_Exception *a1)
{
}

void std::vector<quasar::RegexReplacementRule>::__emplace_back_slow_path<std::string &>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) <= 0x2E8BA2E8BA2E8BALL)
  {
    uint64_t v5 = (uint64_t)(a1 + 2);
    unint64_t v6 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v2) >> 3);
    if (2 * v6 > v4) {
      unint64_t v4 = 2 * v6;
    }
    if (v6 >= 0x1745D1745D1745DLL) {
      unint64_t v7 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v7 = v4;
    }
    unsigned int v13 = a1 + 2;
    if (v7) {
      unsigned int v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v5, v7);
    }
    else {
      unsigned int v8 = 0;
    }
    int v9 = v8;
    char v10 = (std::regex_traits<char> *)&v8[88 * v3];
    char v11 = v10;
    unsigned int v12 = &v8[88 * v7];
    quasar::RegexReplacementRule::RegexReplacementRule(v10);
  }
  std::vector<int>::__throw_length_error[abi:ne180100]();
}

void sub_1B1B20EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::RegexReplacementRule>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::RegexReplacementRule>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>,std::reverse_iterator<quasar::RegexReplacementRule*>,std::reverse_iterator<quasar::RegexReplacementRule*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>,std::reverse_iterator<quasar::RegexReplacementRule*>,std::reverse_iterator<quasar::RegexReplacementRule*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      std::locale::locale((std::locale *)(v7 - 88), (const std::locale *)(v9 - 88));
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(v9 - 80);
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(v9 - 64);
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(v9 - 48);
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 40) = 0;
      *(void *)(v7 - 32) = *(void *)(v9 - 32);
      long long v10 = *(_OWORD *)(v9 - 24);
      *(void *)(v7 - 8) = *(void *)(v9 - 8);
      *(_OWORD *)(v7 - 24) = v10;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      uint64_t v7 = *((void *)&v16 + 1) - 88;
      *((void *)&v16 + 1) -= 88;
      v9 -= 88;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(std::locale **)(a1[2] + 8);
  uint64_t v2 = *(std::locale **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::RegexReplacementRule>::destroy[abi:ne180100](v3, v1);
      v1 += 11;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::RegexReplacementRule>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::RegexReplacementRule>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<quasar::RegexReplacementRule>::destroy[abi:ne180100](v4, (std::locale *)(i - 88));
  }
}

void kaldi::decode(kaldi::quasar::CEDecoder **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W7>, uint64_t *a8@<X8>, char a9)
{
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"receive a prompt of size ", 25);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v103);
  }
  kaldi::quasar::CEDecoder::ResetStates(*a1);
  unint64_t v12 = (int)kaldi::quasar::CEDecoder::BeamSize(*a1);
  LODWORD(v103) = -947920896;
  v105[0] = 0;
  v105[1] = 0;
  std::match_results<const wchar_t *> __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  std::vector<std::pair<float,std::vector<int>>>::vector(&v128, v12, (uint64_t)&v103);
  if (__p)
  {
    v105[0] = __p;
    operator delete(__p);
  }
  *(_DWORD *)long long v128 = 0;
  long long v126 = 0u;
  long long v125 = 0u;
  int32x2_t v124 = (int32x2_t)&unk_1F0A51768;
  char v127 = 0;
  long long v122 = 0u;
  long long v121 = 0u;
  int32x2_t v120 = (int32x2_t)&unk_1F0A51768;
  char v123 = 0;
  long long v118 = 0u;
  long long v117 = 0u;
  int32x2_t v116 = (int32x2_t)&unk_1F0A51768;
  char v119 = 0;
  kaldi::CuMatrix<float>::CuMatrix(v114, v12, 1, 1, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(&v111, v12, 1, 1, 0, 0);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    char v14 = v112;
    uint64_t v15 = 4 * v113;
    do
    {
      *char v14 = (float)(int)v13++;
      char v14 = (float *)((char *)v14 + v15);
    }
    while (v12 != v13);
  }
  long long v16 = *(int **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 4)
  {
    unint64_t v17 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::Set((uint64_t)v114, (float)v16[v17]);
      kaldi::quasar::CEDecoder::Compute((uint64_t)*a1, (uint64_t)v114, (uint64_t)&v111, a3, &v124, &v120, &v116);
      ++v17;
      long long v16 = *(int **)a2;
    }
    while (((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) - 1 > v17);
  }
  long long v109 = 0uLL;
  unint64_t v110 = 0;
  a8[1] = 0;
  a8[2] = 0;
  *a8 = 0;
  unint64_t v93 = v12;
  if (a7 >= 1)
  {
    uint64_t v18 = 0;
    uint64_t v92 = a7;
    uint64_t v19 = v12;
    v89 = a3;
    do
    {
      if (v12 <= (a8[1] - *a8) >> 5) {
        break;
      }
      if (a9) {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a8);
      }
      if ((int)v12 >= 1)
      {
        unint64_t v20 = 0;
        unint64_t v21 = (uint64_t)(*((void *)&v128 + 1) - v128) >> 5;
        unint64_t v22 = (float *)v114[1];
        uint64_t v23 = (void *)(v128 + 16);
        uint64_t v24 = 4 * v115;
        do
        {
          if (v21 <= v20) {
            *((_DWORD *)v23 - 4) = -947920896;
          }
          else {
            *unint64_t v22 = (float)*(int *)(*v23 - 4);
          }
          ++v20;
          v23 += 4;
          unint64_t v22 = (float *)((char *)v22 + v24);
        }
        while (v19 != v20);
      }
      kaldi::quasar::CEDecoder::Compute((uint64_t)*a1, (uint64_t)v114, (uint64_t)&v111, a3, &v124, &v120, &v116);
      uint64_t v94 = v18;
      v106 = 0;
      unint64_t v107 = 0;
      v108 = 0;
      if ((int)v12 < 1)
      {
        unint64_t v25 = 0;
        std::string::value_type v39 = 0;
      }
      else
      {
        unint64_t v25 = 0;
        uint64_t v26 = 0;
        do
        {
          uint64_t v27 = 0;
          do
          {
            float v28 = *(float *)(v128 + 32 * v26) + *(float *)(v125 + 4 * (int)v126 * (int)v26 + 4 * v27);
            uint64_t v29 = v121 + 4 * (int)v122 * (int)v26;
            if (v25 >= (unint64_t)v108)
            {
              int v30 = v106;
              unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)v106) >> 2);
              unint64_t v32 = v31 + 1;
              if (v31 + 1 > 0x1555555555555555) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((v108 - (unsigned char *)v106) >> 2) > v32) {
                unint64_t v32 = 0x5555555555555556 * ((v108 - (unsigned char *)v106) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v108 - (unsigned char *)v106) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v33 = 0x1555555555555555;
              }
              else {
                unint64_t v33 = v32;
              }
              if (v33)
              {
                unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v108, v33);
                int v30 = v106;
                unint64_t v25 = v107;
              }
              else
              {
                unint64_t v34 = 0;
              }
              unint64_t v35 = (float *)&v34[12 * v31];
              *(_DWORD *)unint64_t v35 = v26;
              v35[1] = v28;
              *((_DWORD *)v35 + 2) = (int)*(float *)(v29 + 4 * v27);
              uint64_t v36 = v35;
              if ((void *)v25 != v30)
              {
                do
                {
                  uint64_t v37 = *(void *)(v25 - 12);
                  v25 -= 12;
                  int v38 = *(_DWORD *)(v25 + 8);
                  *(void *)(v36 - 3) = v37;
                  v36 -= 3;
                  *((_DWORD *)v36 + 2) = v38;
                }
                while ((void *)v25 != v30);
                int v30 = v106;
              }
              unint64_t v25 = (unint64_t)(v35 + 3);
              v106 = v36;
              unint64_t v107 = (unint64_t)(v35 + 3);
              v108 = &v34[12 * v33];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v25 = v26;
              *(float *)(v25 + 4) = v28;
              *(_DWORD *)(v25 + 8) = (int)*(float *)(v29 + 4 * v27);
              v25 += 12;
            }
            unint64_t v107 = v25;
            ++v27;
          }
          while (v27 != v19);
          ++v26;
        }
        while (v26 != v19);
        std::string::value_type v39 = v106;
        unint64_t v12 = v93;
        a3 = v89;
      }
      unint64_t v40 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)v39) >> 2));
      uint64_t v41 = (void *)v25 == v39 ? 0 : v40;
      std::__introsort<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *,false>((uint64_t)v39, v25, v41, 1);
      uint64_t v42 = v106;
      unint64_t v43 = (_DWORD *)v107;
      while (v42 != v43)
      {
        char v44 = *(void **)v42;
        LODWORD(v101) = v42[2];
        v100 = v44;
        std::match_results<const wchar_t *> __p = 0;
        v105[0] = 0;
        v103 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v103, *(const void **)(v128 + 32 * (int)v44 + 8), *(void *)(v128 + 32 * (int)v44 + 16), (uint64_t)(*(void *)(v128 + 32 * (int)v44 + 16) - *(void *)(v128 + 32 * (int)v44 + 8)) >> 2);
        uint64_t v45 = (char *)__p;
        if ((unint64_t)__p >= v105[0])
        {
          uint64_t v47 = (char *)v103;
          int64_t v48 = ((unsigned char *)__p - (unsigned char *)v103) >> 2;
          unint64_t v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v50 = v105[0] - (void)v103;
          if ((uint64_t)(v105[0] - (void)v103) >> 1 > v49) {
            unint64_t v49 = v50 >> 1;
          }
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v51 = v49;
          }
          if (v51)
          {
            uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v105, v51);
            uint64_t v47 = (char *)v103;
            uint64_t v45 = (char *)__p;
          }
          else
          {
            uint64_t v52 = 0;
          }
          uint64_t v53 = &v52[4 * v48];
          *(_DWORD *)uint64_t v53 = v101;
          unint64_t v46 = v53 + 4;
          while (v45 != v47)
          {
            int v54 = *((_DWORD *)v45 - 1);
            v45 -= 4;
            *((_DWORD *)v53 - 1) = v54;
            v53 -= 4;
          }
          v103 = v53;
          std::match_results<const wchar_t *> __p = v46;
          v105[0] = &v52[4 * v51];
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          *(_DWORD *)std::match_results<const wchar_t *> __p = v101;
          unint64_t v46 = v45 + 4;
        }
        std::match_results<const wchar_t *> __p = v46;
        int v55 = v101;
        if (v55 == kaldi::quasar::CEFusedAcousticEncoder::GetContextEmbeddingMaskDim(*a1))
        {
          if (*((float *)&v100 + 1) > -65504.0)
          {
            unint64_t v56 = a8[1];
            if (v56 >= a8[2])
            {
              uint64_t v57 = std::vector<std::pair<float,std::vector<int>>>::__emplace_back_slow_path<float &,std::vector<int>&>(a8, (_DWORD *)&v100 + 1, (uint64_t)&v103);
            }
            else
            {
              std::vector<std::pair<float,std::vector<int>>>::__construct_one_at_end[abi:ne180100]<float &,std::vector<int>&>((uint64_t)a8, (_DWORD *)&v100 + 1, (uint64_t)&v103);
              uint64_t v57 = v56 + 32;
            }
            a8[1] = v57;
            uint64_t v60 = *(void *)(a5 + 24);
            if (!v60) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            *(float *)(a8[1] - 32) = (*(float (**)(void, uint64_t))(*(void *)v60 + 48))(*(void *)(a5 + 24), v57 - 32);
          }
        }
        else
        {
          unint64_t v58 = *((void *)&v109 + 1);
          v112[(int)(v113 * ((*((void *)&v109 + 1) - (void)v109) >> 5))] = (float)(int)v100;
          if (v58 >= v110)
          {
            uint64_t v59 = std::vector<std::pair<float,std::vector<int>>>::__emplace_back_slow_path<float &,std::vector<int>&>((uint64_t *)&v109, (_DWORD *)&v100 + 1, (uint64_t)&v103);
          }
          else
          {
            *(_DWORD *)unint64_t v58 = HIDWORD(v100);
            *(void *)(v58 + 16) = 0;
            *(void *)(v58 + 24) = 0;
            *(void *)(v58 + 8) = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v58 + 8), v103, (uint64_t)__p, ((unsigned char *)__p - (unsigned char *)v103) >> 2);
            uint64_t v59 = v58 + 32;
          }
          *((void *)&v109 + 1) = v59;
        }
        if (v12 == (uint64_t)(*((void *)&v109 + 1) - v109) >> 5 || v12 == (a8[1] - *a8) >> 5)
        {
          if (v103)
          {
            std::match_results<const wchar_t *> __p = v103;
            operator delete(v103);
          }
          break;
        }
        if (v103)
        {
          std::match_results<const wchar_t *> __p = v103;
          operator delete(v103);
        }
        v42 += 3;
      }
      unint64_t v61 = a8[1];
      unint64_t v62 = 126 - 2 * __clz((uint64_t)(v61 - *a8) >> 5);
      if (v61 == *a8) {
        uint64_t v63 = 0;
      }
      else {
        uint64_t v63 = v62;
      }
      _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Lb0EEEvT1_S1D_S17_NS_15iterator_traitsIS1D_E15difference_typeEb(*a8, v61, v63, 1);
      if (*((void *)&v109 + 1) != (void)v109)
      {
        uint64_t v64 = *(void *)(a6 + 24);
        if (!v64) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v64 + 48))(v64, v109 + 8);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v103, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"pending info  (", 15);
          long long v65 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"/", 1);
          v66 = (void *)std::ostream::operator<<();
          v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)") : ", 4);
          memset(v99, 0, sizeof(v99));
          std::vector<std::pair<float,std::vector<int>>>::__init_with_size[abi:ne180100]<std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*>(v99, v109, *((uint64_t *)&v109 + 1), (uint64_t)(*((void *)&v109 + 1) - v109) >> 5);
          uint64_t v68 = *(void *)(a4 + 24);
          if (!v68) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(void **__return_ptr))(*(void *)v68 + 48))(&v100);
          if ((v102 & 0x80u) == 0) {
            v69 = &v100;
          }
          else {
            v69 = v100;
          }
          if ((v102 & 0x80u) == 0) {
            uint64_t v70 = v102;
          }
          else {
            uint64_t v70 = v101;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v69, v70);
          if ((char)v102 < 0) {
            operator delete(v100);
          }
          v130[0] = v99;
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](v130);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v103);
        }
      }
      if (a8[1] != *a8 && kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v103, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"finished info (", 15);
        v71 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"/", 1);
        v72 = (void *)std::ostream::operator<<();
        v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)") : ", 4);
        memset(v98, 0, sizeof(v98));
        std::vector<std::pair<float,std::vector<int>>>::__init_with_size[abi:ne180100]<std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*>(v98, *a8, a8[1], (a8[1] - *a8) >> 5);
        uint64_t v74 = *(void *)(a4 + 24);
        if (!v74) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(void **__return_ptr))(*(void *)v74 + 48))(&v100);
        if ((v102 & 0x80u) == 0) {
          v75 = &v100;
        }
        else {
          v75 = v100;
        }
        if ((v102 & 0x80u) == 0) {
          uint64_t v76 = v102;
        }
        else {
          uint64_t v76 = v101;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v75, v76);
        if ((char)v102 < 0) {
          operator delete(v100);
        }
        v130[0] = (void **)v98;
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](v130);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v103);
      }
      std::vector<std::pair<float,std::vector<int>>>::__vdeallocate((uint64_t *)&v128);
      long long v128 = v109;
      unint64_t v129 = v110;
      unint64_t v110 = 0;
      long long v109 = 0uLL;
      if (v106)
      {
        unint64_t v107 = (unint64_t)v106;
        operator delete(v106);
      }
      uint64_t v18 = v94 + 1;
    }
    while (v94 + 1 != v92);
  }
  if ((int)v12 <= 0)
  {
    v79 = a8;
    unint64_t v80 = a8[1];
  }
  else
  {
    uint64_t v77 = 0;
    uint64_t v78 = v12;
    v79 = a8;
    unint64_t v80 = a8[1];
    uint64_t v81 = 32 * v78;
    do
    {
      if (v93 <= (uint64_t)(v80 - *v79) >> 5) {
        break;
      }
      uint64_t v82 = v128 + v77;
      if (v80 >= v79[2])
      {
        uint64_t v83 = std::vector<std::pair<float,std::vector<int>>>::__push_back_slow_path<std::pair<float,std::vector<int>> const&>(v79, v82);
      }
      else
      {
        std::vector<std::pair<float,std::vector<int>>>::__construct_one_at_end[abi:ne180100]<std::pair<float,std::vector<int>> const&>((uint64_t)v79, v82);
        uint64_t v83 = v80 + 32;
      }
      a8[1] = v83;
      uint64_t v84 = *(void *)(a5 + 24);
      if (!v84) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      float v85 = (*(float (**)(void, uint64_t))(*(void *)v84 + 48))(*(void *)(a5 + 24), v83 - 32);
      v79 = a8;
      unint64_t v80 = a8[1];
      *(float *)(v80 - 32) = v85;
      v77 += 32;
    }
    while (v81 != v77);
  }
  unint64_t v86 = 126 - 2 * __clz((uint64_t)(v80 - *v79) >> 5);
  if (v80 == *v79) {
    uint64_t v87 = 0;
  }
  else {
    uint64_t v87 = v86;
  }
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Lb0EEEvT1_S1D_S17_NS_15iterator_traitsIS1D_E15difference_typeEb(*v79, v80, v87, 1);
  uint64_t v88 = *(void *)(a6 + 24);
  if (!v88) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v88 + 48))(v88, *v79 + 8);
  v103 = &v109;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v111);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v114);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v116);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v124);
  v103 = &v128;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
}

void sub_1B1B21D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x230]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x260]);
  kaldi::CuMatrix<float>::~CuMatrix(v31 - 240);
  kaldi::CuMatrix<float>::~CuMatrix(v31 - 192);
  a31 = (void *)(v31 - 144);
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

uint64_t quasar::AEDBeamSearchDecoder::AEDBeamSearchDecoder(uint64_t a1, long long *a2)
{
  v8[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A54E20;
  *(unsigned char *)(v3 + 448) = 0;
  *(_DWORD *)(v3 + 452) = -1;
  *(void *)(v3 + 456) = 0x8000000080;
  *(_WORD *)(v3 + 464) = 1;
  std::string::basic_string[abi:ne180100]<0>(v7, "<?>");
  std::string::basic_string[abi:ne180100]<0>(v8, "<eps>");
  std::unordered_set<std::string>::unordered_set(a1 + 472, v7, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete(*(void **)&v7[i * 8 + 24]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 520), "▁");
  *(void *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::OnlineLatticeBiglmFasterDecoderConfig((kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig *)(a1 + 664));
  *(void *)(a1 + 824) = 0xCF000000CF000000;
  *(unsigned char *)(a1 + 832) = 0;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  *(_OWORD *)((char *)v5 + 233) = 0u;
  *(_DWORD *)(a1 + 916) = 5000;
  *(unsigned char *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 924) = 0u;
  *(_OWORD *)(a1 + 940) = 0u;
  *(_OWORD *)(a1 + 953) = 0u;
  *(unsigned char *)(a1 + 969) = 1;
  *(void *)(a1 + 972) = 60000;
  *(_DWORD *)(a1 + 980) = 500;
  *(_WORD *)(a1 + 984) = 0;
  *(void *)(a1 + 988) = 0x60000000BLL;
  *(unsigned char *)(a1 + 57) = 1;
  return a1;
}

void sub_1B1B2207C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unint64_t v20 = *(std::__shared_weak_count **)(v15 + 656);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  unint64_t v21 = *(std::__shared_weak_count **)(v15 + 640);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (*(char *)(v15 + 631) < 0) {
    operator delete(*(void **)(v15 + 608));
  }
  if (*(char *)(v15 + 607) < 0) {
    operator delete(*(void **)(v15 + 584));
  }
  unint64_t v22 = *(std::__shared_weak_count **)(v15 + 576);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (*(char *)(v15 + 567) < 0) {
    operator delete(*v18);
  }
  if (*(char *)(v15 + 543) < 0) {
    operator delete(*v17);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v16);
  quasar::Decoder::~Decoder((quasar::Decoder *)v15);
  _Unwind_Resume(a1);
}

void quasar::AEDBeamSearchDecoder::~AEDBeamSearchDecoder(quasar::AEDBeamSearchDecoder *this)
{
  *(void *)this = &unk_1F0A54E20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 120);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v6 = (void **)((char *)this + 928);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 911) < 0) {
    operator delete(*((void **)this + 111));
  }
  if (*((char *)this + 887) < 0) {
    operator delete(*((void **)this + 108));
  }
  if (*((char *)this + 863) < 0) {
    operator delete(*((void **)this + 105));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 82);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 631) < 0) {
    operator delete(*((void **)this + 76));
  }
  if (*((char *)this + 607) < 0) {
    operator delete(*((void **)this + 73));
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 567) < 0) {
    operator delete(*((void **)this + 68));
  }
  if (*((char *)this + 543) < 0) {
    operator delete(*((void **)this + 65));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 472);
  quasar::Decoder::~Decoder(this);
}

{
  uint64_t vars8;

  quasar::AEDBeamSearchDecoder::~AEDBeamSearchDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::AEDBeamSearchDecoder::registerParams(quasar::AEDBeamSearchDecoder *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "AED-beam-search-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 271, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "symbol-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "symbol table (text format) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 544, (uint64_t)v4, 1, 16, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "exit-without-search");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default false) disable beam search (for encoder-only energy measurement) ");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "the encoder portion of AED");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 584, (uint64_t)v4, 1, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "the decoder portion of AED");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 608, (uint64_t)v4, 1, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "separator");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default ▁) indictator of the start of a new word for BPE");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 520, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num-frames-per-decoding-window");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default -1) read all frames if negative");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 452, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "max-output-size-per-window");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 128) maximum number of symbols to be output per decoding window");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 456, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "max-history-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 128) how many confirmed words from the previous window are used as the prompt of the current window");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 460, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "reset-candidate-pool-every-step");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default true, whisper's behavior), reset candidate pool at the beginning of every decoding step, no reset otherwise. Exit decoding when candidate pool is full");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 464, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rejected-left-context-tokens");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of tokens that don't work with left context. The decoder will reset the left context when it encounters one of these tokens.");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)this + 472, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "inter-utterance-left-context-max-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Maximum size for inter-utterance left context");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 512, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "use-utterance-level-timestamp");
  std::string::basic_string[abi:ne180100]<0>(v4, "use utterance level timestamp to overwirte the word level timestamp");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 984, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "preserve-white-space");
  std::string::basic_string[abi:ne180100]<0>(v4, "Preserve white space from decoder, default is true");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 465, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "use-dynamic-shapes");
  std::string::basic_string[abi:ne180100]<0>(v4, "default false");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 985, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "subsampler-window-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 11) the window size in the encoder for subsampling. Used to compute paddings when use-dynamic-shapes is True");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 988, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "subsampler-stride-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 6) the stride size in the encoder for subsampling. Used to compute paddings when use-dynamic-shapes is True");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 992, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "utt-detect.");
  quasar::UttDetectConfig::registerParams((uint64_t)this + 664, a2, (const void **)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  *((_DWORD *)this + 128) = 4;
}

void sub_1B1B229FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<std::unordered_set<std::string>>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  quasar::SystemConfig::Register(a1, a2, a3);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  uint64_t v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v15[7] = v20;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  uint64_t v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5) {
      return;
    }
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  unint64_t v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (long long **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1B22C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<unsigned int>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  uint64_t v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v15[7] = v20;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  uint64_t v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5) {
      return;
    }
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  unint64_t v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (long long **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1B22DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::UttDetectConfig::registerParams(uint64_t a1, quasar::SystemConfig *this, const void **a3)
{
  quasar::SystemConfig::getPrefix(this, &v9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v9.__r_.__value_.__l.__data_, a3, (uint64_t)&__p);
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::Register(a1, (uint64_t)this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  quasar::EndPointDecoderConfig::registerParams(a1 + 160, this, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "use-nnet");
  std::string::basic_string[abi:ne180100]<0>(v6, "Use nnet for utterance detection if true");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 304, (uint64_t)v6, 1, 15, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "left-context");
  std::string::basic_string[abi:ne180100]<0>(v6, "Use left context for utterance detection if true");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 305, (uint64_t)v6, 0, 15, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard-max-utt-length-ms");
  std::string::basic_string[abi:ne180100]<0>(v6, "If the utterance exceeds this length, force trigger the utterance detector. Ignored if <= 0. It is named 'hard' because there is a softer 'max-utt-length' config that does not trigger right away when exceeded.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 308, (uint64_t)v6, 0, 108, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "utt-start-threshold");
  std::string::basic_string[abi:ne180100]<0>(v6, "If the speech activity detection model produce a score higher than threshold, we enable the decoder for graph/beam search. ");
  quasar::SystemConfig::Register<float>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 312, (uint64_t)v6, 0, 108, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "utt-start-silence-length-ms");
  std::string::basic_string[abi:ne180100]<0>(v6, "We include up to this much preceding silence when a new utterance start is detected. ");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 316, (uint64_t)v6, 0, 108, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::SystemConfig::setPrefix((std::string *)this, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B230FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::AEDBeamSearchDecoder::finishInit(quasar::AEDBeamSearchDecoder *this)
{
  uint64_t v2 = (_OWORD *)((char *)this + 568);
  quasar::ModelLoader::readSymbolTable(*((void *)this + 46), (uint64_t)this + 544, 4, 0, v14);
  long long v3 = v14[0];
  v14[0] = 0uLL;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 72);
  _OWORD *v2 = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (*((void *)&v14[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14[0] + 1));
    }
  }
  uint64_t v5 = *((void *)this + 46);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  quasar::ModelLoader::readNeuralNetwork(v5, (uint64_t)this + 584, 1, 1, 1, &v15, v14);
  long long v6 = v14[0];
  v14[0] = 0uLL;
  char v7 = (std::__shared_weak_count *)*((void *)this + 80);
  v2[4] = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    if (*((void *)&v14[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14[0] + 1));
    }
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::allocate_shared[abi:ne180100]<kaldi::quasar::CEDecoder,std::allocator<kaldi::quasar::CEDecoder>,std::string &,void>(v14);
  long long v8 = v14[0];
  v14[0] = 0uLL;
  std::string v9 = (std::__shared_weak_count *)*((void *)this + 82);
  v2[5] = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (*((void *)&v14[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14[0] + 1));
    }
  }
  quasar::EndPointDecoderConfig::init((uint64_t)this + 824);
  if (*((_DWORD *)this + 113) == -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "num-frames-per-decoding-window only supports positive integers for now");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  long long v10 = (void *)kaldi::quasar::CEDecoder::StartOfPrevious(*((kaldi::quasar::CEDecoder **)this + 81));
  uint64_t v11 = v10[1] - *v10;
  uint64_t result = (void *)kaldi::quasar::CEDecoder::StartOfTranscript(*((kaldi::quasar::CEDecoder **)this + 81));
  unint64_t v13 = ((uint64_t)(result[1] - *result) >> 2) + (v11 >> 2);
  if (v13 > *((int *)this + 115)) {
    *((_DWORD *)this + 115) = v13;
  }
  return result;
}

void sub_1B1B23300(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 - 48);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AEDBeamSearchDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  quasar::rescoring::AdapterModel::getFeaturizer(*(quasar::rescoring::AdapterModel **)(*(void *)a3 + 608));
  uint64_t v5 = *(void *)(a1 + 568);
  uint64_t v6 = *(void *)(a1 + 576);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = *(std::__shared_weak_count **)(a2 + 176);
  *(void *)(a2 + 168) = v5;
  *(void *)(a2 + 176) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst11SymbolTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
}

void sub_1B1B24D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  unint64_t v15 = STACK[0x2D8];
  STACK[0x2D8] = 0;
  if (v15) {
    (*(void (**)(unint64_t))(*(void *)v15 + 16))(v15);
  }
  uint64_t v16 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v16;
    operator delete(v16);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  unint64_t v17 = (void *)STACK[0x348];
  if (STACK[0x348])
  {
    STACK[0x350] = (unint64_t)v17;
    operator delete(v17);
  }
  if (STACK[0x378]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x378]);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<kaldi::Vector<float>>::pop_front(int64x2_t *a1)
{
  kaldi::Vector<float>::Destroy(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0xAAuLL)) + 24 * (a1[2].i64[0] % 0xAAuLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B255E5F0);
  return std::deque<kaldi::Vector<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<kaldi::Vector<float>>::emplace_back<kaldi::SubVector<float>>(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<kaldi::Vector<float>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = *(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)v8, *(unsigned int *)(a2 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec(v8, (const void **)a2);
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5] + 1;
  a1[5] = v10;
  unint64_t v11 = v9 + v10;
  uint64_t v12 = a1[1];
  unint64_t v13 = (void *)(v12 + 8 * (v11 / 0xAA));
  uint64_t v14 = *v13 + 24 * (v11 % 0xAA);
  if (a1[2] == v12) {
    uint64_t v14 = 0;
  }
  if (v14 == *v13) {
    uint64_t v14 = *(v13 - 1) + 4080;
  }
  return v14 - 24;
}

uint64_t quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3::operator()(uint64_t *a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  LOBYTE(v15[0].__begin_) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v15, 1);
  uint64_t v4 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"    ", 4);
    uint64_t v6 = *v5;
    *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v5 + *(void *)(*v5 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v5 + *(void *)(v6 - 24) + 16) = 6;
    unint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" | ", 3);
    uint64_t v8 = *a1;
    quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0::operator()(a1 + 1, (int **)(v4 + 8), v15);
    kaldi::JoinVectorToString<std::string>((uint64_t *)v15, "");
    *(void *)&long long v16 = v15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((std::regex_traits<char> *)v15, v8 + 520, 0);
  }
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v14);
}

void sub_1B1B2574C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2::operator()(uint64_t *a1@<X0>, int **a2@<X1>, std::vector<std::wstring> *a3@<X8>)
{
  uint64_t v5 = *a1;
  quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0::operator()(a1 + 1, a2, (std::vector<std::string> *)v6);
  kaldi::JoinVectorToString<std::string>((uint64_t *)v6, "");
  *(void *)&long long v7 = v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  if (!*(unsigned char *)(v5 + 465)) {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v6, v5 + 520, 0);
  }
  quasar::wordPieceSequenceToWords(&__str, *((unsigned __int8 *)a1 + 16), (unsigned __int8 *)(v5 + 520), (uint64_t)v6);
  std::vector<std::string>::__vdeallocate(a3);
  *a3 = (std::vector<std::wstring>)v6[0];
  memset(v6, 0, 24);
  *(void *)&long long v7 = v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B2593C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t fst::Union<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v5 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  if (!fst::CompatSymbols(v4, v5, (const fst::SymbolTable *)1)
    || (uint64_t v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1),
        long long v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2),
        !fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1)))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    uint64_t v20 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)&__p);
    unint64_t v21 = (void *)fst::cerr(v20);
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Union: input/output symbol tables of 1st argument ", 50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"do not match input/output symbol tables of 2nd argument", 55);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
  }
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x2000000000, 1);
  unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (result == -1)
  {
    if ((v11 & 4) != 0)
    {
      unint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192);
      return v25(a1, 4, 4);
    }
    return result;
  }
  uint64_t v13 = result;
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v14 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    if (v9) {
      int v15 = v8;
    }
    else {
      int v15 = v8 + 1;
    }
    (*(void (**)(uint64_t, void))(*(void *)a1 + 248))(a1, (v15 + v14));
  }
  unsigned int v38 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v36);
LABEL_10:
  if (!v36)
  {
    if ((int)v38 >= v37) {
      goto LABEL_40;
    }
    goto LABEL_14;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v36 + 16))(v36))
  {
LABEL_14:
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
    if (v36) {
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 24))(v36);
    }
    else {
      uint64_t v17 = v38;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v35, a2, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v16, &v35);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 256))(a1, v16, v18);
    unint64_t v34 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 136))(a2, v17, &__p);
    while (__p)
    {
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p))
      {
        if (__p)
        {
          (*(void (**)(void))(*(void *)__p + 8))();
          goto LABEL_31;
        }
LABEL_29:
        if (v33) {
          --*v33;
        }
LABEL_31:
        if (v36) {
          (*(void (**)(uint64_t))(*(void *)v36 + 32))(v36);
        }
        else {
          ++v38;
        }
        goto LABEL_10;
      }
      if (!__p) {
        goto LABEL_23;
      }
      uint64_t v19 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
LABEL_24:
      v28[0] = *(void *)v19;
      v28[1] = *(void *)(v19 + 8);
      int v29 = *(_DWORD *)(v19 + 16) + v8;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 208))(a1, v16, v28);
      if (__p) {
        (*(void (**)(void *))(*(void *)__p + 40))(__p);
      }
      else {
        ++v34;
      }
    }
    if (v34 >= v32) {
      goto LABEL_29;
    }
LABEL_23:
    uint64_t v19 = v31 + 20 * v34;
    goto LABEL_24;
  }
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
LABEL_40:
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v23 == -1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v13);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v11, 0x3FFFFFFF0004);
  }
  else
  {
    int v24 = v23;
    if (v9)
    {
      std::string __p = 0;
      uint64_t v31 = 0;
      LODWORD(v32) = v13 + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v23, &__p);
    }
    else
    {
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v26);
      std::string __p = 0;
      uint64_t v31 = 0;
      LODWORD(v32) = v24;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v26, &__p);
      std::string __p = 0;
      uint64_t v31 = 0;
      LODWORD(v32) = v13 + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v26, &__p);
    }
    unint64_t v27 = fst::UnionProperties(v10, v11, 0);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v27, 0x3FFFFFFF0007);
  }
}

void sub_1B1B26270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *fst::Concat<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v5 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  if (!fst::CompatSymbols(v4, v5, (const fst::SymbolTable *)1)
    || (uint64_t v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1),
        long long v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2),
        !fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1)))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    uint64_t v17 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)&__p);
    uint64_t v18 = (void *)fst::cerr(v17);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Concat: input/output symbol tables of 1st argument ", 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"do not match input/output symbol tables of 2nd argument", 55);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
  }
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result == -1)
  {
    if ((v9 & 4) != 0)
    {
      uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192);
      return (void *)v26(a1, 4, 4);
    }
    return result;
  }
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v12 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    (*(void (**)(uint64_t, void))(*(void *)a1 + 248))(a1, (v12 + v11));
  }
  unsigned int v38 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v36);
LABEL_7:
  if (!v36)
  {
    if ((int)v38 >= v37) {
      goto LABEL_37;
    }
    goto LABEL_11;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v36 + 16))(v36))
  {
LABEL_11:
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
    if (v36) {
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 24))(v36);
    }
    else {
      uint64_t v14 = v38;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v35, a2, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v13, &v35);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 256))(a1, v13, v15);
    unint64_t v34 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 136))(a2, v14, &__p);
    while (__p)
    {
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p))
      {
        if (__p)
        {
          (*(void (**)(void))(*(void *)__p + 8))();
          goto LABEL_28;
        }
LABEL_26:
        if (v33) {
          --*v33;
        }
LABEL_28:
        if (v36) {
          (*(void (**)(uint64_t))(*(void *)v36 + 32))(v36);
        }
        else {
          ++v38;
        }
        goto LABEL_7;
      }
      if (!__p) {
        goto LABEL_20;
      }
      uint64_t v16 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
LABEL_21:
      v28[0] = *(void *)v16;
      v28[1] = *(void *)(v16 + 8);
      int v29 = *(_DWORD *)(v16 + 16) + v11;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 208))(a1, v13, v28);
      if (__p) {
        (*(void (**)(void *))(*(void *)__p + 40))(__p);
      }
      else {
        ++v34;
      }
    }
    if (v34 >= v32) {
      goto LABEL_26;
    }
LABEL_20:
    uint64_t v16 = v31 + 20 * v34;
    goto LABEL_21;
  }
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
LABEL_37:
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  int v20 = (int)result;
  if (v11 >= 1)
  {
    uint64_t v21 = 0;
    int v22 = result + v11;
    int32x2_t v23 = vdup_n_s32(0x7F800000u);
    do
    {
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v36, a1, v21);
      LODWORD(v28[0]) = HIDWORD(v36);
      LODWORD(__p) = v36;
      int v40 = 2139095040;
      float v39 = INFINITY;
      v24.n128_u32[0] = v36;
      if (*(float *)&v36 != INFINITY || (v24.n128_u32[0] = v28[0], *(float *)v28 != v39))
      {
        int32x2_t v27 = v23;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, int32x2_t *, __n128))(*(void *)a1 + 184))(a1, v21, &v27, v24);
        if (v20 != -1)
        {
          std::string __p = 0;
          uint64_t v31 = v36;
          LODWORD(v32) = v22;
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v21, &__p);
        }
      }
      uint64_t v21 = (v21 + 1);
    }
    while (v11 != v21);
  }
  if (v20 != -1)
  {
    unint64_t v25 = fst::ConcatProperties(v8, v9, 0);
    return (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v25, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1B26B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>()
{
}

void sub_1B1B270F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  a15 = v28 - 136;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((void *)(v28 - 112));
  _Unwind_Resume(a1);
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Lb0EEEvT1_S1D_S17_NS_15iterator_traitsIS1D_E15difference_typeEb(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v10 = a1;
  while (1)
  {
    a1 = v10;
    uint64_t v11 = a2 - v10;
    uint64_t v12 = (uint64_t)(a2 - v10) >> 5;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return;
        case 2:
          float v49 = *(float *)(a2 - 32);
          float v50 = *(float *)a1;
          if (v49 > *(float *)a1)
          {
            *(float *)a1 = v49;
            *(float *)(a2 - 32) = v50;
            uint64_t v51 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = *(void *)(a2 - 24);
            *(void *)(a2 - 24) = v51;
            uint64_t v52 = *(void *)(a1 + 16);
            *(void *)(a1 + 16) = *(void *)(a2 - 16);
            *(void *)(a2 - 16) = v52;
            uint64_t v53 = *(void *)(a1 + 24);
            *(void *)(a1 + 24) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v53;
          }
          break;
        case 3:
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1, a1 + 32, a2 - 32);
          break;
        case 4:
          _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEvT1_S1D_S1D_S1D_S17_(a1, a1 + 32, a1 + 64, a2 - 32);
          break;
        case 5:
          _ZNSt3__124__sort5_maybe_branchlessB8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Li0EEEvT1_S1D_S1D_S1D_S1D_S17_(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 767) {
      break;
    }
    if (!a3)
    {
      if (a1 == a2) {
        return;
      }
      int64_t v67 = (unint64_t)(v12 - 2) >> 1;
      int64_t v68 = v67;
      do
      {
        int64_t v69 = v68;
        if (v67 >= v68)
        {
          uint64_t v70 = (2 * v68) | 1;
          unint64_t v71 = a1 + 32 * v70;
          if (2 * v69 + 2 < v12 && *(float *)v71 > *(float *)(v71 + 32))
          {
            v71 += 32;
            uint64_t v70 = 2 * v69 + 2;
          }
          unint64_t v72 = a1 + 32 * v69;
          float v73 = *(float *)v72;
          if (*(float *)v71 <= *(float *)v72)
          {
            unint64_t v74 = a1 + 32 * v69;
            long long v115 = *(_OWORD *)(v74 + 8);
            uint64_t v75 = *(void *)(v74 + 24);
            *(void *)(v74 + 16) = 0;
            *(void *)(v74 + 24) = 0;
            *(void *)(v74 + 8) = 0;
            float v76 = *(float *)v71;
            do
            {
              uint64_t v77 = (float *)v72;
              unint64_t v72 = v71;
              *uint64_t v77 = v76;
              std::vector<int>::__move_assign((uint64_t)(v77 + 2), (__n128 *)(v71 + 8));
              if (v67 < v70) {
                break;
              }
              uint64_t v78 = 2 * v70;
              uint64_t v70 = (2 * v70) | 1;
              unint64_t v71 = a1 + 32 * v70;
              uint64_t v79 = v78 + 2;
              if (v79 < v12 && *(float *)v71 > *(float *)(v71 + 32))
              {
                v71 += 32;
                uint64_t v70 = v79;
              }
              float v76 = *(float *)v71;
            }
            while (*(float *)v71 <= v73);
            *(float *)unint64_t v72 = v73;
            unint64_t v80 = *(void **)(v72 + 8);
            if (v80)
            {
              *(void *)(v72 + 16) = v80;
              operator delete(v80);
            }
            *(_OWORD *)(v72 + 8) = v115;
            *(void *)(v72 + 24) = v75;
          }
        }
        int64_t v68 = v69 - 1;
      }
      while (v69);
      uint64_t v81 = (unint64_t)v11 >> 5;
      while (2)
      {
        uint64_t v82 = 0;
        float v83 = *(float *)a1;
        uint64_t v84 = *(void *)(a1 + 8);
        uint64_t v85 = *(void *)(a1 + 16);
        uint64_t v86 = *(void *)(a1 + 24);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        unint64_t v87 = a1;
        *(void *)(a1 + 24) = 0;
        do
        {
          uint64_t v88 = (_DWORD *)v87;
          v87 += 32 * v82 + 32;
          uint64_t v89 = 2 * v82;
          uint64_t v82 = (2 * v82) | 1;
          uint64_t v90 = v89 + 2;
          if (v90 < v81 && *(float *)v87 > *(float *)(v87 + 32))
          {
            v87 += 32;
            uint64_t v82 = v90;
          }
          v91 = (void *)(v87 + 8);
          *uint64_t v88 = *(_DWORD *)v87;
          std::vector<int>::__move_assign((uint64_t)(v88 + 2), (__n128 *)(v87 + 8));
        }
        while (v82 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
        unint64_t v92 = a2 - 32;
        if (v87 == a2 - 32)
        {
          *(float *)unint64_t v87 = v83;
          v103 = *(void **)(v87 + 8);
          if (v103)
          {
            *(void *)(v87 + 16) = v103;
            operator delete(v103);
            *(void *)(v87 + 16) = 0;
            *(void *)(v87 + 24) = 0;
          }
          void *v91 = v84;
LABEL_127:
          *(void *)(v87 + 16) = v85;
          *(void *)(v87 + 24) = v86;
        }
        else
        {
          *(_DWORD *)unint64_t v87 = *(_DWORD *)(a2 - 32);
          unint64_t v93 = v87 + 32;
          std::vector<int>::__move_assign(v87 + 8, (__n128 *)(a2 - 24));
          *(float *)(a2 - 32) = v83;
          uint64_t v94 = *(void **)(a2 - 24);
          if (v94)
          {
            *(void *)(a2 - 16) = v94;
            operator delete(v94);
          }
          *(void *)(a2 - 24) = v84;
          *(void *)(a2 - 16) = v85;
          *(void *)(a2 - 8) = v86;
          if ((uint64_t)(v93 - a1) >= 33)
          {
            unint64_t v95 = (((v93 - a1) >> 5) - 2) >> 1;
            unint64_t v96 = a1 + 32 * v95;
            float v97 = *(float *)v87;
            if (*(float *)v96 > *(float *)v87)
            {
              uint64_t v98 = *(void *)(v87 + 8);
              uint64_t v85 = *(void *)(v87 + 16);
              uint64_t v86 = *(void *)(v87 + 24);
              void *v91 = 0;
              *(void *)(v87 + 16) = 0;
              *(void *)(v87 + 24) = 0;
              float v99 = *(float *)v96;
              do
              {
                v100 = (float *)v87;
                unint64_t v87 = v96;
                float *v100 = v99;
                uint64_t v101 = (void *)(v96 + 8);
                std::vector<int>::__move_assign((uint64_t)(v100 + 2), (__n128 *)(v96 + 8));
                if (!v95) {
                  break;
                }
                unint64_t v95 = (v95 - 1) >> 1;
                unint64_t v96 = a1 + 32 * v95;
                float v99 = *(float *)v96;
              }
              while (*(float *)v96 > v97);
              *(float *)unint64_t v87 = v97;
              unsigned __int8 v102 = *(void **)(v87 + 8);
              if (v102)
              {
                *(void *)(v87 + 16) = v102;
                operator delete(v102);
                *(void *)(v87 + 16) = 0;
                *(void *)(v87 + 24) = 0;
              }
              *uint64_t v101 = v98;
              goto LABEL_127;
            }
          }
        }
        a2 = v92;
        if (v81-- <= 2) {
          return;
        }
        continue;
      }
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = a1 + 32 * ((unint64_t)v12 >> 1);
    if ((unint64_t)v11 <= 0x1000)
    {
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(v14, a1, a2 - 32);
    }
    else
    {
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1, v14, a2 - 32);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1 + 32, v14 - 32, a2 - 64);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1 + 64, a1 + 32 + 32 * v13, a2 - 96);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(v14 - 32, v14, a1 + 32 + 32 * v13);
      float v15 = *(float *)a1;
      *(_DWORD *)a1 = *(_DWORD *)v14;
      *(float *)uint64_t v14 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(v14 + 8);
      *(_OWORD *)(v14 + 8) = v16;
      uint64_t v17 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = *(void *)(v14 + 24);
      *(void *)(v14 + 24) = v17;
    }
    --a3;
    float v18 = *(float *)a1;
    if ((a4 & 1) != 0 || *(float *)(a1 - 32) > v18)
    {
      uint64_t v19 = 0;
      long long v112 = *(_OWORD *)(a1 + 8);
      uint64_t v20 = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      do
      {
        float v21 = *(float *)(a1 + v19 + 32);
        v19 += 32;
      }
      while (v21 > v18);
      unint64_t v22 = a1 + v19;
      int32x2_t v23 = (float *)a2;
      if (v19 == 32)
      {
        int32x2_t v23 = (float *)a2;
        do
        {
          if (v22 >= (unint64_t)v23) {
            break;
          }
          float v25 = *(v23 - 8);
          v23 -= 8;
        }
        while (v25 <= v18);
      }
      else
      {
        do
        {
          float v24 = *(v23 - 8);
          v23 -= 8;
        }
        while (v24 <= v18);
      }
      if (v22 >= (unint64_t)v23)
      {
        unint64_t v10 = a1 + v19;
      }
      else
      {
        float v26 = *v23;
        unint64_t v10 = a1 + v19;
        int32x2_t v27 = v23;
        do
        {
          *(float *)unint64_t v10 = v26;
          *int32x2_t v27 = v21;
          uint64_t v28 = *(void *)(v10 + 8);
          *(void *)(v10 + 8) = *((void *)v27 + 1);
          *((void *)v27 + 1) = v28;
          uint64_t v29 = *(void *)(v10 + 16);
          *(void *)(v10 + 16) = *((void *)v27 + 2);
          *((void *)v27 + 2) = v29;
          uint64_t v30 = *(void *)(v10 + 24);
          *(void *)(v10 + 24) = *((void *)v27 + 3);
          *((void *)v27 + 3) = v30;
          do
          {
            float v31 = *(float *)(v10 + 32);
            v10 += 32;
            float v21 = v31;
          }
          while (v31 > v18);
          do
          {
            float v32 = *(v27 - 8);
            v27 -= 8;
            float v26 = v32;
          }
          while (v32 <= v18);
        }
        while (v10 < (unint64_t)v27);
      }
      if (v10 - 32 != a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)(v10 - 32);
        std::vector<int>::__move_assign(a1 + 8, (__n128 *)(v10 - 24));
      }
      *(float *)(v10 - 32) = v18;
      unint64_t v33 = *(void **)(v10 - 24);
      if (v33)
      {
        *(void *)(v10 - 16) = v33;
        operator delete(v33);
      }
      *(_OWORD *)(v10 - 24) = v112;
      *(void *)(v10 - 8) = v20;
      if (v22 < (unint64_t)v23) {
        goto LABEL_34;
      }
      BOOL v34 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEbT1_S1D_S17_(a1, v10 - 32);
      if (_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEbT1_S1D_S17_(v10, a2))
      {
        a2 = v10 - 32;
        if (v34) {
          return;
        }
        goto LABEL_1;
      }
      if (!v34)
      {
LABEL_34:
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Lb0EEEvT1_S1D_S17_NS_15iterator_traitsIS1D_E15difference_typeEb(a1, v10 - 32, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      long long v35 = *(_OWORD *)(a1 + 8);
      uint64_t v36 = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      if (v18 <= *(float *)(a2 - 32))
      {
        unint64_t v38 = a1 + 32;
        do
        {
          unint64_t v10 = v38;
          if (v38 >= a2) {
            break;
          }
          v38 += 32;
        }
        while (v18 <= *(float *)v10);
      }
      else
      {
        unint64_t v10 = a1;
        do
        {
          float v37 = *(float *)(v10 + 32);
          v10 += 32;
        }
        while (v18 <= v37);
      }
      unint64_t v39 = a2;
      if (v10 < a2)
      {
        unint64_t v39 = a2;
        do
        {
          float v40 = *(float *)(v39 - 32);
          v39 -= 32;
        }
        while (v18 > v40);
      }
      long long v113 = v35;
      if (v10 < v39)
      {
        float v41 = *(float *)v10;
        float v42 = *(float *)v39;
        do
        {
          *(float *)unint64_t v10 = v42;
          *(float *)unint64_t v39 = v41;
          uint64_t v43 = *(void *)(v10 + 8);
          *(void *)(v10 + 8) = *(void *)(v39 + 8);
          *(void *)(v39 + 8) = v43;
          uint64_t v44 = *(void *)(v10 + 16);
          *(void *)(v10 + 16) = *(void *)(v39 + 16);
          *(void *)(v39 + 16) = v44;
          uint64_t v45 = *(void *)(v10 + 24);
          *(void *)(v10 + 24) = *(void *)(v39 + 24);
          *(void *)(v39 + 24) = v45;
          do
          {
            float v46 = *(float *)(v10 + 32);
            v10 += 32;
            float v41 = v46;
          }
          while (v18 <= v46);
          do
          {
            float v47 = *(float *)(v39 - 32);
            v39 -= 32;
            float v42 = v47;
          }
          while (v18 > v47);
        }
        while (v10 < v39);
      }
      BOOL v4 = v10 - 32 >= a1;
      BOOL v5 = v10 - 32 == a1;
      if (v10 - 32 != a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)(v10 - 32);
        std::vector<int>::__move_assign(a1 + 8, (__n128 *)(v10 - 24));
      }
      *(float *)(v10 - 32) = v18;
      int64_t v48 = *(void **)(v10 - 24);
      if (v48)
      {
        *(void *)(v10 - 16) = v48;
        operator delete(v48);
      }
      a4 = 0;
      *(_OWORD *)(v10 - 24) = v113;
      *(void *)(v10 - 8) = v36;
    }
  }
  unint64_t v54 = a1 + 32;
  BOOL v56 = a1 == a2 || v54 == a2;
  if (a4)
  {
    if (!v56)
    {
      uint64_t v57 = 0;
      unint64_t v58 = a1;
      do
      {
        unint64_t v59 = v54;
        float v60 = *(float *)(v58 + 32);
        float v61 = *(float *)v58;
        if (v60 > *(float *)v58)
        {
          uint64_t v62 = *(void *)(v58 + 40);
          long long v114 = *(_OWORD *)(v58 + 48);
          *(void *)(v58 + 48) = 0;
          *(void *)(v58 + 56) = 0;
          uint64_t v63 = v57;
          *(void *)(v58 + 40) = 0;
          while (1)
          {
            uint64_t v64 = a1 + v63;
            *(float *)(a1 + v63 + 32) = v61;
            std::vector<int>::__move_assign(a1 + v63 + 40, (__n128 *)(a1 + v63 + 8));
            if (!v63) {
              break;
            }
            float v61 = *(float *)(v64 - 32);
            v63 -= 32;
            if (v60 <= v61)
            {
              uint64_t v65 = a1 + v63 + 32;
              goto LABEL_85;
            }
          }
          uint64_t v65 = a1;
LABEL_85:
          *(float *)uint64_t v65 = v60;
          v66 = *(void **)(v64 + 8);
          if (v66)
          {
            *(void *)(v65 + 16) = v66;
            operator delete(v66);
          }
          *(void *)(v64 + 8) = v62;
          *(_OWORD *)(v65 + 16) = v114;
        }
        unint64_t v54 = v59 + 32;
        v57 += 32;
        unint64_t v58 = v59;
      }
      while (v59 + 32 != a2);
    }
  }
  else if (!v56)
  {
    v105 = (__n128 *)(a1 + 56);
    do
    {
      unint64_t v106 = v54;
      float v107 = *(float *)(a1 + 32);
      float v108 = *(float *)a1;
      if (v107 > *(float *)a1)
      {
        __n128 v116 = *(__n128 *)(a1 + 40);
        unint64_t v109 = *(void *)(a1 + 56);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        unint64_t v110 = v105;
        *(void *)(a1 + 40) = 0;
        do
        {
          v110[-2].n128_f32[2] = v108;
          std::vector<int>::__move_assign((uint64_t)&v110[-1], v110 - 3);
          float v108 = v110[-6].n128_f32[2];
          v110 -= 2;
        }
        while (v107 > v108);
        v110[-2].n128_f32[2] = v107;
        int32x2_t v111 = (void *)v110[-1].n128_u64[0];
        if (v111)
        {
          v110[-1].n128_u64[1] = (unint64_t)v111;
          operator delete(v111);
        }
        v110[-1] = v116;
        v110->n128_u64[0] = v109;
      }
      unint64_t v54 = v106 + 32;
      v105 += 2;
      a1 = v106;
    }
    while (v106 + 32 != a2);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v22 = *(a2 - 2);
          float v21 = (long long *)(a2 - 2);
          if (v22 < *v11)
          {
            uint64_t v30 = *(_OWORD *)v11;
            *(_OWORD *)uint64_t v11 = *v21;
            *float v21 = v30;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v11, v11 + 2, v11 + 4, (_OWORD *)a2 - 1);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v11, v11 + 2, v11 + 4, (__n128 *)v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v11 + 1, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v11 + 2, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v17 - 1, v17, &v11[2 * v16 + 2]);
      uint64_t v29 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)uint64_t v17 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(v11 - 2) >= *v11)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>(v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    float v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>((long long *)v11, (long long *)a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)v11, (unint64_t *)v18);
    uint64_t v11 = (unint64_t *)(v18 + 1);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)(v18 + 1), a2))
    {
      a4 = -v13;
      a2 = (unint64_t *)v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,false>(a1, v18, a3, -v13, a5 & 1);
      uint64_t v11 = (unint64_t *)(v18 + 1);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(v11, a2);
  }
  else if (v11 != a2)
  {
    int32x2_t v23 = v11 + 2;
    while (v23 != a2)
    {
      float v24 = v23;
      float v25 = a1[2];
      if (v25 < *a1)
      {
        float v26 = a1[3];
        int32x2_t v27 = v24;
        do
        {
          *(_OWORD *)int32x2_t v27 = *((_OWORD *)v27 - 1);
          uint64_t v28 = *(v27 - 4);
          v27 -= 2;
        }
        while (v25 < v28);
        *int32x2_t v27 = v25;
        v27[1] = v26;
      }
      int32x2_t v23 = v24 + 2;
      a1 = v24;
    }
  }
}

  uint64_t v28 = a2 - 3;
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = 0xAAAAAAAAAAAAAAABLL * (a2 - v11);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v24 = *(a2 - 3);
          float v25 = *v11;
          if (0x6DB6DB6DB6DB6DB7 * ((*(a2 - 2) - v24) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                  * ((v11[1] - *v11) >> 5)))
          {
            std::regex_traits<char> *v11 = v24;
            *(a2 - 3) = v25;
            float v26 = v11[1];
            v11[1] = *(a2 - 2);
            *(a2 - 2) = v26;
            int32x2_t v27 = v11[2];
            void v11[2] = *(a2 - 1);
            *(a2 - 1) = v27;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v11, v11 + 3, v28);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v11, v11 + 3, v11 + 6, v28);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v11, v11 + 3, v11 + 6, v11 + 9, v28);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 575) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*,std::vector<quasar::Token>*>((uint64_t)v11, (uint64_t)a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = &v11[3 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v11, &v11[3 * (v15 >> 1)], v28);
      float v18 = &v11[3 * v16];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v11 + 3, v18 - 3, a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v11 + 6, &v11[3 * v16 + 3], a2 - 9);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v18 - 3, v17, &v11[3 * v16 + 3]);
      uint64_t v19 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)uint64_t v17 = v19;
      uint64_t v20 = v11[2];
      void v11[2] = v18[2];
      v18[2] = v20;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(&v11[3 * (v15 >> 1)], v11, v28);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (0x6DB6DB6DB6DB6DB7 * ((*(v11 - 2) - *(v11 - 3)) >> 5) <= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                     * ((v11[1] - *v11) >> 5)))
    {
      uint64_t v11 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<quasar::Token> *,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token>&,std::vector<quasar::Token>&)#1} &>((uint64_t)v11, (void **)a2);
      goto LABEL_18;
    }
LABEL_13:
    float v21 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<quasar::Token> *,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token>&,std::vector<quasar::Token>&)#1} &>((uint64_t)v11, (void **)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_16;
    }
    int32x2_t v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v11, v21);
    uint64_t v11 = v21 + 3;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v21 + 3, a2))
    {
      a4 = -v13;
      a2 = v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if ((v23 & 1) == 0)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*,false>(a1, v21, a3, -v13, a5 & 1);
      uint64_t v11 = v21 + 3;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v11, a2);
  }
}

  MemberOf = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = MemberOf;
    unint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)MemberOf;
    float v15 = (a2 - (char *)MemberOf) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          int32x2_t v23 = *((_DWORD *)a2 - 2);
          float v24 = *MemberOf;
          if (v23 < *MemberOf)
          {
            *MemberOf = v23;
            *((_DWORD *)a2 - 2) = v24;
            float v25 = MemberOf[1];
            MemberOf[1] = *((_DWORD *)a2 - 1);
            *((_DWORD *)a2 - 1) = v25;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(MemberOf, MemberOf + 2, (int *)a2 - 2);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)MemberOf, (uint64_t)(MemberOf + 2), (uint64_t)(MemberOf + 4), (float *)a2 - 2);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)MemberOf, (uint64_t)(MemberOf + 2), (uint64_t)(MemberOf + 4), (float *)MemberOf + 6, (float *)a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (MemberOf != (int *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *,std::pair<int,float> *>((char *)MemberOf, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = &MemberOf[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(MemberOf, &MemberOf[2 * (v15 >> 1)], (int *)a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(MemberOf + 2, v17 - 2, (int *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(MemberOf + 4, &MemberOf[2 * v16 + 2], (int *)a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(v17 - 2, v17, &MemberOf[2 * v16 + 2]);
      float v18 = *MemberOf;
      *MemberOf = *v17;
      *uint64_t v17 = v18;
      uint64_t v19 = MemberOf[1];
      MemberOf[1] = v17[1];
      v17[1] = v19;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(&MemberOf[2 * (v15 >> 1)], MemberOf, (int *)a2 - 2);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(MemberOf - 2) >= *MemberOf)
    {
      MemberOf = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::CompareFirstMemberOfPair<int,float> &>(MemberOf, (int *)a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::CompareFirstMemberOfPair<int,float> &>(MemberOf, (int *)a2);
    if ((v21 & 1) == 0) {
      goto LABEL_16;
    }
    unint64_t v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)MemberOf, (float *)v20);
    MemberOf = v20 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)(v20 + 2), (float *)a2))
    {
      a4 = -v13;
      a2 = (char *)v20;
      if (v22) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *,false>(a1, v20, a3, -v13, a5 & 1);
      MemberOf = v20 + 2;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(MemberOf, (int *)a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(MemberOf, (int *)a2);
  }
}

  unint64_t v10 = (uint64_t *)((char *)a2 - 20);
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v11) >> 2);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*((_DWORD *)a2 - 4) < *((_DWORD *)v11 + 1))
          {
            float v25 = *v11;
            float v26 = *((_DWORD *)v11 + 4);
            std::regex_traits<char> *v11 = *(uint64_t *)((char *)a2 - 20);
            int32x2_t v27 = *(uint64_t *)((char *)a2 - 12);
            *((_DWORD *)v11 + 4) = *((_DWORD *)a2 - 1);
            uint64_t v28 = v11[1];
            v11[1] = v27;
            *(uint64_t *)((char *)a2 - 20) = v25;
            *(uint64_t *)((char *)a2 - 12) = v28;
            *((_DWORD *)a2 - 1) = v26;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11, (uint64_t *)((char *)v11 + 20), v10);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, (uint64_t)v11 + 20, (uint64_t)(v11 + 5), (uint64_t)v10);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, (uint64_t)v11 + 20, (uint64_t)(v11 + 5), (uint64_t)v11 + 60, (uint64_t)v10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 479) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (uint64_t *)((char *)v11 + 20 * (v15 >> 1));
    if ((unint64_t)v14 >= 0xA01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11, (uint64_t *)((char *)v11 + 20 * (v15 >> 1)), v10);
      float v18 = (char *)v11 + 20 * v16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v11 + 20), (uint64_t *)(v18 - 20), a2 - 5);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11 + 5, (uint64_t *)((char *)v11 + 20 * v16 + 20), (uint64_t *)((char *)a2 - 60));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)(v18 - 20), v17, (uint64_t *)((char *)v11 + 20 * v16 + 20));
      uint64_t v19 = *v11;
      uint64_t v20 = *((_DWORD *)v11 + 4);
      std::regex_traits<char> *v11 = *v17;
      *((_DWORD *)v11 + 4) = *((_DWORD *)v18 + 4);
      *uint64_t v17 = v19;
      float v21 = v11[1];
      v11[1] = *((void *)v18 + 1);
      *((void *)v18 + 1) = v21;
      *((_DWORD *)v18 + 4) = v20;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v11 + 20 * (v15 >> 1)), v11, v10);
    }
    if ((a5 & 1) == 0 && *((_DWORD *)v11 - 4) >= *((_DWORD *)v11 + 1))
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(v11, (unint64_t)a2);
      goto LABEL_17;
    }
    unint64_t v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(v11, (unint64_t)a2);
    if ((v23 & 1) == 0) {
      goto LABEL_15;
    }
    float v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, v22);
    uint64_t v11 = (uint64_t *)(v22 + 20);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v22 + 20, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (uint64_t *)v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_15:
      std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(a1, v22, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t *)(v22 + 20);
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11, a2);
  }
}

  unint64_t v10 = (uint64_t)(a2 - 6);
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    float v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v11) >> 4);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          int32x2_t v27 = *(a2 - 6);
          float v26 = a2 - 6;
          int64_t v48 = v27;
          float v49 = v26[1];
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          float v50 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v50, (const void *)v26[2], v26[3], (v26[3] - v26[2]) >> 2);
          uint64_t v53 = *((_DWORD *)v26 + 10);
          float v42 = *(void *)v11;
          uint64_t v43 = *(void *)(v11 + 8);
          uint64_t v45 = 0;
          float v46 = 0;
          uint64_t v44 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v44, *(const void **)(v11 + 16), *(void *)(v11 + 24), (uint64_t)(*(void *)(v11 + 24) - *(void *)(v11 + 16)) >> 2);
          float v47 = *(_DWORD *)(v11 + 40);
          uint64_t v28 = v48;
          uint64_t v29 = v42;
          if (v44)
          {
            uint64_t v45 = v44;
            operator delete(v44);
          }
          if (v50)
          {
            uint64_t v51 = v50;
            operator delete(v50);
          }
          if (v28 < v29) {
            std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, v26);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v11, v11 + 48, v10);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v11, v11 + 48, v11 + 96, v10);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v11, v11 + 48, v11 + 96, v11 + 144, v10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 1151)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>((void *)v11, a2);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v11, a2);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (uint64_t *)(v11 + 48 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x1801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a1 + 48 * (v15 >> 1), v10);
      float v18 = v10;
      uint64_t v19 = 3 * v16;
      uint64_t v20 = a1 + 48 * v16 - 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1 + 48, v20, (uint64_t)(a2 - 12));
      float v21 = a1 + 48 + 16 * v19;
      unint64_t v10 = v18;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1 + 96, v21, (uint64_t)(a2 - 18));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v20, (uint64_t)v17, v21);
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, v17);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1 + 48 * (v15 >> 1), a1, v10);
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v36 = *(void *)(a1 - 48);
      float v37 = *(void *)(a1 - 40);
      unint64_t v39 = 0;
      float v40 = 0;
      unint64_t v38 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v38, *(const void **)(a1 - 32), *(void *)(a1 - 24), (uint64_t)(*(void *)(a1 - 24) - *(void *)(a1 - 32)) >> 2);
      float v41 = *(_DWORD *)(a1 - 8);
      float v31 = *(void *)a1;
      unint64_t v33 = 0;
      BOOL v34 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
      long long v35 = *(_DWORD *)(a1 + 40);
      unint64_t v22 = v36;
      if (__p)
      {
        unint64_t v33 = __p;
        operator delete(__p);
      }
      if (v38)
      {
        unint64_t v39 = v38;
        operator delete(v38);
      }
      if (v22 >= (int)v31)
      {
        uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &>(a1, a2);
        goto LABEL_21;
      }
    }
    int32x2_t v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &>((uint64_t *)a1, (unint64_t)a2);
    if ((v24 & 1) == 0) {
      goto LABEL_19;
    }
    float v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, v23);
    uint64_t v11 = v23 + 48;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v23 + 48, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (uint64_t *)v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v25)
    {
LABEL_19:
      std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*,false>(a1, v23, a3, -v13, a5 & 1);
      uint64_t v11 = v23 + 48;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if ((uint64_t *)v11 != a2) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v11, (uint64_t)a2, (uint64_t)a2, a3);
  }
}

  unint64_t v10 = (uint64_t *)((char *)a2 - 20);
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v11) >> 2);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v25 = *(uint64_t *)((char *)a2 - 20);
          float v26 = *v11;
          if ((int)v25 < (int)*v11)
          {
            int32x2_t v27 = *((_DWORD *)v11 + 4);
            std::regex_traits<char> *v11 = v25;
            uint64_t v28 = *(uint64_t *)((char *)a2 - 12);
            *((_DWORD *)v11 + 4) = *((_DWORD *)a2 - 1);
            uint64_t v29 = v11[1];
            v11[1] = v28;
            *(uint64_t *)((char *)a2 - 20) = v26;
            *(uint64_t *)((char *)a2 - 12) = v29;
            *((_DWORD *)a2 - 1) = v27;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11, (uint64_t *)((char *)v11 + 20), v10);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, (uint64_t)v11 + 20, (uint64_t)(v11 + 5), (uint64_t)v10);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, (uint64_t)v11 + 20, (uint64_t)(v11 + 5), (uint64_t)v11 + 60, (uint64_t)v10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 479) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (uint64_t *)((char *)v11 + 20 * (v15 >> 1));
    if ((unint64_t)v14 >= 0xA01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11, (uint64_t *)((char *)v11 + 20 * (v15 >> 1)), v10);
      float v18 = (char *)v11 + 20 * v16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v11 + 20), (uint64_t *)(v18 - 20), a2 - 5);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11 + 5, (uint64_t *)((char *)v11 + 20 * v16 + 20), (uint64_t *)((char *)a2 - 60));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)(v18 - 20), v17, (uint64_t *)((char *)v11 + 20 * v16 + 20));
      uint64_t v19 = *v11;
      uint64_t v20 = *((_DWORD *)v11 + 4);
      std::regex_traits<char> *v11 = *v17;
      *((_DWORD *)v11 + 4) = *((_DWORD *)v18 + 4);
      *uint64_t v17 = v19;
      float v21 = v11[1];
      v11[1] = *((void *)v18 + 1);
      *((void *)v18 + 1) = v21;
      *((_DWORD *)v18 + 4) = v20;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v11 + 20 * (v15 >> 1)), v11, v10);
    }
    if ((a5 & 1) == 0 && *((_DWORD *)v11 - 5) >= *(_DWORD *)v11)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(v11, a2);
      goto LABEL_17;
    }
    unint64_t v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(v11, a2);
    if ((v23 & 1) == 0) {
      goto LABEL_15;
    }
    float v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, v22);
    uint64_t v11 = (uint64_t *)(v22 + 20);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v22 + 20, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (uint64_t *)v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_15:
      std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(a1, v22, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t *)(v22 + 20);
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, (uint64_t)a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11, a2);
  }
}

  matched = a1;
LABEL_2:
  unint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = matched;
    uint64_t v14 = v13;
    float v15 = (char *)a2 - (char *)matched;
    long long v16 = 0x8E38E38E38E38E39 * (((char *)a2 - (char *)matched) >> 3);
    if (!(!v7 & v6))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((long long *)((char *)a2 - 72), matched))
          {
            std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(matched, (long long *)((char *)a2 - 72));
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(matched, (long long *)((char *)matched + 72), (long long *)((char *)a2 - 72), a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(matched, (long long *)((char *)matched + 72), matched + 9, (long long *)((char *)a2 - 72), a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(matched, (long long *)((char *)matched + 72), matched + 9, (long long *)((char *)matched + 216), (long long *)((char *)a2 - 72), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 1727) {
      break;
    }
    if (v14 == 1)
    {
      if (matched != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(matched, a2, a2, (unsigned int (**)(uint64_t, uint64_t))a3, a6);
      }
      return;
    }
    uint64_t v17 = v16 >> 1;
    float v18 = (long long *)((char *)matched + 72 * (v16 >> 1));
    if ((unint64_t)v15 >= 0x2401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(matched, (long long *)((char *)matched + 72 * (v16 >> 1)), (long long *)((char *)a2 - 72), a3);
      uint64_t v19 = 9 * v17;
      uint64_t v20 = (long long *)((char *)matched + 72 * v17 - 72);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>((long long *)((char *)matched + 72), v20, a2 - 9, a3);
      float v21 = matched + 9;
      unint64_t v22 = (long long *)((char *)matched + 8 * v19 + 72);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(v21, v22, (long long *)((char *)a2 - 216), a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(v20, v18, v22, a3);
      std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a1, v18);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>((long long *)((char *)matched + 72 * (v16 >> 1)), matched, (long long *)((char *)a2 - 72), a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)((long long *)((char *)a1 - 72), a1) & 1) == 0)
    {
      matched = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PhoneticMatchResult *,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&)>((uint64_t)a1, a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    int32x2_t v23 = (long long *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PhoneticMatchResult *,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&)>((uint64_t)a1, a2, (uint64_t (**)(uint64_t, long long *))a3);
    if ((v24 & 1) == 0) {
      goto LABEL_16;
    }
    float v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, v23, a3);
    matched = (long long *)((char *)v23 + 72);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>((long long *)((char *)v23 + 72), a2, a3))
    {
      a4 = -v14;
      a2 = v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    unint64_t v13 = v14 + 1;
    if ((v25 & 1) == 0)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*,false>(a1, v23, a3, -v14, a5 & 1);
      matched = (long long *)((char *)v23 + 72);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(matched, a2, (uint64_t (**)(long long *, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(matched, a2, (uint64_t (**)(long long *, uint64_t))a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v22 = *((_DWORD *)a2 - 4);
          float v21 = a2 - 1;
          if (v22 < (signed __int32)v11->n128_u32[0])
          {
            uint64_t v30 = (__int128)*v11;
            std::regex_traits<char> *v11 = (__n128)*v21;
            *float v21 = v30;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[1], (int *)a2 - 4);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[1], (int *)&v11[2], a2 - 1);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[1], (int *)&v11[2], v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (__n128 *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (int *)&v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[v15 >> 1], (int *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[1], v17 - 4, (int *)a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[2], (int *)&v11[v16 + 1], (int *)a2 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v17 - 1, v17, (int *)&v11[v16 + 1]);
      uint64_t v29 = (__int128)*v11;
      std::regex_traits<char> *v11 = *(__n128 *)v17;
      *(_OWORD *)uint64_t v17 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[v15 >> 1], (int *)v11, (int *)a2 - 4);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((signed __int32)v11[-1].n128_u32[0] >= (signed __int32)v11->n128_u32[0])
    {
      uint64_t v11 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    float v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((long long *)v11, a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)v11, (__n128 *)v18);
    uint64_t v11 = (__n128 *)(v18 + 1);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)(v18 + 1), (__n128 *)a2))
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(a1, v18, a3, -v13, a5 & 1);
      uint64_t v11 = (__n128 *)(v18 + 1);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, a2);
  }
  else if (v11 != (__n128 *)a2)
  {
    int32x2_t v23 = (long long *)&v11[1];
    while (v23 != a2)
    {
      float v24 = v23;
      float v25 = a1[1].n128_i64[0];
      if ((int)v25 < (signed __int32)a1->n128_u32[0])
      {
        float v26 = a1[1].n128_i64[1];
        int32x2_t v27 = v24;
        do
        {
          *int32x2_t v27 = *(v27 - 1);
          uint64_t v28 = *((_DWORD *)v27-- - 8);
        }
        while ((int)v25 < v28);
        *(void *)int32x2_t v27 = v25;
        *((void *)v27 + 1) = v26;
      }
      int32x2_t v23 = v24 + 1;
      a1 = (__n128 *)v24;
    }
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v22 = *((_DWORD *)a2 - 4);
          float v21 = a2 - 1;
          if (v22 < (signed __int32)v11->n128_u32[0])
          {
            uint64_t v30 = (__int128)*v11;
            std::regex_traits<char> *v11 = (__n128)*v21;
            *float v21 = v30;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[1], (int *)a2 - 4);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[1], (int *)&v11[2], a2 - 1);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[1], (int *)&v11[2], v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (__n128 *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (int *)&v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[v15 >> 1], (int *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[1], v17 - 4, (int *)a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[2], (int *)&v11[v16 + 1], (int *)a2 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v17 - 1, v17, (int *)&v11[v16 + 1]);
      uint64_t v29 = (__int128)*v11;
      std::regex_traits<char> *v11 = *(__n128 *)v17;
      *(_OWORD *)uint64_t v17 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[v15 >> 1], (int *)v11, (int *)a2 - 4);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((signed __int32)v11[-1].n128_u32[0] >= (signed __int32)v11->n128_u32[0])
    {
      uint64_t v11 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    float v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((long long *)v11, a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((uint64_t)v11, (__n128 *)v18);
    uint64_t v11 = (__n128 *)(v18 + 1);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((uint64_t)(v18 + 1), (__n128 *)a2))
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,false>(a1, v18, a3, -v13, a5 & 1);
      uint64_t v11 = (__n128 *)(v18 + 1);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, a2);
  }
  else if (v11 != (__n128 *)a2)
  {
    int32x2_t v23 = (long long *)&v11[1];
    while (v23 != a2)
    {
      float v24 = v23;
      float v25 = a1[1].n128_i64[0];
      if ((int)v25 < (signed __int32)a1->n128_u32[0])
      {
        float v26 = a1[1].n128_i64[1];
        int32x2_t v27 = v24;
        do
        {
          *int32x2_t v27 = *(v27 - 1);
          uint64_t v28 = *((_DWORD *)v27-- - 8);
        }
        while ((int)v25 < v28);
        *(void *)int32x2_t v27 = v25;
        *((void *)v27 + 1) = v26;
      }
      int32x2_t v23 = v24 + 1;
      a1 = (__n128 *)v24;
    }
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v24 = (long long *)(a2 - 4);
          float v25 = *(a2 - 4);
          if (v25 < *v11
            || v25 <= *v11 && ((v26 = *(a2 - 3), int32x2_t v27 = v11[1], v26 < v27) || v26 <= v27 && *(a2 - 1) < v11[3]))
          {
            uint64_t v29 = *(_OWORD *)v11;
            *(_OWORD *)uint64_t v11 = *v24;
            *float v24 = v29;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, v11 + 4, (long long *)a2 - 1);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)v11, v11 + 4, (uint64_t)(v11 + 8), (uint64_t)(a2 - 4));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)v11, v11 + 4, (uint64_t)(v11 + 8), (uint64_t)(v11 + 12), (uint64_t)(a2 - 4));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = &v11[4 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, &v11[4 * (v15 >> 1)], (long long *)a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11 + 1, v17 - 4, (long long *)a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11 + 2, &v11[4 * v16 + 4], (long long *)a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v17 - 1, v17, (long long *)&v11[4 * v16 + 4]);
      uint64_t v28 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)uint64_t v17 = v28;
      if (a5) {
        goto LABEL_17;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[4 * (v15 >> 1)], v11, (long long *)a2 - 1);
      if (a5) {
        goto LABEL_17;
      }
    }
    float v18 = *(v11 - 4);
    if (v18 >= *v11)
    {
      if (v18 > *v11 || (uint64_t v19 = *(v11 - 3), v20 = v11[1], v19 >= v20) && (v19 > v20 || *(v11 - 1) >= v11[3]))
      {
        uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &>(v11, (unint64_t)a2);
        goto LABEL_22;
      }
    }
LABEL_17:
    float v21 = (long long *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &>(v11, (unint64_t)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_20;
    }
    int32x2_t v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)v11, v21);
    uint64_t v11 = (int *)(v21 + 1);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)(v21 + 1), (long long *)a2))
    {
      a4 = -v13;
      a2 = (int *)v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_20:
      std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(a1, v21, a3, -v13, a5 & 1);
      uint64_t v11 = (int *)(v21 + 1);
LABEL_22:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, a2);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    float v15 = (uint64_t)((uint64_t)a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*(a2 - 3) < *(_DWORD *)(v11 + 4))
          {
            unint64_t v22 = *(_OWORD *)v11;
            *(_OWORD *)uint64_t v11 = *((_OWORD *)a2 - 1);
            *((_OWORD *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (long long *)(v11 + 16), (long long *)a2 - 1);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, v11 + 16, v11 + 32, (uint64_t)(a2 - 4));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__n128 *)v11, (__n128 *)(v11 + 16), (__n128 *)(v11 + 32), (__n128 *)(v11 + 48), (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if ((int *)v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((int *)v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (long long *)(v11 + 16 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (long long *)(v11 + 16 * (v15 >> 1)), (long long *)a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)(v11 + 16), v17 - 1, (long long *)a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)(v11 + 32), (long long *)(v11 + 16 + 16 * v16), (long long *)a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v17 - 1, v17, (long long *)(v11 + 16 + 16 * v16));
      float v21 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *v17;
      *uint64_t v17 = v21;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)(v11 + 16 * (v15 >> 1)), (long long *)v11, (long long *)a2 - 1);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(_DWORD *)(v11 - 12) >= *(_DWORD *)(v11 + 4))
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((int *)v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    float v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((int *)v11, a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, v18);
    uint64_t v11 = v18 + 16;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v18 + 16, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (int *)v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(a1, v18, a3, -v13, a5 & 1);
      uint64_t v11 = v18 + 16;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((_DWORD *)v11, a2);
  }
}

  unint64_t v129 = a2 - 2;
  unint64_t v10 = (char *)a1;
  while (1)
  {
    a1 = (unint64_t)v10;
    uint64_t v11 = (char *)a2 - v10;
    uint64_t v12 = ((char *)a2 - v10) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return;
        case 2:
          float v50 = *(a2 - 2);
          uint64_t v51 = *(double **)a1;
          if (*v50 > **(double **)a1)
          {
            *(void *)a1 = v50;
            *(a2 - 2) = v51;
            uint64_t v52 = *(double **)(a1 + 8);
            *(void *)(a1 + 8) = *(a2 - 1);
            *(a2 - 1) = v52;
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), v129);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), (double **)(a1 + 32), v129);
          break;
        case 5:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), (double **)(a1 + 32), (double **)(a1 + 48));
          uint64_t v53 = *(a2 - 2);
          unint64_t v54 = *(double **)(a1 + 48);
          if (*v53 > *v54)
          {
            *(void *)(a1 + 48) = v53;
            *(a2 - 2) = v54;
            int v55 = *(double **)(a1 + 56);
            *(void *)(a1 + 56) = *(a2 - 1);
            *(a2 - 1) = v55;
            BOOL v56 = *(double **)(a1 + 48);
            uint64_t v57 = *v56;
            unint64_t v58 = *(double **)(a1 + 32);
            if (*v56 > *v58)
            {
              unint64_t v59 = *(void *)(a1 + 40);
              float v60 = *(void *)(a1 + 56);
              *(void *)(a1 + 32) = v56;
              *(void *)(a1 + 40) = v60;
              *(void *)(a1 + 48) = v58;
              *(void *)(a1 + 56) = v59;
              float v61 = *(double **)(a1 + 16);
              if (v57 > *v61)
              {
                uint64_t v62 = *(void *)(a1 + 24);
                *(void *)(a1 + 16) = v56;
                *(void *)(a1 + 24) = v60;
                *(void *)(a1 + 32) = v61;
                *(void *)(a1 + 40) = v62;
                uint64_t v63 = *(double **)a1;
                if (v57 > **(double **)a1)
                {
                  uint64_t v64 = *(void *)(a1 + 8);
                  *(void *)a1 = v56;
                  *(void *)(a1 + 8) = v60;
                  *(void *)(a1 + 16) = v63;
                  *(void *)(a1 + 24) = v64;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if ((double **)a1 == a2) {
        return;
      }
      unint64_t v80 = (unint64_t)(v12 - 2) >> 1;
      uint64_t v81 = v80;
      do
      {
        uint64_t v82 = v81;
        if (v80 >= v81)
        {
          float v83 = (2 * v81) | 1;
          uint64_t v84 = a1 + 16 * v83;
          if (2 * v82 + 2 < v12 && **(double **)v84 > **(double **)(v84 + 16))
          {
            v84 += 16;
            float v83 = 2 * v82 + 2;
          }
          uint64_t v85 = (double **)(a1 + 16 * v82);
          uint64_t v86 = *v85;
          if (**(double **)v84 <= **v85)
          {
            unint64_t v87 = *(double **)(a1 + 16 * v82 + 8);
            *uint64_t v85 = 0;
            v85[1] = 0;
            uint64_t v88 = *(double **)v84;
            do
            {
              uint64_t v89 = (double **)v84;
              uint64_t v90 = *(double **)(v84 + 8);
              uint64_t *v89 = 0;
              v89[1] = 0;
              v91 = (std::__shared_weak_count *)v85[1];
              *uint64_t v85 = v88;
              v85[1] = v90;
              if (v91) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v91);
              }
              if (v80 < v83) {
                break;
              }
              unint64_t v92 = 2 * v83;
              float v83 = (2 * v83) | 1;
              uint64_t v84 = a1 + 16 * v83;
              unint64_t v93 = v92 + 2;
              if (v93 < v12 && **(double **)v84 > **(double **)(v84 + 16))
              {
                v84 += 16;
                float v83 = v93;
              }
              uint64_t v88 = *(double **)v84;
              uint64_t v85 = v89;
            }
            while (**(double **)v84 <= *v86);
            uint64_t v94 = (std::__shared_weak_count *)v89[1];
            uint64_t *v89 = v86;
            v89[1] = v87;
            if (v94) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v94);
            }
          }
        }
        uint64_t v81 = v82 - 1;
      }
      while (v82);
      unint64_t v95 = (unint64_t)v11 >> 4;
      while (2)
      {
        unint64_t v96 = 0;
        float v97 = a2;
        float v99 = *(double **)a1;
        uint64_t v98 = *(double **)(a1 + 8);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        v100 = a1;
        do
        {
          uint64_t v101 = v100 + 16 * v96 + 16;
          unsigned __int8 v102 = 2 * v96;
          unint64_t v96 = (2 * v96) | 1;
          v103 = v102 + 2;
          if (v103 < v95 && **(double **)v101 > **(double **)(v101 + 16))
          {
            v101 += 16;
            unint64_t v96 = v103;
          }
          v104 = *(_OWORD *)v101;
          *(void *)uint64_t v101 = 0;
          *(void *)(v101 + 8) = 0;
          v105 = *(std::__shared_weak_count **)(v100 + 8);
          *(_OWORD *)v100 = v104;
          if (v105) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v105);
          }
          v100 = v101;
        }
        while (v96 <= (uint64_t)((unint64_t)(v95 - 2) >> 1));
        a2 -= 2;
        if ((double **)v101 == v97 - 2)
        {
          long long v118 = *(std::__shared_weak_count **)(v101 + 8);
          *(void *)uint64_t v101 = v99;
          *(void *)(v101 + 8) = v98;
          if (!v118) {
            goto LABEL_136;
          }
        }
        else
        {
          unint64_t v106 = *((_OWORD *)v97 - 1);
          *a2 = 0;
          *(v97 - 1) = 0;
          float v107 = *(std::__shared_weak_count **)(v101 + 8);
          *(_OWORD *)uint64_t v101 = v106;
          if (v107) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v107);
          }
          float v108 = (std::__shared_weak_count *)*(v97 - 1);
          *(v97 - 2) = v99;
          *(v97 - 1) = v98;
          if (v108) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v108);
          }
          unint64_t v109 = v101 + 16 - a1;
          if (v109 < 17) {
            goto LABEL_136;
          }
          unint64_t v110 = (((unint64_t)v109 >> 4) - 2) >> 1;
          int32x2_t v111 = a1 + 16 * v110;
          long long v112 = *(double **)v101;
          if (**(double **)v111 <= **(double **)v101) {
            goto LABEL_136;
          }
          long long v113 = *(double **)(v101 + 8);
          *(void *)uint64_t v101 = 0;
          *(void *)(v101 + 8) = 0;
          long long v114 = *(double **)v111;
          do
          {
            long long v115 = (double **)v111;
            __n128 v116 = *(void *)(v111 + 8);
            *long long v115 = 0;
            v115[1] = 0;
            long long v117 = *(std::__shared_weak_count **)(v101 + 8);
            *(void *)uint64_t v101 = v114;
            *(void *)(v101 + 8) = v116;
            if (v117) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v117);
            }
            if (!v110) {
              break;
            }
            unint64_t v110 = (v110 - 1) >> 1;
            int32x2_t v111 = a1 + 16 * v110;
            long long v114 = *(double **)v111;
            uint64_t v101 = (uint64_t)v115;
          }
          while (**(double **)v111 > *v112);
          long long v118 = (std::__shared_weak_count *)v115[1];
          *long long v115 = v112;
          v115[1] = v113;
          if (!v118)
          {
LABEL_136:
            if (v95-- <= 2) {
              return;
            }
            continue;
          }
        }
        break;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v118);
      goto LABEL_136;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = (double **)(a1 + 16 * ((unint64_t)v12 >> 1));
    if ((unint64_t)v11 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(v14, (double **)a1, v129);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, v14, v129);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)(a1 + 16), v14 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)(a1 + 32), (double **)(a1 + 16 + 16 * v13), a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(v14 - 2, v14, (double **)(a1 + 16 + 16 * v13));
      float v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v14;
      *(_OWORD *)uint64_t v14 = v15;
    }
    --a3;
    long long v16 = *(double **)a1;
    if ((a4 & 1) != 0 || **(double **)(a1 - 16) > *v16)
    {
      uint64_t v17 = 0;
      float v18 = *(void *)(a1 + 8);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v19 = *v16;
      do
      {
        uint64_t v20 = *(double **)(a1 + v17 + 16);
        v17 += 16;
      }
      while (*v20 > v19);
      float v21 = a1 + v17;
      unint64_t v22 = a2;
      if (v17 == 16)
      {
        unint64_t v22 = a2;
        do
        {
          if (v21 >= (unint64_t)v22) {
            break;
          }
          float v24 = *(v22 - 2);
          v22 -= 2;
        }
        while (*v24 <= v19);
      }
      else
      {
        do
        {
          int32x2_t v23 = *(v22 - 2);
          v22 -= 2;
        }
        while (*v23 <= v19);
      }
      if (v21 >= (unint64_t)v22)
      {
        unint64_t v10 = (char *)(a1 + v17);
      }
      else
      {
        float v25 = *v22;
        unint64_t v10 = (char *)(a1 + v17);
        float v26 = v22;
        do
        {
          *(void *)unint64_t v10 = v25;
          char *v26 = v20;
          int32x2_t v27 = (double *)*((void *)v10 + 1);
          *((void *)v10 + 1) = v26[1];
          v26[1] = v27;
          do
          {
            uint64_t v28 = (double *)*((void *)v10 + 2);
            v10 += 16;
            uint64_t v20 = v28;
          }
          while (*v28 > v19);
          do
          {
            uint64_t v29 = *(v26 - 2);
            v26 -= 2;
            float v25 = v29;
          }
          while (*v29 <= v19);
        }
        while (v10 < (char *)v26);
      }
      uint64_t v30 = v10 - 16;
      if (v10 - 16 != (char *)a1)
      {
        float v31 = *(_OWORD *)v30;
        *(void *)uint64_t v30 = 0;
        *((void *)v10 - 1) = 0;
        float v32 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v31;
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
      }
      unint64_t v33 = (std::__shared_weak_count *)*((void *)v10 - 1);
      *((void *)v10 - 2) = v16;
      *((void *)v10 - 1) = v18;
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (v21 < (unint64_t)v22) {
        goto LABEL_35;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(a1, (double **)v10 - 2);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((uint64_t)v10, a2))
      {
        a2 = (double **)(v10 - 16);
        if (v34) {
          return;
        }
        goto LABEL_1;
      }
      if (!v34)
      {
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      long long v35 = *(void *)(a1 + 8);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v36 = *v16;
      if (*v16 <= **v129)
      {
        unint64_t v38 = (char *)(a1 + 16);
        do
        {
          unint64_t v10 = v38;
          if (v38 >= (char *)a2) {
            break;
          }
          v38 += 16;
        }
        while (v36 <= **(double **)v10);
      }
      else
      {
        unint64_t v10 = (char *)a1;
        do
        {
          float v37 = (double *)*((void *)v10 + 2);
          v10 += 16;
        }
        while (v36 <= *v37);
      }
      unint64_t v39 = a2;
      if (v10 < (char *)a2)
      {
        unint64_t v39 = a2;
        do
        {
          float v40 = *(v39 - 2);
          v39 -= 2;
        }
        while (v36 > *v40);
      }
      if (v10 < (char *)v39)
      {
        float v41 = *(double **)v10;
        float v42 = *v39;
        do
        {
          *(void *)unint64_t v10 = v42;
          *unint64_t v39 = v41;
          uint64_t v43 = (double *)*((void *)v10 + 1);
          *((void *)v10 + 1) = v39[1];
          v39[1] = v43;
          do
          {
            uint64_t v44 = (double *)*((void *)v10 + 2);
            v10 += 16;
            float v41 = v44;
          }
          while (v36 <= *v44);
          do
          {
            uint64_t v45 = *(v39 - 2);
            v39 -= 2;
            float v42 = v45;
          }
          while (v36 > *v45);
        }
        while (v10 < (char *)v39);
      }
      float v46 = v10 - 16;
      BOOL v4 = (unint64_t)(v10 - 16) >= a1;
      BOOL v5 = v10 - 16 == (char *)a1;
      if (v10 - 16 != (char *)a1)
      {
        float v47 = *(_OWORD *)v46;
        *(void *)float v46 = 0;
        *((void *)v10 - 1) = 0;
        int64_t v48 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v47;
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
      }
      a4 = 0;
      float v49 = (std::__shared_weak_count *)*((void *)v10 - 1);
      *((void *)v10 - 2) = v16;
      *((void *)v10 - 1) = v35;
      if (v49)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        a4 = 0;
      }
    }
  }
  uint64_t v65 = (double **)(a1 + 16);
  int64_t v67 = (double **)a1 == a2 || v65 == a2;
  if (a4)
  {
    if (!v67)
    {
      int64_t v68 = 0;
      int64_t v69 = (double **)a1;
      do
      {
        uint64_t v70 = v69;
        int64_t v69 = v65;
        unint64_t v71 = v70[2];
        unint64_t v72 = *v70;
        if (*v71 > **v70)
        {
          float v73 = v70[3];
          unint64_t v74 = v68;
          void *v69 = 0;
          v69[1] = 0;
          while (1)
          {
            uint64_t v75 = (void *)(a1 + v74);
            float v76 = *(void *)(a1 + v74 + 8);
            void *v75 = 0;
            v75[1] = 0;
            uint64_t v77 = *(std::__shared_weak_count **)(a1 + v74 + 24);
            v75[2] = v72;
            v75[3] = v76;
            if (v77) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v77);
            }
            if (!v74) {
              break;
            }
            unint64_t v72 = *(double **)(a1 + v74 - 16);
            v74 -= 16;
            if (*v71 <= *v72)
            {
              uint64_t v78 = (void *)(a1 + v74 + 16);
              goto LABEL_90;
            }
          }
          uint64_t v78 = (void *)a1;
LABEL_90:
          uint64_t v79 = (std::__shared_weak_count *)v78[1];
          *uint64_t v78 = v71;
          v78[1] = v73;
          if (v79) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v79);
          }
        }
        uint64_t v65 = v69 + 2;
        v68 += 16;
      }
      while (v69 + 2 != a2);
    }
  }
  else if (!v67)
  {
    int32x2_t v120 = (std::__shared_weak_count **)(a1 + 24);
    do
    {
      long long v121 = a1;
      a1 = (unint64_t)v65;
      long long v122 = *(double **)(v121 + 16);
      char v123 = *(double **)v121;
      if (*v122 > **(double **)v121)
      {
        int32x2_t v124 = *(std::__shared_weak_count **)(v121 + 24);
        long long v125 = v120;
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        do
        {
          long long v126 = *(v125 - 2);
          *(v125 - 3) = 0;
          *(v125 - 2) = 0;
          char v127 = *v125;
          *(v125 - 1) = (std::__shared_weak_count *)v123;
          *long long v125 = v126;
          if (v127) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v127);
          }
          char v123 = (double *)*(v125 - 5);
          v125 -= 2;
        }
        while (*v122 > *v123);
        long long v128 = *v125;
        *(v125 - 1) = (std::__shared_weak_count *)v122;
        *long long v125 = v124;
        if (v128) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v128);
        }
      }
      uint64_t v65 = (double **)(a1 + 16);
      v120 += 2;
    }
    while ((double **)(a1 + 16) != a2);
  }
}

  unint64_t v10 = (uint64_t *)((char *)a2 - 20);
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v11) >> 2);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v25 = *(uint64_t *)((char *)a2 - 20);
          float v26 = *v11;
          if ((int)v25 < (int)*v11)
          {
            int32x2_t v27 = *((_DWORD *)v11 + 4);
            std::regex_traits<char> *v11 = v25;
            uint64_t v28 = *(uint64_t *)((char *)a2 - 12);
            *((_DWORD *)v11 + 4) = *((_DWORD *)a2 - 1);
            uint64_t v29 = v11[1];
            v11[1] = v28;
            *(uint64_t *)((char *)a2 - 20) = v26;
            *(uint64_t *)((char *)a2 - 12) = v29;
            *((_DWORD *)a2 - 1) = v27;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11, (uint64_t *)((char *)v11 + 20), v10);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, (uint64_t)v11 + 20, (uint64_t)(v11 + 5), (uint64_t)v10);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, (uint64_t)v11 + 20, (uint64_t)(v11 + 5), (uint64_t)v11 + 60, (uint64_t)v10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 479) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (uint64_t *)((char *)v11 + 20 * (v15 >> 1));
    if ((unint64_t)v14 >= 0xA01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11, (uint64_t *)((char *)v11 + 20 * (v15 >> 1)), v10);
      float v18 = (char *)v11 + 20 * v16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v11 + 20), (uint64_t *)(v18 - 20), a2 - 5);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11 + 5, (uint64_t *)((char *)v11 + 20 * v16 + 20), (uint64_t *)((char *)a2 - 60));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)(v18 - 20), v17, (uint64_t *)((char *)v11 + 20 * v16 + 20));
      uint64_t v19 = *v11;
      uint64_t v20 = *((_DWORD *)v11 + 4);
      std::regex_traits<char> *v11 = *v17;
      *((_DWORD *)v11 + 4) = *((_DWORD *)v18 + 4);
      *uint64_t v17 = v19;
      float v21 = v11[1];
      v11[1] = *((void *)v18 + 1);
      *((void *)v18 + 1) = v21;
      *((_DWORD *)v18 + 4) = v20;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v11 + 20 * (v15 >> 1)), v11, v10);
    }
    if ((a5 & 1) == 0 && *((_DWORD *)v11 - 5) >= *(_DWORD *)v11)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(v11, a2);
      goto LABEL_17;
    }
    unint64_t v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(v11, a2);
    if ((v23 & 1) == 0) {
      goto LABEL_15;
    }
    float v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>*>((uint64_t)v11, v22);
    uint64_t v11 = (uint64_t *)(v22 + 20);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>*>(v22 + 20, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (uint64_t *)v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_15:
      std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>*,false>(a1, v22, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t *)(v22 + 20);
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, (uint64_t)a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11, a2);
  }
}

  unint64_t v10 = (uint64_t *)((char *)a2 - 20);
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v11) >> 2);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v28 = *((_DWORD *)a2 - 5);
          if (v28 < *(_DWORD *)v11
            || v28 <= *(_DWORD *)v11
            && ((v29 = *((_DWORD *)a2 - 4), uint64_t v30 = *((_DWORD *)v11 + 1), v29 < v30)
             || v29 <= v30 && *((_DWORD *)a2 - 1) < *((_DWORD *)v11 + 4)))
          {
            float v31 = *v11;
            float v32 = *((_DWORD *)v11 + 4);
            std::regex_traits<char> *v11 = *(uint64_t *)((char *)a2 - 20);
            unint64_t v33 = *(uint64_t *)((char *)a2 - 12);
            *((_DWORD *)v11 + 4) = *((_DWORD *)a2 - 1);
            BOOL v34 = v11[1];
            v11[1] = v33;
            *(uint64_t *)((char *)a2 - 20) = v31;
            *(uint64_t *)((char *)a2 - 12) = v34;
            *((_DWORD *)a2 - 1) = v32;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11, (int *)v11 + 5, v10);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, (uint64_t *)((char *)v11 + 20), v11 + 5, v10);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, (uint64_t)v11 + 20, (uint64_t)(v11 + 5), (uint64_t)v11 + 60, (uint64_t)v10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 479) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (int *)v11 + 5 * (v15 >> 1);
    if ((unint64_t)v14 >= 0xA01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11, (int *)v11 + 5 * (v15 >> 1), v10);
      float v18 = (int *)v11 + 5 * v16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v11 + 20), v18 - 5, a2 - 5);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11 + 5, (int *)v11 + 5 * v16 + 5, (uint64_t *)((char *)a2 - 60));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)(v18 - 5), v17, (uint64_t *)((char *)v11 + 20 * v16 + 20));
      uint64_t v19 = *v11;
      uint64_t v20 = *((_DWORD *)v11 + 4);
      std::regex_traits<char> *v11 = *(void *)v17;
      *((_DWORD *)v11 + 4) = v18[4];
      *(void *)uint64_t v17 = v19;
      float v21 = v11[1];
      v11[1] = *((void *)v18 + 1);
      *((void *)v18 + 1) = v21;
      v18[4] = v20;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v11 + 20 * (v15 >> 1)), (int *)v11, v10);
    }
    if ((a5 & 1) == 0)
    {
      unint64_t v22 = *((_DWORD *)v11 - 5);
      if (v22 >= *(_DWORD *)v11)
      {
        if (v22 > *(_DWORD *)v11
          || (v23 = *((_DWORD *)v11 - 4), float v24 = *((_DWORD *)v11 + 1), v23 >= v24)
          && (v23 > v24 || *((_DWORD *)v11 - 1) >= *((_DWORD *)v11 + 4)))
        {
          uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &>(v11, (unint64_t)a2);
          goto LABEL_21;
        }
      }
    }
    float v25 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &>(v11, (unint64_t)a2);
    if ((v26 & 1) == 0) {
      goto LABEL_19;
    }
    int32x2_t v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, v25);
    uint64_t v11 = (uint64_t *)(v25 + 20);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v25 + 20, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (uint64_t *)v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v27)
    {
LABEL_19:
      std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(a1, v25, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t *)(v25 + 20);
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v11, (uint64_t)a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v11, a2);
  }
}

  unint64_t v10 = (uint64_t)(a2 - 6);
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    float v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v11) >> 4);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v10, (const void **)v11))
          {
            long long v35 = *(void *)(v11 + 16);
            unint64_t v33 = *(_OWORD *)v11;
            int32x2_t v27 = *(_OWORD *)v10;
            *(void *)(v11 + 16) = *(void *)(v10 + 16);
            *(_OWORD *)uint64_t v11 = v27;
            *(_OWORD *)unint64_t v10 = v33;
            *(void *)(v10 + 16) = v35;
            uint64_t v28 = *(const void **)(v11 + 40);
            uint64_t v29 = *(_OWORD *)(v11 + 24);
            uint64_t v30 = (uint64_t)*(a2 - 1);
            *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 - 3);
            *(void *)(v11 + 40) = v30;
            *(_OWORD *)(a2 - 3) = v29;
            *(a2 - 1) = v28;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((long long *)v11, (long long *)(v11 + 48), (long long *)v10, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(v11, v11 + 48, v11 + 96, v10, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(v11, v11 + 48, v11 + 96, v11 + 144, v10, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 1151) {
      break;
    }
    if (v13 == 1)
    {
      if ((const void **)v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = v11 + 48 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x1801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((long long *)v11, (long long *)(v11 + 48 * (v15 >> 1)), (long long *)v10, a3);
      float v18 = v10;
      uint64_t v19 = v11 + 48 * v16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((long long *)(v11 + 48), (long long *)(v19 - 48), (long long *)a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((long long *)(v11 + 96), (long long *)(v11 + 48 + 48 * v16), (long long *)a2 - 9, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((long long *)(v19 - 48), (long long *)v17, (long long *)(v11 + 48 + 48 * v16), a3);
      BOOL v34 = *(void *)(v11 + 16);
      float v32 = *(_OWORD *)v11;
      uint64_t v20 = *(_OWORD *)v17;
      *(void *)(v11 + 16) = *(void *)(v17 + 16);
      *(_OWORD *)uint64_t v11 = v20;
      *(void *)(v17 + 16) = v34;
      *(_OWORD *)uint64_t v17 = v32;
      float v21 = *(_OWORD *)(v11 + 24);
      unint64_t v22 = *(void *)(v11 + 40);
      int32x2_t v23 = *(void *)(v19 + 40);
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v19 + 24);
      *(void *)(v11 + 40) = v23;
      *(void *)(v19 + 40) = v22;
      *(_OWORD *)(v19 + 24) = v21;
      unint64_t v10 = v18;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((long long *)(v11 + 48 * (v15 >> 1)), (long long *)v11, (long long *)v10, a3);
    }
    if ((a5 & 1) == 0
      && (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)(v11 - 48), (const void **)v11) & 1) == 0)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string,std::string> *,std::__less<void,void> &>(v11, (unint64_t)a2, a3);
      goto LABEL_17;
    }
    float v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string,std::string> *,std::__less<void,void> &>(v11, a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_15;
    }
    float v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(v11, (uint64_t)v24, a3);
    uint64_t v11 = (unint64_t)(v24 + 3);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((uint64_t)(v24 + 3), (uint64_t)a2, a3))
    {
      a4 = -v13;
      a2 = (const void **)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v26)
    {
LABEL_15:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *,false>(a1, v24, a3, -v13, a5 & 1);
      uint64_t v11 = (unint64_t)(v24 + 3);
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(v11, a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((const void **)v11, a2, a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = ((char *)a2 - (char *)v11) >> 5;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v24 = *(a2 - 8);
          float v25 = *v11;
          if (v24 < *v11 || v24 <= v25 && *(a2 - 6) < v11[2])
          {
            std::regex_traits<char> *v11 = v24;
            *(a2 - 8) = v25;
            uint64_t v28 = *(_OWORD *)(v11 + 2);
            float v26 = *((void *)v11 + 3);
            *(_OWORD *)(v11 + 2) = *(_OWORD *)(a2 - 6);
            *((void *)v11 + 3) = *((void *)a2 - 1);
            *(_OWORD *)(a2 - 6) = v28;
            *((void *)a2 - 1) = v26;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v11, v11 + 8, a2 - 8);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v11, (uint64_t)(v11 + 8), (uint64_t)(v11 + 16), (uint64_t)(a2 - 8));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v11, (uint64_t)(v11 + 8), (uint64_t)(v11 + 16), (uint64_t)(v11 + 24), a2 - 8);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 767) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = &v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v11, &v11[8 * (v15 >> 1)], a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v11 + 8, v17 - 8, a2 - 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v11 + 16, &v11[8 * v16 + 8], a2 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v17 - 8, v17, &v11[8 * v16 + 8]);
      float v18 = *v11;
      std::regex_traits<char> *v11 = *v17;
      *uint64_t v17 = v18;
      int32x2_t v27 = *(_OWORD *)(v11 + 2);
      *(_OWORD *)(v11 + 2) = *(_OWORD *)(v17 + 2);
      *(_OWORD *)(v17 + 2) = v27;
      uint64_t v19 = *((void *)v11 + 3);
      *((void *)v11 + 3) = *((void *)v17 + 3);
      *((void *)v17 + 3) = v19;
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(&v11[8 * (v15 >> 1)], v11, a2 - 8);
      if (a5) {
        goto LABEL_15;
      }
    }
    uint64_t v20 = *(v11 - 8);
    if (v20 >= *v11 && (v20 > *v11 || *(v11 - 6) >= v11[2]))
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &>(v11, a2);
      goto LABEL_20;
    }
LABEL_15:
    float v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &>(v11, a2);
    if ((v22 & 1) == 0) {
      goto LABEL_18;
    }
    int32x2_t v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v11, v21);
    uint64_t v11 = (int *)(v21 + 32);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v21 + 32, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (int *)v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_18:
      std::__introsort<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,false>(a1, v21, a3, -v13, a5 & 1);
      uint64_t v11 = (int *)(v21 + 32);
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v11, (uint64_t)a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v11, a2);
  }
}

  uint64_t v11 = (long long *)((char *)a2 - 24);
  uint64_t v12 = (const void **)a1;
LABEL_2:
  unint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    float v15 = (char *)a2 - (char *)v12;
    long long v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)a2 - 3, v12))
          {
            float v31 = v12[2];
            uint64_t v29 = *(_OWORD *)v12;
            int32x2_t v27 = *v11;
            v12[2] = (const void *)*((void *)a2 - 1);
            *(_OWORD *)uint64_t v12 = v27;
            std::regex_traits<char> *v11 = v29;
            *((void *)a2 - 1) = v31;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, v12 + 3, (const void **)a2 - 3, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, v12 + 3, v12 + 6, (long long *)((char *)a2 - 24), a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, v12 + 3, v12 + 6, (long long *)(v12 + 9), (long long *)((char *)a2 - 24), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (const void **)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    uint64_t v17 = v16 >> 1;
    float v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, &v12[3 * (v16 >> 1)], (const void **)a2 - 3, a3);
      uint64_t v19 = 3 * v17;
      uint64_t v20 = &v12[3 * v17 - 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12 + 3, v20, (const void **)a2 - 6, a3);
      float v21 = v12 + 6;
      unint64_t v22 = &v12[v19 + 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v21, v22, (const void **)a2 - 9, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v20, v18, v22, a3);
      uint64_t v30 = *(const void **)(a1 + 16);
      uint64_t v28 = *(_OWORD *)a1;
      int32x2_t v23 = *(_OWORD *)v18;
      *(void *)(a1 + 16) = v18[2];
      *(_OWORD *)a1 = v23;
      v18[2] = v30;
      *(_OWORD *)float v18 = v28;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&v12[3 * (v16 >> 1)], v12, (const void **)a2 - 3, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a1 - 24), (const void **)a1))
    {
      uint64_t v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((const void **)a1, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    float v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((long long *)a1, (const void **)a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    float v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v24, a3);
    uint64_t v12 = (const void **)(v24 + 24);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v24 + 24, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    unint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v24, a3, -v14, a5 & 1);
      uint64_t v12 = (const void **)(v24 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, (const void **)a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, (const void **)a2, a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    float v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v11) >> 4);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*(float *)(v11 + 24) < *((float *)a2 - 14))
          {
            std::swap[abi:ne180100]<quasar::Alternative>((long long *)v11, a2 - 5);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v11, v11 + 80, (uint64_t)(a2 - 5));
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v11, v11 + 80, v11 + 160, (uint64_t)(a2 - 5));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v11, v11 + 80, v11 + 160, v11 + 240, (uint64_t)(a2 - 5));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 1919) {
      break;
    }
    if (v13 == 1)
    {
      if ((long long *)v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *,quasar::Alternative *>(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (long long *)(v11 + 80 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x2801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v11, v11 + 80 * (v15 >> 1), (uint64_t)(a2 - 5));
      float v18 = 5 * v16;
      uint64_t v19 = v11 + 80 * v16 - 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v11 + 80, v19, (uint64_t)(a2 - 10));
      uint64_t v20 = v11 + 160;
      float v21 = v11 + 80 + 16 * v18;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v20, v21, (uint64_t)(a2 - 15));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v19, (uint64_t)v17, v21);
      std::swap[abi:ne180100]<quasar::Alternative>((long long *)a1, v17);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v11 + 80 * (v15 >> 1), v11, (uint64_t)(a2 - 5));
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(float *)(a1 + 24) >= *(float *)(a1 - 56))
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Alternative *,std::__less<void,void> &>(a1, a2);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Alternative *,std::__less<void,void> &>(a1, a2);
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    float v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, v22);
    uint64_t v11 = v22 + 80;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v22 + 80, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (long long *)v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *,false>(a1, v22, a3, -v13, a5 & 1);
      uint64_t v11 = v22 + 80;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v11, (uint64_t)a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v11, (uint64_t)a2);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    float v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v11) >> 4);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v26 = *((_DWORD *)a2 - 12);
          if (v26 < *(_DWORD *)v11 || v26 <= *(_DWORD *)v11 && *((_DWORD *)a2 - 2) < *(_DWORD *)(v11 + 40))
          {
            std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)v11, a2 - 6);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v11, (uint64_t *)(v11 + 48), (uint64_t)(a2 - 6));
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v11, v11 + 48, v11 + 96, (uint64_t)(a2 - 6));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v11, v11 + 48, v11 + 96, v11 + 144, (uint64_t)(a2 - 6));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 1151) {
      break;
    }
    if (v13 == 1)
    {
      if ((void *)v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (uint64_t *)(v11 + 48 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x1801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v11, (uint64_t *)(v11 + 48 * (v15 >> 1)), (uint64_t)(a2 - 6));
      float v18 = 3 * v16;
      uint64_t v19 = (uint64_t *)(v11 + 48 * v16 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v11 + 48, v19, (uint64_t)(a2 - 12));
      uint64_t v20 = v11 + 96;
      float v21 = (uint64_t *)(v11 + 48 + 16 * v18);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v20, v21, (uint64_t)(a2 - 18));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>((uint64_t)v19, v17, (uint64_t)v21);
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, v17);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v11 + 48 * (v15 >> 1), (uint64_t *)v11, (uint64_t)(a2 - 6));
      if (a5) {
        goto LABEL_15;
      }
    }
    unint64_t v22 = *(_DWORD *)(a1 - 48);
    if (v22 >= *(_DWORD *)a1 && (v22 > *(_DWORD *)a1 || *(_DWORD *)(a1 - 8) >= *(_DWORD *)(a1 + 40)))
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &>((uint64_t *)a1, (unint64_t)a2);
      goto LABEL_20;
    }
LABEL_15:
    int32x2_t v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &>((uint64_t *)a1, (unint64_t)a2);
    if ((v24 & 1) == 0) {
      goto LABEL_18;
    }
    float v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, v23);
    uint64_t v11 = v23 + 48;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v23 + 48, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (void *)v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v25)
    {
LABEL_18:
      std::__introsort<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,false>(a1, v23, a3, -v13, a5 & 1);
      uint64_t v11 = v23 + 48;
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>((void *)v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>((void *)v11, a2);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    float v15 = (uint64_t)((uint64_t)a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*(a2 - 3) < *(_DWORD *)(v11 + 4))
          {
            unint64_t v22 = *(_OWORD *)v11;
            *(_OWORD *)uint64_t v11 = *((_OWORD *)a2 - 1);
            *((_OWORD *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (long long *)(v11 + 16), (long long *)a2 - 1);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, v11 + 16, v11 + 32, (uint64_t)(a2 - 4));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__n128 *)v11, (__n128 *)(v11 + 16), (__n128 *)(v11 + 32), (__n128 *)(v11 + 48), (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if ((int *)v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((int *)v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (long long *)(v11 + 16 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (long long *)(v11 + 16 * (v15 >> 1)), (long long *)a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)(v11 + 16), v17 - 1, (long long *)a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)(v11 + 32), (long long *)(v11 + 16 + 16 * v16), (long long *)a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v17 - 1, v17, (long long *)(v11 + 16 + 16 * v16));
      float v21 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *v17;
      *uint64_t v17 = v21;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)(v11 + 16 * (v15 >> 1)), (long long *)v11, (long long *)a2 - 1);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(_DWORD *)(v11 - 12) >= *(_DWORD *)(v11 + 4))
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((int *)v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    float v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((int *)v11, a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>(v11, v18);
    uint64_t v11 = v18 + 16;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>(v18 + 16, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (int *)v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(a1, v18, a3, -v13, a5 & 1);
      uint64_t v11 = v18 + 16;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((_DWORD *)v11, a2);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v22 = *((_DWORD *)a2 - 4);
          float v21 = a2 - 1;
          if (v22 < (signed __int32)v11->n128_u32[0])
          {
            uint64_t v30 = (__int128)*v11;
            std::regex_traits<char> *v11 = (__n128)*v21;
            *float v21 = v30;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[1], (int *)a2 - 4);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[1], (int *)&v11[2], a2 - 1);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[1], (int *)&v11[2], v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (__n128 *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (int *)&v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[v15 >> 1], (int *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[1], v17 - 4, (int *)a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[2], (int *)&v11[v16 + 1], (int *)a2 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v17 - 1, v17, (int *)&v11[v16 + 1]);
      uint64_t v29 = (__int128)*v11;
      std::regex_traits<char> *v11 = *(__n128 *)v17;
      *(_OWORD *)uint64_t v17 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[v15 >> 1], (int *)v11, (int *)a2 - 4);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((signed __int32)v11[-1].n128_u32[0] >= (signed __int32)v11->n128_u32[0])
    {
      uint64_t v11 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    float v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((long long *)v11, a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>((uint64_t)v11, (__n128 *)v18);
    uint64_t v11 = (__n128 *)(v18 + 1);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>((uint64_t)(v18 + 1), (__n128 *)a2))
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(a1, v18, a3, -v13, a5 & 1);
      uint64_t v11 = (__n128 *)(v18 + 1);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, a2);
  }
  else if (v11 != (__n128 *)a2)
  {
    int32x2_t v23 = (long long *)&v11[1];
    while (v23 != a2)
    {
      float v24 = v23;
      float v25 = a1[1].n128_i64[0];
      if ((int)v25 < (signed __int32)a1->n128_u32[0])
      {
        float v26 = a1[1].n128_i64[1];
        int32x2_t v27 = v24;
        do
        {
          *int32x2_t v27 = *(v27 - 1);
          uint64_t v28 = *((_DWORD *)v27-- - 8);
        }
        while ((int)v25 < v28);
        *(void *)int32x2_t v27 = v25;
        *((void *)v27 + 1) = v26;
      }
      int32x2_t v23 = v24 + 1;
      a1 = (__n128 *)v24;
    }
  }
}

  uint64_t v12 = a2 - 3;
  unint64_t v13 = a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = v13;
    float v15 = v14;
    long long v16 = (uint64_t)a2 - v13;
    uint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)(a2 - 3, (long long *)v13))
          {
            long long v35 = *(void *)(v13 + 16);
            unint64_t v33 = *(_OWORD *)v13;
            uint64_t v29 = *v12;
            *(void *)(v13 + 16) = *((void *)a2 - 4);
            *(_OWORD *)unint64_t v13 = v29;
            *uint64_t v12 = v33;
            *((void *)a2 - 4) = v35;
            uint64_t v30 = *(void *)(v13 + 24);
            *(void *)(v13 + 24) = *((void *)a2 - 3);
            *((void *)a2 - 3) = v30;
            float v31 = *(void *)(v13 + 32);
            *(void *)(v13 + 32) = *((void *)a2 - 2);
            *((void *)a2 - 2) = v31;
            LODWORD(v29) = *(_DWORD *)(v13 + 40);
            *(_DWORD *)(v13 + 40) = *((_DWORD *)a2 - 2);
            *((_DWORD *)a2 - 2) = v29;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 1151) {
      break;
    }
    if (v15 == 1)
    {
      if ((long long *)v13 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>(v13, (uint64_t)a2, (uint64_t)a2, (unsigned int (**)(uint64_t, uint64_t, float))a3, a6);
      }
      return;
    }
    float v18 = v17 >> 1;
    uint64_t v19 = v13 + 48 * (v17 >> 1);
    if ((unint64_t)v16 >= 0x1801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((long long *)v13, (long long *)(v13 + 48 * (v17 >> 1)), a2 - 3, a3);
      uint64_t v20 = 3 * v18;
      float v21 = (long long *)(v13 + 48 * v18 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((long long *)(v13 + 48), v21, a2 - 6, a3);
      unint64_t v22 = (long long *)(v13 + 96);
      int32x2_t v23 = (long long *)(v13 + 48 + 16 * v20);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v22, v23, a2 - 9, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v21, (long long *)v19, v23, a3);
      BOOL v34 = *(void *)(a1 + 16);
      float v32 = *(_OWORD *)a1;
      float v24 = *(_OWORD *)v19;
      *(void *)(a1 + 16) = *(void *)(v19 + 16);
      *(_OWORD *)a1 = v24;
      *(void *)(v19 + 16) = v34;
      *(_OWORD *)uint64_t v19 = v32;
      float v25 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v19 + 24);
      *(_OWORD *)(v19 + 24) = v25;
      LODWORD(v25) = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(v19 + 40);
      *(_DWORD *)(v19 + 40) = v25;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((long long *)(v13 + 48 * (v17 >> 1)), (long long *)v13, a2 - 3, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)((long long *)(a1 - 48), (long long *)a1) & 1) == 0)
    {
      unint64_t v13 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<std::string,long long,long long,float> *,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&)>(a1, (unint64_t)a2, (uint64_t (**)(void **, unint64_t))a3);
      goto LABEL_18;
    }
LABEL_13:
    float v26 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<std::string,long long,long long,float> *,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&)>(a1, (unint64_t)a2, (uint64_t (**)(uint64_t, void **))a3);
    if ((v27 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, v26, a3);
    unint64_t v13 = v26 + 48;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v26 + 48, (uint64_t)a2, a3))
    {
      a4 = -v15;
      a2 = (long long *)v26;
      if (v28) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if (!v28)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*,false>(a1, v26, a3, -v15, a5 & 1);
      unint64_t v13 = v26 + 48;
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v13, a2, (uint64_t (**)(long long *, uint64_t, float))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v13, (uint64_t)a2, (uint64_t (**)(long long *, uint64_t, float))a3);
  }
}

  uint64_t v11 = (char *)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    unint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    float v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v29, (_DWORD *)a2 - 6, v11))
          {
            uint64_t v28 = *(void *)v11;
            *(void *)uint64_t v11 = *((void *)a2 - 3);
            *((void *)a2 - 3) = v28;
            uint64_t v29 = *(_OWORD *)(v11 + 8);
            *(_OWORD *)(v11 + 8) = *((_OWORD *)a2 - 1);
            *((_OWORD *)a2 - 1) = v29;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)v11, (uint64_t *)v11 + 3, (uint64_t *)a2 - 3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t)v11, (uint64_t)(v11 + 24), (uint64_t)(v11 + 48), (uint64_t)(a2 - 24));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t)v11, (uint64_t)(v11 + 24), (uint64_t)(v11 + 48), (uint64_t)(v11 + 72), (uint64_t)(a2 - 24));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 575)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t)v11, a2);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t)v11, a2);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = &v11[24 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)v11, (uint64_t *)&v11[24 * (v15 >> 1)], (uint64_t *)a2 - 3);
      float v18 = 3 * v16;
      uint64_t v19 = (uint64_t *)&v11[24 * v16 - 24];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)v11 + 3, v19, (uint64_t *)a2 - 6);
      uint64_t v20 = (uint64_t *)(v11 + 48);
      float v21 = (uint64_t *)&v11[8 * v18 + 24];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(v20, v21, (uint64_t *)a2 - 9);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(v19, (uint64_t *)v17, v21);
      unint64_t v22 = *(void *)a1;
      *(void *)a1 = *(void *)v17;
      *(void *)uint64_t v17 = v22;
      uint64_t v29 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(v17 + 8);
      *(_OWORD *)(v17 + 8) = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)&v11[24 * (v15 >> 1)], (uint64_t *)v11, (uint64_t *)a2 - 3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v29, (_DWORD *)(a1 - 24), (_DWORD *)a1) & 1) == 0)
    {
      uint64_t v11 = (char *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<int,quasar::SegmentType,std::string_view> *,std::__less<void,void> &>(a1, (unint64_t)a2);
      goto LABEL_18;
    }
LABEL_13:
    v24.n128_f64[0] = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<int,quasar::SegmentType,std::string_view> *,std::__less<void,void> &>(a1, a2);
    float v25 = (char *)v23;
    if ((v26 & 1) == 0) {
      goto LABEL_16;
    }
    int32x2_t v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, v23);
    uint64_t v11 = v25 + 24;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t)(v25 + 24), (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v27)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *,false>(a1, v25, a3, -v13, a5 & 1, v24);
      uint64_t v11 = v25 + 24;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (v11 != a2) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t)v11, (uint64_t *)a2, (uint64_t *)a2, a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = ((char *)a2 - (char *)v11) >> 5;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v24 = *(a2 - 8);
          float v25 = *v11;
          if (v24 < *v11 || v24 <= v25 && *(a2 - 6) < v11[2])
          {
            std::regex_traits<char> *v11 = v24;
            *(a2 - 8) = v25;
            uint64_t v28 = *(_OWORD *)(v11 + 2);
            float v26 = *((void *)v11 + 3);
            *(_OWORD *)(v11 + 2) = *(_OWORD *)(a2 - 6);
            *((void *)v11 + 3) = *((void *)a2 - 1);
            *(_OWORD *)(a2 - 6) = v28;
            *((void *)a2 - 1) = v26;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v11, v11 + 8, a2 - 8);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v11, (uint64_t)(v11 + 8), (uint64_t)(v11 + 16), (uint64_t)(a2 - 8));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v11, (uint64_t)(v11 + 8), (uint64_t)(v11 + 16), (uint64_t)(v11 + 24), a2 - 8);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 767) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = &v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v11, &v11[8 * (v15 >> 1)], a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v11 + 8, v17 - 8, a2 - 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v11 + 16, &v11[8 * v16 + 8], a2 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v17 - 8, v17, &v11[8 * v16 + 8]);
      float v18 = *v11;
      std::regex_traits<char> *v11 = *v17;
      *uint64_t v17 = v18;
      int32x2_t v27 = *(_OWORD *)(v11 + 2);
      *(_OWORD *)(v11 + 2) = *(_OWORD *)(v17 + 2);
      *(_OWORD *)(v17 + 2) = v27;
      uint64_t v19 = *((void *)v11 + 3);
      *((void *)v11 + 3) = *((void *)v17 + 3);
      *((void *)v17 + 3) = v19;
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(&v11[8 * (v15 >> 1)], v11, a2 - 8);
      if (a5) {
        goto LABEL_15;
      }
    }
    uint64_t v20 = *(v11 - 8);
    if (v20 >= *v11 && (v20 > *v11 || *(v11 - 6) >= v11[2]))
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &>(v11, a2);
      goto LABEL_20;
    }
LABEL_15:
    float v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &>(v11, a2);
    if ((v22 & 1) == 0) {
      goto LABEL_18;
    }
    int32x2_t v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v11, v21);
    uint64_t v11 = (int *)(v21 + 32);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> *>(v21 + 32, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (int *)v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_18:
      std::__introsort<std::_ClassicAlgPolicy,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> *,false>(a1, v21, a3, -v13, a5 & 1);
      uint64_t v11 = (int *)(v21 + 32);
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v11, (uint64_t)a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v11, a2);
  }
}

  unint64_t v10 = (uint64_t)(a2 - 7);
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    float v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          int32x2_t v27 = *(a2 - 7);
          float v26 = a2 - 7;
          float v50 = v27;
          uint64_t v51 = *((_DWORD *)v26 + 2);
          uint64_t v52 = *(uint64_t *)((char *)v26 + 12);
          unint64_t v54 = 0;
          int v55 = 0;
          uint64_t v53 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, (const void *)v26[3], v26[4], (v26[4] - v26[3]) >> 2);
          BOOL v56 = *((_DWORD *)v26 + 12);
          uint64_t v43 = *(void *)v11;
          uint64_t v44 = *(_DWORD *)(v11 + 8);
          uint64_t v45 = *(void *)(v11 + 12);
          float v47 = 0;
          int64_t v48 = 0;
          float v46 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v46, *(const void **)(v11 + 24), *(void *)(v11 + 32), (uint64_t)(*(void *)(v11 + 32) - *(void *)(v11 + 24)) >> 2);
          float v49 = *(_DWORD *)(v11 + 48);
          uint64_t v28 = v50;
          uint64_t v29 = v43;
          if (v46)
          {
            float v47 = v46;
            operator delete(v46);
          }
          if (v53)
          {
            unint64_t v54 = v53;
            operator delete(v53);
          }
          if (v28 < v29) {
            std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, v26);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v11, v11 + 56, v10);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v11, v11 + 56, v11 + 112, v10);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v11, v11 + 56, v11 + 112, v11 + 168, v10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 1343)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>((void *)v11, a2);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v11, a2);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (uint64_t *)(v11 + 56 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x1C01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a1 + 56 * (v15 >> 1), v10);
      float v18 = v10;
      uint64_t v19 = 56 * v16;
      uint64_t v20 = 56 * v16 + a1 - 56;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1 + 56, v20, (uint64_t)(a2 - 14));
      float v21 = a1 + 56 + v19;
      unint64_t v10 = v18;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1 + 112, v21, (uint64_t)(a2 - 21));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v20, (uint64_t)v17, v21);
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, v17);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1 + 56 * (v15 >> 1), a1, v10);
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v36 = *(void *)(a1 - 56);
      float v37 = *(_DWORD *)(a1 - 48);
      unint64_t v38 = *(void *)(a1 - 44);
      float v40 = 0;
      float v41 = 0;
      unint64_t v39 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, *(const void **)(a1 - 32), *(void *)(a1 - 24), (uint64_t)(*(void *)(a1 - 24) - *(void *)(a1 - 32)) >> 2);
      float v42 = *(_DWORD *)(a1 - 8);
      float v31 = *(void *)a1;
      unint64_t v33 = 0;
      BOOL v34 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
      long long v35 = *(_DWORD *)(a1 + 48);
      unint64_t v22 = v36;
      if (__p)
      {
        unint64_t v33 = __p;
        operator delete(__p);
      }
      if (v39)
      {
        float v40 = v39;
        operator delete(v39);
      }
      if (v22 >= (int)v31)
      {
        uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &>(a1, a2);
        goto LABEL_21;
      }
    }
    int32x2_t v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &>((uint64_t *)a1, a2);
    if ((v24 & 1) == 0) {
      goto LABEL_19;
    }
    float v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, v23);
    uint64_t v11 = v23 + 56;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v23 + 56, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (uint64_t *)v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v25)
    {
LABEL_19:
      std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*,false>(a1, v23, a3, -v13, a5 & 1);
      uint64_t v11 = v23 + 56;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if ((uint64_t *)v11 != a2) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v11, (uint64_t)a2, (uint64_t)a2, a3);
  }
}

  uint64_t v12 = (long long *)&a2[-2].n128_i8[8];
  unint64_t v13 = (long long *)a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v13;
    float v15 = v14;
    long long v16 = (char *)a2 - (char *)v13;
    uint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v13) >> 3);
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((long long *)&a2[-2].n128_i8[8], v13))
          {
            float v32 = *((void *)v13 + 2);
            uint64_t v30 = *v13;
            uint64_t v28 = *v12;
            *((void *)v13 + 2) = a2[-1].n128_u64[1];
            *unint64_t v13 = v28;
            *uint64_t v12 = v30;
            a2[-1].n128_u64[1] = v32;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v13, (long long *)((char *)v13 + 24), (long long *)&a2[-2].n128_i8[8], a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)v13, (uint64_t)v13 + 24, (uint64_t)(v13 + 3), (uint64_t)&a2[-2].n128_i64[1], a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((__n128 *)v13, (uint64_t)v13 + 24, (uint64_t)(v13 + 3), (uint64_t)v13 + 72, (uint64_t)&a2[-2].n128_i64[1], a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 575) {
      break;
    }
    if (v15 == 1)
    {
      if (v13 != (long long *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,TRegExpMatch*>((__n128 *)v13, a2, a2, (unsigned int (**)(uint64_t, __int8 *))a3, a6);
      }
      return;
    }
    float v18 = v17 >> 1;
    uint64_t v19 = (long long *)((char *)v13 + 24 * (v17 >> 1));
    if ((unint64_t)v16 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v13, (long long *)((char *)v13 + 24 * (v17 >> 1)), (long long *)&a2[-2].n128_i8[8], a3);
      uint64_t v20 = 3 * v18;
      float v21 = (long long *)((char *)v13 + 24 * v18 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((long long *)((char *)v13 + 24), v21, (long long *)&a2[-3], a3);
      unint64_t v22 = v13 + 3;
      int32x2_t v23 = (long long *)((char *)v13 + 8 * v20 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v22, v23, (long long *)&a2[-5].n128_i8[8], a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v21, v19, v23, a3);
      float v31 = *(void *)(a1 + 16);
      uint64_t v29 = *(_OWORD *)a1;
      float v24 = *v19;
      *(void *)(a1 + 16) = *((void *)v19 + 2);
      *(_OWORD *)a1 = v24;
      *((void *)v19 + 2) = v31;
      *uint64_t v19 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((long long *)((char *)v13 + 24 * (v17 >> 1)), v13, (long long *)&a2[-2].n128_i8[8], a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)((long long *)(a1 - 24), (long long *)a1) & 1) == 0)
    {
      unint64_t v13 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRegExpMatch *,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&)>((long long *)a1, (long long *)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    float v25 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRegExpMatch *,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&)>((long long *)a1, (unint64_t)a2, (uint64_t (**)(char *, long long *))a3);
    if ((v26 & 1) == 0) {
      goto LABEL_16;
    }
    int32x2_t v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(a1, v25, a3);
    unint64_t v13 = (long long *)(v25 + 24);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v25 + 24, (uint64_t)a2, a3))
    {
      a4 = -v15;
      a2 = (__n128 *)v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if (!v27)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,false>(a1, v25, a3, -v15, a5 & 1);
      unint64_t v13 = (long long *)(v25 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)v13, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)v13, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    float v15 = (uint64_t)((uint64_t)a2 - v11) >> 5;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)(a2 - 4), v11))
          {
            float v24 = *(_DWORD *)v11;
            *(_DWORD *)uint64_t v11 = *((_DWORD *)a2 - 8);
            *((_DWORD *)a2 - 8) = v24;
            float v25 = *(_DWORD *)(v11 + 4);
            *(_DWORD *)(v11 + 4) = *((_DWORD *)a2 - 7);
            *((_DWORD *)a2 - 7) = v25;
            uint64_t v28 = *(_OWORD *)(v11 + 8);
            uint64_t v30 = *(void *)(v11 + 24);
            float v26 = *(_OWORD *)(a2 - 3);
            *(void *)(v11 + 24) = *(a2 - 1);
            *(_OWORD *)(v11 + 8) = v26;
            *(_OWORD *)(a2 - 3) = v28;
            *(a2 - 1) = v30;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v11, v11 + 32, (uint64_t)(a2 - 4), a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v11, v11 + 32, v11 + 64, (uint64_t)(a2 - 4), a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v11, v11 + 32, v11 + 64, v11 + 96, (uint64_t)(a2 - 4), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 767) {
      break;
    }
    if (v13 == 1)
    {
      if ((uint64_t *)v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = v11 + 32 * (v15 >> 1);
    if ((unint64_t)v14 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v11, v11 + 32 * (v15 >> 1), (uint64_t)(a2 - 4), a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v11 + 32, v17 - 32, (uint64_t)(a2 - 8), a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v11 + 64, v11 + 32 + 32 * v16, (uint64_t)(a2 - 12), a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v17 - 32, v17, v11 + 32 + 32 * v16, a3);
      float v18 = *(_DWORD *)v11;
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v17;
      *(_DWORD *)uint64_t v17 = v18;
      uint64_t v19 = *(_DWORD *)(v11 + 4);
      *(_DWORD *)(v11 + 4) = *(_DWORD *)(v17 + 4);
      *(_DWORD *)(v17 + 4) = v19;
      uint64_t v29 = *(void *)(v11 + 24);
      int32x2_t v27 = *(_OWORD *)(v11 + 8);
      uint64_t v20 = *(_OWORD *)(v17 + 8);
      *(void *)(v11 + 24) = *(void *)(v17 + 24);
      *(_OWORD *)(v11 + 8) = v20;
      *(void *)(v17 + 24) = v29;
      *(_OWORD *)(v17 + 8) = v27;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v11 + 32 * (v15 >> 1), v11, (uint64_t)(a2 - 4), a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v11 - 32, v11))
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::pair<quasar::PronType,float>,std::string> *,std::__less<void,void> &>(v11, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    float v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::pair<quasar::PronType,float>,std::string> *,std::__less<void,void> &>(v11, (unint64_t)a2, a3);
    if ((v22 & 1) == 0) {
      goto LABEL_16;
    }
    int32x2_t v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v11, v21, a3);
    uint64_t v11 = v21 + 32;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v21 + 32, (uint64_t)a2, a3))
    {
      a4 = -v13;
      a2 = (uint64_t *)v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *,false>(a1, v21, a3, -v13, a5 & 1);
      uint64_t v11 = v21 + 32;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v11, a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v11, a2, a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = 0x6DB6DB6DB6DB6DB7 * (((char *)a2 - (char *)v11) >> 5);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)(a2 - 14, (uint64_t)v11))
          {
            std::swap[abi:ne180100]<quasar::Token>((uint64_t)v11, a2 - 14);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)v11, v11 + 14, a2 - 14, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)v11, v11 + 14, v11 + 28, a2 - 14, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)v11, v11 + 14, v11 + 28, v11 + 42, a2 - 14, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 5375) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*,quasar::Token*>(v11, a2, (uint64_t)a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = &v11[14 * (v15 >> 1)];
    if ((unint64_t)v14 > 0x7000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)v11, &v11[14 * (v15 >> 1)], a2 - 14, a3);
      float v18 = 14 * v16;
      uint64_t v19 = &v11[14 * v16 - 14];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)(v11 + 14), v19, a2 - 28, a3);
      uint64_t v20 = (uint64_t)(v11 + 28);
      float v21 = &v11[v18 + 14];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(v20, v21, a2 - 42, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)v19, v17, v21, a3);
      std::swap[abi:ne180100]<quasar::Token>((uint64_t)a1, v17);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)&v11[14 * (v15 >> 1)], v11, a2 - 14, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(a1 - 14, (uint64_t)a1) & 1) == 0)
    {
      uint64_t v11 = (long long *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Token *,BOOL (*&)(quasar::Token const&,quasar::Token const&)>((uint64_t)a1, a2, (uint64_t (**)(void **, unint64_t))a3);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Token *,BOOL (*&)(quasar::Token const&,quasar::Token const&)>((uint64_t)a1, a2, (uint64_t (**)(uint64_t, void **))a3);
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    float v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(a1, v22, a3);
    uint64_t v11 = v22 + 14;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(v22 + 14, a2, a3))
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*,false>(a1, v22, a3, -v13, a5 & 1);
      uint64_t v11 = v22 + 14;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)v11, (void **)a2, (uint64_t (**)(void **, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((void **)v11, (void **)a2, (uint64_t (**)(void **, uint64_t))a3);
  }
}

  uint64_t v12 = (long long *)&a2[-2].n128_i8[8];
  unint64_t v13 = (long long *)a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v13;
    float v15 = v14;
    long long v16 = (char *)a2 - (char *)v13;
    uint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v13) >> 3);
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((long long *)&a2[-2].n128_i8[8], v13))
          {
            float v32 = *((void *)v13 + 2);
            uint64_t v30 = *v13;
            uint64_t v28 = *v12;
            *((void *)v13 + 2) = a2[-1].n128_u64[1];
            *unint64_t v13 = v28;
            *uint64_t v12 = v30;
            a2[-1].n128_u64[1] = v32;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v13, (long long *)((char *)v13 + 24), (long long *)&a2[-2].n128_i8[8], a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)v13, (uint64_t)v13 + 24, (uint64_t)(v13 + 3), (uint64_t)&a2[-2].n128_i64[1], a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((__n128 *)v13, (uint64_t)v13 + 24, (uint64_t)(v13 + 3), (uint64_t)v13 + 72, (uint64_t)&a2[-2].n128_i64[1], a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 575) {
      break;
    }
    if (v15 == 1)
    {
      if (v13 != (long long *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,TRegExpMatch*>((__n128 *)v13, a2, a2, (unsigned int (**)(uint64_t, __int8 *))a3, a6);
      }
      return;
    }
    float v18 = v17 >> 1;
    uint64_t v19 = (long long *)((char *)v13 + 24 * (v17 >> 1));
    if ((unint64_t)v16 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v13, (long long *)((char *)v13 + 24 * (v17 >> 1)), (long long *)&a2[-2].n128_i8[8], a3);
      uint64_t v20 = 3 * v18;
      float v21 = (long long *)((char *)v13 + 24 * v18 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((long long *)((char *)v13 + 24), v21, (long long *)&a2[-3], a3);
      unint64_t v22 = v13 + 3;
      int32x2_t v23 = (long long *)((char *)v13 + 8 * v20 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v22, v23, (long long *)&a2[-5].n128_i8[8], a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v21, v19, v23, a3);
      float v31 = *(void *)(a1 + 16);
      uint64_t v29 = *(_OWORD *)a1;
      float v24 = *v19;
      *(void *)(a1 + 16) = *((void *)v19 + 2);
      *(_OWORD *)a1 = v24;
      *((void *)v19 + 2) = v31;
      *uint64_t v19 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((long long *)((char *)v13 + 24 * (v17 >> 1)), v13, (long long *)&a2[-2].n128_i8[8], a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)((long long *)(a1 - 24), (long long *)a1) & 1) == 0)
    {
      unint64_t v13 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRegExpMatch *,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&)>((long long *)a1, (long long *)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    float v25 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRegExpMatch *,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&)>((long long *)a1, (unint64_t)a2, (uint64_t (**)(char *, long long *))a3);
    if ((v26 & 1) == 0) {
      goto LABEL_16;
    }
    int32x2_t v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*>(a1, v25, a3);
    unint64_t v13 = (long long *)(v25 + 24);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*>(v25 + 24, (uint64_t)a2, a3))
    {
      a4 = -v15;
      a2 = (__n128 *)v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if (!v27)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*,false>(a1, v25, a3, -v15, a5 & 1);
      unint64_t v13 = (long long *)(v25 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)v13, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)v13, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v22 = *((_DWORD *)a2 - 4);
          float v21 = a2 - 1;
          if (v22 < (signed __int32)v11->n128_u32[0])
          {
            uint64_t v30 = (__int128)*v11;
            std::regex_traits<char> *v11 = (__n128)*v21;
            *float v21 = v30;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[1], (int *)a2 - 4);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[1], (int *)&v11[2], a2 - 1);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[1], (int *)&v11[2], v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (__n128 *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (int *)&v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, (int *)&v11[v15 >> 1], (int *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[1], v17 - 4, (int *)a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[2], (int *)&v11[v16 + 1], (int *)a2 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v17 - 1, v17, (int *)&v11[v16 + 1]);
      uint64_t v29 = (__int128)*v11;
      std::regex_traits<char> *v11 = *(__n128 *)v17;
      *(_OWORD *)uint64_t v17 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[v15 >> 1], (int *)v11, (int *)a2 - 4);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((signed __int32)v11[-1].n128_u32[0] >= (signed __int32)v11->n128_u32[0])
    {
      uint64_t v11 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    float v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((long long *)v11, a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>*>((uint64_t)v11, (__n128 *)v18);
    uint64_t v11 = (__n128 *)(v18 + 1);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>*>((uint64_t)(v18 + 1), (__n128 *)a2))
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>*,false>(a1, v18, a3, -v13, a5 & 1);
      uint64_t v11 = (__n128 *)(v18 + 1);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, a2);
  }
  else if (v11 != (__n128 *)a2)
  {
    int32x2_t v23 = (long long *)&v11[1];
    while (v23 != a2)
    {
      float v24 = v23;
      float v25 = a1[1].n128_i64[0];
      if ((int)v25 < (signed __int32)a1->n128_u32[0])
      {
        float v26 = a1[1].n128_i64[1];
        int32x2_t v27 = v24;
        do
        {
          *int32x2_t v27 = *(v27 - 1);
          uint64_t v28 = *((_DWORD *)v27-- - 8);
        }
        while ((int)v25 < v28);
        *(void *)int32x2_t v27 = v25;
        *((void *)v27 + 1) = v26;
      }
      int32x2_t v23 = v24 + 1;
      a1 = (__n128 *)v24;
    }
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v24 = (long long *)(a2 - 4);
          float v25 = *(a2 - 4);
          if (v25 < *v11
            || v25 <= *v11 && ((v26 = *(a2 - 3), int32x2_t v27 = v11[1], v26 < v27) || v26 <= v27 && *(a2 - 1) < v11[3]))
          {
            uint64_t v29 = *(_OWORD *)v11;
            *(_OWORD *)uint64_t v11 = *v24;
            *float v24 = v29;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, v11 + 4, (long long *)a2 - 1);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)v11, v11 + 4, (uint64_t)(v11 + 8), (uint64_t)(a2 - 4));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)v11, v11 + 4, (uint64_t)(v11 + 8), (uint64_t)(v11 + 12), (uint64_t)(a2 - 4));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = &v11[4 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11, &v11[4 * (v15 >> 1)], (long long *)a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11 + 1, v17 - 4, (long long *)a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v11 + 2, &v11[4 * v16 + 4], (long long *)a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)v17 - 1, v17, (long long *)&v11[4 * v16 + 4]);
      uint64_t v28 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)uint64_t v17 = v28;
      if (a5) {
        goto LABEL_17;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)&v11[4 * (v15 >> 1)], v11, (long long *)a2 - 1);
      if (a5) {
        goto LABEL_17;
      }
    }
    float v18 = *(v11 - 4);
    if (v18 >= *v11)
    {
      if (v18 > *v11 || (uint64_t v19 = *(v11 - 3), v20 = v11[1], v19 >= v20) && (v19 > v20 || *(v11 - 1) >= v11[3]))
      {
        uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &>(v11, (unint64_t)a2);
        goto LABEL_22;
      }
    }
LABEL_17:
    float v21 = (long long *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &>(v11, (unint64_t)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_20;
    }
    int32x2_t v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>((uint64_t)v11, v21);
    uint64_t v11 = (int *)(v21 + 1);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>((uint64_t)(v21 + 1), (long long *)a2))
    {
      a4 = -v13;
      a2 = (int *)v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_20:
      std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(a1, v21, a3, -v13, a5 & 1);
      uint64_t v11 = (int *)(v21 + 1);
LABEL_22:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v11, a2);
  }
}

  unint64_t v10 = (__n128 *)((char *)a2 - 24);
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    float v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<absl::string_view,int>,std::pair<absl::string_view,int>>(a3, (uint64_t)v10, (uint64_t)v11))
          {
            uint64_t v29 = *v11;
            std::regex_traits<char> *v11 = *v10;
            *unint64_t v10 = v29;
            float v26 = v11[1].n128_u32[0];
            v11[1].n128_u32[0] = a2[-1].n128_u32[2];
            a2[-1].n128_u32[2] = v26;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)v11, (uint64_t)&v11[1].n128_i64[1], (uint64_t)v10, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>(v11, (uint64_t)&v11[1].n128_i64[1], (uint64_t)&v11[3], (uint64_t)v10, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>(v11, (uint64_t)&v11[1].n128_i64[1], (uint64_t)&v11[3], (uint64_t)&v11[4].n128_i64[1], (uint64_t)v10, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 575) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *,std::pair<absl::string_view,int> *>((uint64_t)v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    uint64_t v17 = (__n128 *)((char *)v11 + 24 * (v15 >> 1));
    if ((unint64_t)v14 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)v11, (uint64_t)v11 + 24 * (v15 >> 1), (uint64_t)v10, a3);
      float v18 = v10;
      uint64_t v19 = (char *)v11 + 24 * v16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)&v11[1].n128_i64[1], (uint64_t)(v19 - 24), (uint64_t)&a2[-3], a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)&v11[3], (uint64_t)&v11[1].n128_i64[3 * v16 + 1], (uint64_t)&a2[-5].n128_i64[1], a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)(v19 - 24), (uint64_t)v17, (uint64_t)&v11[1].n128_i64[3 * v16 + 1], a3);
      uint64_t v28 = *v11;
      std::regex_traits<char> *v11 = *v17;
      *uint64_t v17 = v28;
      uint64_t v20 = v11[1].n128_u32[0];
      v11[1].n128_u32[0] = *((_DWORD *)v19 + 4);
      *((_DWORD *)v19 + 4) = v20;
      unint64_t v10 = v18;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)v11 + 24 * (v15 >> 1), (uint64_t)v11, (uint64_t)v10, a3);
    }
    if ((a5 & 1) == 0
      && !std::__less<void,void>::operator()[abi:ne180100]<std::pair<absl::string_view,int>,std::pair<absl::string_view,int>>(a3, (uint64_t)&v11[-2].n128_i64[1], (uint64_t)v11))
    {
      uint64_t v11 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<absl::string_view,int> *,std::__less<void,void> &>((unint64_t)v11, (unint64_t)a2, a3);
      goto LABEL_17;
    }
    v22.n128_f64[0] = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<absl::string_view,int> *,std::__less<void,void> &>((long long *)v11, (unint64_t)a2, a3);
    int32x2_t v23 = v21;
    if ((v24 & 1) == 0) {
      goto LABEL_15;
    }
    float v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>(v11, v21, a3);
    uint64_t v11 = (__n128 *)((char *)v23 + 24);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((__n128 *)((char *)v23 + 24), a2, a3))
    {
      a4 = -v13;
      a2 = v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v25)
    {
LABEL_15:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *,false>(a1, v23, a3, -v13, a5 & 1, v22);
      uint64_t v11 = (__n128 *)((char *)v23 + 24);
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)v11, (uint64_t)a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)v11, (uint64_t)a2, a3);
  }
}

uint64_t _ZNSt3__124__sort5_maybe_branchlessB8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Li0EEEvT1_S1D_S1D_S1D_S1D_S17_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEvT1_S1D_S1D_S1D_S17_(a1, a2, a3, a4);
  float v11 = *(float *)a4;
  if (*(float *)a5 > *(float *)a4)
  {
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(float *)a5 = v11;
    uint64_t v12 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v12;
    uint64_t v13 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = *(void *)(a5 + 16);
    *(void *)(a5 + 16) = v13;
    uint64_t v14 = *(void *)(a4 + 24);
    *(void *)(a4 + 24) = *(void *)(a5 + 24);
    *(void *)(a5 + 24) = v14;
    float v15 = *(float *)a3;
    if (*(float *)a4 > *(float *)a3)
    {
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(float *)a4 = v15;
      uint64_t v16 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v16;
      uint64_t v17 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = v17;
      uint64_t v18 = *(void *)(a3 + 24);
      *(void *)(a3 + 24) = *(void *)(a4 + 24);
      *(void *)(a4 + 24) = v18;
      float v19 = *(float *)a2;
      if (*(float *)a3 > *(float *)a2)
      {
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(float *)a3 = v19;
        uint64_t v20 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v20;
        uint64_t v21 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = v21;
        uint64_t v22 = *(void *)(a2 + 24);
        *(void *)(a2 + 24) = *(void *)(a3 + 24);
        *(void *)(a3 + 24) = v22;
        float v23 = *(float *)a1;
        if (*(float *)a2 > *(float *)a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(float *)a2 = v23;
          uint64_t v24 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = v24;
          uint64_t v25 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a2 + 16) = v25;
          uint64_t v26 = *(void *)(a1 + 24);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a2 + 24) = v26;
        }
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)a2;
  float v4 = *(float *)result;
  float v5 = *(float *)a3;
  if (*(float *)a2 > *(float *)result)
  {
    if (v5 <= v3)
    {
      *(float *)uint64_t result = v3;
      *(float *)a2 = v4;
      uint64_t v16 = *(void *)(result + 8);
      *(void *)(result + 8) = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v16;
      uint64_t v17 = *(void *)(result + 16);
      *(void *)(result + 16) = *(void *)(a2 + 16);
      uint64_t v6 = (uint64_t *)(a2 + 24);
      uint64_t v18 = *(void *)(a2 + 24);
      *(void *)(a2 + 16) = v17;
      uint64_t v19 = *(void *)(result + 24);
      *(void *)(result + 24) = v18;
      *(void *)(a2 + 24) = v19;
      if (*(float *)a3 <= v4) {
        return result;
      }
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v4;
      uint64_t v20 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v20;
      uint64_t v8 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
    }
    else
    {
      uint64_t v6 = (uint64_t *)(result + 24);
      *(float *)uint64_t result = v5;
      *(float *)a3 = v4;
      uint64_t v7 = *(void *)(result + 8);
      *(void *)(result + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v7;
      uint64_t v8 = *(void *)(result + 16);
      *(void *)(result + 16) = *(void *)(a3 + 16);
    }
    *(void *)(a3 + 16) = v8;
    uint64_t v12 = (uint64_t *)(a3 + 24);
    goto LABEL_10;
  }
  if (v5 > v3)
  {
    *(float *)a2 = v5;
    *(float *)a3 = v3;
    uint64_t v9 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = v9;
    uint64_t v10 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = v10;
    uint64_t v12 = (uint64_t *)(a2 + 24);
    uint64_t v11 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(void *)(a3 + 24) = v11;
    float v13 = *(float *)result;
    if (*(float *)a2 > *(float *)result)
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)a2;
      *(float *)a2 = v13;
      uint64_t v14 = *(void *)(result + 8);
      *(void *)(result + 8) = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v14;
      uint64_t v15 = *(void *)(result + 16);
      *(void *)(result + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v15;
      uint64_t v6 = (uint64_t *)(result + 24);
LABEL_10:
      uint64_t v21 = *v6;
      uint64_t *v6 = *v12;
      *uint64_t v12 = v21;
    }
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEbT1_S1D_S17_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(float *)(a2 - 32);
      float v7 = *(float *)a1;
      if (v6 > *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 32) = v7;
        uint64_t v8 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v8;
        uint64_t v9 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v9;
        uint64_t v10 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v10;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1, a1 + 32, a2 - 32);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEvT1_S1D_S1D_S1D_S17_(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      _ZNSt3__124__sort5_maybe_branchlessB8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Li0EEEvT1_S1D_S1D_S1D_S1D_S17_(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      uint64_t v11 = (float *)(a1 + 64);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1, a1 + 32, a1 + 64);
      uint64_t v12 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    float v15 = *(float *)v12;
    if (*(float *)v12 > *v11)
    {
      uint64_t v16 = *(void *)(v12 + 8);
      long long v24 = *(_OWORD *)(v12 + 16);
      *(void *)(v12 + 16) = 0;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 8) = 0;
      uint64_t v17 = v13;
      float v18 = *v11;
      while (1)
      {
        uint64_t v19 = v17;
        uint64_t v20 = a1 + v17;
        *(float *)(a1 + v17 + 96) = v18;
        std::vector<int>::__move_assign(a1 + v17 + 104, (__n128 *)(a1 + v17 + 72));
        if (v19 == -64) {
          break;
        }
        float v18 = *(float *)(v20 + 32);
        uint64_t v17 = v19 - 32;
        if (v15 <= v18)
        {
          uint64_t v21 = a1 + v17 + 96;
          goto LABEL_12;
        }
      }
      uint64_t v21 = a1;
LABEL_12:
      *(float *)uint64_t v21 = v15;
      uint64_t v22 = *(void **)(v20 + 72);
      if (v22)
      {
        *(void *)(v21 + 16) = v22;
        operator delete(v22);
        uint64_t v23 = a1 + v19;
        *(void *)(v23 + 80) = 0;
        *(void *)(v23 + 88) = 0;
      }
      *(void *)(v20 + 72) = v16;
      *(_OWORD *)(v21 + 16) = v24;
      if (++v14 == 8) {
        return v12 + 32 == a2;
      }
    }
    uint64_t v11 = (float *)v12;
    v13 += 32;
    v12 += 32;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEvT1_S1D_S1D_S1D_S17_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1, a2, a3);
  float v9 = *(float *)a3;
  if (*(float *)a4 > *(float *)a3)
  {
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(float *)a4 = v9;
    uint64_t v10 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v10;
    uint64_t v11 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = v11;
    uint64_t v12 = *(void *)(a3 + 24);
    *(void *)(a3 + 24) = *(void *)(a4 + 24);
    *(void *)(a4 + 24) = v12;
    float v13 = *(float *)a2;
    if (*(float *)a3 > *(float *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v13;
      uint64_t v14 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v14;
      uint64_t v15 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = v15;
      uint64_t v16 = *(void *)(a2 + 24);
      *(void *)(a2 + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 24) = v16;
      float v17 = *(float *)a1;
      if (*(float *)a2 > *(float *)a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(float *)a2 = v17;
        uint64_t v18 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v18;
        uint64_t v19 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v19;
        uint64_t v20 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a2 + 24) = v20;
      }
    }
  }
  return result;
}

double kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::OnlineLatticeBiglmFasterDecoderConfig(kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig *this)
{
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig::LatticeBiglmFasterTraceBackDecoderConfig(this);
  *(void *)(v1 + 100) = 0x3F4000003F333333;
  *(_OWORD *)(v1 + 108) = xmmword_1B255FD20;
  *(_DWORD *)(v1 + 124) = 3;
  *(void *)(v1 + 128) = 0x3D4CCCCD3C23D70ALL;
  *(unsigned char *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 140) = 0;
  *(unsigned char *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 148) = 1077936128;
  *(void *)&double result = 0xC800000002;
  *(void *)(v1 + 152) = 0xC800000002;
  return result;
}

double kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig::LatticeBiglmFasterTraceBackDecoderConfig(kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig *this)
{
  *(_DWORD *)this = 1098907648;
  *(void *)((char *)this + 12) = 0x4120000000000000;
  *((_DWORD *)this + 5) = 25;
  *((unsigned char *)this + 24) = 1;
  *(_OWORD *)((char *)this + 28) = xmmword_1B255FD30;
  *(void *)((char *)this + 44) = 0x2FAF0803A800000;
  *((_WORD *)this + 26) = 257;
  *((unsigned char *)this + 54) = 0;
  *((_DWORD *)this + 14) = 2139095039;
  *(_OWORD *)((char *)this + 60) = xmmword_1B255FD40;
  *(void *)((char *)this + 76) = 0x7FFFFFFFFFFFFFFFLL;
  *((_WORD *)this + 42) = 0;
  *((void *)this + 11) = 0x7FFFFFFF43FA0000;
  *((_DWORD *)this + 24) = 2139095040;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)((char *)this + 4) = 0x7FFFFFFFLL;
  return result;
}

void kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::Register(uint64_t a1, uint64_t a2)
{
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "rt-min");
  std::string::basic_string[abi:ne180100]<0>(__p, "Approximate minimum decoding run time factor");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 100, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "rt-max");
  std::string::basic_string[abi:ne180100]<0>(__p, "Approximate maximum decoding run time factor");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 104, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "update-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "Beam update interval in frames");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 124, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "beam-update");
  std::string::basic_string[abi:ne180100]<0>(__p, "Beam update rate");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 128, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-beam-update");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max beam update rate");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 132, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "inter-utt-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum # of silence frames to trigger new utterance. The value will be also possibly used for computing the moving average of silence posteriors.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 112, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-utt-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum # of silence frames to trigger end of speech while no speech presented");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 120, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-avg-silpost");
  std::string::basic_string[abi:ne180100]<0>(__p, "To enable average silence posterior which is used for utterance detection.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 136, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "silence-posterior-threshold");
  std::string::basic_string[abi:ne180100]<0>(__p, "The threshold to trigger utterance detection with silence posterior.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 140, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-utt-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "If the utterance becomes longer than this number of frames, shorter silence is acceptable as an utterance separator");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 116, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-adaptive-inter-utt-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "To enable adaptive inter-utt-sil to trigger new utterance.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 144, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "adaptive-inter-utt-sil-rate");
  std::string::basic_string[abi:ne180100]<0>(__p, "The rate to compute the exponential decay factor for adaptive inter-utt-sil: exp(adaptive-inter-utt-sil-rate * (max-utt-length - current_utt_frames) / max-utt-length)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 148, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "adaptive-inter-utt-sil-min");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minimum value for adaptive inter-utt-sil ");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 152, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "adaptive-inter-utt-sil-max");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum value for adaptive inter-utt-sil ");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 156, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B28874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::EndPointDecoderConfig::registerParams(uint64_t a1, quasar::SystemConfig *this, const void **a3)
{
  quasar::SystemConfig::getPrefix(this, &v9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v9.__r_.__value_.__l.__data_, a3, (uint64_t)&__p);
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "model-file");
  std::string::basic_string[abi:ne180100]<0>(v6, "Endpoint model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 40, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "model-feature-list");
  std::string::basic_string[abi:ne180100]<0>(v6, "sequence of features for endpoint model");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 64, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(v6, "model is memory mapped");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 88, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "early-endpoint-threshold");
  std::string::basic_string[abi:ne180100]<0>(v6, "Threshold for early endpoint detection");
  quasar::SystemConfig::Register<float>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "endpoint-threshold");
  std::string::basic_string[abi:ne180100]<0>(v6, "Threshold for final endpoint detection");
  quasar::SystemConfig::Register<float>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 4, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "enable-acoustic-endpointer");
  std::string::basic_string[abi:ne180100]<0>(v6, "use the threshold only for acoustic endpointer score and ignore every other EP features");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 8, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "pause-threshold-list");
  std::string::basic_string[abi:ne180100]<0>(v6, "Comma-separated list for pause-threshold vector, which is used for determining the pause-counts vector that is an endpointer feature. pause-counts[n] is the number of interword pauses >= pause-threshold[n]. For example, pause-threshold=[3,30,100] and pauses of 90 frames and 100 frames will result in pause-counts=[2,2,1].");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 16, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "trailing-silence-limit");
  std::string::basic_string[abi:ne180100]<0>(v6, "An upper limit for trailing silence duration (milliseconds) after which recognizer should be forced to endpoint");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 92, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "pauses-as-BOOL");
  std::string::basic_string[abi:ne180100]<0>(v6, "Needs pause-threshold-list. If true, then pause-threshold vector is used to create a pause-counts vector,where pause-counts[n] is a BOOLean for asserting interword pauses >= pause-threshold[n]. For example, pause-threshold=[3,30,100] and pause of 90 frames will result in pause-counts=[1,1,0].");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 96, (uint64_t)v6, 0, 22, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "extra-delay-ms");
  std::string::basic_string[abi:ne180100]<0>(v6, "Delaying the endpointer trigger decision by the given amount of time (in msec), when specified in recog request.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 100, (uint64_t)v6, 0, 55, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::SystemConfig::setPrefix((std::string *)this, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B28DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig::Register(uint64_t a1, uint64_t a2)
{
  kaldi::LatticeBiglmFasterDecoderConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-total-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max total allocated tokens at any time.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 68, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-total-forward-links");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max total allocated forward links at any time.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 72, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "state-min-arcs-cache");
  std::string::basic_string[abi:ne180100]<0>(__p, "Cache unpacked arcs for FST states with more than this many arcs");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 80, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "memoize-emitting-arcs");
  std::string::basic_string[abi:ne180100]<0>(__p, "Compute emitting arcs only one per frame. Speeds up decoding when acoustic model output is sparse.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 84, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "acoustic-cost-cutoff");
  std::string::basic_string[abi:ne180100]<0>(__p, "Pruning threshold for acoustic model costs as neg log prob; smaller prunes more aggressively");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 88, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lm-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Pruning threshold for acoustic model costs as neg log prob; smaller prunes more aggressively");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 96, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "acoustic-max-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of scores to consider from the acoustic model");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 92, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B291F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::LatticeBiglmFasterDecoderConfig::Register(uint64_t a1, uint64_t a2)
{
  kaldi::LatticeFasterDecoderConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "small-lm-prune-beam-diff");
  std::string::basic_string[abi:ne180100]<0>(__p, "Pruning threshold for small LM before checking with big LM; smaller prunes more aggressively");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 56, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B292FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::LatticeFasterDecoderConfig::Register(uint64_t a1, uint64_t a2)
{
  fst::DeterminizeLatticePhonePrunedOptions::Register(a1 + 44, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding beam.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoder max active states.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoder minimum #active states.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-active-v2");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoder minimum #active states. V2 has a tighter bound and we will ignore v1 when v2 is provided.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lattice-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Lattice generation beam");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "prune-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "Interval (in frames) at which to prune tokens");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 20, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "determinize-lattice");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, determinize the lattice (in a special sense, keeping only best pdf-sequence for each word-sequence).");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 24, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "beam-delta");
  std::string::basic_string[abi:ne180100]<0>(__p, "Increment used in decoding-- this parameter is obscure and relates to a speedup in the way the max-active constraint is applied.  Larger is more accurate.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 28, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "hash-ratio");
  std::string::basic_string[abi:ne180100]<0>(__p, "Setting used in decoder to control hash behavior");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 32, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "word-ins-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word insertion penalty applied to each word");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 36, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B297EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeLatticePhonePrunedOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "delta");
  std::string::basic_string[abi:ne180100]<0>(__p, "Tolerance used in determinization");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-mem");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum approximate memory usage in determinization (real usage might be many times this).");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "phone-determinize");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, do an initial pass of determinization on both phones and words (see also --word-determinize)");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "word-determinize");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, do a second pass of determinization on words only (see also --phone-determinize)");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 9, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "minimize");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, push and minimize after determinization.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 10, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B29AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::JoinVectorToString<std::string>(uint64_t *a1, const char *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = v4 + v5;
      int v8 = *(char *)(v7 + 23);
      if (v8 >= 0) {
        uint64_t v9 = v7;
      }
      else {
        uint64_t v9 = *(void *)v7;
      }
      if (v8 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        uint64_t v10 = *(void *)(v7 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v9, v10);
      ++v6;
      uint64_t v4 = *a1;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      if (v6 < v11)
      {
        size_t v12 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)a2, v12);
        uint64_t v4 = *a1;
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      }
      v5 += 24;
    }
    while (v6 < v11);
  }
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E4FBA408];
  uint64_t v13 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v15 + *(void *)(v15[0] - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v16[0] = v13;
  v16[1] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v18);
}

void sub_1B1B29D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0::operator()(uint64_t *a1@<X0>, int **a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  uint64_t v3 = *a1;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  a3->__begin_ = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  for (uint64_t i = a3; v4 != v5; ++v4)
  {
    if (kaldi::quasar::CEDecoder::IsPrintable(*(kaldi::quasar::CEDecoder **)(v3 + 648), *v4)) {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 568) + 88))(__p);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
    }
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&i, (long long *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B1B29E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

std::vector<std::string> **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](std::vector<std::string> **a1, long long *a2)
{
  uint64_t v4 = *a1;
  std::vector<std::string>::pointer end = (*a1)->__end_;
  unint64_t v6 = *a1;
  value = v6->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&v6->__end_cap_;
  int v8 = value;
  if (end >= value)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v4->__begin_) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v4->__begin_) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v15) {
      uint64_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    char v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    long long v18 = *a2;
    v17->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v4, &__v);
    unint64_t v11 = v4->__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  }
  else
  {
    long long v10 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    unint64_t v11 = end + 1;
    v4->__end_ = end + 1;
  }
  v4->__end_ = v11;
  return a1;
}

void sub_1B1B29F8C(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *std::vector<std::pair<float,std::vector<int>>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = a1[1];
    uint64_t v7 = v6 + 32 * a2;
    uint64_t v8 = 32 * a2;
    uint64_t v9 = (void *)(v6 + 8);
    do
    {
      *((_DWORD *)v9 - 2) = *(_DWORD *)a3;
      v9[1] = 0;
      void v9[2] = 0;
      *uint64_t v9 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v9, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
      v9 += 4;
      v8 -= 32;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1B2A044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 2);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                float v53 = *(float *)(a2 - 8);
                float v54 = *(float *)(v10 + 4);
                if (v53 > v54)
                {
                  int v55 = *(_DWORD *)v10;
                  *(_DWORD *)unint64_t v10 = *(_DWORD *)(a2 - 12);
                  *(_DWORD *)(a2 - 12) = v55;
                  *(float *)(v10 + 4) = v53;
                  *(float *)(a2 - 8) = v54;
                  int v56 = *(_DWORD *)(v10 + 8);
                  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v56;
                }
                break;
              case 3uLL:
                double result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)v10, (int *)(v10 + 12), (int *)(a2 - 12));
                break;
              case 4uLL:
                double result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(v10, v10 + 12, v10 + 24, a2 - 12);
                break;
              case 5uLL:
                double result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(v10, v10 + 12, v10 + 24, v10 + 36);
                float v57 = *(float *)(a2 - 8);
                float v58 = *(float *)(v10 + 40);
                if (v57 > v58)
                {
                  int v59 = *(_DWORD *)(v10 + 36);
                  *(_DWORD *)(v10 + 36) = *(_DWORD *)(a2 - 12);
                  *(_DWORD *)(a2 - 12) = v59;
                  *(float *)(v10 + 40) = v57;
                  *(float *)(a2 - 8) = v58;
                  int v60 = *(_DWORD *)(v10 + 44);
                  *(_DWORD *)(v10 + 44) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v60;
                  float v61 = *(float *)(v10 + 40);
                  float v62 = *(float *)(v10 + 28);
                  if (v61 > v62)
                  {
                    int v63 = *(_DWORD *)(v10 + 24);
                    int v65 = *(_DWORD *)(v10 + 32);
                    int v64 = *(_DWORD *)(v10 + 36);
                    *(_DWORD *)(v10 + 24) = v64;
                    *(float *)(v10 + 28) = v61;
                    *(float *)(v10 + 40) = v62;
                    int v66 = *(_DWORD *)(v10 + 44);
                    *(_DWORD *)(v10 + 32) = v66;
                    *(_DWORD *)(v10 + 36) = v63;
                    float v67 = *(float *)(v10 + 16);
                    *(_DWORD *)(v10 + 44) = v65;
                    if (v61 > v67)
                    {
                      int v68 = *(_DWORD *)(v10 + 12);
                      *(_DWORD *)(v10 + 12) = v64;
                      *(float *)(v10 + 16) = v61;
                      *(float *)(v10 + 28) = v67;
                      int v69 = *(_DWORD *)(v10 + 20);
                      *(_DWORD *)(v10 + 20) = v66;
                      *(_DWORD *)(v10 + 24) = v68;
                      *(_DWORD *)(v10 + 32) = v69;
                      float v70 = *(float *)(v10 + 4);
                      if (v61 > v70)
                      {
                        int v71 = *(_DWORD *)v10;
                        *(_DWORD *)unint64_t v10 = v64;
                        *(float *)(v10 + 4) = v61;
                        *(float *)(v10 + 16) = v70;
                        int v72 = *(_DWORD *)(v10 + 8);
                        *(_DWORD *)(v10 + 8) = v66;
                        *(_DWORD *)(v10 + 12) = v71;
                        *(_DWORD *)(v10 + 20) = v72;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 287)
          {
            float v73 = (_DWORD *)(v10 + 12);
            BOOL v75 = v10 == a2 || v73 == (_DWORD *)a2;
            if (a4)
            {
              if (!v75)
              {
                uint64_t v76 = 0;
                unint64_t v77 = v10;
                do
                {
                  uint64_t v78 = v73;
                  float v79 = *(float *)(v77 + 16);
                  if (v79 > *(float *)(v77 + 4))
                  {
                    int v80 = *v73;
                    int v81 = *(_DWORD *)(v77 + 20);
                    uint64_t v82 = v76;
                    while (1)
                    {
                      float v83 = (float *)(v10 + v82);
                      v83[3] = *(float *)(v10 + v82);
                      v83[4] = *(float *)(v10 + v82 + 4);
                      v83[5] = *(float *)(v10 + v82 + 8);
                      if (!v82) {
                        break;
                      }
                      v82 -= 12;
                      if (v79 <= *(v83 - 2))
                      {
                        uint64_t v84 = v10 + v82 + 12;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v84 = v10;
LABEL_85:
                    *(_DWORD *)uint64_t v84 = v80;
                    *(float *)(v84 + 4) = v79;
                    *(_DWORD *)(v84 + 8) = v81;
                  }
                  float v73 = v78 + 3;
                  v76 += 12;
                  unint64_t v77 = (unint64_t)v78;
                }
                while (v78 + 3 != (_DWORD *)a2);
              }
            }
            else if (!v75)
            {
              __n128 v116 = (float *)(v10 + 20);
              do
              {
                long long v117 = v73;
                float v118 = *(float *)(v9 + 16);
                if (v118 > *(float *)(v9 + 4))
                {
                  int v119 = *v73;
                  int v120 = *(_DWORD *)(v9 + 20);
                  long long v121 = v116;
                  do
                  {
                    long long v122 = v121;
                    *(v121 - 2) = *(v121 - 5);
                    *(v121 - 1) = *(v121 - 4);
                    int v123 = *((_DWORD *)v121 - 3);
                    v121 -= 3;
                    *(_DWORD *)long long v122 = v123;
                  }
                  while (v118 > *(v122 - 7));
                  *((_DWORD *)v121 - 2) = v119;
                  *(v121 - 1) = v118;
                  *(_DWORD *)long long v121 = v120;
                }
                float v73 = v117 + 3;
                v116 += 3;
                unint64_t v9 = (unint64_t)v117;
              }
              while (v117 + 3 != (_DWORD *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v85 = (v12 - 2) >> 1;
              int64_t v86 = v85;
              do
              {
                int64_t v87 = v86;
                if (v85 >= v86)
                {
                  uint64_t v88 = (2 * v86) | 1;
                  unint64_t v89 = v10 + 12 * v88;
                  if (2 * v87 + 2 < (uint64_t)v12 && *(float *)(v89 + 4) > *(float *)(v89 + 16))
                  {
                    v89 += 12;
                    uint64_t v88 = 2 * v87 + 2;
                  }
                  unint64_t v90 = v10 + 12 * v87;
                  float v91 = *(float *)(v89 + 4);
                  float v92 = *(float *)(v90 + 4);
                  if (v91 <= v92)
                  {
                    int v93 = *(_DWORD *)v90;
                    int v94 = *(_DWORD *)(v90 + 8);
                    do
                    {
                      unint64_t v95 = v90;
                      unint64_t v90 = v89;
                      *(_DWORD *)unint64_t v95 = *(_DWORD *)v89;
                      *(float *)(v95 + 4) = v91;
                      *(_DWORD *)(v95 + 8) = *(_DWORD *)(v89 + 8);
                      if (v85 < v88) {
                        break;
                      }
                      uint64_t v96 = 2 * v88;
                      uint64_t v88 = (2 * v88) | 1;
                      unint64_t v89 = v10 + 12 * v88;
                      uint64_t v97 = v96 + 2;
                      if (v97 < (uint64_t)v12 && *(float *)(v89 + 4) > *(float *)(v89 + 16))
                      {
                        v89 += 12;
                        uint64_t v88 = v97;
                      }
                      float v91 = *(float *)(v89 + 4);
                    }
                    while (v91 <= v92);
                    *(_DWORD *)unint64_t v90 = v93;
                    *(float *)(v90 + 4) = v92;
                    *(_DWORD *)(v90 + 8) = v94;
                  }
                }
                int64_t v86 = v87 - 1;
              }
              while (v87);
              int64_t v98 = v11 / 0xCuLL;
              do
              {
                int64_t v99 = 0;
                int v100 = *(_DWORD *)v10;
                int v101 = *(_DWORD *)(v10 + 4);
                int v102 = *(_DWORD *)(v10 + 8);
                unint64_t v103 = v10;
                do
                {
                  v104 = (_DWORD *)v103;
                  v103 += 12 * v99 + 12;
                  uint64_t v105 = 2 * v99;
                  double result = (2 * v99) | 1;
                  int64_t v99 = result;
                  uint64_t v106 = v105 + 2;
                  if (v106 < v98 && *(float *)(v103 + 4) > *(float *)(v103 + 16))
                  {
                    v103 += 12;
                    int64_t v99 = v106;
                  }
                  _DWORD *v104 = *(_DWORD *)v103;
                  v104[1] = *(_DWORD *)(v103 + 4);
                  v104[2] = *(_DWORD *)(v103 + 8);
                }
                while (v99 <= (uint64_t)((unint64_t)(v98 - 2) >> 1));
                if (v103 == a2 - 12)
                {
                  *(_DWORD *)unint64_t v103 = v100;
                  *(_DWORD *)(v103 + 4) = v101;
                  *(_DWORD *)(v103 + 8) = v102;
                }
                else
                {
                  *(_DWORD *)unint64_t v103 = *(_DWORD *)(a2 - 12);
                  *(_DWORD *)(v103 + 4) = *(_DWORD *)(a2 - 8);
                  *(_DWORD *)(v103 + 8) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 12) = v100;
                  *(_DWORD *)(a2 - 8) = v101;
                  *(_DWORD *)(a2 - 4) = v102;
                  uint64_t v107 = v103 - v10 + 12;
                  if (v107 >= 13)
                  {
                    unint64_t v108 = (v107 / 0xCuLL - 2) >> 1;
                    unint64_t v109 = v10 + 12 * v108;
                    float v110 = *(float *)(v109 + 4);
                    float v111 = *(float *)(v103 + 4);
                    if (v110 > v111)
                    {
                      int v112 = *(_DWORD *)v103;
                      int v113 = *(_DWORD *)(v103 + 8);
                      do
                      {
                        unint64_t v114 = v103;
                        unint64_t v103 = v109;
                        *(_DWORD *)unint64_t v114 = *(_DWORD *)v109;
                        *(float *)(v114 + 4) = v110;
                        *(_DWORD *)(v114 + 8) = *(_DWORD *)(v109 + 8);
                        if (!v108) {
                          break;
                        }
                        unint64_t v108 = (v108 - 1) >> 1;
                        unint64_t v109 = v10 + 12 * v108;
                        float v110 = *(float *)(v109 + 4);
                      }
                      while (v110 > v111);
                      *(_DWORD *)unint64_t v103 = v112;
                      *(float *)(v103 + 4) = v111;
                      *(_DWORD *)(v103 + 8) = v113;
                    }
                  }
                }
                a2 -= 12;
              }
              while (v98-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = (int *)(v10 + 12 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x601)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)v9, (int *)(v9 + 12 * (v12 >> 1)), (int *)(a2 - 12));
            uint64_t v15 = 3 * v13;
            uint64_t v16 = (int *)(v9 + 12 * v13 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)(v9 + 12), v16, (int *)(a2 - 24));
            char v17 = (int *)(v9 + 12 + 4 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)(v9 + 24), v17, (int *)(a2 - 36));
            double result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(v16, v14, v17);
            int v18 = *(_DWORD *)v9;
            *(_DWORD *)unint64_t v9 = *v14;
            *unint64_t v14 = v18;
            int v19 = *(_DWORD *)(v9 + 4);
            *(_DWORD *)(v9 + 4) = v14[1];
            v14[1] = v19;
            int v20 = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = v14[2];
            v14[2] = v20;
          }
          else
          {
            double result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)(v9 + 12 * (v12 >> 1)), (int *)v9, (int *)(a2 - 12));
          }
          --a3;
          if (a4) {
            break;
          }
          float v21 = *(float *)(v9 + 4);
          if (*(float *)(v9 - 8) > v21) {
            goto LABEL_13;
          }
          if (v21 <= *(float *)(a2 - 8))
          {
            unint64_t v41 = v9 + 12;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              float v42 = *(float *)(v41 + 4);
              v41 += 12;
            }
            while (v21 <= v42);
          }
          else
          {
            unint64_t v39 = v9;
            do
            {
              unint64_t v10 = v39 + 12;
              float v40 = *(float *)(v39 + 16);
              v39 += 12;
            }
            while (v21 <= v40);
          }
          uint64_t v43 = (float *)a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              uint64_t v43 = (float *)(v44 - 12);
              float v45 = *(float *)(v44 - 8);
              v44 -= 12;
            }
            while (v21 > v45);
          }
          int v46 = *(_DWORD *)v9;
          int v47 = *(_DWORD *)(v9 + 8);
          while (v10 < (unint64_t)v43)
          {
            int v48 = *(_DWORD *)v10;
            *(float *)unint64_t v10 = *v43;
            *(_DWORD *)uint64_t v43 = v48;
            int v49 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = v43[1];
            *((_DWORD *)v43 + 1) = v49;
            int v50 = *(_DWORD *)(v10 + 8);
            *(float *)(v10 + 8) = v43[2];
            *((_DWORD *)v43 + 2) = v50;
            do
            {
              float v51 = *(float *)(v10 + 16);
              v10 += 12;
            }
            while (v21 <= v51);
            do
            {
              float v52 = *(v43 - 2);
              v43 -= 3;
            }
            while (v21 > v52);
          }
          BOOL v4 = v10 - 12 >= v9;
          BOOL v5 = v10 - 12 == v9;
          if (v10 - 12 != v9)
          {
            *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 12);
            *(_DWORD *)(v9 + 4) = *(_DWORD *)(v10 - 8);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 4);
          }
          a4 = 0;
          *(_DWORD *)(v10 - 12) = v46;
          *(float *)(v10 - 8) = v21;
          *(_DWORD *)(v10 - 4) = v47;
        }
        float v21 = *(float *)(v9 + 4);
LABEL_13:
        uint64_t v22 = 0;
        int v23 = *(_DWORD *)v9;
        int v24 = *(_DWORD *)(v9 + 8);
        do
        {
          float v25 = *(float *)(v9 + v22 + 16);
          v22 += 12;
        }
        while (v25 > v21);
        unint64_t v26 = v9 + v22;
        unint64_t v27 = a2;
        if (v22 == 12)
        {
          unint64_t v30 = a2;
          while (v26 < v30)
          {
            uint64_t v28 = (float *)(v30 - 12);
            float v31 = *(float *)(v30 - 8);
            v30 -= 12;
            if (v31 > v21) {
              goto LABEL_23;
            }
          }
          uint64_t v28 = (float *)v30;
        }
        else
        {
          do
          {
            uint64_t v28 = (float *)(v27 - 12);
            float v29 = *(float *)(v27 - 8);
            v27 -= 12;
          }
          while (v29 <= v21);
        }
LABEL_23:
        unint64_t v10 = v26;
        if (v26 < (unint64_t)v28)
        {
          float v32 = v28;
          do
          {
            int v33 = *(_DWORD *)v10;
            *(float *)unint64_t v10 = *v32;
            *(_DWORD *)float v32 = v33;
            int v34 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = v32[1];
            *((_DWORD *)v32 + 1) = v34;
            int v35 = *(_DWORD *)(v10 + 8);
            *(float *)(v10 + 8) = v32[2];
            *((_DWORD *)v32 + 2) = v35;
            do
            {
              float v36 = *(float *)(v10 + 16);
              v10 += 12;
            }
            while (v36 > v21);
            do
            {
              float v37 = *(v32 - 2);
              v32 -= 3;
            }
            while (v37 <= v21);
          }
          while (v10 < (unint64_t)v32);
        }
        if (v10 - 12 != v9)
        {
          *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 12);
          *(_DWORD *)(v9 + 4) = *(_DWORD *)(v10 - 8);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 4);
        }
        *(_DWORD *)(v10 - 12) = v23;
        *(float *)(v10 - 8) = v21;
        *(_DWORD *)(v10 - 4) = v24;
        if (v26 >= (unint64_t)v28) {
          break;
        }
LABEL_34:
        double result = std::__introsort<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *,false>(v9, v10 - 12, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v38 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(v9, v10 - 12);
      double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(v10, a2);
      if (result) {
        break;
      }
      if (!v38) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 12;
    if (!v38) {
      continue;
    }
    return result;
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(int *result, int *a2, int *a3)
{
  float v3 = *((float *)a2 + 1);
  float v4 = *((float *)result + 1);
  float v5 = *((float *)a3 + 1);
  if (v3 > v4)
  {
    uint64_t v6 = result + 2;
    float v7 = *(float *)result;
    if (v5 <= v3)
    {
      *double result = *a2;
      *(float *)a2 = v7;
      *((float *)result + 1) = v3;
      uint64_t v6 = a2 + 2;
      int v14 = a2[2];
      *((float *)a2 + 1) = v4;
      int v15 = result[2];
      result[2] = v14;
      a2[2] = v15;
      float v16 = *((float *)a3 + 1);
      if (v16 <= v4) {
        return result;
      }
      float v17 = *(float *)a2;
      *a2 = *a3;
      *(float *)a3 = v17;
      *((float *)a2 + 1) = v16;
    }
    else
    {
      *double result = *a3;
      *(float *)a3 = v7;
      *((float *)result + 1) = v5;
    }
    *((float *)a3 + 1) = v4;
    unint64_t v10 = a3 + 2;
    goto LABEL_10;
  }
  if (v5 > v3)
  {
    float v8 = *(float *)a2;
    *a2 = *a3;
    *(float *)a3 = v8;
    unint64_t v10 = a2 + 2;
    int v9 = a2[2];
    *((float *)a2 + 1) = v5;
    *((float *)a3 + 1) = v3;
    a2[2] = a3[2];
    a3[2] = v9;
    float v11 = *((float *)a2 + 1);
    float v12 = *((float *)result + 1);
    if (v11 > v12)
    {
      float v13 = *(float *)result;
      *double result = *a2;
      *(float *)a2 = v13;
      *((float *)result + 1) = v11;
      *((float *)a2 + 1) = v12;
      uint64_t v6 = result + 2;
LABEL_10:
      int v18 = *v6;
      int *v6 = *v10;
      *unint64_t v10 = v18;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v6 = *(float *)(a2 - 8);
      float v7 = *(float *)(a1 + 4);
      if (v6 > v7)
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v8;
        *(float *)(a1 + 4) = v6;
        *(float *)(a2 - 8) = v7;
        int v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)a1, (int *)(a1 + 12), (int *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(a1, a1 + 12, a1 + 24, a1 + 36);
      float v20 = *(float *)(a2 - 8);
      float v21 = *(float *)(a1 + 40);
      if (v20 > v21)
      {
        int v22 = *(_DWORD *)(a1 + 36);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v22;
        *(float *)(a1 + 40) = v20;
        *(float *)(a2 - 8) = v21;
        int v23 = *(_DWORD *)(a1 + 44);
        *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v23;
        float v24 = *(float *)(a1 + 40);
        float v25 = *(float *)(a1 + 28);
        if (v24 > v25)
        {
          int v26 = *(_DWORD *)(a1 + 24);
          int v28 = *(_DWORD *)(a1 + 32);
          int v27 = *(_DWORD *)(a1 + 36);
          *(_DWORD *)(a1 + 24) = v27;
          *(float *)(a1 + 28) = v24;
          *(float *)(a1 + 40) = v25;
          int v29 = *(_DWORD *)(a1 + 44);
          *(_DWORD *)(a1 + 32) = v29;
          *(_DWORD *)(a1 + 36) = v26;
          float v30 = *(float *)(a1 + 16);
          *(_DWORD *)(a1 + 44) = v28;
          if (v24 > v30)
          {
            int v31 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 12) = v27;
            *(float *)(a1 + 16) = v24;
            *(float *)(a1 + 28) = v30;
            int v32 = *(_DWORD *)(a1 + 20);
            *(_DWORD *)(a1 + 20) = v29;
            *(_DWORD *)(a1 + 24) = v31;
            *(_DWORD *)(a1 + 32) = v32;
            float v33 = *(float *)(a1 + 4);
            if (v24 > v33)
            {
              int v34 = *(_DWORD *)a1;
              *(_DWORD *)a1 = v27;
              *(float *)(a1 + 4) = v24;
              *(float *)(a1 + 16) = v33;
              int v35 = *(_DWORD *)(a1 + 8);
              *(_DWORD *)(a1 + 8) = v29;
              *(_DWORD *)(a1 + 12) = v34;
              *(_DWORD *)(a1 + 20) = v35;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)a1, (int *)(a1 + 12), (int *)(a1 + 24));
      uint64_t v11 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    float v14 = *(float *)(v11 + 4);
    if (v14 > *(float *)(v10 + 4))
    {
      int v15 = *(_DWORD *)v11;
      int v16 = *(_DWORD *)(v11 + 8);
      uint64_t v17 = v12;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        *(_DWORD *)(v18 + 36) = *(_DWORD *)(a1 + v17 + 24);
        *(_DWORD *)(v18 + 40) = *(_DWORD *)(a1 + v17 + 28);
        *(_DWORD *)(v18 + 44) = *(_DWORD *)(a1 + v17 + 32);
        if (v17 == -24) {
          break;
        }
        v17 -= 12;
        if (v14 <= *(float *)(v18 + 16))
        {
          uint64_t v19 = a1 + v17 + 36;
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      *(_DWORD *)uint64_t v19 = v15;
      *(float *)(v19 + 4) = v14;
      *(_DWORD *)(v19 + 8) = v16;
      if (++v13 == 8) {
        return v11 + 12 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 12;
    v11 += 12;
    if (v11 == a2) {
      return 1;
    }
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)a1, (int *)a2, (int *)a3);
  float v9 = *(float *)(a4 + 4);
  float v10 = *(float *)(a3 + 4);
  if (v9 > v10)
  {
    int v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    *(float *)(a3 + 4) = v9;
    *(float *)(a4 + 4) = v10;
    int v12 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v12;
    float v13 = *(float *)(a3 + 4);
    float v14 = *(float *)(a2 + 4);
    if (v13 > v14)
    {
      int v15 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v15;
      *(float *)(a2 + 4) = v13;
      *(float *)(a3 + 4) = v14;
      int v16 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v16;
      float v17 = *(float *)(a2 + 4);
      float v18 = *(float *)(a1 + 4);
      if (v17 > v18)
      {
        int v19 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v19;
        *(float *)(a1 + 4) = v17;
        *(float *)(a2 + 4) = v18;
        int v20 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v20;
      }
    }
  }
  return result;
}

void *std::vector<std::pair<float,std::vector<int>>>::__construct_one_at_end[abi:ne180100]<float &,std::vector<int>&>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v4 = *a2;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 8) = 0;
  BOOL result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v4 + 8), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(void *)(a1 + 8) = v4 + 32;
  return result;
}

void sub_1B1B2AE68(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<float,std::vector<int>>>::__emplace_back_slow_path<float &,std::vector<int>&>(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  int v19 = a1 + 2;
  if (v11) {
    int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    int v12 = 0;
  }
  float v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  float v17 = v13;
  float v18 = &v12[32 * v11];
  *(_DWORD *)float v13 = *a2;
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = 0;
  *((void *)v13 + 1) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v13 + 1, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  v17 += 32;
  std::vector<std::pair<float,std::vector<int>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1B1B2AF60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<float,std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<float,std::vector<int>>>,std::reverse_iterator<std::pair<float,std::vector<int>>*>,std::reverse_iterator<std::pair<float,std::vector<int>>*>,std::reverse_iterator<std::pair<float,std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<float,std::vector<int>>>,std::reverse_iterator<std::pair<float,std::vector<int>>*>,std::reverse_iterator<std::pair<float,std::vector<int>>*>,std::reverse_iterator<std::pair<float,std::vector<int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      int v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<int>>>,std::reverse_iterator<std::pair<float,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<int>>>,std::reverse_iterator<std::pair<float,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::pair<float,std::vector<int>>>::__init_with_size[abi:ne180100]<std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<float,std::vector<int>>>,std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1B2B138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<float,std::vector<int>>>,std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_DWORD *)uint64_t v4 = *(_DWORD *)v6;
      *(void *)(v4 + 16) = 0;
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 8) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v4 + 8), *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 2);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<int>>>,std::pair<float,std::vector<int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1B2B200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<int>>>,std::pair<float,std::vector<int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::pair<float,std::vector<int>>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::vector<std::pair<float,std::vector<int>>>::__construct_one_at_end[abi:ne180100]<std::pair<float,std::vector<int>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v3 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(void *)(a1 + 8) = v3 + 32;
  return result;
}

void sub_1B1B2B2DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<float,std::vector<int>>>::__push_back_slow_path<std::pair<float,std::vector<int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  int v15 = v11;
  int v16 = &v10[32 * v9];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 1) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v11 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  v15 += 32;
  std::vector<std::pair<float,std::vector<int>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1B2B3D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_1B1B2B44C(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::CEDecoder,std::allocator<kaldi::quasar::CEDecoder>,std::string &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x1F8uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::CEDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::quasar::CEDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1B2B4A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::CEDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::quasar::CEDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F610;
  kaldi::quasar::CEDecoder::CEDecoder(a1 + 3);
  return a1;
}

void sub_1B1B2B504(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEDecoder>::__on_zero_shared(uint64_t a1)
{
}

void _ZNSt3__115allocate_sharedB8ne180100IN3fst11SymbolTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  v0 = operator new(0x28uLL);
  _ZNSt3__120__shared_ptr_emplaceIN3fst11SymbolTableENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v0);
}

void sub_1B1B2B5D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_emplaceIN3fst11SymbolTableENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E1F0;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)(a1 + 3));
}

void sub_1B1B2B62C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SymbolTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E1F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::SymbolTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E1F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::SymbolTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xA8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1B2B72C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(void *a1, uint64_t *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60678;
  std::allocator<quasar::QsrTextSymbolTable>::construct[abi:ne180100]<quasar::QsrTextSymbolTable,std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B1B2B7A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::QsrTextSymbolTable>::construct[abi:ne180100]<quasar::QsrTextSymbolTable,std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding>(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  int v6 = *a4;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 96) = v5;
  *(void *)(a2 + 104) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *(_DWORD *)(a2 + 112) = v6;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 120) = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    *(_DWORD *)(a2 + 112) = v6;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 120) = 0;
  }
}

void _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  v0 = operator new(0x28uLL);
  _ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEEC2B8ne180100IJESC_Li0EEESC_DpOT_(v0);
}

void sub_1B1B2B83C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEEC2B8ne180100IJESC_Li0EEESC_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E6C0;
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B1B2B898(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E6C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E6C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v12 = *v7;
      if (*v7)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            uint64_t v7 = (unsigned __int8 **)v12;
          }
          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            long long v14 = *(unsigned __int8 **)v12;
            if (*(void *)v12)
            {
              int v15 = v12;
              while (1)
              {
                int v16 = std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v12 + 16, v14 + 16);
                float v17 = *(unsigned __int8 **)v15;
                if (!v16) {
                  break;
                }
                long long v14 = *(unsigned __int8 **)v17;
                int v15 = *(unsigned __int8 **)v15;
                if (!*(void *)v17) {
                  goto LABEL_32;
                }
              }
              long long v14 = *(unsigned __int8 **)v15;
              float v17 = v15;
LABEL_32:
              unint64_t v10 = v18;
            }
            else
            {
              float v17 = v12;
            }
            *uint64_t v7 = v14;
            *(void *)float v17 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (unsigned __int8 **)v12;
            unint64_t v8 = v13;
          }
          uint64_t v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    uint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

unint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<std::string const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x28uLL);
  unint64_t v8 = v7;
  *(void *)(a3 + 8) = v6;
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 16) = 0;
  uint8x8_t v9 = v7 + 16;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *uint8x8_t v9 = *(_OWORD *)a2;
    *((void *)v7 + 4) = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)v9);
  *((void *)v8 + 1) = result;
  return result;
}

void sub_1B1B2BD90(_Unwind_Exception *a1)
{
  void *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void fst::Factor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) & 0x80000000) != 0) {
    return;
  }
  float v73 = 0;
  unint64_t v74 = 0;
  uint64_t v75 = 0;
  int v72 = (char **)&v73;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DfsOrderVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1);
  uint64_t v6 = v73;
  uint64_t v7 = v73 + 1;
  if (v73 != v74 && v7 != v74)
  {
    int v9 = *v73;
    unint64_t v10 = v73 + 1;
    do
    {
      int v12 = *v10++;
      int v11 = v12;
      BOOL v13 = v9 < v12;
      if (v9 <= v12) {
        int v9 = v11;
      }
      if (v13) {
        uint64_t v6 = v7;
      }
      uint64_t v7 = v10;
    }
    while (v10 != v74);
  }
  int v14 = *v6;
  memset(&v71, 0, sizeof(v71));
  fst::GetStateProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, v14, &v71);
  unint64_t v15 = v14 + 1;
  std::vector<BOOL>::vector(&v70, v15);
  if ((v14 & 0x80000000) == 0)
  {
    unint64_t v16 = 0;
    std::vector<char>::pointer begin = v71.__begin_;
    unint64_t v18 = v70;
    do
    {
      int v19 = begin[v16];
      uint64_t v20 = 1 << v16;
      float v21 = &v18[8 * (v16 >> 6)];
      if (v19 == 20 || v19 == 148) {
        uint64_t v22 = *(void *)v21 | v20;
      }
      else {
        uint64_t v22 = *(void *)v21 & ~v20;
      }
      *(void *)float v21 = v22;
      ++v16;
    }
    while (v15 != v16);
  }
  std::vector<int>::vector(&v69, v15, &fst::kNoStateId);
  long long v66 = 0u;
  long long v67 = 0u;
  int v68 = 1065353216;
  std::string __p = 0;
  float v61 = 0;
  unint64_t v62 = 0;
  v54[0] = (uint64_t)&__p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v66, (int **)&__p, (uint64_t)&std::piecewise_construct, v54)+ 10) = 0;
  if (__p)
  {
    float v61 = (char *)__p;
    operator delete(__p);
  }
  int v50 = a3;
  memset(&v65, 0, sizeof(v65));
  int v23 = (char *)v73;
  if (v74 == v73)
  {
    int v25 = 1;
    goto LABEL_83;
  }
  unint64_t v24 = 0;
  int v25 = 1;
  do
  {
    unint64_t v26 = *(int *)&v23[4 * v24];
    if ((*(void *)&v70[(v26 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v26)) {
      goto LABEL_79;
    }
    unint64_t v51 = v24;
    std::vector<int>::pointer v52 = v69.__begin_;
    if (v69.__begin_[v26] == -1) {
      v52[v26] = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
    }
    unint64_t v64 = 0;
    (*(void (**)(uint64_t, unint64_t, void **))(*(void *)a1 + 136))(a1, v26, &__p);
    while (1)
    {
      if (!__p)
      {
        if (v64 >= v62) {
          goto LABEL_74;
        }
LABEL_32:
        int v27 = (float32x2_t *)&v61[20 * v64];
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      if (!__p) {
        goto LABEL_32;
      }
      int v27 = (float32x2_t *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
LABEL_33:
      float32x2_t v57 = *v27;
      float32x2_t v58 = v27[1];
      __int32 v28 = v27[2].i32[0];
      int v59 = v28;
      if (v57.i32[0])
      {
        std::vector<int>::resize(&v65, 1uLL);
        *v65.__begin_ = v57.i32[0];
        __int32 v28 = v59;
      }
      else
      {
        v65.__end_ = v65.__begin_;
      }
      for (unint64_t i = v28; ((*(void *)&v70[(i >> 3) & 0x1FFFFFFFFFFFFFF8] >> i) & 1) != 0; unint64_t i = v59)
      {
        uint64_t v56 = 0;
        (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
        if (v54[0]) {
          float v30 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(void *)v54[0] + 32))(v54[0]);
        }
        else {
          float v30 = (float32x2_t *)(v54[1] + 20 * v56);
        }
        float32x2_t v58 = vadd_f32(v58, v30[1]);
        unsigned int v31 = v30->i32[0];
        if (v30->i32[0])
        {
          std::vector<unsigned int>::pointer end = v65.__end_;
          if (v65.__end_ >= v65.__end_cap_.__value_)
          {
            std::vector<unsigned int>::pointer v34 = v65.__begin_;
            int64_t v35 = v65.__end_ - v65.__begin_;
            unint64_t v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            int64_t v37 = (char *)v65.__end_cap_.__value_ - (char *)v65.__begin_;
            if (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 1 > v36) {
              unint64_t v36 = v37 >> 1;
            }
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v38 = v36;
            }
            if (v38)
            {
              unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v65.__end_cap_, v38);
              std::vector<unsigned int>::pointer v34 = v65.__begin_;
              std::vector<unsigned int>::pointer end = v65.__end_;
              unsigned int v31 = v30->i32[0];
            }
            else
            {
              unint64_t v39 = 0;
            }
            float v40 = (unsigned int *)&v39[4 * v35];
            *float v40 = v31;
            float v33 = v40 + 1;
            while (end != v34)
            {
              unsigned int v41 = *--end;
              *--float v40 = v41;
            }
            v65.__begin_ = v40;
            v65.__end_ = v33;
            v65.__end_cap_.__value_ = (unsigned int *)&v39[4 * v38];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *v65.__end_ = v31;
            float v33 = end + 1;
          }
          v65.__end_ = v33;
        }
        int v59 = v30[2].i32[0];
        if (v54[0])
        {
          (*(void (**)(uint64_t))(*(void *)v54[0] + 8))(v54[0]);
        }
        else if (v55)
        {
          --*v55;
        }
      }
      std::vector<int>::pointer v42 = v69.__begin_;
      int v43 = v69.__begin_[i];
      if (v43 == -1)
      {
        int v43 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
        v42[i] = v43;
      }
      int v59 = v43;
      if (std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::find<std::vector<int>>(&v66, (int **)&v65))
      {
        v54[0] = (uint64_t)&v65;
        int v44 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v66, (int **)&v65, (uint64_t)&std::piecewise_construct, v54)+ 10);
      }
      else
      {
        v54[0] = (uint64_t)&v65;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v66, (int **)&v65, (uint64_t)&std::piecewise_construct, v54)+ 10) = v25;
        int v44 = v25++;
      }
      v57.i32[0] = v44;
      (*(void (**)(uint64_t, void, float32x2_t *))(*(void *)a2 + 208))(a2, v52[v26], &v57);
      if (__p) {
        (*(void (**)(void *))(*(void *)__p + 40))(__p);
      }
      else {
        ++v64;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
      goto LABEL_76;
    }
LABEL_74:
    if (v63) {
      --*v63;
    }
LABEL_76:
    (*(void (**)(void **__return_ptr, uint64_t, unint64_t))(*(void *)a1 + 32))(&__p, a1, v26);
    v57.i32[0] = HIDWORD(__p);
    LODWORD(v54[0]) = __p;
    int v77 = 2139095040;
    float v76 = INFINITY;
    v45.n128_u32[0] = __p;
    if (*(float *)&__p == INFINITY && (v45.n128_u32[0] = v57.i32[0], v57.f32[0] == v76))
    {
      unint64_t v24 = v51;
    }
    else
    {
      uint64_t v46 = v52[v26];
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, __n128))(*(void *)a1 + 32))(&v53, a1, v26, v45);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v46, &v53);
      unint64_t v24 = v51;
    }
LABEL_79:
    ++v24;
    int v23 = (char *)v73;
  }
  while (v24 < v74 - v73);
LABEL_83:
  int v47 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, v69.__begin_[v47]);
  std::vector<std::vector<int>>::resize(a3, v25);
  for (unint64_t j = (uint64_t **)v67; j; unint64_t j = (uint64_t **)*j)
  {
    int v49 = (char *)(*v50 + 24 * *((int *)j + 10));
    if (v49 != (char *)(j + 2)) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v49, (char *)j[2], (uint64_t)j[3], ((char *)j[3] - (char *)j[2]) >> 2);
    }
  }
  if (v65.__begin_)
  {
    v65.__end_ = v65.__begin_;
    operator delete(v65.__begin_);
  }
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table((uint64_t)&v66);
  if (v69.__begin_)
  {
    v69.__end_ = v69.__begin_;
    operator delete(v69.__begin_);
  }
  if (v70) {
    operator delete(v70);
  }
  if (v71.__begin_)
  {
    v71.__end_ = v71.__begin_;
    operator delete(v71.__begin_);
  }
  if (v73)
  {
    unint64_t v74 = v73;
    operator delete(v73);
  }
}

void sub_1B1B2C63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table((uint64_t)&a29);
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  unint64_t v38 = *(void **)(v36 - 184);
  if (v38) {
    operator delete(v38);
  }
  unint64_t v39 = *(void **)(v36 - 160);
  if (v39)
  {
    *(void *)(v36 - 152) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 128);
  if (v40)
  {
    *(void *)(v36 - 120) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::Invert<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1))
  {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1))
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::InvertMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(a1, v5);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 288))(a1, v3);
  if (v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

void fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>()
{
}

void sub_1B1B2CA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::GetStateProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, int a2, std::vector<char> *a3)
{
  a3->__end_ = a3->__begin_;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  unint64_t v7 = a2 + 1;
  __x[0] = 0;
  unint64_t v8 = a3->__end_ - a3->__begin_;
  if (v7 <= v8)
  {
    if (v7 < v8) {
      a3->__end_ = &a3->__begin_[v7];
    }
  }
  else
  {
    std::vector<char>::__append(a3, v7 - v8, __x);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  a3->__begin_[(int)result] |= 2u;
  if (a2 < 0) {
    return result;
  }
  uint64_t v9 = 0;
  do
  {
    std::vector<char>::pointer begin = a3->__begin_;
    unint64_t v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::vector<char>::value_type *))(*(void *)a1 + 136))(a1, v9, __x);
    while (1)
    {
      if (!*(void *)__x)
      {
        if (v20 >= v18) {
          goto LABEL_28;
        }
        goto LABEL_14;
      }
      if ((*(unsigned int (**)(void))(**(void **)__x + 24))(*(void *)__x)) {
        break;
      }
      if (*(void *)__x)
      {
        int v11 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)__x + 32))();
        goto LABEL_15;
      }
LABEL_14:
      int v11 = (_DWORD *)(v17 + 20 * v20);
LABEL_15:
      char v12 = begin[v9];
      if (*v11)
      {
        v12 |= 0x80u;
        begin[v9] = v12;
      }
      if (v11[1])
      {
        v12 |= 0x40u;
        begin[v9] = v12;
      }
      uint64_t v13 = (int)v11[4];
      std::vector<char>::pointer v14 = a3->__begin_;
      if ((v12 & 0x10) != 0)
      {
        v12 |= 0x20u;
        begin[v9] = v12;
      }
      begin[v9] = v12 | 0x10;
      char v15 = v14[v13];
      if ((v15 & 4) != 0)
      {
        v15 |= 8u;
        v14[v13] = v15;
      }
      v14[v13] = v15 | 4;
      if (*(void *)__x) {
        (*(void (**)(void))(**(void **)__x + 40))(*(void *)__x);
      }
      else {
        ++v20;
      }
    }
    if (*(void *)__x)
    {
      (*(void (**)(void))(**(void **)__x + 8))();
      goto LABEL_30;
    }
LABEL_28:
    if (v19) {
      --*v19;
    }
LABEL_30:
    uint64_t result = (uint64_t)(*(void *(**)(std::vector<char>::value_type *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(__x, a1, v9);
    int v24 = *(_DWORD *)__x;
    float v23 = *(float *)&__x[4];
    int v22 = 2139095040;
    float v21 = INFINITY;
    if (*(float *)__x != INFINITY || v23 != v21) {
      begin[v9] |= 1u;
    }
    ++v9;
  }
  while (v9 != v7);
  return result;
}

void sub_1B1B2CD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DfsOrderVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    memset(&v6, 0, sizeof(v6));
    long long v4 = 0u;
    long long v5 = 0u;
    long long v3 = 0u;
    fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MemoryPool(v2, 64);
  }
  return result;
}

void sub_1B1B2D568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::DfsOrderVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(uint64_t *a1, int a2)
{
  uint64_t v3 = *a1;
  long long v4 = *(_DWORD **)(*a1 + 8);
  long long v5 = (void *)(*a1 + 16);
  if ((unint64_t)v4 >= *v5)
  {
    unint64_t v7 = *(_DWORD **)v3;
    uint64_t v8 = ((uint64_t)v4 - *(void *)v3) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *v5 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v5, v11);
      unint64_t v7 = *(_DWORD **)v3;
      long long v4 = *(_DWORD **)(v3 + 8);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[4 * v8];
    uint64_t v14 = &v12[4 * v11];
    *(_DWORD *)uint64_t v13 = a2;
    std::vector<char> v6 = v13 + 4;
    while (v4 != v7)
    {
      int v15 = *--v4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *(void *)uint64_t v3 = v13;
    *(void *)(v3 + 8) = v6;
    *(void *)(v3 + 16) = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *long long v4 = a2;
    std::vector<char> v6 = v4 + 1;
  }
  *(void *)(v3 + 8) = v6;
  return 1;
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v7 = *a2;
  std::vector<char> v6 = a2[1];
  if (*a2 == v6)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = *a2;
    do
    {
      uint64_t v10 = *v9++;
      unint64_t v8 = v10 + 7853 * v8;
    }
    while (v9 != v6);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (!v11) {
    goto LABEL_26;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  unint64_t v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v4 = v8;
    if (v8 >= v11) {
      unint64_t v4 = v8 % v11;
    }
  }
  else
  {
    unint64_t v4 = (v11 - 1) & v8;
  }
  uint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v14) {
    goto LABEL_26;
  }
  int v15 = (void *)*v14;
  if (!*v14) {
    goto LABEL_26;
  }
  __int32 v28 = a4;
  size_t v16 = (char *)v6 - (char *)v7;
  do
  {
    unint64_t v17 = v15[1];
    if (v17 == v8)
    {
      uint64_t v18 = (const void *)v15[2];
      if (v15[3] - (void)v18 == v16 && !memcmp(v18, v7, v16)) {
        return v15;
      }
      goto LABEL_24;
    }
    if (v13 > 1)
    {
      if (v17 >= v11) {
        v17 %= v11;
      }
    }
    else
    {
      v17 &= v11 - 1;
    }
    if (v17 != v4) {
      break;
    }
LABEL_24:
    int v15 = (void *)*v15;
  }
  while (v15);
  a4 = v28;
LABEL_26:
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(a1, v8, a4, (uint64_t)&v29);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11) {
        unint64_t v4 = v8 % v11;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v8;
    }
  }
  int v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    void *v29 = *v25;
    *int v25 = v29;
  }
  else
  {
    void *v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v29)
    {
      unint64_t v26 = *(void *)(*v29 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v29;
    }
  }
  int v15 = v29;
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1B1B2D96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t v9 = *a3;
  void v8[3] = 0;
  void v8[4] = 0;
  v8[2] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 2, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
  *((_DWORD *)v8 + 10) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1B2DA14(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::find<std::vector<int>>(void *a1, int **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (*a2 == v2)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    long long v5 = *a2;
    do
    {
      uint64_t v6 = *v5++;
      unint64_t v4 = v6 + 7853 * v4;
    }
    while (v5 != v2);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v4;
    if (v4 >= *(void *)&v7) {
      unint64_t v10 = v4 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v4;
  }
  unint64_t v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint8x8_t v12 = (void *)*v11;
  if (*v11)
  {
    size_t v13 = (char *)v2 - (char *)v3;
    do
    {
      unint64_t v14 = v12[1];
      if (v4 == v14)
      {
        int v15 = (const void *)v12[2];
        if (v12[3] - (void)v15 == v13 && !memcmp(v15, v3, v13)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v7) {
            v14 %= *(void *)&v7;
          }
        }
        else
        {
          v14 &= *(void *)&v7 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      uint8x8_t v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

void sub_1B1B2DBCC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::InvertMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1)
{
  (*(void (**)(uint64_t, void))(*(void *)a1 + 280))(a1, 0);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 288))(a1, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v4, &v12);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 24))(v12))
        {
          long long v5 = (int32x2_t *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
          __int32 v6 = v5[2].i32[0];
          int32x2_t v7 = v5[1];
          v10[0] = vrev64_s32(*v5);
          v10[1] = v7;
          __int32 v11 = v6;
          (*(void (**)(uint64_t, void *))(*(void *)v12 + 88))(v12, v10);
          (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
        }
        if (v12) {
          (*(void (**)(void))(*(void *)v12 + 8))();
        }
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(v10, a1, v4);
        uint64_t v9 = v10[0];
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v4, &v9);
        uint64_t v4 = (v4 + 1);
      }
      while ((int)v4 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    unint64_t v8 = fst::InvertProperties(v3);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v8, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1B2DF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1] - *a2;
  if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) != v4 >> 2)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&v37, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&v37, "ERROR");
    }
    unsigned int v31 = fst::LogMessage::LogMessage((fst *)v52, (uint64_t)&v37);
    int v32 = (void *)fst::cerr(v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"StateSort: bad order vector size: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)v52);
    if (SHIBYTE(v39) < 0) {
      operator delete(v37);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) == -1) {
    return;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0xF3FFFFF0007, 0);
  unint64_t v6 = (uint64_t)(a2[1] - *a2) >> 2;
  LOBYTE(v37) = 0;
  std::vector<BOOL>::vector(v52, v6, (unsigned __int8 *)&v37);
  int v49 = 0;
  int v50 = 0;
  uint64_t v51 = 0;
  std::string __p = 0;
  int v47 = 0;
  uint64_t v48 = 0;
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 176))(a1, *(unsigned int *)(*a2 + 4 * v7));
  uint64_t v33 = v5;
  int v45 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v43);
  unint64_t v8 = (uint64_t *)&v49;
  p_p = &__p;
  int32x2_t v10 = vdup_n_s32(0x7F800000u);
  while (1)
  {
    if (!v43)
    {
      if (v45 >= v44) {
        goto LABEL_62;
      }
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v43 + 16))(v43)) {
      break;
    }
    if (v43)
    {
      int v11 = (*(uint64_t (**)(void))(*(void *)v43 + 24))();
      goto LABEL_10;
    }
LABEL_9:
    int v11 = v45;
LABEL_10:
    uint64_t v12 = v11;
    unint64_t v13 = (unint64_t)v11 >> 6;
    uint64_t v14 = 1 << v11;
    if (((1 << v11) & *((void *)v52[0] + v13)) == 0)
    {
      (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a1 + 32))(&v42, a1, v11);
      v8[1] = *v8;
      unint64_t v41 = 0;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v12, &v37);
      while (1)
      {
        if (v37)
        {
          if ((*(unsigned int (**)(void *))(*(void *)v37 + 24))(v37))
          {
            if (v37)
            {
              (*(void (**)(void))(*(void *)v37 + 8))();
            }
            else
            {
LABEL_26:
              if (v40) {
                --*v40;
              }
            }
            uint64_t v18 = v52[0];
            if ((v14 & *((void *)v52[0] + v13)) != 0)
            {
              float v19 = v8;
              goto LABEL_30;
            }
            float v20 = (void *)v10;
LABEL_35:
            uint64_t v34 = v14;
            unint64_t v35 = v13;
            float v19 = (uint64_t *)p_p;
            p_p = (void **)v8;
            uint64_t v21 = *(unsigned int *)(*a2 + 4 * v12);
            uint64_t v12 = (int)v21;
            unint64_t v13 = (unint64_t)(int)v21 >> 6;
            uint64_t v22 = 1 << v21;
            if (((1 << v21) & v18[v13]) != 0) {
              goto LABEL_36;
            }
            (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v37, a1, v21);
            float v20 = v37;
            v19[1] = *v19;
            unint64_t v41 = 0;
            (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v21, &v37);
LABEL_42:
            if (v37)
            {
              if ((*(unsigned int (**)(void *))(*(void *)v37 + 24))(v37))
              {
                if (v37)
                {
                  (*(void (**)(void))(*(void *)v37 + 8))();
                  goto LABEL_36;
                }
LABEL_56:
                if (v40) {
                  --*v40;
                }
LABEL_36:
                uint64_t v36 = v42;
                (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 184))(a1, v21, &v36);
                (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v21);
                unint64_t v23 = (char *)*p_p;
                if (p_p[1] != *p_p)
                {
                  uint64_t v24 = 0;
                  unint64_t v25 = 0;
                  do
                  {
                    unint64_t v26 = &v23[v24];
                    int64_t v37 = *(void **)v26;
                    uint64_t v38 = *((void *)v26 + 1);
                    uint64_t v27 = *((int *)v26 + 4);
                    LODWORD(v39) = v27;
                    LODWORD(v39) = *(_DWORD *)(*a2 + 4 * v27);
                    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v21, &v37);
                    ++v25;
                    unint64_t v23 = (char *)*p_p;
                    v24 += 20;
                  }
                  while (v25 < 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 2));
                }
                uint64_t v18 = v52[0];
                *((void *)v52[0] + v35) |= v34;
                std::vector<int>::pointer v42 = v20;
                uint64_t v14 = 1 << v21;
                unint64_t v8 = v19;
                if ((v22 & v18[v13]) != 0)
                {
LABEL_30:
                  unint64_t v8 = v19;
                  break;
                }
                goto LABEL_35;
              }
              if (v37)
              {
                uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v37 + 32))();
LABEL_48:
                unint64_t v29 = v19[1];
                if (v29 >= v19[2])
                {
                  uint64_t v30 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(v19, v28);
                }
                else
                {
                  *(void *)unint64_t v29 = *(void *)v28;
                  *(void *)(v29 + 8) = *(void *)(v28 + 8);
                  *(_DWORD *)(v29 + 16) = *(_DWORD *)(v28 + 16);
                  uint64_t v30 = v29 + 20;
                }
                v19[1] = v30;
                if (v37) {
                  (*(void (**)(void *))(*(void *)v37 + 40))(v37);
                }
                else {
                  ++v41;
                }
                goto LABEL_42;
              }
            }
            else if (v41 >= v39)
            {
              goto LABEL_56;
            }
            uint64_t v28 = v38 + 20 * v41;
            goto LABEL_48;
          }
          if (v37)
          {
            uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v37 + 32))();
            goto LABEL_18;
          }
        }
        else if (v41 >= v39)
        {
          goto LABEL_26;
        }
        uint64_t v15 = v38 + 20 * v41;
LABEL_18:
        unint64_t v16 = v8[1];
        if (v16 >= v8[2])
        {
          uint64_t v17 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(v8, v15);
        }
        else
        {
          *(void *)unint64_t v16 = *(void *)v15;
          *(void *)(v16 + 8) = *(void *)(v15 + 8);
          *(_DWORD *)(v16 + 16) = *(_DWORD *)(v15 + 16);
          uint64_t v17 = v16 + 20;
        }
        v8[1] = v17;
        if (v37) {
          (*(void (**)(void *))(*(void *)v37 + 40))(v37);
        }
        else {
          ++v41;
        }
      }
    }
    if (v43) {
      (*(void (**)(uint64_t))(*(void *)v43 + 32))(v43);
    }
    else {
      ++v45;
    }
  }
  if (v43) {
    (*(void (**)(void))(*(void *)v43 + 8))();
  }
LABEL_62:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v33, 0x3FFFFFFF0007);
  if (__p)
  {
    int v47 = __p;
    operator delete(__p);
  }
  if (v49)
  {
    int v50 = v49;
    operator delete(v49);
  }
  if (v52[0]) {
    operator delete(v52[0]);
  }
}

void sub_1B1B2E810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v30 - 128));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>()
{
}

void sub_1B1B2F190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(_DWORD **)(*a1 + 8);
  unint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    unint64_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v12);
      unint64_t v8 = *(_DWORD **)v4;
      uint64_t v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    int v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    int v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

uint64_t std::deque<kaldi::Vector<float>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    unint64_t v6 = &v2[v5 / 0xAA];
    uint64_t v7 = (uint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        kaldi::Vector<float>::Destroy(v7);
        v7 += 24;
        if (v7 - (void)*v6 == 4080)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 85;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 170;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    unint64_t v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<kaldi::Vector<float>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0xAA) {
    a2 = 1;
  }
  if (v2 < 0x154) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 170;
  }
  return v4 ^ 1u;
}

void std::deque<kaldi::Vector<float>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      int64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      int64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1B2F798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>,std::back_insert_iterator<std::vector<int>>,0>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  BOOL v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v4 = a2;
  do
    std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

void std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,std::string ()(std::vector<std::pair<float,std::vector<int>>>)>::~__func()
{
}

__n128 std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,std::string ()(std::vector<std::pair<float,std::vector<int>>>)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1F0A1CDD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,std::string ()(std::vector<std::pair<float,std::vector<int>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A1CDD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,std::string ()(std::vector<std::pair<float,std::vector<int>>>)>::operator()(uint64_t a1, uint64_t *a2)
{
  return quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,std::string ()(std::vector<std::pair<float,std::vector<int>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,std::string ()(std::vector<std::pair<float,std::vector<int>>>)>::target_type()
{
}

void *std::__function::__value_func<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5>,float ()(std::pair<float,std::vector<int>> const&)>::~__func()
{
}

void *std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5>,float ()(std::pair<float,std::vector<int>> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A1CE80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5>,float ()(std::pair<float,std::vector<int>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A1CE80;
  a2[1] = v2;
  return result;
}

float std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5>,float ()(std::pair<float,std::vector<int>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)a2
       / (float)(unint64_t)(((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2)
                                 - ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 2));
}

uint64_t std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5>,float ()(std::pair<float,std::vector<int>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5>,float ()(std::pair<float,std::vector<int>> const&)>::target_type()
{
}

void *std::__function::__value_func<float ()(std::pair<float,std::vector<int>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4>,void ()(std::vector<int> const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4>,void ()(std::vector<int> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1F0A1CE28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4>,void ()(std::vector<int> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A1CE28;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4>,void ()(std::vector<int> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 561))
  {
    quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2::operator()((uint64_t *)(a1 + 32), (int **)&__p, &v12);
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = *(void *)(v3 + 560);
    uint64_t v5 = *(unsigned int *)(**(void **)(a1 + 24) + 12);
    memset(v11, 0, sizeof(v11));
    memset(v10, 0, sizeof(v10));
    memset(v9, 0, sizeof(v9));
    (*(void (**)(uint64_t, std::vector<std::wstring> *, uint64_t, uint64_t, void, void, void ***, void ***, void ***, _WORD, uint64_t))(*(void *)v4 + 24))(v4, &v12, v5, 1, 0, 0, v11, v10, v9, 0, v3 + 1136);
    uint64_t v13 = v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
    v9[0] = (void **)v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v9);
    v10[0] = (void **)v11;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v10);
    v11[0] = (void **)&v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v11);
  }
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1B1B2FD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  *(void *)(v23 - 56) = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 56));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a19 = &a22;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a22 = v23 - 80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4>,void ()(std::vector<int> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4>,void ()(std::vector<int> const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(std::vector<int> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1B2FEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::back_insert_iterator<std::vector<quasar::Token>>::operator=[abi:ne180100](uint64_t **a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (*a1)[1];
  uint64_t v5 = *a1;
  unint64_t v7 = v5[2];
  uint64_t v6 = (uint64_t)(v5 + 2);
  if (v4 >= v7)
  {
    uint64_t v8 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(v3, a2);
  }
  else
  {
    std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>(v6, v4, a2);
    uint64_t v8 = v4 + 224;
  }
  v3[1] = v8;
  return a1;
}

uint64_t TChartInfo::TChartInfo(uint64_t result, void *a2, uint64_t a3)
{
  *(void *)__n128 result = 0;
  *(unsigned char *)(result + 424) = 0;
  uint64_t v3 = a2[3];
  *(void *)(result + 408) = v3;
  *(void *)(result + 416) = a3;
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 != 1)
  {
    uint64_t v5 = result - 8;
    do
    {
      if (*(unsigned char *)(*(void *)(*(void *)(result + 408) + 24) + v4 - 2))
      {
        *(void *)(v5 + 8 * v4) = 0;
      }
      else
      {
        *(void *)(v5 + 8 * v4) = a2[7];
        a2 = (void *)a2[6];
      }
      --v4;
    }
    while (v4 != 1);
  }
  return result;
}

uint64_t TParser::TParser(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A348C8;
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  *(void *)(a1 + 16) = &unk_1F0A348F0;
  *(void *)(a1 + 24) = 0;
  unint64_t v7 = (TAllocator *)(a1 + 48);
  TAllocator::TAllocator((TAllocator *)(a1 + 48), 2048);
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  *(void *)(a1 + 24) = 10;
  (*(void (**)(uint64_t))(*(void *)(a1 + 16) + 16))(v6);
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a3;
  if (*(void *)(a1 + 48) >= 0x801uLL) {
    TAllocator::clear(v7);
  }
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  return a1;
}

void sub_1B1B300C8(_Unwind_Exception *a1)
{
  uint64_t v5 = (void *)v1[20];
  if (v5)
  {
    v1[21] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)v1[17];
  if (v6)
  {
    v1[18] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)v1[14];
  if (v7)
  {
    v1[15] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v3;
  if (*v3)
  {
    v1[12] = v8;
    operator delete(v8);
  }
  TAllocator::clear(v2);
  _Unwind_Resume(a1);
}

void TParser::~TParser(TParser *this)
{
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 15) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 12) = v5;
    operator delete(v5);
  }
  TAllocator::clear((TParser *)((char *)this + 48));
}

void *TParser::getCell(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = a1 + 88;
  if (a3 >= (*(void *)(a1 + 96) - v6) >> 3)
  {
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 88), 2 * (a3 + 1));
    uint64_t v10 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v7, a3 + 1, &v10);
    goto LABEL_7;
  }
  __n128 result = *(void **)(v6 + 8 * a3);
  if (!result)
  {
LABEL_7:
    __n128 result = (void *)TAllocator::allocate((TAllocator *)(a1 + 48), 32);
    uint64_t v9 = *(void *)(*(void *)(a1 + 88) + 8 * a3);
    *__n128 result = a2;
    result[1] = 0;
    result[2] = 0;
    result[3] = v9;
    *(void *)(*(void *)(a1 + 88) + 8 * a3) = result;
    return result;
  }
  while (*result != a2)
  {
    __n128 result = (void *)result[3];
    if (!result) {
      goto LABEL_7;
    }
  }
  return result;
}

void *TParser::addOpenProduction(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[3];
  if (v3) {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 16) + 8 * a2[4]);
  }
  else {
    uint64_t v4 = a2 + 6;
  }
  __n128 result = TParser::getCell(a1, *v4, a2[2] + a2[1]);
  *a2 = result[1];
  result[1] = a2;
  return result;
}

void TParser::addClosedProduction(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40) && *(void *)(a2 + 24))
  {
    TChartInfo::TChartInfo((uint64_t)__p, (void *)a2, a1 + 48);
    (*(void (**)(void, void **))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), __p);
    if (v30) {
      return;
    }
    *(void **)(a2 + 40) = __p[0];
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4) {
    uint64_t v5 = (uint64_t *)(*(void *)(v4 + 16) + 8 * *(void *)(a2 + 32));
  }
  else {
    uint64_t v5 = (uint64_t *)(a2 + 48);
  }
  Cell = TParser::getCell(a1, *v5, *(void *)(a2 + 8));
  uint64_t v7 = (uint64_t *)Cell[2];
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      unint64_t v10 = v7[2];
      unint64_t v11 = *(void *)(a2 + 16);
      if (v10 < v11) {
        break;
      }
      if (v10 <= v11)
      {
        if (v7[5] == *(void *)(a2 + 40)
          || (uint64_t v12 = *(void *)(a1 + 40)) != 0
          && ((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v12 + 32))(v12, v7, a2) & 1) != 0)
        {
          if (!*(unsigned char *)(a1 + 8)) {
            return;
          }
          uint64_t v20 = *(void *)(a2 + 8);
          uint64_t v21 = *(void *)(a2 + 16);
          uint64_t v22 = *(void *)(a2 + 24);
          if (v22) {
            uint64_t v23 = *(void *)(v22 + 16) + 8 * *(void *)(a2 + 32);
          }
          else {
            uint64_t v23 = a2 + 48;
          }
          loggableUnicode(*(unsigned int **)(*(void *)v23 + 16), __p);
          if (v29 >= 0) {
            uint64_t v27 = __p;
          }
          else {
            uint64_t v27 = (void **)__p[0];
          }
          tknPrintf("Warning: ignoring duplicate parse for token range [%llu,%llu] with symbol %s (rules %llu and %llu)\n", v26, v20, v21, v27, **(void **)(a2 + 24), *(void *)v7[3]);
          goto LABEL_46;
        }
        ++v9;
      }
      else
      {
        uint64_t v8 = v7;
      }
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
    if (v9 > *(void *)(a1 + 24))
    {
      if (!*(unsigned char *)(a1 + 8)) {
        return;
      }
      uint64_t v13 = *(void *)(a2 + 24);
      if (v13) {
        uint64_t v14 = *(void *)(v13 + 16) + 8 * *(void *)(a2 + 32);
      }
      else {
        uint64_t v14 = a2 + 48;
      }
      loggableUnicode(*(unsigned int **)(*(void *)v14 + 16), __p);
      if (v29 >= 0) {
        unint64_t v25 = __p;
      }
      else {
        unint64_t v25 = (void **)__p[0];
      }
      tknPrintf("Warning: grammar over-generating symbol %s for token range [%llu,%llu]. Ignoring parse. (rule %llu)\n", v24, v25, *(void *)(a2 + 8), *(void *)(a2 + 16), **(void **)(a2 + 24));
LABEL_46:
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      return;
    }
    if (v8) {
      goto LABEL_24;
    }
  }
  uint64_t v8 = Cell + 2;
LABEL_24:
  *(void *)a2 = *v8;
  *uint64_t v8 = a2;
  for (unint64_t i = (void *)Cell[1]; i; unint64_t i = (void *)*i)
  {
    uint64_t v16 = (void *)TAllocator::allocate((TAllocator *)(a1 + 48), 64);
    uint64_t v17 = i[3];
    void v16[3] = v17;
    uint64_t v18 = i[4] + 1;
    while (*(unsigned __int8 *)(*(void *)(v17 + 24) + v18++))
      ;
    v16[4] = v18 - 1;
    void *v16 = 0;
    v16[1] = i[1];
    void v16[2] = *(void *)(a2 + 16) + i[2];
    v16[6] = i;
    v16[7] = a2;
    v16[5] = 0;
    ++*(void *)(a1 + 184);
    if (v17 && *(void *)(v17 + 8) != v18) {
      TParser::addOpenProduction(a1, v16);
    }
    else {
      TParser::addClosedProduction(a1, v16);
    }
  }
  TParser::startNewProductions((void *)a1, (void *)a2);
}

void sub_1B1B305D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *TParser::startNewProductions(void *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = a2[3];
  if (v4) {
    uint64_t v5 = (void **)(*(void *)(v4 + 16) + 8 * a2[4]);
  }
  else {
    uint64_t v5 = (void **)(a2 + 6);
  }
  uint64_t v6 = (void *)**v5;
  if (!v6) {
    return result;
  }
  do
  {
    uint64_t v7 = *(uint64_t **)(v3[11] + 8 * a2[1]);
    if (!v7) {
      goto LABEL_20;
    }
    while (1)
    {
      uint64_t v8 = *v7;
      if (v7[1])
      {
        unint64_t v9 = (void *)v3[4];
        if ((*(unsigned char *)(v8 + 8) & 4) == 0) {
          break;
        }
      }
      else
      {
        unint64_t v9 = (void *)v3[4];
      }
      if (v8 == v9[1]) {
        break;
      }
LABEL_12:
      uint64_t v7 = (uint64_t *)v7[3];
      if (!v7) {
        goto LABEL_20;
      }
    }
    unint64_t v10 = *(void *)(v8 + 24) + v9[8] * *(void *)(*(void *)(v6[2] + 8 * v6[1] - 8) + 24);
    if (((*(void *)(v9[15] + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v11 = TAllocator::allocate((TAllocator *)(v3 + 6), 64);
    uint64_t v12 = 0;
    *(void *)(v11 + 24) = v6;
    uint64_t v13 = v6[3];
    uint64_t v14 = 1;
    do
    {
      uint64_t v15 = v14;
      int v16 = *(unsigned __int8 *)(v13 + v12++);
      ++v14;
    }
    while (v16);
    while (*(unsigned __int8 *)(v13 + v15++))
      ;
    *(void *)(v11 + 32) = v15 - 1;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 1);
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 40) = 0;
    *(void *)(v11 + 48) = 0;
    *(void *)(v11 + 56) = a2;
    ++v3[23];
    if (v6[1] == v15) {
      __n128 result = (void *)TParser::addClosedProduction(v3, v11);
    }
    else {
      __n128 result = TParser::addOpenProduction((uint64_t)v3, (void *)v11);
    }
LABEL_20:
    uint64_t v6 = (void *)v6[4];
  }
  while (v6);
  return result;
}

uint64_t TParser::getAllProductions(void *a1, uint64_t a2)
{
  ++a1[25];
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)(a1 + 11), 0);
  Cell = TParser::getCell((uint64_t)a1, *(void *)(a1[4] + 8), 0);
  uint64_t v5 = a1[11];
  if (a1[12] != v5)
  {
    unint64_t v6 = 0;
    do
    {
      if (*(void *)(v5 + 8 * v6))
      {
        std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)(a1 + 14), 0);
        std::vector<unsigned long>::resize((uint64_t)(a1 + 17), 0);
        std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)(a1 + 20), 0);
        (*(void (**)(uint64_t, unint64_t, void *, void *, void *, void *))(*(void *)a2 + 16))(a2, v6, a1 + 14, a1 + 17, a1 + 20, a1 + 6);
        if (a1[14] != a1[15])
        {
          unint64_t v7 = 0;
          do
          {
            uint64_t v8 = (void *)TAllocator::allocate((TAllocator *)(a1 + 6), 64);
            uint64_t v9 = *(void *)(a1[14] + 8 * v7);
            v8[2] = *(void *)(a1[17] + 8 * v7);
            void v8[3] = 0;
            void v8[4] = 0;
            v8[5] = 0;
            *uint64_t v8 = 0;
            v8[1] = v6;
            v8[6] = v9;
            v8[7] = 0;
            v8[5] = *(void *)(a1[20] + 8 * v7);
            ++a1[23];
            TParser::addClosedProduction((uint64_t)a1, (uint64_t)v8);
            ++v7;
            uint64_t v10 = a1[15] - a1[14];
          }
          while (v7 < v10 >> 3);
          a1[24] += v10 >> 3;
        }
      }
      ++v6;
      uint64_t v5 = a1[11];
    }
    while (v6 < (a1[12] - v5) >> 3);
  }
  return Cell[2];
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

uint64_t *TParser::logChart(uint64_t *result, void *a2)
{
  if (result[12] != result[11])
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": terminals\n", 12);
      for (unint64_t i = *(void **)(v3[11] + 8 * v4); i; unint64_t i = (void *)i[3])
      {
        if ((*(unsigned char *)(*i + 8) & 4) != 0)
        {
          for (unint64_t j = (void *)i[2]; j; unint64_t j = (void *)*j)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
            TProduction::log((uint64_t)j, v3[5], a2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          }
        }
      }
      uint64_t v8 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": closed productions\n", 21);
      for (unint64_t k = *(void **)(v3[11] + 8 * v4); k; unint64_t k = (void *)k[3])
      {
        if ((*(unsigned char *)(*k + 8) & 4) == 0)
        {
          for (unint64_t m = (void *)k[2]; m; unint64_t m = (void *)*m)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
            TProduction::log((uint64_t)m, v3[5], a2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          }
        }
      }
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": open productions\n", 19);
      for (uint64_t n = *(void *)(v3[11] + 8 * v4); n; uint64_t n = *(void *)(n + 24))
      {
        for (iunint64_t i = *(void **)(n + 8); ii; iunint64_t i = (void *)*ii)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
          TProduction::log((uint64_t)ii, v3[5], a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        }
      }
      __n128 result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"----\n", 5);
      ++v4;
    }
    while (v4 < (v3[12] - v3[11]) >> 3);
  }
  return result;
}

void *TProduction::log(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(void *)(a1 + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"span ", 5);
    unint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    unint64_t v7 = operator<<(a3, *(unsigned int **)(*(void *)(*(void *)(*(void *)(a1 + 24) + 16)+ 8 * *(void *)(*(void *)(a1 + 24) + 8)- 8)+ 16));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" =", 2);
    if (*(void *)(*(void *)(a1 + 24) + 8) != 1)
    {
      unint64_t v8 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" ", 1);
        if (v8 == *(void *)(a1 + 32)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)". ", 2);
        }
        uint64_t v9 = *(void *)(a1 + 24);
        if (*(unsigned char *)(*(void *)(v9 + 24) + v8))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"[", 1);
          uint64_t v9 = *(void *)(a1 + 24);
        }
        uint64_t v10 = *(void *)(*(void *)(v9 + 16) + 8 * v8);
        if ((*(unsigned char *)(v10 + 8) & 4) != 0)
        {
          char v23 = 34;
          uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)&v23, 1);
          uint64_t v12 = operator<<(v11, *(unsigned int **)(*(void *)(*(void *)(*(void *)(a1 + 24) + 16) + 8 * v8) + 16));
          char v24 = 34;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v24, 1);
        }
        else
        {
          operator<<(a3, *(unsigned int **)(v10 + 16));
        }
        uint64_t v13 = *(void *)(a1 + 24);
        if (*(unsigned char *)(*(void *)(v13 + 24) + v8))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"]", 1);
          uint64_t v13 = *(void *)(a1 + 24);
        }
        ++v8;
      }
      while (v8 < *(void *)(v13 + 8) - 1);
    }
    BOOL v14 = 1;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" ", 1);
    uint64_t v15 = *(void *)(a1 + 24);
    if (v15) {
      BOOL v14 = *(void *)(a1 + 32) + 1 == *(void *)(v15 + 8);
    }
    if (a2)
    {
      if (v14) {
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 24))(a2, a1, a3);
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" // line ", 9);
    return (void *)std::ostream::operator<<();
  }
  else
  {
    char v21 = 96;
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)&v21, 1);
    uint64_t v18 = *(void *)(a1 + 24);
    if (v18) {
      uint64_t v19 = *(void *)(v18 + 16) + 8 * *(void *)(a1 + 32);
    }
    else {
      uint64_t v19 = a1 + 48;
    }
    uint64_t v20 = operator<<(v17, *(unsigned int **)(*(void *)v19 + 16));
    char v22 = 96;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v22, 1);
  }
}

void TParser::logTree(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a4 + 23) < 0)
  {
    if (!*(void *)(a4 + 8)) {
      goto LABEL_9;
    }
    uint64_t v12 = *(const char **)a4;
  }
  else
  {
    uint64_t v12 = (const char *)a4;
    if (!*(unsigned char *)(a4 + 23)) {
      goto LABEL_9;
    }
  }
  size_t v13 = strlen(v12);
  BOOL v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"|\n", 2);
  uint64_t v15 = (const char *)a4;
  if (*(char *)(a4 + 23) < 0) {
    uint64_t v15 = *(const char **)a4;
  }
  size_t v16 = strlen(v15);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"|", 1);
LABEL_9:
  if ((*(unsigned char *)(a3 + 8) & 4) != 0)
  {
    char v29 = operator<<(v28, *(unsigned int **)(a3 + 16));
    if (a2) {
      goto LABEL_11;
    }
  }
  else
  {
    operator<<(a6, *(unsigned int **)(a3 + 16));
    if (a2)
    {
LABEL_11:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)" ", 1);
      uint64_t v18 = *(void *)(a1 + 40);
      if (v18) {
        (*(void (**)(uint64_t, void *, void *))(*(void *)v18 + 24))(v18, a2, a6);
      }
      if (a2[3])
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)" // line ", 9);
        std::ostream::operator<<();
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"\n", 1);
      uint64_t v19 = (void *)a2[3];
      if (v19)
      {
        memset(v32, 0, sizeof(v32));
        uint64_t v20 = v19[1];
        unint64_t v21 = v20 - 1;
        if (v20 == 1)
        {
          if (a5) {
            char v30 = "|  ";
          }
          else {
            char v30 = "   ";
          }
          std::string::append((std::string *)a4, v30);
        }
        else
        {
          uint64_t v22 = v19[3];
          uint64_t v23 = v20 - 2;
          do
          {
            *((void *)v32 + v23) = 0;
            if (!*(unsigned char *)(v22 + v23))
            {
              *((void *)v32 + v23) = a2[7];
              a2 = (void *)a2[6];
            }
            --v23;
          }
          while (v23 != -1);
          if (a5) {
            char v24 = "|  ";
          }
          else {
            char v24 = "   ";
          }
          std::string::append((std::string *)a4, v24);
          uint64_t v25 = 0;
          do
          {
            uint64_t v26 = *((void *)v32 + v25);
            uint64_t v27 = *(void *)(v19[2] + 8 * v25);
            if (*(char *)(a4 + 23) < 0) {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
            }
            else {
              std::string __p = *(std::string *)a4;
            }
            TParser::logTree(a1, v26, v27, &__p, ++v25 < v21, a6);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          while (v21 != v25);
        }
      }
      return;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"? // skipped", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"\n", 1);
}

void sub_1B1B31138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void TParser::logTree(uint64_t a1, void *a2, void *a3)
{
  if (a2)
  {
    uint64_t v6 = a2[3];
    if (v6) {
      unint64_t v7 = (uint64_t *)(*(void *)(v6 + 16) + 8 * a2[4]);
    }
    else {
      unint64_t v7 = a2 + 6;
    }
    uint64_t v8 = *v7;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TParser::logTree(a1, a2, v8, (uint64_t)__p, 0, a3);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B1B311F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TProp<BOOL>::~TProp()
{
}

void TProp<unsigned long>::~TProp()
{
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      BOOL v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v13);
      uint64_t v8 = *a1;
      unint64_t v7 = a1[1];
    }
    else
    {
      BOOL v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    size_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

std::string *quasar::CircleRegion::CircleRegion(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = quasar::Location::UNDEFINED_COORDINATES;
  return this;
}

double quasar::CircleRegion::getMaxRadiusKm(quasar::CircleRegion *this)
{
  return *((double *)this + 3);
}

double quasar::CircleRegion::getLocation(quasar::CircleRegion *this)
{
  return *((double *)this + 4);
}

void quasar::CircleRegion::loadLatLon(quasar::CircleRegion *this, quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "lat");
  quasar::PTree::getAndEraseDouble((uint64_t)a2, (uint64_t)__p);
}

void sub_1B1B31474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::CircleRegion::loadAndEraseFromJson(quasar::CircleRegion *this, quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "max-radius-km");
  quasar::PTree::getAndEraseDouble((uint64_t)a2, (uint64_t)__p);
}

void sub_1B1B314FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::CircleRegion::shouldLoad(quasar::CircleRegion *this, const quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v3, "max-radius-km");
  quasar::PTree::getChildOptional((uint64_t)this, (uint64_t)v3);
}

void sub_1B1B315E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ContextDependency::Compute(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2[1] - *a2;
  std::string __p = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(&__p, ((v8 << 30) + 0x100000000) >> 32);
  uint64_t v9 = (a3 << 32) | 0xFFFFFFFFLL;
  unint64_t v10 = v35;
  if (v35 >= v36)
  {
    uint64_t v12 = ((char *)v35 - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = ((char *)v36 - (unsigned char *)__p) >> 2;
    if (v13 <= v12 + 1) {
      unint64_t v13 = v12 + 1;
    }
    if ((unint64_t)((char *)v36 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v36, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    size_t v16 = (uint64_t *)&v15[8 * v12];
    uint64_t v17 = &v15[8 * v14];
    uint64_t *v16 = v9;
    uint64_t v11 = (unint64_t *)(v16 + 1);
    uint64_t v19 = (char *)__p;
    uint64_t v18 = (char *)v35;
    if (v35 != __p)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *--size_t v16 = v20;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)__p;
    }
    std::string __p = v16;
    unint64_t v35 = (uint64_t *)v11;
    uint64_t v36 = (uint64_t *)v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *unint64_t v35 = v9;
    uint64_t v11 = (unint64_t *)(v10 + 1);
  }
  unint64_t v35 = (uint64_t *)v11;
  if (*(int *)(a1 + 8) >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a2;
    do
    {
      unint64_t v23 = v21 | ((unint64_t)*(unsigned int *)(v22 + 4 * v21) << 32);
      if (v11 >= (unint64_t *)v36)
      {
        uint64_t v24 = ((char *)v11 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v24 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v25 = ((char *)v36 - (unsigned char *)__p) >> 2;
        if (v25 <= v24 + 1) {
          unint64_t v25 = v24 + 1;
        }
        if ((unint64_t)((char *)v36 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v36, v26);
        }
        else {
          uint64_t v27 = 0;
        }
        uint64_t v28 = (unint64_t *)&v27[8 * v24];
        *uint64_t v28 = v23;
        uint64_t v11 = v28 + 1;
        char v30 = (char *)__p;
        char v29 = (char *)v35;
        if (v35 != __p)
        {
          do
          {
            unint64_t v31 = *((void *)v29 - 1);
            v29 -= 8;
            *--uint64_t v28 = v31;
          }
          while (v29 != v30);
          char v29 = (char *)__p;
        }
        std::string __p = v28;
        unint64_t v35 = (uint64_t *)v11;
        uint64_t v36 = (uint64_t *)&v27[8 * v26];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *v11++ = v23;
      }
      unint64_t v35 = (uint64_t *)v11;
      uint64_t v22 = *a2;
      ++v21;
    }
    while (v21 < *(int *)(a1 + 8));
  }
  uint64_t v32 = (***(uint64_t (****)(void, void **, uint64_t))(a1 + 16))(*(void *)(a1 + 16), &__p, a4);
  if (__p)
  {
    unint64_t v35 = (uint64_t *)__p;
    operator delete(__p);
  }
  return v32;
}

void sub_1B1B318A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ContextDependency::Read(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 72))(v6);
    *(void *)(a1 + 16) = 0;
  }
  kaldi::ExpectToken(a2, a3, "ContextDependency");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 8);
  kaldi::ReadBasicType<int>(a2, a3, a1 + 12);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&v20);
  int v7 = HIBYTE(v22);
  if (SHIBYTE(v22) < 0)
  {
    if (v21 != 8) {
      goto LABEL_15;
    }
    uint64_t v8 = v20;
  }
  else
  {
    if (HIBYTE(v22) != 8)
    {
LABEL_10:
      if (v7 != 5) {
        goto LABEL_25;
      }
      uint64_t v9 = (void **)&v20;
      goto LABEL_17;
    }
    uint64_t v8 = (void **)&v20;
  }
  if (*v8 == (void *)0x6874676E654C6F54)
  {
    uint64_t v10 = kaldi::EventMap::Read(a2, a3);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 72))(v10);
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&v20);
    int v7 = HIBYTE(v22);
    if ((v22 & 0x8000000000000000) == 0) {
      goto LABEL_10;
    }
  }
  else if ((v22 & 0x8000000000000000) == 0)
  {
    goto LABEL_10;
  }
LABEL_15:
  if (v21 != 5) {
    goto LABEL_25;
  }
  uint64_t v9 = v20;
LABEL_17:
  int v11 = *(_DWORD *)v9;
  int v12 = *((unsigned __int8 *)v9 + 4);
  if (v11 != 1682992980 || v12 != 102)
  {
LABEL_25:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Got unexpected token ", 21);
    if (v22 >= 0) {
      size_t v16 = (void **)&v20;
    }
    else {
      size_t v16 = v20;
    }
    if (v22 >= 0) {
      uint64_t v17 = HIBYTE(v22);
    }
    else {
      uint64_t v17 = v21;
    }
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" reading context-dependency object.", 35);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  uint64_t v14 = kaldi::EventMap::Read(a2, a3);
  kaldi::ExpectToken(a2, a3, "EndContextDependency");
  *(void *)(a1 + 16) = v14;
  if (SHIBYTE(v22) < 0) {
    operator delete(v20);
  }
}

void sub_1B1B31B00(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 49) < 0) {
    operator delete(*(void **)(v1 - 72));
  }
  _Unwind_Resume(a1);
}

void kaldi::ContextDependency::EnumeratePairs(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v95, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  std::string __p = 0;
  int v93 = 0;
  int v94 = 0;
  unint64_t v89 = 0;
  unint64_t v90 = 0;
  uint64_t v91 = 0;
  int64_t v86 = 0;
  int64_t v87 = 0;
  uint64_t v88 = 0;
  int v11 = *(_DWORD *)(a1 + 8);
  uint64_t v83 = a4;
  int v12 = 0;
  if (v11)
  {
    for (unint64_t i = 0; i < v11; ++i)
    {
      unsigned int v14 = *(_DWORD *)(*(void *)a5 + 4 * i);
      if ((v14 & 0x80000000) == 0)
      {
        unint64_t v15 = i | ((unint64_t)v14 << 32);
        if (v12 >= (unint64_t *)v94)
        {
          uint64_t v16 = ((char *)v12 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v16 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v17 = (v94 - (unsigned char *)__p) >> 2;
          if (v17 <= v16 + 1) {
            unint64_t v17 = v16 + 1;
          }
          if ((unint64_t)(v94 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18) {
            uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v94, v18);
          }
          else {
            uint64_t v19 = 0;
          }
          uint64_t v20 = (unint64_t *)&v19[8 * v16];
          *uint64_t v20 = v15;
          int v12 = v20 + 1;
          uint64_t v22 = (char *)__p;
          uint64_t v21 = (char *)v93;
          if (v93 != __p)
          {
            do
            {
              unint64_t v23 = *((void *)v21 - 1);
              v21 -= 8;
              *--uint64_t v20 = v23;
            }
            while (v21 != v22);
            uint64_t v21 = (char *)__p;
          }
          std::string __p = v20;
          int v93 = v12;
          int v94 = &v19[8 * v18];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *v12++ = v15;
        }
        int v93 = v12;
        int v11 = *(_DWORD *)(a1 + 8);
      }
    }
    uint64_t v24 = v94;
    uint64_t v25 = (a4 << 32) | 0xFFFFFFFFLL;
    if (v12 < (unint64_t *)v94)
    {
      *int v12 = v25;
      unint64_t v26 = v12 + 1;
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = (a4 << 32) | 0xFFFFFFFFLL;
  }
  uint64_t v27 = ((char *)v12 - (unsigned char *)__p) >> 3;
  if ((unint64_t)(v27 + 1) >> 61) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v28 = v24 - (unsigned char *)__p;
  uint64_t v29 = v28 >> 2;
  if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
    uint64_t v29 = v27 + 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v30 = v29;
  }
  if (v30) {
    unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v94, v30);
  }
  else {
    unint64_t v31 = 0;
  }
  uint64_t v32 = (uint64_t *)&v31[8 * v27];
  uint64_t v33 = &v31[8 * v30];
  uint64_t *v32 = v25;
  unint64_t v26 = (unint64_t *)(v32 + 1);
  unint64_t v35 = (char *)__p;
  uint64_t v34 = (char *)v93;
  if (v93 != __p)
  {
    do
    {
      uint64_t v36 = *((void *)v34 - 1);
      v34 -= 8;
      *--uint64_t v32 = v36;
    }
    while (v34 != v35);
    uint64_t v34 = (char *)__p;
  }
  std::string __p = v32;
  int v93 = v26;
  int v94 = v33;
  if (v34) {
    operator delete(v34);
  }
LABEL_39:
  unint64_t v37 = 126 - 2 * __clz(((char *)v26 - (unsigned char *)__p) >> 3);
  int v93 = v26;
  if (v26 == __p) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = v37;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>((uint64_t)__p, (int *)v26, (uint64_t)&v85, v38, 1);
  (*(void (**)(void, void **, void **))(**(void **)(a1 + 16) + 8))(*(void *)(a1 + 16), &__p, &v89);
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v39 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>((int *)v89, v90);
  if (v90 != v39) {
    unint64_t v90 = v39;
  }
  uint64_t v40 = (unint64_t *)__p;
  int v93 = (unint64_t *)__p;
  int v41 = *(_DWORD *)(a1 + 8);
  if (v41)
  {
    for (unint64_t j = 0; j < v41; ++j)
    {
      unsigned int v43 = *(_DWORD *)(*(void *)a5 + 4 * j);
      if ((v43 & 0x80000000) == 0)
      {
        unint64_t v44 = j | ((unint64_t)v43 << 32);
        if (v40 >= (unint64_t *)v94)
        {
          uint64_t v45 = ((char *)v40 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v45 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v46 = (v94 - (unsigned char *)__p) >> 2;
          if (v46 <= v45 + 1) {
            unint64_t v46 = v45 + 1;
          }
          if ((unint64_t)(v94 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v46;
          }
          if (v47) {
            uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v94, v47);
          }
          else {
            uint64_t v48 = 0;
          }
          uint64_t v49 = (unint64_t *)&v48[8 * v45];
          *uint64_t v49 = v44;
          uint64_t v40 = v49 + 1;
          uint64_t v51 = (char *)__p;
          uint64_t v50 = (char *)v93;
          if (v93 != __p)
          {
            do
            {
              unint64_t v52 = *((void *)v50 - 1);
              v50 -= 8;
              *--uint64_t v49 = v52;
            }
            while (v50 != v51);
            uint64_t v50 = (char *)__p;
          }
          std::string __p = v49;
          int v93 = v40;
          int v94 = &v48[8 * v47];
          if (v50) {
            operator delete(v50);
          }
        }
        else
        {
          *v40++ = v44;
        }
        int v93 = v40;
        int v41 = *(_DWORD *)(a1 + 8);
      }
    }
  }
  uint64_t v53 = (a3 << 32) | 0xFFFFFFFFLL;
  if (v40 >= (unint64_t *)v94)
  {
    uint64_t v55 = ((char *)v40 - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v55 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v56 = (v94 - (unsigned char *)__p) >> 2;
    if (v56 <= v55 + 1) {
      unint64_t v56 = v55 + 1;
    }
    if ((unint64_t)(v94 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v57 = v56;
    }
    if (v57) {
      float32x2_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v94, v57);
    }
    else {
      float32x2_t v58 = 0;
    }
    int v59 = (uint64_t *)&v58[8 * v55];
    int v60 = &v58[8 * v57];
    *int v59 = v53;
    long long v54 = (unint64_t *)(v59 + 1);
    unint64_t v62 = (char *)__p;
    float v61 = (char *)v93;
    if (v93 != __p)
    {
      do
      {
        uint64_t v63 = *((void *)v61 - 1);
        v61 -= 8;
        *--int v59 = v63;
      }
      while (v61 != v62);
      float v61 = (char *)__p;
    }
    std::string __p = v59;
    int v93 = v54;
    int v94 = v60;
    if (v61) {
      operator delete(v61);
    }
  }
  else
  {
    *uint64_t v40 = v53;
    long long v54 = v40 + 1;
  }
  unint64_t v64 = 126 - 2 * __clz(((char *)v54 - (unsigned char *)__p) >> 3);
  int v93 = v54;
  if (v54 == __p) {
    uint64_t v65 = 0;
  }
  else {
    uint64_t v65 = v64;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>((uint64_t)__p, (int *)v54, (uint64_t)&v85, v65, 1);
  (*(void (**)(void, void **, void **))(**(void **)(a1 + 16) + 8))(*(void *)(a1 + 16), &__p, &v86);
  std::__sort<std::__less<int,int> &,int *>();
  long long v66 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>((int *)v86, v87);
  if (v87 != v66) {
    int64_t v87 = v66;
  }
  int v68 = v89;
  long long v67 = v90;
  if ((char *)v90 - (unsigned char *)v89 == 4 || (char *)v66 - (unsigned char *)v86 == 4)
  {
    if (v90 != v89)
    {
      unint64_t v69 = 0;
      float v70 = (int *)v86;
      do
      {
        if (v66 == v70)
        {
          long long v66 = v70;
        }
        else
        {
          unint64_t v71 = 0;
          do
          {
            unint64_t v85 = *((unsigned int *)v89 + v69) | ((unint64_t)v70[v71] << 32);
            std::__hash_table<std::pair<int,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<int,int>>(a6, (int *)&v85, &v85);
            ++v71;
            float v70 = (int *)v86;
            long long v66 = v87;
          }
          while (v71 < ((char *)v87 - (unsigned char *)v86) >> 2);
          int v68 = v89;
          long long v67 = v90;
        }
        ++v69;
      }
      while (v69 < ((char *)v67 - v68) >> 2);
    }
  }
  else
  {
    uint64_t v72 = *(unsigned int *)(a1 + 8);
    int v73 = v72 - 1;
    if ((int)v72 < 1)
    {
      int v75 = 0;
      uint64_t v78 = v83;
      uint64_t v79 = a3;
    }
    else
    {
      uint64_t v74 = 0;
      int v75 = 0;
      int v76 = *(_DWORD *)(a1 + 12);
      int v77 = *(_DWORD **)a5;
      uint64_t v78 = v83;
      uint64_t v79 = a3;
      do
      {
        if (v76 >= 0) {
          int v80 = v76;
        }
        else {
          int v80 = -v76;
        }
        if (v77[v74] == -1 && v80 < v73)
        {
          int v75 = v74;
          int v73 = v80;
        }
        ++v74;
        --v76;
      }
      while (v72 != v74);
    }
    *((_DWORD *)v95 + v75) = 0;
    kaldi::ContextDependency::EnumeratePairs(a1, a2, v79, v78, &v95, a6);
    uint64_t v81 = *a2;
    if (a2[1] != *a2)
    {
      unint64_t v82 = 0;
      do
      {
        *((_DWORD *)v95 + v75) = *(_DWORD *)(v81 + 4 * v82);
        kaldi::ContextDependency::EnumeratePairs(a1, a2, v79, v78, &v95, a6);
        ++v82;
        uint64_t v81 = *a2;
      }
      while (v82 < (a2[1] - *a2) >> 2);
    }
  }
  if (v86)
  {
    int64_t v87 = (int *)v86;
    operator delete(v86);
  }
  if (v89)
  {
    unint64_t v90 = (int *)v89;
    operator delete(v89);
  }
  if (__p)
  {
    int v93 = (unint64_t *)__p;
    operator delete(__p);
  }
  if (v95)
  {
    uint64_t v96 = v95;
    operator delete(v95);
  }
}

void sub_1B1B32224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ContextDependency::GetPdfInfo(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (int *)*a2;
  int v7 = (int *)a2[1];
  uint64_t v8 = *a2 + 4;
  if ((int *)*a2 != v7 && v8 != (void)v7)
  {
    int v10 = *v6;
    int v11 = (int *)(*a2 + 4);
    do
    {
      int v13 = *v11++;
      int v12 = v13;
      BOOL v14 = v10 < v13;
      if (v10 <= v13) {
        int v10 = v12;
      }
      if (v14) {
        uint64_t v6 = (int *)v8;
      }
      uint64_t v8 = (uint64_t)v11;
    }
    while (v11 != v7);
  }
  std::vector<std::vector<std::vector<std::pair<int,int>>>>::resize(a4, *v6 + 1);
  std::vector<int>::vector(&v55, *(int *)(a1 + 8));
  uint64_t v15 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v16 = 0;
    uint64_t v17 = *a3;
    do
    {
      uint64_t v18 = *(int *)(v15 + 4 * v16);
      std::vector<std::vector<std::pair<int,int>>>::resize((uint64_t *)(*a4 + 24 * v18), (uint64_t)(*(void *)(v17 + 24 * v18 + 8) - *(void *)(v17 + 24 * v18)) >> 3);
      uint64_t v17 = *a3;
      uint64_t v19 = *(void *)(*a3 + 24 * (int)v18);
      if (*(void *)(*a3 + 24 * (int)v18 + 8) != v19)
      {
        unint64_t v49 = v16;
        unint64_t v20 = 0;
        do
        {
          uint64_t v21 = (unsigned int *)(v19 + 8 * v20);
          uint64_t v23 = *v21;
          uint64_t v22 = v21[1];
          std::vector<int>::pointer begin = v55.__begin_;
          if (v55.__end_ != v55.__begin_)
          {
            uint64_t v25 = 0;
            unint64_t v26 = v55.__end_ - v55.__begin_;
            if (v26 <= 1) {
              unint64_t v26 = 1;
            }
            do
            {
              if (v25 == *(_DWORD *)(a1 + 12)) {
                int v27 = v18;
              }
              else {
                int v27 = -1;
              }
              begin[v25++] = v27;
            }
            while (v26 != v25);
          }
          long long v52 = 0u;
          long long v53 = 0u;
          int v54 = 1065353216;
          kaldi::ContextDependency::EnumeratePairs(a1, a2, v22, v23, (uint64_t)&v55, (uint64_t)&v52);
          for (unint64_t i = (void *)v53; i; unint64_t i = (void *)*i)
          {
            uint64_t v29 = (char **)(*(void *)(*a4 + 24 * (int)v18) + 24 * v20);
            unint64_t v30 = (void **)(v29 + 1);
            unint64_t v31 = v29[1];
            uint64_t v33 = v29 + 2;
            unint64_t v32 = (unint64_t)v29[2];
            if ((unint64_t)v31 >= v32)
            {
              uint64_t v35 = (v31 - *v29) >> 3;
              if ((unint64_t)(v35 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v36 = v32 - (void)*v29;
              uint64_t v37 = v36 >> 2;
              if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
                uint64_t v37 = v35 + 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v37;
              }
              if (v38) {
                uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v33, v38);
              }
              else {
                uint64_t v39 = 0;
              }
              uint64_t v40 = &v39[8 * v35];
              *(void *)uint64_t v40 = i[2];
              uint64_t v34 = v40 + 8;
              int v41 = (char *)*v30;
              uint64_t v42 = *v29;
              if (*v30 != *v29)
              {
                do
                {
                  uint64_t v43 = *((void *)v41 - 1);
                  v41 -= 8;
                  *((void *)v40 - 1) = v43;
                  v40 -= 8;
                }
                while (v41 != v42);
                int v41 = *v29;
              }
              char *v29 = v40;
              *unint64_t v30 = v34;
              *uint64_t v33 = &v39[8 * v38];
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(void *)unint64_t v31 = i[2];
              uint64_t v34 = v31 + 8;
            }
            *unint64_t v30 = v34;
          }
          unint64_t v44 = (uint64_t *)(*(void *)(*a4 + 24 * (int)v18) + 24 * v20);
          uint64_t v45 = *v44;
          unint64_t v46 = (int *)v44[1];
          unint64_t v47 = 126 - 2 * __clz(((uint64_t)v46 - *v44) >> 3);
          if (v46 == (int *)v45) {
            uint64_t v48 = 0;
          }
          else {
            uint64_t v48 = v47;
          }
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>(v45, v46, (uint64_t)&v56, v48, 1);
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v52);
          ++v20;
          uint64_t v17 = *a3;
          uint64_t v19 = *(void *)(*a3 + 24 * (int)v18);
        }
        while (v20 < (*(void *)(*a3 + 24 * (int)v18 + 8) - v19) >> 3);
        unint64_t v16 = v49;
      }
      ++v16;
      uint64_t v15 = *a2;
    }
    while (v16 < (a2[1] - *a2) >> 2);
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
}

void sub_1B1B32580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<std::vector<std::pair<int,int>>>>::resize(uint64_t *a1, unint64_t a2)
{
  long long v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<std::pair<int,int>>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::pair<int,int>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::pair<int,int>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        int v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void kaldi::ContextDependency::GetPdfInfo(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  uint64_t v5 = a1;
  unint64_t v71 = 0;
  uint64_t v72 = 0;
  unint64_t v73 = 0;
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  std::vector<std::vector<std::pair<int,int>>>::resize(a4, v6);
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(unsigned int *)(v7 + 4 * v8);
      int v10 = v71;
      uint64_t v72 = v71;
      unint64_t v11 = *(unsigned int *)(v5 + 12) | (unint64_t)(v9 << 32);
      if ((unint64_t)v71 >= v73)
      {
        unint64_t v13 = (uint64_t)(v73 - (void)v71) >> 2;
        if (v13 <= 1) {
          unint64_t v13 = 1;
        }
        if (v73 - (unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        uint64_t v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v73, v14);
        *uint64_t v15 = v11;
        int v12 = v15 + 1;
        uint64_t v18 = v71;
        uint64_t v17 = v72;
        uint64_t v19 = (char *)v15;
        if (v72 != v71)
        {
          do
          {
            uint64_t v20 = *--v17;
            *((void *)v19 - 1) = v20;
            v19 -= 8;
          }
          while (v17 != v18);
          uint64_t v17 = v71;
        }
        unint64_t v71 = (unint64_t *)v19;
        uint64_t v72 = v15 + 1;
        unint64_t v73 = (unint64_t)&v15[v16];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        unint64_t *v71 = v11;
        int v12 = v10 + 1;
      }
      uint64_t v72 = v12;
      uint64_t v66 = *(unsigned int *)(*a3 + 4 * (int)v9);
      if ((int)v66 >= 1)
      {
        uint64_t v21 = 0;
        uint64_t v64 = v9;
        unint64_t v65 = v8;
        do
        {
          std::vector<std::pair<int,int>>::resize((uint64_t)&v71, 2uLL);
          uint64_t v22 = (int *)v71;
          uint64_t v23 = (int *)v72;
          unint64_t v24 = 126 - 2 * __clz(v72 - v71);
          *(_DWORD *)unint64_t v71 = *(_DWORD *)(v5 + 12);
          v22[1] = v9;
          v22[2] = -1;
          v22[3] = v21;
          if (v23 == v22) {
            uint64_t v25 = 0;
          }
          else {
            uint64_t v25 = v24;
          }
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>((uint64_t)v22, v23, (uint64_t)v67, v25, 1);
          int v68 = 0;
          unint64_t v69 = 0;
          uint64_t v70 = 0;
          (*(void (**)(void, unint64_t **, int **))(**(void **)(v5 + 16) + 8))(*(void *)(v5 + 16), &v71, &v68);
          std::__sort<std::__less<int,int> &,int *>();
          unint64_t v26 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>(v68, v69);
          int v27 = v68;
          if (v69 != v26) {
            unint64_t v69 = v26;
          }
          if (v68 == v26 && kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v67);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"ContextDependency::GetPdfInfo, no pdfs returned for position ", 61);
            uint64_t v28 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" of phone ", 10);
            uint64_t v29 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)".   Continuing but this is a serious error.", 43);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v67);
            int v27 = v68;
            unint64_t v26 = v69;
          }
          uint64_t v30 = v5;
          if (v26 != v27)
          {
            unint64_t v31 = 0;
            uint64_t v32 = (v21 << 32) | v9;
            do
            {
              uint64_t v33 = (char **)(*a4 + 24 * v27[v31]);
              uint64_t v35 = (void **)(v33 + 1);
              uint64_t v34 = (uint64_t *)v33[1];
              uint64_t v37 = v33 + 2;
              unint64_t v36 = (unint64_t)v33[2];
              if ((unint64_t)v34 >= v36)
              {
                uint64_t v39 = ((char *)v34 - *v33) >> 3;
                if ((unint64_t)(v39 + 1) >> 61) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v40 = v36 - (void)*v33;
                uint64_t v41 = v40 >> 2;
                if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
                  uint64_t v41 = v39 + 1;
                }
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v42 = v41;
                }
                if (v42) {
                  uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v37, v42);
                }
                else {
                  uint64_t v43 = 0;
                }
                unint64_t v44 = &v43[8 * v39];
                *(void *)unint64_t v44 = v32;
                unint64_t v38 = v44 + 8;
                uint64_t v45 = (char *)*v35;
                unint64_t v46 = *v33;
                if (*v35 != *v33)
                {
                  do
                  {
                    uint64_t v47 = *((void *)v45 - 1);
                    v45 -= 8;
                    *((void *)v44 - 1) = v47;
                    v44 -= 8;
                  }
                  while (v45 != v46);
                  uint64_t v45 = *v33;
                }
                *uint64_t v33 = v44;
                *uint64_t v35 = v38;
                *uint64_t v37 = &v43[8 * v42];
                if (v45) {
                  operator delete(v45);
                }
              }
              else
              {
                *uint64_t v34 = v32;
                unint64_t v38 = v34 + 1;
              }
              *uint64_t v35 = v38;
              ++v31;
              int v27 = v68;
            }
            while (v31 < v69 - v68);
          }
          if (v27)
          {
            unint64_t v69 = v27;
            operator delete(v27);
          }
          ++v21;
          uint64_t v5 = v30;
          uint64_t v9 = v64;
          unint64_t v8 = v65;
        }
        while (v21 != v66);
      }
      ++v8;
      uint64_t v7 = *a2;
    }
    while (v8 < (a2[1] - *a2) >> 2);
  }
  uint64_t v48 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v49 = 0;
    do
    {
      uint64_t v50 = (uint64_t *)(v48 + 24 * v49);
      uint64_t v51 = *v50;
      long long v52 = (int *)v50[1];
      unint64_t v53 = 126 - 2 * __clz(((uint64_t)v52 - *v50) >> 3);
      if (v52 == (int *)v51) {
        uint64_t v54 = 0;
      }
      else {
        uint64_t v54 = v53;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>(v51, v52, (uint64_t)v67, v54, 1);
      uint64_t v48 = *a4;
      std::vector<int> v55 = (int **)(*a4 + 24 * v49);
      unint64_t v57 = *v55;
      char v56 = v55[1];
      float32x2_t v58 = v57 + 2;
      if (v57 != v56 && v58 != v56)
      {
        int v60 = *v57;
        do
        {
          int v61 = *v58;
          if (v60 >= *v58 && (v61 < v60 || *(v58 - 1) >= v58[1])) {
            break;
          }
          v58 += 2;
          int v60 = v61;
        }
        while (v58 != v56);
      }
      ++v49;
    }
    while (v49 < 0xAAAAAAAAAAAAAAABLL * ((a4[1] - v48) >> 3));
  }
  if (v71)
  {
    uint64_t v72 = v71;
    operator delete(v71);
  }
}

void sub_1B1B32BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v18 = *(void **)(v16 - 112);
  if (v18)
  {
    *(void *)(v16 - 104) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ContextDependency::ContextWidth(kaldi::ContextDependency *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t kaldi::ContextDependency::CentralPosition(kaldi::ContextDependency *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t kaldi::ContextDependency::NumPdfs(kaldi::ContextDependency *this)
{
  uint64_t result = *((void *)this + 2);
  if (result)
  {
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    if (v2 >= 0) {
      return (v2 + 1);
    }
    else {
      return 0;
    }
  }
  return result;
}

void kaldi::ContextDependency::~ContextDependency(kaldi::ContextDependency *this)
{
  kaldi::ContextDependency::~ContextDependency(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A47A30;
  int v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  quasar::Bitmap::~Bitmap(this);
}

void kaldi::ContextDependency::Copy(kaldi::ContextDependency *this)
{
}

void sub_1B1B32D28(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40319E9F20);
  _Unwind_Resume(a1);
}

uint64_t kaldi::EventMap::Copy(kaldi::EventMap *this)
{
  std::string __p = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v1 = (*(uint64_t (**)(kaldi::EventMap *, void **))(*(void *)this + 24))(this, &__p);
  if (__p)
  {
    unint64_t v4 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_1B1B32E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B1B32EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v10 = (int *)result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    int v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v23 = *(a2 - 2);
          int v24 = *v11;
          if (v23 < *v11 || v24 >= v23 && *(a2 - 1) < v11[1])
          {
            int *v11 = v23;
            *(a2 - 2) = v24;
            int v25 = v11[1];
            v11[1] = *(a2 - 1);
            *(a2 - 1) = v25;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v11, v11 + 2, v11 + 4, a2 - 2);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,std::pair<int,int> *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      uint64_t v18 = *(void *)v11;
      *(void *)unint64_t v11 = *(void *)v17;
      *(void *)uint64_t v17 = v18;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_16;
      }
    }
    int v19 = *(v11 - 2);
    if (v19 >= *v11 && (*v11 < v19 || *(v11 - 1) >= v11[1]))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,std::__less<void,void> &>(v11, a2);
      unint64_t v11 = (int *)result;
      goto LABEL_21;
    }
LABEL_16:
    uint64_t v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,std::__less<void,void> &>(v11, a2);
    if ((v21 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v11, v20);
    unint64_t v11 = v20 + 2;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v20 + 2, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_19:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>(v10, v20, a3, -v13, a5 & 1);
      unint64_t v11 = v20 + 2;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v11, a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v11, a2);
  }
}

_DWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(_DWORD *result, _DWORD *a2)
{
  if (result == a2) {
    return result;
  }
  int v2 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  unint64_t v4 = result;
  do
  {
    char v5 = v4;
    unint64_t v4 = v2;
    int v6 = v5[2];
    int v7 = *v5;
    if (v6 >= *v5 && (v7 < v6 || v5[3] >= v5[1])) {
      goto LABEL_18;
    }
    int v9 = v5[2];
    int v8 = v5[3];
    int v10 = v5[1];
    v5[2] = v7;
    v4[1] = v10;
    unint64_t v11 = result;
    if (v5 == result) {
      goto LABEL_17;
    }
    uint64_t v12 = v3;
    while (1)
    {
      int v13 = *(_DWORD *)((char *)result + v12 - 8);
      if (v13 <= v9) {
        break;
      }
      int v14 = *(_DWORD *)((char *)result + v12 - 4);
LABEL_11:
      v5 -= 2;
      unint64_t v15 = (_DWORD *)((char *)result + v12);
      *unint64_t v15 = v13;
      v15[1] = v14;
      v12 -= 8;
      if (!v12)
      {
        unint64_t v11 = result;
        goto LABEL_17;
      }
    }
    if (v13 >= v9)
    {
      unint64_t v11 = (_DWORD *)((char *)result + v12);
      int v14 = *(_DWORD *)((char *)result + v12 - 4);
      if (v14 <= v8) {
        goto LABEL_17;
      }
      goto LABEL_11;
    }
    unint64_t v11 = v5;
LABEL_17:
    _DWORD *v11 = v9;
    v11[1] = v8;
LABEL_18:
    int v2 = v4 + 2;
    v3 += 8;
  }
  while (v4 + 2 != a2);
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *result, int *a2)
{
  if (result != a2)
  {
    int v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = result + 1;
      do
      {
        unint64_t v4 = result;
        uint64_t result = v2;
        int v5 = v4[2];
        int v6 = *v4;
        if (v5 < *v4 || v6 >= v5 && v4[3] < v4[1])
        {
          int v7 = *result;
          int v8 = result[1];
          for (unint64_t i = v3; ; i -= 2)
          {
            int v10 = *i;
            i[1] = v6;
            i[2] = v10;
            int v6 = *(i - 3);
            if (v6 <= v7 && (v6 < v7 || *(i - 2) <= v8)) {
              break;
            }
          }
          *(i - 1) = v7;
          *unint64_t i = v8;
        }
        int v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    int v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1])) {
      return 0;
    }
    *a2 = v9;
    *a3 = v3;
    unint64_t v11 = a2 + 1;
    int v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    int v12 = *a2;
    int v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1])) {
      return 1;
    }
    *a1 = v12;
    int v6 = a1 + 1;
    *a2 = v13;
    uint64_t v8 = 2;
  }
  else
  {
    int v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      int v6 = a1 + 1;
      *a3 = v4;
      int v7 = a3 + 1;
      uint64_t v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      int v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      int v15 = *a3;
      int v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14)) {
        return 1;
      }
      *a2 = v15;
      *a3 = v16;
      int v7 = a3 + 1;
      uint64_t v8 = 2;
      int v6 = a2 + 1;
    }
    unint64_t v11 = v7;
  }
  int v17 = *v6;
  int *v6 = *v11;
  int *v11 = v17;
  return v8;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,std::__less<void,void> &>(int *a1, int *a2)
{
  int v3 = *a1;
  int v2 = a1[1];
  int v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *(a2 - 1) <= v2))
  {
    for (unint64_t i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || i[1] <= v2); i += 2)
      ;
  }
  else
  {
    unint64_t i = a1;
    do
    {
      int v7 = i[2];
      i += 2;
      int v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && a2[1] > v2; a2 -= 2)
    {
      int v8 = *(a2 - 2);
      int v4 = v8;
    }
  }
  if (i < a2)
  {
    int v9 = *i;
    int v10 = *a2;
    do
    {
      *unint64_t i = v10;
      *a2 = v9;
      int v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        int v12 = i[2];
        i += 2;
        int v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || i[1] <= v2));
      do
      {
        do
        {
          int v13 = *(a2 - 2);
          a2 -= 2;
          int v10 = v13;
          BOOL v14 = v13 < v3;
        }
        while (v13 > v3);
      }
      while (!v14 && a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

_DWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,std::__less<void,void> &>(int *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  int v4 = a1[1];
  while (1)
  {
    int v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      int v8 = *(a2 - 2);
      a2 -= 2;
      int v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        int v10 = *(a2 - 2);
        a2 -= 2;
        int v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v9 > v3) {
          goto LABEL_19;
        }
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    int v13 = (_DWORD *)v6;
  }
  else
  {
    int v12 = *a2;
    int v13 = (_DWORD *)v6;
    BOOL v14 = a2;
    do
    {
      *int v13 = v12;
      *BOOL v14 = v5;
      int v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          int v16 = v13[2];
          v13 += 2;
          int v5 = v16;
          BOOL v17 = v16 <= v3;
        }
        while (v16 < v3);
      }
      while (v17 && v13[1] < v4);
      do
      {
        int v18 = *(v14 - 2);
        v14 -= 2;
        int v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(a2 - 2);
      int v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        int v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      int v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4);
      int v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    int v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1])) {
      goto LABEL_22;
    }
    int v14 = *v10;
    int v15 = v10[1];
    *int v10 = v13;
    v10[1] = v9[1];
    int v16 = a1;
    if (v9 == a1) {
      goto LABEL_21;
    }
    uint64_t v17 = v11;
    while (1)
    {
      int v18 = (char *)a1 + v17;
      int v19 = *(int *)((char *)a1 + v17 + 8);
      if (v19 > v14)
      {
        int v20 = *((_DWORD *)v18 + 3);
        goto LABEL_17;
      }
      if (v19 < v14)
      {
        int v16 = v9;
        goto LABEL_21;
      }
      int v20 = *(int *)((char *)a1 + v17 + 12);
      if (v20 <= v15) {
        break;
      }
LABEL_17:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        int v16 = a1;
        goto LABEL_21;
      }
    }
    int v16 = (int *)((char *)a1 + v17 + 16);
LABEL_21:
    int *v16 = v14;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_22:
    int v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a2, a3);
  int v9 = *a4;
  int v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    int v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    int v12 = *a3;
    int v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      int v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      int v15 = *a2;
      int v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        int v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a2, a3, a4);
  int v11 = *a5;
  int v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    int v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    int v14 = *a4;
    int v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      int v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      int v17 = *a3;
      int v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        int v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        int v20 = *a2;
        int v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          int v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,std::pair<int,int> *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        int v15 = *v14;
        int v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *int v14 = v16;
          *a1 = v15;
          int v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v18 = (unint64_t)v8 >> 3;
      int v19 = a2 - 2;
      do
      {
        int v21 = *a1;
        int v20 = a1[1];
        int v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a4, v18);
        if (v19 == v22)
        {
          *int v22 = v21;
          v22[1] = v20;
        }
        else
        {
          *int v22 = *v19;
          v22[1] = v19[1];
          *int v19 = v21;
          v19[1] = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (int *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      int v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || v8[1] >= a4[1]))
      {
        int v12 = *a4;
        int v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            int v14 = (int *)(result + 8 * v7);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              int v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < v14[3])
              {
                v14 += 2;
                uint64_t v7 = v16;
              }
            }
            int v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && v14[1] < v13) {
              break;
            }
            *uint64_t v8 = v18;
            v8[1] = v14[1];
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_22;
            }
          }
        }
        int v14 = v8;
LABEL_22:
        *int v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    uint64_t v7 = v3 + 1;
    result += 2 * v3 + 2;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      int v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        uint64_t v3 = v9;
      }
    }
    _DWORD *v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (int *)(result + 8 * (v4 >> 1));
    int v7 = *v6;
    int v8 = *(_DWORD *)(a2 - 8);
    if (*v6 < v8 || v8 >= v7 && *(_DWORD *)(result + 8 * v5 + 4) < *(_DWORD *)(a2 - 4))
    {
      int v9 = *(_DWORD *)(a2 - 8);
      int v10 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v7;
      *(_DWORD *)(a2 - 4) = v6[1];
      if (v4 >= 2)
      {
        while (1)
        {
          unint64_t v12 = v5 - 1;
          unint64_t v5 = (v5 - 1) >> 1;
          int v11 = (int *)(result + 8 * v5);
          int v13 = *v11;
          if (*v11 >= v9)
          {
            if (v13 > v9) {
              break;
            }
            int v14 = *(_DWORD *)(result + 8 * v5 + 4);
            if (v14 >= v10) {
              break;
            }
          }
          else
          {
            int v14 = v11[1];
          }
          int *v6 = v13;
          v6[1] = v14;
          uint64_t v6 = (int *)(result + 8 * v5);
          if (v12 <= 1) {
            goto LABEL_12;
          }
        }
      }
      int v11 = v6;
LABEL_12:
      int *v11 = v9;
      v11[1] = v10;
    }
  }
  return result;
}

void *std::__hash_table<std::pair<int,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<int,int>>(uint64_t a1, int *a2, void *a3)
{
  uint64_t v6 = *a2;
  int v7 = a2[1];
  unint64_t v8 = v6 + 7853 * v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v6 + 7853 * v7;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v6 && *((_DWORD *)v12 + 5) == v7) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v12 = operator new(0x18uLL);
  *unint64_t v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *unint64_t v12 = *v22;
LABEL_42:
    *int v22 = v12;
    goto LABEL_43;
  }
  *unint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v23 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    int v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_1B1B342A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<std::pair<int,int>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    float v15 = v12;
    float v16 = &v12[24 * v8];
    unint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    BOOL v17 = &v16[v14];
    std::vector<std::vector<std::vector<std::pair<int,int>>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(&v15);
  }
}

void sub_1B1B3440C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<std::pair<int,int>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = v1;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::pair<int,int>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      char v12 = 0;
    }
    float v15 = v12;
    float v16 = &v12[24 * v8];
    unint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    BOOL v17 = &v16[v14];
    std::vector<std::vector<std::pair<int,int>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B1B3479C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<int,int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,int>>>,std::reverse_iterator<std::vector<std::pair<int,int>>*>,std::reverse_iterator<std::vector<std::pair<int,int>>*>,std::reverse_iterator<std::vector<std::pair<int,int>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,int>>>,std::reverse_iterator<std::vector<std::pair<int,int>>*>,std::reverse_iterator<std::vector<std::pair<int,int>>*>,std::reverse_iterator<std::vector<std::pair<int,int>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,int>>>,std::reverse_iterator<std::vector<std::pair<int,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,int>>>,std::reverse_iterator<std::vector<std::pair<int,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void quasar::getNormString(char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if (a1[23] >= 0)
  {
    uint64_t v4 = a1[23];
  }
  else
  {
    a1 = *(char **)a1;
    uint64_t v4 = v3;
  }
  p_p = &__p;
  quasar::utf8::convertToLowerCaseOrEmpty(a1, v4, &__p);
  int v6 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  long long v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = __p.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size >= 1)
  {
    uint64_t v9 = (char *)p_p + size;
    unint64_t v10 = p_p;
    do
    {
      unint64_t v11 = memchr(v10, 92, size);
      if (!v11) {
        break;
      }
      if (*v11 == 92)
      {
        if (v11 != v9 && v11 - (unsigned char *)p_p != -1)
        {
          std::string::basic_string[abi:ne180100]<0>(v12, "\\"");
          quasar::splitStringSimple((uint64_t)&__p, (uint64_t *)v12, (unint64_t)v13);
        }
        break;
      }
      unint64_t v10 = (std::string *)(v11 + 1);
      int64_t size = v9 - (unsigned char *)v10;
    }
    while (v9 - (unsigned char *)v10 >= 1);
  }
  if (v6 < 0) {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v7, *((std::string::size_type *)&v7 + 1));
  }
  else {
    *a2 = __p;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B34A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v23 - 56) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 56));
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void quasar::strictAlignTokensToFirstSeenPartialResults(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, std::vector<int> *a4@<X8>)
{
  if (*a2 == a2[1])
  {
    a4->__begin_ = 0;
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
  }
  else
  {
    char v65 = 1;
    kaldi::Timer::Reset((kaldi::Timer *)v64, (clockid_t)a2);
    uint64_t v66 = 0;
    std::vector<int>::vector(a4, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5), quasar::kResultIndexForUnalignedToken);
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    if (v7 != *a1)
    {
      uint64_t v9 = 0;
      while (1)
      {
        unint64_t v10 = (uint64_t *)(v8 + 24 * v9);
        int v11 = -1227133513 * ((v10[1] - *v10) >> 5);
        if (v11 >= 1)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = a2[1];
          unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((v13 - *a2) >> 5);
          if (v14 >= v11)
          {
            uint64_t v15 = (v11 - 1);
            if (a4->__begin_[v15] == -1) {
              break;
            }
          }
        }
LABEL_46:
        if (0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3) <= ++v9) {
          goto LABEL_47;
        }
      }
      memset(v63, 0, sizeof(v63));
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v63, v12, v13, v14);
      std::vector<quasar::Token>::resize(v63, v11);
      quasar::tokens2Str(v63, &v62);
      quasar::tokens2Str(v10, &v61);
      quasar::trim(&v62);
      quasar::trim(&v61);
      if (quasar::gLogLevel >= 6)
      {
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v44 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"[TTAW] partialIndex: ", 21);
        float v16 = (void *)std::ostream::operator<<();
        BOOL v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", subFinalResult: ", 18);
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v18 = &v62;
        }
        else {
          unint64_t v18 = (std::string *)v62.__r_.__value_.__r.__words[0];
        }
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v62.__r_.__value_.__l.__size_;
        }
        size_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, size);
        uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", partialResult: ", 17);
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v22 = &v61;
        }
        else {
          int v22 = (std::string *)v61.__r_.__value_.__r.__words[0];
        }
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v23 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v23 = v61.__r_.__value_.__l.__size_;
        }
        int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v44);
      }
      uint64_t v25 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v26 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v26 = v62.__r_.__value_.__l.__size_;
      }
      std::string::size_type v27 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      char v28 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v27 = v61.__r_.__value_.__l.__size_;
      }
      if (v26 == v27)
      {
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v29 = &v61;
        }
        else {
          uint64_t v29 = (std::string *)v61.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v62.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((unsigned char *)&v62.__r_.__value_.__s + 23))
          {
            uint64_t v30 = &v62;
            while (v30->__r_.__value_.__s.__data_[0] == v29->__r_.__value_.__s.__data_[0])
            {
              uint64_t v30 = (std::string *)((char *)v30 + 1);
              uint64_t v29 = (std::string *)((char *)v29 + 1);
              if (!--v25) {
                goto LABEL_37;
              }
            }
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        if (!memcmp(v62.__r_.__value_.__l.__data_, v29, v62.__r_.__value_.__l.__size_))
        {
LABEL_37:
          if (quasar::gLogLevel <= 5)
          {
            int v31 = v9 + a3;
          }
          else
          {
            long long v59 = 0u;
            long long v60 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v44 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"[TTAW] exact match, index = ", 28);
            int v31 = v9 + a3;
            std::ostream::operator<<();
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v44);
          }
          a4->__begin_[v15] = v31;
          char v28 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_41:
      if (v28 < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      *(void *)&long long v44 = v63;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
      goto LABEL_46;
    }
LABEL_47:
    std::vector<int>::pointer end = a4->__end_;
    unint64_t v33 = (unint64_t)((char *)end - (char *)a4->__begin_) >> 2;
    uint64_t v34 = (v33 - 2);
    if ((int)v33 - 2 >= 0)
    {
      uint64_t v35 = end - 1;
      uint64_t v36 = v34 + 1;
      uint64_t v37 = &a4->__begin_[v34];
      do
      {
        unsigned int v38 = *v35;
        uint64_t v35 = v37;
        if ((v38 & 0x80000000) == 0)
        {
          unsigned int v39 = *v37;
          if (v39 == -1 || (v39 & 0x80000000) == 0 && v38 < v39) {
            *uint64_t v35 = v38;
          }
        }
        uint64_t v37 = v35 - 1;
      }
      while (v36-- > 1);
    }
    if (quasar::gLogLevel > 4)
    {
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v44 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"alignV1: finalResultSize=", 25);
      uint64_t v41 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" time=", 6);
      kaldi::Timer::GetSeconds((kaldi::Timer *)5, v42);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v44);
    }
  }
}

void sub_1B1B34F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  if (*(char *)(v12 - 177) < 0) {
    operator delete(*(void **)(v12 - 200));
  }
  if (*(char *)(v12 - 153) < 0) {
    operator delete(*(void **)(v12 - 176));
  }
  a11 = (void **)(v12 - 152);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a11);
  unint64_t v14 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

void std::vector<quasar::Token>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 5);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<quasar::Token>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 224 * a2;
    while (v3 != v7)
      quasar::Token::~Token((void **)(v3 - 224));
    a1[1] = v7;
  }
}

uint64_t quasar::alignTokensToFirstSeenPartialResultsV3@<X0>(unsigned __int8 ***a1@<X0>, unsigned __int8 **a2@<X1>, int a3@<W2>, std::vector<int> *a4@<X8>)
{
  char v145 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v144, (clockid_t)a2);
  uint64_t v146 = 0;
  memset(v142, 0, sizeof(v142));
  int v143 = 1065353216;
  v141 = v142;
  memset(v139, 0, sizeof(v139));
  int v140 = 1065353216;
  v138[0] = (uint64_t)v139;
  v138[1] = (uint64_t)&v141;
  std::string::basic_string[abi:ne180100]<0>(v136, "<eps>");
  int v105 = a3;
  unsigned int v109 = quasar::alignTokensToFirstSeenPartialResultsV3(std::vector<std::vector<quasar::Token>> const&,std::vector<quasar::Token> const&,unsigned int)::$_1::operator()(v138, (unsigned __int8 *)v136);
  v133 = 0;
  v134 = 0;
  unint64_t v135 = 0;
  unint64_t v6 = *a1;
  v104 = a1;
  uint64_t v107 = a1[1];
  if (*a1 == v107)
  {
    char v7 = 0;
    unint64_t v33 = 0;
    unint64_t v32 = 0;
  }
  else
  {
    char v7 = 0;
    do
    {
      uint64_t v8 = v134;
      if ((unint64_t)v134 >= v135)
      {
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v134 - v133);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v135 - (void)v133) >> 3) > v11) {
          unint64_t v11 = 0x5555555555555556 * ((uint64_t)(v135 - (void)v133) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - (void)v133) >> 3) >= 0x555555555555555) {
          unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v12 = v11;
        }
        *(void *)&long long v118 = &v135;
        if (v12) {
          uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v135, v12);
        }
        else {
          uint64_t v13 = 0;
        }
        unint64_t v14 = &v13[24 * v10];
        *(void *)&long long v116 = v13;
        *((void *)&v116 + 1) = v14;
        *((void *)&v117 + 1) = &v13[24 * v12];
        *(void *)unint64_t v14 = 0;
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = 0;
        *(void *)&long long v117 = v14 + 24;
        std::vector<std::vector<int>>::__swap_out_circular_buffer((uint64_t *)&v133, &v116);
        uint64_t v9 = v134;
        std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v116);
      }
      else
      {
        void *v134 = 0;
        v8[1] = 0;
        uint64_t v9 = v8 + 3;
        v8[2] = 0;
      }
      v134 = v9;
      float v16 = *v6;
      uint64_t v15 = v6[1];
      if (*v6 != v15)
      {
        BOOL v17 = (void **)(v9 - 3);
        do
        {
          int v18 = quasar::alignTokensToFirstSeenPartialResultsV3(std::vector<std::vector<quasar::Token>> const&,std::vector<quasar::Token> const&,unsigned int)::$_1::operator()(v138, v16);
          int v19 = v18;
          BOOL v20 = v18 == v109;
          int v22 = (char *)*(v9 - 2);
          unint64_t v21 = *(v9 - 1);
          if ((unint64_t)v22 >= v21)
          {
            int v24 = (char *)*v17;
            uint64_t v25 = (v22 - (unsigned char *)*v17) >> 2;
            unint64_t v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v27 = v21 - (void)v24;
            if (v27 >> 1 > v26) {
              unint64_t v26 = v27 >> 1;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v26;
            }
            if (v28)
            {
              uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v9 - 1), v28);
              int v24 = (char *)*(v9 - 3);
              int v22 = (char *)*(v9 - 2);
            }
            else
            {
              uint64_t v29 = 0;
            }
            uint64_t v30 = &v29[4 * v25];
            *(_DWORD *)uint64_t v30 = v19;
            std::string::size_type v23 = v30 + 4;
            while (v22 != v24)
            {
              int v31 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v30 - 1) = v31;
              v30 -= 4;
            }
            *(v9 - 3) = v30;
            *(v9 - 2) = v23;
            *(v9 - 1) = &v29[4 * v28];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            *(_DWORD *)int v22 = v18;
            std::string::size_type v23 = v22 + 4;
          }
          v7 |= v20;
          *(v9 - 2) = v23;
          v16 += 224;
        }
        while (v16 != v15);
      }
      v6 += 3;
    }
    while (v6 != v107);
    unint64_t v33 = v134;
    unint64_t v32 = v135;
    if ((unint64_t)v134 < v135)
    {
      void *v134 = 0;
      v33[1] = 0;
      v33[2] = 0;
      uint64_t v34 = v33 + 3;
      v134 = v33 + 3;
      goto LABEL_48;
    }
  }
  unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (v33 - v133);
  unint64_t v36 = v35 + 1;
  if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (void)v133) >> 3);
  if (2 * v37 > v36) {
    unint64_t v36 = 2 * v37;
  }
  if (v37 >= 0x555555555555555) {
    unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v38 = v36;
  }
  *(void *)&long long v118 = &v135;
  if (v38) {
    unsigned int v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v135, v38);
  }
  else {
    unsigned int v39 = 0;
  }
  uint64_t v40 = &v39[24 * v35];
  *(void *)&long long v116 = v39;
  *((void *)&v116 + 1) = v40;
  *((void *)&v117 + 1) = &v39[24 * v38];
  *(void *)uint64_t v40 = 0;
  *((void *)v40 + 1) = 0;
  *((void *)v40 + 2) = 0;
  *(void *)&long long v117 = v40 + 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer((uint64_t *)&v133, &v116);
  uint64_t v34 = v134;
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v116);
LABEL_48:
  v134 = v34;
  clockid_t v42 = *a2;
  uint64_t v41 = a2[1];
  if (*a2 != v41)
  {
    uint64_t v43 = (void **)(v34 - 3);
    do
    {
      int v44 = quasar::alignTokensToFirstSeenPartialResultsV3(std::vector<std::vector<quasar::Token>> const&,std::vector<quasar::Token> const&,unsigned int)::$_1::operator()(v138, v42);
      int v45 = v44;
      BOOL v46 = v44 == v109;
      long long v48 = (char *)*(v34 - 2);
      unint64_t v47 = *(v34 - 1);
      if ((unint64_t)v48 >= v47)
      {
        long long v50 = (char *)*v43;
        uint64_t v51 = (v48 - (unsigned char *)*v43) >> 2;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v53 = v47 - (void)v50;
        if (v53 >> 1 > v52) {
          unint64_t v52 = v53 >> 1;
        }
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v52;
        }
        if (v54)
        {
          long long v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v34 - 1), v54);
          long long v50 = (char *)*(v34 - 3);
          long long v48 = (char *)*(v34 - 2);
        }
        else
        {
          long long v55 = 0;
        }
        long long v56 = &v55[4 * v51];
        *(_DWORD *)long long v56 = v45;
        long long v49 = v56 + 4;
        while (v48 != v50)
        {
          int v57 = *((_DWORD *)v48 - 1);
          v48 -= 4;
          *((_DWORD *)v56 - 1) = v57;
          v56 -= 4;
        }
        *(v34 - 3) = v56;
        *(v34 - 2) = v49;
        *(v34 - 1) = &v55[4 * v54];
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *(_DWORD *)long long v48 = v44;
        long long v49 = v48 + 4;
      }
      v7 |= v46;
      *(v34 - 2) = v49;
      v42 += 224;
    }
    while (v42 != v41);
  }
  if (v7)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v116);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v116, (uint64_t)"Input contains epsilon. Skipping alignment and returning all unaligned", 70);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v116);
    }
    std::vector<int>::vector(a4, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5), quasar::kResultIndexForUnalignedToken);
    goto LABEL_150;
  }
  std::vector<int>::vector(a4, (uint64_t)(v133[1] - *v133) >> 2);
  int v113 = 0;
  unint64_t v114 = 0;
  uint64_t v115 = 0;
  long long v58 = v133;
  if (0xAAAAAAAAAAAAAAABLL * (v134 - v133) >= 2)
  {
    uint64_t v59 = 0;
    long long v60 = &v112;
    unint64_t v61 = 1;
    while (1)
    {
      std::string v62 = &v58[3 * v61];
      kaldi::LevenshteinAlignmentWithPrefixOptimization<int>(&v58[3 * v59], v62, v109, (char **)&v113, 0);
      std::string __p = 0;
      float v111 = 0;
      int v112 = 0;
      uint64_t v64 = v113;
      uint64_t v63 = v114;
      if (v113 != v114) {
        break;
      }
      int v94 = 0;
      char v65 = 0;
LABEL_134:
      unint64_t v95 = (v65 - v94) >> 2;
      if (v95 != (uint64_t)(v58[3 * v61 + 1] - *v62) >> 2)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v116);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v116, (uint64_t)"newOrigins.size() == b.size()", 29);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v116);
      }
      if (&__p != (void **)a4)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a4, v94, (uint64_t)v65, v95);
        int v94 = (char *)__p;
      }
      if (v94)
      {
        float v111 = v94;
        operator delete(v94);
      }
      ++v59;
      ++v61;
      long long v58 = v133;
      if (0xAAAAAAAAAAAAAAABLL * (v134 - v133) <= v61) {
        goto LABEL_140;
      }
    }
    char v65 = 0;
    int v66 = 0;
    while (*v64 != v109)
    {
      int v68 = v64[1];
      if (v68 != v109)
      {
        if (*v64 == v68)
        {
          std::vector<int>::pointer begin = a4->__begin_;
          if (v66 >= (unint64_t)(a4->__end_ - a4->__begin_)) {
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          }
          if (v65 < v112)
          {
            *(_DWORD *)char v65 = begin[v66];
            long long v67 = v65 + 4;
            goto LABEL_123;
          }
          uint64_t v84 = (uint64_t)v60;
          uint64_t v78 = (char *)__p;
          uint64_t v85 = (v65 - (unsigned char *)__p) >> 2;
          unint64_t v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v87 = v112 - (unsigned char *)__p;
          if ((v112 - (unsigned char *)__p) >> 1 > v86) {
            unint64_t v86 = v87 >> 1;
          }
          if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v88 = v86;
          }
          if (v88)
          {
            unint64_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v84, v88);
            uint64_t v78 = (char *)__p;
            char v65 = v111;
          }
          else
          {
            unint64_t v89 = 0;
          }
          float v92 = &v89[4 * v85];
          *(_DWORD *)float v92 = begin[v66];
          long long v67 = v92 + 4;
          long long v60 = (void *)v84;
          while (v65 != v78)
          {
            int v93 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *((_DWORD *)v92 - 1) = v93;
            v92 -= 4;
          }
          std::string __p = v92;
          float v111 = v67;
          int v112 = &v89[4 * v88];
          if (!v78) {
            goto LABEL_123;
          }
LABEL_122:
          operator delete(v78);
          goto LABEL_123;
        }
        if (v65 < v112)
        {
          *(_DWORD *)char v65 = v61;
          long long v67 = v65 + 4;
          goto LABEL_123;
        }
        uint64_t v78 = (char *)__p;
        uint64_t v79 = (v65 - (unsigned char *)__p) >> 2;
        unint64_t v80 = v79 + 1;
        if ((unint64_t)(v79 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v81 = v112 - (unsigned char *)__p;
        if ((v112 - (unsigned char *)__p) >> 1 > v80) {
          unint64_t v80 = v81 >> 1;
        }
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v82 = v80;
        }
        if (v82)
        {
          uint64_t v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v60, v82);
          uint64_t v78 = (char *)__p;
          char v65 = v111;
        }
        else
        {
          uint64_t v83 = 0;
        }
        unint64_t v90 = &v83[4 * v79];
        *(_DWORD *)unint64_t v90 = v61;
        long long v67 = v90 + 4;
        while (v65 != v78)
        {
          int v91 = *((_DWORD *)v65 - 1);
          v65 -= 4;
          *((_DWORD *)v90 - 1) = v91;
          v90 -= 4;
        }
        std::string __p = v90;
        float v111 = v67;
        int v112 = &v83[4 * v82];
        if (v78) {
          goto LABEL_122;
        }
LABEL_123:
        float v111 = v67;
        ++v66;
LABEL_124:
        char v65 = v67;
        goto LABEL_125;
      }
      ++v66;
LABEL_125:
      v64 += 2;
      if (v64 == v63)
      {
        int v94 = (char *)__p;
        std::string v62 = &v58[3 * v61];
        goto LABEL_134;
      }
    }
    if (v65 >= v112)
    {
      unint64_t v69 = (char *)__p;
      uint64_t v70 = (v65 - (unsigned char *)__p) >> 2;
      unint64_t v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v72 = v112 - (unsigned char *)__p;
      if ((v112 - (unsigned char *)__p) >> 1 > v71) {
        unint64_t v71 = v72 >> 1;
      }
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v73 = v71;
      }
      if (v73)
      {
        uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v60, v73);
        unint64_t v69 = (char *)__p;
        char v65 = v111;
      }
      else
      {
        uint64_t v74 = 0;
      }
      int v76 = &v74[4 * v70];
      *(_DWORD *)int v76 = v61;
      long long v67 = v76 + 4;
      while (v65 != v69)
      {
        int v77 = *((_DWORD *)v65 - 1);
        v65 -= 4;
        *((_DWORD *)v76 - 1) = v77;
        v76 -= 4;
      }
      std::string __p = v76;
      float v111 = v67;
      int v112 = &v74[4 * v73];
      if (v69) {
        operator delete(v69);
      }
    }
    else
    {
      *(_DWORD *)char v65 = v61;
      long long v67 = v65 + 4;
    }
    float v111 = v67;
    goto LABEL_124;
  }
LABEL_140:
  std::vector<int>::pointer v96 = a4->__begin_;
  std::vector<int>::pointer end = a4->__end_;
  if (a4->__begin_ != end)
  {
    unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * (v104[1] - *v104);
    do
    {
      uint64_t v99 = *v96;
      if (v98 == v99) {
        int v100 = -1;
      }
      else {
        int v100 = v99 + v105;
      }
      *v96++ = v100;
    }
    while (v96 != end);
  }
  if (quasar::gLogLevel > 4)
  {
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v116 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v116);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v116, (uint64_t)"alignV3: finalResultSize=", 25);
    int v101 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)" time=", 6);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v102);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v116);
  }
  if (v113)
  {
    unint64_t v114 = v113;
    operator delete(v113);
  }
LABEL_150:
  *(void *)&long long v116 = &v133;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
  if (v137 < 0) {
    operator delete(v136[0]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v139);
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v142);
}

uint64_t quasar::alignTokensToFirstSeenPartialResultsV3(std::vector<std::vector<quasar::Token>> const&,std::vector<quasar::Token> const&,unsigned int)::$_1::operator()(uint64_t *a1, unsigned __int8 *a2)
{
  unint64_t v4 = (uint64_t *)a1[1];
  BOOL v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)*v4, a2);
  if (v5)
  {
    if ((char)v5[63] < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v5 + 5), *((void *)v5 + 6));
    }
    else {
      std::string __p = *(std::string *)(v5 + 40);
    }
  }
  else
  {
    quasar::getNormString((char *)a2, &__p);
    uint64_t v6 = *v4;
    uint64_t v13 = a2;
    char v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v13);
    std::string::operator=((std::string *)(v7 + 40), &__p);
  }
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)*a1, (unsigned __int8 *)&__p);
  if (!v8)
  {
    uint64_t v9 = *a1;
    uint64_t v13 = *(unsigned __int8 **)(*a1 + 24);
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::string&,unsigned long>(v9, (unsigned __int8 *)&__p, (uint64_t)&__p, &v13);
  }
  uint64_t v10 = *((unsigned int *)v8 + 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B1B35C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::LevenshteinAlignmentWithPrefixOptimization<int>(uint64_t *a1, void *a2, unsigned int a3, char **a4, int a5)
{
  BOOL v5 = a4;
  unsigned int v6 = a3;
  v46[2] = *MEMORY[0x1E4F143B8];
  if ((uint64_t)(a2[1] - *a2) >> 2 >= (unint64_t)((a1[1] - *a1) >> 2)) {
    uint64_t v9 = (a1[1] - *a1) >> 2;
  }
  else {
    uint64_t v9 = (uint64_t)(a2[1] - *a2) >> 2;
  }
  clockid_t v42 = 0;
  uint64_t v43 = 0;
  int v44 = 0;
  if ((int)v9 < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    int v30 = a5;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *a1;
      if (v11 >= (a1[1] - *a1) >> 2 || v11 >= (uint64_t)(a2[1] - *a2) >> 2) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      int v13 = *(_DWORD *)(v12 + 4 * v11);
      if (v13 != *(_DWORD *)(*a2 + 4 * v11)) {
        break;
      }
      if (v10 >= (uint64_t *)v44)
      {
        uint64_t v14 = ((char *)v10 - (unsigned char *)v42) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = (v44 - (unsigned char *)v42) >> 2;
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        if ((unint64_t)(v44 - (unsigned char *)v42) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        BOOL v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v44, v16);
        int v19 = (uint64_t *)&v17[8 * v14];
        *(_DWORD *)int v19 = *(_DWORD *)(v12 + 4 * v11);
        *((_DWORD *)v19 + 1) = *(_DWORD *)(v12 + 4 * v11);
        unint64_t v21 = (uint64_t *)v42;
        BOOL v20 = v43;
        int v22 = v19;
        if (v43 != v42)
        {
          do
          {
            uint64_t v23 = *--v20;
            *--int v22 = v23;
          }
          while (v20 != v21);
          BOOL v20 = (uint64_t *)v42;
        }
        uint64_t v10 = v19 + 1;
        clockid_t v42 = v22;
        uint64_t v43 = v19 + 1;
        int v44 = &v17[8 * v18];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v10 = v13;
        *((_DWORD *)v10++ + 1) = *(_DWORD *)(v12 + 4 * v11);
      }
      uint64_t v43 = v10;
      if (++v11 == v9)
      {
        LODWORD(v11) = v9;
        break;
      }
    }
    BOOL v5 = a4;
    a5 = v30;
    unsigned int v6 = a3;
  }
  unsigned int v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  if (a5) {
    __src = (void *)0x200000001;
  }
  else {
    __src = (void *)0x100000002;
  }
  LODWORD(v46[0]) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v39, (char *)&__src, (uint64_t)v46 + 4, 3uLL);
  uint64_t v24 = a1[1];
  uint64_t v25 = (const void *)(*a1 + 4 * v11);
  v46[0] = 0;
  v46[1] = 0;
  __src = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__src, v25, v24, (v24 - (uint64_t)v25) >> 2);
  uint64_t v26 = a2[1];
  uint64_t v27 = (const void *)(*a2 + 4 * v11);
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v36 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v36, v27, v26, (v26 - (uint64_t)v27) >> 2);
  std::string __p = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  std::vector<kaldi::LevenshteinOp::Value>::__init_with_size[abi:ne180100]<kaldi::LevenshteinOp::Value*,kaldi::LevenshteinOp::Value*>(&__p, v39, (uint64_t)v40, (v40 - (unsigned char *)v39) >> 2);
  uint64_t v28 = kaldi::LevenshteinAlignment<int>((uint64_t *)&__src, (int **)&v36, v6, v5, (char *)&__p);
  if (__p)
  {
    uint64_t v34 = __p;
    operator delete(__p);
  }
  if (v36)
  {
    unint64_t v37 = v36;
    operator delete(v36);
  }
  if (__src)
  {
    v46[0] = __src;
    operator delete(__src);
  }
  std::vector<std::pair<int,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,int>*>,std::__wrap_iter<std::pair<int,int>*>>((uint64_t)v5, (uint64_t)*v5, (uint64_t *)v42, v43, ((char *)v43 - (unsigned char *)v42) >> 3);
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
  if (v42)
  {
    uint64_t v43 = (uint64_t *)v42;
    operator delete(v42);
  }
  return v28;
}

void sub_1B1B35FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::string&,unsigned long>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::string&,unsigned long>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *uint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_1B1B362C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::string&,unsigned long>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x30uLL);
  *(void *)(a5 + 8) = v9;
  *(void *)a5 = v10;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  unint64_t v11 = (std::string *)(v10 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v10 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v10 + 10) = *a4;
  *(unsigned char *)(a5 + 16) = 1;
}

void sub_1B1B36384(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1B1B36614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B1B366C8(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<quasar::Token>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(quasar::Token **)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - (uint64_t)v7) >> 5) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = (quasar::Token *)((char *)v7 + 224 * a2);
      uint64_t v14 = 224 * a2;
      do
      {
        quasar::Token::Token(v7);
        uint64_t v7 = (quasar::Token *)((char *)v7 + 224);
        v14 -= 224;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v7 - *a1) >> 5);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x124924924924924) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 5);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x92492492492492) {
      unint64_t v11 = 0x124924924924924;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v21 = v4;
    if (v11) {
      uint8x8_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v4, v11);
    }
    else {
      uint8x8_t v12 = 0;
    }
    unint64_t v15 = (quasar::Token *)&v12[224 * v8];
    v18[0] = v12;
    v18[1] = v15;
    BOOL v19 = v15;
    unint64_t v20 = &v12[224 * v11];
    uint64_t v16 = 224 * a2;
    float v17 = (quasar::Token *)((char *)v15 + 224 * a2);
    do
    {
      quasar::Token::Token(v15);
      unint64_t v15 = (quasar::Token *)((char *)v15 + 224);
      v16 -= 224;
    }
    while (v16);
    BOOL v19 = v17;
    std::vector<quasar::Token>::__swap_out_circular_buffer(a1, v18);
    std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)v18);
  }
}

void sub_1B1B3684C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::LevenshteinAlignment<int>(uint64_t *a1, int **a2, unsigned int a3, char **a4, char *a5)
{
  *(void *)&v89[260] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = *(unsigned int **)a5;
  unint64_t v10 = (unsigned int *)*((void *)a5 + 1);
  if (*(unsigned int **)a5 == v10)
  {
    uint64_t __src = 0x100000000;
    int v88 = 2;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a5, (char *)&__src, (uint64_t)v89, 3uLL);
    unint64_t v9 = *(unsigned int **)a5;
    unint64_t v10 = (unsigned int *)*((void *)a5 + 1);
  }
  if (v9 == v10) {
    goto LABEL_97;
  }
  int v11 = 0;
  int v12 = 0;
  int v13 = 0;
  uint64_t v14 = a3;
  do
  {
    unsigned int v15 = *v9;
    if (*v9 == 2)
    {
      ++v13;
    }
    else if (v15 == 1)
    {
      ++v12;
    }
    else
    {
      if (v15)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "Unexpected op in backtrace_precedence");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
      }
      ++v11;
    }
    ++v9;
  }
  while (v9 != v10);
  if (v11 != 1 || v12 != 1 || v13 != 1)
  {
LABEL_97:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "numSubOrOk == 1 && numDel == 1 && numIns == 1");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  a4[1] = *a4;
  uint64_t v83 = a1[1];
  uint64_t v81 = *a1;
  unint64_t v16 = (v83 - *a1) >> 2;
  float v18 = *a2;
  float v17 = a2[1];
  std::vector<std::vector<int>>::vector(&__src, v16 + 1);
  unint64_t v80 = (unsigned int **)a5;
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  unint64_t v21 = v16;
  uint64_t v82 = v17 - v18;
  std::vector<unsigned int>::size_type v22 = v82 + 1;
  do
  {
    std::vector<int>::resize((std::vector<unsigned int> *)(__src + v19), v22);
    ++v20;
    v19 += 24;
  }
  while (v20 <= v16);
  uint64_t v23 = 0;
  uint64_t v24 = __src;
  unint64_t v25 = *(int **)__src;
  if (v22 <= 1) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = v82 + 1;
  }
  do
  {
    v25[v23] = v23;
    ++v23;
  }
  while (v26 != v23);
  if (v83 != v81)
  {
    uint64_t v27 = *a1;
    uint64_t v28 = *a2;
    uint64_t v29 = 2;
    if (v22 <= 2) {
      uint64_t v30 = 2;
    }
    else {
      uint64_t v30 = v82 + 1;
    }
    if (v16 + 1 > 2) {
      uint64_t v29 = v16 + 1;
    }
    int v31 = *v25;
    uint64_t v32 = v30 - 1;
    uint64_t v33 = 1;
    do
    {
      ++v31;
      uint64_t v34 = *(int **)(v24 + 24 * v33);
      *uint64_t v34 = v31;
      if (v17 != v18)
      {
        uint64_t v35 = v25 + 1;
        unint64_t v36 = v34 + 1;
        unint64_t v37 = v28;
        uint64_t v38 = v32;
        int v39 = v31;
        do
        {
          int v40 = *(v35 - 1);
          int v41 = *v37++;
          if (*(_DWORD *)(v27 + 4 * (v33 - 1)) != v41) {
            ++v40;
          }
          int v43 = *v35++;
          int v42 = v43;
          if (v39 >= v43) {
            int v39 = v42;
          }
          if (v39 + 1 < v40) {
            ++v39;
          }
          else {
            int v39 = v40;
          }
          *v36++ = v39;
          --v38;
        }
        while (v38);
      }
      ++v33;
      unint64_t v25 = v34;
    }
    while (v33 != v29);
  }
  if (v83 != v81 || v17 != v18)
  {
    uint64_t v45 = v17 - v18;
    while (1)
    {
      uint64_t v46 = v45;
      if (v21)
      {
        if (!v45)
        {
          uint64_t v45 = 0;
          unint64_t v47 = v21 - 1;
LABEL_69:
          uint64_t v58 = *(unsigned int *)(*a1 + 4 * v47);
          unint64_t v21 = v47;
          goto LABEL_70;
        }
        unint64_t v47 = v21 - 1;
        long long v48 = (void *)(__src + 24 * v21);
        uint64_t v49 = *(v48 - 3);
        int v50 = *(_DWORD *)(v49 + 4 * (v45 - 1));
        if (*(_DWORD *)(*a1 + 4 * (v21 - 1)) != (*a2)[v45 - 1]) {
          ++v50;
        }
        LODWORD(p_src) = v50;
        int v51 = *(_DWORD *)(v49 + 4 * v45);
        HIDWORD(p_src) = v51 + 1;
        int v52 = *(_DWORD *)(*v48 + 4 * (v45 - 1));
        int v86 = v52 + 1;
        if (v52 >= v51) {
          int v53 = v51 + 1;
        }
        else {
          int v53 = v52 + 1;
        }
        if (v53 >= v50) {
          int v53 = v50;
        }
        for (uint64_t i = *v80; ; ++i)
        {
          if (i == v80[1])
          {
            unint64_t v47 = 0;
            uint64_t v45 = 0;
            goto LABEL_68;
          }
          uint64_t v55 = *i;
          if (*((_DWORD *)&p_src + v55) == v53) {
            break;
          }
        }
        if (v55 == 1) {
          unint64_t v56 = v21 - 1;
        }
        else {
          unint64_t v56 = v21;
        }
        if (v55 == 1) {
          uint64_t v57 = v45;
        }
        else {
          uint64_t v57 = v45 - 1;
        }
        if (v55)
        {
          unint64_t v47 = v56;
          uint64_t v45 = v57;
        }
        else
        {
          --v45;
        }
      }
      else
      {
        unint64_t v47 = 0;
        --v45;
      }
LABEL_68:
      uint64_t v58 = v14;
      if (v47 != v21) {
        goto LABEL_69;
      }
LABEL_70:
      uint64_t v59 = v14;
      if (v45 != v46) {
        uint64_t v59 = (*a2)[v45];
      }
      uint64_t v60 = v58 | (v59 << 32);
      std::string v62 = (uint64_t *)a4[1];
      unint64_t v61 = (unint64_t)a4[2];
      if ((unint64_t)v62 >= v61)
      {
        uint64_t v63 = ((char *)v62 - *a4) >> 3;
        if ((unint64_t)(v63 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v64 = v61 - (void)*a4;
        uint64_t v65 = v64 >> 2;
        if (v64 >> 2 <= (unint64_t)(v63 + 1)) {
          uint64_t v65 = v63 + 1;
        }
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v66) {
          long long v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a4 + 2), v66);
        }
        else {
          long long v67 = 0;
        }
        int v68 = &v67[8 * v63];
        *(void *)int v68 = v60;
        int v44 = v68 + 8;
        uint64_t v70 = *a4;
        unint64_t v69 = a4[1];
        if (v69 != *a4)
        {
          do
          {
            uint64_t v71 = *((void *)v69 - 1);
            v69 -= 8;
            *((void *)v68 - 1) = v71;
            v68 -= 8;
          }
          while (v69 != v70);
          unint64_t v69 = *a4;
        }
        *a4 = v68;
        a4[1] = v44;
        a4[2] = &v67[8 * v66];
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        *std::string v62 = v60;
        int v44 = (char *)(v62 + 1);
      }
      a4[1] = v44;
      if (!(v21 | v45)) {
        goto LABEL_89;
      }
    }
  }
  int v44 = a4[1];
LABEL_89:
  uint64_t v72 = *a4;
  uint64_t v73 = v44 - *a4;
  if ((unint64_t)v73 >= 0x10)
  {
    uint64_t v74 = v73 >> 3;
    unint64_t v75 = (unint64_t)(v73 >> 3) >> 1;
    if (v75 <= 1) {
      unint64_t v75 = 1;
    }
    int v76 = &v72[8 * v74 - 8];
    do
    {
      uint64_t v77 = *(void *)v72;
      *(void *)uint64_t v72 = *(void *)v76;
      v72 += 8;
      *(void *)int v76 = v77;
      v76 -= 8;
      --v75;
    }
    while (v75);
  }
  uint64_t v78 = *(unsigned int *)(*(void *)(__src + 24 * v16) + 4 * v82);
  p_src = (void **)&__src;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&p_src);
  return v78;
}

void sub_1B1B36DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<kaldi::LevenshteinOp::Value>::__init_with_size[abi:ne180100]<kaldi::LevenshteinOp::Value*,kaldi::LevenshteinOp::Value*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1B36E40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::pair<int,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,int>*>,std::__wrap_iter<std::pair<int,int>*>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = *(uint64_t **)a1;
  uint64_t v6 = a2 - *(void *)a1;
  uint64_t v7 = (uint64_t *)(*(void *)a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  if (a5 < 1) {
    return v7;
  }
  unint64_t v9 = a3;
  uint64_t v11 = v6 >> 3;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v12 = a1 + 16;
  uint64_t v13 = v14;
  unint64_t v15 = *(void *)(v12 - 8);
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    unint64_t v16 = a5 + ((uint64_t)(v15 - (void)v5) >> 3);
    if (v16 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v13 - (void)v5;
    uint64_t v18 = v17 >> 2;
    if (v17 >> 2 <= v16) {
      uint64_t v18 = v16;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v18;
    }
    uint64_t v45 = v12;
    if (v19) {
      unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v12, v19);
    }
    else {
      unint64_t v20 = 0;
    }
    unint64_t v36 = &v20[8 * v11];
    std::string __p = v20;
    int v42 = v36;
    int v44 = &v20[8 * v19];
    uint64_t v37 = 8 * a5;
    uint64_t v38 = &v36[8 * a5];
    do
    {
      uint64_t v39 = *v9++;
      *(void *)unint64_t v36 = v39;
      v36 += 8;
      v37 -= 8;
    }
    while (v37);
    int v43 = v38;
    uint64_t v7 = std::vector<std::pair<int,int>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v7);
    if (v43 != v42) {
      v43 += (v42 - v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v7;
  }
  uint64_t v21 = (uint64_t)(v15 - (void)v7) >> 3;
  if (v21 >= a5)
  {
    std::vector<unsigned int>::size_type v22 = &a3[a5];
    uint64_t v23 = *(void **)(v12 - 8);
LABEL_18:
    uint64_t v27 = &v7[a5];
    uint64_t v28 = &v23[-a5];
    uint64_t v29 = v23;
    if ((unint64_t)v28 < v15)
    {
      uint64_t v29 = v23;
      do
      {
        uint64_t v30 = *v28++;
        *v29++ = v30;
      }
      while ((unint64_t)v28 < v15);
    }
    *(void *)(a1 + 8) = v29;
    if (v23 != v27)
    {
      uint64_t v31 = 8 * (v23 - v27);
      uint64_t v32 = (_DWORD *)v23 - 1;
      uint64_t v33 = (uint64_t)&v5[v11 - 1] + 4;
      do
      {
        *(v32 - 1) = *(_DWORD *)(v33 + v31 - 4);
        _DWORD *v32 = *(_DWORD *)(v33 + v31);
        v32 -= 2;
        v31 -= 8;
      }
      while (v31);
    }
    if (v22 != a3)
    {
      uint64_t v34 = v7;
      do
      {
        uint64_t v35 = *v9++;
        *v34++ = v35;
      }
      while (v9 != v22);
    }
    return v7;
  }
  std::vector<unsigned int>::size_type v22 = &a3[v21];
  uint64_t v23 = *(void **)(v12 - 8);
  if (v22 != a4)
  {
    uint64_t v24 = v22;
    unint64_t v25 = *(void **)(v12 - 8);
    do
    {
      uint64_t v26 = *v24++;
      *v25++ = v26;
      ++v23;
    }
    while (v24 != a4);
  }
  *(void *)(a1 + 8) = v23;
  if ((uint64_t)(v15 - (void)v7) >= 1) {
    goto LABEL_18;
  }
  return v7;
}

void sub_1B1B37064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::pair<int,int>>::__swap_out_circular_buffer(uint64_t **a1, void *a2, uint64_t *a3)
{
  uint64_t result = (uint64_t *)a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = (uint64_t *)a2[1];
    do
    {
      uint64_t v8 = *--v7;
      *--uint64_t v6 = v8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  unint64_t v9 = a1[1];
  unint64_t v10 = (void *)a2[2];
  if (v9 != a3)
  {
    do
    {
      uint64_t v11 = *a3++;
      *v10++ = v11;
    }
    while (a3 != v9);
    uint64_t v6 = (uint64_t *)a2[1];
  }
  a2[2] = v10;
  uint64_t v12 = *a1;
  *a1 = v6;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = (uint64_t *)a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = (uint64_t *)a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

void TRegExpCompiler::TRegExpCompiler(TRegExpCompiler *this, const TLocaleInfo *a2)
{
  *(void *)this = &unk_1F0A33D30;
  uint64_t v4 = (TRegExpCompiler *)((char *)this + 232);
  uint64_t v5 = (TRegExpCompiler *)((char *)this + 8);
  TFsa::TFsa((TRegExpCompiler *)((char *)this + 8));
  TAllocator::TAllocator(v4, 2048);
  *((void *)this + 34) = a2;
  uint64_t v6 = TFsa::newState(v5, 0);
  TFsa::addExtremity((uint64_t)v5, (uint64_t)v6, 0);
}

void sub_1B1B371B8(_Unwind_Exception *a1)
{
  TFsa::~TFsa(v1);
  _Unwind_Resume(a1);
}

void TRegExpCompiler::~TRegExpCompiler(TRegExpCompiler *this)
{
  *(void *)this = &unk_1F0A33D30;
  TAllocator::clear((TRegExpCompiler *)((char *)this + 232));
  TFsa::~TFsa((TRegExpCompiler *)((char *)this + 8));
}

{
  uint64_t vars8;

  TRegExpCompiler::~TRegExpCompiler(this);
  JUMPOUT(0x1B3EA8670);
}

void *TRegExpCompiler::mergeStateData(uint64_t a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  uint64_t v2 = (void *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = (void *)v2[4];
    if (v6) {
      v5 += *v6;
    }
    uint64_t v7 = (void *)v2[1];
    if (v7)
    {
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v8 = (void *)v2[2];
        BOOL v9 = *v8 == (void)v2;
        uint64_t v2 = v8;
      }
      while (!v9);
    }
    uint64_t v2 = v8;
  }
  while (v8 != v3);
  if (!v5) {
    return 0;
  }
  if ((unint64_t)(v5 + 1) >> 61) {
    uint64_t v10 = -1;
  }
  else {
    uint64_t v10 = 8 * (v5 + 1);
  }
  uint64_t result = (void *)TAllocator::allocate((TAllocator *)(a1 + 232), v10);
  *uint64_t result = v5;
  uint64_t v12 = (void *)*a2;
  if ((void *)*a2 != v3)
  {
    uint64_t v13 = 1;
    do
    {
      uint64_t v14 = (unint64_t *)v12[4];
      if (v14 && *v14)
      {
        unint64_t v15 = 0;
        do
        {
          unint64_t v16 = v15 + 1;
          result[v13 + v15] = v14[v15 + 1];
          unint64_t v15 = v16;
        }
        while (v16 < *v14);
        v13 += v16;
      }
      uint64_t v17 = (void *)v12[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v12[2];
          BOOL v9 = *v18 == (void)v12;
          uint64_t v12 = v18;
        }
        while (!v9);
      }
      uint64_t v12 = v18;
    }
    while (v18 != v3);
  }
  return result;
}

uint64_t TRegExpCompiler::compileCharacter(uint64_t a1, unsigned int **a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a2;
  uint64_t v11 = **a2;
  if (v11 != 92) {
    goto LABEL_12;
  }
  __int32 v13 = v10[1];
  __int32 v12 = v13;
  *a2 = v10 + 1;
  if (!v13)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "search pattern not terminated");
    TException::TException(v27, (long long *)__p);
    v27[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
    if (v28 >= 0) {
      uint64_t v23 = (std::exception_vtbl *)&v27[1];
    }
    else {
      uint64_t v23 = v27[1].__vftable;
    }
    conditionalAssert((const char *)v23, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 336);
    TException::~TException(v27);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v27, "search pattern not terminated");
    TException::TException(exception, (long long *)v27);
    void *exception = &unk_1F0A33FD8;
  }
  if (wcschr((__int32 *)"a", v12))
  {
    uint64_t v14 = (TAllocator *)(a1 + 8);
    unint64_t v15 = TFsa::newState(v14, 0);
    TFsa::newTrans(v14, a4, (uint64_t)v15, 0xFFFFLL);
    if (**a2) {
      uint64_t v16 = **a2;
    }
    else {
      uint64_t v16 = -1;
    }
    uint64_t v17 = v14;
    uint64_t v18 = (uint64_t)v15;
LABEL_22:
    uint64_t v19 = a5;
    goto LABEL_23;
  }
  uint64_t v11 = **a2;
  if (v11 == 116)
  {
    uint64_t v17 = (TAllocator *)(a1 + 8);
    uint64_t v18 = a4;
    uint64_t v19 = a5;
    uint64_t v16 = 9;
    goto LABEL_23;
  }
  if (v11 == 114)
  {
    uint64_t v17 = (TAllocator *)(a1 + 8);
    uint64_t v18 = a4;
    uint64_t v19 = a5;
    uint64_t v16 = 13;
    goto LABEL_23;
  }
  if (v11 != 110)
  {
LABEL_12:
    uint64_t v20 = *(void *)(a1 + 272);
    if (a3 == 2)
    {
      uint64_t v21 = *(void *)(v20 + 32);
      if (v21 && (unint64_t)(int)v11 < 0x10000) {
        LODWORD(v11) = *(_DWORD *)(v21 + 4 * (int)v11);
      }
    }
    else if (a3 == 1)
    {
      LODWORD(v11) = TLocaleInfo::toLower(v20, v11);
    }
    if (v11) {
      uint64_t v16 = v11;
    }
    else {
      uint64_t v16 = -1;
    }
    uint64_t v17 = (TAllocator *)(a1 + 8);
    uint64_t v18 = a4;
    goto LABEL_22;
  }
  uint64_t v17 = (TAllocator *)(a1 + 8);
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v16 = 10;
LABEL_23:
  uint64_t result = TFsa::newTrans(v17, v18, v19, v16);
  ++*a2;
  return result;
}

void sub_1B1B37608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t TException::what(TException *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t TRegExpCompiler::compileRange(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  uint64_t v12 = *(void *)(a1 + 272);
  if (a4 == 2)
  {
    uint64_t v15 = *(void *)(v12 + 32);
    int v13 = a2;
    int v14 = a3;
    if (v15)
    {
      int v13 = a2;
      if ((unint64_t)(int)a2 < 0x10000) {
        int v13 = *(_DWORD *)(v15 + 4 * (int)a2);
      }
      if ((unint64_t)(int)a3 >= 0x10000) {
        int v14 = a3;
      }
      else {
        int v14 = *(_DWORD *)(v15 + 4 * (int)a3);
      }
    }
  }
  else
  {
    int v13 = a2;
    int v14 = a3;
    if (a4 == 1)
    {
      int v13 = TLocaleInfo::toLower(v12, a2);
      int v14 = TLocaleInfo::toLower(*(void *)(a1 + 272), v9);
    }
  }
  if (v13 > v14)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"invalid [", 9);
    char v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)",", 1);
    uint64_t v29 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] range", 7);
    std::stringbuf::str();
    TException::TException(v34, &__p);
    v34[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
    if (v35 >= 0) {
      uint64_t v30 = (std::exception_vtbl *)&v34[1];
    }
    else {
      uint64_t v30 = v34[1].__vftable;
    }
    conditionalAssert((const char *)v30, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 386);
    TException::~TException(v34);
    if (v33 < 0) {
      operator delete((void *)__p);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::stringbuf::str();
    TException::TException(exception, (long long *)v34);
    void *exception = &unk_1F0A33FD8;
  }
  uint64_t v16 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  TFsa::newTrans((TAllocator *)(a1 + 8), a5, (uint64_t)v16, 0xFFFFLL);
  uint64_t v17 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v16, (uint64_t)v17, 114);
  uint64_t v18 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  uint64_t v19 = *(void *)(a1 + 272);
  if (a4 == 2)
  {
    uint64_t v22 = *(void *)(v19 + 32);
    if (v22 && (unint64_t)(int)v10 < 0x10000) {
      LODWORD(v10) = *(_DWORD *)(v22 + 4 * (int)v10);
    }
    if (v10) {
      uint64_t v23 = v10;
    }
    else {
      uint64_t v23 = -1;
    }
    TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v17, (uint64_t)v18, v23);
    uint64_t v24 = *(void *)(*(void *)(a1 + 272) + 32);
    if (v24 && (unint64_t)(int)v9 < 0x10000) {
      LODWORD(v9) = *(_DWORD *)(v24 + 4 * (int)v9);
    }
  }
  else if (a4 == 1)
  {
    unsigned int v20 = TLocaleInfo::toLower(v19, v10);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = -1;
    }
    TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v17, (uint64_t)v18, v21);
    LODWORD(v9) = TLocaleInfo::toLower(*(void *)(a1 + 272), v9);
  }
  else
  {
    if (v10) {
      uint64_t v25 = v10;
    }
    else {
      uint64_t v25 = -1;
    }
    TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v17, (uint64_t)v18, v25);
  }
  if (v9) {
    uint64_t v26 = v9;
  }
  else {
    uint64_t v26 = -1;
  }
  return TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v18, a6, v26);
}

void sub_1B1B379F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t TRegExpCompiler::compileNegatedSet(uint64_t a1, unsigned int **a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (TAllocator *)(a1 + 8);
  uint64_t v11 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  TFsa::newTrans(v10, a4, (uint64_t)v11, 0xFFFFLL);
  uint64_t v12 = TFsa::newState(v10, 0);
  TFsa::newTrans(v10, (uint64_t)v11, (uint64_t)v12, 110);
  int v13 = TFsa::newState(v10, 0);
  TFsa::newTrans(v10, (uint64_t)v13, a5, 110);
  int v14 = TFsa::newState(v10, 0);
  TFsa::newTrans(v10, (uint64_t)v14, (uint64_t)v13, 0xFFFFLL);
  uint64_t v15 = *a2;
  uint64_t v16 = *a2;
  while (*v16 != 93)
  {
    if (!*v16) {
      goto LABEL_10;
    }
LABEL_6:
    uint64_t v17 = TFsa::newState(v10, 0);
    uint64_t v18 = *a2;
    if ((*a2)[1] == 45 && (uint64_t v19 = v18[2], v19 != 93))
    {
      TRegExpCompiler::compileRange(a1, *v18, v19, a3, (uint64_t)v12, (uint64_t)v17);
      uint64_t v16 = *a2 + 3;
      *a2 = v16;
      uint64_t v12 = v17;
    }
    else
    {
      TRegExpCompiler::compileCharacter(a1, a2, a3, (uint64_t)v12, (uint64_t)v17);
      uint64_t v16 = *a2;
      uint64_t v12 = v17;
    }
  }
  if (v16 == v15) {
    goto LABEL_6;
  }
LABEL_10:
  return TFsa::newTrans(v10, (uint64_t)v12, (uint64_t)v14, -1);
}

uint64_t TRegExpCompiler::compileSet(uint64_t result, unsigned int **a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  uint64_t v10 = *a2;
  uint64_t v11 = *a2;
  while (1)
  {
    uint64_t v12 = *v11;
    if (v12 == 93) {
      break;
    }
    if (!v12) {
      return result;
    }
LABEL_6:
    if (v11[1] == 45 && (uint64_t v13 = v11[2], v13 != 93))
    {
      uint64_t result = TRegExpCompiler::compileRange(v9, v12, v13, a3, a4, a5);
      uint64_t v11 = *a2 + 3;
      *a2 = v11;
    }
    else
    {
      uint64_t result = TRegExpCompiler::compileCharacter(v9, a2, a3, a4, a5);
      uint64_t v11 = *a2;
    }
  }
  if (v11 == v10) {
    goto LABEL_6;
  }
  return result;
}

uint64_t TRegExpCompiler::compile(uint64_t a1, __int32 **a2, unsigned int a3, void *a4, uint64_t a5)
{
  if (wcschr((__int32 *)"*", **a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v56, "*+?{ follows nothing");
    TException::TException(&v50, &v56);
    v50.__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
    if (v53 >= 0) {
      int v43 = (const char *)&v51;
    }
    else {
      int v43 = (const char *)v51;
    }
    conditionalAssert(v43, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 468);
    TException::~TException(&v50);
    if (v57 < 0) {
      operator delete((void *)v56);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v50, "*+?{ follows nothing");
    TException::TException(exception, (long long *)&v50);
    void *exception = &unk_1F0A33FD8;
  }
  uint64_t v8 = (TAllocator *)(a1 + 8);
  unint64_t v47 = (TAllocator *)(a1 + 232);
  uint64_t v45 = (uint64_t)a4;
  uint64_t v48 = a1;
  while (1)
  {
    uint64_t v9 = (uint64_t)a4;
    uint64_t v10 = *a2;
    __int32 v11 = **a2;
    if (!v11 || v11 == 41) {
      return TFsa::newTrans(v8, (uint64_t)a4, a5, -1);
    }
    uint64_t v12 = TFsa::newState(v8, 0);
    TFsa::newTrans(v8, (uint64_t)a4, (uint64_t)v12, -1);
    a4 = TFsa::newState(v8, 0);
    uint64_t v13 = *a2;
    __int32 v14 = **a2;
    if (v14 == 91)
    {
      __int32 v16 = v13[1];
      *a2 = v13 + 1;
      if (v16 == 94)
      {
        *a2 = v13 + 2;
        TRegExpCompiler::compileNegatedSet(a1, (unsigned int **)a2, a3, (uint64_t)v12, (uint64_t)a4);
      }
      else
      {
        TRegExpCompiler::compileSet(a1, (unsigned int **)a2, a3, (uint64_t)v12, (uint64_t)a4);
      }
      uint64_t v15 = *a2;
      if (**a2 != 93)
      {
        std::string::basic_string[abi:ne180100]<0>(&v56, "unmatched []");
        TException::TException(&v50, &v56);
        v50.__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
        if (v53 >= 0) {
          int v41 = (const char *)&v51;
        }
        else {
          int v41 = (const char *)v51;
        }
        conditionalAssert(v41, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 509);
        TException::~TException(&v50);
        if (v57 < 0) {
          operator delete((void *)v56);
        }
        int v42 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v50, "unmatched []");
        TException::TException(v42, (long long *)&v50);
        *int v42 = &unk_1F0A33FD8;
      }
      goto LABEL_22;
    }
    if (v14 == 40)
    {
      *a2 = v13 + 1;
      TRegExpCompiler::compile(a1, a2, a3, v12, a4);
      uint64_t v15 = *a2;
      if (**a2 != 41)
      {
        std::string::basic_string[abi:ne180100]<0>(&v56, "unmatched ()");
        TException::TException(&v50, &v56);
        v50.__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
        if (v53 >= 0) {
          uint64_t v39 = (const char *)&v51;
        }
        else {
          uint64_t v39 = (const char *)v51;
        }
        conditionalAssert(v39, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 489);
        TException::~TException(&v50);
        if (v57 < 0) {
          operator delete((void *)v56);
        }
        int v40 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v50, "unmatched ()");
        TException::TException(v40, (long long *)&v50);
        *int v40 = &unk_1F0A33FD8;
      }
      goto LABEL_22;
    }
    if (wcschr((__int32 *)"*", v14))
    {
      std::string::basic_string[abi:ne180100]<0>(&v56, "nested *+?{");
      TException::TException(&v50, &v56);
      v50.__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
      if (v53 >= 0) {
        uint64_t v37 = (const char *)&v51;
      }
      else {
        uint64_t v37 = (const char *)v51;
      }
      conditionalAssert(v37, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 516);
      TException::~TException(&v50);
      if (v57 < 0) {
        operator delete((void *)v56);
      }
      uint64_t v38 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v50, "nested *+?{");
      TException::TException(v38, (long long *)&v50);
      void *v38 = &unk_1F0A33FD8;
    }
    __int32 v17 = **a2;
    if (v17 == 124)
    {
      TFsa::newTrans(v8, v9, a5, -1);
      a4 = TFsa::newState(v8, 0);
      TFsa::newTrans(v8, v45, (uint64_t)a4, -1);
      ++*a2;
    }
    else
    {
      if (wcschr((__int32 *)"^", v17))
      {
        uint64_t v18 = TFsa::newState(v8, 0);
        TFsa::newTrans(v8, (uint64_t)v12, (uint64_t)v18, 0xFFFFLL);
        if (**a2) {
          uint64_t v19 = **a2;
        }
        else {
          uint64_t v19 = -1;
        }
        a1 = v48;
        TFsa::newTrans(v8, (uint64_t)v18, (uint64_t)a4, v19);
        uint64_t v15 = *a2;
LABEL_22:
        unsigned int v20 = v15 + 1;
        *a2 = v15 + 1;
        goto LABEL_23;
      }
      TRegExpCompiler::compileCharacter(a1, (unsigned int **)a2, a3, (uint64_t)v12, (uint64_t)a4);
      unsigned int v20 = *a2;
LABEL_23:
      __int32 v21 = *v20;
      if (*v20 == 123)
      {
        *a2 = v20 + 1;
        unint64_t v55 = 0;
        *(void *)&long long v56 = 0;
        parseRepetition((unsigned int **)a2, &v56, &v55);
        v50.__vftable = (std::exception_vtbl *)v52;
        long long v51 = xmmword_1B25607E0;
        char v54 = 1;
        unint64_t v22 = v56;
        if ((unint64_t)v56 >= 2)
        {
          uint64_t v23 = v56 - 1;
          do
          {
            TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v10, v20 - v10);
            --v23;
          }
          while (v23);
        }
        unint64_t v24 = v55;
        if (v55 == -1)
        {
          unint64_t v27 = *((void *)&v51 + 1);
          if (v22)
          {
            TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v10, v20 - v10);
            unint64_t v27 = *((void *)&v51 + 1);
          }
          v58[0] = 42;
          TBuffer<wchar_t>::insert((uint64_t)&v50, v27, v58, 1uLL);
        }
        else if (v55 > v22)
        {
          if (!v22)
          {
            v58[0] = 63;
            TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v58, 1uLL);
            *(void *)&long long v56 = 1;
            unint64_t v22 = 1;
          }
          unint64_t v25 = v24 - v22;
          if (v25)
          {
            unint64_t v26 = v20 - v10;
            do
            {
              TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v10, v26);
              v58[0] = 63;
              TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v58, 1uLL);
              --v25;
            }
            while (v25);
          }
        }
        uint64_t v28 = 0;
        uint64_t v29 = *a2;
        while (v29[v28++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v29, v28 - 1);
        if ((unint64_t)(*((void *)&v51 + 1) + 1) >> 62) {
          uint64_t v31 = -1;
        }
        else {
          uint64_t v31 = 4 * (*((void *)&v51 + 1) + 1);
        }
        a1 = v48;
        unsigned int v20 = (__int32 *)TAllocator::allocate(v47, v31);
        if (*((void *)&v51 + 1) >= (unint64_t)v51)
        {
          if (v54)
          {
            v58[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v58, 1uLL);
            uint64_t v32 = v50.__vftable;
            --*((void *)&v51 + 1);
          }
          else
          {
            uint64_t v32 = v50.__vftable;
            if ((void)v51) {
              *((_DWORD *)v50.__vftable + v51 - 1) = 0;
            }
          }
        }
        else
        {
          uint64_t v32 = v50.__vftable;
          *((_DWORD *)&v50.~exception + *((void *)&v51 + 1)) = 0;
        }
        wcscpy(v20, (const __int32 *)v32);
        *a2 = v20;
        if (v54 && v50.__vftable != (std::exception_vtbl *)v52 && v50.__vftable)
        {
          MEMORY[0x1B3EA8630]();
          unsigned int v20 = *a2;
        }
        __int32 v21 = *v20;
      }
      switch(v21)
      {
        case '?':
          *a2 = v20 + 1;
          goto LABEL_60;
        case '+':
          *a2 = v20 + 1;
          char v33 = v8;
          uint64_t v34 = (uint64_t)a4;
          uint64_t v35 = (uint64_t)v12;
          goto LABEL_61;
        case '*':
          *a2 = v20 + 1;
          TFsa::newTrans(v8, (uint64_t)a4, (uint64_t)v12, -1);
LABEL_60:
          char v33 = v8;
          uint64_t v34 = v9;
          uint64_t v35 = (uint64_t)a4;
LABEL_61:
          TFsa::newTrans(v33, v34, v35, -1);
          break;
      }
    }
  }
}

void sub_1B1B3858C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

uint64_t parseRepetition(unsigned int **a1, void *a2, void *a3)
{
  *a2 = 0;
  *a3 = 0;
  unsigned int v6 = **a1;
  {
    operator new();
  }
  if ((int)v6 < 48
    || v6 >= 0x3A
    && (v6 < 0x660
     || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6) == -1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "expected a digit after {");
    TException::TException(v36, (long long *)__p);
    v36[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
    if (v37 >= 0) {
      __int32 v14 = (std::exception_vtbl *)&v36[1];
    }
    else {
      __int32 v14 = v36[1].__vftable;
    }
    conditionalAssert((const char *)v14, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 264);
    TException::~TException(v36);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v36, "expected a digit after {");
    TException::TException(exception, (long long *)v36);
    void *exception = &unk_1F0A33FD8;
  }
  uint64_t v7 = *a1;
  {
    operator new();
  }
  uint64_t result = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7, a1);
  *a2 = result;
  uint64_t v9 = *a1;
  unsigned int v10 = **a1;
  if (v10 != 44)
  {
    if (v10 != 125)
    {
      if (!v10)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "search pattern not terminated");
        TException::TException(v36, (long long *)__p);
        v36[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
        if (v37 >= 0) {
          __int32 v16 = (std::exception_vtbl *)&v36[1];
        }
        else {
          __int32 v16 = v36[1].__vftable;
        }
        conditionalAssert((const char *)v16, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 270);
        TException::~TException(v36);
        if (v34 < 0) {
          operator delete(__p[0]);
        }
        __int32 v17 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v36, "search pattern not terminated");
        TException::TException(v17, (long long *)v36);
        *__int32 v17 = &unk_1F0A33FD8;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "invalid {} range");
      TException::TException(v36, (long long *)__p);
      v36[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
      if (v37 >= 0) {
        uint64_t v18 = (std::exception_vtbl *)&v36[1];
      }
      else {
        uint64_t v18 = v36[1].__vftable;
      }
      conditionalAssert((const char *)v18, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 285);
      TException::~TException(v36);
      if (v34 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v19 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v36, "invalid {} range");
      TException::TException(v19, (long long *)v36);
      *uint64_t v19 = &unk_1F0A33FD8;
    }
    if (!result)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "invalid {0} range");
      TException::TException(v36, (long long *)__p);
      v36[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
      if (v37 >= 0) {
        unsigned int v20 = (std::exception_vtbl *)&v36[1];
      }
      else {
        unsigned int v20 = v36[1].__vftable;
      }
      conditionalAssert((const char *)v20, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 276);
      TException::~TException(v36);
      if (v34 < 0) {
        operator delete(__p[0]);
      }
      __int32 v21 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v36, "invalid {0} range");
      TException::TException(v21, (long long *)v36);
      *__int32 v21 = &unk_1F0A33FD8;
    }
    *a3 = result;
LABEL_21:
    uint64_t v12 = v9 + 1;
    goto LABEL_22;
  }
  unsigned int v11 = v9[1];
  *a1 = v9 + 1;
  if (v11 != 125)
  {
    {
      operator new();
    }
    if ((int)v11 < 48
      || v11 >= 0x3A
      && (v11 < 0x660
       || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11) == -1))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"expected a digit after {", 24);
      unint64_t v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)",", 1);
      std::stringbuf::str();
      TException::TException(__p, (long long *)v31);
      __p[0] = &unk_1F0A33FD8;
      if (v35 >= 0) {
        uint64_t v23 = (const char *)&__p[1];
      }
      else {
        uint64_t v23 = (const char *)__p[1];
      }
      conditionalAssert(v23, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 300);
      TException::~TException((std::exception *)__p);
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      unint64_t v24 = __cxa_allocate_exception(0x20uLL);
      std::stringbuf::str();
      TException::TException(v24, (long long *)__p);
      *unint64_t v24 = &unk_1F0A33FD8;
    }
    uint64_t v13 = *a1;
    {
      operator new();
    }
    uint64_t result = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v13, a1);
    *a3 = result;
    uint64_t v9 = *a1;
    if (**a1 != 125)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "search pattern not terminated");
      TException::TException(v36, (long long *)__p);
      v36[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
      if (v37 >= 0) {
        int v25 = (std::exception_vtbl *)&v36[1];
      }
      else {
        int v25 = v36[1].__vftable;
      }
      conditionalAssert((const char *)v25, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 306);
      TException::~TException(v36);
      if (v34 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v26 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v36, "search pattern not terminated");
      TException::TException(v26, (long long *)v36);
      void *v26 = &unk_1F0A33FD8;
    }
    if (*a2 > (unint64_t)result)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"invalid {", 9);
      unint64_t v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)",", 1);
      uint64_t v28 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"} range", 7);
      std::stringbuf::str();
      TException::TException(__p, (long long *)v31);
      __p[0] = &unk_1F0A33FD8;
      if (v35 >= 0) {
        uint64_t v29 = (const char *)&__p[1];
      }
      else {
        uint64_t v29 = (const char *)__p[1];
      }
      conditionalAssert(v29, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 313);
      TException::~TException((std::exception *)__p);
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      uint64_t v30 = __cxa_allocate_exception(0x20uLL);
      std::stringbuf::str();
      TException::TException(v30, (long long *)__p);
      *uint64_t v30 = &unk_1F0A33FD8;
    }
    goto LABEL_21;
  }
  *a3 = -1;
  uint64_t v12 = v9 + 2;
LABEL_22:
  *a1 = v12;
  return result;
}

void sub_1B1B38FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::exception a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  MEMORY[0x1B3EA8670](v27, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

unint64_t TRegExpCompiler::compileFlags(uint64_t a1, __int32 **a2, uint64_t a3, uint64_t *a4, int *a5)
{
  *a4 = a3;
  unint64_t result = (unint64_t)wcschr(*a2, 58);
  if (result)
  {
    unint64_t v10 = result;
    unsigned int v11 = *a2;
    if ((__int32 *)result == *a2 || *(_DWORD *)(result - 4) != 92)
    {
      if ((unint64_t)v11 < result)
      {
        uint64_t v12 = (TAllocator *)(a1 + 8);
        do
        {
          uint64_t v13 = *v11;
          switch(v13)
          {
            case 'z':
              int v14 = 0;
              break;
            case 'i':
              int v14 = 1;
              break;
            case 'c':
              int v14 = 2;
              break;
            default:
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"invalid flag '", 14);
              __int32 v17 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"'", 1);
              std::stringbuf::str();
              TException::TException(v22, &__p);
              v22[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
              if (v23 >= 0) {
                uint64_t v18 = (std::exception_vtbl *)&v22[1];
              }
              else {
                uint64_t v18 = v22[1].__vftable;
              }
              conditionalAssert((const char *)v18, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 663);
              TException::~TException(v22);
              if (v21 < 0) {
                operator delete((void *)__p);
              }
              exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
              std::stringbuf::str();
              TException::TException(exception, (long long *)v22);
              void *exception = &unk_1F0A33FD8;
          }
          *a5 = v14;
          uint64_t v15 = TFsa::newState(v12, 0);
          TFsa::newTrans(v12, *a4, (uint64_t)v15, 0xFFFFLL);
          *a4 = (uint64_t)v15;
          __int32 v16 = TFsa::newState(v12, 0);
          unint64_t result = TFsa::newTrans(v12, *a4, (uint64_t)v16, v13);
          *a4 = (uint64_t)v16;
          unsigned int v11 = *a2 + 1;
          *a2 = v11;
        }
        while ((unint64_t)v11 < v10);
      }
      *a2 = v11 + 1;
    }
  }
  return result;
}

void sub_1B1B39388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

void TRegExpCompiler::add(void *a1, __int32 *a2, uint64_t a3)
{
  unsigned int v17 = 0;
  v11[0] = 0;
  __int32 v16 = a2;
  uint64_t v5 = (uint64_t *)a1[20];
  unsigned int v6 = (uint64_t *)a1[21];
  if (v5 != v6)
  {
    while (!*v5)
    {
      if (++v5 == v6)
      {
        uint64_t v5 = (uint64_t *)a1[21];
        break;
      }
    }
  }
  TRegExpCompiler::compileFlags((uint64_t)a1, &v16, *v5, v11, (int *)&v17);
  uint64_t v7 = TFsa::newState((TAllocator *)(a1 + 1), 0);
  TRegExpCompiler::compile((uint64_t)a1, &v16, v17, (void *)v11[0], (uint64_t)v7);
  if (*v16)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "unmatched ()");
    TException::TException(v14, (long long *)__p);
    v14[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
    if (v15 >= 0) {
      uint64_t v9 = (std::exception_vtbl *)&v14[1];
    }
    else {
      uint64_t v9 = v14[1].__vftable;
    }
    conditionalAssert((const char *)v9, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 697);
    TException::~TException(v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "unmatched ()");
    TException::TException(exception, (long long *)v14);
    void *exception = &unk_1F0A33FD8;
  }
  uint64_t v8 = (void *)TAllocator::allocate((TAllocator *)(a1 + 29), 16);
  *uint64_t v8 = 1;
  v8[1] = a3;
  v7[1] = v8;
  TFsa::addExtremity((uint64_t)(a1 + 1), (uint64_t)v7, 1u);
}

void sub_1B1B395C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

void sub_1B1B39804(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v23)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a22);
    __cxa_end_catch();
    JUMPOUT(0x1B1B39894);
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t TRegExpCompiler::compressDfaRec(uint64_t result, uint64_t *a2, void **a3, void *a4, void *a5, void *a6)
{
  uint64_t v6 = *a2;
  if (!*(void *)(*a6 + 8 * *a2))
  {
    uint64_t v12 = result;
    char v13 = *a3;
    int v14 = (void *)*a5;
    *char v13 = *a4;
    v13[1] = v14;
    char v15 = *a3;
    *a3 += 2;
    *(void *)(*a6 + 8 * v6) = v15;
    __int32 v16 = (unint64_t *)a2[1];
    if (v16 && *v16)
    {
      unint64_t v17 = 0;
      uint64_t v18 = (void *)*a5;
      do
        *v18++ = v16[++v17];
      while (v17 < *v16);
      *a5 = v18;
    }
    uint64_t v19 = *a4;
    unint64_t result = TState::getTransCount((uint64_t)a2, 1u);
    *a4 += 16 * result;
    for (uint64_t i = (void *)a2[3]; i; v19 += 16)
    {
      char v21 = (void *)i[2];
      unint64_t result = TRegExpCompiler::compressDfaRec(v12, v21, a3, a4, a5, a6);
      uint64_t v22 = *(void *)(*a6 + 8 * *v21);
      *(_DWORD *)uint64_t v19 = *i;
      *(void *)(v19 + 8) = v22;
      uint64_t i = (void *)i[5];
    }
  }
  return result;
}

void TRegExpCompiler::compressDfa(TRegExpCompiler *this, const TFsa *a2)
{
  uint64_t v2 = (void *)*((void *)a2 + 6);
  uint64_t v3 = (void *)*((void *)a2 + 7);
  if (v2 != v3)
  {
    while (!*v2)
    {
      if (++v2 == v3) {
        goto LABEL_13;
      }
    }
  }
  if (v2 != v3)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *(void **)(*v2 + 8);
      if (v5) {
        v4 += *v5;
      }
      uint64_t v6 = v2 + 1;
      do
      {
        if (v6 == v3) {
          goto LABEL_13;
        }
      }
      while (!*v6++);
      uint64_t v2 = v6 - 1;
    }
  }
LABEL_13:
  operator new[]();
}

void sub_1B1B39BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TRegExpCompiler::compile(TRegExpCompiler *this)
{
  TFsa::TFsa((TFsa *)v2);
  TFsa::nfaToDfa((uint64_t)this + 8, (TFsa *)v2, (uint64_t)this);
  TRegExpCompiler::compressDfa(this, (const TFsa *)v2);
}

void sub_1B1B39C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t TRegExpSearch::searchNegatedRange(uint64_t *a1, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result = *a1;
  signed int v9 = *a3;
  if (a4 == 2)
  {
    uint64_t v10 = *(void *)(result + 32);
    if (v10 && (unint64_t)v9 < 0x10000) {
      signed int v9 = *(_DWORD *)(v10 + 4 * v9);
    }
  }
  else if (a4 == 1)
  {
    uint64_t result = TLocaleInfo::toLower(result, *a3);
    signed int v9 = result;
  }
  unint64_t v11 = *a2;
  unint64_t v12 = a2[2];
  while (v11 < v12)
  {
    char v13 = *(unint64_t **)(v11 + 8);
    unint64_t v14 = *v13;
    unint64_t v15 = v13[2];
    if (*v13 < v15)
    {
      do
      {
        if (v9 < *(_DWORD *)v11 || v9 > *(_DWORD *)v14)
        {
          uint64_t result = TRegExpSearch::searchNegated(a1, *(void *)(v14 + 8), a3, a4);
          unint64_t v15 = v13[2];
        }
        v14 += 16;
      }
      while (v14 < v15);
      unint64_t v12 = a2[2];
    }
    v11 += 16;
  }
  return result;
}

uint64_t TRegExpSearch::searchNegated(uint64_t *a1, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result = *a1;
  signed int v9 = *a3;
  if (a4 == 2)
  {
    uint64_t v10 = *(void *)(result + 32);
    if (v10 && (unint64_t)v9 < 0x10000) {
      signed int v9 = *(_DWORD *)(v10 + 4 * v9);
    }
  }
  else if (a4 == 1)
  {
    uint64_t result = TLocaleInfo::toLower(result, *a3);
    signed int v9 = result;
  }
  for (unint64_t i = *a2; i < a2[2]; i += 16)
  {
    if (*(_DWORD *)i == 0xFFFF)
    {
      uint64_t result = TRegExpSearch::searchNegatedCommand((uint64_t)a1, *(unint64_t **)(i + 8), a3, a4);
    }
    else if (v9 != *(_DWORD *)i)
    {
      uint64_t result = TRegExpSearch::searchNegated(a1, *(void *)(i + 8), a3, a4);
    }
  }
  return result;
}

uint64_t TRegExpSearch::searchNegatedCommand(uint64_t result, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v4 = *a2;
  if (*a2 < a2[2])
  {
    uint64_t v8 = (uint64_t *)result;
    signed int v9 = a3 + 1;
    do
    {
      int v10 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 == 114)
      {
        uint64_t result = TRegExpSearch::searchNegatedRange(v8, *(unint64_t **)(v4 + 8), a3, a4);
      }
      else if (v10 == 110)
      {
        uint64_t result = TRegExpSearch::search(v8, *(void *)(v4 + 8), v9, a4);
      }
      else
      {
        uint64_t result = testCharClass(v10, *a3);
        if ((result & 1) == 0) {
          uint64_t result = TRegExpSearch::searchNegated(v8, *(void *)(v4 + 8), a3, a4);
        }
      }
      v4 += 16;
    }
    while (v4 < a2[2]);
  }
  return result;
}

void TRegExpSearch::search(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int a4)
{
  while (1)
  {
    if ((*(unsigned char *)(a1 + 44) & 1) == 0 || !*a3)
    {
      for (unint64_t i = (uint64_t *)a2[1]; (unint64_t)i < a2[3]; ++i)
      {
        *(unsigned char *)(a1 + 41) = 1;
        unint64_t v12 = *(void ***)(a1 + 16);
        if (v12)
        {
          unint64_t v14 = (char *)*v12;
          char v13 = v12[1];
          uint64_t v15 = *i;
          unint64_t v16 = ((char *)v13 - (unsigned char *)*v12) / 24;
          if (v13 == *v12)
          {
LABEL_18:
            uint64_t v19 = *(void *)(a1 + 32);
            unint64_t v20 = (unint64_t)v12[2];
            if ((unint64_t)v13 >= v20)
            {
              unint64_t v22 = v16 + 1;
              if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)v14) >> 3);
              if (2 * v23 > v22) {
                unint64_t v22 = 2 * v23;
              }
              if (v23 >= 0x555555555555555) {
                unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v24 = v22;
              }
              if (v24) {
                int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v12 + 2), v24);
              }
              else {
                int v25 = 0;
              }
              unint64_t v26 = &v25[24 * v16];
              *(void *)unint64_t v26 = v19;
              *((void *)v26 + 1) = a3;
              *((void *)v26 + 2) = v15;
              uint64_t v28 = (char *)*v12;
              uint64_t v27 = (char *)v12[1];
              uint64_t v29 = v26;
              if (v27 != *v12)
              {
                do
                {
                  long long v30 = *(_OWORD *)(v27 - 24);
                  *((void *)v29 - 1) = *((void *)v27 - 1);
                  *(_OWORD *)(v29 - 24) = v30;
                  v29 -= 24;
                  v27 -= 24;
                }
                while (v27 != v28);
                uint64_t v27 = (char *)*v12;
              }
              char v21 = v26 + 24;
              *unint64_t v12 = v29;
              v12[1] = v26 + 24;
              v12[2] = &v25[24 * v24];
              if (v27) {
                operator delete(v27);
              }
            }
            else
            {
              *char v13 = v19;
              v13[1] = a3;
              char v21 = v13 + 3;
              v13[2] = v15;
            }
            v12[1] = v21;
          }
          else
          {
            if (v16 <= 1) {
              uint64_t v17 = 1;
            }
            else {
              uint64_t v17 = ((char *)v13 - (unsigned char *)*v12) / 24;
            }
            uint64_t v18 = v14 + 16;
            while (*v18 != v15 || *(v18 - 2) != *(void *)(a1 + 32) || *(v18 - 1) >= (unint64_t)a3)
            {
              v18 += 3;
              if (!--v17) {
                goto LABEL_18;
              }
            }
            *(v18 - 1) = a3;
            *uint64_t v18 = v15;
          }
        }
      }
    }
    uint64_t v7 = a2[2];
    uint64_t v8 = *a2;
    uint64_t v9 = v7 - *a2;
    if (v7 == *a2) {
      break;
    }
    if (*(_DWORD *)v8 == 0xFFFF)
    {
      TRegExpSearch::searchCommand(a1, *(unsigned int ***)(v8 + 8), a3, a4);
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v31 = v9 >> 4;
    uint64_t v32 = *a3;
    if (!v32 && v10 < v31)
    {
      *(unsigned char *)(a1 + 40) = 1;
      return;
    }
    uint64_t v33 = *(void *)a1;
    if (a4 == 2)
    {
      uint64_t v34 = *(void *)(v33 + 32);
      if (v34) {
        BOOL v35 = (unint64_t)(int)v32 < 0x10000;
      }
      else {
        BOOL v35 = 0;
      }
      if (v35) {
        LODWORD(v32) = *(_DWORD *)(v34 + 4 * (int)v32);
      }
    }
    else if (a4 == 1)
    {
      LODWORD(v32) = TLocaleInfo::toLower(v33, v32);
    }
    uint64_t v36 = v31 - 1;
    if (v10 < v31)
    {
      uint64_t v37 = *a2;
      do
      {
        uint64_t v38 = (v36 + v10) >> 1;
        int v39 = *(_DWORD *)(v37 + 16 * v38);
        if (v32 == v39) {
          break;
        }
        if ((int)v32 > v39) {
          uint64_t v36 = v38 - 1;
        }
        else {
          uint64_t v10 = v38 + 1;
        }
      }
      while (v10 <= v36);
      uint64_t v8 = v37 + 16 * v38;
    }
    if (v10 > v36) {
      return;
    }
    a2 = *(uint64_t **)(v8 + 8);
    ++a3;
  }
}

uint64_t testCharClass(int a1, int a2)
{
  uint64_t result = 0;
  if (a1 <= 96)
  {
    switch(a1)
    {
      case 'L':
        {
            operator new();
        }
        int isLower = TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        goto LABEL_61;
      case 'M':
      case 'N':
      case 'O':
      case 'Q':
      case 'R':
      case 'T':
      case 'V':
        return result;
      case 'P':
        {
          operator new();
        }
        int isLower = TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        goto LABEL_61;
      case 'S':
        {
          operator new();
        }
        uint64_t result = 0;
        if (a2 > 159)
        {
          if (a2 >= 12288)
          {
            if (a2 == 12288) {
              return result;
            }
            int v15 = 65279;
          }
          else
          {
            if (a2 == 160) {
              return result;
            }
            int v15 = 8203;
          }
          if (a2 == v15) {
            return result;
          }
        }
        else if (a2 <= 0x20 && ((1 << a2) & 0x100002600) != 0)
        {
          return result;
        }
        return 1;
      case 'U':
        {
          operator new();
        }
        int isLower = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        goto LABEL_61;
      case 'W':
        {
          operator new();
        }
        uint64_t v11 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
        if (a2 >= 48
          && (a2 < 0x3A
           || a2 >= 0x660
           && TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2) != -1))
        {
          return 0;
        }
        uint64_t v12 = v11;
        goto LABEL_60;
      default:
        if (a1 != 65)
        {
          if (a1 != 68) {
            return result;
          }
          {
            operator new();
          }
          int DigitExtended = a2 - 48;
          if (a2 >= 48)
          {
            if (a2 <= 0x39) {
              return DigitExtended == -1;
            }
            if (a2 >= 0x660)
            {
              int DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
              return DigitExtended == -1;
            }
          }
          int DigitExtended = -1;
          return DigitExtended == -1;
        }
        {
          operator new();
        }
        uint64_t v12 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
LABEL_60:
        int isLower = TLocaleInfo::isAlpha(v12, a2);
LABEL_61:
        uint64_t result = isLower ^ 1u;
        break;
    }
    return result;
  }
  switch(a1)
  {
    case 'l':
      {
        operator new();
      }
      uint64_t v6 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
      return TLocaleInfo::isLower(v6, a2);
    case 'm':
    case 'n':
    case 'o':
    case 'q':
    case 'r':
    case 't':
    case 'v':
      return result;
    case 'p':
      {
        operator new();
      }
      uint64_t v10 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
      return TLocaleInfo::isPunct(v10, a2);
    case 's':
      {
        operator new();
      }
      uint64_t result = 1;
      if (a2 <= 159)
      {
        if (a2 <= 0x20 && ((1 << a2) & 0x100002600) != 0) {
          return result;
        }
        return 0;
      }
      if (a2 >= 12288)
      {
        if (a2 == 12288) {
          return result;
        }
        int v16 = 65279;
      }
      else
      {
        if (a2 == 160) {
          return result;
        }
        int v16 = 8203;
      }
      if (a2 != v16) {
        return 0;
      }
      return result;
    case 'u':
      {
        operator new();
      }
      uint64_t v9 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
      return TLocaleInfo::isUpper(v9, a2);
    case 'w':
      {
        operator new();
      }
      uint64_t v13 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
      if (a2 < 48
        || a2 >= 0x3A
        && (a2 < 0x660
         || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2) == -1))
      {
        uint64_t v8 = v13;
        goto LABEL_55;
      }
      return 1;
    default:
      if (a1 != 100)
      {
        if (a1 == 97)
        {
          {
            operator new();
          }
          uint64_t v8 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
LABEL_55:
          return TLocaleInfo::isAlpha(v8, a2);
        }
        return result;
      }
      {
        operator new();
      }
      int v14 = a2 - 48;
      if (a2 < 48) {
        goto LABEL_70;
      }
      if (a2 > 0x39)
      {
        if (a2 < 0x660) {
LABEL_70:
        }
          int v14 = -1;
        else {
          int v14 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        }
      }
      return v14 != -1;
  }
}

void sub_1B1B3AA64(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TRegExpSearch::searchRange(uint64_t *a1, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result = *a1;
  int v9 = *a3;
  if (a4 == 2)
  {
    uint64_t v10 = *(void *)(result + 32);
    if (v10 && (unint64_t)v9 < 0x10000) {
      int v9 = *(_DWORD *)(v10 + 4 * v9);
    }
  }
  else if (a4 == 1)
  {
    uint64_t result = TLocaleInfo::toLower(result, *a3);
    int v9 = result;
  }
  unint64_t v11 = *a2;
  unint64_t v12 = a2[2];
  if (*a2 < v12)
  {
    uint64_t v13 = a3 + 1;
    do
    {
      if (v9 >= *(_DWORD *)v11)
      {
        int v14 = *(unint64_t **)(v11 + 8);
        unint64_t v15 = *v14;
        unint64_t v16 = v14[2];
        if (*v14 < v16)
        {
          do
          {
            if (v9 <= *(_DWORD *)v15)
            {
              uint64_t result = TRegExpSearch::search(a1, *(void *)(v15 + 8), v13, a4);
              unint64_t v16 = v14[2];
            }
            v15 += 16;
          }
          while (v15 < v16);
          unint64_t v12 = a2[2];
        }
      }
      v11 += 16;
    }
    while (v11 < v12);
  }
  return result;
}

uint64_t TRegExpSearch::searchCommand(uint64_t result, unsigned int **a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v4 = *a2;
  if (*a2 < a2[2])
  {
    uint64_t v8 = result;
    int v9 = a3 + 1;
    while (1)
    {
      uint64_t result = *v4;
      if ((int)result > 98) {
        break;
      }
      if (result == 36)
      {
        if (!*a3) {
          goto LABEL_15;
        }
      }
      else
      {
        if (result != 94) {
          goto LABEL_16;
        }
        if (*(unsigned int **)(v8 + 24) == a3)
        {
LABEL_15:
          uint64_t v10 = *((void *)v4 + 1);
          uint64_t v11 = v8;
          unint64_t v12 = a3;
          goto LABEL_22;
        }
      }
LABEL_24:
      v4 += 4;
      if (v4 >= a2[2]) {
        return result;
      }
    }
    switch(result)
    {
      case 'c':
        uint64_t v10 = *((void *)v4 + 1);
        uint64_t v11 = v8;
        unint64_t v12 = a3;
        uint64_t v13 = 2;
        break;
      case 'i':
        uint64_t v10 = *((void *)v4 + 1);
        uint64_t v11 = v8;
        unint64_t v12 = a3;
        uint64_t v13 = 1;
        break;
      case 'z':
        uint64_t v10 = *((void *)v4 + 1);
        uint64_t v11 = v8;
        unint64_t v12 = a3;
        uint64_t v13 = 0;
        break;
      default:
LABEL_16:
        if (!*a3)
        {
          *(unsigned char *)(v8 + 40) = 1;
          goto LABEL_24;
        }
        if (result == 114)
        {
          uint64_t result = TRegExpSearch::searchRange((uint64_t *)v8, *((unint64_t **)v4 + 1), a3, a4);
          goto LABEL_24;
        }
        if (result == 110)
        {
          uint64_t result = TRegExpSearch::searchNegated((uint64_t *)v8, *((unint64_t **)v4 + 1), a3, a4);
          goto LABEL_24;
        }
        if (result != 46)
        {
          uint64_t result = testCharClass(result, *a3);
          if (!result) {
            goto LABEL_24;
          }
        }
        uint64_t v10 = *((void *)v4 + 1);
        uint64_t v11 = v8;
        unint64_t v12 = v9;
LABEL_22:
        uint64_t v13 = a4;
        break;
    }
    uint64_t result = TRegExpSearch::search(v11, v10, v12, v13);
    goto LABEL_24;
  }
  return result;
}

BOOL TRegExpSearch::operator()(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  char v4 = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(void *)(a1 + 32) = a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v5 = a2;
  do
  {
    TRegExpSearch::search(a1, **(uint64_t ***)(a1 + 8), v5, 0);
    if ((v4 & 2) != 0) {
      break;
    }
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(_DWORD *)(v7 + 4);
    uint64_t v5 = (unsigned int *)(v7 + 4);
    *(void *)(a1 + 32) = v5;
  }
  while (v8);
  return *(unsigned char *)(a1 + 40) != 0;
}

BOOL TRegExpSearch::operator()(uint64_t a1, unsigned int *a2, int a3)
{
  char v3 = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(void *)(a1 + 32) = a2;
  if (!*a2) {
    return 0;
  }
  char v4 = a2;
  do
  {
    TRegExpSearch::search(a1, **(uint64_t ***)(a1 + 8), v4, 0);
    int v6 = *(unsigned __int8 *)(a1 + 41);
    if (v3 & 2 | v6) {
      break;
    }
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(_DWORD *)(v7 + 4);
    char v4 = (unsigned int *)(v7 + 4);
    *(void *)(a1 + 32) = v4;
  }
  while (v8);
  return v6 != 0;
}

void *TRegExp::TRegExp(void *result, uint64_t a2)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = a2;
  return result;
}

void TRegExp::add(uint64_t a1, __int32 *a2, uint64_t a3)
{
  char v3 = *(void **)(a1 + 8);
  if (!v3) {
    operator new();
  }
  TRegExpCompiler::add(v3, a2, a3);
}

void sub_1B1B3AF74(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C406FA3447ALL);
  _Unwind_Resume(a1);
}

TRegExpCompiler *TRegExp::doneAdding(TRegExp *this)
{
  uint64_t result = (TRegExpCompiler *)*((void *)this + 1);
  if (result) {
    TRegExpCompiler::compile(result);
  }
  return result;
}

TRegExp *TRegExp::TRegExp(TRegExp *a1, __int32 *a2, uint64_t a3)
{
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = a3;
  TRegExp::add((uint64_t)a1, a2, 0);
  TRegExp::doneAdding(a1);
  return a1;
}

void TRegExp::~TRegExp(TRegExp *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  char v3 = (TRegExpGraph *)*((void *)this + 2);
  if (v3)
  {
    TRegExpGraph::~TRegExpGraph(v3);
    MEMORY[0x1B3EA8670]();
  }
}

BOOL TRegExp::match(void *a1, unsigned int *a2, int a3, uint64_t a4)
{
  uint64_t v4 = a1[2];
  if (!v4) {
    return 0;
  }
  v6[0] = *a1;
  v6[1] = v4;
  return TRegExpSearch::operator()((uint64_t)v6, a2, a3, a4);
}

BOOL TRegExp::match(void *a1, unsigned int *a2, int a3)
{
  uint64_t v3 = a1[2];
  if (!v3) {
    return 0;
  }
  v5[0] = *a1;
  v5[1] = v3;
  return TRegExpSearch::operator()((uint64_t)v5, a2, a3);
}

uint64_t TRegExp::stringToRegExp(uint64_t result, uint64_t a2, int a3, char a4)
{
  int v6 = (__int32 *)result;
  if (a3 == 1)
  {
    uint64_t v7 = "i";
  }
  else
  {
    if (a3 != 2) {
      goto LABEL_6;
    }
    uint64_t v7 = "c";
  }
  uint64_t result = TBuffer<wchar_t>::assign(a2, (int *)v7);
LABEL_6:
  if ((a4 & 2) != 0)
  {
    int v11 = 94;
    uint64_t result = TBuffer<wchar_t>::insert(a2, *(void *)(a2 + 16), &v11, 1uLL);
  }
  __int32 v8 = *v6;
  if (*v6)
  {
    int v9 = v6 + 1;
    do
    {
      if (wcschr((__int32 *)"?", v8))
      {
        int v11 = 92;
        TBuffer<wchar_t>::insert(a2, *(void *)(a2 + 16), &v11, 1uLL);
      }
      int v11 = *(v9 - 1);
      uint64_t result = TBuffer<wchar_t>::insert(a2, *(void *)(a2 + 16), &v11, 1uLL);
      __int32 v10 = *v9++;
      __int32 v8 = v10;
    }
    while (v10);
  }
  if (a4)
  {
    int v11 = 36;
    return TBuffer<wchar_t>::insert(a2, *(void *)(a2 + 16), &v11, 1uLL);
  }
  return result;
}

void TSyntaxException::~TSyntaxException(std::exception *this)
{
  TException::~TException(this);
  JUMPOUT(0x1B3EA8670);
}

void *TException::TException(void *a1, long long *a2)
{
  *a1 = &unk_1F0A32E88;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1B1B3B2CC(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void TException::~TException(std::exception *this)
{
  TException::~TException(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1F0A32E88;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
}

uint64_t TLocaleInfo::isPunct(uint64_t a1, unsigned int a2)
{
  if ((int)a2 <= 255)
  {
    if (a2 - 33 < 0xF) {
      return 1;
    }
    uint64_t result = 1;
    if (a2 - 91 > 0x24 || ((1 << (a2 - 91)) & 0x1F0000003FLL) == 0)
    {
      BOOL v5 = a2 - 161 < 0x1F || (a2 & 0xFFFFFFDF) == 215;
      return a2 - 58 < 7 || v5;
    }
    return result;
  }
  if (a2 < 0x5BE) {
    return 0;
  }
  if (a2 > 0x6E9)
  {
    unsigned int v3 = a2 - 3631;
    if (a2 >= 0xE2F)
    {
      if (a2 <= 0xE5B)
      {
        if (v3 < 0x21 && ((0x100810001uLL >> v3) & 1) != 0) {
          return 1;
        }
        return a2 > 0xE59;
      }
      unsigned int v6 = a2 >> 4;
      if (a2 >> 4 >= 0x201)
      {
        if (a2 >> 2 <= 0xC3E) {
          return v6 < 0x267 || a2 - 12289 < 4 || a2 - 12294 < 0x17 || a2 == 12539;
        }
        if (a2 >= 0xFF01)
        {
          if (v6 < 0xFF1) {
            return 1;
          }
          uint64_t result = 1;
          if ((a2 - 65504 > 0xE || a2 == 65511)
            && (a2 - 65306 > 0x26 || ((1 << (a2 - 26)) & 0x7E0000007FLL) == 0))
          {
            return a2 - 65371 < 0xB;
          }
          return result;
        }
      }
    }
    return 0;
  }
  if (a2 - 1470 >= 0x37)
  {
    if (a2 - 1542 < 0xA) {
      return 1;
    }
  }
  else
  {
    uint64_t result = 1;
    if (((0x60000000000125uLL >> (a2 + 66)) & 1) != 0 || a2 - 1542 < 0xA) {
      return result;
    }
  }
  uint64_t result = 1;
  if (a2 - 1642 >= 4
    && (a2 - 1563 > 4 || ((1 << (a2 - 27)) & 0x19) == 0)
    && (a2 - 1748 > 0x15 || ((1 << (a2 + 44)) & 0x200401) == 0))
  {
    return 0;
  }
  return result;
}

void TRegExpGraph::~TRegExpGraph(TRegExpGraph *this)
{
  if (*(void *)this) {
    MEMORY[0x1B3EA8630](*(void *)this - 16, 0x70C80105F9A77);
  }
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x1B3EA8630](v2 - 16, 0x1060C807B16006ELL);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    MEMORY[0x1B3EA8630](v3, 0x1000C8000313F17);
  }
}

uint64_t TBuffer<wchar_t>::insert(uint64_t result, unint64_t a2, int *a3, unint64_t a4)
{
  unint64_t v5 = *(void *)(result + 16);
  if (v5 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = *(void *)(result + 16);
  }
  if (*(unsigned char *)(result + 1048))
  {
    unint64_t v7 = v5 + a4;
    unint64_t v8 = *(void *)(result + 8);
    if (v5 + a4 > v8 && v8 < 2 * v7)
    {
      *(void *)(result + 8) = (2 * v7) | 1;
      operator new[]();
    }
  }
  unint64_t v9 = v6 + a4;
  unint64_t v10 = *(void *)(result + 8);
  if (v6 < v5 && v9 < v10)
  {
    unint64_t v12 = v5 + a4;
    if (v10 < v5 + a4) {
      unint64_t v12 = *(void *)(result + 8);
    }
    unint64_t v13 = v12 - v9;
    if (v13)
    {
      int v14 = (_DWORD *)(*(void *)result + 4 * v12 - 4);
      do
      {
        *int v14 = v14[-a4];
        --v14;
        --v13;
      }
      while (v13);
    }
  }
  unint64_t v15 = v10 - v6;
  if (v10 > v6)
  {
    if (v15 >= a4) {
      unint64_t v15 = a4;
    }
    if (v15)
    {
      unint64_t v16 = (_DWORD *)(*(void *)result + 4 * v6);
      do
      {
        int v17 = *a3++;
        *v16++ = v17;
        --v15;
      }
      while (v15);
    }
  }
  *(void *)(result + 16) = v5 + a4;
  if (v5 + a4 < v10) {
    *(_DWORD *)(*(void *)result + 4 * (v5 + asnprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = 0;
  }
  return result;
}

uint64_t TBuffer<wchar_t>::assign(uint64_t a1, int *a2)
{
  TBuffer<wchar_t>::resize(a1, 0);
  uint64_t v4 = 0;
  while (a2[v4++])
    ;
  return TBuffer<wchar_t>::insert(a1, 0, a2, v4 - 1);
}

void TBuffer<wchar_t>::resize(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 1048) && *(void *)(a1 + 8) < a2)
  {
    *(void *)(a1 + 8) = a2 + 1;
    operator new[]();
  }
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 < a2)
  {
    unint64_t v5 = a2;
    if (*(unsigned char *)(a1 + 1048)
      || ((v6 = *(void *)(a1 + 8), v6 >= a2) ? (unint64_t v5 = a2) : (unint64_t v5 = *(void *)(a1 + 8)),
          v4 < v6 ? (BOOL v7 = v5 == v4) : (BOOL v7 = 1),
          !v7))
    {
      bzero((void *)(*(void *)a1 + 4 * v4), 4 * (v5 - v4));
    }
  }
  *(void *)(a1 + 16) = a2;
}

void quasar::SpeechRecognizerActiveConfiguration::all(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
  a1[32] = 0;
  a1[56] = 0;
  a1[64] = 0;
  a1[88] = 0;
  a1[96] = 0;
  a1[120] = 0;
  a1[128] = 0;
  a1[152] = 0;
  a1[160] = 0;
  a1[184] = 0;
  a1[192] = 0;
  a1[216] = 0;
  a1[224] = 0;
  a1[248] = 0;
}

void quasar::SpeechRecognizerActiveConfiguration::none(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(unsigned char *)(a1 + 24) = 1;
}

void *quasar::operator<<(void *a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ ", 2);
  if (*(unsigned char *)(a2 + 24))
  {
    unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"samplingRateFilter", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" = {", 4);
    unint64_t v6 = ",";
    uint64_t v7 = 1;
    quasar::joinToStream<std::set<unsigned int>>((uint64_t)a1, (void *)a2, (uint64_t *)&v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"} ", 2);
  }
  unint64_t v6 = "taskTypeFilter";
  uint64_t v7 = 14;
  quasar::printOptionalSet<std::string>(a1, (uint64_t *)&v6, a2 + 32);
  unint64_t v6 = "deviceIdFilter";
  uint64_t v7 = 14;
  quasar::printOptionalSet<std::string>(a1, (uint64_t *)&v6, a2 + 64);
  unint64_t v6 = "farFieldFilter";
  uint64_t v7 = 14;
  quasar::printOptionalSet<BOOL>(a1, (uint64_t *)&v6, a2 + 96);
  unint64_t v6 = "atypicalSpeechFilter";
  uint64_t v7 = 20;
  quasar::printOptionalSet<BOOL>(a1, (uint64_t *)&v6, a2 + 128);
  unint64_t v6 = "aneContextFilter";
  uint64_t v7 = 16;
  quasar::printOptionalSet<std::string>(a1, (uint64_t *)&v6, a2 + 160);
  unint64_t v6 = "cpuContextFilter";
  uint64_t v7 = 16;
  quasar::printOptionalSet<std::string>(a1, (uint64_t *)&v6, a2 + 192);
  unint64_t v6 = "gpuContextFilter";
  uint64_t v7 = 16;
  quasar::printOptionalSet<std::string>(a1, (uint64_t *)&v6, a2 + 224);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
  return a1;
}

{
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void **v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v20[2];
  void *__p[2];
  unsigned __int8 v22;

  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"base\": ", 9);
  quasar::operator<<(v4, a2);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 95);
  if ((v5 & 0x80u) != 0) {
    unint64_t v5 = *(void *)(a2 + 80);
  }
  if (v5)
  {
    unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"rawText\": \"", 12);
    uint64_t v7 = *(char *)(a2 + 95);
    if (v7 >= 0) {
      unint64_t v8 = a2 + 72;
    }
    else {
      unint64_t v8 = *(void *)(a2 + 72);
    }
    if (v7 >= 0) {
      unint64_t v9 = *(unsigned __int8 *)(a2 + 95);
    }
    else {
      unint64_t v9 = *(void *)(a2 + 80);
    }
    unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"tmScore\": ", 13);
  int v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", \"lmScore\": ", 13);
  std::ostream::operator<<();
  if (*(void *)(a2 + 104) != *(void *)(a2 + 112))
  {
    unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"softAlignment\": [", 20);
    v20[0] = (uint64_t)",";
    v20[1] = 1;
    quasar::join<std::vector<float>>((uint64_t *)(a2 + 104), v20);
    if ((v22 & 0x80u) == 0) {
      unint64_t v13 = __p;
    }
    else {
      unint64_t v13 = (void **)__p[0];
    }
    if ((v22 & 0x80u) == 0) {
      int v14 = v22;
    }
    else {
      int v14 = (uint64_t)__p[1];
    }
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
    if ((char)v22 < 0) {
      operator delete(__p[0]);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"id\": ", 8);
  unint64_t v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", \"begin\": ", 11);
  int v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", \"end\": ", 9);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"}", 1);
  return a1;
}

{
  void *v4;
  void *v5;
  void **v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *p_p;
  uint64_t v20;
  uint64_t v22[2];
  void *__p;
  uint64_t v24;
  unsigned __int8 v25;

  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"base\": ", 9);
  quasar::operator<<(v4, a2);
  if (*(void *)(a2 + 136) != *(void *)(a2 + 144))
  {
    unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"tokens\": [", 13);
    v22[0] = (uint64_t)",";
    v22[1] = 1;
    quasar::join<std::vector<quasar::TranslationTokenInternal>>((uint64_t *)(a2 + 136), v22);
    unint64_t v6 = (v25 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v7 = (v25 & 0x80u) == 0 ? v25 : v24;
    unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1);
    if ((char)v25 < 0) {
      operator delete(__p);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"tmScore\": ", 13);
  unint64_t v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", \"lmScore\": ", 13);
  unint64_t v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", \"hasSentencePieceIds\": ", 25);
  std::ostream::operator<<();
  int v11 = *(unsigned __int8 *)(a2 + 191);
  if ((v11 & 0x80u) != 0) {
    int v11 = *(void *)(a2 + 176);
  }
  if (v11)
  {
    unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"rawText\": \"", 14);
    unint64_t v13 = *(char *)(a2 + 191);
    if (v13 >= 0) {
      int v14 = a2 + 168;
    }
    else {
      int v14 = *(void *)(a2 + 168);
    }
    if (v13 >= 0) {
      unint64_t v15 = *(unsigned __int8 *)(a2 + 191);
    }
    else {
      unint64_t v15 = *(void *)(a2 + 176);
    }
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\"", 1);
  }
  quasar::MetaInfo::json((quasar::MetaInfo::Impl **)(a2 + 192), &__p);
  int v17 = v25;
  if ((v25 & 0x80u) != 0) {
    int v17 = v24;
  }
  if (v17)
  {
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"metaInfo\": ", 14);
    if ((v25 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v20 = v25;
    }
    else {
      unint64_t v20 = v24;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, v20);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  if ((char)v25 < 0) {
    operator delete(__p);
  }
  return a1;
}

{
  void *v4;
  void *v5;
  void *v6;
  void **v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *p_p;
  uint64_t v22;
  void *v23;
  void *v24;
  const char *v26;
  uint64_t v27;
  void *__p;
  uint64_t v29;
  unsigned __int8 v30;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"score\": ", 10);
  unint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", \"confidence\": ", 16);
  unint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", \"lowConfidence\": ", 19);
  std::ostream::operator<<();
  if (*(void *)(a2 + 16) != *(void *)(a2 + 24))
  {
    unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"tokens\": [", 13);
    unint64_t v26 = ",";
    uint64_t v27 = 1;
    quasar::join<std::vector<quasar::TranslationToken>>((uint64_t *)(a2 + 16), (uint64_t *)&v26);
    uint64_t v7 = (v30 & 0x80u) == 0 ? &__p : (void **)__p;
    unint64_t v8 = (v30 & 0x80u) == 0 ? v30 : v29;
    unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"]", 1);
    if ((char)v30 < 0) {
      operator delete(__p);
    }
  }
  unint64_t v10 = *(unsigned __int8 *)(a2 + 63);
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = *(void *)(a2 + 48);
  }
  if (v10)
  {
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"metaInfo\": ", 14);
    unint64_t v12 = *(char *)(a2 + 63);
    if (v12 >= 0) {
      unint64_t v13 = a2 + 40;
    }
    else {
      unint64_t v13 = *(void *)(a2 + 40);
    }
    if (v12 >= 0) {
      int v14 = *(unsigned __int8 *)(a2 + 63);
    }
    else {
      int v14 = *(void *)(a2 + 48);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  }
  if (*(unsigned char *)(a2 + 88))
  {
    unint64_t v15 = *(unsigned __int8 *)(a2 + 87);
    if ((v15 & 0x80u) != 0) {
      unint64_t v15 = *(void *)(a2 + 72);
    }
    if (v15)
    {
      unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"romanization\": ", 18);
      int v17 = *(char *)(a2 + 87);
      if (v17 >= 0) {
        uint64_t v18 = a2 + 64;
      }
      else {
        uint64_t v18 = *(void *)(a2 + 64);
      }
      if (v17 >= 0) {
        uint64_t v19 = *(unsigned __int8 *)(a2 + 87);
      }
      else {
        uint64_t v19 = *(void *)(a2 + 72);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    }
  }
  if (*(unsigned char *)(a2 + 120) && *(void *)(a2 + 96) != *(void *)(a2 + 104))
  {
    unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"alternativeSelectionSpans\": [", 32);
    unint64_t v26 = ",";
    uint64_t v27 = 1;
    quasar::join<std::vector<quasar::AlternativeSelectionSpan>>((uint64_t *)(a2 + 96), (uint64_t *)&v26);
    if ((v30 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v30 & 0x80u) == 0) {
      unint64_t v22 = v30;
    }
    else {
      unint64_t v22 = v29;
    }
    unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)p_p, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
    if ((char)v30 < 0) {
      operator delete(__p);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"isFinal\": ", 13);
  unint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"}", 1);
  return a1;
}

{
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void **v23;
  uint64_t v24;
  void *v25;
  void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v49[2];
  void *__p[2];
  unsigned __int8 v51;

  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Token(", 6);
  unint64_t v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
  unint64_t v9 = (void *)std::ostream::operator<<();
  unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)")", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",", 1);
  int v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
  unint64_t v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)",", 1);
  unint64_t v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
  int v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)",", 1);
  unint64_t v15 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)",", 1);
  unint64_t v16 = (void *)std::ostream::operator<<();
  int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
  uint64_t v18 = *(char *)(a2 + 71);
  if (v18 >= 0) {
    uint64_t v19 = a2 + 48;
  }
  else {
    uint64_t v19 = *(void *)(a2 + 48);
  }
  if (v18 >= 0) {
    unint64_t v20 = *(unsigned __int8 *)(a2 + 71);
  }
  else {
    unint64_t v20 = *(void *)(a2 + 56);
  }
  char v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
  unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)",", 1);
  v49[0] = (uint64_t)" ";
  v49[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)(a2 + 72), v49);
  if ((v51 & 0x80u) == 0) {
    unint64_t v23 = __p;
  }
  else {
    unint64_t v23 = (void **)__p[0];
  }
  if ((v51 & 0x80u) == 0) {
    unint64_t v24 = v51;
  }
  else {
    unint64_t v24 = (uint64_t)__p[1];
  }
  int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
  unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)",", 1);
  uint64_t v27 = *(char *)(a2 + 119);
  if (v27 >= 0) {
    uint64_t v28 = a2 + 96;
  }
  else {
    uint64_t v28 = *(void *)(a2 + 96);
  }
  if (v27 >= 0) {
    uint64_t v29 = *(unsigned __int8 *)(a2 + 119);
  }
  else {
    uint64_t v29 = *(void *)(a2 + 104);
  }
  long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)",", 1);
  uint64_t v31 = (void *)std::ostream::operator<<();
  uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)",", 1);
  uint64_t v33 = *(char *)(a2 + 167);
  if (v33 >= 0) {
    uint64_t v34 = a2 + 144;
  }
  else {
    uint64_t v34 = *(void *)(a2 + 144);
  }
  if (v33 >= 0) {
    BOOL v35 = *(unsigned __int8 *)(a2 + 167);
  }
  else {
    BOOL v35 = *(void *)(a2 + 152);
  }
  uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
  uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)",", 1);
  uint64_t v38 = quasar::operator<<(v37, *(_DWORD *)(a2 + 168));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)",", 1);
  int v39 = (void *)std::ostream::operator<<();
  int v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)",", 1);
  int v41 = *(char *)(a2 + 199);
  if (v41 >= 0) {
    int v42 = a2 + 176;
  }
  else {
    int v42 = *(void *)(a2 + 176);
  }
  if (v41 >= 0) {
    int v43 = *(unsigned __int8 *)(a2 + 199);
  }
  else {
    int v43 = *(void *)(a2 + 184);
  }
  int v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)",", 1);
  uint64_t v45 = (void *)std::ostream::operator<<();
  uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)", ", 2);
  unint64_t v47 = quasar::operator<<(v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)")", 1);
  if ((char)v51 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void **v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v19[2];
  void *__p[2];
  unsigned __int8 v21;

  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\"id\": ", 6);
  unint64_t v5 = (void *)std::ostream::operator<<();
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", \"text\": \"", 11);
  uint64_t v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v9 = *(void *)(a2 + 8);
  }
  unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\", \"hasSpaceAfer\": ", 19);
  int v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", \"hasSpaceBefore\": ", 20);
  std::ostream::operator<<();
  if (*(void *)(a2 + 32) != *(void *)(a2 + 40))
  {
    unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"alignment\": [", 16);
    v19[0] = (uint64_t)",";
    v19[1] = 1;
    quasar::join<std::vector<int>>((uint64_t *)(a2 + 32), v19);
    if ((v21 & 0x80u) == 0) {
      unint64_t v13 = __p;
    }
    else {
      unint64_t v13 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      int v14 = v21;
    }
    else {
      int v14 = (uint64_t)__p[1];
    }
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"confidence\": ", 16);
  unint64_t v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", \"score\": ", 11);
  int v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"}", 1);
  return a1;
}

{
  void *v4;
  void *v5;
  void *v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void **v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v21[2];
  void *__p[2];
  unsigned __int8 v23;
  uint64_t v24[2];
  void *v25[2];
  unsigned __int8 v26;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{frame=", 7);
  unint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" finalActive=", 13);
  unint64_t v5 = (void *)std::ostream::operator<<();
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" words=[", 8);
  v24[0] = (uint64_t)",";
  v24[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)(a2 + 8), v24);
  if ((v26 & 0x80u) == 0) {
    uint64_t v7 = v25;
  }
  else {
    uint64_t v7 = (void **)v25[0];
  }
  if ((v26 & 0x80u) == 0) {
    unint64_t v8 = v26;
  }
  else {
    unint64_t v8 = (uint64_t)v25[1];
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"]", 1);
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ids=[", 6);
  v21[0] = (uint64_t)",";
  v21[1] = 1;
  quasar::join<std::vector<int>>((uint64_t *)(a2 + 32), v21);
  if ((v23 & 0x80u) == 0) {
    unint64_t v12 = __p;
  }
  else {
    unint64_t v12 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    unint64_t v13 = v23;
  }
  else {
    unint64_t v13 = (uint64_t)__p[1];
  }
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" trailingSilence=", 17);
  unint64_t v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" silencePosterior=", 18);
  int v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" allowTrigger=", 14);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" chunkEnd=", 10);
  uint64_t v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"}", 1);
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v26 < 0) {
    operator delete(v25[0]);
  }
  return a1;
}

{
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void **v19;
  uint64_t v20;
  void *v21;
  void *v23[2];
  char v24;
  void *__p[2];
  unsigned __int8 v26;

  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Word(", 5);
  unint64_t v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
  unint64_t v12 = *(void *)(a2 + 24);
  int v11 = a2 + 24;
  unint64_t v10 = v12;
  unint64_t v13 = *(char *)(v11 + 23);
  if (v13 >= 0) {
    int v14 = v11;
  }
  else {
    int v14 = v10;
  }
  if (v13 >= 0) {
    unint64_t v15 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    unint64_t v15 = *(void *)(v11 + 8);
  }
  unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
  int v17 = (void *)std::ostream::operator<<();
  uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)",", 1);
  std::string::basic_string[abi:ne180100]<0>(v23, "|");
  quasar::LmeDataFactoryBase::PronSet::toString((void *)(v11 + 32), 1, (uint64_t)v23);
  if ((v26 & 0x80u) == 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    unint64_t v20 = v26;
  }
  else {
    unint64_t v20 = (uint64_t)__p[1];
  }
  char v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)")", 1);
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  return a1;
}

{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  void *v9;
  void **v10;
  uint64_t v11;
  void *v12;
  uint64_t v14[2];
  void *__p[2];
  unsigned __int8 v16;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"sourceRange\": ", 15);
  quasar::operator<<(v4);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"projectionRange\": ", 21);
  quasar::operator<<(v5);
  unint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v8 = (uint64_t **)(a2 + 16);
  if (v6 != v7)
  {
    unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"alternatives\": [", 19);
    v14[0] = (uint64_t)",";
    v14[1] = 1;
    quasar::join<std::vector<quasar::AlternativeSelectionSpan::Alternative>>(v8, v14);
    if ((v16 & 0x80u) == 0) {
      unint64_t v10 = __p;
    }
    else {
      unint64_t v10 = (void **)__p[0];
    }
    if ((v16 & 0x80u) == 0) {
      int v11 = v16;
    }
    else {
      int v11 = (uint64_t)__p[1];
    }
    unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"]", 1);
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

{
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"definition\": \"", 16);
  unint64_t v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\"}", 2);
  return a1;
}

void *quasar::printOptionalSet<std::string>(void *result, uint64_t *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 24))
  {
    unint64_t v4 = result;
    unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(result, *a2, a2[1]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" = {", 4);
    v6[0] = (uint64_t)",";
    v6[1] = 1;
    quasar::joinToStream<std::set<std::string>>(v4, (void *)a3, v6);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"} ", 2);
  }
  return result;
}

void *quasar::printOptionalSet<BOOL>(void *result, uint64_t *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 24))
  {
    unint64_t v4 = result;
    unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(result, *a2, a2[1]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" = {", 4);
    v6[0] = (uint64_t)",";
    v6[1] = 1;
    quasar::joinToStream<std::set<BOOL>>((uint64_t)v4, (void *)a3, v6);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"} ", 2);
  }
  return result;
}

uint64_t quasar::joinToStream<std::set<unsigned int>>(uint64_t result, void *a2, uint64_t *a3)
{
  uint64_t v3 = a2 + 1;
  unint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    unint64_t v6 = (void *)result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      uint64_t result = std::ostream::operator<<();
      unint64_t v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          unint64_t v9 = v8;
          unint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          unint64_t v4 = v9;
        }
        while (!v10);
      }
      char v7 = 0;
      unint64_t v4 = v9;
    }
    while (v9 != v3);
  }
  return result;
}

void *quasar::joinToStream<std::set<std::string>>(void *result, void *a2, uint64_t *a3)
{
  uint64_t v3 = a2 + 1;
  unint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    unint64_t v6 = result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      int v8 = *((char *)v4 + 55);
      if (v8 >= 0) {
        uint64_t v9 = (uint64_t)(v4 + 4);
      }
      else {
        uint64_t v9 = v4[4];
      }
      if (v8 >= 0) {
        uint64_t v10 = *((unsigned __int8 *)v4 + 55);
      }
      else {
        uint64_t v10 = v4[5];
      }
      uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v9, v10);
      int v11 = (void *)v4[1];
      if (v11)
      {
        do
        {
          unint64_t v12 = v11;
          int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unint64_t v12 = (void *)v4[2];
          BOOL v13 = *v12 == (void)v4;
          unint64_t v4 = v12;
        }
        while (!v13);
      }
      char v7 = 0;
      unint64_t v4 = v12;
    }
    while (v12 != v3);
  }
  return result;
}

uint64_t quasar::joinToStream<std::set<BOOL>>(uint64_t result, void *a2, uint64_t *a3)
{
  uint64_t v3 = a2 + 1;
  unint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    unint64_t v6 = (void *)result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      uint64_t result = std::ostream::operator<<();
      int v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          int v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          unint64_t v4 = v9;
        }
        while (!v10);
      }
      char v7 = 0;
      unint64_t v4 = v9;
    }
    while (v9 != v3);
  }
  return result;
}

uint64_t quasar::PSRAudioProcessor::PSRAudioProcessor(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3, int a4, uint64_t *a5)
{
  int v45 = a4;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v8 = *a5;
  if (!*a5) {
    std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned int const&,void>((uint64_t)&v41, &v45);
  }
  uint64_t v9 = a5[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    BOOL v10 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v9;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = 0;
  }
  uint64_t Ptree = quasar::SystemConfig::getPtree((uint64_t)a2, a3);
  int v41 = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(Ptree + 8), *(void *)(Ptree + 16));
  }
  else
  {
    long long v12 = *(_OWORD *)(Ptree + 8);
    v42.__r_.__value_.__r.__words[2] = *(void *)(Ptree + 24);
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v12;
  }
  memset(&v43, 0, sizeof(v43));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v43, *(void *)(Ptree + 32), *(void *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(Ptree + 40) - *(void *)(Ptree + 32)) >> 3));
  char v44 = *(unsigned char *)(Ptree + 56);
  LODWORD(v28[0]) = v45;
  v28[1] = 0;
  char v29 = 0;
  int v35 = 0;
  char v36 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  memset(v34, 0, sizeof(v34));
  long long v37 = 0u;
  long long v38 = 0u;
  uint64_t v39 = 0;
  char v40 = 1;
  uint64_t v13 = quasar::PTree::begin((quasar::PTree *)&v41);
  if (v13 != quasar::PTree::end((quasar::PTree *)&v41))
  {
    if (*(char *)(v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v13, *(void *)(v13 + 8));
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      v27.__r_.__value_.__r.__words[2] = *(void *)(v13 + 16);
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v14;
    }
    if (*(char *)(a3 + 23) >= 0) {
      size_t v15 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v15 = *(void *)(a3 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v24, v15 + 1);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v16 = &v24;
    }
    else {
      unint64_t v16 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    if (v15)
    {
      if (*(char *)(a3 + 23) >= 0) {
        int v17 = (const void *)a3;
      }
      else {
        int v17 = *(const void **)a3;
      }
      memmove(v16, v17, v15);
    }
    *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 46;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v27;
    }
    else {
      uint64_t v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v27.__r_.__value_.__l.__size_;
    }
    unint64_t v20 = std::string::append(&v24, (const std::string::value_type *)v18, size);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    quasar::FeatureExtractorSimpleFactory::createFeatureExtractor(&__p, &v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    quasar::FeatureExtractor::init(v26, a2);
  }
  unint64_t v22 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs(v28);
  quasar::PTree::~PTree((quasar::PTree *)&v41);
  return a1;
}

void sub_1B1B3C1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36)
{
  a36 = a10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  a36 = a11;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  long long v38 = *(std::__shared_weak_count **)(v36 + 24);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  uint64_t v39 = *(std::__shared_weak_count **)(v36 + 8);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    size_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)size_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *char v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1B3C3D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    size_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)size_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *char v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1B3C4EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::PSRAudioProcessor::compute(uint64_t a1, uint64_t a2)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v13);
  kaldi::Matrix<float>::Matrix((uint64_t)v12);
  kaldi::Matrix<float>::Matrix((uint64_t)v11);
  kaldi::Matrix<float>::Matrix((uint64_t)v10);
  kaldi::Matrix<float>::Matrix((uint64_t)v9);
  kaldi::OnlineFeatInputItfIO::OnlineFeatInputItfIO(v8, a2, (uint64_t)v13, (uint64_t)v12, (uint64_t)v11, (uint64_t)v10, (uint64_t)v9);
  unint64_t v4 = *(uint64_t (****)(void, _OWORD *))(a1 + 16);
  v7[0] = v8[0];
  v7[1] = v8[1];
  v7[2] = v8[2];
  uint64_t v5 = (**v4)(v4, v7);
  kaldi::Matrix<float>::~Matrix((uint64_t)v9);
  kaldi::Matrix<float>::~Matrix((uint64_t)v10);
  kaldi::Matrix<float>::~Matrix((uint64_t)v11);
  kaldi::Matrix<float>::~Matrix((uint64_t)v12);
  kaldi::Matrix<float>::~Matrix((uint64_t)v13);
  return v5;
}

void sub_1B1B3C5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a27);
  kaldi::Matrix<float>::~Matrix(v27 - 152);
  kaldi::Matrix<float>::~Matrix(v27 - 112);
  kaldi::Matrix<float>::~Matrix(v27 - 72);
  _Unwind_Resume(a1);
}

uint64_t quasar::PSRAudioProcessor::frameDurationMs(quasar::PSRAudioProcessor *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 24))();
}

void quasar::FeatureExtractorArgs::~FeatureExtractorArgs(void **this)
{
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[17];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[13];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v8 = this + 9;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v4 = (std::__shared_weak_count *)this[8];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[6];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)this[4];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  char v7 = (atomic_ullong *)this[1];
  if (v7)
  {
    if (!atomic_fetch_add(v7 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(atomic_ullong *))(*v7 + 16))(v7);
    }
  }
}

void std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<quasar::LmeContainer>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned int const&,void>(uint64_t a1, int *a2)
{
  uint64_t v3 = operator new(0x160uLL);
  std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int const&,std::allocator<quasar::RecogAudioBuffer>,0>(v3, a2);
}

void sub_1B1B3C818(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int const&,std::allocator<quasar::RecogAudioBuffer>,0>(void *a1, int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60250;
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned int const&>((uint64_t)&v2, (uint64_t)(a1 + 3), a2);
}

void sub_1B1B3C888(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60250;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned int const&>(uint64_t a1, uint64_t a2, int *a3)
{
  int v4 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  _ZNSt3__115allocate_sharedB8ne180100IKN5kaldi5TimerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v5);
  quasar::RecogAudioBuffer::RecogAudioBuffer(a2, v4, 120, 0, 1, &__p, &v5, 120, 0, 4000);
}

void sub_1B1B3C9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IKN5kaldi5TimerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  char v2 = (char *)operator new(0x40uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIKN5kaldi5TimerENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_((uint64_t)v2, v3);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1B1B3CA34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIKN5kaldi5TimerENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(uint64_t a1, clockid_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F0A5DEE0;
  *(unsigned char *)(a1 + 48) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 24), a2);
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_1B1B3CA9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::Timer const>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DEE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::Timer const>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DEE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::vector<std::shared_ptr<quasar::FeatureExtractor>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    clockid_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    int v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::OnlineFeatInputItf>>,std::reverse_iterator<std::shared_ptr<kaldi::OnlineFeatInputItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::OnlineFeatInputItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::OnlineFeatInputItf>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::OnlineFeatInputItf>>,std::reverse_iterator<std::shared_ptr<kaldi::OnlineFeatInputItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::OnlineFeatInputItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::OnlineFeatInputItf>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::OnlineFeatInputItf>>,std::reverse_iterator<std::shared_ptr<kaldi::OnlineFeatInputItf>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::OnlineFeatInputItf>>,std::reverse_iterator<std::shared_ptr<kaldi::OnlineFeatInputItf>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

BOOL compressed_filename_p(const char *a1)
{
  unsigned int v2 = strlen(a1);
  return v2 >= 3uLL && strcmp(&a1[v2 - 2], ".Z") == 0;
}

uint64_t gzipped_filename_p(const char *a1)
{
  unint64_t v2 = strlen(a1);
  if (v2 >= 4)
  {
    if (!strcmp(&a1[v2 - 3], ".gz")) {
      return 1;
    }
    return strcmp(&a1[v2 - 2], ".z") == 0;
  }
  if (v2 == 3) {
    return strcmp(&a1[v2 - 2], ".z") == 0;
  }
  return 0;
}

BOOL bzipped_filename_p(const char *a1)
{
  unsigned int v2 = strlen(a1);
  return v2 >= 5uLL && strcmp(&a1[v2 - 4], ".bz2") == 0;
}

BOOL sevenzipped_filename_p(const char *a1)
{
  unsigned int v2 = strlen(a1);
  return v2 >= 4uLL && strcmp(&a1[v2 - 3], ".7z") == 0;
}

BOOL xz_filename_p(const char *a1)
{
  unsigned int v2 = strlen(a1);
  return v2 >= 4uLL && strcmp(&a1[v2 - 3], ".xz") == 0;
}

FILE *srilm_zopen(const char *a1, const char *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!strcmp(a1, "-"))
  {
    int v6 = *(unsigned __int8 *)a2;
    if (v6 != 97 && v6 != 119)
    {
      if (v6 != 114) {
        return 0;
      }
      uint64_t v7 = &srilm_zopen_stdin_used;
      if (srilm_zopen_stdin_used == 1)
      {
        if (srilm_zopen_stdin_warning)
        {
LABEL_11:
          int v8 = 0;
LABEL_19:
          int v10 = dup(v8);
          if (v10 < 0) {
            return 0;
          }
          return fdopen(v10, a2);
        }
        fwrite("warning: '-' used multiple times for input\n", 0x2BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        uint64_t v7 = &srilm_zopen_stdin_warning;
      }
      *uint64_t v7 = 1;
      goto LABEL_11;
    }
    long long v9 = &srilm_zopen_stdout_used;
    if (srilm_zopen_stdout_used == 1)
    {
      if (srilm_zopen_stdout_warning)
      {
LABEL_18:
        int v8 = 1;
        goto LABEL_19;
      }
      fwrite("warning: '-' used multiple times for output\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      long long v9 = &srilm_zopen_stdout_warning;
    }
    *long long v9 = 1;
    goto LABEL_18;
  }
  if (compressed_filename_p(a1))
  {
    int v4 = 0;
    uint64_t v5 = "exec compress -c";
    goto LABEL_29;
  }
  if (gzipped_filename_p(a1))
  {
    int v4 = 0;
    uint64_t v5 = "exec gzip -c";
    goto LABEL_29;
  }
  if (bzipped_filename_p(a1))
  {
    int v4 = 0;
    uint64_t v5 = "exec bzip2";
    goto LABEL_29;
  }
  if (sevenzipped_filename_p(a1))
  {
    int v4 = 1;
    uint64_t v5 = "exec 7z a -si";
    goto LABEL_29;
  }
  if (xz_filename_p(a1))
  {
    int v4 = 0;
    uint64_t v5 = "exec xz";
LABEL_29:
    int v12 = *(unsigned __int8 *)a2;
    if (v12 == 119)
    {
      int v14 = open(a1, 513, 438);
      if ((v14 & 0x80000000) == 0)
      {
        close(v14);
        if (v4)
        {
          unlink(a1);
          long long v15 = "%s;%s %s";
        }
        else
        {
          long long v15 = "%s;%s >%s";
        }
        snprintf(__str, 0x464uLL, v15, ":", v5, a1);
        return popen(__str, a2);
      }
    }
    else if (v12 == 114)
    {
      int v13 = open(a1, 0);
      if ((v13 & 0x80000000) == 0)
      {
        close(v13);
        snprintf(__str, 0x464uLL, "%s;%s %s");
        return popen(__str, a2);
      }
    }
    return 0;
  }
  return fopen(a1, a2);
}

uint64_t zclose(FILE *a1)
{
  memset(&v7, 0, sizeof(v7));
  int v2 = fileno(a1);
  if (fstat(v2, &v7) < 0) {
    return 0xFFFFFFFFLL;
  }
  if ((v7.st_mode & 0xF000) != 0x1000 || !fileno(a1) || fileno(a1) == 1) {
    return fclose(a1);
  }
  uint64_t v6 = pclose(a1);
  if (v6 == 13) {
    return 0;
  }
  uint64_t v4 = v6;
  if (v6 == -1) {
    return ferror(a1);
  }
  if (!*__error()) {
    *__error() = 5;
  }
  return v4;
}

void quasar::artifact::LoadLmHandleFromArtifact()
{
}

void sub_1B1B3D5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    quasar::artifact::LoadLmHandleFromArtifact(a9);
  }
  if (a10) {
    (*(void (**)(void))(*(void *)a10 + 8))();
  }
  _Unwind_Resume(exception_object);
}

void quasar::artifact::LoadLmHandleFromArtifact(quasar::artifact::AppLmArtifact **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  LifeCycleStage = quasar::artifact::AppLmArtifact::getLifeCycleStage(*a1);
  long long v9 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage);
  int v10 = (int)v9;
  uint64_t v11 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v9);
  int v12 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v11 + 320);
  if (v10 == v12)
  {
    int v13 = *a1;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    *(_OWORD *)long long __p = 0u;
    long long v44 = 0u;
    LODWORD(v45) = 1065353216;
    quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v66, a2, (uint64_t *)&v63, (uint64_t)__p);
    int isAdaptableToSystemConfig = quasar::artifact::AppLmArtifact::isAdaptableToSystemConfig(v13, (const quasar::SystemConfig *)v66);
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v66);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
    __p[0] = &v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (isAdaptableToSystemConfig)
    {
      quasar::artifact::AppLmArtifact::getLmHandle(*a1, a4);
    }
    else
    {
      if (quasar::gLogLevel >= 1)
      {
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        *(_OWORD *)unint64_t v66 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Decoding ready artifact not compatible with speech model (datapack) version", 75);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v66);
      }
      *a4 = 0;
    }
    return;
  }
  if (quasar::gLogLevel >= 2)
  {
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    *(_OWORD *)unint64_t v66 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Artifact in ", 12);
    uint64_t v16 = quasar::artifact::AppLmArtifact::getLifeCycleStage(*a1);
    uint64_t String = quasar::PTree::getString(v16);
    int v18 = *(char *)(String + 23);
    if (v18 >= 0) {
      uint64_t v19 = String;
    }
    else {
      uint64_t v19 = *(void *)String;
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(String + 23);
    }
    else {
      uint64_t v20 = *(void *)(String + 8);
    }
    long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v19, v20);
    unint64_t v22 = (quasar::artifact::AppLmArtifactLifeCycleStages *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" stage will be transformed to ", 30);
    uint64_t v23 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v22);
    uint64_t v24 = quasar::PTree::getString((quasar::PTree *)(v23 + 320));
    int v25 = *(char *)(v24 + 23);
    if (v25 >= 0) {
      uint64_t v26 = v24;
    }
    else {
      uint64_t v26 = *(void *)v24;
    }
    if (v25 >= 0) {
      uint64_t v27 = *(unsigned __int8 *)(v24 + 23);
    }
    else {
      uint64_t v27 = *(void *)(v24 + 8);
    }
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v26, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" stage", 6);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v66);
  }
  char v29 = *a1;
  *a1 = 0;
  unint64_t v61 = v29;
  uint64_t v30 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v12);
  uint64_t v31 = *a3;
  *a3 = 0;
  uint64_t v60 = v31;
  std::string::basic_string[abi:ne180100]<0>(v66, "app-lm.data");
  std::string::basic_string[abi:ne180100]<0>(__p, "app-lm.NGRAM");
  quasar::artifact::TransitionArtifact(&v61, (quasar::artifact *)(v30 + 320), a2, &v60, &v62);
  if (SBYTE7(v44) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v67) < 0) {
    operator delete(v66[0]);
  }
  uint64_t v32 = v60;
  uint64_t v60 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  long long v33 = v61;
  unint64_t v61 = 0;
  if (v33) {
    (*(void (**)(quasar::artifact::AppLmArtifact *))(*(void *)v33 + 8))(v33);
  }
  if (!v62
    || (uint64_t v34 = quasar::artifact::AppLmArtifact::getLifeCycleStage(v62),
        int v35 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)v34),
        int v36 = (int)v35,
        uint64_t v37 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v35),
        v36 != quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v37 + 320)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"transformedArtifact != nullptr && transformedArtifact->getLifeCycleStage() == AppLmArtifactLifeCycleStages::get().DECODING_READY", 128);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
  }
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  *(_OWORD *)long long __p = 0u;
  long long v44 = 0u;
  LODWORD(v45) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v66, a2, (uint64_t *)&v63, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if ((quasar::artifact::AppLmArtifact::isAdaptableToSystemConfig(v62, (const quasar::SystemConfig *)v66) & 1) == 0)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      *(_OWORD *)long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Artifact transformed to decoding readiness not compatible with speech model (datapack) version", 94);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    *a4 = 0;
    goto LABEL_44;
  }
  long long v38 = v62;
  std::string::basic_string[abi:ne180100]<0>(__p, "language-model-weight");
  BOOL hasInfo = quasar::artifact::Artifact::hasInfo((uint64_t)v38, (const void **)__p);
  BOOL v40 = hasInfo;
  if (SBYTE7(v44) < 0)
  {
    operator delete(__p[0]);
    if (v40) {
      goto LABEL_31;
    }
  }
  else if (hasInfo)
  {
LABEL_31:
    int v41 = v62;
    std::string::basic_string[abi:ne180100]<0>(&v63, "language-model-weight");
    quasar::artifact::Artifact::getInfo((uint64_t)v41, (uint64_t)&v63, (std::string *)__p);
    std::stof((const std::string *)__p, 0);
    if (SBYTE7(v44) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v65) < 0) {
      operator delete(v63);
    }
  }
  quasar::artifact::AppLmArtifact::getLmHandle(v62, a4);
LABEL_44:
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v66);
  std::string v42 = v62;
  std::string v62 = 0;
  if (v42) {
    (*(void (**)(quasar::artifact::AppLmArtifact *))(*(void *)v42 + 8))(v42);
  }
}

void *quasar::artifact::GetTargetLmeTagForAddingCustomProns@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\\unknown-first");
}

void quasar::artifact::GetTargetLmeForAddingCustomProns(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(v9, 0, sizeof(v9));
  *(_OWORD *)long long __p = 0u;
  long long v7 = 0u;
  int v8 = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v10, a1, v9, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "app-lm.data.oov-replacement");
  uint64_t Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v10, (uint64_t)__p);
  uint64_t String = quasar::PTree::getString(Ptree);
  if (*(char *)(String + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)String, *(void *)(String + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)String;
    a2->__r_.__value_.__r.__words[2] = *(void *)(String + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  }
  if (SBYTE7(v7) < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v10);
}

void sub_1B1B3DDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

uint64_t std::default_delete<quasar::CustomPronData>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (void **)(a2 + 56);
    std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(a2 + 32);
    std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    return MEMORY[0x1B3EA8670](a2, 0x1032C40BCD9A066);
  }
  return result;
}

void ***std::unique_ptr<std::vector<std::string>>::reset[abi:ne180100](void ***result, void **a2)
{
  int v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    clockid_t v3 = v2;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x1B3EA8670](v2, 0x20C40960023A9);
  }
  return result;
}

void quasar::artifact::ConstructIdentifier(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0) {
      int v8 = a1;
    }
    else {
      int v8 = *a1;
    }
    memmove(p_p, v8, v6);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v6) = 58;
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    int v10 = (const std::string::value_type *)a2;
  }
  else {
    int v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a2 + 8);
  }
  int v12 = std::string::append(&__p, v10, v11);
  *a3 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B3DFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::artifact::CreateEmptyArtifact(const void **a1, uint64_t a2)
{
  quasar::artifact::ConstructIdentifier(a1, a2, &__p);
  operator new();
}

void sub_1B1B3E05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1B3EA8670](v15, 0x10B3C40549B666DLL);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void quasar::artifact::CreatePhraseCountsArtifact(const void **a1, uint64_t a2)
{
}

void sub_1B1B3E1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a10) {
    quasar::artifact::CreatePhraseCountsArtifact();
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  *int v18 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::artifact::CreatePhraseCountsArtifact()
{
}

void sub_1B1B3E3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a10) {
    quasar::artifact::CreatePhraseCountsArtifact();
  }
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<std::ifstream>()
{
}

void sub_1B1B3E634(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v2);
  MEMORY[0x1B3EA8670](v1, 0x10F1C40A09425BCLL);
  _Unwind_Resume(a1);
}

void quasar::artifact::TransitionArtifact(quasar::artifact::AppLmArtifact **a1@<X0>, quasar::artifact *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, quasar::artifact::AppLmArtifact **a5@<X8>)
{
  LifeCycleStage = quasar::artifact::AppLmArtifact::getLifeCycleStage(*a1);
  if (quasar::artifact::IsValidLifeCycle(LifeCycleStage, v11))
  {
    if (quasar::artifact::IsValidLifeCycle(a2, v12))
    {
      int v13 = quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)a2);
      if (v13 >= (int)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage))
      {
        int v22 = quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)a2);
        if (v22 == quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage))
        {
          uint64_t v23 = *a1;
          *a1 = 0;
          *a5 = v23;
          return;
        }
        uint64_t v24 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage);
        int v25 = (int)v24;
        uint64_t v26 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v24);
        if (v25 < (int)quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v26 + 320))
        {
          uint64_t v27 = *a1;
          quasar::filesystem::Path::Path(&v31, a3);
          uint64_t v28 = *a4;
          *a4 = 0;
          uint64_t v48 = v28;
          quasar::artifact::AppLmArtifact::loadAppLmData(v27, (uint64_t)&v31, &v48);
        }
        if (quasar::gLogLevel >= 1)
        {
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v31 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
          char v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Unable to transform artifact beyond ", 36);
          uint64_t v30 = quasar::artifact::operator<<(v29, (uint64_t)LifeCycleStage);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)".", 1);
          goto LABEL_10;
        }
      }
      else if (quasar::gLogLevel >= 1)
      {
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v31 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
        int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Unable to revert during the life cycle (from ", 45);
        uint64_t v15 = quasar::artifact::operator<<(v14, (uint64_t)LifeCycleStage);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" to ", 4);
        uint64_t v17 = quasar::artifact::operator<<(v16, (uint64_t)a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)").", 2);
LABEL_10:
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v31);
      }
    }
    else if (quasar::gLogLevel >= 1)
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Target life cycle stage is invalid (", 36);
      long long v21 = quasar::artifact::operator<<(v20, (uint64_t)a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)").", 2);
      goto LABEL_10;
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Artifact is in incorrect life cycle stage (", 43);
    uint64_t v19 = quasar::artifact::operator<<(v18, (uint64_t)LifeCycleStage);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)").", 2);
    goto LABEL_10;
  }
  *a5 = 0;
}

void sub_1B1B3F848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    quasar::artifact::TransitionArtifact();
  }
  JUMPOUT(0x1B1B3F864);
}

void sub_1B1B3F890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (STACK[0x248]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x248]);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&STACK[0x250]);
  uint64_t v17 = *(void *)(v16 - 104);
  *(void *)(v16 - 104) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  JUMPOUT(0x1B1B3FCA8);
}

void sub_1B1B3F898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (a58 < 0) {
    operator delete(__p);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a73);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&STACK[0x218]);
  JUMPOUT(0x1B1B3FC2CLL);
}

void sub_1B1B3F8E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,uint64_t a63)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a73);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&STACK[0x218]);
  if (STACK[0x248]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x248]);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&STACK[0x250]);
  uint64_t v74 = *(void *)(v73 - 104);
  *(void *)(v73 - 104) = 0;
  if (v74) {
    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
  }
  JUMPOUT(0x1B1B3FCA8);
}

void sub_1B1B3F940()
{
}

void sub_1B1B3F94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a17 = (uint64_t)&a69;
  std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  JUMPOUT(0x1B1B3FA84);
}

void sub_1B1B3F9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a58 < 0) {
    operator delete(__p);
  }
  if (a73 < 0) {
    JUMPOUT(0x1B1B3FA80);
  }
  JUMPOUT(0x1B1B3FA84);
}

void sub_1B1B3FAB4()
{
  unint64_t v0 = STACK[0x238];
  STACK[0x238] = 0;
  if (v0) {
    quasar::artifact::TransitionArtifact();
  }
  JUMPOUT(0x1B1B3FAD0);
}

void sub_1B1B3FACC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (STACK[0x248]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x248]);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&STACK[0x250]);
  uint64_t v23 = *(void *)(v22 - 104);
  *(void *)(v22 - 104) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  JUMPOUT(0x1B1B3FCA8);
}

void sub_1B1B3FAE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1B3F9E0);
}

void sub_1B1B3FB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  if (STACK[0x248]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x248]);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&STACK[0x250]);
  uint64_t v9 = *(void *)(v8 - 104);
  *(void *)(v8 - 104) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  JUMPOUT(0x1B1B3FCA8);
}

void sub_1B1B3FB10()
{
}

void sub_1B1B3FB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x1B1B3FC40);
}

void sub_1B1B3FB34(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 112);
  *(void *)(v1 - 112) = 0;
  if (v3) {
    quasar::artifact::TransitionArtifact();
  }
  quasar::artifact::TransitionArtifact((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_1B1B3FB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::string __p = &a69;
  std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  JUMPOUT(0x1B1B3FC1CLL);
}

void sub_1B1B3FC74(_Unwind_Exception *a1)
{
  if (STACK[0x248]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x248]);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&STACK[0x250]);
  uint64_t v1 = *(void *)(v2 - 104);
  *(void *)(v2 - 104) = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_1B1B3FC7C(_Unwind_Exception *a1)
{
}

void sub_1B1B3FC8C(_Unwind_Exception *a1)
{
}

void sub_1B1B3FC9C()
{
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::basic_ptree(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  operator new();
}

void sub_1B1B3FD2C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x1020C402FC1992ELL);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::add_child(uint64_t a1, uint64_t *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)*a2, a2[1]);
    BOOL v6 = *((char *)a2 + 23) < 0;
  }
  else
  {
    BOOL v6 = 0;
    std::string v11 = *(std::string *)a2;
  }
  char v12 = *((unsigned char *)a2 + 24);
  long long v7 = &v11;
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  if (v6) {
    uint64_t v8 = (uint64_t *)*a2;
  }
  else {
    uint64_t v8 = a2;
  }
  int v13 = (char *)v7 + a2[4] - (void)v8;
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(a1, (uint64_t)&v11);
  boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)&v11, &v10);
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>> const&,0>(&__p, (long long *)&v10, a3);
}

void sub_1B1B3FED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void boost::property_tree::json_parser::write_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(void *a1, uint64_t a2, uint64_t a3)
{
  long long __p = 0uLL;
  uint64_t v4 = 0;
  boost::property_tree::json_parser::write_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, a2, &__p, a3);
  if (SHIBYTE(v4) < 0) {
    operator delete((void *)__p);
  }
}

void sub_1B1B3FF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::pair<char const*,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char const(&)[1],boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>&,0>(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  operator new();
}

void sub_1B1B40008(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x1020C402FC1992ELL);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = operator new(0x60uLL);
  *(void *)(a1 + 24) = 0;
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::copy_construct_from(a1, a2);
  return a1;
}

void sub_1B1B40088(_Unwind_Exception *a1)
{
  operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::copy_construct_from(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  v11[1] = v4;
  uint64_t v11[3] = v4;
  if (v4)
  {
    if (v4 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v7 = operator new(16 * v4);
  }
  else
  {
    long long v7 = 0;
  }
  v11[4] = v7;
  v11[5] = 0;
  v11[6] = v5;
  v11[7] = v6;
  char v12 = 0;
  for (uint64_t i = *(void *)(v5 + 88); ; uint64_t i = *(void *)(v9 + 88))
  {
    uint64_t v9 = i ? i - 80 : 0;
    if (v9 == v5) {
      break;
    }
    boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::clone<boost::multi_index::detail::copy_map_value_copier>((uint64_t)v11, v9);
  }
  boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::copy_(a1 + 16, a2 + 16, v11);
  char v12 = 1;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~copy_map((uint64_t)v11);
}

void sub_1B1B40164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~copy_map((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::copy_(unint64_t result, uint64_t a2, void *a3)
{
  unint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = *(void *)(result - 8);
  unint64_t v5 = a3[5];
  do
  {
    uint64_t v6 = *(void *)(v3 + 88);
    if (v6) {
      unint64_t v3 = v6 - 80;
    }
    else {
      unint64_t v3 = 0;
    }
    long long v7 = a3 + 7;
    if (a3[6] != v3)
    {
      uint64_t v8 = (void *)a3[4];
      if (v5)
      {
        unint64_t v9 = v5;
        do
        {
          unint64_t v10 = v9 >> 1;
          std::string v11 = &v8[2 * (v9 >> 1)];
          unint64_t v13 = *v11;
          char v12 = v11 + 2;
          v9 += ~(v9 >> 1);
          if (v13 < v3) {
            uint64_t v8 = v12;
          }
          else {
            unint64_t v9 = v10;
          }
        }
        while (v9);
      }
      long long v7 = v8 + 1;
    }
    uint64_t v14 = *v7;
    *(void *)(v4 + 88) = v14 + 80;
    *(void *)(v14 + 80) = v4 + 80;
    uint64_t v4 = v14;
  }
  while (v3 != *(void *)(a2 - 8));
  return boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::copy_(result, a2, a3);
}

void boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::clone<boost::multi_index::detail::copy_map_value_copier>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(*(void *)(a1 + 32) + 16 * *(void *)(a1 + 40));
  *unint64_t v3 = a2;
  uint64_t v4 = (std::string *)operator new(0x60uLL);
  v3[1] = v4;
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100](v4);
  unint64_t v5 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 40) = v5;
  if (v5 == *(void *)(a1 + 8))
  {
    unint64_t v6 = 126 - 2 * __clz(v5);
    if (v5) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,false>(*(unint64_t **)(a1 + 32), (unint64_t *)(*(void *)(a1 + 32) + 16 * v5), (uint64_t)&v8, v7, 1);
  }
}

void sub_1B1B402A8(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(*(void **)(*(void *)(v1 + 32) + 16 * *(void *)(v1 + 40) + 8));
  __cxa_rethrow();
}

void sub_1B1B402C4(_Unwind_Exception *a1)
{
}

void std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  operator new();
}

void sub_1B1B40388(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      long long v4 = result;
      do
      {
        char v5 = v2;
        unint64_t v6 = v4[2];
        if (v6 < *v4)
        {
          unint64_t v7 = v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            unint64_t v9 = *(unint64_t *)((char *)result + v8 - 16);
            v8 -= 16;
            if (v6 >= v9)
            {
              unint64_t v10 = (unint64_t *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          unint64_t v10 = result;
LABEL_10:
          *unint64_t v10 = v6;
          v10[1] = v7;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        long long v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(long long *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 < *(void *)a1)
  {
    if (v4 < v3)
    {
      long long v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 >= *a2) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 >= *(void *)a1) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  long long v2 = *(_OWORD *)a1;
  unint64_t v3 = *a1;
  if (*a1 >= *(a2 - 2))
  {
    long long v6 = a1 + 2;
    do
    {
      unint64_t v4 = v6;
      if (v6 >= a2) {
        break;
      }
      v6 += 2;
    }
    while (v3 >= *v4);
  }
  else
  {
    unint64_t v4 = a1;
    do
    {
      unint64_t v5 = v4[2];
      v4 += 2;
    }
    while (v3 >= v5);
  }
  if (v4 < a2)
  {
    do
    {
      unint64_t v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < v7);
  }
  while (v4 < a2)
  {
    long long v11 = *(_OWORD *)v4;
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v11;
    do
    {
      unint64_t v8 = v4[2];
      v4 += 2;
    }
    while (v3 >= v8);
    do
    {
      unint64_t v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < v9);
  }
  if (v4 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v4 - 1);
  }
  *((_OWORD *)v4 - 1) = v2;
  return v4;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>(long long *a1, long long *a2)
{
  uint64_t v2 = 0;
  long long v3 = *a1;
  unint64_t v4 = *(void *)a1;
  do
    unint64_t v5 = *(void *)&a1[++v2];
  while (v5 < v4);
  long long v6 = &a1[v2];
  unint64_t v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      unint64_t v9 = *((void *)a2-- - 2);
    }
    while (v9 >= v4);
  }
  else
  {
    do
      unint64_t v8 = *((void *)a2-- - 2);
    while (v8 >= v4);
  }
  if (v6 < a2)
  {
    unint64_t v10 = &a1[v2];
    long long v11 = a2;
    do
    {
      long long v12 = *v10;
      *unint64_t v10 = *v11;
      long long *v11 = v12;
      do
        unint64_t v13 = *((void *)v10++ + 2);
      while (v13 < v4);
      do
        unint64_t v14 = *((void *)v11-- - 2);
      while (v14 >= v4);
    }
    while (v10 < v11);
    unint64_t v7 = v10 - 1;
  }
  if (v7 != a1) {
    *a1 = *v7;
  }
  *unint64_t v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          unint64_t v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (unint64_t *)a1;
LABEL_12:
      unint64_t *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(long long *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(a1, a2, a3);
  if (*(void *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(void *)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(long long *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(void *)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    long long v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v30 = *(_OWORD *)a1;
        int v18 = a1;
        do
        {
          char v19 = &v18[2 * v17 + 2];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            uint64_t v20 = v21;
          }
          *(_OWORD *)int v18 = *(_OWORD *)v19;
          int v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)char v19 = v30;
        }
        else
        {
          *(_OWORD *)char v19 = *(_OWORD *)v6;
          *(_OWORD *)long long v6 = v30;
          uint64_t v22 = (char *)v19 - (char *)a1 + 16;
          if (v22 >= 17)
          {
            unint64_t v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            uint64_t v24 = &a1[2 * v23];
            unint64_t v25 = *v19;
            if (*v24 < *v19)
            {
              unint64_t v26 = v19[1];
              do
              {
                uint64_t v27 = v19;
                char v19 = v24;
                *(_OWORD *)uint64_t v27 = *(_OWORD *)v24;
                if (!v23) {
                  break;
                }
                unint64_t v23 = (v23 - 1) >> 1;
                uint64_t v24 = &a1[2 * v23];
              }
              while (*v24 < v25);
              *char v19 = v25;
              v19[1] = v26;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unint64_t v10 = *v8;
      }
      else
      {
        unint64_t v10 = *v8;
        if (*v8 < v8[2])
        {
          unint64_t v10 = v8[2];
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v11 = *a4;
      if (v10 >= *a4)
      {
        unint64_t v12 = a4[1];
        do
        {
          unint64_t v13 = a4;
          a4 = v8;
          *(_OWORD *)unint64_t v13 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v14 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t *)(result + 16 * v14);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unint64_t v15 = *v8;
            uint64_t v7 = v14;
          }
          else
          {
            unint64_t v15 = *v8;
            if (*v8 >= v8[2])
            {
              uint64_t v7 = v14;
            }
            else
            {
              unint64_t v15 = v8[2];
              v8 += 2;
            }
          }
        }
        while (v15 >= v11);
        *a4 = v11;
        a4[1] = v12;
      }
    }
  }
  return result;
}

unint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::copy_(unint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a2 - 8);
  unint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = *(void *)(result - 8);
  uint64_t v6 = (unint64_t *)(v5 + 56);
  if (v4 > 1)
  {
    unint64_t *v6 = *v6 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v3 + 56) & 1;
    uint64_t v7 = *(void *)(v3 + 56);
    unint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v9 = (v7 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v10 = v4 & 1;
    if (v9) {
      unint64_t v11 = 0;
    }
    else {
      unint64_t v11 = v8;
    }
    uint64_t v12 = a3[6];
    if (v12 == v11)
    {
      char v19 = a3 + 7;
    }
    else
    {
      unint64_t v13 = (void *)a3[4];
      unint64_t v14 = a3[5];
      while (v14)
      {
        unint64_t v15 = v14 >> 1;
        uint64_t v16 = &v13[2 * (v14 >> 1)];
        unint64_t v18 = *v16;
        uint64_t v17 = v16 + 2;
        v14 += ~(v14 >> 1);
        if (v18 < v11) {
          unint64_t v13 = v17;
        }
        else {
          unint64_t v14 = v15;
        }
      }
      char v19 = v13 + 1;
    }
    unint64_t *v6 = v10 | (*v19 + 56);
    uint64_t v20 = *(void *)(v3 + 64);
    unint64_t v21 = v20 - 56;
    if (!v20) {
      unint64_t v21 = 0;
    }
    if (v12 == v21)
    {
      unint64_t v28 = a3 + 7;
    }
    else
    {
      uint64_t v22 = (void *)a3[4];
      unint64_t v23 = a3[5];
      while (v23)
      {
        unint64_t v24 = v23 >> 1;
        unint64_t v25 = &v22[2 * (v23 >> 1)];
        unint64_t v27 = *v25;
        unint64_t v26 = v25 + 2;
        v23 += ~(v23 >> 1);
        if (v27 < v21) {
          uint64_t v22 = v26;
        }
        else {
          unint64_t v23 = v24;
        }
      }
      unint64_t v28 = v22 + 1;
    }
    *(void *)(v5 + 64) = *v28 + 56;
    uint64_t v29 = *(void *)(*(void *)(a2 - 8) + 72);
    if (v29) {
      unint64_t v30 = v29 - 56;
    }
    else {
      unint64_t v30 = 0;
    }
    if (a3[6] == v30)
    {
      long long v38 = a3 + 7;
      uint64_t v32 = a3[5];
    }
    else
    {
      long long v31 = (void *)a3[4];
      uint64_t v32 = a3[5];
      if (v32)
      {
        unint64_t v33 = a3[5];
        do
        {
          unint64_t v34 = v33 >> 1;
          long long v35 = &v31[2 * (v33 >> 1)];
          unint64_t v37 = *v35;
          long long v36 = v35 + 2;
          v33 += ~(v33 >> 1);
          if (v37 < v30) {
            long long v31 = v36;
          }
          else {
            unint64_t v33 = v34;
          }
        }
        while (v33);
      }
      long long v38 = v31 + 1;
    }
    *(void *)(*(void *)(result - 8) + 72) = *v38 + 56;
    if (v32)
    {
      long long v39 = (void *)a3[4];
      long long v40 = &v39[2 * v32];
      do
      {
        uint64_t v42 = *v39;
        long long v41 = (void *)v39[1];
        long long v43 = (void *)(*v39 + 56);
        long long v44 = v41 + 7;
        uint64_t v45 = *v43 & 1;
        __n128 result = v41[7] & 0xFFFFFFFFFFFFFFFELL | v45;
        v41[7] = result;
        unint64_t v46 = *v43 & 0xFFFFFFFFFFFFFFFELL;
        if (v46)
        {
          long long v47 = a3 + 7;
          if (a3[6] != v46 - 56)
          {
            uint64_t v48 = (void *)a3[4];
            unint64_t v49 = a3[5];
            while (v49)
            {
              unint64_t v50 = v49 >> 1;
              long long v51 = &v48[2 * (v49 >> 1)];
              unint64_t v53 = *v51;
              long long v52 = v51 + 2;
              v49 += ~(v49 >> 1);
              if (v53 < v46 - 56) {
                uint64_t v48 = v52;
              }
              else {
                unint64_t v49 = v50;
              }
            }
            long long v47 = v48 + 1;
          }
          __n128 result = *v47;
          *long long v44 = v45 | (result + 56);
          if (*(void **)(v46 + 8) == v43)
          {
            *(void *)(result + 64) = v44;
          }
          else if (*(void **)(v46 + 16) == v43)
          {
            *(void *)(result + 72) = v44;
          }
        }
        else
        {
          *long long v44 = v45;
        }
        if (!*(void *)(v42 + 64)) {
          v41[8] = 0;
        }
        if (!*(void *)(v42 + 72)) {
          v41[9] = 0;
        }
        v39 += 2;
      }
      while (v39 != v40);
    }
  }
  else
  {
    *(void *)(v5 + 56) = 0;
    *(void *)(v5 + 64) = v6;
    *(void *)(*(void *)(result - 8) + 72) = *(void *)(result - 8) + 56;
  }
  return result;
}

uint64_t boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~copy_map(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 64) && *(void *)(a1 + 40))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    do
    {
      std::allocator_traits<std::allocator<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>>>::destroy[abi:ne180100]<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,void,void>(a1, *(void *)(*(void *)(a1 + 32) + v3));
      operator delete(*(void **)(*(void *)(a1 + 32) + v3));
      ++v2;
      v3 += 16;
    }
    while (v2 < *(void *)(a1 + 40));
  }
  if (*(void *)(a1 + 24)) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void std::allocator_traits<std::allocator<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>>>::destroy[abi:ne180100]<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,void,void>(uint64_t a1, uint64_t a2)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char const*,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::string *)std::string::basic_string[abi:ne180100]<0>(a1, *(char **)a2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3 + 1, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    v3[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v3[1].__r_.__value_.__l.__data_ = v4;
  }
  operator new();
}

void sub_1B1B41478(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::NgramSrilmCountConfig,std::allocator<quasar::NgramSrilmCountConfig>,quasar::SystemConfig &,std::string const&,void>@<X0>(void *a1@<X8>)
{
  unint64_t v2 = operator new(0x110uLL);
  __n128 result = std::__shared_ptr_emplace<quasar::NgramSrilmCountConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string const&,std::allocator<quasar::NgramSrilmCountConfig>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1B4151C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::NgramSrilmCountConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string const&,std::allocator<quasar::NgramSrilmCountConfig>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60E58;
  quasar::NgramSrilmCountConfig::NgramSrilmCountConfig(a1 + 3);
  return a1;
}

void sub_1B1B41578(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::NgramSrilmCountConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::NgramSrilmCountConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60E58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::NgramSrilmCountConfig>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(uint64_t a1)
{
  uint64_t v2 = boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~multi_index_container(*(void *)(a1 + 24));
  MEMORY[0x1B3EA8670](v2, 0x1020C402FC1992ELL);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~multi_index_container(uint64_t a1)
{
  return a1;
}

void boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::delete_all_nodes_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 - 8);
  uint64_t v2 = *(void *)(v1 + 88);
  if (v2) {
    uint64_t v3 = v2 - 80;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3 != v1)
  {
    uint64_t v5 = a1 - 16;
    do
    {
      uint64_t v6 = *(void *)(v3 + 88);
      if (v6) {
        uint64_t v7 = v6 - 80;
      }
      else {
        uint64_t v7 = 0;
      }
      boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::delete_node_(v5, v3);
      uint64_t v3 = v7;
    }
    while (v7 != *(void *)(a1 - 8));
  }
}

void boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::delete_node_(uint64_t a1, uint64_t a2)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a2 + 24);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  operator delete((void *)a2);
}

std::string *boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<std::string,boost::property_tree::id_translator<std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child_optional(a1, a2, (uint64_t *)&v5);
  if (!v5) {
    operator new();
  }
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<std::string,boost::property_tree::id_translator<std::string>>(v5, a3);
  return v5;
}

void sub_1B1B4183C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child_optional(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    BOOL v6 = *(char *)(a2 + 23) < 0;
  }
  else
  {
    BOOL v6 = 0;
    std::string __p = *(std::string *)a2;
  }
  char v10 = *(unsigned char *)(a2 + 24);
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v6) {
    unint64_t v8 = *(const std::string::value_type **)a2;
  }
  else {
    unint64_t v8 = (const std::string::value_type *)a2;
  }
  unint64_t v11 = (char *)p_p + *(void *)(a2 + 32) - (void)v8;
  *a3 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B4193C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<std::string,boost::property_tree::id_translator<std::string>>(std::string *this, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  std::string::operator=(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B41A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_child(uint64_t a1, uint64_t *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)*a2, a2[1]);
    BOOL v6 = *((char *)a2 + 23) < 0;
  }
  else
  {
    BOOL v6 = 0;
    std::string v13 = *(std::string *)a2;
  }
  char v14 = *((unsigned char *)a2 + 24);
  uint64_t v7 = &v13;
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (v6) {
    unint64_t v8 = (uint64_t *)*a2;
  }
  else {
    unint64_t v8 = a2;
  }
  unint64_t v15 = (char *)v7 + a2[4] - (void)v8;
  uint64_t v9 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(a1, (uint64_t)&v13);
  boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)&v13, &v12);
  char v10 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(*(void *)(v9 + 24) + 16, (const void **)&v12.__r_.__value_.__l.__data_);
  if (*(const void ***)(*(void *)(v9 + 24) + 8) != v10) {
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::operator=((uint64_t)(v10 + 3), (uint64_t)a3);
  }
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>> const&,0>(&__p, (long long *)&v12, a3);
}

void sub_1B1B41BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(void *)a2;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (*(void *)(a2 + 32) != v4 + v3)
  {
    boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)a2, &__p);
    BOOL v6 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(*(void *)(a1 + 24) + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    if (*(const void ***)(*(void *)(a1 + 24) + 8) == v6) {
      a1 = 0;
    }
    else {
      a1 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(v6 + 3, a2);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

void sub_1B1B41C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)a1[4];
  if (*((char *)a1 + 23) < 0)
  {
    BOOL v6 = (uint64_t *)*a1;
    uint64_t v5 = a1[1];
  }
  else
  {
    uint64_t v5 = *((unsigned __int8 *)a1 + 23);
    BOOL v6 = a1;
  }
  uint64_t v7 = (char *)v6 + v5;
  unint64_t v8 = (char *)memchr((void *)a1[4], *((char *)a1 + 24), (char *)v6 + v5 - v4);
  if (v8) {
    uint64_t v7 = v8;
  }
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&v11, v4, v7, v7 - v4);
  a1[4] = (uint64_t)v7;
  if (*((char *)a1 + 23) < 0)
  {
    char v10 = (uint64_t *)*a1;
    uint64_t v9 = a1[1];
  }
  else
  {
    uint64_t v9 = *((unsigned __int8 *)a1 + 23);
    char v10 = a1;
  }
  if (v7 != (char *)v10 + v9) {
    a1[4] = (uint64_t)(v7 + 1);
  }
  char v12 = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v11;
  }
  char v12 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (v12 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = __p;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B41E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 && a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void boost::property_tree::ptree_error::~ptree_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1B3EA8670);
}

const void **boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void *)(a1 - 8);
  unint64_t v3 = *(void *)(v2 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (v3)
  {
    uint64_t v5 = a1 + 1;
    BOOL v6 = *(const void ***)(a1 - 8);
    do
    {
      while (1)
      {
        uint64_t v7 = (const void **)(v3 - 56);
        if (std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 - 56), a2)) {
          break;
        }
        unint64_t v3 = *(void *)(v3 + 8);
        BOOL v6 = v7;
        if (!v3) {
          goto LABEL_7;
        }
      }
      unint64_t v3 = *(void *)(v3 + 16);
    }
    while (v3);
    uint64_t v7 = v6;
LABEL_7:
    if (v7 != (const void **)v2 && !std::less<std::string>::operator()[abi:ne180100](v5, a2, v7)) {
      return v7;
    }
  }
  return (const void **)v2;
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned char **)(a2 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v8 = *(void *)a2;
    uint64_t v5 = *(void *)(a2 + 8);
    BOOL v6 = (unsigned char *)(*(void *)a2 + v5);
    size_t v7 = v6 - v4;
  }
  else
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
    BOOL v6 = (unsigned char *)(a2 + v5);
    size_t v7 = a2 + v5 - (void)v4;
    uint64_t v8 = a2;
  }
  uint64_t v9 = memchr(v4, *(char *)(a2 + 24), v7);
  if (v9) {
    char v10 = v9;
  }
  else {
    char v10 = v6;
  }
  if (v10 != (void *)(v8 + v5))
  {
    boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)a2, &v13);
    std::string v11 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(*(void *)(a1 + 24) + 16, (const void **)&v13.__r_.__value_.__l.__data_);
    if (*(const void ***)(*(void *)(a1 + 24) + 8) == v11) {
      operator new();
    }
    a1 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(v11 + 3, a2);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

void sub_1B1B420BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair((uint64_t)&a13);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a9);
  if (*(char *)(v13 - 49) < 0) {
    operator delete(*(void **)(v13 - 72));
  }
  _Unwind_Resume(a1);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::operator=(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v2 = *(std::string *)a2;
  }
  operator new();
}

void sub_1B1B421CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x1B3EA8670](v14, 0x1020C402FC1992ELL);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  operator new();
}

void sub_1B1B422B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>> const&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  operator new();
}

void sub_1B1B423BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(uint64_t a1, uint64_t a2, long long *a3)
{
  __n128 result = boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_<boost::multi_index::detail::lvalue_tag>(a1 - 16, a3);
  if (v6)
  {
    if (*(void *)(a1 - 8) != a2)
    {
      *(void *)(result[3].__r_.__value_.__l.__size_ + 8) = *((void *)&result[3].__r_.__value_.__l + 2);
      *(void *)result[3].__r_.__value_.__r.__words[2] = result[3].__r_.__value_.__l.__size_;
      std::string::size_type v8 = *(void *)(a2 + 80);
      size_t v7 = (void *)(a2 + 80);
      result[3].__r_.__value_.__l.__size_ = v8;
      result[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      *size_t v7 = (char *)result + 80;
      *(void *)(result[3].__r_.__value_.__l.__size_ + 8) = (char *)result + 80;
    }
  }
  return result;
}

std::string *boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, long long *a2)
{
  uint64_t v4 = 0;
  __n128 result = (std::string *)boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert_<boost::multi_index::detail::lvalue_tag>(a1 + 16, a2, &v4);
  if (result == v4) {
    ++*(void *)(a1 + 24);
  }
  return result;
}

uint64_t boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, long long *a2, std::string **a3)
{
  uint64_t result = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::insert_<boost::multi_index::detail::lvalue_tag>(a1, a2, a3);
  if ((std::string *)result == *a3)
  {
    char v6 = *(void **)(a1 - 8);
    uint64_t v7 = v6[10];
    v6 += 10;
    *(void *)(result + 80) = v7;
    *(void *)(result + 88) = v6;
    void *v6 = result + 80;
    *(void *)(*(void *)(result + 80) + 8) = result + 80;
  }
  return result;
}

uint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, long long *a2, std::string **a3)
{
  int v8 = 0;
  if (boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::link_point(a1, (const void **)a2, (uint64_t)&v8))boost::multi_index::detail::index_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_(a1, a2, a3); {
  if (v9)
  }
    return v9 - 56;
  else {
    return 0;
  }
}

uint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::link_point(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 - 8);
  unint64_t v5 = *(void *)(v4 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (v5)
  {
    uint64_t v7 = a1 + 1;
    do
    {
      unint64_t v4 = v5 - 56;
      BOOL v8 = std::less<std::string>::operator()[abi:ne180100](v7, a2, (const void **)(v5 - 56));
      if (v8) {
        uint64_t v9 = 64;
      }
      else {
        uint64_t v9 = 72;
      }
      unint64_t v5 = *(void *)(v4 + v9);
    }
    while (v5);
    LODWORD(v5) = !v8;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = v4 + 56;
  return 1;
}

void boost::multi_index::detail::index_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_(uint64_t a1, long long *a2, std::string **a3)
{
  unint64_t v5 = (std::string *)operator new(0x60uLL);
  *a3 = v5;
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100](v5, a2);
}

void sub_1B1B42680(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(*v1);
  __cxa_rethrow();
}

void sub_1B1B42694(_Unwind_Exception *a1)
{
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link(unint64_t a1, int a2, unint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    a3[2] = a1;
    unint64_t v4 = a4 + 2;
    unint64_t v5 = (unint64_t *)a4[2];
  }
  else
  {
    a3[1] = a1;
    if (a3 == a4)
    {
      *a3 = *a3 & 1 | a1;
      unint64_t v4 = a3 + 2;
LABEL_8:
      *unint64_t v4 = a1;
      goto LABEL_9;
    }
    unint64_t v4 = a4 + 1;
    unint64_t v5 = (unint64_t *)a4[1];
  }
  if (v5 == a3) {
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v6 = *(void *)a1 & 1 | (unint64_t)a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v6;
  BOOL v8 = a4;
  return boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance((unint64_t *)a1, &v8);
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance(unint64_t *result, unint64_t **a2)
{
  std::string v2 = result;
  unint64_t v3 = *result & 0xFFFFFFFFFFFFFFFELL;
  *uint64_t result = v3;
  unint64_t v4 = *a2;
  unint64_t v5 = **a2 & 0xFFFFFFFFFFFFFFFELL;
  if ((unint64_t *)v5 != result)
  {
    uint64_t v6 = (unint64_t *)(*result & 0xFFFFFFFFFFFFFFFELL);
    for (unint64_t i = *v6; (*v6 & 1) == 0; unint64_t i = *v6)
    {
      uint64_t v9 = *(unint64_t **)((i & 0xFFFFFFFFFFFFFFFELL) + 8);
      if (v9 == v6)
      {
        uint64_t v9 = *(unint64_t **)((i & 0xFFFFFFFFFFFFFFFELL) + 16);
        if (!v9 || (*(unsigned char *)v9 & 1) != 0)
        {
          if (v2 == (unint64_t *)v6[2])
          {
            uint64_t v17 = v4;
            boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v6, &v17);
            unint64_t v4 = *a2;
            std::string v11 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
            std::string v2 = v6;
          }
          else
          {
            std::string v11 = v6;
            uint64_t v6 = v2;
          }
          *v11 |= 1uLL;
          *(void *)(*(void *)(*v6 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
          uint64_t v13 = (unint64_t *)(*(void *)(*v6 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
          uint64_t v16 = v4;
          uint64_t result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v13, &v16);
          goto LABEL_17;
        }
      }
      else if (!v9 || (*(unsigned char *)v9 & 1) != 0)
      {
        if (v2 == (unint64_t *)v6[1])
        {
          unint64_t v15 = v4;
          boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v6, &v15);
          unint64_t v4 = *a2;
          char v10 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
          std::string v2 = v6;
        }
        else
        {
          char v10 = v6;
          uint64_t v6 = v2;
        }
        *v10 |= 1uLL;
        *(void *)(*(void *)(*v6 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
        char v12 = (unint64_t *)(*(void *)(*v6 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v14 = v4;
        uint64_t result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v12, &v14);
        goto LABEL_17;
      }
      unint64_t *v6 = i | 1;
      *v9 |= 1uLL;
      *(void *)(*(void *)(*v2 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
      std::string v2 = (unint64_t *)(*(void *)(*v2 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
LABEL_17:
      unint64_t v4 = *a2;
      unint64_t v5 = **a2 & 0xFFFFFFFFFFFFFFFELL;
      if (v2 == (unint64_t *)v5) {
        goto LABEL_20;
      }
      uint64_t v6 = (unint64_t *)(*v2 & 0xFFFFFFFFFFFFFFFELL);
    }
    std::string v2 = (unint64_t *)v5;
LABEL_20:
    unint64_t v3 = *v2;
  }
  unint64_t *v2 = v3 | 1;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(unint64_t *result, unint64_t **a2)
{
  unint64_t v2 = result[2];
  result[2] = *(void *)(v2 + 8);
  unint64_t v3 = *(unint64_t **)(v2 + 8);
  if (v3) {
    *unint64_t v3 = *v3 & 1 | (unint64_t)result;
  }
  *(void *)unint64_t v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(void *)v2 & 1;
  if ((unint64_t *)(**a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    **a2 = **a2 & 1 | v2;
    uint64_t v4 = *result;
  }
  else
  {
    uint64_t v4 = *result;
    unint64_t v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 8) == result) {
      *(void *)(v5 + 8) = v2;
    }
    else {
      *(void *)(v5 + 16) = v2;
    }
  }
  *(void *)(v2 + 8) = result;
  *uint64_t result = v4 & 1 | v2;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(unint64_t *result, unint64_t **a2)
{
  unint64_t v2 = result[1];
  result[1] = *(void *)(v2 + 16);
  unint64_t v3 = *(unint64_t **)(v2 + 16);
  if (v3) {
    *unint64_t v3 = *v3 & 1 | (unint64_t)result;
  }
  *(void *)unint64_t v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(void *)v2 & 1;
  if ((unint64_t *)(**a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    **a2 = **a2 & 1 | v2;
    uint64_t v4 = *result;
  }
  else
  {
    uint64_t v4 = *result;
    unint64_t v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 16) == result) {
      *(void *)(v5 + 16) = v2;
    }
    else {
      *(void *)(v5 + 8) = v2;
    }
  }
  *(void *)(v2 + 16) = result;
  *uint64_t result = v4 & 1 | v2;
  return result;
}

uint64_t boost::property_tree::json_parser::write_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(void *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if ((boost::property_tree::json_parser::verify_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a2, 0) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "ptree contains data that cannot be represented in JSON format");
    boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v14, (uint64_t)v13, a3, 0);
    v14.__locale_ = (std::locale::__imp *)&unk_1F0A46D30;
    char v10 = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/boost/property_tree/"
          "json_parser/detail/write.hpp";
    std::string v11 = "void boost::property_tree::json_parser::write_json_internal(std::basic_ostream<typename Ptree::key_type::value"
          "_type> &, const Ptree &, const std::string &, BOOL) [uint64_t Ptree = boost::property_tree::basic_ptree<std::string, std::string>]";
    uint64_t v12 = 159;
    boost::throw_exception<boost::property_tree::json_parser::json_parser_error>((uint64_t)&v14, (uint64_t)&v10);
  }
  boost::property_tree::json_parser::write_json_helper<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, a2, 0, a4);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  BOOL v8 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v14);
  std::ostream::put();
  uint64_t result = std::ostream::flush();
  if (*(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "write error");
    boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v14, (uint64_t)v13, a3, 0);
    v14.__locale_ = (std::locale::__imp *)&unk_1F0A46D30;
    char v10 = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/boost/property_tree/"
          "json_parser/detail/write.hpp";
    std::string v11 = "void boost::property_tree::json_parser::write_json_internal(std::basic_ostream<typename Ptree::key_type::value"
          "_type> &, const Ptree &, const std::string &, BOOL) [uint64_t Ptree = boost::property_tree::basic_ptree<std::string, std::string>]";
    uint64_t v12 = 163;
    boost::throw_exception<boost::property_tree::json_parser::json_parser_error>((uint64_t)&v14, (uint64_t)&v10);
  }
  return result;
}

void sub_1B1B42C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::json_parser::verify_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(uint64_t a1, int a2)
{
  if (!a2)
  {
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (size) {
      return 0;
    }
  }
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(a1, &__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23) || !*(void *)(*(void *)(a1 + 24) + 24)) {
      goto LABEL_17;
    }
    return 0;
  }
  if (__p.__r_.__value_.__l.__size_)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 24);
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5) {
      return 0;
    }
  }
  else
  {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_17:
  uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v8 = *(void *)(v7 + 88);
  if (v8) {
    uint64_t v9 = v8 - 80;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 == v7) {
    return 1;
  }
  uint64_t v10 = (a2 + 1);
  do
  {
    uint64_t result = boost::property_tree::json_parser::verify_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(v9 + 24, v10);
    if (!result) {
      break;
    }
    uint64_t v11 = *(void *)(v9 + 88);
    uint64_t v9 = v11 ? v11 - 80 : 0;
  }
  while (v9 != *(void *)(*(void *)(a1 + 24) + 8));
  return result;
}

void boost::throw_exception<boost::property_tree::json_parser::json_parser_error>(uint64_t a1, uint64_t a2)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x78uLL);
  boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::wrapexcept(exception, a1, a2);
}

void sub_1B1B42DE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::property_tree::json_parser::write_json_helper<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 < 1)
  {
LABEL_42:
    __p.__r_.__value_.__s.__data_[0] = 123;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    if (a4)
    {
      __p.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    }
    uint64_t v22 = *(void *)(*(void *)(a2 + 24) + 8);
    uint64_t v23 = *(void *)(v22 + 88);
    if (v23) {
      uint64_t v24 = v23 - 80;
    }
    else {
      uint64_t v24 = 0;
    }
    int v42 = 4 * a3;
    if (v24 == v22)
    {
LABEL_81:
      if (a4)
      {
        std::string::basic_string[abi:ne180100](&__p, v42, 32);
        long long v36 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        uint64_t v37 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v36, v37);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::string::value_type v21 = 125;
      goto LABEL_91;
    }
    uint64_t v25 = (a3 + 1);
    while (1)
    {
      if (a4)
      {
        std::string::basic_string[abi:ne180100](&__p, v42 + 4, 32);
        unint64_t v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        uint64_t v27 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v26, v27);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      __p.__r_.__value_.__s.__data_[0] = 34;
      unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      boost::property_tree::json_parser::create_escapes<char>(v24, &__p);
      uint64_t v29 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      uint64_t v30 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(__p.__r_.__value_.__r.__words[2])
          : __p.__r_.__value_.__l.__size_;
      long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      v43.__r_.__value_.__s.__data_[0] = 34;
      uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)&v43, 1);
      v43.__r_.__value_.__s.__data_[0] = 58;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)&v43, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (a4) {
        goto LABEL_66;
      }
LABEL_67:
      boost::property_tree::json_parser::write_json_helper<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, v24 + 24, v25, a4);
      uint64_t v33 = *(void *)(v24 + 88);
      if (v33) {
        uint64_t v34 = v33 - 80;
      }
      else {
        uint64_t v34 = 0;
      }
      if (v34 != *(void *)(*(void *)(a2 + 24) + 8))
      {
        __p.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      }
      if (a4)
      {
        __p.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      }
      uint64_t v35 = *(void *)(v24 + 88);
      if (v35) {
        uint64_t v24 = v35 - 80;
      }
      else {
        uint64_t v24 = 0;
      }
      if (v24 == *(void *)(*(void *)(a2 + 24) + 8)) {
        goto LABEL_81;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!a4) {
      goto LABEL_67;
    }
LABEL_66:
    __p.__r_.__value_.__s.__data_[0] = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    goto LABEL_67;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  if (*(void *)(v8 + 24))
  {
    memset(&__p, 0, sizeof(__p));
    uint64_t v9 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::count<std::string,std::less<std::string>>(v8 + 16, (const void **)&__p.__r_.__value_.__l.__data_, v8 + 17);
    uint64_t v10 = *(void *)(*(void *)(a2 + 24) + 24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v9 == v10)
    {
      __p.__r_.__value_.__s.__data_[0] = 91;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      if (a4)
      {
        __p.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      }
      uint64_t v11 = *(void *)(*(void *)(a2 + 24) + 8);
      uint64_t v12 = *(void *)(v11 + 88);
      if (v12) {
        uint64_t v13 = v12 - 80;
      }
      else {
        uint64_t v13 = 0;
      }
      if (v13 != v11)
      {
        do
        {
          if (a4)
          {
            std::string::basic_string[abi:ne180100](&__p, 4 * a3 + 4, 32);
            std::locale v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            uint64_t v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(__p.__r_.__value_.__r.__words[2])
                : __p.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v14, v15);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          boost::property_tree::json_parser::write_json_helper<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, v13 + 24, (a3 + 1), a4);
          uint64_t v16 = *(void *)(v13 + 88);
          if (v16) {
            uint64_t v17 = v16 - 80;
          }
          else {
            uint64_t v17 = 0;
          }
          if (v17 != *(void *)(*(void *)(a2 + 24) + 8))
          {
            __p.__r_.__value_.__s.__data_[0] = 44;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
          }
          if (a4)
          {
            __p.__r_.__value_.__s.__data_[0] = 10;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
          }
          uint64_t v18 = *(void *)(v13 + 88);
          if (v18) {
            uint64_t v13 = v18 - 80;
          }
          else {
            uint64_t v13 = 0;
          }
        }
        while (v13 != *(void *)(*(void *)(a2 + 24) + 8));
      }
      if (a4)
      {
        std::string::basic_string[abi:ne180100](&__p, 4 * a3, 32);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::string::value_type v21 = 93;
LABEL_91:
      __p.__r_.__value_.__s.__data_[0] = v21;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      return;
    }
    goto LABEL_42;
  }
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(a2, &v43);
  boost::property_tree::json_parser::create_escapes<char>((uint64_t)&v43, &__p);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  v43.__r_.__value_.__s.__data_[0] = 34;
  long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v43, 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v39 = &__p;
  }
  else {
    long long v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v40 = __p.__r_.__value_.__l.__size_;
  }
  long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
  v43.__r_.__value_.__s.__data_[0] = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)&v43, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B432F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = __p;
  }
}

void sub_1B1B43410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 80) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 88));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::wrapexcept(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  *(void *)a1 = &unk_1F0A46DF8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)a2);
  *(void *)(a1 + 8) = &unk_1F0A46DA8;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 40) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 24) = v6;
  }
  uint64_t v7 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 64) = *(void *)(a2 + 56);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)a1 = &unk_1F0A468C8;
  *(void *)(a1 + 8) = &unk_1F0A468F8;
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = &unk_1F0A46920;
  *(_DWORD *)(a1 + 112) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 96) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void sub_1B1B435E8(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*v3);
  }
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::clone()
{
}

void sub_1B1B436D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x78uLL);
  boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::wrapexcept(exception, a1);
}

void sub_1B1B43790(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 80) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 88));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 72) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 72) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 - 9));
}

{
  uint64_t vars8;

  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 - 9));
  JUMPOUT(0x1B3EA8670);
}

void boost::property_tree::json_parser::json_parser_error::~json_parser_error(std::runtime_error *this)
{
  boost::property_tree::file_parser_error::~file_parser_error(this);
  JUMPOUT(0x1B3EA8670);
}

void boost::property_tree::file_parser_error::~file_parser_error(std::runtime_error *this)
{
  boost::property_tree::file_parser_error::~file_parser_error(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1F0A46DA8;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0) {
    operator delete((void *)this[2].__imp_.__imp_);
  }
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::runtime_error::~runtime_error(this);
}

uint64_t boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A46DF8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1F0A46DA8;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
  }
  uint64_t v5 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8) = &unk_1F0A46D30;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = &unk_1F0A47040;
  *(void *)(a1 + 88) = v7;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  long long v8 = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v8;
  *(void *)a1 = &unk_1F0A468C8;
  *(void *)(a1 + 8) = &unk_1F0A468F8;
  *(void *)(a1 + 80) = &unk_1F0A46920;
  return a1;
}

void sub_1B1B43C48(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*v3);
  }
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::file_parser_error::file_parser_error(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  boost::property_tree::file_parser_error::format_what(a2, (const char *)a3, a4);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v12);
  *(void *)a1 = &unk_1F0A46D58;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F0A46DA8;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)a2;
    *(void *)(a1 + 32) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v8;
  }
  uint64_t v9 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    *(void *)(a1 + 56) = *((void *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(void *)(a1 + 64) = a4;
  return a1;
}

void sub_1B1B43D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 39) < 0) {
    operator delete(*v16);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)v15);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::file_parser_error::format_what(uint64_t a1, const char *a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  if (a2[23] < 0)
  {
    if (*((void *)a2 + 1)) {
      a2 = *(const char **)a2;
    }
    else {
      a2 = "<unspecified file>";
    }
  }
  else if (!a2[23])
  {
    a2 = "<unspecified file>";
  }
  size_t v6 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)a2, v6);
  if (a3)
  {
    char v18 = 40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v18, 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    char v18 = 41;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v18, 1);
  }
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
  int v9 = *(char *)(a1 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = *(void *)a1;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E4FBA408];
  uint64_t v12 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v15[0] = v12;
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v17);
}

void sub_1B1B43FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::property_tree::json_parser::create_escapes<char>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  int v3 = *(char *)(a1 + 23);
  if (v3 >= 0) {
    long long v4 = (unsigned char *)a1;
  }
  else {
    long long v4 = *(unsigned char **)a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  for (; v5; --v5)
  {
    unint64_t v6 = *v4;
    if (v6 <= 0x5C && (v6 - 48) >= 0x2Cu && (v6 & 0xFE) != 0x20 && (v6 - 35) >= 0xCu)
    {
      if (*v4 <= 0x21u)
      {
        switch(*v4)
        {
          case 8:
            std::string::push_back(a2, 92);
            LOBYTE(v6) = 98;
            goto LABEL_28;
          case 9:
            std::string::push_back(a2, 92);
            LOBYTE(v6) = 116;
            goto LABEL_28;
          case 0xA:
            std::string::push_back(a2, 92);
            LOBYTE(v6) = 110;
            goto LABEL_28;
          case 0xC:
            std::string::push_back(a2, 92);
            LOBYTE(v6) = 102;
            goto LABEL_28;
          case 0xD:
            std::string::push_back(a2, 92);
            LOBYTE(v6) = 114;
            goto LABEL_28;
          default:
            goto LABEL_31;
        }
      }
      switch(v6)
      {
        case '""':
          std::string::push_back(a2, 92);
          LOBYTE(v6) = 34;
          break;
        case '/':
          std::string::push_back(a2, 92);
          LOBYTE(v6) = 47;
          break;
        case '\\':
          LOBYTE(v6) = 92;
          std::string::push_back(a2, 92);
          break;
        default:
LABEL_31:
          std::string::push_back(a2, 92);
          std::string::push_back(a2, 117);
          std::string::push_back(a2, 48);
          std::string::push_back(a2, 48);
          std::string::push_back(a2, a0123456789abcd[v6 >> 4]);
          std::string::push_back(a2, a0123456789abcd[v6 & 0xF]);
          goto LABEL_29;
      }
    }
LABEL_28:
    std::string::push_back(a2, v6);
LABEL_29:
    ++v4;
  }
}

void sub_1B1B441EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::count<std::string,std::less<std::string>>(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v3 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::equal_range<std::string,std::less<std::string>>(a1, a2, a3);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  do
  {
    ++v6;
    unint64_t v8 = v3 + 56;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v8);
    if (v8) {
      unint64_t v3 = v8 - 56;
    }
    else {
      unint64_t v3 = 0;
    }
  }
  while (v3 != v5);
  return v6;
}

unint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::equal_range<std::string,std::less<std::string>>(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a1 - 8);
  unint64_t v4 = *(void *)(v3 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (!v4) {
    return v3;
  }
  while (1)
  {
    unint64_t v7 = v4;
    while (1)
    {
      unint64_t v8 = v7 - 56;
      if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(v7 - 56), a2)) {
        break;
      }
      unint64_t v7 = *(void *)(v7 + 16);
      if (!v7) {
        return v3;
      }
    }
    BOOL v9 = std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)(v7 - 56));
    unint64_t v4 = *(void *)(v7 + 8);
    if (!v9) {
      break;
    }
    unint64_t v3 = v7 - 56;
    if (!v4) {
      return v8;
    }
  }
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v11 = v4 - 56;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(v4 - 56), a2)) {
          break;
        }
        unint64_t v4 = *(void *)(v4 + 16);
        if (!v4) {
          goto LABEL_17;
        }
      }
      unint64_t v4 = *(void *)(v4 + 8);
      unint64_t v8 = v11;
    }
    while (v4);
  }
  else
  {
LABEL_17:
    unint64_t v11 = v8;
  }
  uint64_t v12 = *(void *)(v7 + 16);
  if (!v12) {
    return v11;
  }
  do
  {
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)(v12 - 56)))
    {
      uint64_t v12 = *(void *)(v12 + 16);
      if (!v12) {
        return v11;
      }
    }
    uint64_t v12 = *(void *)(v12 + 8);
  }
  while (v12);
  return v11;
}

uint64_t boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment(uint64_t result)
{
  uint64_t v1 = *(void **)result;
  uint64_t v2 = *(void *)(*(void *)result + 16);
  if (v2)
  {
    do
    {
      *(void *)uint64_t result = v2;
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
  }
  else
  {
    unint64_t v3 = (void *)(*v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v1 == (void *)v3[2])
    {
      do
      {
        uint64_t v5 = v3;
        *(void *)uint64_t result = v3;
        unint64_t v3 = (void *)(*v3 & 0xFFFFFFFFFFFFFFFELL);
      }
      while (v5 == (void *)v3[2]);
      unint64_t v4 = (void *)v5[2];
    }
    else
    {
      unint64_t v4 = 0;
    }
    if (v4 != v3) {
      *(void *)uint64_t result = v3;
    }
  }
  return result;
}

void quasar::makeNbestElement(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t *a3@<X8>)
{
  kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)a3);
  uint64_t v6 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      memset(v13, 0, 24);
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      memset(v17, 0, 156);
      int __src = *(_DWORD *)(v6 + 4 * v8);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v17[8], (char *)&__src, (uint64_t)v13, 1uLL);
      uint64_t v9 = *a2 + v7;
      if ((char *)v9 != &v17[56]) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v17[56], *(char **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
      }
      unint64_t v10 = a3[1];
      if (v10 >= a3[2])
      {
        uint64_t v11 = std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>((uint64_t *)a3, (const kaldi::quasar::TranslationUtil::PathElement *)v13);
      }
      else
      {
        kaldi::quasar::TranslationUtil::PathElement::PathElement((std::string *)a3[1], (const kaldi::quasar::TranslationUtil::PathElement *)v13);
        uint64_t v11 = v10 + 240;
        a3[1] = v10 + 240;
      }
      a3[1] = v11;
      kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)v13);
      ++v8;
      uint64_t v6 = *a1;
      v7 += 24;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
}

void sub_1B1B44568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *((void *)v2 + 1) = v3;
  kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)va);
  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v2);
  _Unwind_Resume(a1);
}

void *quasar::PDecForceAlignOptions::options@<X0>(quasar::PDecForceAlignOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x70uLL);
  a2[2] = result + 14;
  *uint64_t result = (char *)this + 176;
  result[1] = (char *)this + 16;
  result[2] = (char *)this + 336;
  result[3] = (char *)this + 480;
  result[4] = (char *)this + 624;
  result[5] = (char *)this + 784;
  result[6] = (char *)this + 928;
  result[7] = (char *)this + 1072;
  result[8] = (char *)this + 1232;
  result[9] = (char *)this + 1712;
  result[10] = (char *)this + 1856;
  result[11] = (char *)this + 2144;
  result[12] = (char *)this + 2000;
  result[13] = (char *)this + 1392;
  *a2 = result;
  a2[1] = result + 14;
  return result;
}

uint64_t quasar::PDecForceAlignBlock::init(quasar::PDecForceAlignBlock *this)
{
  uint64_t v2 = (void *)((char *)this + 184);
  uint64_t v3 = quasar::OptionValue<std::string>::value((void *)this + 23);
  int v4 = *(char *)(v3 + 23);
  if (v4 < 0)
  {
    if (*(void *)(v3 + 8) != 5) {
      goto LABEL_10;
    }
    uint64_t v3 = *(void *)v3;
  }
  else if (v4 != 5)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v3 != 1684824427 || *(unsigned char *)(v3 + 4) != 105)
  {
LABEL_10:
    uint64_t v6 = quasar::OptionValue<std::string>::value(v2);
    int v7 = *(char *)(v6 + 23);
    if (v7 < 0)
    {
      if (*(void *)(v6 + 8) != 8) {
        goto LABEL_30;
      }
      uint64_t v6 = *(void *)v6;
    }
    else if (v7 != 8)
    {
LABEL_30:
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
      uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Unknown model type: ", 20);
      uint64_t v23 = quasar::OptionValue<std::string>::value(v2);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, v23);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v24);
    }
    if (*(void *)v6 != 0x6F73736572707365) {
      goto LABEL_30;
    }
    unint64_t v8 = (long long *)quasar::OptionValue<std::string>::value((void *)this + 3);
    int v9 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((void *)this + 43);
    int v10 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((void *)this + 215);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 310);
    uint64_t v41 = *((void *)this + 309);
    int v42 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    kaldi::quasar::TMTools::GetModel<kaldi::quasar::Encdec>(v8, v9 != 0, v10 != 0, 1u, &v41, (uint64_t *)&v24);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__assign_alt[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::Encdec>,std::shared_ptr<kaldi::quasar::Encdec>>((uint64_t)this + 2416, (uint64_t)this + 2416, (uint64_t)&v24);
    if (*((void *)&v24 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
    }
    uint64_t v12 = v42;
    if (v42) {
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  uint64_t v17 = (long long *)quasar::OptionValue<std::string>::value((void *)this + 3);
  int v18 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((void *)this + 43);
  int v19 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((void *)this + 215);
  uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 310);
  uint64_t v43 = *((void *)this + 309);
  long long v44 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::TMTools::GetModel<kaldi::quasar::TorchEncoderDecoder>(v17, v18 != 0, v19 != 0, &v43, (uint64_t *)&v24);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  std::string::value_type v21 = (quasar::PDecModelVersionChecker *)quasar::PDecModelVersionChecker::PDecModelVersionChecker(&v45, v24);
  quasar::PDecModelVersionChecker::checkVersion(v21, *((_DWORD *)this + 4));
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__assign_alt[abi:ne180100]<0ul,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>&>((uint64_t)this + 2416, (void *)this + 302, (uint64_t *)&v24);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1)) {
LABEL_21:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_22:
  uint64_t v13 = quasar::OptionValue<std::string>::value((void *)this + 155);
  *(void *)&long long v24 = quasar::OptionValue<std::string>::value((void *)this + 195);
  *((void *)&v24 + 1) = v13;
  *(void *)&long long v25 = this;
  uint64_t v14 = *((unsigned int *)this + 608);
  if (v14 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v45 = &v24;
  uint64_t result = ((uint64_t (*)(long long **, char *))off_1F0A63F98[v14])(&v45, (char *)this + 2416);
  *((void *)this + 305) = result;
  *((_DWORD *)this + 612) = v16;
  return result;
}

void sub_1B1B448D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(std::__shared_weak_count **)(v10 - 48);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1B44914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::__shared_weak_count *kaldi::quasar::TMTools::GetModel<kaldi::quasar::TorchEncoderDecoder>@<X0>(long long *a1@<X0>, int a2@<W1>, char a3@<W2>, void *a4@<X4>, uint64_t *a5@<X8>)
{
  if ((a3 & 1) == 0)
  {
    std::allocate_shared[abi:ne180100]<kaldi::quasar::TorchEncoderDecoder,std::allocator<kaldi::quasar::TorchEncoderDecoder>,std::string const&,BOOL &,BOOL &,void>(a5);
    kaldi::quasar::TorchEncoderDecoder::Read(*a5, (uint64_t)a1, a2);
  }
  if (*a4) {
    kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::TorchEncoderDecoder>();
  }
  unint64_t v8 = (uint64_t **)kaldi::quasar::TorchEncoderDecoder::ModelFileMap(0);
  uint64_t v13 = a1;
  int v9 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (const void **)a1, (uint64_t)&std::piecewise_construct, &v13);
  *a5 = 0;
  a5[1] = 0;
  uint64_t v10 = (std::__shared_weak_count *)v9[8];
  if (!v10) {
LABEL_12:
  }
    operator new();
  uint64_t result = std::__shared_weak_count::lock(v10);
  a5[1] = (uint64_t)result;
  if (result)
  {
    uint64_t v12 = v9[7];
    *a5 = v12;
    if (!v12)
    {
LABEL_10:
      if (result) {
        std::__shared_weak_count::__release_shared[abi:ne180100](result);
      }
      goto LABEL_12;
    }
  }
  else if (!*a5)
  {
    goto LABEL_10;
  }
  return result;
}

void sub_1B1B44AC4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40C769EB58);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *kaldi::quasar::TMTools::GetModel<kaldi::quasar::Encdec>@<X0>(long long *a1@<X0>, int a2@<W1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  unsigned __int8 v15 = a3;
  unsigned __int8 v14 = a4;
  if (a3)
  {
    if (*a5) {
      kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::Encdec>();
    }
    uint64_t v10 = (uint64_t **)kaldi::quasar::Encdec::ModelFileMap(0);
    int v16 = a1;
    uint64_t v11 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (const void **)a1, (uint64_t)&std::piecewise_construct, &v16);
    *a6 = 0;
    a6[1] = 0;
    uint64_t v12 = (std::__shared_weak_count *)v11[8];
    if (!v12) {
LABEL_12:
    }
      operator new();
    uint64_t result = std::__shared_weak_count::lock(v12);
    a6[1] = (uint64_t)result;
    if (result)
    {
      uint64_t v13 = v11[7];
      *a6 = v13;
      if (!v13)
      {
LABEL_10:
        if (result) {
          std::__shared_weak_count::__release_shared[abi:ne180100](result);
        }
        goto LABEL_12;
      }
    }
    else if (!*a6)
    {
      goto LABEL_10;
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<kaldi::quasar::Encdec,std::allocator<kaldi::quasar::Encdec>,std::string const&,BOOL &,BOOL &,void>((uint64_t)a1, &v14, &v15, a6);
    return (std::__shared_weak_count *)kaldi::quasar::Encdec::Read(*a6, (uint64_t)a1, a2);
  }
  return result;
}

void sub_1B1B44CC4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B2C40E49A1260);
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v3 = v2;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, v3);
}

uint64_t virtual thunk to'quasar::PDecForceAlignBlock::init(quasar::PDecForceAlignBlock *this)
{
  return quasar::PDecForceAlignBlock::init((quasar::PDecForceAlignBlock *)((char *)this
                                                                         + *(void *)(*(void *)this - 88)));
}

void quasar::PDecForceAlignBlock::processBody(quasar::PDecForceAlignBlock *this)
{
  uint64_t v1 = this;
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (quasar::PDecForceAlignBlock *)((char *)this + 2304);
  Value = (void *)quasar::ProcessingInput::getValue((quasar::PDecForceAlignBlock *)((char *)this + 2304));
  if (*Value == Value[1])
  {
    long long v144 = 0u;
    long long v145 = 0u;
    long long v142 = 0u;
    long long v143 = 0u;
    long long v140 = 0u;
    long long v141 = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    *(_OWORD *)long long v129 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v129);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v129, "PDecForceAlignBlock 'source' input must not be empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v129);
  }
  __p[0] = 0;
  __p[1] = 0;
  long long v128 = 0;
  uint64_t v124 = 0;
  long long v125 = 0;
  unint64_t v126 = 0;
  uint64_t v4 = quasar::ProcessingInput::getValue(v2);
  uint64_t v6 = *(void *)(*(void *)v4 + 136);
  for (uint64_t i = *(void *)(*(void *)v4 + 144); v6 != i; v6 += 136)
  {
    int v7 = v125;
    if ((unint64_t)v125 >= v126)
    {
      int v9 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v124, (long long *)v6);
    }
    else
    {
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v125, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
      }
      else
      {
        long long v8 = *(_OWORD *)v6;
        v125->__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      int v9 = v7 + 1;
    }
    long long v125 = v9;
    if (*(_DWORD *)(v6 + 64) == -1 && *(unsigned char *)quasar::OptionValue<BOOL>::value((void *)v1 + 233))
    {
      long long v144 = 0u;
      long long v145 = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      long long v140 = 0u;
      long long v141 = 0u;
      long long v138 = 0u;
      long long v139 = 0u;
      long long v136 = 0u;
      long long v137 = 0u;
      long long v134 = 0u;
      long long v135 = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      long long v130 = 0u;
      long long v131 = 0u;
      *(_OWORD *)long long v129 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v129);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"Option 'use-sentencepiece-ids' require vocabulary IDs set in 'input phrase'.", 76);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v129);
    }
    uint64_t v10 = (char *)__p[1];
    if (__p[1] >= v128)
    {
      uint64_t v12 = (char *)__p[0];
      int64_t v13 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v128 - (char *)__p[0];
      if ((v128 - (char *)__p[0]) >> 1 > v14) {
        unint64_t v14 = v15 >> 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v128, v16);
        uint64_t v12 = (char *)__p[0];
        uint64_t v10 = (char *)__p[1];
      }
      else
      {
        uint64_t v17 = 0;
      }
      int v18 = &v17[4 * v13];
      *(_DWORD *)int v18 = *(_DWORD *)(v6 + 64);
      uint64_t v11 = v18 + 4;
      while (v10 != v12)
      {
        int v19 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v18 - 1) = v19;
        v18 -= 4;
      }
      __p[0] = v18;
      __p[1] = v11;
      long long v128 = &v17[4 * v16];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_DWORD *)__p[1] = *(_DWORD *)(v6 + 64);
      uint64_t v11 = v10 + 4;
    }
    __p[1] = v11;
  }
  memset(&v123, 0, sizeof(v123));
  uint64_t v20 = (void *)((char *)v1 + 1864);
  if (!*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)v1 + 233))
  {
    v103[0].__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
    v103[0].__r_.__value_.__l.__size_ = 1;
    quasar::join<std::vector<std::string>>(&v124, (uint64_t *)v103);
    uint64_t v25 = quasar::OptionValue<std::string>::value((void *)v1 + 135);
    uint64_t v26 = quasar::OptionValue<std::string>::value((void *)v1 + 155);
    kaldi::quasar::MultiLangDecorator::Apply((uint64_t)v1 + 2440, (uint64_t)v129, v25, v26, v103);
    std::string::basic_string[abi:ne180100]<0>(&v118, " ");
    quasar::split((uint64_t)v103, (uint64_t *)&v118, 0, (unint64_t)&v121);
  }
  uint64_t v21 = *((unsigned int *)v1 + 608);
  if (v21 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  v103[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
  uint64_t v22 = ((uint64_t (*)(std::string *, char *))off_1F0A63FA8[v21])(v103, (char *)v1 + 2416);
  uint64_t v23 = quasar::OptionValue<std::string>::value((void *)v1 + 135);
  uint64_t v24 = quasar::OptionValue<std::string>::value((void *)v1 + 155);
  kaldi::quasar::MultiLangDecorator::Apply((uint64_t)v1 + 2440, (uint64_t)__p, v23, v24, v22, (uint64_t)v129);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)v129;
  long long v128 = (char *)v130;
  long long v121 = 0uLL;
  unint64_t v122 = 0;
  long long v27 = (void *)quasar::OptionValue<std::string>::value((void *)v1 + 175);
  v129[0] = v27;
  uint64_t v28 = *((unsigned int *)v1 + 608);
  if (v28 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  int v91 = v27;
  v103[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
  uint64_t v97 = (uint64_t *)((char *)v1 + 2416);
  ((void (*)(std::string *))off_1F0A63FB8[v28])(v103);
  unint64_t v29 = 0;
  uint64_t v99 = (void *)((char *)v1 + 632);
  int v100 = (quasar::PDecForceAlignBlock *)((char *)v1 + 2360);
  unint64_t v89 = (void *)((char *)v1 + 936);
  unint64_t v90 = (void *)((char *)v1 + 792);
  unint64_t v95 = (void *)((char *)v1 + 2152);
  std::vector<int>::pointer v96 = (void *)((char *)v1 + 488);
  int v93 = (void *)((char *)v1 + 1560);
  int v94 = (void *)((char *)v1 + 2008);
  float v92 = (void *)((char *)v1 + 1240);
  while (1)
  {
    unint64_t v30 = *(int *)quasar::OptionValue<int>::value(v96);
    long long v31 = (void *)quasar::ProcessingInput::getValue(v100);
    unint64_t v32 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v31[1] - *v31) >> 3);
    if (v32 >= v30) {
      unint64_t v32 = v30;
    }
    if (v32 <= v29) {
      break;
    }
    unint64_t v98 = v29;
    long long v33 = (const quasar::TranslationPhraseInternal *)(*(void *)quasar::ProcessingInput::getValue(v100) + 200 * v29);
    long long v118 = 0;
    long long v119 = 0;
    unint64_t v120 = 0;
    uint64_t v115 = 0;
    long long v116 = 0;
    long long v117 = 0;
    uint64_t v34 = *((void *)v33 + 17);
    uint64_t v35 = *((void *)v33 + 18);
    while (v34 != v35)
    {
      long long v36 = v119;
      if ((unint64_t)v119 >= v120)
      {
        long long v38 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (long long *)v34);
      }
      else
      {
        if (*(char *)(v34 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v119, *(const std::string::value_type **)v34, *(void *)(v34 + 8));
        }
        else
        {
          long long v37 = *(_OWORD *)v34;
          v119->__r_.__value_.__r.__words[2] = *(void *)(v34 + 16);
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
        }
        long long v38 = v36 + 1;
      }
      long long v119 = v38;
      long long v39 = v116;
      if (v116 >= v117)
      {
        uint64_t v41 = (char *)v115;
        uint64_t v42 = (v116 - (unsigned char *)v115) >> 2;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v44 = v117 - (unsigned char *)v115;
        if ((v117 - (unsigned char *)v115) >> 1 > v43) {
          unint64_t v43 = v44 >> 1;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45)
        {
          unint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v117, v45);
          uint64_t v41 = (char *)v115;
          long long v39 = v116;
        }
        else
        {
          unint64_t v46 = 0;
        }
        long long v47 = &v46[4 * v42];
        *(_DWORD *)long long v47 = *(_DWORD *)(v34 + 64);
        long long v40 = v47 + 4;
        while (v39 != v41)
        {
          int v48 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v47 - 1) = v48;
          v47 -= 4;
        }
        uint64_t v115 = v47;
        long long v116 = v40;
        long long v117 = &v46[4 * v45];
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        *(_DWORD *)long long v116 = *(_DWORD *)(v34 + 64);
        long long v40 = v39 + 4;
      }
      long long v116 = v40;
      if (*(_DWORD *)(v34 + 64) == -1)
      {
        if (*(unsigned char *)quasar::OptionValue<BOOL>::value(v20))
        {
          long long v144 = 0u;
          long long v145 = 0u;
          long long v142 = 0u;
          long long v143 = 0u;
          long long v140 = 0u;
          long long v141 = 0u;
          long long v138 = 0u;
          long long v139 = 0u;
          long long v136 = 0u;
          long long v137 = 0u;
          long long v134 = 0u;
          long long v135 = 0u;
          long long v132 = 0u;
          long long v133 = 0u;
          long long v130 = 0u;
          long long v131 = 0u;
          *(_OWORD *)long long v129 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v129);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"Option 'use-sentencepiece-ids' require vocabulary IDs set in 'input phrase'.", 76);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v129);
        }
      }
      v34 += 136;
    }
    uint64_t v49 = *((void *)&v121 + 1);
    if (*((void *)&v121 + 1) >= v122)
    {
      uint64_t v50 = std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>((uint64_t *)&v121, v33);
    }
    else
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(*((std::string **)&v121 + 1), v33);
      uint64_t v50 = v49 + 200;
    }
    *((void *)&v121 + 1) = v50;
    int v112 = 0;
    int v113 = 0;
    uint64_t v114 = 0;
    memset(v111, 0, sizeof(v111));
    unint64_t v108 = 0;
    unsigned int v109 = 0;
    uint64_t v110 = 0;
    char v107 = 1;
    if (*((_DWORD *)v1 + 608) == 1)
    {
      long long v51 = (unsigned char *)quasar::OptionValue<BOOL>::value(v20);
      uint64_t v52 = *v97;
      if (*v51)
      {
        uint64_t v53 = quasar::OptionValue<std::string>::value(v99);
        int v54 = *(_DWORD *)quasar::OptionValue<int>::value(v90);
        int v55 = *(_DWORD *)quasar::OptionValue<int>::value(v89);
        v129[1] = 0;
        *(void *)&long long v130 = 0;
        v129[0] = &v129[1];
        kaldi::quasar::Encdec::ConstrainSoftmax(v52, v53, v54, v55, (int **)__p, (int **)&v115, v129);
        std::__tree<int>::destroy((uint64_t)v129, (void *)v129[1]);
      }
      else
      {
        uint64_t v58 = quasar::OptionValue<std::string>::value(v99);
        int v59 = *(_DWORD *)quasar::OptionValue<int>::value(v90);
        uint64_t v60 = (int *)quasar::OptionValue<int>::value(v89);
        kaldi::quasar::Encdec::ConstrainSoftmax(v52, v58, v59, *v60, (long long **)&v123, (long long **)&v118);
      }
      char v107 = 0;
    }
    else
    {
      uint64_t v56 = quasar::OptionValue<std::string>::value(v99);
      uint64_t v57 = *(unsigned __int8 *)(v56 + 23);
      if ((v57 & 0x80u) != 0) {
        uint64_t v57 = *(void *)(v56 + 8);
      }
      if (v57 && quasar::gLogLevel >= 2)
      {
        long long v144 = 0u;
        long long v145 = 0u;
        long long v142 = 0u;
        long long v143 = 0u;
        long long v140 = 0u;
        long long v141 = 0u;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v134 = 0u;
        long long v135 = 0u;
        long long v132 = 0u;
        long long v133 = 0u;
        long long v130 = 0u;
        long long v131 = 0u;
        *(_OWORD *)long long v129 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v129);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"Ignoring shortlisting configuration for kaldi models, running with full readout layer", 85);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v129);
      }
    }
    unint64_t v61 = (unsigned int *)v1;
    int v62 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value(v95);
    uint64_t v63 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value(v94);
    uint64_t v64 = quasar::OptionValue<std::string>::value(v93);
    uint64_t v65 = quasar::OptionValue<std::string>::value(v92);
    uint64_t v66 = quasar::OptionValue<std::string>::value(v99);
    char v67 = *(unsigned char *)quasar::OptionValue<BOOL>::value(v20);
    v129[0] = &v123;
    v129[1] = &v118;
    *(void *)&long long v130 = __p;
    *((void *)&v130 + 1) = &v115;
    *(void *)&long long v131 = &v112;
    *((void *)&v131 + 1) = v111;
    *(void *)&long long v132 = &v108;
    BYTE8(v132) = v63;
    BYTE9(v132) = v62;
    *(void *)&long long v133 = v64;
    *((void *)&v133 + 1) = v65;
    *(void *)&long long v134 = &v107;
    BYTE8(v134) = v67;
    *(void *)&long long v135 = v91;
    *((void *)&v135 + 1) = v66;
    uint64_t v68 = v61[608];
    if (v68 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    v103[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
    ((void (*)(std::string *, uint64_t *))off_1F0A63FC8[v68])(v103, v97);
    uint64_t v69 = *((void *)&v121 + 1);
    long long v70 = (float *)v108;
    long long v71 = v109;
    unint64_t v72 = ((char *)v109 - (unsigned char *)v108) >> 2;
    if (v63
       - 0xF0F0F0F0F0F0F0FLL
       * ((uint64_t)(*(void *)(*((void *)&v121 + 1) - 56) - *(void *)(*((void *)&v121 + 1) - 64)) >> 3) != v72
      && quasar::gLogLevel >= 1)
    {
      long long v144 = 0u;
      long long v145 = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      long long v140 = 0u;
      long long v141 = 0u;
      long long v138 = 0u;
      long long v139 = 0u;
      long long v136 = 0u;
      long long v137 = 0u;
      long long v134 = 0u;
      long long v135 = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      long long v130 = 0u;
      long long v131 = 0u;
      *(_OWORD *)long long v129 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v129);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"Inconsistent alignment dimension ", 33);
      uint64_t v73 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" expecting ", 11);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v129);
      long long v70 = (float *)v108;
      long long v71 = v109;
      uint64_t v69 = *((void *)&v121 + 1);
      unint64_t v72 = ((char *)v109 - (unsigned char *)v108) >> 2;
    }
    if (v71 == v70)
    {
      float v76 = 0.0;
    }
    else
    {
      uint64_t v74 = 0;
      unint64_t v75 = v72 - 1;
      if (v72 <= 1) {
        unint64_t v72 = 1;
      }
      float v76 = 0.0;
      do
      {
        float v77 = *v70;
        if (!v63 || v75)
        {
          uint64_t v78 = *(void *)(v69 - 64) + v74;
          *(float *)(v78 + 60) = v77;
          *(float *)(v78 + 96) = *v70;
        }
        float v76 = v76 + v77;
        v74 += 136;
        --v75;
        ++v70;
        --v72;
      }
      while (v72);
    }
    *(float *)(v69 - 200) = v76;
    *(float *)(v69 - 40) = v76;
    if (!v62)
    {
      uint64_t v79 = v61[608];
      if (v79 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      v103[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
      if (((unsigned int (*)(std::string *, uint64_t *))off_1F0A63FD8[v79])(v103, v97))
      {
        quasar::makeNbestElement((uint64_t *)&v112, v111, (unint64_t *)v129);
        memset(v103, 0, 24);
        v104 = v103;
        char v105 = 0;
        v103[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x110uLL);
        v103[0].__r_.__value_.__l.__size_ = v103[0].__r_.__value_.__r.__words[0];
        v103[0].__r_.__value_.__r.__words[2] = v103[0].__r_.__value_.__r.__words[0] + 272;
        v103[0].__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>,kaldi::quasar::TranslationUtil::NbestElement const*,kaldi::quasar::TranslationUtil::NbestElement const*,kaldi::quasar::TranslationUtil::NbestElement*>((uint64_t)&v103[0].__r_.__value_.__r.__words[2], (uint64_t)v129, (uint64_t)&v146, (uint64_t)v103[0].__r_.__value_.__l.__data_);
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v129);
        kaldi::quasar::TranslationUtil::ComputeBackwardAlignments((uint64_t)v103);
        kaldi::quasar::TranslationUtil::MergeAlignments((uint64_t)v103);
        uint64_t v80 = *((void *)&v121 + 1);
        uint64_t v81 = *(void *)(*((void *)&v121 + 1) - 64);
        uint64_t v82 = *(void *)(*((void *)&v121 + 1) - 56);
        if (0xF0F0F0F0F0F0F0F1 * ((v82 - v81) >> 3) != 0xEEEEEEEEEEEEEEEFLL
                                                        * ((uint64_t)(*(void *)(v103[0].__r_.__value_.__r.__words[0] + 8)
                                                                   - *(void *)v103[0].__r_.__value_.__l.__data_) >> 4)
          && quasar::gLogLevel >= 1)
        {
          long long v144 = 0u;
          long long v145 = 0u;
          long long v142 = 0u;
          long long v143 = 0u;
          long long v140 = 0u;
          long long v141 = 0u;
          long long v138 = 0u;
          long long v139 = 0u;
          long long v136 = 0u;
          long long v137 = 0u;
          long long v134 = 0u;
          long long v135 = 0u;
          long long v132 = 0u;
          long long v133 = 0u;
          long long v130 = 0u;
          long long v131 = 0u;
          *(_OWORD *)long long v129 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v129);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"Inconsistent alignment dimension!", 33);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v129);
          uint64_t v80 = *((void *)&v121 + 1);
          uint64_t v81 = *(void *)(*((void *)&v121 + 1) - 64);
          uint64_t v82 = *(void *)(*((void *)&v121 + 1) - 56);
        }
        if (v82 != v81)
        {
          uint64_t v84 = 0;
          unint64_t v85 = 0;
          uint64_t v86 = 32;
          do
          {
            uint64_t v87 = *(void *)v103[0].__r_.__value_.__l.__data_ + v84;
            if (v87 + 88 != v81 + v86)
            {
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v81 + v86), *(char **)(v87 + 88), *(void *)(v87 + 96), (uint64_t)(*(void *)(v87 + 96) - *(void *)(v87 + 88)) >> 2);
              uint64_t v80 = *((void *)&v121 + 1);
            }
            ++v85;
            uint64_t v81 = *(void *)(v80 - 64);
            v84 += 240;
            v86 += 136;
          }
          while (0xF0F0F0F0F0F0F0F1 * ((*(void *)(v80 - 56) - v81) >> 3) > v85);
        }
        v129[0] = v103;
        std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
      }
    }
    quasar::PTree::PTree((quasar::PTree *)v129);
    std::string::basic_string[abi:ne180100]<0>(&v104, (char *)quasar::FORCEALIGN_SOURCE_META);
    int v88 = (quasar::TranslationPhraseInternal **)quasar::ProcessingInput::getValue(v2);
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v101, *v88);
    quasar::PTree::PTree(v103, v101);
    uint64_t v1 = (quasar::PDecForceAlignBlock *)v61;
    quasar::PTree::putChild((uint64_t)v129, (uint64_t)&v104, (uint64_t)v103, 1);
    quasar::PTree::~PTree((quasar::PTree *)v103);
    if (v102 < 0) {
      operator delete(v101[0]);
    }
    if (v106 < 0) {
      operator delete(v104);
    }
    std::string::basic_string[abi:ne180100]<0>(&v104, (char *)quasar::FORCEALIGN_TARGET_META);
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v101, v33);
    quasar::PTree::PTree(v103, v101);
    quasar::PTree::putChild((uint64_t)v129, (uint64_t)&v104, (uint64_t)v103, 1);
    quasar::PTree::~PTree((quasar::PTree *)v103);
    if (v102 < 0) {
      operator delete(v101[0]);
    }
    if (v106 < 0) {
      operator delete(v104);
    }
    quasar::MetaInfo::update((quasar::MetaInfo::Impl **)(*((void *)&v121 + 1) - 8), (const quasar::PTree *)v129);
    quasar::PTree::~PTree((quasar::PTree *)v129);
    if (v108)
    {
      unsigned int v109 = (float *)v108;
      operator delete(v108);
    }
    v129[0] = v111;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
    if (v112)
    {
      int v113 = v112;
      operator delete(v112);
    }
    if (v115)
    {
      long long v116 = (char *)v115;
      operator delete(v115);
    }
    v129[0] = &v118;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
    unint64_t v29 = v98 + 1;
  }
  quasar::ProcessingBlock::send((uint64_t)v1 + *(void *)(*(void *)v1 - 24), (uint64_t)&v121, 0);
  v129[0] = &v121;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  v129[0] = &v123;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  v129[0] = &v124;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1B45CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a69);
  JUMPOUT(0x1B1B45CECLL);
}

void sub_1B1B45D20(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1B45DA8);
}

void sub_1B1B45D30()
{
}

void sub_1B1B45D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  a69 = (uint64_t)&a52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  a69 = (uint64_t)&a55;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  a69 = (uint64_t)&a59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  a69 = (uint64_t)&a62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::MultiLangDecorator::Apply(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a3 + 8);
    }
    if (v12)
    {
      if (kaldi::g_kaldi_verbose_level < 5) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v27 = *(unsigned __int8 *)(a4 + 23);
      if ((v27 & 0x80u) != 0) {
        uint64_t v27 = *(void *)(a4 + 8);
      }
      if (v27) {
        BOOL v28 = kaldi::g_kaldi_verbose_level < 5;
      }
      else {
        BOOL v28 = 1;
      }
      if (v28) {
        goto LABEL_38;
      }
    }
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v37, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"model does not require the use of src/tar tags", 46);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v37);
LABEL_38:
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a6, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    return;
  }
  if (*(_DWORD *)(a1 + 4) == 3)
  {
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    int v9 = *(const void **)a2;
    uint64_t v10 = *(void *)(a2 + 8);
    unint64_t v11 = (v10 - *(void *)a2) >> 2;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a6, v9, v10, v11);
  }
  else
  {
    if (!a5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, "Apply tags to ID sequence require a tag symbol table in MultiLangDecorator!");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
    }
    kaldi::quasar::MultiLangDecorator::GetTags(a1, a3, a4, (uint64_t)v37);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    kaldi::SplitStringToVector(v37, " ", 1, (uint64_t)&v34);
    unint64_t v30 = (char **)a2;
    std::string __p = 0;
    unint64_t v32 = 0;
    unint64_t v33 = 0;
    uint64_t v14 = v34;
    uint64_t v15 = v35;
    if (v34 == v35)
    {
      int v18 = 0;
    }
    else
    {
      do
      {
        int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a5 + 96))(a5, v14) - 1;
        uint64_t v17 = v32;
        if ((unint64_t)v32 >= v33)
        {
          int v19 = (char *)__p;
          int64_t v20 = (v32 - (unsigned char *)__p) >> 2;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v33 - (void)__p;
          if ((uint64_t)(v33 - (void)__p) >> 1 > v21) {
            unint64_t v21 = v22 >> 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v33, v23);
            int v19 = (char *)__p;
            uint64_t v17 = v32;
          }
          else
          {
            uint64_t v24 = 0;
          }
          uint64_t v25 = &v24[4 * v20];
          *(_DWORD *)uint64_t v25 = v16;
          int v18 = v25 + 4;
          while (v17 != v19)
          {
            int v26 = *((_DWORD *)v17 - 1);
            v17 -= 4;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          std::string __p = v25;
          unint64_t v32 = v18;
          unint64_t v33 = (unint64_t)&v24[4 * v23];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v32 = v16;
          int v18 = v17 + 4;
        }
        unint64_t v32 = v18;
        v14 += 24;
      }
      while (v14 != v15);
    }
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    if ((*(_DWORD *)(a1 + 4) | 2) == 2)
    {
      std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)a6, 0, (char *)__p, v18, (v18 - (unsigned char *)__p) >> 2);
      uint64_t v29 = *(void *)(a6 + 8);
    }
    else
    {
      uint64_t v29 = 0;
    }
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)a6, v29, *v30, v30[1], (v30[1] - *v30) >> 2);
    if ((*(_DWORD *)(a1 + 4) - 1) <= 1) {
      std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)a6, *(void *)(a6 + 8), (char *)__p, v32, (v32 - (unsigned char *)__p) >> 2);
    }
    if (__p)
    {
      unint64_t v32 = (char *)__p;
      operator delete(__p);
    }
    std::string __p = &v34;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v37[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37[0].__r_.__value_.__l.__data_);
    }
  }
}

void kaldi::quasar::MultiLangDecorator::Apply(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    uint64_t v16 = *(unsigned __int8 *)(a3 + 23);
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = *(void *)(a3 + 8);
    }
    if (v16)
    {
      if (kaldi::g_kaldi_verbose_level < 5)
      {
LABEL_56:
        if (*(char *)(a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(a5, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          a5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
        }
        return;
      }
    }
    else
    {
      uint64_t v29 = *(unsigned __int8 *)(a4 + 23);
      if ((v29 & 0x80u) != 0) {
        uint64_t v29 = *(void *)(a4 + 8);
      }
      if (v29) {
        BOOL v30 = kaldi::g_kaldi_verbose_level < 5;
      }
      else {
        BOOL v30 = 1;
      }
      if (v30) {
        goto LABEL_56;
      }
    }
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v34, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"model does not require the use of src/tar tags", 46);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v34);
    goto LABEL_56;
  }
  kaldi::quasar::MultiLangDecorator::GetTags(a1, a3, a4, (uint64_t)&v31);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
  int v8 = *(_DWORD *)(a1 + 4);
  if (v8)
  {
    if (v8 == 1)
    {
      uint64_t v12 = v35;
      int v17 = *(char *)(a2 + 23);
      if (v17 >= 0) {
        uint64_t v14 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v14 = *(const std::string::value_type **)a2;
      }
      if (v17 >= 0) {
        uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v15 = *(void *)(a2 + 8);
      }
      goto LABEL_28;
    }
    if (v8 == 2)
    {
      if ((v33 & 0x80u) == 0) {
        int v9 = &v31;
      }
      else {
        int v9 = v31;
      }
      if ((v33 & 0x80u) == 0) {
        uint64_t v10 = v33;
      }
      else {
        uint64_t v10 = v32;
      }
      unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v9, v10);
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
      int v13 = *(char *)(a2 + 23);
      if (v13 >= 0) {
        uint64_t v14 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v14 = *(const std::string::value_type **)a2;
      }
      if (v13 >= 0) {
        uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v15 = *(void *)(a2 + 8);
      }
LABEL_28:
      int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
      int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
      uint64_t v20 = v33;
      uint64_t v21 = v32;
      BOOL v22 = (v33 & 0x80u) != 0;
      if ((v33 & 0x80u) == 0) {
        unint64_t v23 = (const std::string::value_type *)&v31;
      }
      else {
        unint64_t v23 = (const std::string::value_type *)v31;
      }
      goto LABEL_42;
    }
    int v19 = v35;
  }
  else
  {
    if ((v33 & 0x80u) == 0) {
      uint64_t v24 = &v31;
    }
    else {
      uint64_t v24 = v31;
    }
    if ((v33 & 0x80u) == 0) {
      uint64_t v25 = v33;
    }
    else {
      uint64_t v25 = v32;
    }
    int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v24, v25);
    int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" ", 1);
  }
  uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
  uint64_t v21 = *(void *)(a2 + 8);
  BOOL v22 = (v20 & 0x80u) != 0;
  if ((v20 & 0x80u) == 0) {
    unint64_t v23 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v23 = *(const std::string::value_type **)a2;
  }
LABEL_42:
  if (v22) {
    uint64_t v27 = v21;
  }
  else {
    uint64_t v27 = v20;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v23, v27);
  std::stringbuf::str();
  v34[0] = *MEMORY[0x1E4FBA408];
  uint64_t v28 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v34 + *(void *)(v34[0] - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v35[0] = v28;
  v35[1] = MEMORY[0x1E4FBA470] + 16;
  if (v36 < 0) {
    operator delete((void *)v35[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](&v37);
  if ((char)v33 < 0) {
    operator delete(v31);
  }
}

void sub_1B1B4650C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void non-virtual thunk to'quasar::PDecForceAlignBlock::processBody(quasar::PDecForceAlignBlock *this)
{
}

void quasar::PDecForceAlignBlock::setContextProvider(uint64_t a1, void *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  int v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::ConfiguredProcessingBlock<quasar::PDecForceAlignOptions>::setContextProvider(a1, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v6 = *(void *)(*a2 + 16);
  uint64_t v5 = *(void *)(*a2 + 24);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 2472) = v6;
  int v7 = *(std::__shared_weak_count **)(a1 + 2480);
  *(void *)(a1 + 2480) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1B1B465D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ConfiguredProcessingBlock<quasar::PDecForceAlignOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  uint64_t v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      int v7 = (std::__shared_weak_count *)a2[1];
      uint64_t v8 = *a2;
      int v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v10;
  }
  if (v4)
  {
    unint64_t v11 = v4;
    operator delete(v4);
  }
}

void sub_1B1B466C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'quasar::PDecForceAlignBlock::setContextProvider(void *a1, void *a2)
{
}

uint64_t quasar::PDecForceAlignBlock::minConfigVersion(quasar::PDecForceAlignBlock *this)
{
  return 162;
}

uint64_t virtual thunk to'quasar::PDecForceAlignBlock::minConfigVersion(quasar::PDecForceAlignBlock *this)
{
  return 162;
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::PDecForceAlignOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PDecForceAlignOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PDecForceAlignOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::PDecForceAlignBlock::~PDecForceAlignBlock(quasar::PDecForceAlignBlock *this)
{
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 2488));
}

{
  uint64_t v1;
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 2488));
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::PDecForceAlignBlock::blockType(quasar::PDecForceAlignBlock *this)
{
  return "PDecForceAlignBlock";
}

void *quasar::PDecForceAlignBlock::inputs@<X0>(quasar::PDecForceAlignBlock *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *uint64_t result = (char *)this + 2304;
  result[1] = (char *)this + 2360;
  *a2 = result;
  return result;
}

void *non-virtual thunk to'quasar::PDecForceAlignBlock::inputs@<X0>(quasar::PDecForceAlignBlock *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *uint64_t result = (char *)this + 8;
  result[1] = (char *)this + 64;
  *a2 = result;
  return result;
}

void non-virtual thunk to'quasar::PDecForceAlignBlock::~PDecForceAlignBlock(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this + 24);
}

{
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock(this + 24);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::PDecForceAlignBlock::~PDecForceAlignBlock(quasar::PDecForceAlignBlock *this)
{
  uint64_t v2 = (char **)(v1 + 2488);
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v1;
  uint64_t vars8;

  uint64_t v1 = (char **)((char *)this + *(void *)(*(void *)this - 24));
  quasar::ProcessingBlock::~ProcessingBlock(v1 + 311);
  JUMPOUT(0x1B3EA8670);
}

const char *virtual thunk to'quasar::PDecForceAlignBlock::blockType(quasar::PDecForceAlignBlock *this)
{
  return "PDecForceAlignBlock";
}

kaldi::quasar::TranslationUtil::NbestElement *kaldi::quasar::TranslationUtil::NbestElement::NbestElement(kaldi::quasar::TranslationUtil::NbestElement *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(int32x4_t *)((char *)this + 24) = vdupq_n_s32(0x7F800000u);
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 8, "{}");
  *((unsigned char *)this + 88) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((unsigned char *)this + 240) = 0;
  *((void *)this + 31) = (char *)this + 256;
  return this;
}

void sub_1B1B46A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v4 - 240));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void kaldi::quasar::TranslationUtil::PathElement::~PathElement(kaldi::quasar::TranslationUtil::PathElement *this)
{
  uint64_t v2 = (void *)*((void *)this + 26);
  if (v2)
  {
    *((void *)this + 27) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 23);
  if (v3)
  {
    *((void *)this + 24) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 20);
  if (v4)
  {
    *((void *)this + 21) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 17);
  if (v5)
  {
    *((void *)this + 18) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 14);
  if (v6)
  {
    *((void *)this + 15) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 11);
  if (v7)
  {
    *((void *)this + 12) = v7;
    operator delete(v7);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  uint64_t v8 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(kaldi::quasar::TranslationUtil::NbestElement *this)
{
  std::__tree<std::string>::destroy((uint64_t)this + 248, *((char **)this + 32));
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 24);
  if (v3)
  {
    *((void *)this + 25) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 21);
  if (v4)
  {
    *((void *)this + 22) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  uint64_t v5 = (void **)this;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](&v5);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::init(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> &>(uint64_t **a1, void **a2)
{
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = **a1;
  quasar::OptionValue<std::string>::value((void *)(v4 + 632));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SelectModel(a2, v5, v3, (uint64_t *)&v12);
  long long v6 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = 0uLL;
  int v7 = *(std::__shared_weak_count **)(v4 + 2464);
  *(_OWORD *)(v4 + 2456) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    if (v12.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12.__r_.__value_.__l.__size_);
    }
  }
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 3951) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, (const std::string::value_type *)v8[491], v8[492]);
    uint64_t v8 = *a2;
  }
  else
  {
    std::string v12 = *(std::string *)(v8 + 491);
  }
  if (*((char *)v8 + 3975) < 0) {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v8[494], v8[495]);
  }
  else {
    std::string __p = *(std::string *)(v8 + 494);
  }
  uint64_t v9 = kaldi::quasar::ToAddTag((uint64_t)&v12);
  kaldi::quasar::ToTagFormat(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return (v9 << 32) | 1;
}

void sub_1B1B46DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::init(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> &>(std::string::size_type **a1, uint64_t *a2)
{
  std::string::size_type v3 = (*a1)[1];
  std::string::size_type v4 = (*a1)[2];
  std::string::size_type v5 = **a1;
  quasar::OptionValue<std::string>::value((void *)(v4 + 632));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SelectModel(a2, v5, v3, 0, &v12);
  long long v6 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = 0uLL;
  int v7 = *(std::__shared_weak_count **)(v4 + 2464);
  *(_OWORD *)(v4 + 2456) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    if (v12.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12.__r_.__value_.__l.__size_);
    }
  }
  uint64_t v8 = *a2;
  if (*(char *)(*a2 + 2407) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v8 + 2384), *(void *)(v8 + 2392));
    uint64_t v8 = *a2;
  }
  else
  {
    std::string v12 = *(std::string *)(v8 + 2384);
  }
  if (*(char *)(v8 + 2431) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 2408), *(void *)(v8 + 2416));
  }
  else {
    std::string __p = *(std::string *)(v8 + 2408);
  }
  uint64_t v9 = kaldi::quasar::ToAddTag((uint64_t)&v12);
  kaldi::quasar::ToTagFormat(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return (v9 << 32) | 1;
}

void sub_1B1B46F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SelectModel(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = (uint64_t)*a1;
  if (!*(unsigned char *)(v6 + 3924))
  {
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (!v8)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v78, "No tar tag specified but required by model!");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v78, 3);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Select models for ", 18);
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"-", 1);
    int v16 = *(char *)(a3 + 23);
    if (v16 >= 0) {
      uint64_t v17 = a3;
    }
    else {
      uint64_t v17 = *(void *)a3;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v18 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v78);
    uint64_t v6 = (uint64_t)*a1;
  }
  kaldi::quasar::TorchEncoderDecoder::SelectModel((void *)v6, (long long *)a3, a4);
  if (*a4)
  {
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v78, 3);
      int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Selected: ", 10);
      int v20 = *(char *)(a2 + 23);
      if (v20 >= 0) {
        uint64_t v21 = a2;
      }
      else {
        uint64_t v21 = *(void *)a2;
      }
      if (v20 >= 0) {
        uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v22 = *(void *)(a2 + 8);
      }
      unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"-", 1);
      int v25 = *(char *)(a3 + 23);
      if (v25 >= 0) {
        uint64_t v26 = a3;
      }
      else {
        uint64_t v26 = *(void *)a3;
      }
      if (v25 >= 0) {
        uint64_t v27 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v27 = *(void *)(a3 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v78);
    }
    return;
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v78, 3);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Models for ", 11);
    int v29 = *(char *)(a2 + 23);
    if (v29 >= 0) {
      uint64_t v30 = a2;
    }
    else {
      uint64_t v30 = *(void *)a2;
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v31 = *(void *)(a2 + 8);
    }
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    unsigned __int8 v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-", 1);
    int v34 = *(char *)(a3 + 23);
    if (v34 >= 0) {
      uint64_t v35 = a3;
    }
    else {
      uint64_t v35 = *(void *)a3;
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v36 = *(void *)(a3 + 8);
    }
    uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" not found", 10);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v78);
  }
  char v38 = *(unsigned char *)(a2 + 23);
  if (v38 >= 0) {
    int64_t v39 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int64_t v39 = *(void *)(a2 + 8);
  }
  if (v38 >= 0) {
    uint64_t v40 = a2;
  }
  else {
    uint64_t v40 = *(void *)a2;
  }
  uint64_t v41 = (unsigned char *)(v40 + v39);
  if (v39 >= 1)
  {
    uint64_t v42 = (void *)v40;
    do
    {
      unint64_t v43 = memchr(v42, 95, v39);
      if (!v43) {
        break;
      }
      if (*v43 == 95) {
        goto LABEL_61;
      }
      uint64_t v42 = v43 + 1;
      int64_t v39 = v41 - (unsigned char *)v42;
    }
    while (v41 - (unsigned char *)v42 > 0);
  }
  unint64_t v43 = v41;
LABEL_61:
  if (v43 == v41) {
    std::string::size_type v44 = -1;
  }
  else {
    std::string::size_type v44 = (std::string::size_type)&v43[-v40];
  }
  std::string::basic_string(&v77, (const std::string *)a2, 0, v44, (std::allocator<char> *)v78);
  char v45 = *(unsigned char *)(a3 + 23);
  if (v45 >= 0) {
    int64_t v46 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    int64_t v46 = *(void *)(a3 + 8);
  }
  if (v45 >= 0) {
    uint64_t v47 = a3;
  }
  else {
    uint64_t v47 = *(void *)a3;
  }
  int v48 = (unsigned char *)(v47 + v46);
  if (v46 >= 1)
  {
    uint64_t v49 = (void *)v47;
    do
    {
      uint64_t v50 = memchr(v49, 95, v46);
      if (!v50) {
        break;
      }
      if (*v50 == 95) {
        goto LABEL_76;
      }
      uint64_t v49 = v50 + 1;
      int64_t v46 = v48 - (unsigned char *)v49;
    }
    while (v48 - (unsigned char *)v49 > 0);
  }
  uint64_t v50 = v48;
LABEL_76:
  if (v50 == v48) {
    std::string::size_type v51 = -1;
  }
  else {
    std::string::size_type v51 = (std::string::size_type)&v50[-v47];
  }
  std::string::basic_string(&__p, (const std::string *)a3, 0, v51, (std::allocator<char> *)v78);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v78, 3);
    uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Try to find models for ", 23);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v53 = &v77;
    }
    else {
      uint64_t v53 = (std::string *)v77.__r_.__value_.__r.__words[0];
    }
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v77.__r_.__value_.__l.__size_;
    }
    int v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, size);
    uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"-", 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v58 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v58 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)p_p, v58);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v78);
  }
  kaldi::quasar::TorchEncoderDecoder::SelectModel(*a1, (long long *)&__p, (uint64_t *)v78);
  long long v59 = v78[0];
  v78[0] = 0uLL;
  uint64_t v60 = (std::__shared_weak_count *)a4[1];
  *(_OWORD *)a4 = v59;
  if (v60)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    if (*((void *)&v78[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v78[0] + 1));
    }
    if (*a4) {
      goto LABEL_97;
    }
LABEL_117:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
    uint64_t v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Models for ", 11);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v69 = &v77;
    }
    else {
      uint64_t v69 = (std::string *)v77.__r_.__value_.__r.__words[0];
    }
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v70 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v70 = v77.__r_.__value_.__l.__size_;
    }
    long long v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
    unint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"-", 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v73 = &__p;
    }
    else {
      uint64_t v73 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v74 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v74 = __p.__r_.__value_.__l.__size_;
    }
    unint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" not found!", 11);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
  }
  if (!(void)v59) {
    goto LABEL_117;
  }
LABEL_97:
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v78, 3);
    unint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Selected: ", 10);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v62 = &v77;
    }
    else {
      int v62 = (std::string *)v77.__r_.__value_.__r.__words[0];
    }
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v63 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v63 = v77.__r_.__value_.__l.__size_;
    }
    uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
    uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"-", 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v66 = &__p;
    }
    else {
      uint64_t v66 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v67 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v67 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v78);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B474E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1B1B474F0);
}

void sub_1B1B47514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1B1B47524);
}

void sub_1B1B47534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1B1B47540);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SelectModel(uint64_t *a1@<X0>, std::string::size_type a2@<X1>, std::string::size_type a3@<X2>, int a4@<W4>, void *a5@<X8>)
{
  uint64_t v7 = *a1;
  if (!*(void *)(v7 + 408))
  {
    *a5 = 0;
    a5[1] = 0;
    return;
  }
  uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  if (!v9)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v80, "No tar tag specified but required by model!");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v80);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80, 3);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Select models for ", 18);
    int v13 = *(char *)(a2 + 23);
    if (v13 >= 0) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = *(void *)a2;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a2 + 8);
    }
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"-", 1);
    int v18 = *(char *)(a3 + 23);
    if (v18 >= 0) {
      uint64_t v19 = a3;
    }
    else {
      uint64_t v19 = *(void *)a3;
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v20 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80);
    uint64_t v7 = *a1;
  }
  kaldi::quasar::Encdec::SelectModel(v7, a2, a3, a4, a5);
  if (*a5)
  {
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80, 3);
      uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Selected: ", 10);
      int v22 = *(char *)(a2 + 23);
      if (v22 >= 0) {
        uint64_t v23 = a2;
      }
      else {
        uint64_t v23 = *(void *)a2;
      }
      if (v22 >= 0) {
        uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v24 = *(void *)(a2 + 8);
      }
      int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
      uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-", 1);
      int v27 = *(char *)(a3 + 23);
      if (v27 >= 0) {
        uint64_t v28 = a3;
      }
      else {
        uint64_t v28 = *(void *)a3;
      }
      if (v27 >= 0) {
        uint64_t v29 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v29 = *(void *)(a3 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80);
    }
    return;
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80, 3);
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Models for ", 11);
    int v31 = *(char *)(a2 + 23);
    if (v31 >= 0) {
      uint64_t v32 = a2;
    }
    else {
      uint64_t v32 = *(void *)a2;
    }
    if (v31 >= 0) {
      uint64_t v33 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v33 = *(void *)(a2 + 8);
    }
    int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
    uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"-", 1);
    int v36 = *(char *)(a3 + 23);
    if (v36 >= 0) {
      uint64_t v37 = a3;
    }
    else {
      uint64_t v37 = *(void *)a3;
    }
    if (v36 >= 0) {
      uint64_t v38 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v38 = *(void *)(a3 + 8);
    }
    int64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" not found", 10);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80);
  }
  char v40 = *(unsigned char *)(a2 + 23);
  if (v40 >= 0) {
    int64_t v41 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int64_t v41 = *(void *)(a2 + 8);
  }
  if (v40 >= 0) {
    std::string::size_type v42 = a2;
  }
  else {
    std::string::size_type v42 = *(void *)a2;
  }
  unint64_t v43 = (unsigned char *)(v42 + v41);
  if (v41 >= 1)
  {
    std::string::size_type v44 = (void *)v42;
    do
    {
      char v45 = memchr(v44, 95, v41);
      if (!v45) {
        break;
      }
      if (*v45 == 95) {
        goto LABEL_61;
      }
      std::string::size_type v44 = v45 + 1;
      int64_t v41 = v43 - (unsigned char *)v44;
    }
    while (v43 - (unsigned char *)v44 > 0);
  }
  char v45 = v43;
LABEL_61:
  if (v45 == v43) {
    std::string::size_type v46 = -1;
  }
  else {
    std::string::size_type v46 = (std::string::size_type)&v45[-v42];
  }
  std::string::basic_string(&v79, (const std::string *)a2, 0, v46, (std::allocator<char> *)v80);
  char v47 = *(unsigned char *)(a3 + 23);
  if (v47 >= 0) {
    int64_t v48 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    int64_t v48 = *(void *)(a3 + 8);
  }
  if (v47 >= 0) {
    std::string::size_type v49 = a3;
  }
  else {
    std::string::size_type v49 = *(void *)a3;
  }
  uint64_t v50 = (unsigned char *)(v49 + v48);
  if (v48 >= 1)
  {
    std::string::size_type v51 = (void *)v49;
    do
    {
      uint64_t v52 = memchr(v51, 95, v48);
      if (!v52) {
        break;
      }
      if (*v52 == 95) {
        goto LABEL_76;
      }
      std::string::size_type v51 = v52 + 1;
      int64_t v48 = v50 - (unsigned char *)v51;
    }
    while (v50 - (unsigned char *)v51 > 0);
  }
  uint64_t v52 = v50;
LABEL_76:
  if (v52 == v50) {
    std::string::size_type v53 = -1;
  }
  else {
    std::string::size_type v53 = (std::string::size_type)&v52[-v49];
  }
  std::string::basic_string(&__p, (const std::string *)a3, 0, v53, (std::allocator<char> *)v80);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80, 3);
    int v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Try to find models for ", 23);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v55 = &v79;
    }
    else {
      int v55 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v79.__r_.__value_.__l.__size_;
    }
    uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, size);
    std::string::size_type v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"-", 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v60 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v60 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)p_p, v60);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80);
  }
  kaldi::quasar::Encdec::SelectModel(*a1, (std::string::size_type)&v79, (std::string::size_type)&__p, a4, v80);
  long long v61 = v80[0];
  v80[0] = 0uLL;
  int v62 = (std::__shared_weak_count *)a5[1];
  *(_OWORD *)a5 = v61;
  if (v62)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    if (*((void *)&v80[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80[0] + 1));
    }
    if (*a5) {
      goto LABEL_97;
    }
LABEL_117:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::string::size_type v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Models for ", 11);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v71 = &v79;
    }
    else {
      long long v71 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v72 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v72 = v79.__r_.__value_.__l.__size_;
    }
    uint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
    std::string::size_type v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"-", 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v75 = &__p;
    }
    else {
      unint64_t v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v76 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v76 = __p.__r_.__value_.__l.__size_;
    }
    std::string v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" not found!", 11);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v80);
  }
  if (!(void)v61) {
    goto LABEL_117;
  }
LABEL_97:
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80, 3);
    std::string::size_type v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Selected: ", 10);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v64 = &v79;
    }
    else {
      uint64_t v64 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v65 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v65 = v79.__r_.__value_.__l.__size_;
    }
    uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
    std::string::size_type v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"-", 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v68 = &__p;
    }
    else {
      uint64_t v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v69 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B47AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1B1B47AD4);
}

void sub_1B1B47AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1B1B47B08);
}

void sub_1B1B47B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1B1B47B24);
}

void kaldi::quasar::Encdec::SelectModel(uint64_t a1@<X0>, std::string::size_type a2@<X1>, std::string::size_type a3@<X2>, int a4@<W4>, void *a5@<X8>)
{
  v74[27] = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    if (kaldi::quasar::Encdec::SelectSubmodelsToCompile(a1, (const void **)a2, a3))
    {
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v68, 5);
        uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Selected langpair for compilation only: ", 40);
        int v10 = *(char *)(a2 + 23);
        if (v10 >= 0) {
          int v11 = (const std::string::value_type *)a2;
        }
        else {
          int v11 = *(const std::string::value_type **)a2;
        }
        if (v10 >= 0) {
          uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v12 = *(void *)(a2 + 8);
        }
        int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"-", 1);
        int v15 = *(char *)(a3 + 23);
        if (v15 >= 0) {
          uint64_t v16 = a3;
        }
        else {
          uint64_t v16 = *(void *)a3;
        }
        if (v15 >= 0) {
          uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v17 = *(void *)(a3 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v68);
      }
      int v18 = operator new(0x30uLL);
      v18[1] = 0;
      void v18[2] = 0;
      *int v18 = &unk_1F0A627F0;
      v18[4] = 0;
      v18[5] = 0;
      uint64_t v18[3] = 0;
      *a5 = v18 + 3;
      a5[1] = v18;
      return;
    }
    goto LABEL_101;
  }
  uint64_t v19 = *(void *)(a1 + 2240);
  if (v19) {
    kaldi::quasar::Shortlist::LoadLanguagePair(v19);
  }
  if (!kaldi::quasar::Encdec::LoadSubmodels(a1, a2, a3))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v26 = *(std::__shared_weak_count **)(a1 + 192);
      *(void *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0;
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      int v27 = *(std::__shared_weak_count **)(a1 + 224);
      *(void *)(a1 + 216) = 0;
      *(void *)(a1 + 224) = 0;
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      uint64_t v28 = *(std::__shared_weak_count **)(a1 + 240);
      *(void *)(a1 + 232) = 0;
      *(void *)(a1 + 240) = 0;
      if (!v28) {
        goto LABEL_101;
      }
    }
    else
    {
      uint64_t v29 = *(void *)(a1 + 272);
      uint64_t v30 = *(std::__shared_weak_count **)(v29 + 64);
      if (v30 && (uint64_t v30 = std::__shared_weak_count::lock(v30)) != 0) {
        uint64_t v31 = *(void *)(v29 + 56);
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v37 = *(std::__shared_weak_count **)(a1 + 192);
      *(void *)(a1 + 184) = v31;
      *(void *)(a1 + 192) = v30;
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      if (*(void *)(a1 + 312))
      {
        uint64_t v38 = *(void *)(a1 + 296);
        int64_t v39 = *(std::__shared_weak_count **)(v38 + 64);
        if (v39 && (int64_t v39 = std::__shared_weak_count::lock(v39)) != 0) {
          uint64_t v40 = *(void *)(v38 + 56);
        }
        else {
          uint64_t v40 = 0;
        }
        std::string::size_type v60 = *(std::__shared_weak_count **)(a1 + 224);
        *(void *)(a1 + 216) = v40;
        *(void *)(a1 + 224) = v39;
        if (v60) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v60);
        }
      }
      if (!*(void *)(a1 + 336)) {
        goto LABEL_101;
      }
      uint64_t v61 = *(void *)(a1 + 320);
      int v62 = *(std::__shared_weak_count **)(v61 + 64);
      if (v62 && (int v62 = std::__shared_weak_count::lock(v62)) != 0) {
        uint64_t v63 = *(void *)(v61 + 56);
      }
      else {
        uint64_t v63 = 0;
      }
      uint64_t v64 = *(std::__shared_weak_count **)(a1 + 240);
      *(void *)(a1 + 232) = v63;
      *(void *)(a1 + 240) = v62;
      if (!v64) {
        goto LABEL_101;
      }
      uint64_t v28 = v64;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
LABEL_101:
    *a5 = 0;
    a5[1] = 0;
    return;
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, 45, (uint64_t)&v68);
  int v20 = *(char *)(a3 + 23);
  if (v20 >= 0) {
    uint64_t v21 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v21 = *(const std::string::value_type **)a3;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(a3 + 8);
  }
  uint64_t v23 = std::string::append(&v68, v21, v22);
  std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
  v67.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
  char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  *(void *)(a1 + 936) = v24;
  *(void *)(a1 + 944) = v67.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 951) = *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 7);
  *(unsigned char *)(a1 + 959) = v25;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (*(void *)(a1 + 480))
  {
    if (*(unsigned char *)(a1 + 1521))
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v68 = *(std::string *)a2;
      }
    }
    else
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, 45, (uint64_t)&v67);
      int v32 = *(char *)(a3 + 23);
      if (v32 >= 0) {
        uint64_t v33 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v33 = *(const std::string::value_type **)a3;
      }
      if (v32 >= 0) {
        std::string::size_type v34 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v34 = *(void *)(a3 + 8);
      }
      uint64_t v35 = std::string::append(&v67, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
    }
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    int64_t v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 464), (const void **)&v68.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v67);
    std::string::operator=((std::string *)(a1 + 912), (const std::string *)(v41 + 7));
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
  }
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v68, 5);
    std::string::size_type v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Selected and loaded langpair: ", 30);
    int v43 = *(char *)(a2 + 23);
    if (v43 >= 0) {
      uint64_t v44 = a2;
    }
    else {
      uint64_t v44 = *(void *)a2;
    }
    if (v43 >= 0) {
      uint64_t v45 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v45 = *(void *)(a2 + 8);
    }
    std::string::size_type v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
    char v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"-", 1);
    int v48 = *(char *)(a3 + 23);
    if (v48 >= 0) {
      uint64_t v49 = a3;
    }
    else {
      uint64_t v49 = *(void *)a3;
    }
    if (v48 >= 0) {
      uint64_t v50 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v50 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v68);
  }
  std::string::size_type v51 = *(void *)(a1 + 160);
  v68.__r_.__value_.__r.__words[0] = *(void *)(a1 + 152);
  v68.__r_.__value_.__l.__size_ = v51;
  if (v51) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v52 = *(void *)(a1 + 192);
  v68.__r_.__value_.__r.__words[2] = *(void *)(a1 + 184);
  uint64_t v69 = v52;
  if (v52) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v53 = *(void *)(a1 + 224);
  uint64_t v70 = *(void *)(a1 + 216);
  uint64_t v71 = v53;
  if (v53) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v54 = *(void *)(a1 + 240);
  uint64_t v72 = *(void *)(a1 + 232);
  uint64_t v73 = v54;
  if (v54) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
  }
  memset(&v67, 0, sizeof(v67));
  char v66 = 0;
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  v67.__r_.__value_.__l.__size_ = v67.__r_.__value_.__r.__words[0];
  v67.__r_.__value_.__r.__words[2] = v67.__r_.__value_.__r.__words[0] + 64;
  int v55 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf> const*,std::shared_ptr<kaldi::quasar::ComputeEngineItf> const*,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>((uint64_t)&v67.__r_.__value_.__r.__words[2], &v68, v74, v67.__r_.__value_.__l.__data_);
  v67.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
  uint64_t v56 = operator new(0x30uLL);
  *uint64_t v56 = &unk_1F0A62B00;
  v56[1] = 0;
  std::string::size_type v57 = v67.__r_.__value_.__r.__words[2];
  void v56[3] = v67.__r_.__value_.__r.__words[0];
  v56[2] = 0;
  v56[4] = v55;
  v56[5] = v57;
  memset(&v67, 0, sizeof(v67));
  *a5 = v56 + 3;
  a5[1] = v56;
  std::string::size_type v65 = &v67;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  for (uint64_t i = 56; i != -8; i -= 16)
  {
    long long v59 = *(std::__shared_weak_count **)((char *)&v68.__r_.__value_.__l.__data_ + i);
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
  }
}

void sub_1B1B48090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v7 = (char *)result;
  }
  else {
    uint64_t v7 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v7, v8, v5);
  }
  uint64_t v9 = &v7[v5];
  *uint64_t v9 = a2;
  v9[1] = 0;
  return result;
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A627F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A627F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf> const*,std::shared_ptr<kaldi::quasar::ComputeEngineItf> const*,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  std::string::size_type v4 = a4;
  int v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *std::string::size_type v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    int v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    std::string::size_type v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t a1, kaldi::quasar::TorchEncoderDecoder **a2)
{
  return kaldi::quasar::TorchEncoderDecoder::InputSymbols(*a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a2 + 552);
}

void kaldi::quasar::MultiLangDecorator::GetTags(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a1 + 8);
  if ((v8 & 0xFFFFFFFE) == 2)
  {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (v9)
    {
      uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a3 + 8);
      }
      if (v10) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = kaldi::g_kaldi_verbose_level <= -2;
      }
      if (v11) {
        goto LABEL_33;
      }
    }
    else if (kaldi::g_kaldi_verbose_level < -1)
    {
      goto LABEL_33;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"A Both type TagFormat requires non-empty source and target tags", 63);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    int v8 = *(_DWORD *)(a1 + 8);
  }
  if (!v8)
  {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    if (v12) {
      BOOL v13 = 1;
    }
    else {
      BOOL v13 = kaldi::g_kaldi_verbose_level <= -2;
    }
    if (v13)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      goto LABEL_34;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"SrcTag cannot be empty for TagFormat::Src", 41);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    int v8 = *(_DWORD *)(a1 + 8);
  }
  if (v8 != 1) {
    goto LABEL_33;
  }
  uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a3 + 8);
  }
  if (v14) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = kaldi::g_kaldi_verbose_level <= -2;
  }
  if (!v15)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"TarTag cannot be empty for TagFormat::Tar", 41);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    int v8 = *(_DWORD *)(a1 + 8);
LABEL_33:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    switch(v8)
    {
      case 0:
      case 1:
        goto LABEL_34;
      case 2:
        std::operator+<char>();
        uint64_t v21 = std::string::append(&v35, "-");
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v37.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        int v23 = *(char *)(a3 + 23);
        if (v23 >= 0) {
          std::string::size_type v24 = (const std::string::value_type *)a3;
        }
        else {
          std::string::size_type v24 = *(const std::string::value_type **)a3;
        }
        if (v23 >= 0) {
          std::string::size_type v25 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v25 = *(void *)(a3 + 8);
        }
        goto LABEL_51;
      case 3:
        std::operator+<char>();
        uint64_t v26 = std::string::append(&v35, "> <tar-");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v37.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        int v28 = *(char *)(a3 + 23);
        if (v28 >= 0) {
          std::string::size_type v24 = (const std::string::value_type *)a3;
        }
        else {
          std::string::size_type v24 = *(const std::string::value_type **)a3;
        }
        if (v28 >= 0) {
          std::string::size_type v25 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v25 = *(void *)(a3 + 8);
        }
LABEL_51:
        uint64_t v29 = std::string::append(&v37, v24, v25);
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v36.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        uint64_t v31 = std::string::append(&v36, ">");
        std::string::size_type v32 = v31->__r_.__value_.__r.__words[0];
        v38[0] = v31->__r_.__value_.__l.__size_;
        *(void *)((char *)v38 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
        char v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a4 + 23) < 0) {
          operator delete(*(void **)a4);
        }
        uint64_t v34 = v38[0];
        *(void *)a4 = v32;
        *(void *)(a4 + 8) = v34;
        *(void *)(a4 + 15) = *(void *)((char *)v38 + 7);
        *(unsigned char *)(a4 + 23) = v33;
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        int v20 = (void *)v35.__r_.__value_.__r.__words[0];
        break;
      default:
        MEMORY[0x1B3EA7B20](a4, "");
        return;
    }
    goto LABEL_59;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
LABEL_34:
  std::operator+<char>();
  uint64_t v16 = std::string::append(&v36, ">");
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
  v37.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  std::string::size_type v19 = v37.__r_.__value_.__r.__words[0];
  *(void *)a4 = v17;
  *(void *)(a4 + 8) = v19;
  *(void *)(a4 + 15) = *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + 7);
  *(unsigned char *)(a4 + 23) = v18;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    int v20 = (void *)v36.__r_.__value_.__r.__words[0];
LABEL_59:
    operator delete(v20);
  }
}

void sub_1B1B48844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 - 73) < 0) {
    operator delete(*(void **)(v22 - 96));
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t **a1, void **a2)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(const std::string ***a1, uint64_t *a2)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SelectModel(a2, *(void *)(*a1 + 64), *(void *)(*a1 + 72), &v22);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::string::size_type v4 = *a2;
  if (*(unsigned char *)(v3 + 88))
  {
    if (*((unsigned char *)*a2 + 3925))
    {
      kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::TorchEncoderDecoder>((uint64_t)v4, *(uint64_t **)(v3 + 16), *(void **)(v3 + 24), *(void *)(v3 + 32), *(uint64_t **)(v3 + 40), *(void *)(v3 + 48), *(unsigned __int8 *)(v3 + 56), *(unsigned char *)(v3 + 57), **(unsigned char **)(v3 + 80), *(void *)(v3 + 96), 1u);
      return;
    }
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
LABEL_11:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v5);
  }
  if (*((unsigned char *)*a2 + 3925))
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
    goto LABEL_11;
  }
  kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::TorchEncoderDecoder>((uint64_t)v4, *(long long ***)v3, *(long long ***)(v3 + 8), *(void *)(v3 + 32), *(uint64_t **)(v3 + 40), *(void *)(v3 + 48), *(unsigned __int8 *)(v3 + 56), *(unsigned char *)(v3 + 57), **(unsigned char **)(v3 + 80), *(void *)(v3 + 96));
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SelectModel(a2, *(void *)(*a1 + 64), *(void *)(*a1 + 72), 0, &v22);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v4 = *a2;
  if (*(unsigned char *)(v3 + 88))
  {
    if (*(unsigned char *)(*a2 + 2461))
    {
      kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::Encdec>(v4, *(uint64_t **)(v3 + 16), *(void **)(v3 + 24), *(void *)(v3 + 32), *(uint64_t **)(v3 + 40), *(void *)(v3 + 48), *(unsigned __int8 *)(v3 + 56), *(unsigned char *)(v3 + 57), **(unsigned char **)(v3 + 80), *(const std::string **)(v3 + 96), 1u);
      return;
    }
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
LABEL_11:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v5);
  }
  if (*(unsigned char *)(*a2 + 2461))
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
    goto LABEL_11;
  }
  kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::Encdec>(v4, *(long long ***)v3, *(long long ***)(v3 + 8), *(void *)(v3 + 32), *(uint64_t **)(v3 + 40), *(void *)(v3 + 48), *(unsigned __int8 *)(v3 + 56), *(unsigned char *)(v3 + 57), **(unsigned char **)(v3 + 80), *(const std::string **)(v3 + 96));
}

void kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::TorchEncoderDecoder>(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, char a8, char a9, uint64_t a10, unsigned __int8 a11)
{
  unint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  kaldi::JoinVectorToString<int>(a2, " ", (uint64_t)&v89);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
    long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Source symbol sequence : ", 25);
    if (v91 >= 0) {
      long long v19 = (void **)&v89;
    }
    else {
      long long v19 = v89;
    }
    if (v91 >= 0) {
      uint64_t v20 = HIBYTE(v91);
    }
    else {
      uint64_t v20 = v90;
    }
    long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" (length: ", 10);
    uint64_t v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  kaldi::JoinVectorToString<int>(a3, " ", (uint64_t)&v89);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
    int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Target symbol sequence : ", 25);
    if (v91 >= 0) {
      std::string::size_type v24 = (void **)&v89;
    }
    else {
      std::string::size_type v24 = v89;
    }
    if (v91 >= 0) {
      uint64_t v25 = HIBYTE(v91);
    }
    else {
      uint64_t v25 = v90;
    }
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" (length: ", 10);
    long long v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" excluding </s> symbol: ", 24);
    kaldi::quasar::TorchEncoderDecoder::EosTargetId((kaldi::quasar::TorchEncoderDecoder *)a1);
    int v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)")", 1);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  long long v83 = 0u;
  long long v84 = 0u;
  int32x2_t v82 = (int32x2_t)&unk_1F0A51768;
  char v85 = 0;
  kaldi::CuMatrix<float>::Resize(&v82, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
  uint64_t v29 = *a2;
  uint64_t v30 = a2[1];
  uint64_t v31 = v30 - *a2;
  if (v30 != *a2)
  {
    uint64_t v32 = 0;
    unint64_t v33 = v31 >> 2;
    uint64_t v34 = (float *)v83;
    if (v33 <= 1) {
      unint64_t v33 = 1;
    }
    uint64_t v35 = 4 * (int)v84;
    do
    {
      *uint64_t v34 = (float)(*(_DWORD *)(v29 + 4 * v32++) + a11 - 1);
      uint64_t v34 = (float *)((char *)v34 + v35);
    }
    while (v33 != v32);
  }
  if (a9) {
    std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(a1 + 3664), 0);
  }
  kaldi::quasar::TorchEncoderDecoder::ResetHistoryState((kaldi::quasar::TorchEncoderDecoder *)a1, 1);
  kaldi::quasar::TorchEncoderDecoder::Start((void *)a1, _CLOCK_MONOTONIC_RAW, a10);
  kaldi::quasar::TorchEncoderDecoder::StartFeedforward(a1, (uint64_t)&v82, 0, 0);
  long long v79 = 0u;
  long long v80 = 0u;
  int32x2_t v78 = (int32x2_t)&unk_1F0A51768;
  char v81 = 0;
  kaldi::CuMatrix<float>::CuMatrix(&v76, 1, 1, 0, 0, 0);
  int v36 = kaldi::quasar::TorchEncoderDecoder::BosTargetId((kaldi::quasar::TorchEncoderDecoder *)a1);
  *std::string v77 = (float)(v36 - 1);
  if (a3[1] - *a3 != -4)
  {
    unint64_t v37 = 0;
    do
    {
      float v38 = *v77;
      kaldi::quasar::TorchEncoderDecoder::Feedforward(a1, &v76, &v78, 0);
      if (v37 >= (uint64_t)(a3[1] - *a3) >> 2) {
        uint64_t v39 = kaldi::quasar::TorchEncoderDecoder::EosTargetId((kaldi::quasar::TorchEncoderDecoder *)a1)
      }
            - 1;
      else {
        uint64_t v39 = *(_DWORD *)(*a3 + 4 * v37) + a11 - 1;
      }
      *std::string v77 = (float)(int)v39;
      if (a6)
      {
        if (v39 != kaldi::quasar::TorchEncoderDecoder::EosTargetId((kaldi::quasar::TorchEncoderDecoder *)a1)
                          - 1
          || a7 != 0)
        {
          int SoftmaxIdx = v39;
          if (*(void *)(a1 + 3664)) {
            int SoftmaxIdx = kaldi::quasar::TorchEncoderDecoder::GetSoftmaxIdx((kaldi::quasar::Shortlist **)a1, v39);
          }
          float v43 = *(float *)(v79 + 4 * SoftmaxIdx);
          int Type = quasar::getType((quasar *)a1, v40);
          float v45 = logf(v43);
          if (!Type) {
            float v45 = v43;
          }
          float v46 = -v45;
          int v48 = *(float **)(a6 + 8);
          unint64_t v47 = *(void *)(a6 + 16);
          if ((unint64_t)v48 >= v47)
          {
            uint64_t v50 = *(float **)a6;
            uint64_t v51 = ((uint64_t)v48 - *(void *)a6) >> 2;
            unint64_t v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v53 = v47 - (void)v50;
            if (v53 >> 1 > v52) {
              unint64_t v52 = v53 >> 1;
            }
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v54 = v52;
            }
            if (v54)
            {
              int v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a6 + 16, v54);
              uint64_t v50 = *(float **)a6;
              int v48 = *(float **)(a6 + 8);
            }
            else
            {
              int v55 = 0;
            }
            uint64_t v56 = (float *)&v55[4 * v51];
            *uint64_t v56 = v46;
            uint64_t v49 = v56 + 1;
            while (v48 != v50)
            {
              int v57 = *((_DWORD *)v48-- - 1);
              *((_DWORD *)v56-- - 1) = v57;
            }
            *(void *)a6 = v56;
            *(void *)(a6 + 8) = v49;
            *(void *)(a6 + 16) = &v55[4 * v54];
            if (v50) {
              operator delete(v50);
            }
          }
          else
          {
            *int v48 = v46;
            uint64_t v49 = v48 + 1;
          }
          *(void *)(a6 + 8) = v49;
        }
      }
      if (*(unsigned char *)(a1 + 3923))
      {
        int v58 = kaldi::quasar::TorchEncoderDecoder::BosTargetId((kaldi::quasar::TorchEncoderDecoder *)a1);
        int v59 = (int)v38 + 1;
      }
      else
      {
        int v58 = kaldi::quasar::TorchEncoderDecoder::EosTargetId((kaldi::quasar::TorchEncoderDecoder *)a1);
        int v59 = v39 + 1;
      }
      if (v59 != v58 && (a8 & 1) == 0)
      {
        if (*(unsigned char *)(a1 + 3922))
        {
          int BestAlignment = kaldi::quasar::TorchEncoderDecoder::GetBestAlignment((kaldi::quasar::TorchEncoderDecoder *)a1, 0);
          int v61 = BestAlignment;
          uint64_t v63 = *(_DWORD **)(a4 + 8);
          unint64_t v62 = *(void *)(a4 + 16);
          if ((unint64_t)v63 >= v62)
          {
            std::string::size_type v65 = *(_DWORD **)a4;
            uint64_t v66 = ((uint64_t)v63 - *(void *)a4) >> 2;
            unint64_t v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v68 = v62 - (void)v65;
            if (v68 >> 1 > v67) {
              unint64_t v67 = v68 >> 1;
            }
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v69 = v67;
            }
            if (v69)
            {
              uint64_t v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v69);
              std::string::size_type v65 = *(_DWORD **)a4;
              uint64_t v63 = *(_DWORD **)(a4 + 8);
            }
            else
            {
              uint64_t v70 = 0;
            }
            uint64_t v71 = &v70[4 * v66];
            *(_DWORD *)uint64_t v71 = v61;
            uint64_t v64 = v71 + 4;
            while (v63 != v65)
            {
              int v72 = *--v63;
              *((_DWORD *)v71 - 1) = v72;
              v71 -= 4;
            }
            *(void *)a4 = v71;
            *(void *)(a4 + 8) = v64;
            *(void *)(a4 + 16) = &v70[4 * v69];
            if (v65) {
              operator delete(v65);
            }
          }
          else
          {
            *uint64_t v63 = BestAlignment;
            uint64_t v64 = v63 + 1;
          }
          *(void *)(a4 + 8) = v64;
          std::string __p = 0;
          uint64_t v87 = 0;
          uint64_t v88 = 0;
          kaldi::quasar::TorchEncoderDecoder::GetAlignmentProbabilities((void *)a1, (uint64_t)&__p, 0);
          unint64_t v73 = a5[1];
          if (v73 >= a5[2])
          {
            uint64_t v74 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a5, (uint64_t)&__p);
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a5, (uint64_t)&__p);
            uint64_t v74 = v73 + 24;
          }
          a5[1] = v74;
          if (__p)
          {
            uint64_t v87 = __p;
            operator delete(__p);
          }
        }
        else if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"model trained with supervised alignment required for alignment", 62);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        }
      }
      ++v37;
    }
    while (((uint64_t)(a3[1] - *a3) >> 2) + 1 > v37);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v76);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v78);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v82);
  if (SHIBYTE(v91) < 0) {
    operator delete(v89);
  }
}

void sub_1B1B492BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (*(char *)(v31 - 105) < 0) {
    operator delete(*(void **)(v31 - 128));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::TorchEncoderDecoder>(uint64_t a1, long long **a2, long long **a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, char a8, char a9, uint64_t a10)
{
  uint64_t v20 = 0;
  long long v21 = 0;
  uint64_t v22 = 0;
  kaldi::quasar::TorchEncoderDecoder::Symbolize(a1, a2, (uint64_t)&v20, 0, 0);
  std::string __p = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  kaldi::quasar::TorchEncoderDecoder::Symbolize(a1, a3, (uint64_t)&__p, 1, 0);
  kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::TorchEncoderDecoder>(a1, (uint64_t *)&v20, &__p, a4, a5, a6, a7, a8, a9, a10, 0);
  if (__p)
  {
    long long v18 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    long long v21 = v20;
    operator delete(v20);
  }
}

void sub_1B1B49458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::JoinVectorToString<int>(void *a1, const char *a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  if (a1[1] != *a1)
  {
    unint64_t v6 = 0;
    do
    {
      std::ostream::operator<<();
      ++v6;
      uint64_t v7 = a1[1] - *a1;
      if (v6 < v7 >> 2)
      {
        size_t v8 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)a2, v8);
        uint64_t v7 = a1[1] - *a1;
      }
    }
    while (v6 < v7 >> 2);
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = v12;
  long long v9 = (void *)MEMORY[0x1E4FBA408];
  *(void *)(a3 + 16) = v13;
  v14[0] = *v9;
  uint64_t v10 = v9[9];
  *(void *)((char *)v14 + *(void *)(v14[0] - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = v9[8];
  v15[0] = v10;
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v17);
}

void sub_1B1B4967C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  void v3[2] = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B1B496E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  char v16 = &v10[24 * v9];
  *(void *)long long v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1B497EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::Encdec>(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, char a8, char a9, const std::string *a10, unsigned __int8 a11)
{
  float v92 = 0;
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  kaldi::JoinVectorToString<int>(a2, " ", (uint64_t)&v92);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Source symbol sequence : ", 25);
    if (v94 >= 0) {
      long long v18 = (void **)&v92;
    }
    else {
      long long v18 = v92;
    }
    if (v94 >= 0) {
      uint64_t v19 = HIBYTE(v94);
    }
    else {
      uint64_t v19 = v93;
    }
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" (length: ", 10);
    long long v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)")", 1);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  kaldi::JoinVectorToString<int>(a3, " ", (uint64_t)&v92);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Target symbol sequence : ", 25);
    if (v94 >= 0) {
      int v23 = (void **)&v92;
    }
    else {
      int v23 = v92;
    }
    if (v94 >= 0) {
      uint64_t v24 = HIBYTE(v94);
    }
    else {
      uint64_t v24 = v93;
    }
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" (length: ", 10);
    uint64_t v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" excluding </s> symbol: ", 24);
    long long v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)")", 1);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  long long v86 = 0u;
  long long v87 = 0u;
  int32x2_t v85 = (int32x2_t)&unk_1F0A51768;
  char v88 = 0;
  kaldi::CuMatrix<float>::Resize(&v85, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
  uint64_t v28 = *a2;
  uint64_t v29 = a2[1];
  uint64_t v30 = v29 - *a2;
  if (v29 != *a2)
  {
    uint64_t v31 = 0;
    unint64_t v32 = v30 >> 2;
    unint64_t v33 = (float *)v86;
    if (v32 <= 1) {
      unint64_t v32 = 1;
    }
    uint64_t v34 = 4 * (int)v87;
    do
    {
      *unint64_t v33 = (float)(*(_DWORD *)(v28 + 4 * v31++) + a11 - 1);
      unint64_t v33 = (float *)((char *)v33 + v34);
    }
    while (v32 != v31);
  }
  if (a9)
  {
    *(unsigned char *)(a1 + 1509) = 0;
    std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(a1 + 2248), 0);
  }
  kaldi::quasar::Encdec::ResetHistoryState((kaldi::quasar::Encdec *)a1);
  kaldi::quasar::Encdec::Start(a1, 4, a10);
  kaldi::quasar::Encdec::StartFeedforward(a1, (uint64_t)&v85, 0, 0);
  long long v82 = 0u;
  long long v83 = 0u;
  int32x2_t v81 = (int32x2_t)&unk_1F0A51768;
  char v84 = 0;
  kaldi::CuMatrix<float>::CuMatrix(&v79, 1, 1, 0, 0, 0);
  *long long v80 = (float)(*(_DWORD *)(a1 + 824) - 1);
  if (a3[1] - *a3 != -4)
  {
    unint64_t v35 = 0;
    int v36 = (int *)(a1 + 828);
    do
    {
      float v37 = *v80;
      kaldi::quasar::Encdec::Feedforward(a1, (uint64_t)&v79, &v81);
      unint64_t v38 = (uint64_t)(a3[1] - *a3) >> 2;
      BOOL v39 = v38 > v35;
      if (v38 > v35) {
        float v40 = (_DWORD *)(*a3 + 4 * v35);
      }
      else {
        float v40 = (_DWORD *)(a1 + 828);
      }
      if (v39) {
        int v41 = a11 ^ 1;
      }
      else {
        int v41 = 1;
      }
      uint64_t v42 = (*v40 - v41);
      *long long v80 = (float)(int)v42;
      if (a6)
      {
        if (v42 != *v36 - 1 || a7 != 0)
        {
          if (*(unsigned char *)(a1 + 1509)) {
            int SoftmaxIdx = kaldi::quasar::Encdec::GetSoftmaxIdx((kaldi::quasar::Shortlist **)a1, v42);
          }
          else {
            int SoftmaxIdx = v42;
          }
          float v45 = *(float *)(v82 + 4 * SoftmaxIdx);
          int v46 = *(unsigned __int8 *)(a1 + 1519);
          float v47 = logf(v45);
          if (!v46) {
            float v47 = v45;
          }
          float v48 = -v47;
          uint64_t v50 = *(float **)(a6 + 8);
          unint64_t v49 = *(void *)(a6 + 16);
          if ((unint64_t)v50 >= v49)
          {
            unint64_t v52 = *(float **)a6;
            uint64_t v53 = ((uint64_t)v50 - *(void *)a6) >> 2;
            unint64_t v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v55 = v49 - (void)v52;
            if (v55 >> 1 > v54) {
              unint64_t v54 = v55 >> 1;
            }
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v56 = v54;
            }
            if (v56)
            {
              int v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a6 + 16, v56);
              unint64_t v52 = *(float **)a6;
              uint64_t v50 = *(float **)(a6 + 8);
            }
            else
            {
              int v57 = 0;
            }
            int v58 = (float *)&v57[4 * v53];
            *int v58 = v48;
            uint64_t v51 = v58 + 1;
            while (v50 != v52)
            {
              int v59 = *((_DWORD *)v50-- - 1);
              *((_DWORD *)v58-- - 1) = v59;
            }
            *(void *)a6 = v58;
            *(void *)(a6 + 8) = v51;
            *(void *)(a6 + 16) = &v57[4 * v56];
            if (v52) {
              operator delete(v52);
            }
          }
          else
          {
            *uint64_t v50 = v48;
            uint64_t v51 = v50 + 1;
          }
          *(void *)(a6 + 8) = v51;
        }
      }
      if (*(unsigned char *)(a1 + 2165))
      {
        int v60 = (int)v37 + 1;
        int v61 = *(_DWORD *)(a1 + 824);
      }
      else
      {
        int v60 = v42 + 1;
        int v61 = *v36;
      }
      if (v60 != v61 && (a8 & 1) == 0)
      {
        if (*(unsigned char *)(a1 + 2164))
        {
          unint64_t v62 = *(int **)(a1 + 2168);
          if (v62 == *(int **)(a1 + 2176)) {
            int v63 = -1;
          }
          else {
            int v63 = *v62;
          }
          std::string::size_type v65 = *(int **)(a4 + 8);
          unint64_t v64 = *(void *)(a4 + 16);
          if ((unint64_t)v65 >= v64)
          {
            unint64_t v67 = *(int **)a4;
            uint64_t v68 = ((uint64_t)v65 - *(void *)a4) >> 2;
            unint64_t v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v70 = v64 - (void)v67;
            if (v70 >> 1 > v69) {
              unint64_t v69 = v70 >> 1;
            }
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v71 = v69;
            }
            if (v71)
            {
              int v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v71);
              unint64_t v67 = *(int **)a4;
              std::string::size_type v65 = *(int **)(a4 + 8);
            }
            else
            {
              int v72 = 0;
            }
            unint64_t v73 = (int *)&v72[4 * v68];
            int *v73 = v63;
            uint64_t v66 = v73 + 1;
            while (v65 != v67)
            {
              int v74 = *--v65;
              *--unint64_t v73 = v74;
            }
            *(void *)a4 = v73;
            *(void *)(a4 + 8) = v66;
            *(void *)(a4 + 16) = &v72[4 * v71];
            if (v67) {
              operator delete(v67);
            }
          }
          else
          {
            *std::string::size_type v65 = v63;
            uint64_t v66 = v65 + 1;
          }
          *(void *)(a4 + 8) = v66;
          std::string __p = 0;
          uint64_t v90 = 0;
          uint64_t v91 = 0;
          kaldi::quasar::Encdec::GetAlignmentProbabilities((void *)a1, (uint64_t)&__p, 0);
          unint64_t v75 = a5[1];
          if (v75 >= a5[2])
          {
            uint64_t v76 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a5, (uint64_t)&__p);
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a5, (uint64_t)&__p);
            uint64_t v76 = v75 + 24;
          }
          a5[1] = v76;
          if (__p)
          {
            uint64_t v90 = __p;
            operator delete(__p);
          }
        }
        else if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"model trained with supervised alignment required for alignment", 62);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        }
      }
      ++v35;
    }
    while (((uint64_t)(a3[1] - *a3) >> 2) + 1 > v35);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v79);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v81);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v85);
  if (SHIBYTE(v94) < 0) {
    operator delete(v92);
  }
}

void sub_1B1B49F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (*(char *)(v31 - 105) < 0) {
    operator delete(*(void **)(v31 - 128));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::Encdec>(uint64_t a1, long long **a2, long long **a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, char a8, char a9, const std::string *a10)
{
  uint64_t v20 = 0;
  long long v21 = 0;
  uint64_t v22 = 0;
  kaldi::quasar::Encdec::Symbolize(a1, a2, (uint64_t)&v20, 0, 0);
  std::string __p = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  kaldi::quasar::Encdec::Symbolize(a1, a3, (uint64_t)&__p, 1, 0);
  kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::Encdec>(a1, (uint64_t *)&v20, &__p, a4, a5, a6, a7, a8, a9, a10, 0);
  if (__p)
  {
    long long v18 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    long long v21 = v20;
    operator delete(v20);
  }
}

void sub_1B1B4A0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::quasar::Encdec::GetAlignmentProbabilities(void *result, uint64_t a2, int a3)
{
  int v3 = *((_DWORD *)result + 552);
  if (v3 >= 1)
  {
    uint64_t v5 = result[278];
    v19[1] = result[275] + 4 * *((_DWORD *)result + 554) * a3;
    v19[0] = &unk_1F0A472D0;
    v19[2] = v3;
    v19[3] = v5;
    kaldi::CuVector<float>::CuVector(v20, v19);
    if (v21 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = (void *)(a2 + 16);
      long long v8 = *(_DWORD **)(a2 + 8);
      do
      {
        int v9 = *(_DWORD *)(v20[1] + 4 * v6);
        if ((unint64_t)v8 >= *v7)
        {
          long long v11 = *(_DWORD **)a2;
          uint64_t v12 = ((uint64_t)v8 - *(void *)a2) >> 2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = *v7 - (void)v11;
          if (v14 >> 1 > v13) {
            unint64_t v13 = v14 >> 1;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            char v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v15);
            long long v11 = *(_DWORD **)a2;
            long long v8 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            char v16 = 0;
          }
          uint64_t v17 = &v16[4 * v12];
          *(_DWORD *)uint64_t v17 = v9;
          uint64_t v10 = v17 + 4;
          while (v8 != v11)
          {
            int v18 = *--v8;
            *((_DWORD *)v17 - 1) = v18;
            v17 -= 4;
          }
          *(void *)a2 = v17;
          *(void *)(a2 + 8) = v10;
          *(void *)(a2 + 16) = &v16[4 * v15];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *long long v8 = v9;
          uint64_t v10 = v8 + 1;
        }
        *(void *)(a2 + 8) = v10;
        ++v6;
        long long v8 = v10;
      }
      while (v6 < v21);
    }
    return kaldi::CuVector<float>::~CuVector(v20);
  }
  return result;
}

void sub_1B1B4A28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_3> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(void *)a2 + 3922);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_3> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(void *)a2 + 2164);
}

void quasar::PDecForceAlignBlock::~PDecForceAlignBlock(quasar::PDecForceAlignBlock *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = a2[5];
  *((void *)this + 287) = a2[6];
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 310);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 308);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 2416);
  long long v8 = (void **)((char *)this + 2392);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 2383) < 0) {
    operator delete(*((void **)this + 295));
  }
  long long v8 = (void **)((char *)this + 2336);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 2327) < 0) {
    operator delete(*((void **)this + 288));
  }
  uint64_t v7 = a2[1];
  *(void *)this = v7;
  *(void *)((char *)this + *(void *)(v7 - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = a2[2];
  quasar::PDecForceAlignOptions::~PDecForceAlignOptions((quasar::PDecForceAlignBlock *)((char *)this + 8));
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F0A63FE8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10shared_ptrIN5kaldi6quasar19TorchEncoderDecoderEEENS8_INSA_6EncdecEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10shared_ptrIN5kaldi6quasar19TorchEncoderDecoderEEENS8_INSA_6EncdecEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void quasar::PDecForceAlignOptions::~PDecForceAlignOptions(quasar::PDecForceAlignOptions *this)
{
  *(void *)this = &unk_1F0A55C98;
  *((void *)this + 268) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 2264, *((char **)this + 284));
  *((void *)this + 268) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 280);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 2223) < 0) {
    operator delete(*((void **)this + 275));
  }
  if (*((char *)this + 2199) < 0) {
    operator delete(*((void **)this + 272));
  }
  if (*((char *)this + 2175) < 0) {
    operator delete(*((void **)this + 269));
  }
  *((void *)this + 250) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 2120, *((char **)this + 266));
  *((void *)this + 250) = &unk_1F0A52FB8;
  int v3 = (std::__shared_weak_count *)*((void *)this + 262);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 2079) < 0) {
    operator delete(*((void **)this + 257));
  }
  if (*((char *)this + 2055) < 0) {
    operator delete(*((void **)this + 254));
  }
  if (*((char *)this + 2031) < 0) {
    operator delete(*((void **)this + 251));
  }
  *((void *)this + 232) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 1976, *((char **)this + 248));
  *((void *)this + 232) = &unk_1F0A52FB8;
  char v4 = (std::__shared_weak_count *)*((void *)this + 244);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 1935) < 0) {
    operator delete(*((void **)this + 239));
  }
  if (*((char *)this + 1911) < 0) {
    operator delete(*((void **)this + 236));
  }
  if (*((char *)this + 1887) < 0) {
    operator delete(*((void **)this + 233));
  }
  *((void *)this + 214) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 1832, *((char **)this + 230));
  *((void *)this + 214) = &unk_1F0A52FB8;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 226);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 1791) < 0) {
    operator delete(*((void **)this + 221));
  }
  if (*((char *)this + 1767) < 0) {
    operator delete(*((void **)this + 218));
  }
  if (*((char *)this + 1743) < 0) {
    operator delete(*((void **)this + 215));
  }
  *((void *)this + 194) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1688, *((void **)this + 212));
  if (*((char *)this + 1679) < 0) {
    operator delete(*((void **)this + 207));
  }
  *((void *)this + 194) = &unk_1F0A52FB8;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 206);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 1631) < 0) {
    operator delete(*((void **)this + 201));
  }
  if (*((char *)this + 1607) < 0) {
    operator delete(*((void **)this + 198));
  }
  if (*((char *)this + 1583) < 0) {
    operator delete(*((void **)this + 195));
  }
  *((void *)this + 174) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1528, *((void **)this + 192));
  if (*((char *)this + 1519) < 0) {
    operator delete(*((void **)this + 187));
  }
  *((void *)this + 174) = &unk_1F0A52FB8;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 186);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((char *)this + 1471) < 0) {
    operator delete(*((void **)this + 181));
  }
  if (*((char *)this + 1447) < 0) {
    operator delete(*((void **)this + 178));
  }
  if (*((char *)this + 1423) < 0) {
    operator delete(*((void **)this + 175));
  }
  *((void *)this + 154) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1368, *((void **)this + 172));
  if (*((char *)this + 1359) < 0) {
    operator delete(*((void **)this + 167));
  }
  *((void *)this + 154) = &unk_1F0A52FB8;
  long long v8 = (std::__shared_weak_count *)*((void *)this + 166);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*((char *)this + 1311) < 0) {
    operator delete(*((void **)this + 161));
  }
  if (*((char *)this + 1287) < 0) {
    operator delete(*((void **)this + 158));
  }
  if (*((char *)this + 1263) < 0) {
    operator delete(*((void **)this + 155));
  }
  *((void *)this + 134) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1208, *((void **)this + 152));
  if (*((char *)this + 1199) < 0) {
    operator delete(*((void **)this + 147));
  }
  *((void *)this + 134) = &unk_1F0A52FB8;
  int v9 = (std::__shared_weak_count *)*((void *)this + 146);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*((char *)this + 1151) < 0) {
    operator delete(*((void **)this + 141));
  }
  if (*((char *)this + 1127) < 0) {
    operator delete(*((void **)this + 138));
  }
  if (*((char *)this + 1103) < 0) {
    operator delete(*((void **)this + 135));
  }
  *((void *)this + 116) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 1048, *((char **)this + 132));
  *((void *)this + 116) = &unk_1F0A52FB8;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 128);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*((char *)this + 1007) < 0) {
    operator delete(*((void **)this + 123));
  }
  if (*((char *)this + 983) < 0) {
    operator delete(*((void **)this + 120));
  }
  if (*((char *)this + 959) < 0) {
    operator delete(*((void **)this + 117));
  }
  *((void *)this + 98) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 904, *((char **)this + 114));
  *((void *)this + 98) = &unk_1F0A52FB8;
  long long v11 = (std::__shared_weak_count *)*((void *)this + 110);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (*((char *)this + 863) < 0) {
    operator delete(*((void **)this + 105));
  }
  if (*((char *)this + 839) < 0) {
    operator delete(*((void **)this + 102));
  }
  if (*((char *)this + 815) < 0) {
    operator delete(*((void **)this + 99));
  }
  *((void *)this + 78) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 760, *((void **)this + 96));
  if (*((char *)this + 751) < 0) {
    operator delete(*((void **)this + 91));
  }
  *((void *)this + 78) = &unk_1F0A52FB8;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 90);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (*((char *)this + 703) < 0) {
    operator delete(*((void **)this + 85));
  }
  if (*((char *)this + 679) < 0) {
    operator delete(*((void **)this + 82));
  }
  if (*((char *)this + 655) < 0) {
    operator delete(*((void **)this + 79));
  }
  *((void *)this + 60) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  *((void *)this + 60) = &unk_1F0A52FB8;
  unint64_t v13 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  if (*((char *)this + 535) < 0) {
    operator delete(*((void **)this + 64));
  }
  if (*((char *)this + 511) < 0) {
    operator delete(*((void **)this + 61));
  }
  *((void *)this + 42) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 456, *((char **)this + 58));
  *((void *)this + 42) = &unk_1F0A52FB8;
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (*((char *)this + 415) < 0) {
    operator delete(*((void **)this + 49));
  }
  if (*((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  if (*((char *)this + 367) < 0) {
    operator delete(*((void **)this + 43));
  }
  *((void *)this + 22) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 312, *((void **)this + 40));
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }
  *((void *)this + 22) = &unk_1F0A52FB8;
  unint64_t v15 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 2) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  *((void *)this + 2) = &unk_1F0A52FB8;
  char v16 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

uint64_t std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(uint64_t *a1, const kaldi::quasar::TranslationUtil::PathElement *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x111111111111111) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x88888888888888) {
    unint64_t v9 = 0x111111111111111;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  uint64_t v14 = (std::string *)&v10[240 * v4];
  char v16 = &v10[240 * v9];
  kaldi::quasar::TranslationUtil::PathElement::PathElement(v14, a2);
  unint64_t v15 = v14 + 10;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1B4AE6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *kaldi::quasar::TranslationUtil::PathElement::PathElement(std::string *this, const kaldi::quasar::TranslationUtil::PathElement *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  int v5 = *((_DWORD *)a2 + 6);
  this[1].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 32), *((long long **)a2 + 4), *((long long **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((void *)a2 + 9);
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v6;
  }
  std::string::size_type v7 = *((void *)a2 + 10);
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__l.__size_ = v7;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[3].__r_.__value_.__r.__words[2], *((const void **)a2 + 11), *((void *)a2 + 12), (uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 2);
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[4].__r_.__value_.__r.__words[2], *((const void **)a2 + 14), *((void *)a2 + 15), (uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 2);
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[5].__r_.__value_.__r.__words[2], *((const void **)a2 + 17), *((void *)a2 + 18), (uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 2);
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__r.__words[0] = 0;
  this[7].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[6].__r_.__value_.__r.__words[2], *((const void **)a2 + 20), *((void *)a2 + 21), (uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 2);
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[8].__r_.__value_.__r.__words[0] = 0;
  this[8].__r_.__value_.__l.__size_ = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[7].__r_.__value_.__r.__words[2], *((const void **)a2 + 23), *((void *)a2 + 24), (uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 2);
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  this[9].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[8].__r_.__value_.__r.__words[2], *((const void **)a2 + 26), *((void *)a2 + 27), (uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 2);
  LODWORD(this[9].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 58);
  return this;
}

void sub_1B1B4B028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void sub_1B1B4B0E0()
{
}

uint64_t std::vector<kaldi::quasar::TranslationUtil::PathElement>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,std::reverse_iterator<kaldi::quasar::TranslationUtil::PathElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::PathElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::PathElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x111111111111112) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(240 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,std::reverse_iterator<kaldi::quasar::TranslationUtil::PathElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::PathElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::PathElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 240;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (std::string *)(v11 + v10);
    v10 -= 240;
    kaldi::quasar::TranslationUtil::PathElement::PathElement(v12, (const kaldi::quasar::TranslationUtil::PathElement *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 240;
    kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(i - 240));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::TorchEncoderDecoder>()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)((unint64_t)off_1F0A2A0E0 & 0x7FFFFFFFFFFFFFFFLL));
  operator new();
}

void sub_1B1B4B388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a9) {
    kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::TorchEncoderDecoder>(a9);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::TorchEncoderDecoder,std::allocator<kaldi::quasar::TorchEncoderDecoder>,std::string const&,BOOL &,BOOL &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x1060uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::TorchEncoderDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<kaldi::quasar::TorchEncoderDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1B4B41C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::TorchEncoderDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<kaldi::quasar::TorchEncoderDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F338;
  kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder((kaldi::quasar::TorchEncoderDecoder *)(a1 + 3));
  return a1;
}

void sub_1B1B4B480(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::TorchEncoderDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::TorchEncoderDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::TorchEncoderDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

_OWORD *std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<std::unique_ptr<kaldi::quasar::TMTools::ModelCache<kaldi::quasar::TorchEncoderDecoder>> &&>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4, uint64_t **a5)
{
  uint64_t v8 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v18, a2);
  unint64_t v9 = *v8;
  if (!*v8)
  {
    uint64_t v10 = (uint64_t **)v8;
    unint64_t v9 = operator new(0x40uLL);
    v16[1] = a1 + 1;
    uint64_t v11 = *a4;
    uint64_t v12 = *a5;
    uint64_t v13 = *((void *)*a4 + 2);
    void v9[2] = **a4;
    *((void *)v9 + 6) = v13;
    v11[1] = 0;
    void v11[2] = 0;
    void *v11 = 0;
    uint64_t v14 = *v12;
    *uint64_t v12 = 0;
    *((void *)v9 + 7) = v14;
    char v17 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v18, v10, (uint64_t *)v9);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,void *>>>>::reset[abi:ne180100]((uint64_t)v16, 0);
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t kaldi::quasar::TMTools::ModelCache<kaldi::quasar::TorchEncoderDecoder>::~ModelCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A1C7C0;
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void kaldi::quasar::TMTools::ModelCache<kaldi::quasar::TorchEncoderDecoder>::~ModelCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A1C7C0;
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  JUMPOUT(0x1B3EA8670);
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1B4B95C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::shared_ptr[abi:ne180100]<kaldi::quasar::TorchEncoderDecoder,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1B4BA34(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::shared_ptr[abi:ne180100]<kaldi::quasar::TorchEncoderDecoder,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::quasar::TorchEncoderDecoder *,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::__shared_ptr_default_delete<kaldi::quasar::TorchEncoderDecoder,kaldi::quasar::TorchEncoderDecoder>,std::allocator<kaldi::quasar::TorchEncoderDecoder>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::TorchEncoderDecoder *,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::__shared_ptr_default_delete<kaldi::quasar::TorchEncoderDecoder,kaldi::quasar::TorchEncoderDecoder>,std::allocator<kaldi::quasar::TorchEncoderDecoder>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::TorchEncoderDecoder *,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::__shared_ptr_default_delete<kaldi::quasar::TorchEncoderDecoder,kaldi::quasar::TorchEncoderDecoder>,std::allocator<kaldi::quasar::TorchEncoderDecoder>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__assign_alt[abi:ne180100]<0ul,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>&>(uint64_t a1, void *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 16))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__emplace[abi:ne180100]<0ul,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>&>(a1, a3);
  }
  else
  {
    uint64_t v4 = *a3;
    uint64_t v3 = a3[1];
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    *a2 = v4;
    a2[1] = v3;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__emplace[abi:ne180100]<0ul,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>&>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1F0A63FE8[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 16) = -1;
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 16) = 0;
  return a1;
}

void kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::Encdec>()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)(0x80000001B25ABBDELL & 0x7FFFFFFFFFFFFFFFLL));
  operator new();
}

void sub_1B1B4BCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a9) {
    kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::TorchEncoderDecoder>(a9);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::Encdec,std::allocator<kaldi::quasar::Encdec>,std::string const&,BOOL &,BOOL &,void>@<X0>(uint64_t a1@<X1>, unsigned __int8 *a2@<X2>, unsigned __int8 *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x9B8uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::Encdec>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<kaldi::quasar::Encdec>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B1B4BD44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::Encdec>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<kaldi::quasar::Encdec>,0>(void *a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F530;
  kaldi::quasar::Encdec::Encdec(a1 + 3, a2, *a3, *a4);
  return a1;
}

void sub_1B1B4BDA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::Encdec>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::Encdec>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F530;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::quasar::Encdec>::__on_zero_shared(uint64_t a1)
{
}

void kaldi::quasar::Encdec::~Encdec(kaldi::quasar::Encdec *this)
{
  unint64_t v15 = (void **)((char *)this + 2432);
  std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (*((char *)this + 2431) < 0) {
    operator delete(*((void **)this + 301));
  }
  if (*((char *)this + 2407) < 0) {
    operator delete(*((void **)this + 298));
  }
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 281, 0);
  uint64_t v2 = *((void *)this + 280);
  *((void *)this + 280) = 0;
  if (v2) {
    std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100]((uint64_t)this + 2240, v2);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 2192);
  uint64_t v3 = (void *)*((void *)this + 271);
  if (v3)
  {
    *((void *)this + 272) = v3;
    operator delete(v3);
  }
  unint64_t v15 = (void **)((char *)this + 2080);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  unint64_t v15 = (void **)((char *)this + 2056);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  unint64_t v15 = (void **)((char *)this + 2032);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (*((char *)this + 2031) < 0) {
    operator delete(*((void **)this + 251));
  }
  if (*((char *)this + 2007) < 0) {
    operator delete(*((void **)this + 248));
  }
  if (*((char *)this + 1983) < 0) {
    operator delete(*((void **)this + 245));
  }
  if (*((char *)this + 1959) < 0) {
    operator delete(*((void **)this + 242));
  }
  if (*((char *)this + 1935) < 0) {
    operator delete(*((void **)this + 239));
  }
  if (*((char *)this + 1911) < 0) {
    operator delete(*((void **)this + 236));
  }
  if (*((char *)this + 1887) < 0) {
    operator delete(*((void **)this + 233));
  }
  if (*((char *)this + 1863) < 0) {
    operator delete(*((void **)this + 230));
  }
  if (*((char *)this + 1839) < 0) {
    operator delete(*((void **)this + 227));
  }
  if (*((char *)this + 1815) < 0) {
    operator delete(*((void **)this + 224));
  }
  if (*((char *)this + 1791) < 0) {
    operator delete(*((void **)this + 221));
  }
  if (*((char *)this + 1767) < 0) {
    operator delete(*((void **)this + 218));
  }
  if (*((char *)this + 1743) < 0) {
    operator delete(*((void **)this + 215));
  }
  unint64_t v15 = (void **)((char *)this + 1696);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (*((char *)this + 1695) < 0) {
    operator delete(*((void **)this + 209));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1648, *((void **)this + 207));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1624, *((void **)this + 204));
  unint64_t v15 = (void **)((char *)this + 1600);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v15);
  unint64_t v15 = (void **)((char *)this + 1576);
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  unint64_t v15 = (void **)((char *)this + 1552);
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  unint64_t v15 = (void **)((char *)this + 1528);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v15);
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::Encdec *)((char *)this + 1128));
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)this + 1104, *((void **)this + 139));
  if (*((char *)this + 1079) < 0) {
    operator delete(*((void **)this + 132));
  }
  if (*((char *)this + 1055) < 0) {
    operator delete(*((void **)this + 129));
  }
  if (*((char *)this + 1031) < 0) {
    operator delete(*((void **)this + 126));
  }
  if (*((char *)this + 1007) < 0) {
    operator delete(*((void **)this + 123));
  }
  if (*((char *)this + 983) < 0) {
    operator delete(*((void **)this + 120));
  }
  if (*((char *)this + 959) < 0) {
    operator delete(*((void **)this + 117));
  }
  if (*((char *)this + 935) < 0) {
    operator delete(*((void **)this + 114));
  }
  unint64_t v15 = (void **)((char *)this + 880);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v4 = (void *)*((void *)this + 107);
  if (v4)
  {
    *((void *)this + 108) = v4;
    operator delete(v4);
  }
  kaldi::quasar::BPE::~BPE((kaldi::quasar::Encdec *)((char *)this + 568));
  uint64_t v5 = *((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 69);
  *((void *)this + 69) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  char v7 = (std::__shared_weak_count *)*((void *)this + 68);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy((uint64_t)this + 496, *((void **)this + 63));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 464, *((void **)this + 59));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 440, *((void **)this + 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 416, *((void **)this + 53));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 392, *((void **)this + 50));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 368, *((void **)this + 47));
  unint64_t v15 = (void **)((char *)this + 344);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v15);
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy((uint64_t)this + 320, *((void **)this + 41));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy((uint64_t)this + 296, *((void **)this + 38));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy((uint64_t)this + 272, *((void **)this + 35));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy((uint64_t)this + 248, *((void **)this + 32));
  long long v9 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 64))(v3);
    }
    uint64_t v4 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(a1, *a2);
    std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[5];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

void kaldi::quasar::BPE::~BPE(kaldi::quasar::BPE *this)
{
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 88);
  uint64_t v2 = (void **)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 24);
  std::__tree<std::string>::destroy((uint64_t)this, *((char **)this + 1));
}

uint64_t kaldi::quasar::TMTools::ModelCache<kaldi::quasar::Encdec>::~ModelCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A1C7E0;
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void kaldi::quasar::TMTools::ModelCache<kaldi::quasar::Encdec>::~ModelCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A1C7E0;
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  JUMPOUT(0x1B3EA8670);
}

void std::shared_ptr<kaldi::quasar::Encdec>::shared_ptr[abi:ne180100]<kaldi::quasar::Encdec,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1B4C614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<kaldi::quasar::Encdec>::reset[abi:ne180100]((kaldi::quasar::Encdec **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<kaldi::quasar::Encdec *,std::shared_ptr<kaldi::quasar::Encdec>::__shared_ptr_default_delete<kaldi::quasar::Encdec,kaldi::quasar::Encdec>,std::allocator<kaldi::quasar::Encdec>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

kaldi::quasar::Encdec *std::__shared_ptr_pointer<kaldi::quasar::Encdec *,std::shared_ptr<kaldi::quasar::Encdec>::__shared_ptr_default_delete<kaldi::quasar::Encdec,kaldi::quasar::Encdec>,std::allocator<kaldi::quasar::Encdec>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(kaldi::quasar::Encdec **)(a1 + 24);
  if (result)
  {
    kaldi::quasar::Encdec::~Encdec(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::Encdec *,std::shared_ptr<kaldi::quasar::Encdec>::__shared_ptr_default_delete<kaldi::quasar::Encdec,kaldi::quasar::Encdec>,std::allocator<kaldi::quasar::Encdec>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

kaldi::quasar::Encdec *std::unique_ptr<kaldi::quasar::Encdec>::reset[abi:ne180100](kaldi::quasar::Encdec **a1, kaldi::quasar::Encdec *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::Encdec::~Encdec(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__assign_alt[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::Encdec>,std::shared_ptr<kaldi::quasar::Encdec>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 16) == 1)
  {
    long long v3 = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v3;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__emplace[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::Encdec>>(a1, a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__emplace[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::Encdec>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1F0A63FE8[v4])(&v6, a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>,kaldi::quasar::TranslationUtil::NbestElement const*,kaldi::quasar::TranslationUtil::NbestElement const*,kaldi::quasar::TranslationUtil::NbestElement*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(a4 + v7), (const kaldi::quasar::TranslationUtil::NbestElement *)(a2 + v7));
      v7 += 272;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1B4C840(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 272;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(v4 + v2));
      v2 -= 272;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

kaldi::quasar::TranslationUtil::NbestElement *kaldi::quasar::TranslationUtil::NbestElement::NbestElement(kaldi::quasar::TranslationUtil::NbestElement *this, const kaldi::quasar::TranslationUtil::NbestElement *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__init_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(this, *(void *)a2, *((void *)a2 + 1), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4));
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v4 = *((_OWORD *)a2 + 4);
    *((void *)this + 10) = *((void *)a2 + 10);
    *((_OWORD *)this + 4) = v4;
  }
  *((unsigned char *)this + 88) = *((unsigned char *)a2 + 88);
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 6);
    *((void *)this + 14) = *((void *)a2 + 14);
    *((_OWORD *)this + 6) = v5;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 5, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 120);
    *((void *)this + 17) = *((void *)a2 + 17);
    *(_OWORD *)((char *)this + 120) = v6;
  }
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 6, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 9);
    *((void *)this + 20) = *((void *)a2 + 20);
    *((_OWORD *)this + 9) = v7;
  }
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 21, *((const void **)a2 + 21), *((void *)a2 + 22), (uint64_t)(*((void *)a2 + 22) - *((void *)a2 + 21)) >> 2);
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 24, *((const void **)a2 + 24), *((void *)a2 + 25), (uint64_t)(*((void *)a2 + 25) - *((void *)a2 + 24)) >> 2);
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 27, *((const void **)a2 + 27), *((void *)a2 + 28), (uint64_t)(*((void *)a2 + 28) - *((void *)a2 + 27)) >> 2);
  *((unsigned char *)this + 240) = *((unsigned char *)a2 + 240);
  std::map<std::string,double>::map[abi:ne180100]((uint64_t *)this + 31, (const void ***)a2 + 31);
  return this;
}

void sub_1B1B4CA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 + 143) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v10 + 119) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 87) < 0) {
    operator delete(*v11);
  }
  a10 = (void **)v10;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::quasar::TranslationUtil::PathElement>::__init_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<kaldi::quasar::TranslationUtil::PathElement>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1B4CB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::quasar::TranslationUtil::PathElement>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x111111111111112) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[240 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      kaldi::quasar::TranslationUtil::PathElement::PathElement((std::string *)(a4 + v7), (const kaldi::quasar::TranslationUtil::PathElement *)(a2 + v7));
      v7 += 240;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1B4CC3C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 240;
    do
    {
      kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v4 + v2));
      v2 -= 240;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(v4 - 272));
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

kaldi::nnet1::LayerNorm *kaldi::nnet1::LayerNorm::LayerNorm(kaldi::nnet1::LayerNorm *this, const kaldi::nnet1::LayerNorm *a2)
{
  *((void *)this + 1) = *((void *)a2 + 1);
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1F0A4FB48;
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((unsigned char *)this + 52) = *((unsigned char *)a2 + 52);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 7) = &unk_1F0A517C0;
  *((void *)this + 8) = 0;
  uint64_t v4 = (char *)this + 88;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 11) = &unk_1F0A517C0;
  *((void *)this + 12) = 0;
  kaldi::CuVector<float>::operator=((uint64_t)this + 56, (uint64_t)a2 + 56);
  kaldi::CuVector<float>::operator=((uint64_t)v4, (uint64_t)a2 + 88);
  return this;
}

void sub_1B1B4CDB4(_Unwind_Exception *a1)
{
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::CuVector<float>::~CuVector(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::LayerNorm::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a2 + 20);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = &unk_1F0A517C0;
  uint64_t v27 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)&v26, v6, 0);
  if (*(int *)(a2 + 20) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v7;
      unsigned int v9 = *(_DWORD *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 32);
      uint64_t v22 = &unk_1F0A472D0;
      uint64_t v23 = v8;
      uint64_t v25 = v10;
      uint64_t v24 = v9;
      double v11 = kaldi::CuVectorBase<float>::Sum((uint64_t)&v22);
      *(float *)(v27 + 4 * v7++) = *(float *)&v11 / (float)(int)v24;
    }
    while (v7 < *(int *)(a2 + 20));
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, a2, 111);
  kaldi::CuMatrixBase<float>::AddVecToCols(a3, (uint64_t)&v26, -1.0, 1.0);
  uint64_t v12 = *(unsigned int *)(a2 + 20);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v22 = &unk_1F0A517C0;
  uint64_t v23 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)&v22, v12, 0);
  if (*(int *)(a2 + 20) >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(void *)(a3 + 8) + 4 * *(_DWORD *)(a3 + 24) * (int)v13;
      unsigned int v15 = *(_DWORD *)(a3 + 16);
      uint64_t v16 = *(void *)(a3 + 32);
      v21[0] = &unk_1F0A472D0;
      v21[1] = v14;
      uint64_t v21[3] = v16;
      v21[2] = v15;
      kaldi::CuVector<float>::CuVector(v19, v21);
      kaldi::CuVectorBase<float>::MulElements((uint64_t)v19, (uint64_t)v21);
      double v17 = kaldi::CuVectorBase<float>::Sum((uint64_t)v19);
      *(float *)(v23 + 4 * v13) = 1.0
                                / (float)(*(float *)(a1 + 48)
                                        + sqrtf(*(float *)&v17 / (float)(v20 - *(unsigned __int8 *)(a1 + 52))));
      kaldi::CuVector<float>::~CuVector(v19);
      ++v13;
    }
    while (v13 < *(int *)(a2 + 20));
  }
  kaldi::CuMatrixBase<float>::MulRowsVec(a3, (uint64_t)&v22);
  kaldi::CuMatrixBase<float>::MulColsVec(a3, a1 + 56);
  kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 88, 1.0, 1.0);
  kaldi::CuVector<float>::~CuVector(&v22);
  return kaldi::CuVector<float>::~CuVector(&v26);
}

void sub_1B1B4D024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LayerNorm::Info(kaldi::nnet1::LayerNorm *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  kaldi::WriteToken(v12, 0, "<Epsilon>");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
  std::ostream::operator<<();
  kaldi::WriteToken(v12, 0, "<UnbiasedVar>");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
  std::ostream::operator<<();
  kaldi::WriteToken(v12, 0, "<Gamma>");
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 56);
  if ((v10 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v10 & 0x80u) == 0) {
    uint64_t v3 = v10;
  }
  else {
    uint64_t v3 = v9;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, v3);
  if ((char)v10 < 0) {
    operator delete(__p);
  }
  kaldi::WriteToken(v12, 0, "<Beta>");
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 88);
  if ((v10 & 0x80u) == 0) {
    uint64_t v4 = &__p;
  }
  else {
    uint64_t v4 = __p;
  }
  if ((v10 & 0x80u) == 0) {
    uint64_t v5 = v10;
  }
  else {
    uint64_t v5 = v9;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v4, v5);
  if ((char)v10 < 0) {
    operator delete(__p);
  }
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v12[0] = v6;
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v14);
}

void sub_1B1B4D2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LayerNorm::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v30, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Reading LayerNorm component", 27);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v30);
  }
  long long __p = 0uLL;
  uint64_t v29 = 0;
  uint64_t v6 = a1 + 88;
  uint64_t v7 = a1 + 56;
  uint64_t v27 = (char *)(a1 + 52);
  uint64_t v8 = (float *)(a1 + 48);
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60)
    {
      char v9 = HIBYTE(v29);
      goto LABEL_62;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&__p);
    char v9 = HIBYTE(v29);
    if ((SHIBYTE(v29) & 0x80000000) == 0) {
      break;
    }
    uint64_t v12 = *((void *)&__p + 1);
    if (*((void *)&__p + 1) == 9
      && (*(void *)__p == 0x6E6F6C697370453CLL ? (BOOL v13 = *(unsigned char *)(__p + 8) == 62) : (BOOL v13 = 0), v13))
    {
LABEL_35:
      kaldi::ReadBasicType<float>(a2, a3, v8);
    }
    else if (*((void *)&__p + 1) == 13)
    {
      if (*(void *)__p != 0x65736169626E553CLL || *(void *)(__p + 5) != 0x3E72615664657361)
      {
        uint64_t v12 = *((void *)&__p + 1);
        goto LABEL_23;
      }
LABEL_53:
      kaldi::ReadBasicType<BOOL>(a2, a3, v27);
    }
    else
    {
LABEL_23:
      if (v12 == 7)
      {
        BOOL v15 = *(_DWORD *)__p == 1835091772 && *(_DWORD *)(__p + 3) == 1046572397;
        uint64_t v16 = v7;
        if (v15) {
          goto LABEL_52;
        }
        uint64_t v12 = *((void *)&__p + 1);
      }
      if (v12 != 6) {
        goto LABEL_55;
      }
      BOOL v17 = *(_DWORD *)__p == 1952793148 && *(_WORD *)(__p + 4) == 15969;
      uint64_t v16 = v6;
      if (!v17)
      {
        uint64_t v12 = *((void *)&__p + 1);
LABEL_55:
        if (v12 == 12)
        {
          unsigned __int8 v10 = (long long *)__p;
          goto LABEL_57;
        }
LABEL_67:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
        uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Unrecognized token ", 19);
        if (v29 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (long long *)__p;
        }
        if (v29 >= 0) {
          uint64_t v26 = HIBYTE(v29);
        }
        else {
          uint64_t v26 = *((void *)&__p + 1);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)p_p, v26);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
      }
LABEL_52:
      kaldi::CuVector<float>::Read(v16, a2, a3);
    }
  }
  unsigned __int8 v10 = &__p;
  switch(HIBYTE(v29))
  {
    case 6:
      goto LABEL_47;
    case 7:
      goto LABEL_42;
    case 9:
      if ((void)__p != 0x6E6F6C697370453CLL || BYTE8(__p) != 62) {
        goto LABEL_67;
      }
      goto LABEL_35;
    case 0xC:
      goto LABEL_57;
    case 0xD:
      if ((void)__p == 0x65736169626E553CLL && *(void *)((char *)&__p + 5) == 0x3E72615664657361) {
        goto LABEL_53;
      }
      if (HIBYTE(v29) == 6) {
        goto LABEL_47;
      }
      if (HIBYTE(v29) == 7)
      {
LABEL_42:
        BOOL v19 = __p == 1835091772 && *(_DWORD *)((char *)&__p + 3) == 1046572397;
        uint64_t v16 = v7;
        if (!v19)
        {
          if (HIBYTE(v29) != 6) {
            goto LABEL_67;
          }
LABEL_47:
          BOOL v20 = __p == 1952793148 && WORD2(__p) == 15969;
          uint64_t v16 = v6;
          if (!v20) {
            goto LABEL_67;
          }
        }
        goto LABEL_52;
      }
      if (HIBYTE(v29) != 12) {
        goto LABEL_67;
      }
      unsigned __int8 v10 = &__p;
LABEL_57:
      uint64_t v21 = *(void *)v10;
      int v22 = *((_DWORD *)v10 + 2);
      if (v21 != 0x6E6F706D6F432F3CLL || v22 != 1047817829) {
        goto LABEL_67;
      }
LABEL_62:
      if (v9 < 0) {
        operator delete((void *)__p);
      }
      return;
    default:
      goto LABEL_67;
  }
}

void sub_1B1B4D694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::LayerNorm::WriteData(uint64_t a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<Epsilon>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<UnbiasedVar>");
  kaldi::WriteBasicType<BOOL>(a2, a3, *(unsigned __int8 *)(a1 + 52));
  kaldi::WriteToken(a2, a3, "<Gamma>");
  kaldi::CuVectorBase<float>::Write(a1 + 56, a2, a3);
  kaldi::WriteToken(a2, a3, "<Beta>");
  kaldi::CuVectorBase<float>::Write(a1 + 88, a2, a3);
  return kaldi::WriteToken(a2, a3, "</Component>");
}

void kaldi::nnet1::LayerNorm::~LayerNorm(kaldi::nnet1::LayerNorm *this)
{
  kaldi::nnet1::LayerNorm::~LayerNorm(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FB48;
  uint64_t v2 = (void *)((char *)this + 56);
  kaldi::CuVector<float>::~CuVector((void *)this + 11);
  kaldi::CuVector<float>::~CuVector(v2);
  kaldi::nnet1::Component::~Component(this);
}

void kaldi::nnet1::LayerNorm::Copy(kaldi::nnet1::LayerNorm *this)
{
}

void sub_1B1B4D838(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40D558B94DLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LayerNorm::GetType(kaldi::nnet1::LayerNorm *this)
{
  return 290;
}

uint64_t loggableFileObject(uint64_t *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (const char *)(v2 + 48);
    if (*(char *)(v2 + 71) < 0) {
      uint64_t v3 = *(const char **)v3;
    }
  }
  else
  {
    uint64_t v3 = "[dynamic object]";
  }
  size_t v4 = strlen(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" (", 2);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") : ", 4);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" attribute '", 12);
  uint64_t v7 = (unsigned int *)a1[1];
  uint64_t v8 = __p;
  loggableUnicode(v7, __p);
  if (v13 < 0) {
    uint64_t v8 = (void **)__p[0];
  }
  size_t v9 = strlen((const char *)v8);
  unsigned __int8 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"' : ", 4);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v14 + *(void *)(v14[0] - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v14[1] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v16);
}

void sub_1B1B4DACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t TFileObject::verify(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (*(_DWORD *)(a1 + 40))
  {
    loggableFileObject((uint64_t *)a1);
    if (v38 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    tknPrintf("Error: %sBad attribute declaration, expected an object\n", v5, v6);
    if (v38 < 0) {
      operator delete(__p[0]);
    }
    char v7 = 1;
    return v7 & 1;
  }
  uint64_t v10 = *(void *)(a1 + 24);
  if (v10) {
    a4 = 1;
  }
  if ((a4 & 1) == 0)
  {
    loggableFileObject((uint64_t *)a1);
    char v13 = v38 >= 0 ? __p : (void **)__p[0];
    tknPrintf("Error: %sObject has no attributes\n", v12, v13);
    if (v38 < 0) {
      operator delete(__p[0]);
    }
  }
  char v7 = a4 ^ 1;
  LOBYTE(v35[0]) = 0;
  std::vector<BOOL>::vector(__p, a3, (unsigned __int8 *)v35);
  if (*(void *)a1) {
    unint64_t v14 = *(void *)(*(void *)a1 + 72);
  }
  else {
    unint64_t v14 = 0;
  }
  if (v10)
  {
    while (1)
    {
      unint64_t v15 = 0;
      if (a3) {
        break;
      }
LABEL_44:
      if (v15 == a3)
      {
LABEL_45:
        loggableFileObject((uint64_t *)v10);
        uint64_t v24 = v35;
        if (v36 < 0) {
          uint64_t v24 = (void **)v35[0];
        }
        tknPrintf("Error: %sInvalid attribute\n", v23, v24);
        if (v36 < 0) {
          operator delete(v35[0]);
        }
        char v7 = 1;
      }
      uint64_t v10 = *(void *)(v10 + 16);
      if (!v10) {
        goto LABEL_51;
      }
    }
    uint64_t v16 = (unint64_t *)(a2 + 24);
    while (wcscmp(*(const __int32 **)(v10 + 8), (const __int32 *)*(v16 - 3)))
    {
      ++v15;
      v16 += 4;
      if (a3 == v15) {
        goto LABEL_45;
      }
    }
    if ((*((void *)__p[0] + (v15 >> 6)) & (1 << v15)) != 0 && (*(unsigned char *)(v16 - 2) & 1) == 0)
    {
      loggableFileObject((uint64_t *)v10);
      uint64_t v18 = v35;
      if (v36 < 0) {
        uint64_t v18 = (void **)v35[0];
      }
      tknPrintf("Error: %sRedefinition\n", v17, v18);
LABEL_40:
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      char v7 = 1;
      goto LABEL_43;
    }
    if (v14)
    {
      if (v14 < *(v16 - 1))
      {
        loggableFileObject((uint64_t *)v10);
        BOOL v20 = v35;
        if (v36 < 0) {
          BOOL v20 = (void **)v35[0];
        }
        tknPrintf("Error: %sAttribute not supported in file version %lld; file version must be at least %lld\n",
          v19,
          v20,
          v14,
          *(v16 - 1));
        goto LABEL_40;
      }
      if (v14 > *v16)
      {
        loggableFileObject((uint64_t *)v10);
        int v22 = v35;
        if (v36 < 0) {
          int v22 = (void **)v35[0];
        }
        tknPrintf("Error: %sAttribute not supported in file version %lld; file version may not be greater than %lld\n",
          v21,
          v22,
          v14,
          *v16);
        goto LABEL_40;
      }
    }
LABEL_43:
    *((void *)__p[0] + (v15 >> 6)) |= 1 << v15;
    goto LABEL_44;
  }
LABEL_51:
  if (a3)
  {
    unint64_t v25 = 0;
    uint64_t v26 = (unint64_t *)(a2 + 16);
    do
    {
      if (((*(void *)((char *)__p[0] + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v25) & 1) == 0
        && (*(unsigned char *)(v26 - 1) & 2) == 0
        && (!v14 || v14 >= *v26 && v14 <= v26[1]))
      {
        loggableFileObject((uint64_t *)a1);
        int v27 = v36;
        uint64_t v28 = (void **)v35[0];
        loggableUnicode((unsigned int *)*(v26 - 2), v33);
        if (v27 >= 0) {
          uint64_t v30 = v35;
        }
        else {
          uint64_t v30 = v28;
        }
        if (v34 >= 0) {
          uint64_t v31 = v33;
        }
        else {
          uint64_t v31 = (void **)v33[0];
        }
        tknPrintf("Error: %sMissing declaration of '%s'\n", v29, v30, v31);
        if (v34 < 0) {
          operator delete(v33[0]);
        }
        if (v36 < 0) {
          operator delete(v35[0]);
        }
        char v7 = 1;
      }
      ++v25;
      v26 += 4;
    }
    while (a3 != v25);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v7 & 1;
}

void sub_1B1B4DE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TFileObject::verify(TFileObject *this, char a2, char a3)
{
  int v3 = *((_DWORD *)this + 10);
  if (v3)
  {
    if (v3 != 2 || (a2 & 1) != 0)
    {
      uint64_t v8 = 0;
      if (**((_DWORD **)this + 3) || (a3 & 1) != 0) {
        return v8;
      }
      loggableFileObject((uint64_t *)this);
      if (v13 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      tknPrintf("Error: %sEmpty string not allowed here\n", v9, v10);
    }
    else
    {
      loggableFileObject((uint64_t *)this);
      if (v13 >= 0) {
        uint64_t v5 = __p;
      }
      else {
        uint64_t v5 = (void **)__p[0];
      }
      tknPrintf("Error: %sRegExp not supported here\n", v4, v5);
    }
  }
  else
  {
    loggableFileObject((uint64_t *)this);
    if (v13 >= 0) {
      char v7 = __p;
    }
    else {
      char v7 = (void **)__p[0];
    }
    tknPrintf("Error: %sBad attribute declaration, expected a string\n", v6, v7);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_1B1B4E010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TFileObject::getAttribute(uint64_t a1, __int32 *a2)
{
  for (uint64_t i = *(void *)(a1 + 24); i; uint64_t i = *(void *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), a2)) {
      break;
    }
  }
  return i;
}

void TFileObject::collectAttributes(uint64_t a1, __int32 *a2, void **a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v6 = (uint64_t)(a3 + 2);
    do
    {
      if (!wcscmp(*(const __int32 **)(v3 + 8), a2))
      {
        uint64_t v8 = a3[1];
        unint64_t v7 = (unint64_t)a3[2];
        if ((unint64_t)v8 >= v7)
        {
          uint64_t v10 = ((char *)v8 - (unsigned char *)*a3) >> 3;
          if ((unint64_t)(v10 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v11 = v7 - (void)*a3;
          uint64_t v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
            uint64_t v12 = v10 + 1;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v13);
          }
          else {
            unint64_t v14 = 0;
          }
          unint64_t v15 = &v14[8 * v10];
          *(void *)unint64_t v15 = v3;
          uint64_t v9 = v15 + 8;
          uint64_t v17 = (char *)*a3;
          uint64_t v16 = (char *)a3[1];
          if (v16 != *a3)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            uint64_t v16 = (char *)*a3;
          }
          *a3 = v15;
          a3[1] = v9;
          a3[2] = &v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *uint64_t v8 = v3;
          uint64_t v9 = v8 + 1;
        }
        a3[1] = v9;
      }
      uint64_t v3 = *(void *)(v3 + 16);
    }
    while (v3);
  }
}

void TFileObjectParser::TFileObjectParser(TFileObjectParser *this, const TLocaleInfo **a2)
{
  uint64_t v4 = (TFileObjectParser *)((char *)this + 8);
  TAllocator::TAllocator((TFileObjectParser *)((char *)this + 8), 2048);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *(void *)this = 0;
  if (TInputStream::verifyVersion((TInputStream *)a2, "ObjectFormatVersion", 1uLL, 1uLL, 1uLL))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "");
    TException::TException(v11, &v13);
    v11[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
    if (v12 >= 0) {
      uint64_t v9 = (std::exception_vtbl *)&v11[1];
    }
    else {
      uint64_t v9 = v11[1].__vftable;
    }
    conditionalAssert((const char *)v9, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 247);
    TException::~TException(v11);
    if (v14 < 0) {
      operator delete((void *)v13);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    TException::TException(exception, (long long *)v11);
    void *exception = &unk_1F0A33B90;
  }
  uint64_t v5 = (char **)TLexerLexicon::TLexerLexicon((TLexerLexicon *)&v13, a2[22]);
  initLexicon(v5);
  TLexer::TLexer((TLexer *)v11, (TInputStream *)a2, 1uLL, (const TLexerLexicon *)&v13, 0);
  if (*((char *)a2 + 39) >= 0) {
    uint64_t v6 = (const TLocaleInfo *)(a2 + 2);
  }
  else {
    uint64_t v6 = a2[2];
  }
  MEMORY[0x1B3EA7B20]((char *)this + 48, v6);
  *((void *)this + 9) = a2[12];
  Objects = TFileObjectParser::loadObjects(this, (TLexer *)v11);
  uint64_t v8 = TAllocator::allocate(v4, 48);
  *(_DWORD *)(v8 + 40) = 0;
  *(void *)(v8 + 24) = Objects;
  *(void *)(v8 + 32) = 0;
  *(void *)uint64_t v8 = this;
  *(void *)(v8 + 8) = &dword_1B2560CB0;
  *(void *)(v8 + 16) = 0;
  *(void *)this = v8;
  TLexer::~TLexer((TLexer *)v11);
  TLexerLexicon::~TLexerLexicon((TLexerLexicon *)&v13);
}

void sub_1B1B4E384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v15 + 71) < 0) {
        operator delete(*v17);
      }
      TAllocator::clear(v16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

TRegExpCompiler *initLexicon(char **a1)
{
  TLexerLexicon::addLiteral(a1, (uint64_t)"=", 5);
  TLexerLexicon::addLiteral(a1, (uint64_t)"{", 6);
  TLexerLexicon::addLiteral(a1, (uint64_t)"}", 7);
  TLexerLexicon::addLiteral(a1, (uint64_t)"(", 8);
  TLexerLexicon::addLiteral(a1, (uint64_t)")", 9);
  TLexerLexicon::addString(a1, 39, 3, 2);
  TLexerLexicon::addString(a1, 96, 4, 0);
  TLexerLexicon::addString(a1, 34, 2, 1);
  TLexerLexicon::addRegExp(a1, (__int32 *)"[", 1);
  return TLexerLexicon::doneAdding((TRegExp **)a1);
}

const TFileObject *TFileObjectParser::loadObjects(TFileObjectParser *this, TLexer *a2)
{
  if (*((void *)a2 + 3) < (unint64_t)((uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3))
  {
    uint64_t v4 = 0;
    uint64_t i = 0;
    while (1)
    {
      Object = TFileObjectParser::makeObject((uint64_t)this, a2, &dword_1B2560CB0);
      if (i)
      {
        *((void *)v4 + 2) = Object;
        unint64_t v7 = Object;
        Object = v4;
        if (v7) {
          goto LABEL_5;
        }
      }
      else
      {
        unint64_t v7 = (const TFileObject *)*((void *)Object + 2);
        for (i = Object; v7; unint64_t v7 = (const TFileObject *)*((void *)v7 + 2))
LABEL_5:
          Object = v7;
      }
      uint64_t v4 = Object;
      if (*((void *)a2 + 3) >= (unint64_t)((uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3)) {
        return i;
      }
    }
  }
  return 0;
}

uint64_t *TFileObjectParser::TFileObjectParser(uint64_t *a1, uint64_t a2, uint64_t a3, const TLocaleInfo *a4)
{
  unint64_t v7 = (TAllocator *)(a1 + 1);
  TAllocator::TAllocator((TAllocator *)(a1 + 1), 2048);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *a1 = 0;
  uint64_t v8 = (char **)TLexerLexicon::TLexerLexicon((TLexerLexicon *)v13, a4);
  initLexicon(v8);
  TLexer::TLexer(v12, a2, 1, v13, 0);
  MEMORY[0x1B3EA7B20](a1 + 6, "[dynamic text object]");
  a1[9] = 1;
  Objects = TFileObjectParser::loadObjects((TFileObjectParser *)a1, (TLexer *)v12);
  uint64_t v10 = TAllocator::allocate(v7, 48);
  *(_DWORD *)(v10 + 40) = 0;
  *(void *)(v10 + 24) = Objects;
  *(void *)(v10 + 32) = 0;
  *(void *)uint64_t v10 = a1;
  *(void *)(v10 + 8) = &dword_1B2560CB0;
  *(void *)(v10 + 16) = 0;
  *a1 = v10;
  TLexer::~TLexer((TLexer *)v12);
  TLexerLexicon::~TLexerLexicon((TLexerLexicon *)v13);
  return a1;
}

void sub_1B1B4E6CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TLexer::~TLexer((TLexer *)va);
  TLexerLexicon::~TLexerLexicon((TLexerLexicon *)(v5 - 104));
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v4);
  }
  TAllocator::clear(v3);
  _Unwind_Resume(a1);
}

void TFileObjectParser::~TFileObjectParser(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  TAllocator::clear((TAllocator *)(this + 1));
}

__n128 TFileObjectParser::instantiateObject(TFileObjectParser *this, const TFileObject *a2, const TFileObject *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)a2 + 10);
  if (!v6)
  {
    uint64_t v23 = *((void *)a2 + 3);
    if (!v23)
    {
      uint64_t v7 = 0;
LABEL_58:
      uint64_t v34 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
      uint64_t v36 = *((void *)a2 + 4);
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 32) = v36;
      goto LABEL_59;
    }
    uint64_t i = 0;
    uint64_t v7 = 0;
    int v25 = 0;
    while (!wcscmp(*(const __int32 **)(v23 + 8), (const __int32 *)"I"))
    {
LABEL_49:
      uint64_t v23 = *(void *)(v23 + 16);
      if (!v23) {
        goto LABEL_58;
      }
    }
    uint64_t v26 = TFileObjectParser::instantiateObject(this, (const TFileObject *)v23, a3);
    if (v7)
    {
      *(void *)(i + 16) = v26;
      uint64_t v28 = v26;
      if (v26) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v28 = *(void *)(v26 + 16);
      uint64_t v7 = v26;
      for (uint64_t i = v26; v28; v28 = *(void *)(v28 + 16))
LABEL_47:
        uint64_t i = v28;
    }
    v25 |= v27 & 1;
    goto LABEL_49;
  }
  if (v6 != 3)
  {
    uint64_t v29 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
    *(_DWORD *)(v29 + 40) = *((_DWORD *)a2 + 10);
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)uint64_t v29 = *(_OWORD *)a2;
    *(void *)(v29 + 32) = *((void *)a2 + 4);
    *(void *)(v29 + 16) = *((void *)a2 + 2);
    uint64_t v31 = *((void *)a2 + 3);
    *(void *)(v29 + 16) = 0;
    *(void *)(v29 + 24) = v31;
    return result;
  }
  uint64_t v7 = *((void *)a2 + 3);
  uint64_t v8 = *((void *)a3 + 3);
  if (v8)
  {
    uint64_t v9 = 0;
    do
    {
      unint64_t v49 = __s2;
      long long v50 = xmmword_1B25607E0;
      char v52 = 0;
      TBuffer<wchar_t>::assign((uint64_t)&v49, (int *)"$");
      uint64_t v10 = 0;
      uint64_t v11 = *(int **)(v8 + 8);
      while (v11[v10++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), v11, v10 - 1);
      LODWORD(v44[0].__vftable) = 41;
      TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), (int *)v44, 1uLL);
      if (*((void *)&v50 + 1) >= (unint64_t)v50)
      {
        if (v52)
        {
          LODWORD(v44[0].__vftable) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), (int *)v44, 1uLL);
          --*((void *)&v50 + 1);
        }
        else if ((void)v50)
        {
          v49[(void)v50 - 1] = 0;
        }
      }
      else
      {
        v49[*((void *)&v50 + 1)] = 0;
      }
      if (!*(_DWORD *)(v8 + 40) && !wcscmp(__s2, (const __int32 *)v7))
      {
        uint64_t v7 = *(void *)(v8 + 24);
        if (v7)
        {
          uint64_t v19 = 0;
          uint64_t v9 = 0;
          do
          {
            uint64_t v20 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
            *(_DWORD *)(v20 + 40) = *(_DWORD *)(v7 + 40);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v7;
            *(void *)(v20 + 32) = *(void *)(v7 + 32);
            *(void *)(v20 + 16) = *(void *)(v7 + 16);
            uint64_t v21 = *(void *)(v7 + 24);
            *(void *)(v20 + 16) = 0;
            *(void *)(v20 + 24) = v21;
            if (v9)
            {
              *(void *)(v19 + 16) = v20;
              do
              {
                uint64_t v22 = v20;
                uint64_t v20 = *(void *)(v20 + 16);
              }
              while (v20);
              uint64_t v20 = v22;
            }
            else
            {
              uint64_t v9 = v20;
            }
            uint64_t v7 = *(void *)(v7 + 16);
            uint64_t v19 = v20;
          }
          while (v7);
        }
        else
        {
          uint64_t v9 = 0;
        }
        int v17 = 0;
      }
      else
      {
        long long v13 = wcsstr((__int32 *)v7, __s2);
        if (v13)
        {
          if (!*(_DWORD *)(v8 + 40))
          {
            loggableFileObject((uint64_t *)a2);
            int v37 = v45;
            char v38 = v44[0].__vftable;
            loggableFileObject((uint64_t *)v8);
            float v40 = v44;
            if (v37 < 0) {
              float v40 = (std::exception *)v38;
            }
            if (v48 >= 0) {
              int v41 = __p;
            }
            else {
              int v41 = (void **)__p[0];
            }
            tknPrintf("Error: %s%sCannot instantiate\n", v39, v40, v41);
            if (v48 < 0) {
              operator delete(__p[0]);
            }
            if (v45 < 0) {
              operator delete(v44[0].__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            TException::TException(v44, (long long *)__p);
            v44[0].__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
            if (v46 >= 0) {
              uint64_t v42 = (std::exception_vtbl *)&v44[1];
            }
            else {
              uint64_t v42 = v44[1].__vftable;
            }
            conditionalAssert((const char *)v42, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 366);
            TException::~TException(v44);
            if (v48 < 0) {
              operator delete(__p[0]);
            }
            exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v44, "");
            TException::TException(exception, (long long *)v44);
            void *exception = &unk_1F0A340F0;
          }
          size_t v14 = wcslen(__s2);
          wcscpy(__s2, (const __int32 *)v7);
          wcscpy((__int32 *)((char *)__s2 + (void)v13 - v7), *(const __int32 **)(v8 + 24));
          wcscat(__s2, &v13[v14]);
          size_t v15 = wcslen(__s2);
          if ((v15 + 1) >> 62) {
            uint64_t v16 = -1;
          }
          else {
            uint64_t v16 = 4 * (v15 + 1);
          }
          uint64_t v7 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), v16);
          wcscpy((__int32 *)v7, __s2);
        }
        int v17 = 1;
      }
      if (v52)
      {
        if (v49 != (__int32 *)&v51 && v49 != 0) {
          MEMORY[0x1B3EA8630]();
        }
      }
      if (!v17) {
        break;
      }
      uint64_t v8 = *(void *)(v8 + 16);
    }
    while (v8);
    if (v9)
    {
      uint64_t v32 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
      uint64_t v33 = *((void *)a2 + 4);
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 32) = v33;
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)uint64_t v32 = *(_OWORD *)a2;
      *(void *)(v32 + 16) = 0;
      *(void *)(v32 + 24) = v9;
      return result;
    }
  }
  uint64_t v34 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
  uint64_t v35 = *((void *)a2 + 4);
  *(_DWORD *)(v34 + 40) = *((_DWORD *)a2 + 10);
  *(void *)(v34 + 32) = v35;
LABEL_59:
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)uint64_t v34 = *(_OWORD *)a2;
  *(void *)(v34 + 16) = 0;
  *(void *)(v34 + 24) = v7;
  return result;
}

void sub_1B1B4ECD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      if (LOBYTE(STACK[0x488]))
      {
        if (a26 != a12 && a26 != 0) {
          MEMORY[0x1B3EA8630]();
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

const TFileObject *TFileObjectParser::instantiateObject(TFileObjectParser *this, const TFileObject *a2)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  TFileObject::collectAttributes((uint64_t)a2, (__int32 *)"I", (void **)&v21);
  uint64_t v4 = v21;
  if (v21 != v22)
  {
    unint64_t v5 = 0;
    uint64_t i = 0;
    uint64_t v7 = 0;
    while (1)
    {
      TFileObjectParser::instantiateObject(this, a2, v4[v5]);
      if ((v9 & 1) == 0)
      {
        loggableFileObject((uint64_t *)a2);
        if (v19 >= 0) {
          long long v13 = __p;
        }
        else {
          long long v13 = (void **)__p[0];
        }
        tknPrintf("Error: %sNothing to instantiate\n", v12, v13);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v16, "");
        TException::TException(__p, (long long *)v16);
        __p[0] = &unk_1F0A340F0;
        if (v20 >= 0) {
          size_t v14 = (const char *)&__p[1];
        }
        else {
          size_t v14 = (const char *)__p[1];
        }
        conditionalAssert(v14, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 441);
        TException::~TException((std::exception *)__p);
        if (v17 < 0) {
          operator delete(v16[0]);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(exception, (long long *)__p);
        void *exception = &unk_1F0A340F0;
      }
      if (v7)
      {
        *((void *)i + 2) = v8;
        uint64_t v10 = v8;
        if (v8) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v10 = (const TFileObject *)*((void *)v8 + 2);
        uint64_t v7 = v8;
        for (i = v8; v10; uint64_t v10 = (const TFileObject *)*((void *)v10 + 2))
LABEL_6:
          uint64_t i = v10;
      }
      ++v5;
      uint64_t v4 = v21;
      if (v5 >= v22 - v21) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v7 = a2;
LABEL_12:
  if (v4)
  {
    uint64_t v22 = v4;
    operator delete(v4);
  }
  return v7;
}

void sub_1B1B4EFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      if (a24) {
        operator delete(a24);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

const TFileObject *TFileObjectParser::makeObject(uint64_t a1, TLexer *a2, __int32 *a3)
{
  Tokeuint64_t n = nextToken(a2, (uint64_t)a2);
  uint64_t v8 = Token;
  uint64_t v9 = *(void *)Token;
  if (*(void *)Token == 1)
  {
    size_t v10 = wcslen(*(const __int32 **)(Token + 8));
    if ((v10 + 1) >> 62) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = 4 * (v10 + 1);
    }
    a3 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v11);
    wcscpy(a3, *(const __int32 **)(v8 + 8));
    if (*(void *)nextToken(a2, v12) != 5)
    {
      loggableToken((uint64_t)a2);
      if (v66 >= 0) {
        char v52 = v65;
      }
      else {
        char v52 = v65[0].__vftable;
      }
      tknPrintf("Error: %sSyntax error, missing '='\n", v51, v52);
      if (v66 < 0) {
        operator delete(v65[0].__vftable);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v65, (long long *)__p);
      v65[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
      if (v67 >= 0) {
        uint64_t v53 = (std::exception_vtbl *)&v65[1];
      }
      else {
        uint64_t v53 = v65[1].__vftable;
      }
      conditionalAssert((const char *)v53, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 488);
      TException::~TException(v65);
      if (v64 < 0) {
        operator delete(__p[0]);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v65, "");
      TException::TException(exception, (long long *)v65);
      void *exception = &unk_1F0A33FD8;
    }
    uint64_t v8 = nextToken(a2, v13);
    uint64_t v9 = *(void *)v8;
  }
  switch(v9)
  {
    case 2:
      size_t v14 = wcslen(*(const __int32 **)(v8 + 8));
      if ((v14 + 1) >> 62) {
        uint64_t v15 = -1;
      }
      else {
        uint64_t v15 = 4 * (v14 + 1);
      }
      uint64_t v16 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v15);
      wcscpy(v16, *(const __int32 **)(v8 + 8));
      uint64_t v17 = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
      uint64_t j = v17;
      uint64_t v19 = *(void *)(v8 + 16);
      int v20 = 3;
      goto LABEL_33;
    case 3:
      size_t v33 = wcslen(*(const __int32 **)(v8 + 8));
      if ((v33 + 1) >> 62) {
        uint64_t v34 = -1;
      }
      else {
        uint64_t v34 = 4 * (v33 + 1);
      }
      uint64_t v16 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v34);
      wcscpy(v16, *(const __int32 **)(v8 + 8));
      uint64_t v17 = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
      uint64_t j = v17;
      uint64_t v19 = *(void *)(v8 + 16);
      int v20 = 1;
      goto LABEL_33;
    case 4:
      size_t v28 = wcslen(*(const __int32 **)(v8 + 8));
      if ((v28 + 1) >> 62) {
        uint64_t v29 = -1;
      }
      else {
        uint64_t v29 = 4 * (v28 + 1);
      }
      uint64_t v16 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v29);
      wcscpy(v16, *(const __int32 **)(v8 + 8));
      uint64_t v17 = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
      uint64_t j = v17;
      uint64_t v19 = *(void *)(v8 + 16);
      int v20 = 2;
LABEL_33:
      *(_DWORD *)(v17 + 40) = v20;
      *(void *)(v17 + 24) = v16;
      *(void *)(v17 + 32) = v19;
      *(void *)uint64_t v17 = a1;
      *(void *)(v17 + 8) = a3;
      *(void *)(v17 + 16) = 0;
      return (const TFileObject *)j;
    case 6:
      uint64_t v30 = (void *)nextToken(a2, v7);
      if (*v30 == 7)
      {
        uint64_t v31 = v30;
        uint64_t i = 0;
        goto LABEL_48;
      }
      uint64_t v36 = 0;
      uint64_t i = 0;
      while (1)
      {
        uint64_t v37 = *((void *)a2 + 3);
        if (v37) {
          *((void *)a2 + 3) = v37 - 1;
        }
        uint64_t Object = TFileObjectParser::makeObject(a1, a2, &unk_1B2560CB0);
        uint64_t v40 = Object;
        if (i)
        {
          *(void *)(v36 + 16) = Object;
          uint64_t v41 = Object;
          uint64_t v40 = v36;
          if (Object) {
            goto LABEL_43;
          }
        }
        else
        {
          uint64_t v41 = *(void *)(Object + 16);
          for (uint64_t i = Object; v41; v41 = *(void *)(v41 + 16))
LABEL_43:
            uint64_t v40 = v41;
        }
        uint64_t v42 = (void *)nextToken(a2, v39);
        uint64_t v36 = v40;
        if (*v42 == 7)
        {
          uint64_t v31 = v42;
LABEL_48:
          uint64_t j = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
          uint64_t v43 = v31[2];
          *(_DWORD *)(j + 40) = 0;
          *(void *)(j + 24) = i;
          *(void *)(j + 32) = v43;
          *(void *)uint64_t j = a1;
          *(void *)(j + 8) = a3;
          *(void *)(j + 16) = 0;
LABEL_49:
          return TFileObjectParser::instantiateObject((TFileObjectParser *)a1, (const TFileObject *)j);
        }
      }
    case 8:
      uint64_t v21 = nextToken(a2, v7);
      uint64_t j = 0;
      uint64_t v22 = 0;
      while (2)
      {
        if (*(void *)v21 != 9)
        {
          if (*(void *)v21 == 1)
          {
            loggableToken((uint64_t)a2);
            int v44 = v66;
            char v45 = v65[0].__vftable;
            loggableUnicode(*(unsigned int **)(v21 + 8), __p);
            if (v44 >= 0) {
              float v47 = v65;
            }
            else {
              float v47 = (std::exception *)v45;
            }
            if (v64 >= 0) {
              char v48 = __p;
            }
            else {
              char v48 = (void **)__p[0];
            }
            tknPrintf("Error: %sUnexpected attribute name '%s' in assignment list\n", v46, v47, v48);
            if (v64 < 0) {
              operator delete(__p[0]);
            }
            if (v66 < 0) {
              operator delete(v65[0].__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            TException::TException(v65, (long long *)__p);
            v65[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
            if (v67 >= 0) {
              unint64_t v49 = (std::exception_vtbl *)&v65[1];
            }
            else {
              unint64_t v49 = v65[1].__vftable;
            }
            conditionalAssert((const char *)v49, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 524);
            TException::~TException(v65);
            if (v64 < 0) {
              operator delete(__p[0]);
            }
            long long v50 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v65, "");
            TException::TException(v50, (long long *)v65);
            *long long v50 = &unk_1F0A33FD8;
          }
          uint64_t v23 = *((void *)a2 + 3);
          if (v23) {
            *((void *)a2 + 3) = v23 - 1;
          }
          uint64_t v24 = TFileObjectParser::makeObject(a1, a2, a3);
          uint64_t v26 = v24;
          if (j)
          {
            *(void *)(v22 + 16) = v24;
            uint64_t v27 = v24;
            uint64_t v26 = v22;
            if (v24) {
              goto LABEL_19;
            }
          }
          else
          {
            uint64_t v27 = *(void *)(v24 + 16);
            for (j = v24; v27; uint64_t v27 = *(void *)(v27 + 16))
LABEL_19:
              uint64_t v26 = v27;
          }
          uint64_t v21 = nextToken(a2, v25);
          uint64_t v22 = v26;
          continue;
        }
        break;
      }
      if (!j)
      {
        loggableToken((uint64_t)a2);
        if (v66 >= 0) {
          unint64_t v56 = v65;
        }
        else {
          unint64_t v56 = v65[0].__vftable;
        }
        tknPrintf("Error: %sAssignment list is empty\n", v55, v56);
        if (v66 < 0) {
          operator delete(v65[0].__vftable);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v65, (long long *)__p);
        v65[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
        if (v67 >= 0) {
          int v57 = (std::exception_vtbl *)&v65[1];
        }
        else {
          int v57 = v65[1].__vftable;
        }
        conditionalAssert((const char *)v57, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 536);
        TException::~TException(v65);
        if (v64 < 0) {
          operator delete(__p[0]);
        }
        int v58 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v65, "");
        TException::TException(v58, (long long *)v65);
        *int v58 = &unk_1F0A33FD8;
      }
      if (!*(_DWORD *)(j + 40)) {
        goto LABEL_49;
      }
      return (const TFileObject *)j;
    default:
      loggableToken((uint64_t)a2);
      if (v66 >= 0) {
        int v60 = v65;
      }
      else {
        int v60 = v65[0].__vftable;
      }
      tknPrintf("Error: %sSyntax error\n", v59, v60);
      if (v66 < 0) {
        operator delete(v65[0].__vftable);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v65, (long long *)__p);
      v65[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
      if (v67 >= 0) {
        int v61 = (std::exception_vtbl *)&v65[1];
      }
      else {
        int v61 = v65[1].__vftable;
      }
      conditionalAssert((const char *)v61, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 571);
      TException::~TException(v65);
      if (v64 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v62 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v65, "");
      TException::TException(v62, (long long *)v65);
      *unint64_t v62 = &unk_1F0A33FD8;
  }
}

void sub_1B1B4F8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

uint64_t nextToken(TLexer *a1, uint64_t a2)
{
  unint64_t v2 = *((void *)a1 + 3);
  uint64_t v3 = *((void *)a1 + 11);
  if (v2 >= (*((void *)a1 + 12) - v3) >> 3)
  {
    if (*((char *)a1 + 23) >= 0) {
      int v6 = a1;
    }
    else {
      int v6 = *(TLexer **)a1;
    }
    tknPrintf("Error: %s : Unexpected end of file\n", a2, v6);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v18, (long long *)__p);
    v18[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
    if (v20 >= 0) {
      uint64_t v7 = (std::exception_vtbl *)&v18[1];
    }
    else {
      uint64_t v7 = v18[1].__vftable;
    }
    conditionalAssert((const char *)v7, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 457);
    TException::~TException(v18);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "");
    TException::TException(exception, (long long *)v18);
    void *exception = &unk_1F0A33FD8;
  }
  *((void *)a1 + 3) = v2 + 1;
  uint64_t v4 = *(void *)(v3 + 8 * v2);
  if (v4 && *(void *)v4 == -1)
  {
    loggableToken((uint64_t)a1);
    int v9 = v19;
    size_t v10 = v18[0].__vftable;
    loggableUnicode(*(unsigned int **)(v4 + 8), __p);
    if (v9 >= 0) {
      uint64_t v12 = v18;
    }
    else {
      uint64_t v12 = (std::exception *)v10;
    }
    if (v17 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    tknPrintf("Error: %sSyntax error, found unexpected token '%s'\n", v11, v12, v13);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0].__vftable);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v18, (long long *)__p);
    v18[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
    if (v20 >= 0) {
      size_t v14 = (std::exception_vtbl *)&v18[1];
    }
    else {
      size_t v14 = v18[1].__vftable;
    }
    conditionalAssert((const char *)v14, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 465);
    TException::~TException(v18);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "");
    TException::TException(v15, (long long *)v18);
    *uint64_t v15 = &unk_1F0A33FD8;
  }
  return *(void *)(v3 + 8 * v2);
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  TLexer *v6;
  std::exception_vtbl *v7;
  void *exception;
  int v9;
  std::exception_vtbl *v10;
  uint64_t v11;
  std::exception *v12;
  void **v13;
  std::exception_vtbl *v14;
  void *v15;
  void *__p[2];
  char v17;
  std::exception v18[2];
  char v19;
  char v20;

  unint64_t v2 = *((void *)a1 + 3);
  uint64_t v3 = *((void *)a1 + 11);
  if (v2 >= (*((void *)a1 + 12) - v3) >> 3)
  {
    if (*((char *)a1 + 23) >= 0) {
      int v6 = a1;
    }
    else {
      int v6 = *(TLexer **)a1;
    }
    tknPrintf("Error: %s : Unexpected end of file\n", a2, v6);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v18, (long long *)__p);
    v18[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
    if (v20 >= 0) {
      uint64_t v7 = (std::exception_vtbl *)&v18[1];
    }
    else {
      uint64_t v7 = v18[1].__vftable;
    }
    conditionalAssert((const char *)v7, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 211);
    TException::~TException(v18);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "");
    TException::TException(exception, (long long *)v18);
    void *exception = &unk_1F0A33FD8;
  }
  *((void *)a1 + 3) = v2 + 1;
  uint64_t v4 = *(void *)(v3 + 8 * v2);
  if (v4 && *(void *)v4 == -1)
  {
    loggableToken((uint64_t)a1);
    int v9 = v19;
    size_t v10 = v18[0].__vftable;
    loggableUnicode(*(unsigned int **)(v4 + 8), __p);
    if (v9 >= 0) {
      uint64_t v12 = v18;
    }
    else {
      uint64_t v12 = (std::exception *)v10;
    }
    if (v17 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    tknPrintf("Error: %sFound unexpected token '%s'\n", v11, v12, v13);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0].__vftable);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v18, (long long *)__p);
    v18[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
    if (v20 >= 0) {
      size_t v14 = (std::exception_vtbl *)&v18[1];
    }
    else {
      size_t v14 = v18[1].__vftable;
    }
    conditionalAssert((const char *)v14, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 219);
    TException::~TException(v18);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "");
    TException::TException(v15, (long long *)v18);
    *uint64_t v15 = &unk_1F0A33FD8;
  }
  return *(void *)(v3 + 8 * v2);
}

void sub_1B1B4FC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void TDataException::~TDataException(std::exception *this)
{
  TException::~TException(this);
  JUMPOUT(0x1B3EA8670);
}

void TLexer::~TLexer(TLexer *this)
{
  unint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  TAllocator::clear((TLexer *)((char *)this + 32));
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void TSemanticException::~TSemanticException(std::exception *this)
{
  TException::~TException(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::HwcnConfidence::HwcnConfidence(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A52760;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  kaldi::SilencePhoneSet::SilencePhoneSet((kaldi::SilencePhoneSet *)(v3 + 480));
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 696) = 100;
  *(void *)(a1 + 808) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(unsigned char *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 832) = 1;
  *(unsigned char *)(a1 + 836) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(void *)(a1 + 888) = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN6marisa4TrieENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((void *)(a1 + 896));
  _ZNSt3__115allocate_sharedB8ne180100IN5kaldi6MatrixIfEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((void *)(a1 + 912));
  *(void *)(a1 + 928) = 0;
  *(unsigned char *)(a1 + 936) = 1;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_DWORD *)(a1 + 976) = 0;
  return a1;
}

void sub_1B1B4FEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15 = *(std::__shared_weak_count **)(v10 + 904);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v10 + 888);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  char v17 = *(std::__shared_weak_count **)(v10 + 872);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*(char *)(v10 + 863) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v10 + 831) < 0) {
    operator delete(*(void **)(v10 + 808));
  }
  if (*(char *)(v10 + 799) < 0) {
    operator delete(*(void **)(v10 + 776));
  }
  if (*(char *)(v10 + 775) < 0) {
    operator delete(*(void **)(v10 + 752));
  }
  if (*(char *)(v10 + 751) < 0) {
    operator delete(*(void **)(v10 + 728));
  }
  if (*(char *)(v10 + 727) < 0) {
    operator delete(*(void **)(v10 + 704));
  }
  if (*(char *)(v10 + 695) < 0) {
    operator delete(*(void **)(v10 + 672));
  }
  if (*(char *)(v10 + 671) < 0) {
    operator delete(*(void **)(v10 + 648));
  }
  if (*(char *)(v10 + 647) < 0) {
    operator delete(*(void **)(v10 + 624));
  }
  if (*(char *)(v10 + 623) < 0) {
    operator delete(*(void **)(v10 + 600));
  }
  if (*(char *)(v10 + 599) < 0) {
    operator delete(*(void **)(v10 + 576));
  }
  if (*(char *)(v10 + 575) < 0) {
    operator delete(*v12);
  }
  kaldi::SilencePhoneSet::~SilencePhoneSet(v11);
  a10 = v10 + 456;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  uint64_t v18 = *(void *)(v10 + 448);
  *(void *)(v10 + 448) = 0;
  if (v18) {
    std::default_delete<kaldi::quasar::LatticeRnn>::operator()[abi:ne180100](v10 + 448, v18);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v10);
  _Unwind_Resume(a1);
}

void kaldi::SilencePhoneSet::~SilencePhoneSet(kaldi::SilencePhoneSet *this)
{
  unint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3) {
    operator delete(v3);
  }
}

void quasar::HwcnConfidence::finishInit(quasar::HwcnConfidence *this)
{
}

void quasar::HwcnConfidence::initLatticeRnn(quasar::HwcnConfidence *this)
{
}

void sub_1B1B50114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1B3EA8670](v15, 0x10B0C40310220B6);
  _Unwind_Resume(a1);
}

void quasar::HwcnConfidence::initOtherStuff(quasar::HwcnConfidence *this)
{
  quasar::ModelLoader::readWordBoundaryInfo(*((void **)this + 46), (unsigned int *)this + 232, (uint64_t)this + 752, (uint64_t)this + 776, (uint64_t *)v19);
  long long v2 = *(_OWORD *)&v19[0].__locale_;
  v19[0].__locale_ = 0;
  v19[1].__locale_ = 0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 119);
  *((_OWORD *)this + 59) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (v19[1].__locale_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19[1].__locale_);
    }
  }
  memset(&v41, 0, sizeof(v41));
  char v40 = 0;
  uint64_t v4 = (kaldi::Input *)kaldi::Input::Input(v39, (char *)this + 672, &v40);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v5 = (void *)kaldi::Input::Stream(v4);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  int v6 = std::locale::use_facet(v19, MEMORY[0x1E4FBA258]);
  unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v19);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)&v36, v7);
  if ((kaldi::SplitStringToIntegers<int>((uint64_t)&v36, ":", 1, &v41) & 1) == 0)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v23 = 0u;
    *(_OWORD *)char v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)&v19[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Invalid silence-phones string ", 30);
    if (v38 >= 0) {
      uint64_t v16 = (void **)&v36;
    }
    else {
      uint64_t v16 = v36;
    }
    if (v38 >= 0) {
      uint64_t v17 = HIBYTE(v38);
    }
    else {
      uint64_t v17 = v37;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v19);
  }
  kaldi::SilencePhoneSet::SilencePhoneSet(v19, &v41);
  *((_DWORD *)this + 120) = v19[0].__locale_;
  *((std::locale *)this + 61) = v19[1];
  *((_WORD *)this + 248) = v20[0];
  std::vector<BOOL>::operator=((void **)this + 63, (uint64_t)&v20[1]);
  if ((std::locale *)((char *)this + 480) != v19) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 528, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v20[1]) {
    operator delete(v20[1]);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(v36);
  }
  kaldi::Input::~Input((kaldi::Input *)v39);
  if (v41.__begin_)
  {
    v41.__end_ = v41.__begin_;
    operator delete(v41.__begin_);
  }
  if (*((char *)this + 727) < 0)
  {
    if (!*((void *)this + 89)) {
      goto LABEL_20;
    }
LABEL_19:
    quasar::readMemMappedLockedFile((uint64_t)this + 704);
  }
  if (*((unsigned char *)this + 727)) {
    goto LABEL_19;
  }
LABEL_20:
  if ((*((char *)this + 751) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 751)) {
      goto LABEL_25;
    }
LABEL_24:
    quasar::readMemMappedLockedFile((uint64_t)this + 728);
  }
  if (*((void *)this + 92)) {
    goto LABEL_24;
  }
LABEL_25:
  quasar::HwcnConfidence::initArcFeatExtractors((const std::string *)this);
  uint64_t v8 = (uint64_t *)*((void *)this + 57);
  int v9 = (uint64_t *)*((void *)this + 58);
  while (v8 != v9)
  {
    uint64_t v10 = *v8;
    v8 += 2;
    *((_DWORD *)this + 244) += (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
  }
  uint64_t v11 = (const std::string::value_type **)((char *)this + 808);
  if (*((char *)this + 831) < 0)
  {
    std::string::size_type v12 = *((void *)this + 102);
    if (!v12) {
      goto LABEL_35;
    }
    std::string::__init_copy_ctor_external(&v18, *v11, v12);
  }
  else
  {
    if (!*((unsigned char *)this + 831)) {
      goto LABEL_35;
    }
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)v11;
    v18.__r_.__value_.__r.__words[2] = *((void *)this + 103);
  }
  *((_DWORD *)this + 208) = kaldi::WordHypLattice::StringToCriteria((uint64_t *)&v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (*((char *)this + 863) < 0)
  {
    if (!*((void *)this + 106)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 863))
  {
    return;
  }
  std::allocate_shared[abi:ne180100]<quasar::CalibrationMap,std::allocator<quasar::CalibrationMap>,std::string &,void>((uint64_t)this + 840, v19);
  long long v13 = *(_OWORD *)&v19[0].__locale_;
  v19[0].__locale_ = 0;
  v19[1].__locale_ = 0;
  size_t v14 = (std::__shared_weak_count *)*((void *)this + 121);
  *((_OWORD *)this + 60) = v13;
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    if (v19[1].__locale_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19[1].__locale_);
    }
  }
}

void sub_1B1B5057C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::SplitStringToIntegers<int>(uint64_t a1, const char *a2, int a3, std::vector<unsigned int> *a4)
{
  if (*(char *)(a1 + 23) >= 0) {
    unint64_t v5 = (unsigned char *)a1;
  }
  else {
    unint64_t v5 = *(unsigned char **)a1;
  }
  if (*v5)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    kaldi::SplitStringToVector((const std::string *)a1, a2, a3, (uint64_t)&v14);
    std::vector<int>::resize(a4, 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3));
    uint64_t v6 = v14;
    if (v15 == v14)
    {
LABEL_13:
      uint64_t v12 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        int v9 = (const char *)(v6 + v7);
        if (*(char *)(v6 + v7 + 23) < 0) {
          int v9 = *(const char **)v9;
        }
        __endptr = 0;
        uint64_t v10 = strtoll(v9, &__endptr, 10);
        if (__endptr == v9 || *__endptr) {
          break;
        }
        std::vector<int>::pointer begin = a4->__begin_;
        if (v10 != (int)v10) {
          goto LABEL_16;
        }
        begin[v8++] = v10;
        uint64_t v6 = v14;
        v7 += 24;
        if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3)) {
          goto LABEL_13;
        }
      }
      std::vector<int>::pointer begin = a4->__begin_;
LABEL_16:
      a4->__end_ = begin;
      uint64_t v12 = 0;
    }
    __endptr = (char *)&v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__endptr);
  }
  else
  {
    a4->__end_ = a4->__begin_;
    return 1;
  }
  return v12;
}

void sub_1B1B50744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::HwcnConfidence::initArcFeatExtractors(const std::string *this)
{
  long long v2 = (uint64_t *)&this[19];
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__clear[abi:ne180100]((uint64_t *)&this[19]);
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitAndTrimNoEmpty(this + 27, (char *)__p, &v66);
  if (SBYTE7(v49) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = v66;
  uint64_t v4 = v67;
  if (v66 != v67)
  {
    while (1)
    {
      long long v65 = 0uLL;
      int v5 = *(unsigned __int8 *)(v3 + 23);
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
        switch(*(unsigned char *)(v3 + 23))
        {
          case 6:
            if (*(_DWORD *)v3 == 1281315657 && *(_WORD *)(v3 + 4) == 17741) {
              goto LABEL_40;
            }
            if (v5 != 6) {
              goto LABEL_131;
            }
            if (*(_DWORD *)v3 != 1598377292 || *(_WORD *)(v3 + 4) != 17481) {
              goto LABEL_35;
            }
            goto LABEL_84;
          case 7:
            goto LABEL_63;
          case 0xA:
            if (*(void *)v3 == 0x424D455F44524F57 && *(_WORD *)(v3 + 8) == 17477) {
              goto LABEL_70;
            }
            if (*(void *)v3 == 0x4E4F48505F4D554ELL && *(_WORD *)(v3 + 8) == 21317) {
              goto LABEL_140;
            }
            if (v5 == 7) {
              goto LABEL_63;
            }
            if (v5 != 10) {
              goto LABEL_131;
            }
LABEL_73:
            if (*(void *)v3 == 0x4F435F4850415247 && *(_WORD *)(v3 + 8) == 21587) {
              goto LABEL_144;
            }
            if (v5 != 10) {
              goto LABEL_131;
            }
            if (*(void *)v3 != 0x4D4152465F4D554ELL || *(_WORD *)(v3 + 8) != 21317) {
              goto LABEL_131;
            }
            goto LABEL_150;
          case 0xC:
LABEL_57:
            if (*(void *)v3 == 0x5F545345425F4E49 && *(_DWORD *)(v3 + 8) == 1213481296) {
              goto LABEL_139;
            }
            if (v5 == 10) {
              goto LABEL_73;
            }
            if (v5 != 7) {
              goto LABEL_131;
            }
LABEL_63:
            if (*(_DWORD *)v3 != 1130316609 || *(_DWORD *)(v3 + 3) != 1414745923) {
              goto LABEL_131;
            }
            goto LABEL_137;
          case 0xD:
LABEL_69:
            uint64_t v22 = (uint64_t *)v3;
            goto LABEL_127;
          case 0x10:
            if (*(void *)v3 != 0x5F54534F435F4341 || *(void *)(v3 + 8) != 0x4445485355504E55)
            {
              switch(*(unsigned char *)(v3 + 23))
              {
                case 7:
                  goto LABEL_63;
                case 0xA:
                  goto LABEL_73;
                case 0xC:
                  goto LABEL_57;
                case 0xD:
                  goto LABEL_69;
                default:
                  goto LABEL_131;
              }
            }
            goto LABEL_138;
          default:
            goto LABEL_131;
        }
      }
      uint64_t v8 = *(void *)(v3 + 8);
      if (v8 != 6) {
        break;
      }
      if (**(_DWORD **)v3 == 1281315657 && *(_WORD *)(*(void *)v3 + 4) == 17741)
      {
LABEL_40:
        uint64_t v14 = operator new(0x20uLL);
        v14[1] = 0;
        void v14[2] = 0;
        *uint64_t v14 = &unk_1F0A5FED0;
        uint64_t v15 = v14 + 3;
        uint64_t v16 = &unk_1F0A52DB8;
LABEL_151:
        std::exception v14[3] = v16;
        goto LABEL_152;
      }
      uint64_t v8 = *(void *)(v3 + 8);
      if (v8 != 6) {
        goto LABEL_90;
      }
      uint64_t v11 = *(int **)v3;
      if (**(_DWORD **)v3 == 1598377292 && *(_WORD *)(*(void *)v3 + 4) == 17481)
      {
LABEL_84:
        uint64_t v14 = operator new(0x20uLL);
        v14[1] = 0;
        void v14[2] = 0;
        *uint64_t v14 = &unk_1F0A5FF40;
        uint64_t v15 = v14 + 3;
        uint64_t v16 = &unk_1F0A52E18;
        goto LABEL_151;
      }
      if ((v5 & 0x80) != 0)
      {
        int v28 = *v11;
        int v29 = *((unsigned __int16 *)v11 + 2);
        if (v28 != 1398756169 || v29 != 19529)
        {
          uint64_t v8 = *(void *)(v3 + 8);
          goto LABEL_90;
        }
      }
      else
      {
        if (v5 != 6) {
          goto LABEL_131;
        }
LABEL_35:
        if (*(_DWORD *)v3 != 1398756169 || *(_WORD *)(v3 + 4) != 19529)
        {
LABEL_131:
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v3, "LIN_POSTERIOR"))
          {
            char v40 = operator new(0x20uLL);
            v40[1] = 0;
            v40[2] = 0;
            *char v40 = &unk_1F0A60F00;
            std::vector<unsigned int> v41 = v40 + 3;
            uint64_t v42 = &unk_1F0A55F58;
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v3, "LIN_AC_POSTERIOR"))
          {
            char v40 = operator new(0x20uLL);
            v40[1] = 0;
            v40[2] = 0;
            *char v40 = &unk_1F0A61C58;
            std::vector<unsigned int> v41 = v40 + 3;
            uint64_t v42 = &unk_1F0A57BD8;
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v3, "LOG_AC_POSTERIOR"))
          {
            char v40 = operator new(0x20uLL);
            v40[1] = 0;
            v40[2] = 0;
            *char v40 = &unk_1F0A61C90;
            std::vector<unsigned int> v41 = v40 + 3;
            uint64_t v42 = &unk_1F0A57C10;
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v3, "AC_COST_COLLAPSED_1"))
          {
            char v40 = operator new(0x20uLL);
            v40[1] = 0;
            v40[2] = 0;
            *char v40 = &unk_1F0A61EF8;
            std::vector<unsigned int> v41 = v40 + 3;
            uint64_t v42 = &unk_1F0A58428;
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v3, "LIN_POSTERIOR_1"))
          {
            char v40 = operator new(0x20uLL);
            v40[1] = 0;
            v40[2] = 0;
            *char v40 = &unk_1F0A611A0;
            std::vector<unsigned int> v41 = v40 + 3;
            uint64_t v42 = &unk_1F0A56518;
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v3, "LOG_POSTERIOR_1"))
          {
            char v40 = operator new(0x20uLL);
            v40[1] = 0;
            v40[2] = 0;
            *char v40 = &unk_1F0A611D8;
            std::vector<unsigned int> v41 = v40 + 3;
            uint64_t v42 = &unk_1F0A56550;
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v3, "AC_COST_2"))
          {
            char v40 = operator new(0x20uLL);
            v40[1] = 0;
            v40[2] = 0;
            *char v40 = &unk_1F0A61168;
            std::vector<unsigned int> v41 = v40 + 3;
            uint64_t v42 = &unk_1F0A564E0;
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v3, "AC_COST_UNPUSHED_2"))
          {
            char v40 = operator new(0x20uLL);
            v40[1] = 0;
            v40[2] = 0;
            *char v40 = &unk_1F0A61D00;
            std::vector<unsigned int> v41 = v40 + 3;
            uint64_t v42 = &unk_1F0A58050;
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v3, "LIN_AC_POSTERIOR_2"))
          {
            char v40 = operator new(0x20uLL);
            v40[1] = 0;
            v40[2] = 0;
            *char v40 = &unk_1F0A61D38;
            std::vector<unsigned int> v41 = v40 + 3;
            uint64_t v42 = &unk_1F0A58088;
          }
          else
          {
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v3, "LOG_AC_POSTERIOR_2"))
            {
              long long v63 = 0u;
              long long v64 = 0u;
              long long v61 = 0u;
              long long v62 = 0u;
              long long v59 = 0u;
              long long v60 = 0u;
              long long v57 = 0u;
              long long v58 = 0u;
              long long v55 = 0u;
              long long v56 = 0u;
              long long v53 = 0u;
              long long v54 = 0u;
              long long v51 = 0u;
              long long v52 = 0u;
              long long v49 = 0u;
              long long v50 = 0u;
              *(_OWORD *)long long __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              int v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown feature type: ", 22);
              int v45 = *(char *)(v3 + 23);
              if (v45 >= 0) {
                uint64_t v46 = v3;
              }
              else {
                uint64_t v46 = *(void *)v3;
              }
              if (v45 >= 0) {
                uint64_t v47 = *(unsigned __int8 *)(v3 + 23);
              }
              else {
                uint64_t v47 = *(void *)(v3 + 8);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
            }
            char v40 = operator new(0x20uLL);
            v40[1] = 0;
            v40[2] = 0;
            *char v40 = &unk_1F0A61D70;
            std::vector<unsigned int> v41 = v40 + 3;
            uint64_t v42 = &unk_1F0A580C0;
          }
          v40[3] = v42;
          uint64_t v43 = (std::__shared_weak_count *)*((void *)&v65 + 1);
          *(void *)&long long v65 = v41;
          *((void *)&v65 + 1) = v40;
          if (!v43) {
            goto LABEL_164;
          }
          long long v25 = v43;
LABEL_163:
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          goto LABEL_164;
        }
      }
      uint64_t v14 = operator new(0x28uLL);
      v14[1] = 0;
      void v14[2] = 0;
      *uint64_t v14 = &unk_1F0A5FF08;
      uint64_t v15 = v14 + 3;
      std::exception v14[3] = &unk_1F0A52DE8;
      v14[4] = this + 20;
LABEL_152:
      *(void *)&long long v65 = v15;
      *((void *)&v65 + 1) = v14;
LABEL_164:
      std::vector<std::shared_ptr<quasar::WlatArcFeatureExtractor>>::push_back[abi:ne180100](v2, &v65);
      if (*((void *)&v65 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v65 + 1));
      }
      v3 += 24;
      if (v3 == v4) {
        goto LABEL_167;
      }
    }
    if (v8 == 10 && **(void **)v3 == 0x424D455F44524F57 && *(_WORD *)(*(void *)v3 + 8) == 17477)
    {
LABEL_70:
      std::allocate_shared[abi:ne180100]<quasar::WlatArcFeWordEmbedding,std::allocator<quasar::WlatArcFeWordEmbedding>,std::shared_ptr<marisa::Trie> &,std::shared_ptr<kaldi::Matrix<float>> &,void>((uint64_t *)&this[37].__r_.__value_.__l.__size_, this[38].__r_.__value_.__r.__words, __p);
      long long v23 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      long long v24 = (std::__shared_weak_count *)*((void *)&v65 + 1);
      long long v65 = v23;
      if (!v24) {
        goto LABEL_164;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      long long v25 = (std::__shared_weak_count *)__p[1];
      if (!__p[1]) {
        goto LABEL_164;
      }
      goto LABEL_163;
    }
LABEL_90:
    if (v8 == 10)
    {
      if (**(void **)v3 == 0x4E4F48505F4D554ELL && *(_WORD *)(*(void *)v3 + 8) == 21317)
      {
LABEL_140:
        uint64_t v14 = operator new(0x20uLL);
        v14[1] = 0;
        void v14[2] = 0;
        *uint64_t v14 = &unk_1F0A60838;
        uint64_t v15 = v14 + 3;
        uint64_t v16 = &unk_1F0A54448;
        goto LABEL_151;
      }
      uint64_t v8 = *(void *)(v3 + 8);
    }
    if (v8 == 16)
    {
      if (**(void **)v3 == 0x5F54534F435F4341 && *(void *)(*(void *)v3 + 8) == 0x4445485355504E55)
      {
LABEL_138:
        uint64_t v14 = operator new(0x20uLL);
        v14[1] = 0;
        void v14[2] = 0;
        *uint64_t v14 = &unk_1F0A61C20;
        uint64_t v15 = v14 + 3;
        uint64_t v16 = &unk_1F0A57BA8;
        goto LABEL_151;
      }
      uint64_t v8 = *(void *)(v3 + 8);
    }
    if (v8 == 12)
    {
      if (**(void **)v3 == 0x5F545345425F4E49 && *(_DWORD *)(*(void *)v3 + 8) == 1213481296)
      {
LABEL_139:
        uint64_t v14 = operator new(0x20uLL);
        v14[1] = 0;
        void v14[2] = 0;
        *uint64_t v14 = &unk_1F0A60A30;
        uint64_t v15 = v14 + 3;
        uint64_t v16 = &unk_1F0A54DF0;
        goto LABEL_151;
      }
      uint64_t v8 = *(void *)(v3 + 8);
    }
    if (v8 == 7)
    {
      if (**(_DWORD **)v3 == 1130316609 && *(_DWORD *)(*(void *)v3 + 3) == 1414745923)
      {
LABEL_137:
        uint64_t v14 = operator new(0x20uLL);
        v14[1] = 0;
        void v14[2] = 0;
        *uint64_t v14 = &unk_1F0A60EC8;
        uint64_t v15 = v14 + 3;
        uint64_t v16 = &unk_1F0A55F28;
        goto LABEL_151;
      }
      uint64_t v8 = *(void *)(v3 + 8);
    }
    if (v8 == 10)
    {
      if (**(void **)v3 == 0x4F435F4850415247 && *(_WORD *)(*(void *)v3 + 8) == 21587)
      {
LABEL_144:
        uint64_t v14 = operator new(0x20uLL);
        v14[1] = 0;
        void v14[2] = 0;
        *uint64_t v14 = &unk_1F0A607C8;
        uint64_t v15 = v14 + 3;
        uint64_t v16 = &unk_1F0A543E8;
        goto LABEL_151;
      }
      uint64_t v8 = *(void *)(v3 + 8);
      if (v8 == 10)
      {
        if (**(void **)v3 == 0x4D4152465F4D554ELL && *(_WORD *)(*(void *)v3 + 8) == 21317)
        {
LABEL_150:
          uint64_t v14 = operator new(0x20uLL);
          v14[1] = 0;
          void v14[2] = 0;
          *uint64_t v14 = &unk_1F0A60800;
          uint64_t v15 = v14 + 3;
          uint64_t v16 = &unk_1F0A54418;
          goto LABEL_151;
        }
        if ((v5 & 0x80) == 0) {
          goto LABEL_131;
        }
      }
    }
    if (v8 != 13) {
      goto LABEL_131;
    }
    uint64_t v22 = *(uint64_t **)v3;
LABEL_127:
    uint64_t v37 = *v22;
    uint64_t v38 = *(uint64_t *)((char *)v22 + 5);
    if (v37 != 0x54534F505F474F4CLL || v38 != 0x524F49524554534FLL) {
      goto LABEL_131;
    }
    uint64_t v14 = operator new(0x20uLL);
    v14[1] = 0;
    void v14[2] = 0;
    *uint64_t v14 = &unk_1F0A60F38;
    uint64_t v15 = v14 + 3;
    uint64_t v16 = &unk_1F0A55F88;
    goto LABEL_151;
  }
LABEL_167:
  __p[0] = &v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1B513EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  char v20 = *(std::__shared_weak_count **)(v18 - 136);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  long long __p = (void *)(v18 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::HwcnConfidence::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(unsigned char *)(a2 + 553) = *(unsigned char *)(a1 + 800);
  *(_DWORD *)(a2 + 556) = *(_DWORD *)(a1 + 832);
  *(unsigned char *)(a2 + 560) = *(unsigned char *)(a1 + 836);
  quasar::HwcnConfidence::getHwcn(a1, (void *)a2, a3, &v71);
  if (!v71)
  {
    if (quasar::gLogLevel < 4) {
      goto LABEL_58;
    }
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v54 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Lattice is null. Doing nothing", 30);
LABEL_57:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v54);
    goto LABEL_58;
  }
  if (*((void *)v71 + 3) == *((void *)v71 + 2))
  {
    if (quasar::gLogLevel < 4) {
      goto LABEL_58;
    }
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v54 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Lattice is empty. Doing nothing", 31);
    goto LABEL_57;
  }
  quasar::WlatArcFeatureExtractor::runArcFeatureExtraction((uint64_t)v71, *(unsigned int *)(a1 + 976), a1 + 456);
  memset(&v53[1], 0, 24);
  v53[0] = &unk_1F0A517C0;
  kaldi::quasar::LatticeRnn::Run(*(void *)(a1 + 448), v71, v53);
  uint64_t v7 = v71;
  uint64_t v8 = (uint64_t *)*((void *)v71 + 5);
  int v9 = (uint64_t *)*((void *)v71 + 6);
  if (v8 != v9)
  {
    do
    {
      uint64_t v10 = *v8;
      float v11 = **(float **)(*v8 + 432);
      uint64_t v12 = *(float ***)(a1 + 960);
      if (v12) {
        float v11 = quasar::CalibrationMap::map(v12, v11);
      }
      *(double *)(v10 + 32) = v11;
      ++v8;
    }
    while (v8 != v9);
    uint64_t v7 = v71;
  }
  long long v50 = 0;
  long long v51 = 0;
  uint64_t v52 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  int v46 = 0;
  kaldi::WordHypLattice::GetBestMeanConfPath(v7, (uint64_t)&v50, &v47, &v46);
  uint64_t v43 = 0;
  int v44 = 0;
  unint64_t v45 = 0;
  uint64_t v13 = v47;
  for (uint64_t i = v48; v13 != i; v13 += 24)
  {
    int v15 = *(char *)(v13 + 23);
    if (v15 < 0)
    {
      if (*(void *)(v13 + 8) != 3) {
        goto LABEL_18;
      }
      uint64_t v16 = *(const std::string::value_type **)v13;
    }
    else
    {
      uint64_t v16 = (const std::string::value_type *)v13;
      if (v15 != 3) {
        goto LABEL_18;
      }
    }
    int v17 = *(unsigned __int16 *)v16;
    int v18 = *((unsigned __int8 *)v16 + 2);
    if (v17 != 16188 || v18 != 62)
    {
LABEL_18:
      std::string::basic_string[abi:ne180100]<0>(&v54, "~w00");
      std::string::basic_string[abi:ne180100]<0>(__p, " ");
      quasar::replaceAll(v13, (uint64_t)&v54, (char *)__p);
      if ((char)v42 < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE7(v55) < 0) {
        operator delete((void *)v54);
      }
      char v20 = v44;
      if ((unint64_t)v44 >= v45)
      {
        uint64_t v22 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v43, (long long *)v13);
      }
      else
      {
        if (*(char *)(v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)v13, *(void *)(v13 + 8));
        }
        else
        {
          long long v21 = *(_OWORD *)v13;
          v44->__r_.__value_.__r.__words[2] = *(void *)(v13 + 16);
          *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
        }
        uint64_t v22 = v20 + 1;
      }
      int v44 = v22;
    }
  }
  if (quasar::gLogLevel > 3)
  {
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v54 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
    long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Best conf result sessionId: ", 28);
    uint64_t v24 = *(void *)(*(void *)a4 + 24);
    uint64_t v27 = *(void *)(v24 + 128);
    uint64_t v25 = v24 + 128;
    uint64_t v26 = v27;
    int v28 = *(char *)(v25 + 23);
    if (v28 >= 0) {
      uint64_t v29 = v25;
    }
    else {
      uint64_t v29 = v26;
    }
    if (v28 >= 0) {
      uint64_t v30 = *(unsigned __int8 *)(v25 + 23);
    }
    else {
      uint64_t v30 = *(void *)(v25 + 8);
    }
    long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v29, v30);
    long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" result: ", 9);
    v40[0] = (uint64_t)" ";
    v40[1] = 1;
    quasar::join<std::vector<std::string>>(&v43, v40);
    if ((v42 & 0x80u) == 0) {
      long long v33 = __p;
    }
    else {
      long long v33 = (void **)__p[0];
    }
    if ((v42 & 0x80u) == 0) {
      uint64_t v34 = v42;
    }
    else {
      uint64_t v34 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
    if ((char)v42 < 0) {
      operator delete(__p[0]);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v54);
  }
  *(void *)&long long v54 = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  *(void *)&long long v54 = &v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  if (v50)
  {
    long long v51 = v50;
    operator delete(v50);
  }
  uint64_t v35 = *a3;
  uint64_t v37 = v71;
  uint64_t v36 = v72;
  if (v72) {
    atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(v35 + 216);
  *(void *)(v35 + 208) = v37;
  *(void *)(v35 + 216) = v36;
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  kaldi::CuVector<float>::~CuVector(v53);
LABEL_58:
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  return 0;
}

void sub_1B1B51924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a32);
  uint64_t v39 = *(std::__shared_weak_count **)(v37 - 104);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  _Unwind_Resume(a1);
}

void quasar::HwcnConfidence::getHwcn(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, quasar **a4@<X8>)
{
  uint64_t v8 = quasar::StopWatch::StopWatch((quasar::StopWatch *)v19, (clockid_t)a2);
  quasar::StopWatch::resume(v8, v9);
  uint64_t v10 = *a3;
  uint64_t v11 = a2[21];
  (*(void (**)(void))(**(void **)(*a2 + 16) + 32))(*(void *)(*a2 + 16));
  quasar::DecoderChainOutput::getWordHypLattice(v10, v11, a2[23], a4);
  uint64_t v12 = *a4;
  if (*a4 && *((void *)v12 + 2) != *((void *)v12 + 3))
  {
    if (*((unsigned char *)a2 + 553))
    {
      uint64_t v13 = (atomic_ullong *)a4[1];
      if (v13) {
        atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      std::allocate_shared[abi:ne180100]<kaldi::WordHypLattice,std::allocator<kaldi::WordHypLattice>,kaldi::WordHypLattice&,void>(*a4, v18);
      uint64_t v13 = (atomic_ullong *)*((void *)&v18[0] + 1);
      uint64_t v12 = *(quasar **)&v18[0];
    }
    uint64_t v14 = (std::__shared_weak_count *)a4[1];
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    quasar::HwcnConfidence::setPiPhoneStr((uint64_t)v14, (uint64_t)a2, (uint64_t)v12);
    quasar::mergeNodes(v12, (kaldi::WordHypLattice *)*(unsigned int *)(a1 + 696), 0);
    quasar::setNormWords(v12, v15);
    quasar::mergeArcs(v12, 0);
    if (v20) {
      kaldi::Timer::GetSeconds((kaldi::Timer *)5, v16);
    }
    if (quasar::gLogLevel >= 5)
    {
      memset(v18, 0, sizeof(v18));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Obtained HWCN in ", 17);
      int v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" s", 2);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v18);
    }
    *a4 = v12;
    a4[1] = (quasar *)v13;
  }
  *(void *)&v18[0] = v19;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
}

void sub_1B1B51C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v12 = *(std::__shared_weak_count **)(v9 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  a9 = (void **)(v10 - 176);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

float quasar::CalibrationMap::map(float **this, float result)
{
  long long v2 = *this;
  uint64_t v3 = this[1];
  if (*this != v3)
  {
    unint64_t v4 = ((char *)v3 - (char *)v2) >> 3;
    int v5 = *this;
    do
    {
      unint64_t v6 = v4 >> 1;
      uint64_t v7 = &v5[2 * (v4 >> 1)];
      float v9 = *v7;
      uint64_t v8 = v7 + 2;
      v4 += ~(v4 >> 1);
      if (v9 > result) {
        unint64_t v4 = v6;
      }
      else {
        int v5 = v8;
      }
    }
    while (v4);
    if (v5 == v3)
    {
      long long v2 = v3 - 2;
    }
    else if (v5 != v2)
    {
      long long v2 = v5;
      if (vabds_f32(result, *(v5 - 2)) < vabds_f32(result, *v5)) {
        long long v2 = v5 - 2;
      }
    }
    return v2[1];
  }
  return result;
}

void **std::vector<std::shared_ptr<quasar::WlatArcFeatureExtractor>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::exception v18[2] = v15 + 16;
    std::vector<std::shared_ptr<quasar::WlatArcFeatureExtractor>>::__swap_out_circular_buffer(a1, v18);
    float v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    float v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1B51DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::HwcnConfidence::registerParams(quasar::HwcnConfidence *this, quasar::SystemConfig *a2)
{
  quasar::HwcnConfidence::registerOtherParams(this, a2);
  quasar::HwcnConfidence::registerModelFiles(this, a2);
}

void quasar::HwcnConfidence::registerOtherParams(quasar::HwcnConfidence *this, quasar::SystemConfig *a2)
{
  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)this + 928, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-feature-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "Comma-separated list of arc features. Example: \"BAG_OF_PHONES,KEYWORD:hey,KEYWORD:Siri,LM_SCORE,AC_SCORE,NUM_FRAMES,LOG_POSTERIOR,LIN_POSTERIOR\"");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 648, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "sil-phone-csl-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing colon-separated list of silence phones.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 672, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "node-merge-tol-ms");
  std::string::basic_string[abi:ne180100]<0>(__p, "Node merging tolerance in ms");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 696, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "word-emb-marisa-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "MARISA trie file for word embedding lookup");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 704, (uint64_t)__p, 0, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "word-emb-mat-flt32-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Kaldi binary matrix file (float32) that stores word embeddings");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 728, (uint64_t)__p, 0, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "word-boundary-int-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word boundary file with format <integer-phone-id> [begin|end|singleton|internal|nonword]");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 752, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "unpronounced-word-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing newline-separated list of words with no pronunciation.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 776, (uint64_t)__p, 0, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-is-primary");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, write these confidence values, along with the HWCN nbest, to the main ASR output (resultChoices) so it can be used by downstream clients instead of the secondary ASR output (resultChoicesV2) that is only used for offline experimentation.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 800, (uint64_t)__p, 0, 259, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-criteria");
  std::string::basic_string[abi:ne180100]<0>(__p, "Type of nbest. One of MeanConfPath|TotalCostPath. (Default: MeanConfPath). MeanConfPath: paths with highest mean confidence. TotalCostPath: paths with lowest total cost (the usual ASR objective when confidence isn't present).");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 808, (uint64_t)__p, 0, 259, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-preserve-top-result");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, confidence will try not to change the top result. (Default: false).");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 836, (uint64_t)__p, 0, 259, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "calibration-map-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Text file with 2 columns of numbers. Lines must be sorted by the first column. Each confidence score will be mapped to the 2nd-column value of the line with the 1st-column value that is closest to the score. All values in the file (both columns) should be in the range 0-1 (not 0-1000). ");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 840, (uint64_t)__p, 0, 259, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B5231C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::HwcnConfidence::registerModelFiles(quasar::HwcnConfidence *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 552, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "forward-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 576, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "backward-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 600, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "arc-output-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 624, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B5257C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::HwcnConfidence::setPiPhoneStr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(a3 + 40);
  unint64_t v4 = *(uint64_t **)(a3 + 48);
  if (v3 == v4) {
    return;
  }
  unint64_t v6 = (kaldi::SilencePhoneSet *)(a2 + 96);
  do
  {
    uint64_t v7 = *v3;
    uint64_t v8 = *(unsigned __int16 **)(*v3 + 80);
    if (*(void *)(*v3 + 88) - (void)v8 == 24)
    {
      int v9 = *((char *)v8 + 23);
      if (v9 < 0)
      {
        if (*((void *)v8 + 1) == 3)
        {
          uint64_t v8 = *(unsigned __int16 **)v8;
LABEL_9:
          int v10 = *v8;
          int v11 = *((unsigned __int8 *)v8 + 2);
          if (v10 == 26995 && v11 == 108)
          {
            MEMORY[0x1B3EA7B20](v7 + 216, "sil");
            goto LABEL_47;
          }
        }
      }
      else if (v9 == 3)
      {
        goto LABEL_9;
      }
    }
    uint64_t v30 = 0;
    long long v31 = 0;
    unint64_t v32 = 0;
    unint64_t v13 = *(int **)(v7 + 104);
    uint64_t v14 = *(int **)(v7 + 112);
    if (v13 == v14) {
      goto LABEL_46;
    }
    do
    {
      int v15 = *v13;
      (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 168) + 88))(&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if (!__str.__r_.__value_.__l.__size_) {
            goto LABEL_30;
          }
          goto LABEL_19;
        }
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else
      {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        std::string v28 = __str;
      }
      p_str = &__str;
      if (!size) {
        goto LABEL_30;
      }
LABEL_19:
      int v18 = (unsigned __int8 *)p_str + size;
      char v19 = p_str;
      int v20 = (std::string *)v18;
      do
      {
        long long v21 = v19;
        uint64_t v22 = (unsigned __int8 *)v19;
        while (1)
        {
          int v23 = *v22++;
          if (v23 == 95) {
            break;
          }
          long long v21 = (std::string *)v22;
          if (v22 == v18)
          {
            long long v21 = v20;
            goto LABEL_25;
          }
        }
        char v19 = (std::string *)((char *)&v21->__r_.__value_.__l.__data_ + 1);
        int v20 = v21;
      }
      while (v22 != v18);
LABEL_25:
      if (v21 != (std::string *)v18 && (char *)v21 - (char *)p_str != -1)
      {
        std::string::basic_string(&v27, &__str, 0, (char *)v21 - (char *)p_str, (std::allocator<char> *)&v33);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        std::string v28 = v27;
      }
LABEL_30:
      if (!kaldi::SilencePhoneSet::isSilencePhone(v6, v15))
      {
        uint64_t v24 = v31;
        if ((unint64_t)v31 >= v32)
        {
          uint64_t v26 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v30, (long long *)&v28);
        }
        else
        {
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v31, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v25 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
            v31->__r_.__value_.__r.__words[2] = v28.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
          }
          uint64_t v26 = v24 + 1;
        }
        long long v31 = v26;
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      ++v13;
    }
    while (v13 != v14);
    uint64_t v7 = *v3;
LABEL_46:
    kaldi::JoinVectorToString(&v30, " ", 1, (long long *)(v7 + 216));
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_47:
    ++v3;
  }
  while (v3 != v4);
}

void sub_1B1B52874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26)
{
  a19 = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void quasar::StopWatch::resume(quasar::StopWatch *this, clockid_t a2)
{
  if (*((_DWORD *)this + 6))
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "StopWatch is already running.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  *((_DWORD *)this + 6) = 1;
  long long v2 = (quasar::StopWatch *)((char *)this + 32);
  kaldi::Timer::Reset(v2, a2);
}

uint64_t quasar::HwcnConfidence::affectsRecognitionResults(quasar::HwcnConfidence *this)
{
  return 1;
}

uint64_t quasar::HwcnConfidence::supportsEager(quasar::HwcnConfidence *this)
{
  return 1;
}

void quasar::HwcnConfidence::~HwcnConfidence(quasar::HwcnConfidence *this)
{
  quasar::HwcnConfidence::~HwcnConfidence(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void **v11;

  *(void *)this = &unk_1F0A52760;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 121);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 119);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 115);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 113);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 111);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 109);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((char *)this + 863) < 0) {
    operator delete(*((void **)this + 105));
  }
  if (*((char *)this + 831) < 0) {
    operator delete(*((void **)this + 101));
  }
  if (*((char *)this + 799) < 0) {
    operator delete(*((void **)this + 97));
  }
  if (*((char *)this + 775) < 0) {
    operator delete(*((void **)this + 94));
  }
  if (*((char *)this + 751) < 0) {
    operator delete(*((void **)this + 91));
  }
  if (*((char *)this + 727) < 0) {
    operator delete(*((void **)this + 88));
  }
  if (*((char *)this + 695) < 0) {
    operator delete(*((void **)this + 84));
  }
  if (*((char *)this + 671) < 0) {
    operator delete(*((void **)this + 81));
  }
  if (*((char *)this + 647) < 0) {
    operator delete(*((void **)this + 78));
  }
  if (*((char *)this + 623) < 0) {
    operator delete(*((void **)this + 75));
  }
  if (*((char *)this + 599) < 0) {
    operator delete(*((void **)this + 72));
  }
  if (*((char *)this + 575) < 0) {
    operator delete(*((void **)this + 69));
  }
  uint64_t v8 = (void *)*((void *)this + 66);
  if (v8)
  {
    *((void *)this + 67) = v8;
    operator delete(v8);
  }
  int v9 = (void *)*((void *)this + 63);
  if (v9) {
    operator delete(v9);
  }
  int v11 = (void **)((char *)this + 456);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v11);
  int v10 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v10) {
    std::default_delete<kaldi::quasar::LatticeRnn>::operator()[abi:ne180100]((uint64_t)this + 448, v10);
  }
  quasar::Decoder::~Decoder(this);
}

quasar::StopWatch *quasar::StopWatch::StopWatch(quasar::StopWatch *this, clockid_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 56) = 1;
  kaldi::Timer::Reset((quasar::StopWatch *)((char *)this + 32), a2);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  quasar::StopWatch::reset((uint64_t)this);
  return this;
}

void sub_1B1B52A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::StopWatch::reset(uint64_t this)
{
  if (*(_DWORD *)(this + 24))
  {
    memset(v1, 0, sizeof(v1));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "StopWatch is still running.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v1);
  }
  *(void *)(this + 72) = 0;
  *(void *)(this + 80) = 0;
  return this;
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6marisa4TrieENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  long long v2 = operator new(0x20uLL);
  __n128 result = _ZNSt3__120__shared_ptr_emplaceIN6marisa4TrieENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1B52C84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6marisa4TrieENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F6F0;
  marisa::Trie::Trie(a1 + 3);
  return a1;
}

void sub_1B1B52CE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<marisa::Trie>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F6F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<marisa::Trie>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F6F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<marisa::Trie>::__on_zero_shared(uint64_t a1)
{
}

void *_ZNSt3__115allocate_sharedB8ne180100IN5kaldi6MatrixIfEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  long long v2 = operator new(0x40uLL);
  __n128 result = _ZNSt3__120__shared_ptr_emplaceIN5kaldi6MatrixIfEENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1B52DAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN5kaldi6MatrixIfEENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F028;
  kaldi::Matrix<float>::Matrix((uint64_t)(a1 + 3));
  return a1;
}

void sub_1B1B52E08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::Matrix<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::Matrix<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::Matrix<float>>::__on_zero_shared(uint64_t a1)
{
  return kaldi::Matrix<float>::~Matrix(a1 + 24);
}

void std::default_delete<kaldi::quasar::LatticeRnn>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a2 + 1504));
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a2 + 1128));
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a2 + 752));
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a2 + 376));
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)a2);
    JUMPOUT(0x1B3EA8670);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::CalibrationMap,std::allocator<quasar::CalibrationMap>,std::string &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x30uLL);
  __n128 result = std::__shared_ptr_emplace<quasar::CalibrationMap>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::CalibrationMap>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1B52F54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::CalibrationMap>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::CalibrationMap>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FBF8;
  quasar::CalibrationMap::CalibrationMap((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1B52FB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::CalibrationMap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FBF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::CalibrationMap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FBF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::CalibrationMap>::__on_zero_shared(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t quasar::CalibrationMap::CalibrationMap(uint64_t a1, uint64_t a2)
{
  v54[19] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::ifstream::basic_ifstream(v52);
  uint64_t v4 = v52[0];
  if ((v53[*(void *)(v52[0] - 24) + 16] & 5) != 0)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    *(_OWORD *)&v35[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
    std::string v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Failed to open mapping file: ", 29);
    int v29 = *(char *)(a2 + 23);
    if (v29 >= 0) {
      uint64_t v30 = a2;
    }
    else {
      uint64_t v30 = *(void *)a2;
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v31 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v35);
  }
  memset(&__p, 0, sizeof(__p));
  char v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(v4 - 24)));
    unint64_t v6 = std::locale::use_facet(v35, v5);
    unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(v35);
    uint64_t v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v52, (uint64_t)&__p, v7);
    if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
      break;
    }
    std::string::basic_string[abi:ne180100]<0>(v35, " ");
    quasar::splitAndTrimNoEmpty(&__p, (char *)v35, &v32);
    if (SBYTE7(v36) < 0) {
      operator delete(v35[0].__locale_);
    }
    if (v32 != v33)
    {
      if ((char *)v33 - (char *)v32 != 48)
      {
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        *(_OWORD *)&v35[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
        long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Calibration file line does not have 2 columns: ", 47);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)p_p, size);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v35);
      }
      float v9 = std::stof(v32, 0);
      float v10 = std::stof(v32 + 1, 0);
      float v11 = v10;
      unint64_t v13 = *(float **)(a1 + 8);
      unint64_t v12 = *(void *)(a1 + 16);
      if ((unint64_t)v13 >= v12)
      {
        int v15 = *(float **)a1;
        uint64_t v16 = ((uint64_t)v13 - *(void *)a1) >> 3;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v12 - (void)v15;
        if (v18 >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 16, v19);
          int v15 = *(float **)a1;
          unint64_t v13 = *(float **)(a1 + 8);
        }
        else
        {
          int v20 = 0;
        }
        long long v21 = (float *)&v20[8 * v16];
        *long long v21 = v9;
        v21[1] = v11;
        uint64_t v22 = v21;
        if (v13 != v15)
        {
          do
          {
            uint64_t v23 = *((void *)v13 - 1);
            v13 -= 2;
            *((void *)v22 - 1) = v23;
            v22 -= 2;
          }
          while (v13 != v15);
          int v15 = *(float **)a1;
        }
        uint64_t v14 = v21 + 2;
        *(void *)a1 = v22;
        *(void *)(a1 + 8) = v21 + 2;
        *(void *)(a1 + 16) = &v20[8 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *unint64_t v13 = v9;
        v13[1] = v10;
        uint64_t v14 = v13 + 2;
      }
      *(void *)(a1 + 8) = v14;
    }
    v35[0].__locale_ = (std::locale::__imp *)&v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
    uint64_t v4 = v52[0];
  }
  quasar::CalibrationMap::init((float **)a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v52[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v52 + *(void *)(v52[0] - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v53);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v54);
  return a1;
}

void sub_1B1B534CC(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1B53558);
}

void sub_1B1B534DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  JUMPOUT(0x1B1B53530);
}

void sub_1B1B53500(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1B53530);
}

void sub_1B1B5351C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
}

void sub_1B1B5352C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a52);
  long long v54 = *(void **)v52;
  if (*(void *)v52)
  {
    *(void *)(v52 + 8) = v54;
    operator delete(v54);
  }
  _Unwind_Resume(a1);
}

float **quasar::CalibrationMap::init(float **this)
{
  uint64_t v1 = *this;
  long long v2 = this[1];
  if (*this == v2)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v10, "Calibration file has no entries");
    goto LABEL_12;
  }
  uint64_t v3 = (char *)v2 - (char *)v1;
  if ((unint64_t)v3 >= 9)
  {
    unint64_t v4 = v3 >> 3;
    if (v4 <= 2) {
      unint64_t v4 = 2;
    }
    float v6 = *v1;
    char v5 = v1 + 3;
    float v7 = v6;
    unint64_t v8 = v4 - 1;
    while (1)
    {
      float v9 = *(v5 - 1);
      if (v9 < v7 || v7 >= v9 && *v5 < *(v5 - 2)) {
        break;
      }
      v5 += 2;
      float v7 = v9;
      if (!--v8) {
        return this;
      }
    }
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v10, "Calibration is not sorted by first column");
LABEL_12:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v10);
  }
  return this;
}

void sub_1B1B53674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocate_shared[abi:ne180100]<quasar::WlatArcFeWordEmbedding,std::allocator<quasar::WlatArcFeWordEmbedding>,std::shared_ptr<marisa::Trie> &,std::shared_ptr<kaldi::Matrix<float>> &,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  float v6 = operator new(0x40uLL);
  __n128 result = std::__shared_ptr_emplace<quasar::WlatArcFeWordEmbedding>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<marisa::Trie> &,std::shared_ptr<kaldi::Matrix<float>> &,std::allocator<quasar::WlatArcFeWordEmbedding>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1B536D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::WlatArcFeWordEmbedding>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<marisa::Trie> &,std::shared_ptr<kaldi::Matrix<float>> &,std::allocator<quasar::WlatArcFeWordEmbedding>,0>(void *a1, uint64_t *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61210;
  quasar::WlatArcFeWordEmbedding::WlatArcFeWordEmbedding(a1 + 3, a2, a3);
  return a1;
}

void sub_1B1B53734(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeWordEmbedding>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeWordEmbedding>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeWordEmbedding>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeIsLme>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeIsLme>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FED0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeIsLme>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLmeId>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FF40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLmeId>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FF40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLmeId>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeIsSil>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FF08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeIsSil>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FF08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeIsSil>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeNumPhones>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeNumPhones>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeNumPhones>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostUnpushed>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostUnpushed>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostUnpushed>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeInBestPath>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeInBestPath>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeInBestPath>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCost>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCost>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCost>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeGraphCost>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A607C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeGraphCost>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A607C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeGraphCost>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeNumFrames>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeNumFrames>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeNumFrames>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60F38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60F38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLogPosterior>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60F00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60F00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLinPosterior>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinAcousticPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinAcousticPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLinAcousticPosterior>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogAcousticPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogAcousticPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLogAcousticPosterior>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostCollapsed1>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61EF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostCollapsed1>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61EF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostCollapsed1>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinPosterior1>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A611A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinPosterior1>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A611A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLinPosterior1>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogPosterior1>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A611D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogPosterior1>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A611D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLogPosterior1>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCost2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCost2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61168;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCost2>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostUnpushed2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostUnpushed2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61D00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostUnpushed2>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinAcousticPosterior2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinAcousticPosterior2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLinAcousticPosterior2>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogAcousticPosterior2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogAcousticPosterior2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLogAcousticPosterior2>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::vector<std::shared_ptr<quasar::WlatArcFeatureExtractor>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::WlatArcFeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::WlatArcFeatureExtractor>*>,std::reverse_iterator<std::shared_ptr<quasar::WlatArcFeatureExtractor>*>,std::reverse_iterator<std::shared_ptr<quasar::WlatArcFeatureExtractor>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::WlatArcFeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::WlatArcFeatureExtractor>*>,std::reverse_iterator<std::shared_ptr<quasar::WlatArcFeatureExtractor>*>,std::reverse_iterator<std::shared_ptr<quasar::WlatArcFeatureExtractor>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::WlatArcFeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::WlatArcFeatureExtractor>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::WlatArcFeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::WlatArcFeatureExtractor>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<kaldi::WordHypLattice,std::allocator<kaldi::WordHypLattice>,kaldi::WordHypLattice&,void>@<X0>(const kaldi::WordHypLattice *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x70uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::WordHypLattice>::__shared_ptr_emplace[abi:ne180100]<kaldi::WordHypLattice&,std::allocator<kaldi::WordHypLattice>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1B545A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::WordHypLattice>::__shared_ptr_emplace[abi:ne180100]<kaldi::WordHypLattice&,std::allocator<kaldi::WordHypLattice>,0>(void *a1, const kaldi::WordHypLattice *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E928;
  kaldi::WordHypLattice::WordHypLattice((kaldi::WordHypLattice *)(a1 + 3), a2);
  return a1;
}

void sub_1B1B545FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::WordHypLattice>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::WordHypLattice>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::WordHypLattice>::__on_zero_shared(uint64_t a1)
{
}

void sub_1B1B54720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1B5487C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1B54DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::random_device a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(a1);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1B1B54E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  long long v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      long long v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      long long v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
    }
    else {
      long long v15 = 0;
    }
    long long v18 = &v15[4 * v12];
    long long v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    long long v21 = v18;
    do
    {
      *(_DWORD *)long long v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    long long v22 = &v15[4 * v14];
    long long v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void std::vector<unsigned long>::__append(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  long long v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      long long v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      long long v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v14);
    }
    else {
      long long v15 = 0;
    }
    long long v18 = &v15[8 * v12];
    long long v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    long long v21 = v18;
    do
    {
      *(void *)long long v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    long long v22 = &v15[8 * v14];
    long long v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

uint64_t std::uniform_int_distribution<unsigned long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = a3[1];
  uint64_t v4 = result - *a3;
  if (result != *a3)
  {
    unint64_t v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      unint64_t v7 = __clz(v5);
      uint64_t v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v8 = 64;
      }
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        unint64_t v9 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0) {
    unint64_t v3 = (a3 >> 5) + 1;
  }
  else {
    unint64_t v3 = a3 >> 5;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16) = a3 / v3;
  *(void *)(result + 24) = v3;
  unint64_t v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40) {
    unint64_t v5 = 0;
  }
  *(void *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16) = a3 / v3;
    *(void *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      unint64_t v6 = 0;
      *(void *)(result + 32) = v3 + v4 * v3 - a3;
      *(void *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(void *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(void *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = 0x80000000uLL >> v4 << (v4 + 1);
  }
LABEL_13:
  *(void *)(result + 48) = v6;
  unsigned int v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4) {
    unsigned int v7 = 0;
  }
  if (v4 >= 0x1F) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      do
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(void *)(a1 + 40) <= (unint64_t)v4);
      unint64_t v5 = *(void *)(a1 + 16);
      if (v5 >= 0x40) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = v2 << v5;
      }
      uint64_t v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      unint64_t v7 = *(void *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v7 = 0;
  }
  for (; v7 < *(void *)(a1 + 24); ++v7)
  {
    do
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(void *)(a1 + 48) <= (unint64_t)v8);
    unint64_t v9 = *(void *)(a1 + 16);
    if (v9 >= 0x3F) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v2 << (v9 + 1);
    }
    uint64_t v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t quasar::tennessee::Serialize(uint64_t a1, void *a2)
{
  uint64_t result = std::ostream::write();
  if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
  {
    memset(v4, 0, sizeof(v4));
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  return result;
}

int **quasar::EndpointerRequestFilter::EndpointerRequestFilter(int **a1, const std::string *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "|");
  quasar::splitAndTrimNoEmpty(a2, (char *)__p, &v22);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = v22;
  for (size_t i = v23; v4 != i; ++v4)
  {
    int v6 = std::stoi(v4, 0, 10);
    int v7 = v6;
    unint64_t v9 = a1[1];
    unint64_t v8 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      unint64_t v11 = *a1;
      uint64_t v12 = v9 - *a1;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v8 - (void)v11;
      if (v14 >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), v15);
        unint64_t v11 = *a1;
        unint64_t v9 = a1[1];
      }
      else
      {
        uint64_t v16 = 0;
      }
      long long v17 = (int *)&v16[4 * v12];
      *long long v17 = v7;
      uint64_t v10 = v17 + 1;
      while (v9 != v11)
      {
        int v18 = *--v9;
        *--long long v17 = v18;
      }
      *a1 = v17;
      a1[1] = v10;
      a1[2] = (int *)&v16[4 * v15];
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *unint64_t v9 = v6;
      uint64_t v10 = v9 + 1;
    }
    a1[1] = v10;
  }
  __p[0] = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return a1;
}

void sub_1B1B55780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::HybridEndpointConfig::registerParams(quasar::HybridEndpointConfig *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Endpoint model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 456, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "model-feature-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence of features for endpoint model");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 480, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "model is memory mapped");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 504, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "endpoint-threshold");
  std::string::basic_string[abi:ne180100]<0>(__p, "Threshold for final endpoint detection");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "trailing-silence-limit");
  std::string::basic_string[abi:ne180100]<0>(__p, "An upper limit for trailing silence duration (milliseconds) after which recognizer should be forced to endpoint");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 4, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "only-use-acoustic-endpointer");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only use acoustic endpointer score when it is enabled");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 452, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "extra-delay-ms");
  std::string::basic_string[abi:ne180100]<0>(__p, "delaying the endpointer trigger decision by th given amount of time (in msec), when specified.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 448, (uint64_t)__p, 0, 55, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "silence-posterior-nfhat-limit");
  std::string::basic_string[abi:ne180100]<0>(__p, "An upper limit for silence posterior NFHat estimate (milliseconds) after which recognizer should be forced to endpoint");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 8, (uint64_t)__p, 0, 66, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "server-features-latency-clamp-begin");
  std::string::basic_string[abi:ne180100]<0>(__p, "Starting point (in milliseconds) for ServerFeaturesLatency Clamp. ServerFeaturesLatency will be clamped at this value for the duration of clamp i.e [serverFeaturesLatencyClampBeginMs, serverFeaturesLatencyClampEndMs]");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 12, (uint64_t)__p, 0, 66, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "server-features-latency-clamp-end");
  std::string::basic_string[abi:ne180100]<0>(__p, "Ending point (in milliseconds) for ServerFeaturesLatency Clamp. ServerFeaturesLatency will be allowed to update after this point i.e it will not be clamped anymore");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 16, (uint64_t)__p, 0, 66, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B55C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::HybridEndpointConfig::init(quasar::HybridEndpointConfig *this)
{
  quasar::EndpointConfigHelper::initModels((uint64_t)this + 456, (uint64_t)this + 24, *((unsigned __int8 *)this + 504));
  quasar::EndpointConfigHelper::initFeatures((uint64_t)this + 480, (uint64_t)this + 400);
  if (*(float *)this < 0.0 || *(float *)this > 1.0)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "endpoint-threshold needs to be configured to a value between 0-1");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
}

void quasar::HybridEndpointConfig::HybridEndpointConfig(uint64_t a1)
{
  *(_DWORD *)a1 = -1082130432;
  *(_OWORD *)(a1 + 4) = xmmword_1B25614D0;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 24));
}

void sub_1B1B55DE4(_Unwind_Exception *a1)
{
  char v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 408) = v5;
    operator delete(v5);
  }
  kaldi::nnet1::Nnet::~Nnet(v2);
  _Unwind_Resume(a1);
}

void quasar::HybridEndpointConfig::~HybridEndpointConfig(void **this)
{
  if (*((char *)this + 503) < 0) {
    operator delete(this[60]);
  }
  if (*((char *)this + 479) < 0) {
    operator delete(this[57]);
  }
  size_t v2 = this[53];
  if (v2)
  {
    this[54] = v2;
    operator delete(v2);
  }
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this[50];
  if (v3)
  {
    this[51] = v3;
    operator delete(v3);
  }
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(this + 3));
}

void quasar::EagerResultAcceptConfig::registerParams(quasar::EagerResultAcceptConfig *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Endpoint model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 400, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "model-feature-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence of features for endpoint model");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 424, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "model is memory mapped");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 448, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B55FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::EagerResultAcceptConfig::~EagerResultAcceptConfig(void **this)
{
  if (*((char *)this + 447) < 0) {
    operator delete(this[53]);
  }
  if (*((char *)this + 423) < 0) {
    operator delete(this[50]);
  }
  size_t v2 = this[47];
  if (v2)
  {
    this[48] = v2;
    operator delete(v2);
  }
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)this);
}

void quasar::DefaultServerEndpointFeatsConfig::registerParams(quasar::DefaultServerEndpointFeatsConfig *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, quasar::EP_NUM_OF_WORDS_STR[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num-of-words default");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 24, (uint64_t)__p, 0, 51, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, quasar::EP_NUM_TRAILING_SIL_STR[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "trailing-silence-duration default");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 28, (uint64_t)__p, 0, 51, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, quasar::EP_EOS_LIKELIHOOD_STR[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "eos-likelihood default");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 32, (uint64_t)__p, 0, 51, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, quasar::EP_SILENCE_POSTERIOR_STR[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "silence-posterior default");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 36, (uint64_t)__p, 0, 51, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B56278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *quasar::DefaultServerEndpointFeatsConfig::init(uint64_t **this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  char v7 = quasar::EP_NUM_OF_WORDS_STR[0];
  uint64_t v8 = v2;
  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_impl<std::pair<char const*,int>>(this, (uint64_t)&v7);
  uint64_t v3 = *((unsigned int *)this + 7);
  char v7 = quasar::EP_NUM_TRAILING_SIL_STR[0];
  uint64_t v8 = v3;
  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_impl<std::pair<char const*,int>>(this, (uint64_t)&v7);
  uint64_t v4 = *((unsigned int *)this + 8);
  char v7 = quasar::EP_EOS_LIKELIHOOD_STR[0];
  uint64_t v8 = v4;
  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_impl<std::pair<char const*,float>>(this, (uint64_t)&v7);
  uint64_t v5 = *((unsigned int *)this + 9);
  char v7 = quasar::EP_SILENCE_POSTERIOR_STR[0];
  uint64_t v8 = v5;
  return std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_impl<std::pair<char const*,float>>(this, (uint64_t)&v7);
}

void quasar::HybridEndpointer::HybridEndpointer(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 4));
}

void sub_1B1B56964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v27);
  std::mutex::~mutex(v23);
  std::__tree<std::string>::destroy(v25, *v24);
  quasar::EagerResultAcceptConfig::~EagerResultAcceptConfig(v26);
  std::vector<quasar::HybridEndpointConfig>::__destroy_vector::operator()[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void sub_1B1B569C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  JUMPOUT(0x1B1B56AC0);
}

void sub_1B1B569E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    JUMPOUT(0x1B1B56A38);
  }
  JUMPOUT(0x1B1B56A3CLL);
}

void sub_1B1B569F4()
{
}

void sub_1B1B569FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x1B1B56A3CLL);
}

void sub_1B1B56A18()
{
}

void sub_1B1B56A20()
{
}

void sub_1B1B56A64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1B56AB0);
}

void sub_1B1B56AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  quasar::PTree::~PTree((quasar::PTree *)va);
  JUMPOUT(0x1B1B56ABCLL);
}

uint64_t std::vector<quasar::HybridEndpointConfig>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 9)
  {
    if (a2 >> 55) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + (v6 << 9);
    std::vector<quasar::HybridEndpointConfig>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::HybridEndpointConfig>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1B56B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::HybridEndpointConfig>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::HybridEndpointConfig>::emplace<std::string const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v4 = (a2 - *a1) >> 9;
  unint64_t v7 = a1[2];
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = v7;
  if (v2 < v7)
  {
    if (a2 != v2)
    {
      uint64_t v17 = v5;
      quasar::HybridEndpointConfig::HybridEndpointConfig((uint64_t)&v12);
    }
    quasar::HybridEndpointConfig::HybridEndpointConfig(a2);
  }
  unint64_t v8 = ((uint64_t)(v2 - v3) >> 9) + 1;
  if (!(v8 >> 55))
  {
    uint64_t v9 = v6 - v3;
    if (v9 >> 8 > v8) {
      unint64_t v8 = v9 >> 8;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFE00) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    uint64_t v16 = v5;
    if (v10) {
      unint64_t v11 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>>(v5, v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = v11;
    unint64_t v13 = &v11[32 * v4];
    uint64_t v14 = v13;
    uint64_t v15 = &v11[32 * v10];
    std::__split_buffer<quasar::HybridEndpointConfig>::emplace_back<std::string const&>(&v12);
  }
  std::vector<int>::__throw_length_error[abi:ne180100]();
}

void sub_1B1B56D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

void quasar::HybridEndpointer::~HybridEndpointer(quasar::HybridEndpointer *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 536));
  std::__tree<std::string>::destroy((uint64_t)this + 488, *((char **)this + 62));
  quasar::EagerResultAcceptConfig::~EagerResultAcceptConfig((void **)this + 4);
  unint64_t v2 = (void **)this;
  std::vector<quasar::HybridEndpointConfig>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t *quasar::HybridEndpointer::defaultServerEndpointFeatures@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return std::map<std::string,float>::map[abi:ne180100](a2, this + 61);
}

void quasar::HybridEndpointer::updateEndpointThreshold(quasar::HybridEndpointer *this, float a2)
{
  if (a2 > 0.0)
  {
    uint64_t v5 = (std::mutex *)((char *)this + 536);
    std::mutex::lock((std::mutex *)((char *)this + 536));
    *((float *)this + 150) = a2;
    std::mutex::unlock(v5);
  }
}

void quasar::HybridEndpointer::updateEndpointDelayedTriggerSwitch(quasar::HybridEndpointer *this, char a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 536);
  std::mutex::lock((std::mutex *)((char *)this + 536));
  *((unsigned char *)this + 604) = a2;
  std::mutex::unlock(v4);
}

BOOL quasar::HybridEndpointer::configureForRequest(quasar::HybridEndpointer *this, __int32 a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 536);
  std::mutex::lock((std::mutex *)((char *)this + 536));
  *((void *)this + 3) = 0;
  uint64_t v5 = *(void *)this;
  uint64_t v6 = *((void *)this + 1);
  if (*(void *)this == v6)
  {
    BOOL v10 = 0;
LABEL_10:
    if (quasar::gLogLevel >= 2)
    {
      memset(v12, 0, sizeof(v12));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"No available endpointer for samplingRate = ", 43);
      std::ostream::operator<<();
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v12);
    }
  }
  else
  {
    do
    {
      unint64_t v7 = *(__int32 **)(v5 + 432);
      unint64_t v8 = wmemchr(*(__int32 **)(v5 + 424), a2, ((uint64_t)v7 - *(void *)(v5 + 424)) >> 2);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = v7;
      }
      if (v9 != *(__int32 **)(v5 + 432))
      {
        *((void *)this + 3) = v5;
        *((_DWORD *)this + 150) = *(_DWORD *)v5;
        BOOL v10 = 1;
        goto LABEL_13;
      }
      v5 += 512;
    }
    while (v5 != v6);
    BOOL v10 = *((void *)this + 3) != 0;
    if (!v10) {
      goto LABEL_10;
    }
  }
LABEL_13:
  std::mutex::unlock(v4);
  return v10;
}

void sub_1B1B56FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

BOOL quasar::HybridEndpointer::evalEndPoint(uint64_t a1, float *a2, int a3, int a4, unsigned int **a5, int a6, double **a7, _DWORD *a8, double a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16)
{
  unint64_t v32 = (std::mutex *)(a1 + 536);
  std::mutex::lock((std::mutex *)(a1 + 536));
  uint64_t v34 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v34 + 452))
  {
    BOOL v35 = *(float *)(a1 + 600) < a11;
  }
  else
  {
    *a8 = 0;
    if ((float)*(unsigned int *)(v34 + 16) > a16)
    {
      LODWORD(v33) = *(_DWORD *)(v34 + 12);
      a16 = fmin(a16, (double)v33);
    }
    if (*(_DWORD *)(v34 + 4) <= a4 || (float)*(unsigned int *)(v34 + 8) <= a15)
    {
      double v44 = (double)a4;
      long long v45 = a7[2];
      long long v46 = a7[1];
      if (v46 >= v45)
      {
        long long v48 = *a7;
        uint64_t v49 = v46 - *a7;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v51 = (char *)v45 - (char *)v48;
        if (v51 >> 2 > v50) {
          unint64_t v50 = v51 >> 2;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v50;
        }
        if (v52)
        {
          long long v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a7 + 2), v52);
          long long v48 = *a7;
          long long v46 = a7[1];
        }
        else
        {
          long long v53 = 0;
        }
        long long v54 = (double *)&v53[8 * v49];
        long long v45 = (double *)&v53[8 * v52];
        *long long v54 = v44;
        long long v47 = v54 + 1;
        while (v46 != v48)
        {
          uint64_t v55 = *((void *)v46-- - 1);
          *((void *)v54-- - 1) = v55;
        }
        *a7 = v54;
        a7[1] = v47;
        a7[2] = v45;
        if (v48)
        {
          operator delete(v48);
          long long v45 = a7[2];
        }
      }
      else
      {
        *long long v46 = v44;
        long long v47 = v46 + 1;
      }
      a7[1] = v47;
      double v56 = a15;
      if (v47 >= v45)
      {
        long long v58 = *a7;
        uint64_t v59 = v47 - *a7;
        unint64_t v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v61 = (char *)v45 - (char *)v58;
        if (v61 >> 2 > v60) {
          unint64_t v60 = v61 >> 2;
        }
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v60;
        }
        if (v62)
        {
          long long v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a7 + 2), v62);
          long long v58 = *a7;
          long long v47 = a7[1];
        }
        else
        {
          long long v63 = 0;
        }
        long long v64 = (double *)&v63[8 * v59];
        long long v65 = &v63[8 * v62];
        *long long v64 = v56;
        long long v57 = v64 + 1;
        while (v47 != v58)
        {
          uint64_t v66 = *((void *)v47-- - 1);
          *((void *)v64-- - 1) = v66;
        }
        *a7 = v64;
        a7[1] = v57;
        a7[2] = (double *)v65;
        if (v58) {
          operator delete(v58);
        }
      }
      else
      {
        *long long v47 = v56;
        long long v57 = v47 + 1;
      }
      a7[1] = v57;
      BOOL v35 = 1;
    }
    else
    {
      if (*(unsigned char *)(a1 + 604)) {
        *a8 = *(_DWORD *)(v34 + 448);
      }
      quasar::EndpointConfigHelper::computeFeats(v34 + 400, a3, a4, a5, a6, &v95, a10, a12, a13, a14, a15, a16);
      long long v37 = v95;
      long long v36 = v96;
      if ((int)kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(*(void *)(a1 + 24) + 24)) != v36 - v37)
      {
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v78 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"Feature dim=", 12);
        int v72 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" does not match model dim=", 26);
        kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(*(void *)(a1 + 24) + 24));
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v78);
      }
      kaldi::Matrix<float>::Matrix((uint64_t)v77, 1, (unint64_t)((char *)v96 - (char *)v95) >> 3, 0, 0);
      long long v38 = v95;
      if (v96 != v95)
      {
        uint64_t v39 = 0;
        unint64_t v40 = v96 - v95;
        uint64_t v41 = v77[0];
        if (v40 <= 1) {
          unint64_t v40 = 1;
        }
        do
        {
          float v42 = v38[v39];
          *(float *)(v41 + 4 * v39++) = v42;
        }
        while (v40 != v39);
      }
      long long v74 = 0u;
      long long v75 = 0u;
      int32x2_t v73 = (int32x2_t)&unk_1F0A51768;
      char v76 = 0;
      uint64_t v43 = *(void *)(a1 + 24);
      kaldi::CuMatrix<float>::CuMatrix<float>(&v78, v77, 111, 0);
      kaldi::nnet1::Nnet::Feedforward((uint64_t *)(v43 + 24), (uint64_t)&v78, &v73, -1, 0);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v78);
      if (HIDWORD(v74) == 1 || DWORD2(v74) == 1)
      {
        if (quasar::gLogLevel >= 6)
        {
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v78 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
          kaldi::MatrixBase<float>::Write(v77, &v78, 0, 0);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)", ep-nnet-value=", 16);
          std::ostream::operator<<();
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v78);
        }
        *a2 = *(float *)v74;
      }
      else if (quasar::gLogLevel >= 1)
      {
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v78 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"Nnet output for endpointing is incorrect", 40);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v78);
      }
      double v68 = *(double *)(a1 + 528);
      double v69 = v68;
      if (v68 > -1.0) {
        double v69 = v68 + (double)*(int *)(*(void *)(a1 + 24) + 448);
      }
      if (v69 <= 0.0 || v69 > a9)
      {
        float v70 = *a2;
        float v71 = *(float *)(a1 + 600);
        if (*(unsigned char *)(a1 + 604))
        {
          BOOL v35 = 0;
          if (v68 == -1.0 && v70 >= v71)
          {
            BOOL v35 = 0;
            *(double *)(a1 + 528) = a9;
          }
        }
        else
        {
          if (&v95 != a7 && v70 >= v71)
          {
            std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)a7, (char *)v95, (uint64_t)v96, v96 - v95);
            float v70 = *a2;
            float v71 = *(float *)(a1 + 600);
          }
          BOOL v35 = v70 >= v71;
        }
      }
      else
      {
        if (&v95 != a7) {
          std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)a7, (char *)v95, (uint64_t)v96, v96 - v95);
        }
        BOOL v35 = 1;
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v73);
      kaldi::Matrix<float>::~Matrix((uint64_t)v77);
      if (v95)
      {
        std::vector<int>::pointer v96 = v95;
        operator delete(v95);
      }
    }
  }
  std::mutex::unlock(v32);
  return v35;
}

void sub_1B1B57670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  JUMPOUT(0x1B1B57684);
}

void sub_1B1B57680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  uint64_t v5 = *(void **)(v3 - 168);
  if (v5)
  {
    *(void *)(v3 - 160) = v5;
    operator delete(v5);
  }
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1B1B576B4()
{
}

uint64_t quasar::HybridEndpointer::acceptEagerResult(void *a1, int a2, int a3, unsigned int **a4, int a5, char *a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  if (a1[52] != a1[51])
  {
    unint64_t v13 = (kaldi::nnet1::Nnet *)(a1 + 4);
    quasar::EndpointConfigHelper::computeFeats((uint64_t)(a1 + 51), a2, a3, a4, a5, (double **)&__p, a7, a8, a9, a10, a11, a12);
    uint64_t v15 = __p;
    uint64_t v14 = v30;
    if ((int)kaldi::nnet1::Nnet::InputDim(v13) != (v14 - v15) >> 3)
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Feature dim=", 12);
      long long v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" does not match model dim=", 26);
      kaldi::nnet1::Nnet::InputDim(v13);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v31);
    }
    kaldi::Matrix<float>::Matrix((uint64_t)v28, 1, (unint64_t)(v30 - (unsigned char *)__p) >> 3, 0, 0);
    uint64_t v16 = (double *)__p;
    if (v30 != __p)
    {
      uint64_t v17 = 0;
      unint64_t v18 = (v30 - (unsigned char *)__p) >> 3;
      uint64_t v19 = v28[0];
      if (v18 <= 1) {
        unint64_t v18 = 1;
      }
      do
      {
        float v20 = v16[v17];
        *(float *)(v19 + 4 * v17++) = v20;
      }
      while (v18 != v17);
    }
    long long v26 = 0u;
    long long v25 = 0u;
    int32x2_t v24 = (int32x2_t)&unk_1F0A51768;
    char v27 = 0;
    kaldi::CuMatrix<float>::CuMatrix<float>(&v31, v28, 111, 0);
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)v13, (uint64_t)&v31, &v24, -1, 0);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v31);
    if (HIDWORD(v25) == 1 || DWORD2(v25) == 1)
    {
      if (quasar::gLogLevel >= 6)
      {
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v31 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
        kaldi::MatrixBase<float>::Write(v28, &v31, 0, 0);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)", nnet-output=", 14);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v31);
      }
      if (*(float *)v25 >= 0.99)
      {
        if (&__p != (void **)a6) {
          std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a6, (char *)__p, (uint64_t)v30, (v30 - (unsigned char *)__p) >> 3);
        }
        uint64_t v21 = 1;
        goto LABEL_21;
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Nnet output for recognitionResult validation is incorrect", 57);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v31);
    }
    uint64_t v21 = 0;
LABEL_21:
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v24);
    kaldi::Matrix<float>::~Matrix((uint64_t)v28);
    if (__p)
    {
      uint64_t v30 = __p;
      operator delete(__p);
    }
    return v21;
  }
  if (quasar::gLogLevel >= 2)
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"EagerResultAccept not configured", 32);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v31);
  }
  return 0;
}

void sub_1B1B57A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  JUMPOUT(0x1B1B57AB0);
}

uint64_t *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_impl<std::pair<char const*,int>>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<char const*,int>>((uint64_t)a1, a2, (uint64_t)&__p);
  uint64_t v3 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)__p + 4);
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = (void **)__p;
    std::string __p = 0;
    if (v5) {
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&v9, v5);
    }
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v7, v3, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v4;
}

void sub_1B1B57B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

float std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<char const*,int>>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (float *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)v6 + 4, *(char **)a2);
  float result = (float)*(int *)(a2 + 8);
  v6[14] = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1B57C04(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_impl<std::pair<char const*,float>>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<char const*,float>>((uint64_t)a1, a2, (uint64_t)&__p);
  uint64_t v3 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)__p + 4);
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = (void **)__p;
    std::string __p = 0;
    if (v5) {
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&v9, v5);
    }
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v7, v3, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v4;
}

void sub_1B1B57CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

float std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<char const*,float>>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (float *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)v6 + 4, *(char **)a2);
  float result = *(float *)(a2 + 8);
  v6[14] = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1B57D3C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<quasar::HybridEndpointConfig>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::HybridEndpointConfig::~HybridEndpointConfig(v4 - 64);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::HybridEndpointConfig>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>,std::reverse_iterator<quasar::HybridEndpointConfig*>,std::reverse_iterator<quasar::HybridEndpointConfig*>,std::reverse_iterator<quasar::HybridEndpointConfig*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 55) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 9);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>,std::reverse_iterator<quasar::HybridEndpointConfig*>,std::reverse_iterator<quasar::HybridEndpointConfig*>,std::reverse_iterator<quasar::HybridEndpointConfig*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 512;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (quasar::HybridEndpointConfig *)(v11 + v10);
    v10 -= 512;
    quasar::HybridEndpointConfig::HybridEndpointConfig(v12, (const quasar::HybridEndpointConfig *)(v10 + a3));
  }
  return a6;
}

quasar::HybridEndpointConfig *quasar::HybridEndpointConfig::HybridEndpointConfig(quasar::HybridEndpointConfig *this, const quasar::HybridEndpointConfig *a2)
{
  long long v4 = *(_OWORD *)a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *(_OWORD *)this = v4;
  kaldi::nnet1::Nnet::Nnet((quasar::HybridEndpointConfig *)((char *)this + 24), (const quasar::HybridEndpointConfig *)((char *)a2 + 24));
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  std::vector<quasar::EndpointConfigHelper::EndPointFeatType>::__init_with_size[abi:ne180100]<quasar::EndpointConfigHelper::EndPointFeatType*,quasar::EndpointConfigHelper::EndPointFeatType*>((void *)this + 50, *((const void **)a2 + 50), *((void *)a2 + 51), (uint64_t)(*((void *)a2 + 51) - *((void *)a2 + 50)) >> 2);
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)this + 53, *((const void **)a2 + 53), *((void *)a2 + 54), (uint64_t)(*((void *)a2 + 54) - *((void *)a2 + 53)) >> 2);
  int v5 = *((_DWORD *)a2 + 112);
  *((unsigned char *)this + 452) = *((unsigned char *)a2 + 452);
  *((_DWORD *)this + 112) = v5;
  if (*((char *)a2 + 479) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 19, *((const std::string::value_type **)a2 + 57), *((void *)a2 + 58));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 456);
    *((void *)this + 59) = *((void *)a2 + 59);
    *(_OWORD *)((char *)this + 456) = v6;
  }
  uint64_t v7 = (std::string *)((char *)this + 480);
  if (*((char *)a2 + 503) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 60), *((void *)a2 + 61));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 30);
    *((void *)this + 62) = *((void *)a2 + 62);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *((unsigned char *)this + 504) = *((unsigned char *)a2 + 504);
  return this;
}

void sub_1B1B5802C(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 479) < 0) {
    operator delete(*v5);
  }
  uint64_t v7 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 432) = v7;
    operator delete(v7);
  }
  long long v8 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 408) = v8;
    operator delete(v8);
  }
  kaldi::nnet1::Nnet::~Nnet(v1);
  _Unwind_Resume(a1);
}

void *std::vector<quasar::EndpointConfigHelper::EndPointFeatType>::__init_with_size[abi:ne180100]<quasar::EndpointConfigHelper::EndPointFeatType*,quasar::EndpointConfigHelper::EndPointFeatType*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1B580E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1B58164(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<quasar::HybridEndpointConfig>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 512;
    quasar::HybridEndpointConfig::~HybridEndpointConfig((void **)(i - 512));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<quasar::HybridEndpointConfig>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  size_t v8 = (quasar::HybridEndpointConfig *)v6;
  if (v7 < a3)
  {
    uint64_t v10 = (const quasar::HybridEndpointConfig *)(a2 + v6 - a4);
    size_t v8 = *(quasar::HybridEndpointConfig **)(a1 + 8);
    do
    {
      quasar::HybridEndpointConfig::HybridEndpointConfig(v8, v10);
      uint64_t v10 = (const quasar::HybridEndpointConfig *)((char *)v10 + 512);
      size_t v8 = (quasar::HybridEndpointConfig *)((char *)v8 + 512);
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *>((uint64_t)&v12, a2, v7, v6);
}

void sub_1B1B5826C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__split_buffer<quasar::HybridEndpointConfig>::emplace_back<std::string const&>(long long **a1)
{
  uint64_t v2 = a1[2];
  if (v2 == a1[3])
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (char *)v3 - (char *)*a1;
    if (v3 <= *a1)
    {
      if (v2 == *a1) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = ((char *)v2 - (char *)*a1) >> 8;
      }
      uint64_t v12 = (uint64_t)a1[4];
      long long v26 = a1[4];
      unint64_t v13 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>>(v12, v11);
      uint64_t v14 = (quasar::HybridEndpointConfig *)&v13[32 * (v11 >> 2)];
      long long v23 = v13;
      v24.i64[0] = (uint64_t)v14;
      uint64_t v16 = (char *)&v13[32 * v15];
      v24.i64[1] = (uint64_t)v14;
      long long v25 = v16;
      uint64_t v17 = (const quasar::HybridEndpointConfig *)a1[1];
      uint64_t v18 = (char *)a1[2] - (char *)v17;
      if (v18)
      {
        uint64_t v19 = (quasar::HybridEndpointConfig *)((char *)v14 + (v18 & 0xFFFFFFFFFFFFFE00));
        uint64_t v20 = v18 >> 9 << 9;
        do
        {
          quasar::HybridEndpointConfig::HybridEndpointConfig(v14, v17);
          uint64_t v14 = (quasar::HybridEndpointConfig *)((char *)v14 + 512);
          uint64_t v17 = (const quasar::HybridEndpointConfig *)((char *)v17 + 512);
          v20 -= 512;
        }
        while (v20);
        unint64_t v13 = v23;
        uint64_t v14 = (quasar::HybridEndpointConfig *)v24.i64[0];
        int64x2_t v21 = *(int64x2_t *)(a1 + 1);
        uint64_t v16 = v25;
      }
      else
      {
        int64x2_t v21 = vdupq_n_s64((unint64_t)v17);
        uint64_t v19 = v14;
      }
      long long v23 = *a1;
      *a1 = v13;
      a1[1] = (long long *)v14;
      int64x2_t v24 = v21;
      long long v22 = (char *)a1[3];
      a1[2] = (long long *)v19;
      a1[3] = (long long *)v16;
      long long v25 = v22;
      std::__split_buffer<quasar::HybridEndpointConfig>::~__split_buffer((uint64_t)&v23);
      uint64_t v2 = a1[2];
    }
    else
    {
      uint64_t v5 = v4 >> 9;
      BOOL v6 = v4 >> 9 < -1;
      uint64_t v7 = (v4 >> 9) + 2;
      if (v6) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v5 + 1;
      }
      unint64_t v9 = v8 >> 1;
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *>((uint64_t)&v23, v3, v2, (uint64_t)&v3[-32 * (v8 >> 1)]);
      uint64_t v2 = v10;
      a1[1] -= 32 * v9;
      a1[2] = v10;
    }
  }
  quasar::HybridEndpointConfig::HybridEndpointConfig((uint64_t)v2);
}

void sub_1B1B583BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::HybridEndpointConfig>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::HybridEndpointConfig>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>,std::reverse_iterator<quasar::HybridEndpointConfig*>,std::reverse_iterator<quasar::HybridEndpointConfig*>,std::reverse_iterator<quasar::HybridEndpointConfig*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>,quasar::HybridEndpointConfig*,quasar::HybridEndpointConfig*,quasar::HybridEndpointConfig*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a3 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 512);
      uint64_t v11 = a4 + v7 - 512;
      *(_DWORD *)(v11 + 16) = *(_DWORD *)(a3 + v7 - 496);
      *(_OWORD *)uint64_t v11 = v10;
      kaldi::nnet1::Nnet::operator=((kaldi::nnet1::Nnet *)(a4 + v7 - 488), (uint64_t *)(a3 + v7 - 488));
      if (a3 != a4)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 - 112), *(char **)(v9 - 112), *(void *)(v9 - 104), (uint64_t)(*(void *)(v9 - 104) - *(void *)(v9 - 112)) >> 2);
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 - 88), *(char **)(v9 - 88), *(void *)(v9 - 80), (uint64_t)(*(void *)(v9 - 80) - *(void *)(v9 - 88)) >> 2);
      }
      int v12 = *(_DWORD *)(v9 - 64);
      *(unsigned char *)(v8 - 60) = *(unsigned char *)(v9 - 60);
      *(_DWORD *)(v8 - 64) = v12;
      std::string::operator=((std::string *)(v8 - 56), (const std::string *)(v9 - 56));
      std::string::operator=((std::string *)(v8 - 32), (const std::string *)(v9 - 32));
      *(unsigned char *)(v8 - 8) = *(unsigned char *)(v9 - 8);
      v7 -= 512;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    long long v7 = *v5;
    *(_DWORD *)(a4 + 16) = *((_DWORD *)v5 + 4);
    *(_OWORD *)a4 = v7;
    kaldi::nnet1::Nnet::operator=((kaldi::nnet1::Nnet *)(a4 + 24), (uint64_t *)v5 + 3);
    if ((long long *)a4 != v5)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 400), *((char **)v5 + 50), *((void *)v5 + 51), (uint64_t)(*((void *)v5 + 51) - *((void *)v5 + 50)) >> 2);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 424), *((char **)v5 + 53), *((void *)v5 + 54), (uint64_t)(*((void *)v5 + 54) - *((void *)v5 + 53)) >> 2);
    }
    int v8 = *((_DWORD *)v5 + 112);
    *(unsigned char *)(a4 + 452) = *((unsigned char *)v5 + 452);
    *(_DWORD *)(a4 + 448) = v8;
    std::string::operator=((std::string *)(a4 + 456), (const std::string *)v5 + 19);
    std::string::operator=((std::string *)(a4 + 480), (const std::string *)v5 + 20);
    *(unsigned char *)(a4 + 504) = *((unsigned char *)v5 + 504);
    a4 += 512;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>,quasar::HybridEndpointConfig*,quasar::HybridEndpointConfig*,quasar::HybridEndpointConfig*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      quasar::HybridEndpointConfig::HybridEndpointConfig((quasar::HybridEndpointConfig *)(a4 + v7), (const quasar::HybridEndpointConfig *)(a2 + v7));
      v7 += 512;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1B586A8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 512;
    do
    {
      quasar::HybridEndpointConfig::~HybridEndpointConfig((void **)(v4 + v2));
      v2 -= 512;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,float>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,float>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,float>,std::__tree_node<std::__value_type<std::string,float>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1B5870C(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,float>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,float>,std::__tree_node<std::__value_type<std::string,float>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<std::string const,float> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

float std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<std::string const,float> const&>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  float result = *(float *)(a2 + 24);
  *((float *)v6 + 14) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1B588C0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizerConfig::SpeechRecognizerConfig(quasar::SystemConfig *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, const quasar::DecoderOptions *a6)
{
  int v12 = quasar::SystemConfig::SystemConfig(a1);
  *((_WORD *)v12 + 804) = 0;
  *(_OWORD *)((char *)v12 + 1576) = 0u;
  *(_OWORD *)((char *)v12 + 1592) = 0u;
  *(_OWORD *)((char *)v12 + 1544) = 0u;
  *(_OWORD *)((char *)v12 + 1560) = 0u;
  *((_DWORD *)v12 + 403) = 27;
  *((unsigned char *)v12 + 1616) = 0;
  if (quasar::SystemConfig::readJsonFile((uint64_t)v12, a2, a3, a4, a5, 0) != 2) {
    quasar::SpeechRecognizerConfig::Initialize((std::string *)a1, a6);
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Unsupported config file version");
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1F0A56490;
}

void sub_1B1B589CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  quasar::SpeechRecognizerConfig::SpeechRecognizerConfig(v1);
  quasar::SystemConfig::~SystemConfig(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizerConfig::Initialize(std::string *this, const quasar::DecoderOptions *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "misc-shared.");
  quasar::SystemConfig::setPrefix(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = (char *)operator new(0x68uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1F0A601A8;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *((_DWORD *)v3 + 18) = 4000;
  v3[76] = 0;
  *((void *)v3 + 11) = 0;
  *((void *)v3 + 12) = 0;
  *((void *)v3 + 10) = 0;
  quasar::MiscSharedConfig::registerParams((quasar::MiscSharedConfig *)(v3 + 24), (quasar::SystemConfig *)this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "misc-shared");
  quasar::SystemConfig::readPtree((uint64_t)this, (uint64_t)&__p);
}

void sub_1B1B591A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v19 - 121) < 0)
  {
    operator delete(*(void **)(v19 - 144));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&__p);
      if (*(char *)(v19 - 97) < 0) {
        operator delete(*(void **)(v19 - 120));
      }
      int64x2_t v21 = *(std::__shared_weak_count **)(v19 - 88);
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void quasar::SpeechRecognizerConfig::SpeechRecognizerConfig(quasar::SpeechRecognizerConfig *this, const quasar::SystemConfig *a2, const quasar::DecoderOptions *a3)
{
  uint64_t v4 = quasar::SystemConfig::SystemConfig(this, a2, 1, 1);
  *(_WORD *)(v4 + 1608) = 0;
  *(_OWORD *)(v4 + 1576) = 0u;
  *(_OWORD *)(v4 + 1592) = 0u;
  *(_OWORD *)(v4 + 1544) = 0u;
  *(_OWORD *)(v4 + 1560) = 0u;
  *(_DWORD *)(v4 + 1612) = 27;
  *(unsigned char *)(v4 + 1616) = 0;
  quasar::SpeechRecognizerConfig::Initialize((std::string *)v4, a3);
}

void sub_1B1B59438(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 200);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  quasar::SpeechRecognizerConfig::SpeechRecognizerConfig(v1);
  quasar::SystemConfig::~SystemConfig(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizerConfig::~SpeechRecognizerConfig(quasar::SpeechRecognizerConfig *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 200);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 198);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 196);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 194);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  quasar::SystemConfig::~SystemConfig(this);
}

void quasar::MiscSharedConfig::registerParams(quasar::MiscSharedConfig *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "voice-trigger-phrase");
  std::string::basic_string[abi:ne180100]<0>(__p, "VoiceTrigger phrase as space separated list of tokens as recognized by the decoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 56, (uint64_t)__p, 0, 172, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "voice-trigger-phrases");
  std::string::basic_string[abi:ne180100]<0>(__p, "VoiceTrigger phrases as comma/space separated list of tokens as recognized by the decoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 0, 172, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lead-buffer-leeway");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of samples the primary buffer is allowed to fall behind secondary buffers");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 48, (uint64_t)__p, 0, 237, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "mil-is-ane-ready-on-low-end-device-v2");
  std::string::basic_string[abi:ne180100]<0>(__p, "(default false) set this field to true if MIL in the datapack has all the lowend support");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 52, (uint64_t)__p, 0, 261, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B596A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::MiscSharedConfig::init(std::string *this)
{
  int v2 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v2 < 0)
  {
    if (this->__r_.__value_.__l.__size_) {
      goto LABEL_8;
    }
  }
  else if (*((unsigned char *)&this->__r_.__value_.__s + 23))
  {
    goto LABEL_8;
  }
  if ((this[3].__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if (!this[3].__r_.__value_.__s.__data_[7]) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (this[2].__r_.__value_.__r.__words[2])
  {
LABEL_7:
    std::string::operator=(this, (std::string *)((char *)this + 56));
    LOBYTE(v2) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
LABEL_8:
  if ((v2 & 0x80) != 0)
  {
    if (!this->__r_.__value_.__l.__size_) {
      return;
    }
  }
  else if (!(_BYTE)v2)
  {
    return;
  }
  quasar::toLower((uint64_t)this, (uint64_t)__p);
  std::string::basic_string[abi:ne180100]<0>(v29, ",");
  quasar::splitAndTrimNoEmpty((const std::string *)__p, (char *)v29, v31);
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (SBYTE7(v13) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = v31[0];
  if (v31[0] != v31[1])
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"trigger phrase: ", 16);
      int v5 = *(char *)(v3 + 23);
      if (v5 >= 0) {
        uint64_t v6 = v3;
      }
      else {
        uint64_t v6 = *(void *)v3;
      }
      if (v5 >= 0) {
        uint64_t v7 = *(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v7 = *(void *)(v3 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v13 = 0;
    quasar::splitStringToTokens(v3);
  }
  data = (uint64_t *)this[1].__r_.__value_.__l.__data_;
  std::string::size_type size = (uint64_t *)this[1].__r_.__value_.__l.__size_;
  unint64_t v10 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (size - data));
  if (size == data) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  std::__introsort<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*,false>(data, size, (uint64_t)v29, v11, 1);
  if (quasar::gLogLevel >= 5)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"num of trigger phrases: ", 24);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  __p[0] = v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1B59994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::string __p = (void *)(v14 - 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::EndPointModelConfig::registerParams(quasar::EndPointModelConfig *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Endpointing model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "feature-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "List of features");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)v6, (uint64_t)this + 24, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "voice-trigger-phrase");
  std::string::basic_string[abi:ne180100]<0>(__p, "VoiceTrigger phrase as space separated list of tokens as recognized by the decoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 88, (uint64_t)__p, 0, 93, 0, 171, 0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B59B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::EndPointModelConfig::init(quasar::EndPointModelConfig *this, const std::string *a2)
{
  *(void *)&long long v12 = *MEMORY[0x1E4F143B8];
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, ",");
    quasar::splitAndTrimNoEmpty(a2, v8, &__str);
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)((char *)this + 64));
    *(std::string *)((char *)this + 64) = __str;
    p_str = &__str;
    memset(&__str, 0, sizeof(__str));
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    char v5 = *(void **)v8;
    goto LABEL_13;
  }
  uint64_t v6 = (const std::string::value_type **)((char *)this + 88);
  if (*((char *)this + 111) < 0)
  {
    std::string::size_type v7 = *((void *)this + 12);
    if (!v7) {
      goto LABEL_14;
    }
    std::string::__init_copy_ctor_external(&__str, *v6, v7);
  }
  else
  {
    if (!*((unsigned char *)this + 111)) {
      goto LABEL_14;
    }
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    __str.__r_.__value_.__r.__words[2] = *((void *)this + 13);
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::wstring> *)((char *)this + 64), &__str, &v12, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    char v5 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_13:
    operator delete(v5);
  }
LABEL_14:
  if (*((char *)this + 23) < 0)
  {
    if (!*((void *)this + 1)) {
      return;
    }
LABEL_18:
    _ZNSt3__115allocate_sharedB8ne180100IN5kaldi5nnet14NnetENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  if (*((unsigned char *)this + 23)) {
    goto LABEL_18;
  }
}

void sub_1B1B59D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void quasar::SystemConfig::Version::str(quasar::SystemConfig::Version *this@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *(_DWORD *)this);
  uint64_t v4 = std::string::append(&v10, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *((_DWORD *)this + 1));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B59E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PTree::Error::~Error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F0A58F10;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1F0A58F10;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::OnlineFeatureMatrixOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of feature vectors processed w/o interruption");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "store-all-feats");
  std::string::basic_string[abi:ne180100]<0>(__p, "If set, all output features will be retained in memory for use after decoding ends");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B5A024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::RecogRequestFilter>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x84BDA12F684BDA13 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x12F684BDA12F685) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::RecogRequestFilter>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 216 * v6;
    std::vector<quasar::RecogRequestFilter>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::RecogRequestFilter>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1B5A10C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::RecogRequestFilter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizerConfig::UnsupportedVersionError::~UnsupportedVersionError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    std::string v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    std::string v10 = 0;
  }
  std::string v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  long long v16 = &v10[24 * v9];
  *(void *)std::string v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v11, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  v15 += 24;
  std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v14);
  return v12;
}

void sub_1B1B5A270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(void *a1, void *a2)
{
  if (a1 != a2)
  {
    v16[9] = v2;
    v16[10] = v3;
    char v6 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = a1;
      do
      {
        unint64_t v9 = v6;
        uint64_t v10 = v8[4];
        if (0x6DB6DB6DB6DB6DB7 * ((v10 - v8[3]) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                            * ((uint64_t)(v8[1] - *v8) >> 5)))
        {
          *(void *)&long long v14 = v8[3];
          *((void *)&v14 + 1) = v10;
          uint64_t v15 = v8[5];
          v9[1] = 0;
          void v9[2] = 0;
          *unint64_t v9 = 0;
          uint64_t v11 = v7;
          while (1)
          {
            uint64_t v12 = (char *)a1 + v11;
            std::vector<quasar::Token>::__vdeallocate((void **)((char *)a1 + v11 + 24));
            *(_OWORD *)(v12 + 24) = *(_OWORD *)v12;
            *((void *)v12 + 5) = *((void *)v12 + 2);
            *((void *)v12 + 1) = 0;
            *((void *)v12 + 2) = 0;
            *(void *)uint64_t v12 = 0;
            if (!v11) {
              break;
            }
            v11 -= 24;
            if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v14 + 1) - v14) >> 5) <= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)v12 - 2) - *((void *)v12 - 3)) >> 5)))
            {
              uint64_t v13 = (uint64_t)a1 + v11 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v13 = (uint64_t)a1;
LABEL_10:
          std::vector<quasar::Token>::__vdeallocate((void **)v13);
          *(_OWORD *)uint64_t v13 = v14;
          *(void *)(v13 + 16) = v15;
          uint64_t v15 = 0;
          long long v14 = 0uLL;
          v16[0] = (void **)&v14;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v16);
        }
        char v6 = v9 + 3;
        v7 += 24;
        unint64_t v8 = v9;
      }
      while (v9 + 3 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(void *a1, void *a2)
{
  if (a1 != a2)
  {
    v13[7] = v2;
    v13[8] = v3;
    char v5 = (void **)a1;
    char v6 = a1 + 3;
    if (a1 + 3 != a2)
    {
      do
      {
        uint64_t v7 = v6;
        unint64_t v8 = v5[4];
        if (0x6DB6DB6DB6DB6DB7 * ((v8 - (unsigned char *)v5[3]) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                    * (((unsigned char *)v5[1] - (unsigned char *)*v5) >> 5)))
        {
          *(void *)&long long v11 = v5[3];
          *((void *)&v11 + 1) = v8;
          uint64_t v12 = v5[5];
          v7[1] = 0;
          v7[2] = 0;
          *uint64_t v7 = 0;
          do
          {
            unint64_t v9 = v5;
            std::vector<quasar::Token>::__vdeallocate(v5 + 3);
            *(_OWORD *)(v5 + 3) = *(_OWORD *)v5;
            v5[5] = v5[2];
            v5[1] = 0;
            v5[2] = 0;
            *char v5 = 0;
            uint64_t v10 = (uint64_t)*(v5 - 3);
            v5 -= 3;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v11 + 1) - v11) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * (((uint64_t)*(v9 - 2) - v10) >> 5)));
          std::vector<quasar::Token>::__vdeallocate(v5 + 3);
          *(_OWORD *)(v5 + 3) = v11;
          v5[5] = v12;
          long long v11 = 0uLL;
          uint64_t v12 = 0;
          v13[0] = (void **)&v11;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v13);
        }
        char v6 = v7 + 3;
        char v5 = (void **)v7;
      }
      while (v7 + 3 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5);
  uint64_t v5 = *a1;
  uint64_t v6 = *a3;
  unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5);
  if (v4 <= 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5))
  {
    if (v7 <= v4) {
      return 0;
    }
    *a2 = v6;
    *a3 = v3;
    uint64_t v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    uint64_t v10 = a2 + 2;
    uint64_t v13 = a2[2];
    a2[2] = a3[2];
    a3[2] = v13;
    uint64_t v14 = *a1;
    if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5)))
    {
      *a1 = *a2;
      *a2 = v14;
      uint64_t v15 = a1[1];
      a1[1] = a2[1];
      a2[1] = v15;
      unint64_t v8 = a1 + 2;
LABEL_9:
      uint64_t result = 2;
      goto LABEL_10;
    }
  }
  else
  {
    if (v7 > v4)
    {
      unint64_t v8 = a1 + 2;
      *a1 = v6;
      *a3 = v5;
      uint64_t v9 = a1[1];
      a1[1] = a3[1];
      a3[1] = v9;
      uint64_t v10 = a3 + 2;
      uint64_t result = 1;
LABEL_10:
      uint64_t v20 = *v8;
      *unint64_t v8 = *v10;
      *uint64_t v10 = v20;
      return result;
    }
    *a1 = v3;
    *a2 = v5;
    uint64_t v16 = a1[1];
    a1[1] = a2[1];
    a2[1] = v16;
    unint64_t v8 = a2 + 2;
    uint64_t v17 = a1[2];
    a1[2] = a2[2];
    a2[2] = v17;
    uint64_t v18 = *a2;
    if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5)))
    {
      *a2 = *a3;
      *a3 = v18;
      uint64_t v19 = a2[1];
      a2[1] = a3[1];
      a3[1] = v19;
      uint64_t v10 = a3 + 2;
      goto LABEL_9;
    }
  }
  return 1;
}

void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<quasar::Token> *,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token>&,std::vector<quasar::Token>&)#1} &>(uint64_t a1, void **a2)
{
  char v22 = *(unsigned char **)a1;
  uint64_t v3 = v22;
  long long v23 = *(_OWORD *)(a1 + 8);
  unint64_t v4 = (void *)v23;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v5 = v4;
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v4 - v3) >> 5);
  if (v6 <= 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)*(a2 - 2) - (unsigned char *)*(a2 - 3)) >> 5))
  {
    uint64_t v10 = (void **)(a1 + 24);
    do
    {
      unint64_t v7 = v10;
      if (v10 >= a2) {
        break;
      }
      unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v10[1] - (unsigned char *)*v10) >> 5);
      v10 += 3;
    }
    while (v6 <= v11);
  }
  else
  {
    unint64_t v7 = (void **)a1;
    do
    {
      unint64_t v8 = v7[3];
      uint64_t v9 = v7[4];
      v7 += 3;
    }
    while (v6 <= 0x6DB6DB6DB6DB6DB7 * ((v9 - v8) >> 5));
  }
  if (v7 < a2)
  {
    do
    {
      uint64_t v12 = (uint64_t)*(a2 - 3);
      uint64_t v13 = (uint64_t)*(a2 - 2);
      a2 -= 3;
    }
    while (v6 > 0x6DB6DB6DB6DB6DB7 * ((v13 - v12) >> 5));
  }
  if (v7 < a2)
  {
    uint64_t v14 = *v7;
    uint64_t v15 = *a2;
    do
    {
      *unint64_t v7 = v15;
      *a2 = v14;
      uint64_t v16 = v7[1];
      v7[1] = a2[1];
      a2[1] = v16;
      uint64_t v17 = v7[2];
      v7[2] = a2[2];
      a2[2] = v17;
      uint64_t v3 = v22;
      uint64_t v5 = (void *)v23;
      unint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v23 - (void)v22) >> 5);
      do
      {
        uint64_t v14 = v7[3];
        uint64_t v19 = v7[4];
        v7 += 3;
      }
      while (v18 <= 0x6DB6DB6DB6DB6DB7 * ((v19 - (unsigned char *)v14) >> 5));
      do
      {
        uint64_t v15 = *(a2 - 3);
        uint64_t v20 = (uint64_t)*(a2 - 2);
        a2 -= 3;
      }
      while (v18 > 0x6DB6DB6DB6DB6DB7 * ((v20 - (uint64_t)v15) >> 5));
    }
    while (v7 < a2);
  }
  if (v7 - 3 != (void **)a1)
  {
    std::vector<quasar::Token>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(_OWORD *)(v7 - 3);
    *(void *)(a1 + 16) = *(v7 - 1);
    *(v7 - 3) = 0;
    *(v7 - 2) = 0;
    *(v7 - 1) = 0;
  }
  std::vector<quasar::Token>::__vdeallocate(v7 - 3);
  *(v7 - 3) = v3;
  *(v7 - 2) = v5;
  *(v7 - 1) = (void *)*((void *)&v23 + 1);
  char v22 = 0;
  long long v23 = 0uLL;
  uint64_t v24 = (void **)&v22;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v24);
  return v7;
}

void **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<quasar::Token> *,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token>&,std::vector<quasar::Token>&)#1} &>(uint64_t a1, void **a2)
{
  uint64_t v4 = 0;
  uint64_t v25 = *(unsigned char **)a1;
  uint64_t v5 = v25;
  long long v26 = *(_OWORD *)(a1 + 8);
  unint64_t v6 = (void *)v26;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  unint64_t v7 = v6;
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v6 - v5) >> 5);
  do
  {
    uint64_t v9 = *(void **)(a1 + v4 + 24);
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + v4 + 32) - (void)v9) >> 5);
    v4 += 24;
  }
  while (v10 > v8);
  unint64_t v11 = a1 + v4;
  if (v4 == 24)
  {
    do
    {
      if (v11 >= (unint64_t)a2) {
        break;
      }
      uint64_t v14 = (uint64_t)*(a2 - 3);
      uint64_t v15 = (uint64_t)*(a2 - 2);
      a2 -= 3;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 5) <= v8);
  }
  else
  {
    do
    {
      uint64_t v12 = (uint64_t)*(a2 - 3);
      uint64_t v13 = (uint64_t)*(a2 - 2);
      a2 -= 3;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v13 - v12) >> 5) <= v8);
  }
  if (v11 >= (unint64_t)a2)
  {
    uint64_t v17 = (void **)(a1 + v4);
  }
  else
  {
    uint64_t v16 = *a2;
    uint64_t v17 = (void **)(a1 + v4);
    unint64_t v18 = a2;
    do
    {
      *uint64_t v17 = v16;
      *unint64_t v18 = v9;
      uint64_t v19 = v17[1];
      v17[1] = v18[1];
      v18[1] = v19;
      uint64_t v20 = v17[2];
      v17[2] = v18[2];
      std::exception v18[2] = v20;
      uint64_t v5 = v25;
      unint64_t v7 = (void *)v26;
      unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v26 - (void)v25) >> 5);
      do
      {
        uint64_t v9 = v17[3];
        char v22 = v17[4];
        v17 += 3;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((v22 - (unsigned char *)v9) >> 5) > v21);
      do
      {
        uint64_t v16 = *(v18 - 3);
        uint64_t v23 = (uint64_t)*(v18 - 2);
        v18 -= 3;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((v23 - (uint64_t)v16) >> 5) <= v21);
    }
    while (v17 < v18);
  }
  if (v17 - 3 != (void **)a1)
  {
    std::vector<quasar::Token>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(_OWORD *)(v17 - 3);
    *(void *)(a1 + 16) = *(v17 - 1);
    *(v17 - 3) = 0;
    *(v17 - 2) = 0;
    *(v17 - 1) = 0;
  }
  std::vector<quasar::Token>::__vdeallocate(v17 - 3);
  *(v17 - 3) = v5;
  *(v17 - 2) = v7;
  *(v17 - 1) = (void *)*((void *)&v26 + 1);
  uint64_t v25 = 0;
  long long v26 = 0uLL;
  uint64_t v27 = (void **)&v25;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v27);
  return v17 - 3;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2)
{
  BOOL v4 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      uint64_t v5 = *(a2 - 3);
      uint64_t v6 = *a1;
      if (0x6DB6DB6DB6DB6DB7 * ((*(a2 - 2) - v5) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                             * ((a1[1] - *a1) >> 5)))
      {
        *a1 = v5;
        *(a2 - 3) = v6;
        uint64_t v7 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v7;
        uint64_t v8 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return v4;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a1 + 3, a2 - 3);
      return v4;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a1 + 3, a1 + 6, a2 - 3);
      return v4;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return v4;
    default:
      uint64_t v9 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a1 + 3, a1 + 6);
      unint64_t v10 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    uint64_t v13 = v10[1];
    if (0x6DB6DB6DB6DB6DB7 * ((v13 - *v10) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v9[1] - *v9) >> 5))) {
      break;
    }
LABEL_14:
    uint64_t v9 = v10;
    v11 += 24;
    v10 += 3;
    if (v10 == a2) {
      return 1;
    }
  }
  *(void *)&long long v18 = *v10;
  *((void *)&v18 + 1) = v13;
  uint64_t v19 = v10[2];
  *unint64_t v10 = 0;
  v10[1] = 0;
  void v10[2] = 0;
  uint64_t v14 = v11;
  while (1)
  {
    uint64_t v15 = (char *)a1 + v14;
    std::vector<quasar::Token>::__vdeallocate((void **)((char *)a1 + v14 + 72));
    *(_OWORD *)(v15 + 72) = *((_OWORD *)v15 + 3);
    *((void *)v15 + 11) = *((void *)v15 + 8);
    *((void *)v15 + 7) = 0;
    *((void *)v15 + 8) = 0;
    *((void *)v15 + 6) = 0;
    if (v14 == -48) {
      break;
    }
    v14 -= 24;
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v18 + 1) - v18) >> 5) <= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                                  * ((uint64_t)(*((void *)v15 + 4) - *((void *)v15 + 3)) >> 5)))
    {
      uint64_t v16 = (uint64_t)a1 + v14 + 72;
      goto LABEL_12;
    }
  }
  uint64_t v16 = (uint64_t)a1;
LABEL_12:
  std::vector<quasar::Token>::__vdeallocate((void **)v16);
  *(_OWORD *)uint64_t v16 = v18;
  *(void *)(v16 + 16) = v19;
  uint64_t v19 = 0;
  long long v18 = 0uLL;
  if (++v12 != 8)
  {
    uint64_t v20 = (void **)&v18;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v20);
    goto LABEL_14;
  }
  BOOL v4 = v10 + 3 == a2;
  uint64_t v20 = (void **)&v18;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v20);
  return v4;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a2, a3);
  uint64_t v9 = *a3;
  if (0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5)))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    uint64_t v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    uint64_t v12 = *a2;
    if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5)))
    {
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      uint64_t v14 = a2[2];
      a2[2] = a3[2];
      a3[2] = v14;
      uint64_t v15 = *a1;
      if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5)))
      {
        *a1 = *a2;
        *a2 = v15;
        uint64_t v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
        uint64_t v17 = a1[2];
        a1[2] = a2[2];
        a2[2] = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  if (0x6DB6DB6DB6DB6DB7 * ((a5[1] - *a5) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 5)))
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    uint64_t v13 = a4[2];
    a4[2] = a5[2];
    a5[2] = v13;
    uint64_t v14 = *a3;
    if (0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5)))
    {
      *a3 = *a4;
      *a4 = v14;
      uint64_t v15 = a3[1];
      a3[1] = a4[1];
      a4[1] = v15;
      uint64_t v16 = a3[2];
      a3[2] = a4[2];
      a4[2] = v16;
      uint64_t v17 = *a2;
      if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5)))
      {
        *a2 = *a3;
        *a3 = v17;
        uint64_t v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        uint64_t v19 = a2[2];
        a2[2] = a3[2];
        a3[2] = v19;
        uint64_t v20 = *a1;
        if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5)))
        {
          *a1 = *a2;
          *a2 = v20;
          uint64_t v21 = a1[1];
          a1[1] = a2[1];
          a2[1] = v21;
          uint64_t v22 = a1[2];
          a1[2] = a2[2];
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 24;
    if (a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (void **)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      uint64_t v14 = (uint64_t *)v6;
      do
      {
        uint64_t v15 = *v14;
        if (0x6DB6DB6DB6DB6DB7 * ((v14[1] - *v14) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                              * ((uint64_t)(*(void *)(a1 + 8)
                                                                                         - *(void *)a1) >> 5)))
        {
          *uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          uint64_t v16 = v14[1];
          v14[1] = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v16;
          uint64_t v17 = v14[2];
          void v14[2] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a4, v9, (void **)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 25)
    {
      unint64_t v18 = v8 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1},std::vector<quasar::Token>*>(a1, v6, a4, v18);
        v6 -= 24;
      }
      while (v18-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    v29[11] = v4;
    v29[12] = v5;
    uint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v12 = (void **)(a1 + 24 * v11);
      if (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2 >= a3)
      {
        uint64_t v16 = *v12;
      }
      else
      {
        unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 24 * v11 + 8) - (void)*v12) >> 5);
        unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v12[4] - (unsigned char *)v12[3]) >> 5);
        BOOL v15 = v13 > v14;
        if (v13 <= v14) {
          uint64_t v16 = *v12;
        }
        else {
          uint64_t v16 = v12[3];
        }
        if (v15)
        {
          v12 += 3;
          uint64_t v11 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      uint64_t v17 = a4[1];
      if (0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v12[1] - v16) >> 5) <= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                     * (((unsigned char *)v17 - (unsigned char *)*a4) >> 5)))
      {
        long long v26 = *a4;
        uint64_t v27 = v17;
        long long v28 = a4[2];
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        while (1)
        {
          unint64_t v18 = v12;
          std::vector<quasar::Token>::__vdeallocate(v7);
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v18;
          v7[2] = v18[2];
          *unint64_t v18 = 0;
          v18[1] = 0;
          std::exception v18[2] = 0;
          if (v9 < v11) {
            break;
          }
          uint64_t v19 = (2 * v11) | 1;
          uint64_t v12 = (void **)(a1 + 24 * v19);
          if (2 * v11 + 2 >= a3)
          {
            uint64_t v23 = *v12;
            uint64_t v11 = (2 * v11) | 1;
          }
          else
          {
            unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 24 * v19 + 8) - (void)*v12) >> 5);
            unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v12[4] - (unsigned char *)v12[3]) >> 5);
            BOOL v22 = v20 > v21;
            if (v20 <= v21) {
              uint64_t v23 = *v12;
            }
            else {
              uint64_t v23 = v12[3];
            }
            if (v22)
            {
              v12 += 3;
              uint64_t v11 = 2 * v11 + 2;
            }
            else
            {
              uint64_t v11 = (2 * v11) | 1;
            }
          }
          uint64_t v25 = v26;
          uint64_t v24 = v27;
          uint64_t v7 = v18;
          if (0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v12[1] - v23) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                        * (((unsigned char *)v27 - (unsigned char *)v26) >> 5)))
            goto LABEL_25;
        }
        uint64_t v25 = v26;
        uint64_t v24 = v27;
LABEL_25:
        std::vector<quasar::Token>::__vdeallocate(v18);
        *unint64_t v18 = v25;
        v18[1] = v24;
        std::exception v18[2] = v28;
        long long v26 = 0;
        uint64_t v27 = 0;
        long long v28 = 0;
        v29[0] = &v26;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v29);
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1},std::vector<quasar::Token>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    long long v8 = *(_OWORD *)a1;
    uint64_t v9 = *(void **)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>((void **)a1, a3, a4);
    std::vector<quasar::Token>::__vdeallocate(v7);
    if (v7 == (void **)(a2 - 24))
    {
      *(_OWORD *)uint64_t v7 = v8;
      v7[2] = v9;
      long long v8 = 0uLL;
      uint64_t v9 = 0;
    }
    else
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 - 24);
      v7[2] = *(void **)(a2 - 8);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      std::vector<quasar::Token>::__vdeallocate((void **)(a2 - 24));
      *(_OWORD *)(a2 - 24) = v8;
      *(void *)(a2 - 8) = v9;
      uint64_t v9 = 0;
      long long v8 = 0uLL;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, (uint64_t)(v7 + 3), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - a1 + 24) >> 3));
    }
    unint64_t v10 = (void **)&v8;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v10);
  }
}

void sub_1B1B5B988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void **std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = v5 + 1;
    uint64_t v9 = &a1[3 * v5 + 3];
    uint64_t v10 = (2 * v5) | 1;
    uint64_t v11 = 2 * v5 + 2;
    if (v11 < a3
      && 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[3 * v8 + 1] - (unsigned char *)*v9) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v9[4] - (unsigned char *)v9[3]) >> 5)))
    {
      v9 += 3;
      uint64_t v10 = v11;
    }
    std::vector<quasar::Token>::__vdeallocate(a1);
    *(_OWORD *)a1 = *(_OWORD *)v9;
    a1[2] = v9[2];
    *uint64_t v9 = 0;
    v9[1] = 0;
    void v9[2] = 0;
    a1 = v9;
    uint64_t v5 = v10;
  }
  while (v10 <= v7);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    v17[9] = v4;
    v17[10] = v5;
    unint64_t v8 = v6 >> 1;
    uint64_t v9 = (void **)(a1 + 24 * (v6 >> 1));
    uint64_t v10 = *(void **)(a2 - 16);
    uint64_t v11 = (void **)(a2 - 24);
    if (0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v9[1] - (unsigned char *)*v9) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                          * (((uint64_t)v10
                                                                                            - *(void *)(a2 - 24)) >> 5)))
    {
      unint64_t v14 = *(unsigned char **)(a2 - 24);
      BOOL v15 = v10;
      uint64_t v16 = *(void **)(a2 - 8);
      uint64_t *v11 = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      do
      {
        uint64_t v12 = v9;
        std::vector<quasar::Token>::__vdeallocate(v11);
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        void v11[2] = v12[2];
        *uint64_t v12 = 0;
        v12[1] = 0;
        v12[2] = 0;
        unint64_t v13 = v15;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (void **)(a1 + 24 * v8);
        uint64_t v11 = v12;
      }
      while (0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v9[1] - (unsigned char *)*v9) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                               * (((unsigned char *)v15 - v14) >> 5)));
      std::vector<quasar::Token>::__vdeallocate(v12);
      *uint64_t v12 = v14;
      v12[1] = v13;
      v12[2] = v16;
      unint64_t v14 = 0;
      BOOL v15 = 0;
      uint64_t v16 = 0;
      v17[0] = (void **)&v14;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v17);
    }
  }
}

void quasar::SystemConfig::Register<std::vector<std::string>>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  quasar::SystemConfig::Register(a1, a2, a3);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  BOOL v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v15[7] = v20;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  uint64_t v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5) {
      return;
    }
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  uint64_t v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (long long **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1B5BD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(std::vector<std::wstring> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<int>::pointer begin = (std::string *)this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = (std::wstring *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, (std::string *)this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    unint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    uint64_t v12 = (std::wstring *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, (std::string *)this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  BOOL v15 = v14;
  std::vector<std::wstring>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1B1B5BED8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1B5BEE0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100IN5kaldi5nnet14NnetENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  unint64_t v0 = operator new(0x190uLL);
  _ZNSt3__120__shared_ptr_emplaceIN5kaldi5nnet14NnetENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v0);
}

void sub_1B1B5BF20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_emplaceIN5kaldi5nnet14NnetENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EFB8;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 3));
}

void sub_1B1B5BF7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::nnet1::Nnet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EFB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::nnet1::Nnet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EFB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::nnet1::Nnet>::__on_zero_shared(uint64_t a1)
{
}

void quasar::RecogRequestFilter::~RecogRequestFilter(quasar::RecogRequestFilter *this)
{
  uint64_t v5 = (void **)((char *)this + 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v5 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  BOOL v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::__shared_ptr_emplace<quasar::MiscSharedConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A601A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::MiscSharedConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A601A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::MiscSharedConfig>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::MiscSharedConfig>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::MiscSharedConfig>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  uint64_t v3 = (void **)(a2 + 24);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void std::__shared_ptr_emplace<quasar::EndPointModelConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A608A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::EndPointModelConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A608A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::EndPointModelConfig>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::EndPointModelConfig>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::EndPointModelConfig>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 111) < 0) {
    operator delete(*(void **)(a2 + 88));
  }
  BOOL v4 = (void **)(a2 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 56);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  BOOL v4 = (void **)(a2 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void std::__shared_ptr_emplace<quasar::EagerConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F7D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::EagerConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F7D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar9GeographyENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xB0uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar9GeographyENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1B5C384(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar9GeographyENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62630;
  quasar::Geography::Geography((quasar::Geography *)(a1 + 3));
  return a1;
}

void sub_1B1B5C3E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::Geography>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::Geography>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::Geography>::__on_zero_shared(uint64_t a1)
{
  return std::allocator<quasar::Geography>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

uint64_t std::allocator<quasar::Geography>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v6 = (void **)(a2 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 112);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a2 + 80, *(void **)(a2 + 88));
  std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(a2 + 56, *(void **)(a2 + 64));
  unint64_t v6 = (void **)(a2 + 32);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  BOOL v4 = *(std::__shared_weak_count **)(a2 + 24);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t result = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (result) {
    return MEMORY[0x1B3EA8670](result, 0x1000C4052888210);
  }
  return result;
}

void std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(a1, a2[1]);
    BOOL v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

void std::vector<quasar::RecogRequestFilter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  char v2 = (char *)**a1;
  if (v2)
  {
    BOOL v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::RecogRequestFilter::~RecogRequestFilter((quasar::RecogRequestFilter *)(v4 - 216));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::RecogRequestFilter>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = (long long *)*a1;
  BOOL v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  if (v4 != (long long *)*a1)
  {
    do
    {
      v6 -= 216;
      BOOL v4 = (long long *)((char *)v4 - 216);
      std::allocator<quasar::RecogRequestFilter>::construct[abi:ne180100]<quasar::RecogRequestFilter,quasar::RecogRequestFilter>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::RecogRequestFilter>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(216 * a2);
}

__n128 std::allocator<quasar::RecogRequestFilter>::construct[abi:ne180100]<quasar::RecogRequestFilter,quasar::RecogRequestFilter>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *((void *)a3 + 6) = 0;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(long long *)((char *)a3 + 72);
  *(void *)(a2 + 88) = *((void *)a3 + 11);
  *((void *)a3 + 10) = 0;
  *((void *)a3 + 11) = 0;
  *((void *)a3 + 9) = 0;
  uint64_t v4 = *((void *)a3 + 13);
  *(void *)(a2 + 96) = *((void *)a3 + 12);
  *(void *)(a2 + 104) = v4;
  *(void *)(a2 + 112) = *((void *)a3 + 14);
  *((void *)a3 + 13) = 0;
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 12) = 0;
  uint64_t v5 = *((void *)a3 + 16);
  *(void *)(a2 + 120) = *((void *)a3 + 15);
  *(void *)(a2 + 128) = v5;
  *(void *)(a2 + 136) = *((void *)a3 + 17);
  *((void *)a3 + 15) = 0;
  *((void *)a3 + 16) = 0;
  *((void *)a3 + 17) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 144) = a3[9];
  *(void *)(a2 + 160) = *((void *)a3 + 20);
  *((void *)a3 + 18) = 0;
  *((void *)a3 + 19) = 0;
  *((void *)a3 + 20) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = *(long long *)((char *)a3 + 168);
  *(void *)(a2 + 184) = *((void *)a3 + 23);
  *((void *)a3 + 21) = 0;
  *((void *)a3 + 22) = 0;
  *((void *)a3 + 23) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  __n128 result = (__n128)a3[12];
  *(__n128 *)(a2 + 192) = result;
  *(void *)(a2 + 208) = *((void *)a3 + 26);
  *((void *)a3 + 24) = 0;
  *((void *)a3 + 25) = 0;
  *((void *)a3 + 26) = 0;
  return result;
}

uint64_t std::__split_buffer<quasar::RecogRequestFilter>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 216;
    quasar::RecogRequestFilter::~RecogRequestFilter((quasar::RecogRequestFilter *)(i - 216));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<quasar::RecogRequestFilter>::__push_back_slow_path<quasar::RecogRequestFilter>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x12F684BDA12F684) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  }
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42) {
    unint64_t v6 = 0x12F684BDA12F684;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::RecogRequestFilter>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[216 * v3];
  unint64_t v13 = &v7[216 * v6];
  std::allocator<quasar::RecogRequestFilter>::construct[abi:ne180100]<quasar::RecogRequestFilter,quasar::RecogRequestFilter>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 216;
  std::vector<quasar::RecogRequestFilter>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::RecogRequestFilter>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1B1B5C968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::RecogRequestFilter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B1B5CCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p)
{
  std::string __p = a11;
  std::vector<quasar::SystemConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  char v1 = (void **)(a1 + 48);
  std::vector<quasar::SystemConfig>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<quasar::SystemConfig>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  char v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 1544;
      uint64_t v7 = v4 - 1544;
      do
      {
        (*(void (**)(char *))(*(void *)v7 + 48))(v7);
        v6 -= 1544;
        BOOL v8 = v7 == v2;
        v7 -= 1544;
      }
      while (!v8);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::SystemConfig>::__push_back_slow_path<quasar::SystemConfig const&>(uint64_t *a1, const quasar::SystemConfig *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x70BF015390948F41 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2A721291E81FD5) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x70BF015390948F41 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x15390948F40FEALL) {
    unint64_t v9 = 0x2A721291E81FD5;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::SystemConfig>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  unint64_t v14 = (quasar::SystemConfig *)&v10[1544 * v4];
  uint64_t v16 = &v10[1544 * v9];
  quasar::SystemConfig::SystemConfig(v14, a2, 1, 1);
  BOOL v15 = (char *)v14 + 1544;
  std::vector<quasar::SystemConfig>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::SystemConfig>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1B5D0F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::SystemConfig>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::SystemConfig>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SystemConfig>,std::reverse_iterator<quasar::SystemConfig*>,std::reverse_iterator<quasar::SystemConfig*>,std::reverse_iterator<quasar::SystemConfig*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::SystemConfig>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2A721291E81FD6) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(1544 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SystemConfig>,std::reverse_iterator<quasar::SystemConfig*>,std::reverse_iterator<quasar::SystemConfig*>,std::reverse_iterator<quasar::SystemConfig*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(i + a7), (const quasar::SystemConfig *)(i + a3), 1, 1))
  {
    i -= 1544;
  }
  return a6;
}

uint64_t std::__split_buffer<quasar::SystemConfig>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 1544;
    (*(void (**)(void))(*(void *)(i - 1544) + 48))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<quasar::TranslatorCompiler,std::allocator<quasar::TranslatorCompiler>,std::vector<quasar::SystemConfig> &,void>@<X0>(void *a1@<X8>)
{
  char v2 = operator new(0x28uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::TranslatorCompiler>::__shared_ptr_emplace[abi:ne180100]<std::vector<quasar::SystemConfig> &,std::allocator<quasar::TranslatorCompiler>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1B5D318(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::TranslatorCompiler>::__shared_ptr_emplace[abi:ne180100]<std::vector<quasar::SystemConfig> &,std::allocator<quasar::TranslatorCompiler>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60758;
  quasar::TranslatorCompiler::TranslatorCompiler(a1 + 3);
  return a1;
}

void sub_1B1B5D374(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::TranslatorCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::TranslatorCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60758;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::TranslatorCompiler>::__on_zero_shared(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)v1, a1);
}

void sub_1B1B5D4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  unint64_t v9 = *(void **)(v7 - 104);
  if (v9)
  {
    *(void *)(v7 - 96) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      uint64_t v8 = *(_DWORD **)a1;
      uint64_t v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[4 * v9];
    BOOL v15 = &v13[4 * v12];
    *(_DWORD *)unint64_t v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v7;
}

void *fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43E18;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(*(uint64_t **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

float fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    float v4 = (*(float (**)(uint64_t *, uint64_t))(*a1 + 72))(a1, a2);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(a1[15], a2);
    *(float *)MutableState = v4;
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  uint64_t v6 = a1[15];
  if (*(_DWORD *)(v6 + 76) == a2) {
    uint64_t v7 = v6 + 80;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 8) + 8 * ((int)a2 + 1);
  }
  return **(float **)v7;
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

uint64_t **std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((void *)v11 + 4) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase(uint64_t a1, uint64_t a2)
{
  int v2 = fst::LookAheadMatchType<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>();
    }
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
  }
  fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>();
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ComposeFst(void *a1)
{
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1B5DCD8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitStateIterator()
{
}

void sub_1B1B5DDB4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitMatcher(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a1, a2);
}

uint64_t fst::LookAheadMatchType<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v6, a1, 1);
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v5, a2, 0);
  uint64_t v3 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v6, v5);
  if (v5[0]) {
    (*(void (**)(void))(*(void *)v5[0] + 8))(v5[0]);
  }
  if (v6[0]) {
    (*(void (**)(void))(*(void *)v6[0] + 8))(v6[0]);
  }
  return v3;
}

void sub_1B1B5DEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a9) {
    fst::LookAheadMatchType<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>();
  }
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(void *a1, void *a2)
{
  int v4 = (*(uint64_t (**)(void, void))(*(void *)*a1 + 24))(*a1, 0);
  int v5 = (*(uint64_t (**)(void, void))(*(void *)*a2 + 24))(*a2, 0);
  if (v4 == 1 && ((*(uint64_t (**)(void))(*(void *)*a1 + 48))() & 0x20) != 0) {
    return 1;
  }
  if (!v5 && ((*(uint64_t (**)(void))(*(void *)*a2 + 48))() & 0x10) != 0) {
    return 0;
  }
  if (((*(uint64_t (**)(void))(*(void *)*a1 + 48))() & 0x20) == 0
    || (uint64_t v6 = *a1,
        uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t))(*(void *)*a1 + 24),
        uint64_t v8 = 1,
        v7(v6, 1) != 1))
  {
    if (((*(uint64_t (**)(void))(*(void *)*a2 + 48))() & 0x10) == 0
      || (*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 24))(*a2, 1))
    {
      return 3;
    }
    return 0;
  }
  return v8;
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 144))(a2, a3);
  *(void *)a1 = v4;
  if (!v4) {
    operator new();
  }
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  return a1;
}

void sub_1B1B5E174(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_1F0A39208;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + 74) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MemoryPool((void *)(a1 + 80), 1);
}

void sub_1B1B5E30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MemoryPool(v18);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36BA8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36BA8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~SortedMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1B5E440(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 74)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Flags()
{
  return 0;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final_(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) + 32);
  return v1();
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36BA8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1B5E65C(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Size()
{
  return 40;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37B60;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1B5E774(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37B60;
  int v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Size()
{
  return 48;
}

void *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~SortedMatcher(void *a1)
{
  *a1 = &unk_1F0A39208;
  int v2 = (void *)a1[3];
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    else
    {
      uint64_t v3 = (_DWORD *)v2[3];
      if (v3) {
        --*v3;
      }
    }
    v2[5] = a1[17];
    a1[17] = v2;
  }
  uint64_t v4 = a1[1];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  a1[10] = &unk_1F0A36BA8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A39208;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 88))(*(void *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MemoryPool((void *)(a1 + 80), 1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 16) != a2)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      int v5 = (void *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(v3 + 74) = 1;
    }
    uint64_t v6 = *(void **)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v6, *(void *)(v3 + 8), a2);
      uint64_t v7 = *(void **)(v3 + 24);
    }
    else
    {
      uint64_t v7 = *(void **)(v3 + 136);
      if (v7)
      {
        *(void *)(v3 + 136) = v7[5];
      }
      else
      {
        uint64_t v7 = (void *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Allocate((void *)(v3 + 88), 1);
        void v7[5] = 0;
      }
      uint64_t v8 = *(void *)(v3 + 8);
      v7[4] = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v8 + 136))(v8, a2, v7);
      *(void *)(v3 + 24) = v7;
    }
    if (*v7) {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 80))(*v7, 16, 16);
    }
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 8) + 40))(*(void *)(v3 + 8), a2);
    *(void *)(v3 + 4_Block_object_dispose(&STACK[0x708], 8) = result;
    *(_DWORD *)(v3 + 6_Block_object_dispose(&STACK[0x708], 8) = a2;
  }
  return result;
}

void sub_1B1B5EBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (!v6) {
    goto LABEL_5;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a3);
  if (result) {
    return result;
  }
  if (*a1)
  {
    (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
  }
  else
  {
LABEL_5:
    uint64_t v8 = (_DWORD *)a1[3];
    if (v8) {
      --*v8;
    }
  }
  a1[4] = 0;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 136);
  return v9(a2, a3, a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 48 * a2;
  unint64_t v4 = a1[1];
  if (192 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 73) = 1;
  if (*(unsigned char *)(a1 + 74))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = a2 == 0;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Search(a1) & 1) != 0
        || *(unsigned char *)(a1 + 72) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Search(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 24);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 32)) {
      uint64_t v3 = 2;
    }
    else {
      uint64_t v3 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 80))(v2, v3, 15);
  }
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    int v4 = *(void **)(a1 + 24);
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 56))(*v4);
    }
    else {
      v4[4] = 0;
    }
    while (1)
    {
      char v19 = *(void **)(a1 + 24);
      if (*v19)
      {
        if ((*(uint64_t (**)(void))(*(void *)*v19 + 24))(*v19)) {
          return 0;
        }
      }
      else if (v19[4] >= v19[2])
      {
        return 0;
      }
      uint64_t v20 = *(uint64_t **)(a1 + 24);
      uint64_t v21 = *v20;
      if (*(_DWORD *)(a1 + 32))
      {
        uint64_t v22 = v21 ? (*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21) : v20[1] + 16 * v20[4];
        uint64_t v23 = (_DWORD *)(v22 + 4);
      }
      else
      {
        uint64_t v23 = (_DWORD *)(v21 ? (*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21) : v20[1] + 16 * v20[4]);
      }
      int v24 = *(_DWORD *)(a1 + 40);
      int v25 = *v23 <= v24 ? 0 : 7;
      if (*v23 == v24) {
        int v25 = 1;
      }
      if (v25) {
        break;
      }
      long long v26 = *(void **)(a1 + 24);
      if (*v26) {
        (*(void (**)(void))(*(void *)*v26 + 40))(*v26);
      }
      else {
        ++v26[4];
      }
    }
    uint64_t result = 0;
    if (v25 == 1) {
      return 1;
    }
    return result;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  if (!v5)
  {
    unint64_t v6 = 0;
LABEL_68:
    long long v28 = *(uint64_t **)(a1 + 24);
    uint64_t result = *v28;
    if (*v28)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)result + 64))(result, v6);
      return 0;
    }
    else
    {
      v28[4] = v6;
    }
    return result;
  }
  unint64_t v6 = 0;
  while (1)
  {
    unint64_t v7 = (v5 + v6) >> 1;
    uint64_t v8 = *(void **)(a1 + 24);
    if (*v8) {
      (*(void (**)(void, unint64_t))(*(void *)*v8 + 64))(*v8, (v5 + v6) >> 1);
    }
    else {
      void v8[4] = v7;
    }
    uint64_t v9 = *(uint64_t **)(a1 + 24);
    uint64_t v10 = *v9;
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v11 = v10 ? (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) : v9[1] + 16 * v9[4];
      unint64_t v12 = (_DWORD *)(v11 + 4);
    }
    else
    {
      unint64_t v12 = (_DWORD *)(v10 ? (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) : v9[1] + 16 * v9[4]);
    }
    int v13 = *(_DWORD *)(a1 + 40);
    if (*v12 <= v13) {
      break;
    }
    unint64_t v5 = (v5 + v6) >> 1;
LABEL_25:
    if (v6 >= v5) {
      goto LABEL_68;
    }
  }
  if (*v12 < v13)
  {
    unint64_t v6 = v7 + 1;
    goto LABEL_25;
  }
  while (v7 > v6)
  {
    unint64_t v14 = *(void **)(a1 + 24);
    --v7;
    if (*v14) {
      (*(void (**)(void, unint64_t))(*(void *)*v14 + 64))(*v14, v7);
    }
    else {
      v14[4] = v7;
    }
    BOOL v15 = *(uint64_t **)(a1 + 24);
    uint64_t v16 = *v15;
    if (*(_DWORD *)(a1 + 32))
    {
      if (v16) {
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
      }
      else {
        uint64_t v17 = v15[1] + 16 * v15[4];
      }
      unint64_t v18 = (_DWORD *)(v17 + 4);
    }
    else if (v16)
    {
      unint64_t v18 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
    }
    else
    {
      unint64_t v18 = (_DWORD *)(v15[1] + 16 * v15[4]);
    }
    if (*v18 != *(_DWORD *)(a1 + 40))
    {
      int v29 = *(void **)(a1 + 24);
      unint64_t v30 = v7 + 1;
      if (*v29) {
        (*(void (**)(void, unint64_t))(*(void *)*v29 + 64))(*v29, v30);
      }
      else {
        v29[4] = v30;
      }
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (*v3)
  {
    if ((*(uint64_t (**)(void))(*(void *)*v3 + 24))(*v3)) {
      return 1;
    }
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 73)) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = **(void **)(a1 + 24);
  if (v5)
  {
    if (v4) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80))(v5, v6, 15);
    int v4 = *(_DWORD *)(a1 + 32);
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *v7;
  if (v4)
  {
    if (v8) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
    }
    else {
      uint64_t v9 = v7[1] + 16 * v7[4];
    }
    uint64_t v10 = (_DWORD *)(v9 + 4);
  }
  else if (v8)
  {
    uint64_t v10 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  }
  else
  {
    uint64_t v10 = (_DWORD *)(v7[1] + 16 * v7[4]);
  }
  return *v10 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return a1 + 56;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 16 * v3[4];
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 80))(*v3, 15, 15);
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 16 * v3[4];
  }
  int v4 = *(uint64_t (**)(void))(*(void *)*v3 + 32);
  return v4();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next(uint64_t result)
{
  if (*(unsigned char *)(result + 72))
  {
    *(unsigned char *)(result + 72) = 0;
  }
  else
  {
    uint64_t v1 = *(uint64_t **)(result + 24);
    uint64_t result = *v1;
    if (*v1) {
      return (*(uint64_t (**)(void))(*(void *)result + 40))();
    }
    else {
      ++v1[4];
    }
  }
  return result;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1B5F590(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3AD80;
  uint64_t v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 16_Block_object_dispose(&STACK[0x708], 8) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1B5F814(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (void *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4);
  *unint64_t v7 = &unk_1F0A3DC08;
  fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitBase((uint64_t)v7, a2, a3);
  return a1;
}

void sub_1B1B5F8DC(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 48))(**(void **)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 1) != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v13 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v14 = (void *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
  }
  else if (((*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 48))(**(void **)(a1 + 152)) & 1) != 0 {
         && (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 1))
  }
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v3 = (void *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
  }
  else
  {
    int v4 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0);
    int v5 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0);
    if (v5) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = v4 == 1;
    }
    if (v6) {
      int v7 = 2;
    }
    else {
      int v7 = 1;
    }
    BOOL v8 = v4 == 1;
    if (v4 == 1) {
      int v9 = v7;
    }
    else {
      int v9 = 0;
    }
    if (v8 || v5 == 0) {
      goto LABEL_36;
    }
    int v9 = 1;
    if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 1) == 1)goto LABEL_36; {
    if (!(*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 1))
    }
    {
      int v9 = 0;
      goto LABEL_36;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v9 = 3;
LABEL_36:
  *(_DWORD *)(a1 + 184) = v9;
}

void sub_1B1B5FC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1B5FE60(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  int v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = (void *)a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = (void *)a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1B60014(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 80);
  char v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  float v10 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 144) + 96))(**(void **)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    uint64_t v7 = v5[1];
    float v8 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 152) + 96))(**(void **)(a1 + 152), v7);
    float v10 = v8;
    if (v8 != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      LOBYTE(v10) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38C80;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    operator new();
  }
  *(void *)(a1 + 120) = v4;
  *(unsigned char *)(a1 + 12_Block_object_dispose(&STACK[0x708], 8) = v4 == 0;
  return a1;
}

void sub_1B1B60360(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  uint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "compose");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
  uint64_t v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  if (!fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    }
    float v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)&__str);
    uint64_t v9 = (void *)fst::cerr(v8);
    float v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ComposeFst: output symbol table of 1st argument ", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"does not match input symbol table of 2nd argument", 49);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v11);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v12);
}

void sub_1B1B6056C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38C80;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    unsigned int v3 = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  uint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitMatcher()
{
  return 0;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GCCacheStore(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a1 + 32;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = a1 + 32;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear((void *)a1);
  *(void *)(a1 + 56) = *(void *)(a1 + 40);
  unint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 72) = v4 == 0;
  *(_DWORD *)(a1 + 76) = -1;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = *(unsigned char *)a2;
  if (v4 <= 0x1FA0) {
    unint64_t v4 = 8096;
  }
  *(void *)(a1 + 96) = v4;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  return a1;
}

void *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2 != a1[1])
  {
    unint64_t v3 = 0;
    uint64_t v2 = a1[1];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(void **)(v2 + 8 * v3++));
      uint64_t v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<char *>::clear(a1 + 4);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorCacheStore(void *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a4 + 32))();
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1B60888(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t *fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Matcher(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 144))(a2, a3);
  *a1 = v4;
  if (!v4) {
    operator new();
  }
  return a1;
}

void sub_1B1B60950(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1B609BC(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3AD80;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40AD892F49);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 8_Block_object_dispose(&STACK[0x708], 8) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1B60C48(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_1B1B60D44(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38C80;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38C80;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

void sub_1B1B60EB0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      MutableState = 0;
    }
    else {
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        float v8 = operator new(0x38uLL);
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          uint64_t v9 = operator new(0x18uLL);
          v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)uint64_t v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + _Block_object_dispose(&STACK[0x708], 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        float v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          char v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          char v18 = 0;
        }
        char v19 = &v18[8 * v14];
        *(void *)char v19 = v8;
        uint64_t v13 = v19 + 8;
        uint64_t v21 = (char *)a1[1];
        uint64_t v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          uint64_t v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v8;
        uint64_t v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(const void **)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const*>>((void *)(a1 + 24), v4, v5, (v5 - (uint64_t)v4) >> 4);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = *(unsigned int *)(a2 + 48);
  return a1;
}

void *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1B611B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x708], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter()
{
}

void fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1B612DC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = a1;
  *(void *)(a1 + 16) = a1;
  uint64_t v4 = a1 + 24;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, *(void *)(a2 + 48), (void *)(a1 + 8), (void *)(a1 + 16));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*>((char *)(a1 + 80), *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2));
  for (uint64_t i = *(int **)(a2 + 40); i; uint64_t i = *(int **)i)
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v4, i + 4, i + 4);
  return a1;
}

void sub_1B1B61398(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2;
      *(_DWORD *)(v7 + _Block_object_dispose(&STACK[0x708], 8) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t v7 = v8;
      v7 += 12;
      a2 = (uint64_t *)((char *)a2 + 12);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1B61428(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x708], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unsigned int v7 = *a2;
  if (*a2 < -1)
  {
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v7 == -1) {
      uint64_t v9 = *(int **)(v8 + 104);
    }
    else {
      uint64_t v9 = (int *)(*(void *)(v8 + 80) + 12 * v7);
    }
    unint64_t v10 = *v9 + 7853 * v9[1] + 7867 * *((char *)v9 + 8);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2))
          {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  int v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_44:
    *int v24 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    int v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1B61708(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1)
  {
    return a2 == a3;
  }
  else
  {
    uint64_t v3 = *a1;
    if (a2 == -1) {
      uint64_t v4 = *(void *)(v3 + 104);
    }
    else {
      uint64_t v4 = *(void *)(v3 + 80) + 12 * a2;
    }
    if (a3 == -1) {
      uint64_t v6 = *(void *)(v3 + 104);
    }
    else {
      uint64_t v6 = *(void *)(v3 + 80) + 12 * a3;
    }
    if (v4 == v6) {
      return 1;
    }
    if (*(_DWORD *)v4 != *(_DWORD *)v6 || *(_DWORD *)(v4 + 4) != *(_DWORD *)(v6 + 4)) {
      return 0;
    }
    return *(unsigned __int8 *)(v4 + 8) == *(unsigned __int8 *)(v6 + 8);
  }
}

void fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned char *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x708], 8) = a3;
    *(unsigned char *)(a1 + 32) = *a4;
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), a2);
    BOOL v9 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2) == INFINITY
      && v6 == v7;
    *(unsigned char *)(a1 + 33) = v9;
    *(unsigned char *)(a1 + 34) = v7 == 0;
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint8x8_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1B61A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  std::exception v18[2] = 0;
  uint64_t v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1B61C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  unint64_t v10 = a4 + 1;
  if (!a5) {
    unint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        long long v24 = *(_OWORD *)a4;
        long long v25 = v12;
        if (a5)
        {
          unint64_t v13 = *(unsigned __int8 **)(a1 + 136);
          if (DWORD1(v24) != -1)
          {
            if (v25 == -1)
            {
              int v17 = v13[32];
              if (v17) {
                char v18 = -1;
              }
              else {
                char v18 = 0;
              }
              char v23 = v18;
              if (v17) {
                goto LABEL_35;
              }
            }
            else
            {
              if (DWORD1(v24)) {
                char v14 = 0;
              }
              else {
                char v14 = -1;
              }
              char v23 = v14;
              if (!DWORD1(v24)) {
                goto LABEL_35;
              }
            }
LABEL_28:
            BOOL v19 = (unsigned int *)&v24;
            unint64_t v20 = &v25;
LABEL_34:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v23);
            goto LABEL_35;
          }
          if (!v13[33])
          {
            char v23 = v13[34] ^ 1;
            goto LABEL_28;
          }
        }
        else
        {
          char v15 = *(unsigned __int8 **)(a1 + 136);
          if (DWORD1(v25) != -1)
          {
            if (v24 == -1)
            {
              int v21 = v15[32];
              if (v21) {
                char v22 = -1;
              }
              else {
                char v22 = 0;
              }
              char v23 = v22;
              if (v21) {
                goto LABEL_35;
              }
            }
            else
            {
              if (DWORD1(v25)) {
                char v16 = 0;
              }
              else {
                char v16 = -1;
              }
              char v23 = v16;
              if (!DWORD1(v25)) {
                goto LABEL_35;
              }
            }
LABEL_33:
            BOOL v19 = (unsigned int *)&v25;
            unint64_t v20 = &v24;
            goto LABEL_34;
          }
          if (!v15[33])
          {
            char v23 = v15[34] ^ 1;
            goto LABEL_33;
          }
        }
LABEL_35:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, char *a5)
{
  int v7 = *(_DWORD *)(a4 + 12);
  LODWORD(v17) = a3[3];
  HIDWORD(v17) = v7;
  char v18 = *a5;
  unsigned int v8 = *a3;
  unsigned int v9 = *(_DWORD *)(a4 + 4);
  float v10 = *((float *)a3 + 2);
  float v11 = NAN;
  if (v10 != -INFINITY)
  {
    float v12 = *(float *)(a4 + 8);
    if (v12 != -INFINITY)
    {
      if (v12 == INFINITY || v10 == INFINITY) {
        float v11 = INFINITY;
      }
      else {
        float v11 = v10 + v12;
      }
    }
  }
  unsigned int Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(a1 + 176), &v17, 1);
  *(void *)&long long v16 = __PAIR64__(v9, v8);
  *((void *)&v16 + 1) = __PAIR64__(Id, LODWORD(v11));
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v16);
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(void *a1, uint64_t *a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  int v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::kCurrentKey);
  if (v7) {
    return *((unsigned int *)v7 + 4);
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[10];
  unint64_t v10 = a1[11];
  uint64_t v11 = (uint64_t)(v10 - v9) / 12;
  unsigned int v26 = v11;
  unint64_t v12 = a1[12];
  if (v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) > 0x1555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v9) >> 2);
    uint64_t v16 = 2 * v15;
    if (2 * v15 <= v11 + 1) {
      uint64_t v16 = v11 + 1;
    }
    if (v15 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v17 = 0x1555555555555555;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      char v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)(a1 + 12), v17);
    }
    else {
      char v18 = 0;
    }
    BOOL v19 = &v18[12 * v11];
    unint64_t v20 = &v18[12 * v17];
    uint64_t v21 = *a2;
    *((_DWORD *)v19 + 2) = *((_DWORD *)a2 + 2);
    *(void *)BOOL v19 = v21;
    char v14 = v19 + 12;
    char v23 = (_DWORD *)a1[10];
    char v22 = (_DWORD *)a1[11];
    if (v22 != v23)
    {
      do
      {
        uint64_t v24 = *(void *)(v22 - 3);
        v22 -= 3;
        int v25 = v22[2];
        *(void *)(v19 - 12) = v24;
        v19 -= 12;
        *((_DWORD *)v19 + 2) = v25;
      }
      while (v22 != v23);
      char v22 = (_DWORD *)a1[10];
    }
    a1[10] = v19;
    a1[11] = v14;
    a1[12] = v20;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    uint64_t v13 = *a2;
    *(_DWORD *)(v10 + _Block_object_dispose(&STACK[0x708], 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v10 = v13;
    char v14 = (char *)(v10 + 12);
  }
  a1[11] = v14;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v26, &v26);
  return v26;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  unsigned int v3 = *a2;
  if (*a2 < -1)
  {
    unint64_t v6 = 0;
  }
  else
  {
    uint64_t v4 = a1[4];
    if (v3 == -1) {
      uint64_t v5 = *(int **)(v4 + 104);
    }
    else {
      uint64_t v5 = (int *)(*(void *)(v4 + 80) + 12 * v3);
    }
    unint64_t v6 = *v5 + 7853 * v5[1] + 7867 * *((char *)v5 + 8);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  unint64_t v12 = *v11;
  if (*v11)
  {
    uint64_t v13 = a1 + 6;
    do
    {
      unint64_t v14 = v12[1];
      if (v14 == v6)
      {
        if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual::operator()(v13, *((_DWORD *)v12 + 4), *a2))
        {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v7) {
            v14 %= *(void *)&v7;
          }
        }
        else
        {
          v14 &= *(void *)&v7 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  return v12;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3CD60;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x708], 8) = a4;
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1B62374(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 24) = a2;
    unsigned int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      unsigned int v3 = (void **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    unsigned int v3 = (void **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3CD60;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  unsigned int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3CD60;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x708], 8) = *(_DWORD *)(a2 + 28);
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy();
}

void sub_1B1B62A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    unint64_t v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      unint64_t v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          int v6 = *(_DWORD *)(a1 + 28);
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          int v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            int v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        uint64_t v13 = (uint64_t *)v10;
      }
      else {
        uint64_t v13 = (uint64_t *)v9;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        uint64_t v16 = (uint64_t *)v10;
      }
      else {
        uint64_t v16 = (uint64_t *)v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1; {
    }
      }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(unsigned __int8 **)(v6 + 136);
  if (HIDWORD(a3) == -1)
  {
    if (!v7[33])
    {
      LOBYTE(v7) = v7[34] ^ 1;
      goto LABEL_8;
    }
    return 0;
  }
  if (a5 == -1)
  {
    uint64_t v8 = 0;
    LODWORD(v7) = v7[32];
    if (v7) {
      return v8;
    }
    goto LABEL_8;
  }
  LOBYTE(v7) = 0;
  if (!HIDWORD(a3)) {
    return 0;
  }
LABEL_8:
  unint64_t v12 = __PAIR64__(HIDWORD(a6), HIDWORD(a4));
  char v13 = (char)v7;
  *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = a3;
  *(_DWORD *)(a1 + 72) = HIDWORD(a5);
  float v9 = NAN;
  if (*(float *)&a4 != -INFINITY && *(float *)&a6 != -INFINITY)
  {
    float v9 = INFINITY;
    if (*(float *)&a6 != INFINITY && *(float *)&a4 != INFINITY) {
      float v9 = *(float *)&a4 + *(float *)&a6;
    }
  }
  *(float *)(a1 + 76) = v9;
  uint64_t v8 = 1;
  *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(v6 + 176), (uint64_t *)&v12, 1);
  return v8;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>()
{
}

void sub_1B1B62F70(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3AE40;
  uint64_t v8 = *(void *)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  uint64_t v9 = *(void *)(v8 + 120);
  *(void *)(a1 + 144) = v8 + 120;
  *(void *)(a1 + 152) = v8 + 200;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 16_Block_object_dispose(&STACK[0x708], 8) = (*(uint64_t (**)(void))(****(void ****)(a1 + 152) + 32))(***(void ***)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 144) + 40))(***(void ***)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 152) + 40))(***(void ***)(a1 + 152), v12);
  unint64_t v15 = fst::ComposeProperties(v13, v14);
  int v16 = *(_DWORD *)(*(void *)(a1 + 136) + 40);
  uint64_t v17 = v15 | 4;
  if (v16 != 3) {
    uint64_t v17 = v15;
  }
  BOOL v18 = v16 == 1;
  uint64_t v19 = 0x3FFCCC300004;
  if (v18) {
    uint64_t v19 = 0x3FFC330C0004;
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v17 & v19 | *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL;
  return a1;
}

void sub_1B1B63230(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::SetMatchType(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(****(void ****)(a1 + 144) + 48))(***(void ***)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(void, uint64_t))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 1) != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v13 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v14 = (void *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
  }
  else if (((*(uint64_t (**)(void))(****(void ****)(a1 + 152) + 48))(***(void ***)(a1 + 152)) & 1) != 0 {
         && (*(unsigned int (**)(void, uint64_t))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 1))
  }
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    unsigned int v3 = (void *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
  }
  else
  {
    int v4 = (*(uint64_t (**)(void, void))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 0);
    int v5 = (*(uint64_t (**)(void, void))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 0);
    if (v5) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = v4 == 1;
    }
    if (v6) {
      int v7 = 2;
    }
    else {
      int v7 = 1;
    }
    BOOL v8 = v4 == 1;
    if (v4 == 1) {
      int v9 = v7;
    }
    else {
      int v9 = 0;
    }
    if (v8 || v5 == 0) {
      goto LABEL_36;
    }
    int v9 = 1;
    if ((*(unsigned int (**)(void, uint64_t))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 1) == 1)goto LABEL_36; {
    if (!(*(unsigned int (**)(void, uint64_t))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 1))
    }
    {
      int v9 = 0;
      goto LABEL_36;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v9 = 3;
LABEL_36:
  *(_DWORD *)(a1 + 184) = v9;
}

void sub_1B1B63608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(****(void ****)(a1 + 144) + 40))(***(void ***)(a1 + 144), 0) & 4) != 0|| (char v4 = (*(uint64_t (**)(void, void))(****(void ****)(a1 + 152) + 40))(***(void ***)(a1 + 152), 0), *(_DWORD *)(*(void *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(void *)(a1 + 8) |= 4uLL;
    }
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Copy()
{
}

void sub_1B1B6383C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Expand(void *a1, int a2)
{
  char v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 20 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  uint64_t v8 = *((void *)v4 + 1);
  LODWORD(v4) = v4[4];
  uint64_t v17 = v8;
  int v18 = (int)v4;
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v7, v5, v6, &v17);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v10 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v11 = (_DWORD *)a1[19];
    uint64_t v12 = (uint64_t)a1;
    int v13 = a2;
    uint64_t v14 = v6;
    uint64_t v15 = v5;
    int v16 = 1;
  }
  else
  {
    uint64_t v9 = a1[20];
    uint64_t v10 = a1[21];
    uint64_t v11 = (_DWORD *)a1[18];
    uint64_t v12 = (uint64_t)a1;
    int v13 = a2;
    uint64_t v14 = v5;
    uint64_t v15 = v6;
    int v16 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(v12, v13, v9, v14, v10, v15, v11, v16);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 0) == a3)(*(void (**)(void, void))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 0); {
  return 0;
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    unsigned int v4 = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    uint64_t result = 0xFFFFFFFFLL;
    if (v4 != -1)
    {
      long long v5 = __PAIR64__(v4, v3);
      int v6 = -1;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(a1[22], &v5, 1);
    }
  }
  return result;
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 80);
  long long v5 = (int *)(v4 + 20 * a2);
  int v6 = *v5;
  float result = (*(float (**)(void, void))(****(void ****)(a1 + 144) + 96))(***(void ***)(a1 + 144), *v5);
  float v16 = result;
  *(float *)&uint64_t v13 = result;
  int v17 = 2139095040;
  if (result != INFINITY)
  {
    uint64_t v8 = v5[1];
    float result = (*(float (**)(void, uint64_t, float, float))(****(void ****)(a1 + 152) + 96))(***(void ***)(a1 + 152), v8, result, result);
    float v15 = result;
    *(float *)&uint64_t v13 = result;
    int v17 = 2139095040;
    if (result != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      uint64_t v10 = v4 + 20 * a2;
      uint64_t v11 = *(void *)(v10 + 8);
      LODWORD(v10) = *(_DWORD *)(v10 + 16);
      uint64_t v13 = v11;
      int v14 = v10;
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v9, v6, v8, &v13);
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(*(void *)(a1 + 136), &v16);
      float result = NAN;
      if (v16 != -INFINITY)
      {
        float result = NAN;
        if (v15 != -INFINITY)
        {
          float result = INFINITY;
          if (v15 != INFINITY && v16 != INFINITY) {
            return v16 + v15;
          }
        }
      }
    }
  }
  return result;
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1B1B63D0C(_Unwind_Exception *a1)
{
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = (void **)fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AltSequenceComposeFilter(a1, a2, a3, a4, a5);
  *(_DWORD *)(a1 + 40) = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*v6, *(void **)(a1 + 8));
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy();
}

void sub_1B1B63F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a5 + 32))();
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1B64050(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

void fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1B640FC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(unsigned char *a1)
{
  if (!a1[8])
  {
    int v2 = (*(uint64_t (**)(void))(**(void **)a1 + 48))() & 0x30;
    a1[8] = v2 != 0;
    if (!v2)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      unsigned int v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
      uint64_t v4 = (void *)fst::cerr(v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"LookAheadMatcher: No look-ahead matcher defined", 47);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return a1[8];
}

void sub_1B1B64208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x1020C405F07FB98);
  }
  unsigned int v3 = *(void **)(a1 + 8);
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x1020C405F07FB98);
  }
  return a1;
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MultiEpsMatcher(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, char a6)
{
  if (!a5) {
    operator new();
  }
  *(void *)float result = a5;
  *(_DWORD *)(result + _Block_object_dispose(&STACK[0x708], 8) = a4;
  *(unsigned char *)(result + 12) = a6;
  *(void *)(result + 32) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 16) = result + 24;
  *(void *)(result + 40) = -1;
  *(void *)(result + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  if (a3) {
    int v6 = 0;
  }
  else {
    int v6 = -1;
  }
  if (a3) {
    int v7 = -1;
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(result + 60) = v6;
  *(_DWORD *)(result + 64) = v7;
  *(void *)(result + 6_Block_object_dispose(&STACK[0x708], 8) = 0xFFFFFFFF00000000;
  return result;
}

void sub_1B1B643C4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 12))
  {
    int v2 = *(void **)a1;
    if (*(void *)a1)
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      MEMORY[0x1B3EA8670](v2, 0x1020C405F07FB98);
    }
  }
  std::__tree<int>::destroy(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1B644B4(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3AE40;
  uint64_t v2 = a1[17];
  if (v2)
  {
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 200);
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 120);
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    uint64_t v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40F6F5CAE4);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    long long v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 8_Block_object_dispose(&STACK[0x708], 8) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1B646A8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter()
{
}

void sub_1B1B647FC(_Unwind_Exception *a1)
{
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter()
{
}

void sub_1B1B64924(_Unwind_Exception *a1)
{
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AltSequenceComposeFilter()
{
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::CompactHashBiTable(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = a1;
  *(void *)(a1 + 16) = a1;
  uint64_t v4 = a1 + 24;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, *(void *)(a2 + 48), (void *)(a1 + 8), (void *)(a1 + 16));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>*,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>*>((char *)(a1 + 80), *(long long **)(a2 + 80), *(long long **)(a2 + 88), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2));
  for (uint64_t i = *(int **)(a2 + 40); i; uint64_t i = *(int **)i)
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v4, i + 4, i + 4);
  return a1;
}

void sub_1B1B64A68(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>*,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    float result = std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 20;
      a2 = (long long *)((char *)a2 + 20);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1B64AF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x708], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v7 = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc::operator()((uint64_t *)(a1 + 32), *a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2))
          {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v8;
  *((_DWORD *)i + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 40);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  char v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)uint64_t i = *v22;
LABEL_38:
    *char v22 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v23 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    char v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1B64D9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc::operator()(uint64_t *a1, int a2)
{
  if (a2 < -1) {
    return 0;
  }
  uint64_t v2 = *a1;
  if (a2 == -1) {
    unint64_t v3 = *(int **)(v2 + 104);
  }
  else {
    unint64_t v3 = (int *)(*(void *)(v2 + 80) + 20 * a2);
  }
  return *v3
       + 7853 * v3[1]
       + 7867
       * (v3[4] ^ __ROR8__((*((void *)v3 + 1) >> 8) ^ __ROR8__((char)*((void *)v3 + 1), 59), 59));
}

BOOL fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1) {
    return a2 == a3;
  }
  uint64_t v3 = *a1;
  if (a2 == -1) {
    uint64_t v4 = *(void *)(v3 + 104);
  }
  else {
    uint64_t v4 = *(void *)(v3 + 80) + 20 * a2;
  }
  if (a3 == -1) {
    uint64_t v6 = *(void *)(v3 + 104);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 80) + 20 * a3;
  }
  return fst::operator==(v4, v6);
}

BOOL fst::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>::operator==((unsigned __int8 *)(a1 + 8), (unsigned __int8 *)(a2 + 8));
}

BOOL fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *(float *)(a1 + 1) == *(float *)(a2 + 1) && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2);
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = v5;
  LODWORD(v5) = *(_DWORD *)a4;
  *(unsigned char *)(a1 + 84) = *((unsigned char *)a4 + 4);
  *(_DWORD *)(a1 + 80) = v5;
  fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(a1, a2, a3, a4);
  if ((*(unsigned char *)(a1 + 72) & 0x80) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a1 + 40) == 1
       ? *(uint64_t (**)(void))(**(void **)(a1 + 104) + 40)
       : *(uint64_t (**)(void))(**(void **)(a1 + 112) + 40);
    *(void *)(a1 + 280) = v6();
    int v7 = *(_DWORD *)(a1 + 96);
    std::__tree<int>::destroy(a1 + 136, *(void **)(a1 + 144));
    *(void *)(a1 + 136) = a1 + 144;
    *(void *)(a1 + 144) = 0;
    unint64_t v8 = *(void **)(a1 + 224);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = -1;
    std::__tree<int>::destroy(a1 + 216, v8);
    *(void *)(a1 + 216) = a1 + 224;
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = -1;
    if (v7 != -1)
    {
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 120, v7);
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 200, v7);
    }
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(****(void ****)(a1 + 144) + 104))(***(void ***)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 152) + 104))(***(void ***)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1B651A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, int a8)
{
  int v12 = a4;
  (*(void (**)(void, uint64_t))(***(void ***)a7 + 56))(**(void **)a7, a4);
  a7[18] = v12;
  v19[0] = a8 - 1;
  v19[1] = a8 << 31 >> 31;
  std::locale v19[2] = 0;
  v19[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v19, a8);
  unint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v16);
  while (1)
  {
    if (!v16[0])
    {
      if (v18 >= v16[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v15 = (int *)(v16[1] + 16 * v18);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v16[0] + 24))(v16[0])) {
      break;
    }
    if (!v16[0]) {
      goto LABEL_7;
    }
    char v15 = (int *)(*(uint64_t (**)(void))(*(void *)v16[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v15, a8);
    if (v16[0]) {
      (*(void (**)(void))(*(void *)v16[0] + 40))(v16[0]);
    }
    else {
      ++v18;
    }
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(void *)v16[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v17) {
    --*v17;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1B653E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddMultiEpsLabel(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = a1 + 16;
    fst::CompactSet<int,-1>::Insert(v2, a2);
  }
  else
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v3 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
    uint64_t v4 = (void *)fst::cerr(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"MultiEpsMatcher: Bad multi-eps label: 0", 39);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B1B654D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(uint64_t a1, int a2, uint64_t a3, unsigned char *a4)
{
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned char *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x708], 8) = a3;
    *(unsigned char *)(a1 + 32) = *a4;
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a3);
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16), a3);
    BOOL v9 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a3) == INFINITY
      && v6 == v7;
    *(unsigned char *)(a1 + 33) = v9;
    *(unsigned char *)(a1 + 34) = v7 == 0;
  }
}

uint64_t **fst::CompactSet<int,-1>::Insert(uint64_t a1, int a2)
{
  int v9 = a2;
  float result = std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a1, &v9, &v9);
  int v4 = *(_DWORD *)(a1 + 24);
  int v5 = v9;
  if (v4 == -1 || v9 < v4) {
    *(_DWORD *)(a1 + 24) = v9;
  }
  int v7 = *(_DWORD *)(a1 + 28);
  if (v7 == -1 || v7 < v5) {
    *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x708], 8) = v5;
  }
  return result;
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint8x8_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, unsigned char *a3, int *a4, int a5)
{
  uint8x8_t v10 = a4 + 1;
  if (!a5) {
    uint8x8_t v10 = a4;
  }
  uint64_t result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a3, *v10);
  if (result && !a3[76])
  {
    do
    {
      int v12 = (long long *)(a3 + 60);
      if (!a3[56]) {
        int v12 = (long long *)(*(uint64_t (**)(void))(***(void ***)a3 + 80))(**(void **)a3);
      }
      long long v13 = *v12;
      long long v24 = *(_OWORD *)a4;
      long long v25 = v13;
      if (a5)
      {
        unint64_t v14 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)&v24, (uint64_t)&v25);
        unint64_t v22 = v14;
        int v23 = v15;
        if ((_BYTE)v14 == 0xFF)
        {
          LODWORD(v27) = v14 >> 8;
          int v26 = 2139095040;
          if (v27 == INFINITY && v15 == -1) {
            goto LABEL_21;
          }
        }
        BOOL v17 = (unsigned int *)&v24;
        unint64_t v18 = &v25;
      }
      else
      {
        unint64_t v19 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)&v25, (uint64_t)&v24);
        unint64_t v22 = v19;
        int v23 = v20;
        if ((_BYTE)v19 == 0xFF)
        {
          LODWORD(v27) = v19 >> 8;
          int v26 = 2139095040;
          if (v27 == INFINITY && v20 == -1) {
            goto LABEL_21;
          }
        }
        BOOL v17 = (unsigned int *)&v25;
        unint64_t v18 = &v24;
      }
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, (uint64_t)&v22);
LABEL_21:
      uint64_t result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next((uint64_t)a3);
    }
    while (!a3[76]);
  }
  return result;
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(unsigned char *a1, int a2)
{
  int v3 = a1 + 24;
  *((void *)a1 + 6) = a1 + 24;
  a1[56] = 0;
  if (a2 == -1)
  {
    if (a1[8])
    {
      uint64_t v6 = (void *)*((void *)a1 + 2);
      while (1)
      {
        *((void *)a1 + 6) = v6;
        if (v6 == (void *)v3) {
          break;
        }
        char v7 = (*(uint64_t (**)(void, void))(***(void ***)a1 + 64))(**(void **)a1, *((unsigned int *)v6 + 7));
        uint64_t v8 = (void *)*((void *)a1 + 6);
        if (v7)
        {
          if (v8 == (void *)v3) {
            break;
          }
          uint64_t result = 1;
          goto LABEL_11;
        }
        int v9 = (void *)v8[1];
        if (v9)
        {
          do
          {
            uint64_t v6 = v9;
            int v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v6 = (void *)v8[2];
            BOOL v10 = *v6 == (void)v8;
            uint64_t v8 = v6;
          }
          while (!v10);
        }
      }
    }
    int v4 = *(uint64_t (**)(void))(***(void ***)a1 + 64);
    goto LABEL_10;
  }
  if (!a2)
  {
    int v4 = *(uint64_t (**)(void))(***(void ***)a1 + 64);
LABEL_10:
    uint64_t result = v4();
    goto LABEL_11;
  }
  if ((a1[8] & 2) == 0 || v3 == (unsigned char *)fst::CompactSet<int,-1>::Find((uint64_t)(a1 + 16), a2))
  {
    int v4 = *(uint64_t (**)(void))(***(void ***)a1 + 64);
    goto LABEL_10;
  }
  uint64_t result = 1;
  a1[56] = 1;
LABEL_11:
  a1[76] = result ^ 1;
  return result;
}

unint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if ((*(unsigned char *)(a1 + 72) & 0x80) == 0)
  {
    unint64_t v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
    goto LABEL_3;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 96);
  if (v8 != -1)
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      a2 = a3;
      a3 = v4;
    }
    unint64_t v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushedLabelFilterArc(a1, a2, a3, v8);
    goto LABEL_17;
  }
  unint64_t v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
  unsigned int v12 = v6;
  char v13 = BYTE4(v6);
  if ((_BYTE)v6 == 0xFF)
  {
    LODWORD(v15) = v6 >> 8;
    int v14 = 2139095040;
    if (v15 == INFINITY)
    {
      unint64_t v7 = 0;
      unint64_t v6 = 0x7F800000FFLL;
      return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
    }
  }
  if (*(unsigned char *)(a1 + 76))
  {
    if (*(_DWORD *)(a1 + 40) == 1)
    {
      uint64_t v9 = v4;
      uint64_t v10 = v3;
    }
    else
    {
      uint64_t v9 = v3;
      uint64_t v10 = v4;
    }
    unint64_t v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelFilterArc(a1, v9, v10, &v12);
LABEL_17:
    unint64_t v7 = v6 & 0xFFFFFF0000000000;
    return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
  }
LABEL_3:
  unint64_t v7 = 0;
  return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  int v7 = *(_DWORD *)(a4 + 12);
  LODWORD(v17) = a3[3];
  DWORD1(v17) = v7;
  *((void *)&v17 + 1) = *(void *)a5;
  int v18 = *(_DWORD *)(a5 + 8);
  unsigned int v8 = *a3;
  unsigned int v9 = *(_DWORD *)(a4 + 4);
  float v10 = *((float *)a3 + 2);
  float v11 = NAN;
  if (v10 != -INFINITY)
  {
    float v12 = *(float *)(a4 + 8);
    if (v12 != -INFINITY)
    {
      if (v12 == INFINITY || v10 == INFINITY) {
        float v11 = INFINITY;
      }
      else {
        float v11 = v10 + v12;
      }
    }
  }
  unsigned int Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(*(void **)(a1 + 176), &v17, 1);
  *(void *)&long long v16 = __PAIR64__(v9, v8);
  *((void *)&v16 + 1) = __PAIR64__(Id, LODWORD(v11));
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v16);
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(uint64_t result)
{
  uint64_t v1 = (void **)result;
  if (*(unsigned char *)(result + 56))
  {
    char v2 = 1;
LABEL_3:
    *((unsigned char *)v1 + 76) = v2;
  }
  else
  {
    (*(void (**)(void))(***(void ***)result + 88))(**(void **)result);
    uint64_t result = (*(uint64_t (**)(void))(*(void *)**v1 + 72))(**v1);
    *((unsigned char *)v1 + 76) = result;
    if (result)
    {
      uint64_t v3 = v1 + 3;
      uint64_t v4 = v1[6];
      if (v4 != v1 + 3)
      {
        int v5 = (void *)v4[1];
        if (v5)
        {
          do
          {
            unint64_t v6 = v5;
            int v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            unint64_t v6 = (void *)v4[2];
            BOOL v7 = *v6 == (void)v4;
            uint64_t v4 = v6;
          }
          while (!v7);
        }
        while (1)
        {
          v1[6] = v6;
          if (v6 == v3) {
            goto LABEL_19;
          }
          uint64_t result = (*(uint64_t (**)(void, void))(*(void *)**v1 + 64))(**v1, *((unsigned int *)v6 + 7));
          unsigned int v8 = v1[6];
          if (result) {
            break;
          }
          unsigned int v9 = (void *)v8[1];
          if (v9)
          {
            do
            {
              unint64_t v6 = v9;
              unsigned int v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              unint64_t v6 = (void *)v8[2];
              BOOL v7 = *v6 == (void)v8;
              unsigned int v8 = v6;
            }
            while (!v7);
          }
        }
        if (v8 == v3)
        {
LABEL_19:
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)**v1 + 64))(**v1, 0xFFFFFFFFLL);
          char v2 = result ^ 1;
          goto LABEL_3;
        }
        *((unsigned char *)v1 + 76) = 0;
      }
    }
  }
  return result;
}

uint64_t fst::CompactSet<int,-1>::Find(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 24);
  BOOL v3 = v2 != -1 && v2 <= a2;
  if (!v3 || *(_DWORD *)(a1 + 28) < a2) {
    return a1 + 8;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v5 = a1 + 8;
  uint64_t v6 = v7;
  if (!v7) {
    return v5;
  }
  uint64_t v4 = v5;
  do
  {
    int v8 = *(_DWORD *)(v6 + 28);
    BOOL v9 = v8 < a2;
    if (v8 >= a2) {
      float v10 = (uint64_t *)v6;
    }
    else {
      float v10 = (uint64_t *)(v6 + 8);
    }
    if (!v9) {
      uint64_t v4 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v4 == v5 || *(_DWORD *)(v4 + 28) > a2) {
    return v5;
  }
  return v4;
}

unint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5 = fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, (_DWORD *)a3);
  if (v5 == 0xFF)
  {
    uint64_t v7 = 2139095040;
    goto LABEL_11;
  }
  unsigned __int8 v6 = v5;
  if ((*(unsigned char *)(a1 + 72) & 0x40) == 0)
  {
    uint64_t v7 = 0;
    return v6 | (unint64_t)(v7 << 8);
  }
  float v8 = 0.0;
  if (*(unsigned char *)(a1 + 76))
  {
    uint64_t v9 = 56;
    if (*(_DWORD *)(a1 + 64) == 1) {
      uint64_t v9 = 48;
    }
    float v10 = *(unsigned char **)(a1 + v9);
    if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v10)) {
      float v8 = *(float *)(*(void *)v10 + 8);
    }
  }
  float v11 = *(float *)(a1 + 81);
  uint64_t v7 = 2139095040;
  if (v8 == INFINITY)
  {
LABEL_11:
    unsigned __int8 v6 = -1;
    return v6 | (unint64_t)(v7 << 8);
  }
  float v13 = *(float *)(a3 + 8);
  float v14 = NAN;
  if (v13 != -INFINITY && v8 != -INFINITY)
  {
    if (v8 == INFINITY || v13 == INFINITY)
    {
      float v14 = INFINITY;
      if ((LODWORD(v11) & 0x7FFFFFFFu) >= 0x7F800000) {
        float v14 = NAN;
      }
    }
    else
    {
      float v15 = v8 + v13;
      float v14 = NAN;
      if (v15 != -INFINITY)
      {
        int v16 = LODWORD(v11) & 0x7FFFFFFF;
        float v14 = NAN;
        float v17 = v15 - v11;
        if (v15 == INFINITY) {
          float v17 = INFINITY;
        }
        if (v16 <= 2139095039) {
          float v14 = v17;
        }
      }
    }
  }
  *(float *)(a3 + _Block_object_dispose(&STACK[0x708], 8) = v14;
  float v18 = floorf((float)(v8 * 1024.0) + 0.5) * 0.00097656;
  if ((LODWORD(v8) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v18 = v8;
  }
  uint64_t v7 = LODWORD(v18);
  return v6 | (unint64_t)(v7 << 8);
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushedLabelFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0x7F800000FFLL;
  int v5 = *(_DWORD *)(a1 + 40);
  BOOL v6 = v5 != 1;
  BOOL v7 = v5 == 1;
  if (*(_DWORD *)(a3 + 4 * v6) == -1)
  {
    uint64_t v9 = 4 * v7;
    int v10 = *(_DWORD *)(a2 + v9);
    if (v10 == a4)
    {
      uint64_t v4 = 0;
      *(_DWORD *)(a2 + v9) = 0;
    }
    else if (!v10)
    {
      if (*(void *)(a1 + 280) == 1) {
        return *(void *)(a1 + 88);
      }
      uint64_t v13 = *(_DWORD *)(a1 + 64) == 1 ? 48 : 56;
      (*(void (**)(void, void))(***(void ***)(a1 + v13) + 56))(**(void **)(a1 + v13), *(unsigned int *)(a2 + 12));
      uint64_t v14 = *(_DWORD *)(a1 + 64) == 1 ? 48 : 56;
      float v15 = *(unsigned char **)(a1 + v14);
      if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v15)
        || (*(unsigned int (**)(void, uint64_t))(**(void **)v15 + 120))(*(void *)v15, a4))
      {
        return *(void *)(a1 + 88);
      }
    }
  }
  return v4;
}

unint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (*(_DWORD *)(a3 + 4 * (*(_DWORD *)(a1 + 40) == 1))) {
    return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  }
  uint64_t v9 = 4 * (*(_DWORD *)(a1 + 40) == 1);
  if (*(_DWORD *)(a2 + v9))
  {
    if ((*(unsigned char *)(a1 + 73) & 4) != 0) {
      return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
    }
  }
  uint64_t v10 = 56;
  if (*(_DWORD *)(a1 + 64) == 1) {
    uint64_t v10 = 48;
  }
  float v11 = *(unsigned char **)(a1 + v10);
  if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v11)) {
    return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  }
  uint64_t v12 = *(void *)v11;
  int v13 = *(_DWORD *)(*(void *)v11 + 24);
  if (v13 == -1) {
    return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  }
  int v14 = *(_DWORD *)(v12 + 12);
  int v15 = *(_DWORD *)(v12 + 16);
  float v16 = *(float *)(v12 + 20);
  if (*(_DWORD *)(a1 + 40) == 1) {
    int v17 = *(_DWORD *)(v12 + 12);
  }
  else {
    int v17 = *(_DWORD *)(v12 + 16);
  }
  *(_DWORD *)(a2 + v9) = v17;
  *(_DWORD *)a3 = v14;
  *(_DWORD *)(a3 + 4) = v15;
  float v18 = *(float *)(a3 + 8);
  float v19 = NAN;
  if (v18 != -INFINITY && v16 != -INFINITY)
  {
    float v19 = INFINITY;
    BOOL v20 = v18 == INFINITY || v16 == INFINITY;
    float v21 = v16 + v18;
    if (!v20) {
      float v19 = v21;
    }
  }
  *(float *)(a3 + _Block_object_dispose(&STACK[0x708], 8) = v19;
  *(_DWORD *)(a3 + 12) = v13;
  return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  BOOL v3 = (_DWORD *)a2;
  *(unsigned char *)(a1 + 76) = 0;
  if (*a3 == -1)
  {
    if (!*(unsigned char *)(a1 + 33))
    {
      unsigned __int8 v5 = *(unsigned char *)(a1 + 34) ^ 1;
      goto LABEL_7;
    }
    return 255;
  }
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4 == -1)
  {
    int v6 = *(unsigned __int8 *)(a1 + 32);
    BOOL v7 = v6 == 1;
    if (v6 == 1) {
      unsigned __int8 v8 = -1;
    }
    else {
      unsigned __int8 v8 = 0;
    }
    unsigned __int8 v10 = v8;
    if (!v7) {
      goto LABEL_14;
    }
    return 255;
  }
  if (!v4) {
    return 255;
  }
  unsigned __int8 v5 = 0;
LABEL_7:
  unsigned __int8 v10 = v5;
LABEL_14:
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    a2 = (uint64_t)a3;
    a3 = v3;
  }
  return fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, (uint64_t)a3, &v10);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v7 = *(_DWORD *)(a1 + 72);
  if (*(_DWORD *)(a2 + 4 * (*(_DWORD *)(a1 + 40) == 1)))
  {
    if ((v7 & 0x100) == 0) {
      return *a4;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    return *a4;
  }
  *(unsigned char *)(a1 + 76) = 1;
  if (*(_DWORD *)(a1 + 64) == 1) {
    uint64_t v8 = 48;
  }
  else {
    uint64_t v8 = 56;
  }
  (*(void (**)(void, void))(***(void ***)(a1 + v8) + 56))(**(void **)(a1 + v8), *(unsigned int *)(a2 + 12));
  int v9 = *(_DWORD *)(a1 + 64);
  BOOL v10 = v9 == 1;
  if (v9 == 1) {
    uint64_t v11 = 48;
  }
  else {
    uint64_t v11 = 56;
  }
  uint64_t v12 = *(unsigned char **)(a1 + v11);
  if (v10) {
    uint64_t v13 = 56;
  }
  else {
    uint64_t v13 = 48;
  }
  uint64_t v14 = (*(uint64_t (**)(void))(***(void ***)(a1 + v13) + 32))(**(void **)(a1 + v13));
  uint64_t v15 = *(unsigned int *)(a3 + 12);
  if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v12)
    || (*(unsigned int (**)(void, uint64_t, uint64_t))(**(void **)v12 + 128))(*(void *)v12, v14, v15))
  {
    return *a4;
  }
  return 255;
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(void *a1, long long *a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  int v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::kCurrentKey);
  if (v7) {
    return *((unsigned int *)v7 + 4);
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[10];
  unint64_t v10 = a1[11];
  uint64_t v11 = (uint64_t)(v10 - v9) / 20;
  unsigned int v25 = v11;
  unint64_t v12 = a1[12];
  if (v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v9) >> 2);
    uint64_t v16 = 2 * v15;
    if (2 * v15 <= v11 + 1) {
      uint64_t v16 = v11 + 1;
    }
    if (v15 >= 0x666666666666666) {
      unint64_t v17 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)(a1 + 12), v17);
    }
    else {
      float v18 = 0;
    }
    float v19 = &v18[20 * v11];
    BOOL v20 = &v18[20 * v17];
    long long v21 = *a2;
    *((_DWORD *)v19 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)float v19 = v21;
    uint64_t v14 = v19 + 20;
    int v23 = (char *)a1[10];
    unint64_t v22 = (char *)a1[11];
    if (v22 != v23)
    {
      do
      {
        long long v24 = *(_OWORD *)(v22 - 20);
        *((_DWORD *)v19 - 1) = *((_DWORD *)v22 - 1);
        *(_OWORD *)(v19 - 20) = v24;
        v19 -= 20;
        v22 -= 20;
      }
      while (v22 != v23);
      unint64_t v22 = (char *)a1[10];
    }
    a1[10] = v19;
    a1[11] = v14;
    a1[12] = v20;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    long long v13 = *a2;
    *(_DWORD *)(v10 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v10 = v13;
    uint64_t v14 = (char *)(v10 + 20);
  }
  a1[11] = v14;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v25, &v25);
  return v25;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  unint64_t v4 = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc::operator()(a1 + 4, *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    unint64_t v12 = a1 + 6;
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual::operator()(v12, *((_DWORD *)v11 + 4), *a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(uint64_t a1, float *a2)
{
  uint64_t result = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(a1, a2);
  if ((*(unsigned char *)(a1 + 72) & 0x80) != 0 && *a2 != INFINITY && *(_DWORD *)(a1 + 96) != -1) {
    *a2 = INFINITY;
  }
  return result;
}

uint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(uint64_t result, float *a2)
{
  if ((*(unsigned char *)(result + 72) & 0x40) != 0)
  {
    float v2 = *a2;
    if (*a2 != INFINITY)
    {
      float v3 = NAN;
      if (v2 != -INFINITY)
      {
        if ((*(_DWORD *)(result + 81) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          float v3 = INFINITY;
          if (v2 != INFINITY) {
            float v3 = v2 - *(float *)(result + 81);
          }
        }
        else
        {
          float v3 = NAN;
        }
      }
      *a2 = v3;
    }
  }
  return result;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>()
{
}

void sub_1B1B66880(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3ADE0;
  uint64_t v8 = *(void *)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  uint64_t v9 = *(void *)(v8 + 120);
  *(void *)(a1 + 144) = v8 + 120;
  *(void *)(a1 + 152) = v8 + 200;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 16_Block_object_dispose(&STACK[0x708], 8) = (*(uint64_t (**)(void))(****(void ****)(a1 + 152) + 32))(***(void ***)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 144) + 40))(***(void ***)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 152) + 40))(***(void ***)(a1 + 152), v12);
  unint64_t v15 = fst::ComposeProperties(v13, v14);
  int v16 = *(_DWORD *)(*(void *)(a1 + 136) + 40);
  uint64_t v17 = v15 | 4;
  if (v16 != 3) {
    uint64_t v17 = v15;
  }
  BOOL v18 = v16 == 1;
  uint64_t v19 = 0x3FFCCC300004;
  if (v18) {
    uint64_t v19 = 0x3FFC330C0004;
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v17 & v19 | *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL;
  return a1;
}

void sub_1B1B66B40(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(****(void ****)(a1 + 144) + 40))(***(void ***)(a1 + 144), 0) & 4) != 0|| (char v4 = (*(uint64_t (**)(void, void))(****(void ****)(a1 + 152) + 40))(***(void ***)(a1 + 152), 0), *(_DWORD *)(*(void *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(void *)(a1 + 8) |= 4uLL;
    }
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Copy()
{
}

void sub_1B1B66D78(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Expand(void *a1, int a2)
{
  char v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 20 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  uint64_t v8 = *((void *)v4 + 1);
  LODWORD(v4) = v4[4];
  uint64_t v17 = v8;
  int v18 = (int)v4;
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v7, v5, v6, &v17);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v10 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v11 = (_DWORD *)a1[19];
    uint64_t v12 = (uint64_t)a1;
    int v13 = a2;
    uint64_t v14 = v6;
    uint64_t v15 = v5;
    int v16 = 1;
  }
  else
  {
    uint64_t v9 = a1[20];
    uint64_t v10 = a1[21];
    uint64_t v11 = (_DWORD *)a1[18];
    uint64_t v12 = (uint64_t)a1;
    int v13 = a2;
    uint64_t v14 = v5;
    uint64_t v15 = v6;
    int v16 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(v12, v13, v9, v14, v10, v15, v11, v16);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 0) == a3)(*(void (**)(void, void))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 0); {
  return 0;
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    unsigned int v4 = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    uint64_t result = 0xFFFFFFFFLL;
    if (v4 != -1)
    {
      long long v5 = __PAIR64__(v4, v3);
      int v6 = -1;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(a1[22], &v5, 1);
    }
  }
  return result;
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 80);
  long long v5 = (unsigned int *)(v4 + 20 * a2);
  uint64_t v6 = *v5;
  float result = (*(float (**)(void, uint64_t))(****(void ****)(a1 + 144) + 96))(***(void ***)(a1 + 144), v6);
  float v16 = result;
  *(float *)&uint64_t v13 = result;
  int v17 = 2139095040;
  if (result != INFINITY)
  {
    uint64_t v8 = v5[1];
    float result = (*(float (**)(void, uint64_t, float, float))(****(void ****)(a1 + 152) + 96))(***(void ***)(a1 + 152), v8, result, result);
    float v15 = result;
    *(float *)&uint64_t v13 = result;
    int v17 = 2139095040;
    if (result != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      uint64_t v10 = v4 + 20 * a2;
      uint64_t v11 = *(void *)(v10 + 8);
      LODWORD(v10) = *(_DWORD *)(v10 + 16);
      uint64_t v13 = v11;
      int v14 = v10;
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v9, v6, v8, &v13);
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(*(void *)(a1 + 136), &v16);
      float result = NAN;
      if (v16 != -INFINITY)
      {
        float result = NAN;
        if (v15 != -INFINITY)
        {
          float result = INFINITY;
          if (v15 != INFINITY && v16 != INFINITY) {
            return v16 + v15;
          }
        }
      }
    }
  }
  return result;
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1B1B67248(_Unwind_Exception *a1)
{
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void **)fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter(a1, a2, a3, a4, a5);
  *(_DWORD *)(a1 + 40) = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*v6, *(void **)(a1 + 8));
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy();
}

void sub_1B1B67450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a4 + 32))();
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1B6758C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3ADE0;
  uint64_t v2 = a1[17];
  if (v2)
  {
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 200);
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 120);
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    uint64_t v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40F6F5CAE4);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    long long v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 8_Block_object_dispose(&STACK[0x708], 8) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1B6779C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter()
{
}

void sub_1B1B678F0(_Unwind_Exception *a1)
{
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter()
{
}

void sub_1B1B67A18(_Unwind_Exception *a1)
{
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter()
{
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = v5;
  LODWORD(v5) = *(_DWORD *)a4;
  *(unsigned char *)(a1 + 84) = *((unsigned char *)a4 + 4);
  *(_DWORD *)(a1 + 80) = v5;
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(a1, a2, a3, a4);
  if ((*(unsigned char *)(a1 + 72) & 0x80) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a1 + 40) == 1
       ? *(uint64_t (**)(void))(**(void **)(a1 + 104) + 40)
       : *(uint64_t (**)(void))(**(void **)(a1 + 112) + 40);
    *(void *)(a1 + 280) = v6();
    int v7 = *(_DWORD *)(a1 + 96);
    std::__tree<int>::destroy(a1 + 136, *(void **)(a1 + 144));
    *(void *)(a1 + 136) = a1 + 144;
    *(void *)(a1 + 144) = 0;
    uint64_t v8 = *(void **)(a1 + 224);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = -1;
    std::__tree<int>::destroy(a1 + 216, v8);
    *(void *)(a1 + 216) = a1 + 224;
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = -1;
    if (v7 != -1)
    {
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 120, v7);
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 200, v7);
    }
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(****(void ****)(a1 + 144) + 104))(***(void ***)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 152) + 104))(***(void ***)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1B67D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, int a8)
{
  int v12 = a4;
  (*(void (**)(void, uint64_t))(***(void ***)a7 + 56))(**(void **)a7, a4);
  a7[18] = v12;
  v19[0] = a8 - 1;
  v19[1] = a8 << 31 >> 31;
  std::locale v19[2] = 0;
  v19[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v19, a8);
  unint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v16);
  while (1)
  {
    if (!v16[0])
    {
      if (v18 >= v16[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v15 = (int *)(v16[1] + 16 * v18);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v16[0] + 24))(v16[0])) {
      break;
    }
    if (!v16[0]) {
      goto LABEL_7;
    }
    char v15 = (int *)(*(uint64_t (**)(void))(*(void *)v16[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v15, a8);
    if (v16[0]) {
      (*(void (**)(void))(*(void *)v16[0] + 40))(v16[0]);
    }
    else {
      ++v18;
    }
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(void *)v16[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v17) {
    --*v17;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1B67FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, unsigned char *a3, int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a3, *v10);
  if (result && !a3[76])
  {
    do
    {
      int v12 = (long long *)(a3 + 60);
      if (!a3[56]) {
        int v12 = (long long *)(*(uint64_t (**)(void))(***(void ***)a3 + 80))(**(void **)a3);
      }
      long long v13 = *v12;
      long long v24 = *(_OWORD *)a4;
      long long v25 = v13;
      if (a5)
      {
        unint64_t v14 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)&v24, (uint64_t)&v25);
        unint64_t v22 = v14;
        int v23 = v15;
        if ((_BYTE)v14 == 0xFF)
        {
          LODWORD(v27) = v14 >> 8;
          int v26 = 2139095040;
          if (v27 == INFINITY && v15 == -1) {
            goto LABEL_21;
          }
        }
        int v17 = (unsigned int *)&v24;
        unint64_t v18 = &v25;
      }
      else
      {
        unint64_t v19 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)&v25, (uint64_t)&v24);
        unint64_t v22 = v19;
        int v23 = v20;
        if ((_BYTE)v19 == 0xFF)
        {
          LODWORD(v27) = v19 >> 8;
          int v26 = 2139095040;
          if (v27 == INFINITY && v20 == -1) {
            goto LABEL_21;
          }
        }
        int v17 = (unsigned int *)&v25;
        unint64_t v18 = &v24;
      }
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, (uint64_t)&v22);
LABEL_21:
      uint64_t result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next((uint64_t)a3);
    }
    while (!a3[76]);
  }
  return result;
}

unint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if ((*(unsigned char *)(a1 + 72) & 0x80) == 0)
  {
    unint64_t v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
    goto LABEL_3;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 96);
  if (v8 != -1)
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      a2 = a3;
      a3 = v4;
    }
    unint64_t v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushedLabelFilterArc(a1, a2, a3, v8);
    goto LABEL_17;
  }
  unint64_t v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
  unsigned int v12 = v6;
  char v13 = BYTE4(v6);
  if ((_BYTE)v6 == 0xFF)
  {
    LODWORD(v15) = v6 >> 8;
    int v14 = 2139095040;
    if (v15 == INFINITY)
    {
      unint64_t v7 = 0;
      unint64_t v6 = 0x7F800000FFLL;
      return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
    }
  }
  if (*(unsigned char *)(a1 + 76))
  {
    if (*(_DWORD *)(a1 + 40) == 1)
    {
      uint64_t v9 = v4;
      uint64_t v10 = v3;
    }
    else
    {
      uint64_t v9 = v3;
      uint64_t v10 = v4;
    }
    unint64_t v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelFilterArc(a1, v9, v10, &v12);
LABEL_17:
    unint64_t v7 = v6 & 0xFFFFFF0000000000;
    return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
  }
LABEL_3:
  unint64_t v7 = 0;
  return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
}

unint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, (_DWORD *)a3);
  if (v5 == 0xFF)
  {
    uint64_t v7 = 2139095040;
    goto LABEL_11;
  }
  unsigned __int8 v6 = v5;
  if ((*(unsigned char *)(a1 + 72) & 0x40) == 0)
  {
    uint64_t v7 = 0;
    return v6 | (unint64_t)(v7 << 8);
  }
  float v8 = 0.0;
  if (*(unsigned char *)(a1 + 76))
  {
    uint64_t v9 = 56;
    if (*(_DWORD *)(a1 + 64) == 1) {
      uint64_t v9 = 48;
    }
    uint64_t v10 = *(unsigned char **)(a1 + v9);
    if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v10)) {
      float v8 = *(float *)(*(void *)v10 + 8);
    }
  }
  float v11 = *(float *)(a1 + 81);
  uint64_t v7 = 2139095040;
  if (v8 == INFINITY)
  {
LABEL_11:
    unsigned __int8 v6 = -1;
    return v6 | (unint64_t)(v7 << 8);
  }
  float v13 = *(float *)(a3 + 8);
  float v14 = NAN;
  if (v13 != -INFINITY && v8 != -INFINITY)
  {
    if (v8 == INFINITY || v13 == INFINITY)
    {
      float v14 = INFINITY;
      if ((LODWORD(v11) & 0x7FFFFFFFu) >= 0x7F800000) {
        float v14 = NAN;
      }
    }
    else
    {
      float v15 = v8 + v13;
      float v14 = NAN;
      if (v15 != -INFINITY)
      {
        int v16 = LODWORD(v11) & 0x7FFFFFFF;
        float v14 = NAN;
        float v17 = v15 - v11;
        if (v15 == INFINITY) {
          float v17 = INFINITY;
        }
        if (v16 <= 2139095039) {
          float v14 = v17;
        }
      }
    }
  }
  *(float *)(a3 + _Block_object_dispose(&STACK[0x708], 8) = v14;
  float v18 = floorf((float)(v8 * 1024.0) + 0.5) * 0.00097656;
  if ((LODWORD(v8) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v18 = v8;
  }
  uint64_t v7 = LODWORD(v18);
  return v6 | (unint64_t)(v7 << 8);
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = (_DWORD *)a2;
  *(unsigned char *)(a1 + 76) = 0;
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4 == -1)
  {
    if (*(unsigned char *)(a1 + 33)) {
      return 255;
    }
    unsigned __int8 v9 = *(unsigned char *)(a1 + 34) ^ 1;
  }
  else if (*a3 == -1)
  {
    int v6 = *(unsigned __int8 *)(a1 + 32);
    if (*(unsigned char *)(a1 + 32)) {
      unsigned __int8 v7 = -1;
    }
    else {
      unsigned __int8 v7 = 0;
    }
    unsigned __int8 v9 = v7;
    if (v6) {
      return 255;
    }
  }
  else
  {
    if (v4) {
      unsigned __int8 v5 = 0;
    }
    else {
      unsigned __int8 v5 = -1;
    }
    unsigned __int8 v9 = v5;
    if (!v4) {
      return 255;
    }
  }
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    a2 = (uint64_t)a3;
    a3 = v3;
  }
  return fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, (uint64_t)a3, &v9);
}

void *fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_1F0A367D0;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    int v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_1B1B685E0(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

_DWORD *fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetImpl(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    ++*(_DWORD *)(a2 + 56);
  }
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    int v6 = result[14] - 1;
    result[14] = v6;
    if (!v6) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = a2;
  return result;
}

void fst::StateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ArcIterator(&v20, *(void *)(a1 + 8), v6);
    unint64_t v7 = v21;
    uint64_t v8 = *((void *)v20 + 3);
    uint64_t v9 = *((void *)v20 + 4) - v8;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      uint64_t v11 = v9 >> 4;
      int v12 = *(_DWORD *)(v10 + 68);
      float v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        int v15 = *v13;
        v13 += 4;
        int v14 = v15;
        if (v12 <= v15)
        {
          int v12 = v14 + 1;
          *(_DWORD *)(v10 + 6_Block_object_dispose(&STACK[0x708], 8) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      unint64_t v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v16 = *(_DWORD *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(v17 + 68);
    --*((_DWORD *)v20 + 13);
    BOOL v4 = v16 >= v18;
    if (v16 < v18) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v17);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1B687D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1B68878(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 120);
  if (*(_DWORD *)(v3 + 76) == a2) {
    BOOL v4 = (uint64_t *)(v3 + 80);
  }
  else {
    BOOL v4 = (uint64_t *)(*(void *)(v3 + 8) + 8 * (a2 + 1));
  }
  uint64_t v5 = *v4;
  int v8 = *(_DWORD *)(v5 + 52);
  uint64_t v6 = (_DWORD *)(v5 + 52);
  int v7 = v8;
  uint64_t v9 = *(void *)(v6 - 7);
  uint64_t v10 = (*(void *)(v6 - 5) - v9) >> 4;
  if (*(void *)(v6 - 5) == v9) {
    uint64_t v9 = 0;
  }
  *a3 = 0;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v6;
  _DWORD *v6 = v7 + 1;
  return result;
}

void fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 24);
  if (v7 == 1 && *(unsigned char *)(a4 + 35) == 0)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 0;
    LODWORD(__p) = 0;
    if (fst::SingleShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (char **)a3, (uint64_t *)a4, &__p, (__n128 **)&v11))fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v11, __p); {
    else
    }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
    if (v11)
    {
      int v12 = v11;
      operator delete(v11);
    }
  }
  else if (v7)
  {
    if (*(unsigned char *)(a4 + 33)
      || (fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (void *)a3, a4), uint64_t v9 = *(char **)a3, *(void *)(a3 + 8) - *(void *)a3 != 4)|| *(float *)v9 < -INFINITY|| *(float *)v9 > -INFINITY)
    {
      fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFst();
    }
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
    v10(a2, 4, 4);
  }
}

void sub_1B1B68CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ImplToFst((void *)(v18 - 64));
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v6 = 0;
        v5[0] = v3;
        v5[1] = 0;
        void v5[2] = 0;
        void v5[3] = &v6;
        fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (uint64_t)v5);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B1B695A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  unint64_t v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  long long v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NaturalLess<fst::TropicalWeightTpl<float>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v10 = *(void *)(a3 + 8) - *(void *)a3;
  if (v10)
  {
    unint64_t v11 = v10 >> 2;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    bzero(*(void **)a3, 4 * v11);
  }
  unsigned int v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v28);
  while (1)
  {
    uint64_t result = v28;
    if (!v28)
    {
      if ((int)v30 >= v29) {
        return result;
      }
LABEL_11:
      uint64_t v14 = v30;
      goto LABEL_12;
    }
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
    uint64_t result = v28;
    if (v13) {
      break;
    }
    if (!v28) {
      goto LABEL_11;
    }
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v28 + 24))();
LABEL_12:
    unint64_t v27 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v14, v25);
    uint64_t v15 = (int)v14;
    while (1)
    {
      if (!v25[0])
      {
        if (v27 >= v25[2]) {
          goto LABEL_38;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v25[0] + 24))(v25[0])) {
        break;
      }
      if (v25[0])
      {
        uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v25[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v16 = v25[1] + 16 * v27;
LABEL_19:
      uint64_t v17 = *(int *)(*a2 + 4 * v15);
      if (v17 == *(_DWORD *)(*a2 + 4 * *(int *)(v16 + 12)))
      {
        uint64_t v18 = *(_DWORD **)a3;
        if (!a4
          || (unint64_t v19 = (float *)(v16 + 8),
              float v32 = 0.0,
              fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(a4, (float *)(v16 + 8), &v32)))
        {
          int v20 = 1;
          goto LABEL_23;
        }
        if ((v18[v17] | 2) == 2)
        {
          float v32 = 0.0;
          float v22 = *v19;
          float v32 = *v19;
          int v31 = 2139095040;
          if (v32 == INFINITY || (v32 = v22, int v31 = 0, v22 == 0.0)) {
            int v20 = 2;
          }
          else {
            int v20 = 3;
          }
LABEL_23:
          v18[v17] = v20;
        }
        *a5 = 0;
      }
      float v32 = 0.0;
      float v21 = *(float *)(v16 + 8);
      float v32 = v21;
      int v31 = 2139095040;
      if (v21 != INFINITY)
      {
        float v32 = v21;
        int v31 = 0;
        if (v21 != 0.0) {
          *a6 = 0;
        }
      }
      if (v25[0]) {
        (*(void (**)(void))(*(void *)v25[0] + 40))(v25[0]);
      }
      else {
        ++v27;
      }
    }
    if (v25[0])
    {
      (*(void (**)(void))(*(void *)v25[0] + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v26) {
      --*v26;
    }
LABEL_40:
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
    }
    else {
      ++v30;
    }
  }
  if (v28) {
    return (*(uint64_t (**)(void))(*(void *)v28 + 8))();
  }
  return result;
}

void sub_1B1B69AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  int v2 = &v3;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>();
}

void sub_1B1B69C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  float v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  int v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>()
{
}

void sub_1B1B6A578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  unint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(uint64_t a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = NAN;
  if (*a2 != -INFINITY)
  {
    float v4 = NAN;
    if (*a3 != -INFINITY)
    {
      if (v3 >= *a3) {
        float v4 = *a3;
      }
      else {
        float v4 = *a2;
      }
    }
  }
  return v4 == v3 && v3 != *a3;
}

void *fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~ShortestFirstQueue(void *a1)
{
  *a1 = &unk_1F0A3EC70;
  int v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  return a1;
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~ShortestFirstQueue(void *a1)
{
  *a1 = &unk_1F0A3EC70;
  int v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Head_(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Enqueue_(uint64_t a1, int a2)
{
  int v3 = a2;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Insert(a1 + 16, &v3);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Dequeue_(uint64_t a1)
{
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Pop(a1 + 16);
}

BOOL fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Clear_(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Insert(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 64;
  float v4 = *(int **)(a1 + 64);
  unint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = *(int **)(v5 + 8);
  unint64_t v8 = v7 - v4;
  if (v8 > v6)
  {
    v4[v6] = *a2;
    *(_DWORD *)(*(void *)(a1 + 16) + 4 * *(int *)(*(void *)(a1 + 40) + 4 * *(int *)(a1 + 88))) = *(_DWORD *)(a1 + 88);
    goto LABEL_52;
  }
  unint64_t v9 = *(void *)(a1 + 80);
  if ((unint64_t)v7 >= v9)
  {
    if ((v8 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v9 - (void)v4;
    unint64_t v12 = (uint64_t)(v9 - (void)v4) >> 1;
    if (v12 <= v8 + 1) {
      unint64_t v12 = v8 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v13);
      float v4 = *(int **)(a1 + 64);
      uint64_t v7 = *(int **)(a1 + 72);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (int *)&v14[4 * v8];
    uint64_t v16 = &v14[4 * v13];
    *uint64_t v15 = *a2;
    uint64_t v10 = v15 + 1;
    while (v7 != v4)
    {
      int v17 = *--v7;
      *--uint64_t v15 = v17;
    }
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v16;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    uint64_t v10 = v7 + 1;
  }
  unint64_t v18 = *(void *)(a1 + 32);
  *(void *)(a1 + 72) = v10;
  uint64_t v19 = *(char **)(a1 + 24);
  if ((unint64_t)v19 >= v18)
  {
    float v21 = *(char **)(a1 + 16);
    uint64_t v22 = (v19 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_55;
    }
    unint64_t v23 = v18 - (void)v21;
    unint64_t v24 = (uint64_t)(v18 - (void)v21) >> 1;
    if (v24 <= v22 + 1) {
      unint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 32, v25);
      float v21 = *(char **)(a1 + 16);
      uint64_t v19 = *(char **)(a1 + 24);
    }
    else
    {
      uint64_t v26 = 0;
    }
    unint64_t v27 = &v26[4 * v22];
    uint64_t v28 = &v26[4 * v25];
    *(_DWORD *)unint64_t v27 = *(_DWORD *)(a1 + 88);
    uint64_t v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v20;
    *(void *)(a1 + 32) = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v19 = *(_DWORD *)(a1 + 88);
    uint64_t v20 = v19 + 4;
  }
  unint64_t v30 = *(void *)(a1 + 56);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v20;
  int v31 = *(char **)(a1 + 48);
  if ((unint64_t)v31 >= v30)
  {
    long long v33 = *(char **)(a1 + 40);
    uint64_t v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      unint64_t v35 = v30 - (void)v33;
      unint64_t v36 = (uint64_t)(v30 - (void)v33) >> 1;
      if (v36 <= v34 + 1) {
        unint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37)
      {
        long long v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v37);
        long long v33 = *(char **)(a1 + 40);
        int v31 = *(char **)(a1 + 48);
      }
      else
      {
        long long v38 = 0;
      }
      long long v39 = &v38[4 * v34];
      long long v40 = &v38[4 * v37];
      *(_DWORD *)long long v39 = *(_DWORD *)(a1 + 88);
      float v32 = v39 + 4;
      while (v31 != v33)
      {
        int v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(void *)(a1 + 40) = v39;
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = v32;
      *(void *)(a1 + 56) = v40;
      if (v33) {
        operator delete(v33);
      }
      goto LABEL_51;
    }
LABEL_55:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)int v31 = *(_DWORD *)(a1 + 88);
  float v32 = v31 + 4;
LABEL_51:
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = v32;
LABEL_52:
  int v42 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = v42 + 1;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3 = a3;
  if (a3 >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    while (1)
    {
      unsigned int v7 = v3 - 1;
      uint64_t v8 = (v3 - 1) >> 1;
      if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(a1 + 8, (float *)(**(void **)a1 + 4 * *(int *)(v6 + 4 * v8)), (float *)(**(void **)a1 + 4 * *a2)))
      {
        break;
      }
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(int *)(v9 + 4 * v3);
      uint64_t v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      uint64_t v12 = *(void *)(a1 + 16);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v_Block_object_dispose(&STACK[0x708], 8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      uint64_t v6 = *(void *)(a1 + 64);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v_Block_object_dispose(&STACK[0x708], 8) = v10;
      unsigned int v3 = v7 >> 1;
      if (v7 <= 1) {
        return *(unsigned int *)(*(void *)(a1 + 40) + 4 * (int)v8);
      }
    }
  }
  LODWORD(v_Block_object_dispose(&STACK[0x708], 8) = v3;
  return *(unsigned int *)(*(void *)(a1 + 40) + 4 * (int)v8);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Pop(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 64);
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(a1 + 88) - 1;
  float v4 = *(int **)(a1 + 40);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[v3];
  *float v4 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *uint64_t v1 = v1[v3];
  v1[v3] = v4;
  --*(_DWORD *)(a1 + 88);
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Heapify(a1, 0);
  return v2;
}

BOOL fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Heapify(BOOL result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result + 8;
  while (1)
  {
    uint64_t v5 = (2 * a2) | 1u;
    if ((int)v5 >= *(_DWORD *)(v3 + 88)
      || !(uint64_t result = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v4, (float *)(**(void **)v3 + 4 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v5)), (float *)(**(void **)v3 + 4 * *(int *)(*(void *)(v3 + 64) + 4 * (int)a2)))))
    {
      uint64_t v5 = a2;
    }
    unsigned int v6 = 2 * a2 + 2;
    if ((signed int)v6 < *(_DWORD *)(v3 + 88))
    {
      uint64_t result = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v4, (float *)(**(void **)v3 + 4 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v6)), (float *)(**(void **)v3 + 4 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v5)));
      if (result) {
        uint64_t v5 = v6;
      }
      else {
        uint64_t v5 = v5;
      }
    }
    if (v5 == a2) {
      break;
    }
    uint64_t v7 = *(void *)(v3 + 40);
    uint64_t v8 = *(int *)(v7 + 4 * (int)a2);
    uint64_t v9 = *(int *)(v7 + 4 * (int)v5);
    *(_DWORD *)(v7 + 4 * (int)a2) = v9;
    uint64_t v10 = *(void *)(v3 + 16);
    *(_DWORD *)(v10 + 4 * v9) = a2;
    *(_DWORD *)(v7 + 4 * (int)v5) = v8;
    *(_DWORD *)(v10 + 4 * v_Block_object_dispose(&STACK[0x708], 8) = v5;
    uint64_t v11 = *(void *)(v3 + 64);
    LODWORD(v_Block_object_dispose(&STACK[0x708], 8) = *(_DWORD *)(v11 + 4 * (int)a2);
    *(_DWORD *)(v11 + 4 * (int)a2) = *(_DWORD *)(v11 + 4 * (int)v5);
    *(_DWORD *)(v11 + 4 * (int)v5) = v8;
    a2 = v5;
  }
  return result;
}

uint64_t fst::SingleShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, char **a2, uint64_t *a3, _DWORD *a4, __n128 **a5)
{
  a5[1] = *a5;
  *a4 = -1;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) == -1) {
    return 1;
  }
  memset(v129, 0, sizeof(v129));
  uint64_t v8 = *a3;
  uint64_t v9 = *((unsigned int *)a3 + 3);
  if (v9 == -1) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  a2[1] = *a2;
  (*(void (**)(void))(**(void **)(v8 + 16) + 56))(*(void *)(v8 + 16));
  if (a3[3] != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    long long v39 = fst::LogMessage::LogMessage((fst *)&v131, (uint64_t)__p);
    long long v40 = (void *)fst::cerr(v39);
    long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"SingleShortestPath: for nshortest > 1, use ShortestPath", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" instead", 8);
LABEL_61:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v131);
    if (SHIBYTE(v126) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_198;
  }
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = *((_DWORD *)a3 + 9);
  float v131 = INFINITY;
  v10.n128_u32[0] = (unsigned __int32)__p[0];
  if (*(float *)__p != INFINITY || *((_DWORD *)a3 + 10) != -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v41 = fst::LogMessage::LogMessage((fst *)&v131, (uint64_t)__p);
    int v42 = (void *)fst::cerr(v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"SingleShortestPath: weight and state thresholds not applicable", 62);
    goto LABEL_61;
  }
  uint64_t v123 = v8;
  unint64_t v120 = a3;
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  unint64_t v13 = (v12 - *a2) >> 2;
  if (v13 < (int)v9)
  {
    uint64_t v14 = a2 + 2;
    do
    {
      if ((unint64_t)v12 >= *v14)
      {
        if ((v13 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = *v14 - (void)v11;
        uint64_t v17 = v16 >> 1;
        if (v16 >> 1 <= v13 + 1) {
          uint64_t v17 = v13 + 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = &v19[4 * v13];
        *(_DWORD *)uint64_t v20 = 2139095040;
        uint64_t v15 = v20 + 4;
        uint64_t v22 = *a2;
        float v21 = a2[1];
        if (v21 != *a2)
        {
          do
          {
            int v23 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v20 - 1) = v23;
            v20 -= 4;
          }
          while (v21 != v22);
          float v21 = *a2;
        }
        *a2 = v20;
        a2[1] = v15;
        a2[2] = &v19[4 * v18];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v12 = 2139095040;
        uint64_t v15 = v12 + 4;
      }
      a2[1] = v15;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)v129, __p);
      unint64_t v25 = a5[1];
      unint64_t v24 = (unint64_t)a5[2];
      if ((unint64_t)v25 >= v24)
      {
        unint64_t v27 = *a5;
        uint64_t v28 = v25 - *a5;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = v24 - (void)v27;
        if (v30 >> 3 > v29) {
          unint64_t v29 = v30 >> 3;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          float v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v31);
          unint64_t v27 = *a5;
          unint64_t v25 = a5[1];
        }
        else
        {
          float v32 = 0;
        }
        long long v33 = &v32[16 * v28];
        *(_DWORD *)long long v33 = -1;
        *((void *)v33 + 1) = -1;
        uint64_t v34 = (__n128 *)v33;
        if (v25 != v27)
        {
          do
          {
            __n128 v10 = v25[-1];
            v34[-1] = v10;
            --v34;
            --v25;
          }
          while (v25 != v27);
          unint64_t v27 = *a5;
        }
        uint64_t v26 = v33 + 16;
        *a5 = v34;
        a5[1] = (__n128 *)(v33 + 16);
        a5[2] = (__n128 *)&v32[16 * v31];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        v25->n128_u32[0] = -1;
        v25->n128_u64[1] = -1;
        uint64_t v26 = (char *)&v25[1];
      }
      a5[1] = (__n128 *)v26;
      uint64_t v11 = *a2;
      uint64_t v12 = a2[1];
      unint64_t v13 = (v12 - *a2) >> 2;
    }
    while (v13 < (int)v9);
  }
  unint64_t v36 = a2 + 2;
  unint64_t v35 = (unint64_t)a2[2];
  if ((unint64_t)v12 >= v35)
  {
    if ((v13 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v44 = v35 - (void)v11;
    uint64_t v45 = v44 >> 1;
    if (v44 >> 1 <= v13 + 1) {
      uint64_t v45 = v13 + 1;
    }
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v45;
    }
    if (v46) {
      long long v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v46);
    }
    else {
      long long v47 = 0;
    }
    long long v48 = &v47[4 * v13];
    uint64_t v49 = &v47[4 * v46];
    *(_DWORD *)long long v48 = 0;
    unint64_t v37 = v48 + 4;
    uint64_t v51 = *a2;
    unint64_t v50 = a2[1];
    if (v50 != *a2)
    {
      do
      {
        int v52 = *((_DWORD *)v50 - 1);
        v50 -= 4;
        *((_DWORD *)v48 - 1) = v52;
        v48 -= 4;
      }
      while (v50 != v51);
      unint64_t v50 = *a2;
    }
    *a2 = v48;
    a2[1] = v37;
    a2[2] = v49;
    if (v50) {
      operator delete(v50);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v12 = 0;
    unint64_t v37 = v12 + 4;
  }
  a2[1] = v37;
  unint64_t v53 = (unint64_t)a5[2];
  long long v54 = a5[1];
  if ((unint64_t)v54 >= v53)
  {
    double v56 = *a5;
    uint64_t v57 = v54 - *a5;
    unint64_t v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v59 = v53 - (void)v56;
    if (v59 >> 3 > v58) {
      unint64_t v58 = v59 >> 3;
    }
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v60 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v60 = v58;
    }
    if (v60)
    {
      uint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v60);
      double v56 = *a5;
      long long v54 = a5[1];
    }
    else
    {
      uint64_t v61 = 0;
    }
    unint64_t v62 = (__n128 *)&v61[16 * v57];
    long long v63 = &v61[16 * v60];
    v62->n128_u32[0] = -1;
    v62->n128_u64[1] = -1;
    uint64_t v55 = (char *)&v62[1];
    if (v54 != v56)
    {
      do
      {
        __n128 v10 = v54[-1];
        v62[-1] = v10;
        --v62;
        --v54;
      }
      while (v54 != v56);
      double v56 = *a5;
    }
    *a5 = v62;
    a5[1] = (__n128 *)v55;
    a5[2] = (__n128 *)v63;
    if (v56) {
      operator delete(v56);
    }
  }
  else
  {
    v54->n128_u32[0] = -1;
    v54->n128_u64[1] = -1;
    uint64_t v55 = (char *)&v54[1];
  }
  a5[1] = (__n128 *)v55;
  (*(void (**)(void, uint64_t, __n128))(**(void **)(v8 + 16) + 24))(*(void *)(v8 + 16), v9, v10);
  LOBYTE(__p[0]) = 1;
  std::vector<BOOL>::push_back((uint64_t)v129, __p);
  float v64 = INFINITY;
  while (1)
  {
    if ((*(uint64_t (**)(void))(**(void **)(v123 + 16) + 48))(*(void *)(v123 + 16)))
    {
LABEL_202:
      uint64_t v38 = 1;
      break;
    }
    uint64_t v124 = (*(uint64_t (**)(void))(**(void **)(v123 + 16) + 16))(*(void *)(v123 + 16));
    (*(void (**)(void))(**(void **)(v123 + 16) + 32))(*(void *)(v123 + 16));
    *(void *)((char *)v129[0] + (((unint64_t)(int)v124 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v124);
    float v65 = *(float *)&(*a2)[4 * (int)v124];
    LODWORD(__p[0]) = (*(float (**)(uint64_t))(*(void *)a1 + 32))(a1);
    float v131 = INFINITY;
    if (*(float *)__p == INFINITY) {
      goto LABEL_110;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v124);
    float v67 = NAN;
    if (v65 != -INFINITY && v66 != -INFINITY)
    {
      float v67 = INFINITY;
      BOOL v68 = v66 == INFINITY || v65 == INFINITY;
      float v69 = v65 + v66;
      if (!v68) {
        float v67 = v69;
      }
    }
    if (v64 >= v67) {
      float v70 = v67;
    }
    else {
      float v70 = v64;
    }
    if (v67 == -INFINITY || v64 == -INFINITY) {
      float v70 = NAN;
    }
    *(float *)std::string __p = v64;
    float v131 = v70;
    if (v64 != v70)
    {
      *a4 = v124;
      float v64 = v70;
    }
    uint64_t v38 = 0;
    if (v64 == -INFINITY) {
      break;
    }
    if (*((unsigned char *)v120 + 34)) {
      goto LABEL_202;
    }
LABEL_110:
    unint64_t v128 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v124, __p);
    while (1)
    {
      if (!__p[0])
      {
        if (v128 >= v126)
        {
          int v114 = 0;
          goto LABEL_195;
        }
        goto LABEL_116;
      }
      char v73 = (*(uint64_t (**)(void *))(*(void *)__p[0] + 24))(__p[0]);
      long long v74 = __p[0];
      if (v73) {
        break;
      }
      if (__p[0])
      {
        long long v75 = (float *)(*(uint64_t (**)(void))(*(void *)__p[0] + 32))();
        goto LABEL_150;
      }
LABEL_116:
      long long v75 = (float *)((char *)__p[1] + 16 * v128);
LABEL_150:
      while (1)
      {
        std::vector<int>::pointer v96 = *a2;
        uint64_t v97 = a2[1];
        unint64_t v98 = (v97 - *a2) >> 2;
        unint64_t v99 = *((int *)v75 + 3);
        if (v98 > v99) {
          break;
        }
        if ((unint64_t)v97 >= *v36)
        {
          if ((v98 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v77 = *v36 - (void)v96;
          uint64_t v78 = v77 >> 1;
          if (v77 >> 1 <= v98 + 1) {
            uint64_t v78 = v98 + 1;
          }
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v79 = v78;
          }
          if (v79) {
            long long v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v79);
          }
          else {
            long long v80 = 0;
          }
          long long v81 = &v80[4 * v98];
          *(_DWORD *)long long v81 = 2139095040;
          char v76 = v81 + 4;
          long long v83 = *a2;
          long long v82 = a2[1];
          if (v82 != *a2)
          {
            do
            {
              int v84 = *((_DWORD *)v82 - 1);
              v82 -= 4;
              *((_DWORD *)v81 - 1) = v84;
              v81 -= 4;
            }
            while (v82 != v83);
            long long v82 = *a2;
          }
          *a2 = v81;
          a2[1] = v76;
          a2[2] = &v80[4 * v79];
          if (v82) {
            operator delete(v82);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v97 = 2139095040;
          char v76 = v97 + 4;
        }
        a2[1] = v76;
        LOBYTE(v131) = 0;
        std::vector<BOOL>::push_back((uint64_t)v129, &v131);
        long long v86 = a5[1];
        unint64_t v85 = (unint64_t)a5[2];
        if ((unint64_t)v86 >= v85)
        {
          long long v88 = *a5;
          uint64_t v89 = v86 - *a5;
          unint64_t v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v91 = v85 - (void)v88;
          if (v91 >> 3 > v90) {
            unint64_t v90 = v91 >> 3;
          }
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v92 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v92 = v90;
          }
          if (v92)
          {
            long long v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v92);
            long long v88 = *a5;
            long long v86 = a5[1];
          }
          else
          {
            long long v93 = 0;
          }
          long long v94 = &v93[16 * v89];
          *(_DWORD *)long long v94 = -1;
          *((void *)v94 + 1) = -1;
          unint64_t v95 = v94;
          if (v86 != v88)
          {
            do
            {
              *((__n128 *)v95 - 1) = v86[-1];
              v95 -= 16;
              --v86;
            }
            while (v86 != v88);
            long long v88 = *a5;
          }
          long long v87 = v94 + 16;
          *a5 = (__n128 *)v95;
          a5[1] = (__n128 *)(v94 + 16);
          a5[2] = (__n128 *)&v93[16 * v92];
          if (v88) {
            operator delete(v88);
          }
        }
        else
        {
          v86->n128_u32[0] = -1;
          v86->n128_u64[1] = -1;
          long long v87 = (char *)&v86[1];
        }
        a5[1] = (__n128 *)v87;
      }
      float v100 = NAN;
      if (v65 != -INFINITY)
      {
        float v101 = v75[2];
        float v100 = NAN;
        if (v101 != -INFINITY)
        {
          float v100 = INFINITY;
          BOOL v102 = v101 == INFINITY || v65 == INFINITY;
          float v103 = v65 + v101;
          if (!v102) {
            float v100 = v103;
          }
        }
      }
      float v104 = *(float *)&v96[4 * v99];
      if (v104 >= v100) {
        float v105 = v100;
      }
      else {
        float v105 = *(float *)&v96[4 * v99];
      }
      BOOL v107 = v100 == -INFINITY || v104 == -INFINITY;
      float v108 = NAN;
      if (!v107) {
        float v108 = v105;
      }
      float v131 = 0.0;
      float v131 = *(float *)&v96[4 * v99];
      float v130 = v108;
      if (v131 != v108)
      {
        float v109 = *(float *)&v96[4 * v99];
        if (v109 >= v100) {
          float v110 = v100;
        }
        else {
          float v110 = *(float *)&v96[4 * v99];
        }
        BOOL v112 = v100 == -INFINITY || v109 == -INFINITY;
        float v113 = NAN;
        if (!v112) {
          float v113 = v110;
        }
        *(float *)&v96[4 * v99] = v113;
        int v114 = 1;
        long long v74 = __p[0];
        if (v113 == -INFINITY) {
          goto LABEL_192;
        }
        if (__p[0]) {
          uint64_t v115 = (*(uint64_t (**)(void))(*(void *)__p[0] + 48))();
        }
        else {
          uint64_t v115 = v128;
        }
        unint64_t v116 = *((int *)v75 + 3);
        uint64_t v117 = (uint64_t)&(*a5)[v116];
        *(_DWORD *)uint64_t v117 = v124;
        *(void *)(v117 + _Block_object_dispose(&STACK[0x708], 8) = v115;
        uint64_t v118 = **(void **)(v123 + 16);
        if ((*(void *)((char *)v129[0] + ((v116 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v116))
        {
          (*(void (**)(void))(v118 + 40))();
        }
        else
        {
          (*(void (**)(void))(v118 + 24))();
          *(void *)((char *)v129[0] + (((unint64_t)*((int *)v75 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *((_DWORD *)v75 + 3);
        }
      }
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 40))(__p[0]);
      }
      else {
        ++v128;
      }
    }
    int v114 = 0;
LABEL_192:
    if (v74)
    {
      (*(void (**)(void *))(*(void *)v74 + 8))(v74);
      goto LABEL_197;
    }
LABEL_195:
    if (v127) {
      --*v127;
    }
LABEL_197:
    if (v114)
    {
LABEL_198:
      uint64_t v38 = 0;
      break;
    }
  }
  if (v129[0]) {
    operator delete(v129[0]);
  }
  return v38;
}

void sub_1B1B6B960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v22 - 100));
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v9);
  if (a4 != -1)
  {
    int v10 = -1;
    int v11 = -1;
    uint64_t v12 = a4;
    while (1)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      if (v11 != -1) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 184))(a2, v13);
LABEL_15:
      int v11 = v12;
      int v10 = v13;
      uint64_t v12 = *(unsigned int *)(*a3 + 16 * (int)v12);
      if (v12 == -1) {
        goto LABEL_18;
      }
    }
    uint64_t v25 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v12, v23);
    uint64_t v14 = *(void *)(*a3 + 16 * v11 + 8);
    if (v23[0])
    {
      (*(void (**)(void, uint64_t))(*(void *)v23[0] + 64))(v23[0], v14);
      if (v23[0])
      {
        uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v23[0] + 32))(v23[0]);
        goto LABEL_11;
      }
      uint64_t v14 = v25;
    }
    else
    {
      uint64_t v25 = *(void *)(*a3 + 16 * v11 + 8);
    }
    uint64_t v15 = v23[1] + 16 * v14;
LABEL_11:
    int v16 = *(_DWORD *)(v15 + 8);
    uint64_t v20 = *(void *)v15;
    int v21 = v16;
    int v22 = v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 208))(a2, v13, &v20);
    if (v23[0])
    {
      (*(void (**)(void))(*(void *)v23[0] + 8))(v23[0]);
    }
    else if (v24)
    {
      --*v24;
    }
    goto LABEL_15;
  }
  uint64_t v13 = 0xFFFFFFFFLL;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v13);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 4, 0)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
  }
  unint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v18 = fst::ShortestPathProperties(v17, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 192))(a2, v18, 0x3FFFFFFF0007);
}

void sub_1B1B6BEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

void *fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, void *a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = a2;
  void v6[2] = *(void *)a3;
  int v7 = *(_DWORD *)(a3 + 16);
  char v8 = *(unsigned char *)(a3 + 20);
  char v9 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  memset(v13, 0, 29);
  a2[1] = *a2;
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ShortestDistance(v6, *(_DWORD *)(a3 + 12));
  if (BYTE12(v13[1]))
  {
    a2[1] = *a2;
    int v5 = 2143289344;
    std::vector<fst::TropicalWeightTpl<float>>::resize((uint64_t)a2, 1uLL, &v5);
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(v6);
}

void sub_1B1B6BFA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1);
    (*(void (**)(uint64_t *, void))(*a2 + 248))(a2, (v8 + 1));
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v50 = 0;
  if (a3)
  {
LABEL_29:
    uint64_t v10 = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
    int v17 = 1;
    goto LABEL_30;
  }
  LODWORD(v44) = 0;
  (*(void (**)(uint64_t, void ***))(*(void *)a1 + 128))(a1, &p_p);
  uint64_t v10 = 0xFFFFFFFFLL;
  while (1)
  {
    if (p_p)
    {
      char v11 = (*((uint64_t (**)(void **))*p_p + 2))(p_p);
      long long v12 = p_p;
      if (v11) {
        goto LABEL_22;
      }
      if (p_p)
      {
        uint64_t v13 = (*((uint64_t (**)(void))*p_p + 3))();
        goto LABEL_11;
      }
    }
    else if ((int)v44 >= (int)v43)
    {
      goto LABEL_24;
    }
    uint64_t v13 = v44;
LABEL_11:
    float v14 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v13);
    *(float *)&uint64_t v39 = v14;
    LODWORD(__p) = 2139095040;
    int v15 = 2 * (v10 != -1);
    unsigned int v16 = v10 == -1 ? v13 : -1;
    if (v14 == INFINITY)
    {
      int v15 = 4;
      uint64_t v10 = v10;
    }
    else
    {
      uint64_t v10 = v16;
    }
    if ((v15 | 4) != 4) {
      break;
    }
    if (p_p) {
      (*((void (**)(void **))*p_p + 4))(p_p);
    }
    else {
      LODWORD(v44) = v44 + 1;
    }
  }
  long long v12 = p_p;
LABEL_22:
  if (v12) {
    (*((void (**)(void **))*v12 + 1))(v12);
  }
LABEL_24:
  if (v10 == -1) {
    goto LABEL_29;
  }
  LODWORD(p_p) = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v10);
  LODWORD(v39) = 0;
  if (*(float *)&p_p != 0.0)
  {
    std::string __p = 0;
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    p_p = &__p;
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    uint64_t v45 = &v50;
    fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (uint64_t)&p_p);
  }
  int v17 = 0;
LABEL_30:
  LODWORD(v41) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v39);
  while (2)
  {
    if (!v39)
    {
      if ((int)v41 >= (int)v40) {
        goto LABEL_80;
      }
      goto LABEL_36;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v39 + 16))(v39))
    {
      if (v39)
      {
        uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v39 + 24))();
LABEL_37:
        int v19 = v18 + v17;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v19)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if (v18 == v9) {
          (*(void (**)(uint64_t *, void, double))(*a2 + 184))(a2, (v18 + v17), 0.0);
        }
        v20.n128_f32[0] = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v18);
        LODWORD(p_p) = v20.n128_u32[0];
        LODWORD(__p) = 2139095040;
        v21.n128_u32[0] = v20.n128_u32[0];
        char v22 = v17 ^ 1;
        if (v20.n128_f32[0] == INFINITY) {
          char v22 = 1;
        }
        if ((v22 & 1) == 0)
        {
          p_p = 0;
          LODWORD(v43) = v20.n128_u32[0];
          HIDWORD(v43) = v18 + v17;
          v20.n128_f64[0] = (*(double (**)(uint64_t *, void, void ***))(*a2 + 208))(a2, 0, &p_p);
        }
        unint64_t v46 = 0;
        (*(void (**)(uint64_t, uint64_t, void ***, __n128, __n128))(*(void *)a1 + 136))(a1, v18, &p_p, v20, v21);
LABEL_47:
        if (p_p)
        {
          if ((*((unsigned int (**)(void **))*p_p + 3))(p_p))
          {
            if (p_p)
            {
              (*((void (**)(void))*p_p + 1))();
              goto LABEL_75;
            }
LABEL_73:
            if (v45) {
              --*(_DWORD *)v45;
            }
LABEL_75:
            if (v39) {
              (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
            }
            else {
              LODWORD(v41) = v41 + 1;
            }
            continue;
          }
          if (p_p)
          {
            uint64_t v23 = (*((uint64_t (**)(void))*p_p + 4))();
LABEL_53:
            uint64_t v24 = (*(_DWORD *)(v23 + 12) + v17);
            float v25 = *(float *)(v23 + 8);
            if (v24 == v10) {
              char v26 = v17;
            }
            else {
              char v26 = 1;
            }
            if (v26)
            {
              int v27 = *(_DWORD *)(v23 + 8);
            }
            else
            {
              float v28 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v10);
              int v27 = 2143289344;
              if (v28 != -INFINITY && v25 != -INFINITY)
              {
                int v27 = 2139095040;
                BOOL v29 = v28 == INFINITY || v25 == INFINITY;
                float v30 = v25 + v28;
                if (!v29) {
                  *(float *)&int v27 = v30;
                }
              }
            }
            std::string __p = *(void **)v23;
            unint64_t v48 = __PAIR64__(v19, v27);
            while (1)
            {
              int v31 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              uint64_t v32 = *a2;
              if (v31 > (int)v24) {
                break;
              }
              (*(void (**)(uint64_t *))(v32 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void **))(v32 + 208))(a2, v24, &__p);
            if (p_p) {
              (*((void (**)(void **))*p_p + 5))(p_p);
            }
            else {
              ++v46;
            }
            goto LABEL_47;
          }
        }
        else if (v46 >= v44)
        {
          goto LABEL_73;
        }
        uint64_t v23 = v43 + 16 * v46;
        goto LABEL_53;
      }
LABEL_36:
      uint64_t v18 = v41;
      goto LABEL_37;
    }
    break;
  }
  if (v39) {
    (*(void (**)(void))(*(void *)v39 + 8))();
  }
LABEL_80:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, v10);
  if (v10 == v9) {
    char v33 = v17;
  }
  else {
    char v33 = 1;
  }
  if ((v33 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v9);
    (*(void (**)(uint64_t *, uint64_t))(*a2 + 184))(a2, v9);
  }
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  unint64_t v35 = v50 | v34;
  uint64_t v36 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v37 = fst::ReverseProperties(v35, v17);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v36 | v37, 0x3FFFFFFF0007);
}

void sub_1B1B6CBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *std::vector<fst::TropicalWeightTpl<float>>::insert(uint64_t a1, char *__src, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (int *)__src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(int **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v14 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - (char *)v13;
    uint64_t v16 = (__src - (char *)v13) >> 2;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 1 > v14) {
      unint64_t v14 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    __v.__end_cap_.__value_ = (std::allocator<int> *)(a1 + 16);
    if (v18) {
      int v19 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    __n128 v20 = &v19[v16];
    __v.__first_ = v19;
    __v.__begin_ = v20;
    __v.__end_ = v20;
    __v.__end_cap_.__value_ = &v19[v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 1;
        }
        uint64_t v23 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v22);
        __n128 v20 = (int *)((char *)v23 + (v22 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v23;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v23[v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= v21 >> 1;
        __v.__begin_ = v20;
      }
    }
    *__n128 v20 = *v3;
    __v.__end_ = v20 + 1;
    uint64_t v4 = std::vector<int>::__swap_out_circular_buffer((std::vector<int> *)a1, &__v, v4);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
    }
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
  }
  else if (__src == v6)
  {
    *(_DWORD *)int __src = *a3;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = __src + 4;
  }
  else
  {
    uint64_t v9 = __src + 4;
    uint64_t v10 = v6 - 4;
    char v11 = *(_DWORD **)(a1 + 8);
    while (v10 < v6)
    {
      int v12 = *(_DWORD *)v10;
      v10 += 4;
      *v11++ = v12;
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-4 * ((v6 - v9) >> 2)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += *(void *)(a1 + 8) > (unint64_t)v3;
    }
    *uint64_t v4 = *v3;
  }
  return v4;
}

void sub_1B1B6CECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::NShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, int a5, int a6, float a7, float a8)
{
  v153[0] = a8;
  if (!a4) {
    return;
  }
  if ((a6 & 1) != 0
    && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x400000000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&v130, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&v130, "ERROR");
    }
    uint64_t v16 = fst::LogMessage::LogMessage((fst *)&v150, (uint64_t)&v130);
    uint64_t v17 = (void *)fst::cerr(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"NShortestPath: FST has a cycle and include_final_ties was set to true. This is not currently supported.", 103);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v150);
    if (SHIBYTE(v132) < 0) {
      operator delete(v130);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
    return;
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v18);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v19);
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v147 = 0;
  v148 = 0;
  unint64_t v149 = 0;
  long long v144 = 0;
  long long v145 = 0;
  uint64_t v146 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) != -1)
  {
    uint64_t v22 = *a3;
    uint64_t v21 = a3[1];
    if ((*(int (**)(uint64_t))(*(void *)a1 + 24))(a1) < (unint64_t)((v21 - v22) >> 2))
    {
      int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      uint64_t v24 = *a3;
      LODWORD(v130) = 0;
      LODWORD(v130) = *(_DWORD *)(v24 + 4 * v23);
      LODWORD(__p) = 2139095040;
      v20.n128_u32[0] = v130;
      if (*(float *)&v130 != INFINITY)
      {
        v129.n128_u32[0] = 0;
        if (!fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v143, v153, (float *)&v129))
        {
          if (a5)
          {
            uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
            (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v25);
            int v142 = 0;
            int v142 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
            (*(void (**)(uint64_t, double))(*(void *)a2 + 184))(a2, 0.0);
            int v120 = a5;
            char v26 = (char *)v150;
            int v27 = (char *)v151;
            for (unint64_t i = v151 - v150; i <= v142; unint64_t i = (v27 - (char *)v150) >> 3)
            {
              if (v27 >= v152)
              {
                if ((i + 1) >> 61) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v29 = v152 - v26;
                uint64_t v30 = v29 >> 2;
                if (v29 >> 2 <= i + 1) {
                  uint64_t v30 = i + 1;
                }
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v30;
                }
                if (v31) {
                  uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v152, v31);
                }
                else {
                  uint64_t v32 = 0;
                }
                char v33 = &v32[8 * i];
                *(void *)char v33 = 0x7F800000FFFFFFFFLL;
                int v27 = v33 + 8;
                unint64_t v35 = (char *)v150;
                uint64_t v34 = v151;
                if (v151 != v150)
                {
                  do
                  {
                    uint64_t v36 = *--v34;
                    *((void *)v33 - 1) = v36;
                    v33 -= 8;
                  }
                  while (v34 != (unint64_t *)v35);
                  uint64_t v34 = v150;
                }
                v150 = (unint64_t *)v33;
                v151 = (unint64_t *)v27;
                v152 = &v32[8 * v31];
                if (v34) {
                  operator delete(v34);
                }
              }
              else
              {
                *(void *)int v27 = 0x7F800000FFFFFFFFLL;
                v27 += 8;
              }
              v151 = (unint64_t *)v27;
              char v26 = (char *)v150;
            }
            int v37 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
            uint64_t v38 = (char *)&v150[v142];
            *(_DWORD *)uint64_t v38 = v37;
            *((_DWORD *)v38 + 1) = 0;
            std::vector<int>::push_back[abi:ne180100]((uint64_t)&v147, &v142);
            float v39 = *(float *)(*a3 + 4 * (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1));
            float v40 = NAN;
            if (v39 != -INFINITY)
            {
              float v40 = NAN;
              if (v153[0] != -INFINITY)
              {
                float v40 = INFINITY;
                BOOL v41 = v153[0] == INFINITY || v39 == INFINITY;
                float v42 = v39 + v153[0];
                if (!v41) {
                  float v40 = v42;
                }
              }
            }
            float v141 = v40;
            std::string __p = 0;
            long long v139 = 0;
            long long v140 = 0;
            unint64_t v44 = v147;
            uint64_t v43 = (char *)v148;
            if (v147 == v148) {
LABEL_191:
            }
              fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
            BOOL v119 = 0;
            while (1)
            {
              v135[0] = (uint64_t *)&v150;
              v135[1] = a3;
              int v136 = -1;
              float v137 = a7;
              if (v43 - (char *)v44 >= 5)
              {
                int v45 = *v44;
                unint64_t v46 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(v44, v135, (unint64_t)(v43 - (char *)v44) >> 2);
                long long v47 = (int *)(v43 - 4);
                if (v43 - 4 == (char *)v46)
                {
                  *unint64_t v46 = v45;
                }
                else
                {
                  *unint64_t v46 = *v47;
                  *long long v47 = v45;
                  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v44, (uint64_t)(v46 + 1), v135, v46 + 1 - v44);
                }
              }
              uint64_t v48 = *(v148 - 1);
              uint64_t v49 = (float *)&v150[v48];
              float v50 = v49[1];
              float v51 = *v49;
              unint64_t v121 = *(int *)v49;
              float v52 = v50;
              --v148;
              if (v51 == NAN)
              {
                float v54 = 0.0;
                int v53 = v120;
              }
              else
              {
                int v53 = v120;
                if (v121 >= (a3[1] - *a3) >> 2)
                {
                  float v54 = INFINITY;
                }
                else
                {
                  float v54 = *(float *)(*a3 + 4 * v121);
                  float v55 = NAN;
                  if (v54 == -INFINITY) {
                    goto LABEL_51;
                  }
                }
              }
              float v55 = NAN;
              if (v50 != -INFINITY)
              {
                float v55 = INFINITY;
                BOOL v56 = v54 == INFINITY || v50 == INFINITY;
                float v57 = v54 + v50;
                if (!v56) {
                  float v55 = v57;
                }
              }
LABEL_51:
              *(float *)&float v130 = v55;
              if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v143, &v141, (float *)&v130)
                || v53 != -1 && (*(int (**)(uint64_t))(*(void *)a2 + 160))(a2) >= v53)
              {
                goto LABEL_190;
              }
              unint64_t v58 = v121 + 1;
              uint64_t v59 = v144;
              unint64_t v60 = v145;
              unint64_t v61 = (v145 - v144) >> 2;
              while (v61 <= v58)
              {
                if (v60 >= v146)
                {
                  unint64_t v63 = v61 + 1;
                  if ((v61 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v64 = v146 - v59;
                  if ((v146 - v59) >> 1 > v63) {
                    unint64_t v63 = v64 >> 1;
                  }
                  if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v65 = v63;
                  }
                  if (v65)
                  {
                    float v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v146, v65);
                    uint64_t v59 = v144;
                    unint64_t v60 = v145;
                  }
                  else
                  {
                    float v66 = 0;
                  }
                  float v67 = &v66[4 * v61];
                  *(_DWORD *)float v67 = 0;
                  unint64_t v62 = v67 + 4;
                  while (v60 != v59)
                  {
                    int v68 = *((_DWORD *)v60 - 1);
                    v60 -= 4;
                    *((_DWORD *)v67 - 1) = v68;
                    v67 -= 4;
                  }
                  long long v144 = v67;
                  long long v145 = v62;
                  uint64_t v146 = &v66[4 * v65];
                  if (v59)
                  {
                    operator delete(v59);
                    uint64_t v59 = v144;
                  }
                  else
                  {
                    uint64_t v59 = v67;
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v60 = 0;
                  unint64_t v62 = v60 + 4;
                }
                long long v145 = v62;
                unint64_t v61 = (v62 - v59) >> 2;
                unint64_t v60 = v62;
              }
              if (a6)
              {
                float v69 = __p;
                float v70 = v139;
                unint64_t v71 = (v139 - (unsigned char *)__p) >> 2;
                if (v71 <= v58)
                {
                  do
                  {
                    if (v70 >= v140)
                    {
                      if ((v71 + 1) >> 62) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v72 = v140 - v69;
                      uint64_t v73 = v72 >> 1;
                      if (v72 >> 1 <= v71 + 1) {
                        uint64_t v73 = v71 + 1;
                      }
                      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v74 = v73;
                      }
                      if (v74) {
                        long long v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v140, v74);
                      }
                      else {
                        long long v75 = 0;
                      }
                      char v76 = &v75[4 * v71];
                      *(_DWORD *)char v76 = 2139095040;
                      float v70 = v76 + 4;
                      uint64_t v78 = (char *)__p;
                      uint64_t v77 = v139;
                      if (v139 != __p)
                      {
                        do
                        {
                          int v79 = *((_DWORD *)v77 - 1);
                          v77 -= 4;
                          *((_DWORD *)v76 - 1) = v79;
                          v76 -= 4;
                        }
                        while (v77 != v78);
                        uint64_t v77 = (char *)__p;
                      }
                      std::string __p = v76;
                      long long v139 = v70;
                      long long v140 = &v75[4 * v74];
                      if (v77) {
                        operator delete(v77);
                      }
                    }
                    else
                    {
                      *(_DWORD *)float v70 = 2139095040;
                      v70 += 4;
                    }
                    long long v139 = v70;
                    float v69 = __p;
                    unint64_t v71 = (v70 - (unsigned char *)__p) >> 2;
                  }
                  while (v71 <= v58);
                  ++*(_DWORD *)&v144[4 * v58];
                  if (v121 != -1)
                  {
LABEL_97:
                    unint64_t v80 = *(int *)&v144[4 * v58];
                    if (v80 == a4)
                    {
                      *((float *)__p + v5_Block_object_dispose(&STACK[0x708], 8) = v50;
                    }
                    else if (v80 > a4)
                    {
                      float v83 = *((float *)__p + v58);
                      if (v83 > (float)(v50 + 0.00097656) || (float)(v83 + 0.00097656) < v50) {
                        goto LABEL_190;
                      }
                    }
LABEL_118:
                    unint64_t v134 = 0;
                    (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
                    while (2)
                    {
                      if (v130)
                      {
                        if ((*(unsigned int (**)(void *))(*(void *)v130 + 24))(v130))
                        {
                          if (v130)
                          {
                            (*(void (**)(void))(*(void *)v130 + 8))();
                          }
                          else
                          {
LABEL_176:
                            if (v133) {
                              --*v133;
                            }
                          }
                          float v114 = (*(float (**)(uint64_t, unint64_t))(*(void *)a1 + 32))(a1, v121);
                          *(float *)&float v130 = v114;
                          v129.n128_u32[0] = 2139095040;
                          if (v114 != INFINITY)
                          {
                            v129.n128_u32[0] = 0;
                            unsigned __int32 v115 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
                            float v116 = INFINITY;
                            if (v52 != INFINITY) {
                              float v116 = v114 + v52;
                            }
                            BOOL v118 = v114 == -INFINITY || v52 == -INFINITY;
                            v129.n128_u32[0] = v115;
                            if (v118) {
                              float v116 = NAN;
                            }
                            LODWORD(v130) = -1;
                            *((float *)&v130 + 1) = v116;
                            std::vector<std::pair<int,fst::TropicalWeightTpl<float>>>::push_back[abi:ne180100]((void **)&v150, &v130);
                            float v130 = 0;
                            unint64_t v131 = __PAIR64__(v48, LODWORD(v114));
                            (*(void (**)(uint64_t, void, void **))(*(void *)a2 + 208))(a2, v129.n128_u32[0], &v130);
                            std::vector<int>::push_back[abi:ne180100]((uint64_t)&v147, &v129);
                            v123[0] = (uint64_t *)&v150;
                            v123[1] = a3;
                            int v124 = -1;
                            float v125 = a7;
                            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v147, (uint64_t)v148, v123, v148 - v147);
                          }
                          goto LABEL_190;
                        }
                        if (v130)
                        {
                          unint64_t v85 = (__n128 *)(*(uint64_t (**)(void))(*(void *)v130 + 32))();
LABEL_125:
                          __n128 v129 = *v85;
                          __n128 v122 = v129;
                          uint64_t v86 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
                          __n128 v87 = v122;
                          v87.n128_u32[0] = v122.n128_u32[2];
                          BOOL v88 = v122.n128_f32[2] == INFINITY || v52 == INFINITY;
                          float v89 = v122.n128_f32[2] + v52;
                          if (v88) {
                            float v89 = INFINITY;
                          }
                          BOOL v91 = v122.n128_f32[2] == -INFINITY || v52 == -INFINITY;
                          uint64_t v92 = v129.n128_u32[3];
                          if (v91) {
                            uint64_t v93 = 2143289344;
                          }
                          else {
                            uint64_t v93 = LODWORD(v89);
                          }
                          long long v94 = v151;
                          if (v151 >= (unint64_t *)v152)
                          {
                            uint64_t v96 = v151 - v150;
                            if ((unint64_t)(v96 + 1) >> 61) {
                              std::vector<int>::__throw_length_error[abi:ne180100]();
                            }
                            unint64_t v97 = (v152 - (char *)v150) >> 2;
                            if (v97 <= v96 + 1) {
                              unint64_t v97 = v96 + 1;
                            }
                            if ((unint64_t)(v152 - (char *)v150) >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v98 = v97;
                            }
                            if (v98) {
                              unint64_t v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v152, v98);
                            }
                            else {
                              unint64_t v99 = 0;
                            }
                            float v100 = (uint64_t *)&v99[8 * v96];
                            uint64_t *v100 = v92 | (v93 << 32);
                            unint64_t v95 = (unint64_t *)(v100 + 1);
                            BOOL v102 = (char *)v150;
                            float v101 = v151;
                            if (v151 != v150)
                            {
                              do
                              {
                                uint64_t v103 = *--v101;
                                *--float v100 = v103;
                              }
                              while (v101 != (unint64_t *)v102);
                              float v101 = v150;
                            }
                            v150 = (unint64_t *)v100;
                            v151 = v95;
                            v152 = &v99[8 * v98];
                            if (v101) {
                              operator delete(v101);
                            }
                          }
                          else
                          {
                            unint64_t *v151 = v129.n128_u32[3] | (unint64_t)(v93 << 32);
                            unint64_t v95 = v94 + 1;
                          }
                          v151 = v95;
                          v129.n128_u32[3] = v48;
                          (*(void (**)(uint64_t, uint64_t, __n128 *, __n128))(*(void *)a2 + 208))(a2, v86, &v129, v87);
                          float v104 = v148;
                          if ((unint64_t)v148 >= v149)
                          {
                            char v106 = v147;
                            uint64_t v107 = v148 - v147;
                            unint64_t v108 = v107 + 1;
                            if ((unint64_t)(v107 + 1) >> 62) {
                              std::vector<int>::__throw_length_error[abi:ne180100]();
                            }
                            uint64_t v109 = v149 - (void)v147;
                            if ((uint64_t)(v149 - (void)v147) >> 1 > v108) {
                              unint64_t v108 = v109 >> 1;
                            }
                            if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v110 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v110 = v108;
                            }
                            if (v110)
                            {
                              float v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v149, v110);
                              char v106 = v147;
                              float v104 = v148;
                            }
                            else
                            {
                              float v111 = 0;
                            }
                            BOOL v112 = (int *)&v111[4 * v107];
                            int *v112 = v86;
                            float v105 = v112 + 1;
                            while (v104 != v106)
                            {
                              int v113 = *--v104;
                              *--BOOL v112 = v113;
                            }
                            v147 = v112;
                            v148 = v105;
                            unint64_t v149 = (unint64_t)&v111[4 * v110];
                            if (v106) {
                              operator delete(v106);
                            }
                          }
                          else
                          {
                            int *v148 = v86;
                            float v105 = v104 + 1;
                          }
                          v148 = v105;
                          v126[0] = (uint64_t *)&v150;
                          v126[1] = a3;
                          int v127 = -1;
                          float v128 = a7;
                          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v147, (uint64_t)v105, v126, v105 - v147);
                          if (v130) {
                            (*(void (**)(void *))(*(void *)v130 + 40))(v130);
                          }
                          else {
                            ++v134;
                          }
                          continue;
                        }
                      }
                      else if (v134 >= v132)
                      {
                        goto LABEL_176;
                      }
                      break;
                    }
                    unint64_t v85 = (__n128 *)(v131 + 16 * v134);
                    goto LABEL_125;
                  }
                }
                else
                {
                  ++*(_DWORD *)&v59[4 * v58];
                  if (v121 != -1) {
                    goto LABEL_97;
                  }
                }
              }
              else
              {
                ++*(_DWORD *)&v59[4 * v58];
                if (v121 != -1)
                {
                  if (*(int *)&v144[4 * v58] > a4) {
                    goto LABEL_190;
                  }
                  goto LABEL_118;
                }
              }
              if (v119 && ((float)(v8 + 0.00097656) < v50 || v8 > (float)(v50 + 0.00097656))) {
                goto LABEL_191;
              }
              uint64_t v82 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
              float v130 = 0;
              LODWORD(v131) = 0;
              HIDWORD(v131) = v48;
              (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 208))(a2, v82, &v130);
              if (v119)
              {
                BOOL v119 = 1;
                goto LABEL_190;
              }
              BOOL v119 = *(int *)&v144[4 * v58] == a4;
              if (*(_DWORD *)&v144[4 * v58] == a4)
              {
                float v8 = v50;
                if ((a6 & 1) == 0) {
                  goto LABEL_191;
                }
              }
LABEL_190:
              unint64_t v44 = v147;
              uint64_t v43 = (char *)v148;
              if (v147 == v148) {
                goto LABEL_191;
              }
            }
          }
        }
      }
    }
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void, __n128))(*(void *)a1 + 64))(a1, 4, 0, v20)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
  }
  if (v144)
  {
    long long v145 = v144;
    operator delete(v144);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
}

void sub_1B1B6DFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  int v45 = *(void **)(v43 - 200);
  if (v45)
  {
    *(void *)(v43 - 192) = v45;
    operator delete(v45);
  }
  unint64_t v46 = *(void **)(v43 - 176);
  if (v46)
  {
    *(void *)(v43 - 16_Block_object_dispose(&STACK[0x708], 8) = v46;
    operator delete(v46);
  }
  long long v47 = *(void **)(v43 - 152);
  if (v47)
  {
    *(void *)(v43 - 144) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ShortestDistance(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1) == -1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0);
    if (!result) {
      return result;
    }
    float v137 = (char *)a1 + 116;
    goto LABEL_224;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    *(void *)(a1[1] + _Block_object_dispose(&STACK[0x708], 8) = *(void *)a1[1];
    a1[6] = a1[5];
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v4 = a2;
  int v5 = (void **)a1[1];
  unint64_t v7 = v5 + 1;
  uint64_t v6 = v5[1];
  float v8 = (char *)*v5;
  unint64_t v9 = ((char *)v6 - (unsigned char *)*v5) >> 2;
  if (v9 <= a2)
  {
    uint64_t v10 = (char **)(a1 + 5);
    do
    {
      unint64_t v11 = (unint64_t)v5[2];
      if ((unint64_t)v6 >= v11)
      {
        if ((v9 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v11 - (void)v8;
        uint64_t v14 = v13 >> 1;
        if (v13 >> 1 <= v9 + 1) {
          uint64_t v14 = v9 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v5 + 2), v15);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = &v16[4 * v9];
        *(_DWORD *)uint64_t v17 = 2139095040;
        int v12 = v17 + 4;
        uint64_t v18 = (char *)*v7;
        uint64_t v19 = (char *)*v5;
        if (*v7 != *v5)
        {
          do
          {
            int v20 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v17 - 1) = v20;
            v17 -= 4;
          }
          while (v18 != v19);
          uint64_t v18 = (char *)*v5;
        }
        *int v5 = v17;
        *unint64_t v7 = v12;
        void v5[2] = &v16[4 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        _DWORD *v6 = 2139095040;
        int v12 = v6 + 1;
      }
      *unint64_t v7 = v12;
      uint64_t v22 = (_DWORD *)a1[6];
      unint64_t v21 = a1[7];
      if ((unint64_t)v22 >= v21)
      {
        uint64_t v24 = ((char *)v22 - *v10) >> 2;
        if ((unint64_t)(v24 + 1) >> 62) {
LABEL_229:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v25 = v21 - (void)*v10;
        uint64_t v26 = v25 >> 1;
        if (v25 >> 1 <= (unint64_t)(v24 + 1)) {
          uint64_t v26 = v24 + 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27) {
          float v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v27);
        }
        else {
          float v28 = 0;
        }
        uint64_t v29 = &v28[4 * v24];
        *(_DWORD *)uint64_t v29 = 2139095040;
        int v23 = v29 + 4;
        unint64_t v31 = (char *)a1[5];
        uint64_t v30 = (char *)a1[6];
        if (v30 != v31)
        {
          do
          {
            int v32 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *((_DWORD *)v29 - 1) = v32;
            v29 -= 4;
          }
          while (v30 != v31);
          uint64_t v30 = *v10;
        }
        a1[5] = v29;
        a1[6] = v23;
        a1[7] = &v28[4 * v27];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *uint64_t v22 = 2139095040;
        int v23 = v22 + 1;
      }
      a1[6] = v23;
      LOBYTE(v139[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v139);
      int v5 = (void **)a1[1];
      unint64_t v7 = v5 + 1;
      uint64_t v6 = v5[1];
      float v8 = (char *)*v5;
      unint64_t v9 = ((char *)v6 - (unsigned char *)*v5) >> 2;
    }
    while (v9 <= v4);
  }
  if (*((unsigned char *)a1 + 33))
  {
    char v33 = (char *)a1[11];
    uint64_t v34 = (char *)a1[12];
    unint64_t v35 = (v34 - v33) >> 2;
    if (v35 <= v4)
    {
      uint64_t v36 = a1 + 13;
      do
      {
        if ((unint64_t)v34 >= *v36)
        {
          unint64_t v38 = v35 + 1;
          if ((v35 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = *v36 - (void)v33;
          if (v39 >> 1 > v38) {
            unint64_t v38 = v39 >> 1;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            BOOL v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v40);
            char v33 = (char *)a1[11];
            uint64_t v34 = (char *)a1[12];
          }
          else
          {
            BOOL v41 = 0;
          }
          float v42 = &v41[4 * v35];
          *(_DWORD *)float v42 = -1;
          int v37 = v42 + 4;
          while (v34 != v33)
          {
            int v43 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *((_DWORD *)v42 - 1) = v43;
            v42 -= 4;
          }
          a1[11] = v42;
          a1[12] = v37;
          a1[13] = &v41[4 * v40];
          if (v33)
          {
            operator delete(v33);
            char v33 = (char *)a1[11];
          }
          else
          {
            char v33 = v42;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v34 = -1;
          int v37 = v34 + 4;
        }
        a1[12] = v37;
        unint64_t v35 = (v37 - v33) >> 2;
        uint64_t v34 = v37;
      }
      while (v35 <= v4);
      float v8 = *(char **)a1[1];
    }
    *(_DWORD *)&v33[4 * v4] = *((_DWORD *)a1 + 28);
  }
  *(_DWORD *)&v8[4 * v4] = 0;
  unint64_t v44 = (char **)(a1 + 5);
  *(_DWORD *)(a1[5] + 4 * v4) = 0;
  *(void *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v4);
  int v45 = a1 + 13;
  float v137 = (char *)a1 + 116;
  uint64_t v138 = (uint64_t)(a1 + 7);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_220;
    }
    int v46 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    long long v47 = (void **)a1[1];
    uint64_t v48 = v47 + 1;
    uint64_t v49 = v47[1];
    float v50 = (char *)*v47;
    for (unint64_t i = ((char *)v49 - (unsigned char *)*v47) >> 2; i <= v46; unint64_t i = ((char *)v49 - (unsigned char *)*v47) >> 2)
    {
      unint64_t v52 = (unint64_t)v47[2];
      if ((unint64_t)v49 >= v52)
      {
        if ((i + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v54 = v52 - (void)v50;
        uint64_t v55 = v54 >> 1;
        if (v54 >> 1 <= i + 1) {
          uint64_t v55 = i + 1;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v55;
        }
        if (v56) {
          float v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v47 + 2), v56);
        }
        else {
          float v57 = 0;
        }
        unint64_t v58 = &v57[4 * i];
        *(_DWORD *)unint64_t v58 = 2139095040;
        int v53 = v58 + 4;
        uint64_t v59 = (char *)*v48;
        unint64_t v60 = (char *)*v47;
        if (*v48 != *v47)
        {
          do
          {
            int v61 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v58 - 1) = v61;
            v58 -= 4;
          }
          while (v59 != v60);
          uint64_t v59 = (char *)*v47;
        }
        *long long v47 = v58;
        *uint64_t v48 = v53;
        v47[2] = &v57[4 * v56];
        if (v59) {
          operator delete(v59);
        }
      }
      else
      {
        *uint64_t v49 = 2139095040;
        int v53 = v49 + 1;
      }
      *uint64_t v48 = v53;
      unint64_t v63 = (_DWORD *)a1[6];
      unint64_t v62 = a1[7];
      if ((unint64_t)v63 >= v62)
      {
        uint64_t v65 = ((char *)v63 - *v44) >> 2;
        if ((unint64_t)(v65 + 1) >> 62) {
          goto LABEL_229;
        }
        uint64_t v66 = v62 - (void)*v44;
        uint64_t v67 = v66 >> 1;
        if (v66 >> 1 <= (unint64_t)(v65 + 1)) {
          uint64_t v67 = v65 + 1;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68) {
          float v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v138, v68);
        }
        else {
          float v69 = 0;
        }
        float v70 = &v69[4 * v65];
        *(_DWORD *)float v70 = 2139095040;
        uint64_t v64 = v70 + 4;
        uint64_t v72 = (char *)a1[5];
        unint64_t v71 = (char *)a1[6];
        if (v71 != v72)
        {
          do
          {
            int v73 = *((_DWORD *)v71 - 1);
            v71 -= 4;
            *((_DWORD *)v70 - 1) = v73;
            v70 -= 4;
          }
          while (v71 != v72);
          unint64_t v71 = *v44;
        }
        a1[5] = v70;
        a1[6] = v64;
        a1[7] = &v69[4 * v68];
        if (v71) {
          operator delete(v71);
        }
      }
      else
      {
        *unint64_t v63 = 2139095040;
        uint64_t v64 = v63 + 1;
      }
      a1[6] = v64;
      LOBYTE(v139[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v139);
      long long v47 = (void **)a1[1];
      uint64_t v48 = v47 + 1;
      uint64_t v49 = v47[1];
      float v50 = (char *)*v47;
    }
    if (*((unsigned char *)a1 + 32))
    {
      LODWORD(v139[0]) = (*(float (**)(void, void))(*(void *)*a1 + 32))(*a1, v46);
      int v142 = 2139095040;
      if (*(float *)v139 != INFINITY)
      {
LABEL_220:
        ++*((_DWORD *)a1 + 28);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0);
        if (!result) {
          return result;
        }
LABEL_224:
        *float v137 = 1;
        return result;
      }
    }
    *(void *)(a1[8] + (((unint64_t)v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v46);
    uint64_t v74 = a1[5];
    float v75 = *(float *)(v74 + 4 * v46);
    *(_DWORD *)(v74 + 4 * v46) = 2139095040;
    uint64_t v76 = *a1;
    unint64_t v141 = 0;
    (*(void (**)(uint64_t, void, void *))(*(void *)v76 + 136))(v76, v46, v139);
    while (1)
    {
      if (v139[0])
      {
        if ((*(uint64_t (**)(void))(*(void *)v139[0] + 24))(v139[0])) {
          goto LABEL_212;
        }
        if (v139[0])
        {
          uint64_t v77 = (*(uint64_t (**)(void))(*(void *)v139[0] + 32))(v139[0]);
          goto LABEL_109;
        }
      }
      else if (v141 >= v139[2])
      {
LABEL_212:
        char v135 = 1;
        goto LABEL_214;
      }
      uint64_t v77 = v139[1] + 16 * v141;
LABEL_109:
      uint64_t v78 = (void **)a1[1];
      int v79 = v78 + 1;
      unint64_t v80 = v78[1];
      long long v81 = (char *)*v78;
      unint64_t v82 = ((char *)v80 - (unsigned char *)*v78) >> 2;
      if (v82 <= *(int *)(v77 + 12))
      {
        do
        {
          unint64_t v84 = (unint64_t)v78[2];
          if ((unint64_t)v80 >= v84)
          {
            if ((v82 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v86 = v84 - (void)v81;
            uint64_t v87 = v86 >> 1;
            if (v86 >> 1 <= v82 + 1) {
              uint64_t v87 = v82 + 1;
            }
            if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v88 = v87;
            }
            if (v88) {
              float v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v78 + 2), v88);
            }
            else {
              float v89 = 0;
            }
            unint64_t v90 = &v89[4 * v82];
            *(_DWORD *)unint64_t v90 = 2139095040;
            unint64_t v85 = v90 + 4;
            BOOL v91 = (char *)*v79;
            uint64_t v92 = (char *)*v78;
            if (*v79 != *v78)
            {
              do
              {
                int v93 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v90 - 1) = v93;
                v90 -= 4;
              }
              while (v91 != v92);
              BOOL v91 = (char *)*v78;
            }
            *uint64_t v78 = v90;
            uint64_t *v79 = v85;
            v78[2] = &v89[4 * v88];
            if (v91) {
              operator delete(v91);
            }
          }
          else
          {
            *unint64_t v80 = 2139095040;
            unint64_t v85 = v80 + 1;
          }
          uint64_t *v79 = v85;
          unint64_t v95 = (_DWORD *)a1[6];
          unint64_t v94 = a1[7];
          if ((unint64_t)v95 >= v94)
          {
            uint64_t v97 = ((char *)v95 - *v44) >> 2;
            if ((unint64_t)(v97 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v98 = v94 - (void)*v44;
            uint64_t v99 = v98 >> 1;
            if (v98 >> 1 <= (unint64_t)(v97 + 1)) {
              uint64_t v99 = v97 + 1;
            }
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v100 = v99;
            }
            if (v100) {
              float v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v138, v100);
            }
            else {
              float v101 = 0;
            }
            BOOL v102 = &v101[4 * v97];
            *(_DWORD *)BOOL v102 = 2139095040;
            uint64_t v96 = v102 + 4;
            float v104 = (char *)a1[5];
            uint64_t v103 = (char *)a1[6];
            if (v103 != v104)
            {
              do
              {
                int v105 = *((_DWORD *)v103 - 1);
                v103 -= 4;
                *((_DWORD *)v102 - 1) = v105;
                v102 -= 4;
              }
              while (v103 != v104);
              uint64_t v103 = *v44;
            }
            a1[5] = v102;
            a1[6] = v96;
            a1[7] = &v101[4 * v100];
            if (v103) {
              operator delete(v103);
            }
          }
          else
          {
            *unint64_t v95 = 2139095040;
            uint64_t v96 = v95 + 1;
          }
          a1[6] = v96;
          LOBYTE(v142) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v142);
          uint64_t v78 = (void **)a1[1];
          int v79 = v78 + 1;
          unint64_t v80 = v78[1];
          long long v81 = (char *)*v78;
          unint64_t v82 = ((char *)v80 - (unsigned char *)*v78) >> 2;
          unint64_t v83 = *(int *)(v77 + 12);
        }
        while (v82 <= v83);
      }
      else
      {
        LODWORD(v83) = *(_DWORD *)(v77 + 12);
      }
      if (*((unsigned char *)a1 + 33))
      {
        char v106 = (char *)a1[11];
        uint64_t v107 = (char *)a1[12];
        unint64_t v108 = (v107 - v106) >> 2;
        if (v108 <= (int)v83)
        {
          do
          {
            if ((unint64_t)v107 >= *v45)
            {
              unint64_t v111 = v108 + 1;
              if ((v108 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v112 = *v45 - (void)v106;
              if (v112 >> 1 > v111) {
                unint64_t v111 = v112 >> 1;
              }
              if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v113 = v111;
              }
              if (v113)
              {
                float v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v113);
                char v106 = (char *)a1[11];
                uint64_t v107 = (char *)a1[12];
              }
              else
              {
                float v114 = 0;
              }
              unsigned __int32 v115 = &v114[4 * v108];
              *(_DWORD *)unsigned __int32 v115 = -1;
              unint64_t v110 = v115 + 4;
              while (v107 != v106)
              {
                int v116 = *((_DWORD *)v107 - 1);
                v107 -= 4;
                *((_DWORD *)v115 - 1) = v116;
                v115 -= 4;
              }
              a1[11] = v115;
              a1[12] = v110;
              a1[13] = &v114[4 * v113];
              if (v106)
              {
                operator delete(v106);
                char v106 = (char *)a1[11];
              }
              else
              {
                char v106 = v115;
              }
            }
            else
            {
              *(_DWORD *)uint64_t v107 = -1;
              unint64_t v110 = v107 + 4;
            }
            a1[12] = v110;
            unint64_t v108 = (v110 - v106) >> 2;
            LODWORD(v83) = *(_DWORD *)(v77 + 12);
            uint64_t v107 = v110;
          }
          while (v108 <= (int)v83);
          uint64_t v109 = (int)v83;
          uint64_t v78 = (void **)a1[1];
        }
        else
        {
          uint64_t v109 = (int)v83;
        }
        if (*(_DWORD *)&v106[4 * v109] != *((_DWORD *)a1 + 28))
        {
          *((_DWORD *)*v78 + v109) = 2139095040;
          *(_DWORD *)(a1[5] + 4 * *(int *)(v77 + 12)) = 2139095040;
          unint64_t v83 = *(int *)(v77 + 12);
          *(void *)(a1[8] + ((v83 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v83);
          *(_DWORD *)(a1[11] + 4 * v83) = *((_DWORD *)a1 + 28);
          uint64_t v78 = (void **)a1[1];
          LODWORD(v83) = *(_DWORD *)(v77 + 12);
        }
      }
      uint64_t v117 = (char *)*v78;
      BOOL v118 = *v44;
      float v119 = NAN;
      if (v75 != -INFINITY)
      {
        float v120 = *(float *)(v77 + 8);
        float v119 = NAN;
        if (v120 != -INFINITY)
        {
          float v119 = INFINITY;
          BOOL v121 = v120 == INFINITY || v75 == INFINITY;
          float v122 = v75 + v120;
          if (!v121) {
            float v119 = v122;
          }
        }
      }
      float v123 = *(float *)&v117[4 * (int)v83];
      if (v123 >= v119) {
        float v124 = v119;
      }
      else {
        float v124 = *(float *)&v117[4 * (int)v83];
      }
      if (v119 == -INFINITY || v123 == -INFINITY) {
        float v124 = NAN;
      }
      float v127 = *((float *)a1 + 7);
      if (v124 > (float)(v123 + v127) || v123 > (float)(v127 + v124)) {
        break;
      }
LABEL_209:
      if (v139[0]) {
        (*(void (**)(void))(*(void *)v139[0] + 40))(v139[0]);
      }
      else {
        ++v141;
      }
    }
    *(float *)&v117[4 * (int)v83] = v124;
    float v129 = *(float *)&v118[4 * (int)v83];
    if (v129 >= v119) {
      float v130 = v119;
    }
    else {
      float v130 = *(float *)&v118[4 * (int)v83];
    }
    BOOL v132 = v119 == -INFINITY || v129 == -INFINITY;
    float v133 = NAN;
    if (!v132) {
      float v133 = v130;
    }
    *(float *)&v118[4 * (int)v83] = v133;
    if (*(float *)&v117[4 * (int)v83] != -INFINITY && (v133 < -INFINITY || v133 > -INFINITY))
    {
      uint64_t v134 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[8] + (((unint64_t)*(int *)(v77 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v77 + 12)))
      {
        (*(void (**)(void))(v134 + 40))();
      }
      else
      {
        (*(void (**)(void))(v134 + 24))();
        *(void *)(a1[8] + (((unint64_t)*(int *)(v77 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v77 + 12);
      }
      goto LABEL_209;
    }
    char v135 = 0;
    *float v137 = 1;
LABEL_214:
    uint64_t result = v139[0];
    if (v139[0])
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v139[0] + 8))(v139[0]);
    }
    else if (v140)
    {
      --*v140;
    }
  }
  while ((v135 & 1) != 0);
  return result;
}

void sub_1B1B6EE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a13)
  {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  else if (a16)
  {
    --*a16;
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::TropicalWeightTpl<float>>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<fst::TropicalWeightTpl<float>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<fst::TropicalWeightTpl<float>>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  float v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v18 = &v15[4 * v12];
    uint64_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    unint64_t v21 = v18;
    do
    {
      *(_DWORD *)unint64_t v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    uint64_t v22 = &v15[4 * v14];
    uint64_t v24 = (char *)*a1;
    int v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        int v25 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *((_DWORD *)v18 - 1) = v25;
        v18 -= 4;
      }
      while (v23 != v24);
      int v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void *fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[8];
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  return a1;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFst()
{
}

void sub_1B1B6F114(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

float fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final(uint64_t a1, int a2)
{
  return **(float **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 32)
                 - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    unint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x708], 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 24);
  uint64_t v4 = *v5;
  uint64_t v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B1B6F45C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 8_Block_object_dispose(&STACK[0x708], 8) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + _Block_object_dispose(&STACK[0x708], 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFinal(uint64_t a1, int a2, float a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::SetFinal(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  unint64_t v5 = *(void **)(v4[8] + 8 * a2);
  v5[1] = 0;
  void v5[2] = 0;
  v5[4] = v5[3];
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v6 = (void **)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::InitMutableArcIterator()
{
}

void sub_1B1B6FAC4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FB58;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = -1;
  *(void *)a1 = &unk_1F0A3A288;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B1B6FBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D088;
  uint64_t v2 = (void **)a1[9];
  if (v2 != (void **)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FB58;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1B6FED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1B6FFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B1B700D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B1B701A4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FB58;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = -1;
  *(void *)a1 = &unk_1F0A3A288;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v18 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v16);
  while (1)
  {
    if (!v16)
    {
      if ((int)v18 >= v17) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v18;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 16))(v16)) {
      break;
    }
    if (!v16) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v16 + 24))();
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState((void *)a1);
    **(float **)(*v5 + 8 * (int)v9) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)(*(void *)(*v5 + 8 * (int)v9) + 24), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __p.__r_.__value_.__r.__words[2]) {
          goto LABEL_24;
        }
LABEL_18:
        unint64_t v11 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 16 * v15);
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_18;
      }
      unint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_19:
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v14) {
      --*v14;
    }
LABEL_26:
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 32))(v16);
    }
    else {
      ++v18;
    }
  }
  if (v16) {
    (*(void (**)(void))(*(void *)v16 + 8))();
  }
LABEL_31:
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B1B706A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(v17);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B1B708E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>();
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      int v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      uint64_t v9 = (void *)fst::cerr(v8);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a2, a3, 1);
  }
}

void sub_1B1B70A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v73 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      unint64_t v70 = 0;
      unint64_t v71 = &v73;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (uint64_t)&v68);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      int v61 = a3;
      uint64_t v11 = a2 & 0xC0000;
      uint64_t v12 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0) {
        uint64_t v12 = 0x10425A850000;
      }
      unint64_t v13 = v8 | v12;
      uint64_t v14 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0) {
        v13 |= 0x100000uLL;
      }
      unint64_t v73 = v13;
      memset(&v67, 0, sizeof(v67));
      memset(&v66, 0, sizeof(v66));
      unsigned int v65 = 0;
      uint64_t v15 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v63);
      int v16 = 0;
LABEL_12:
      if (v63)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v63 + 16))(v63))
        {
          if (v63)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v63 + 24))();
LABEL_18:
            std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
            v67.__end_ = v67.__begin_;
            v66.__end_ = v66.__begin_;
            if (v11) {
              std::vector<int>::reserve(&v67, v18);
            }
            if (v14) {
              std::vector<int>::reserve(&v66, v18);
            }
            unint64_t v72 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v68);
            char v19 = 1;
            while (1)
            {
              if (v68)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v68 + 24))(v68))
                {
                  if (v68)
                  {
                    (*(void (**)(void))(*(void *)v68 + 8))();
                  }
                  else
                  {
LABEL_92:
                    if (v71) {
                      --*(_DWORD *)v71;
                    }
                  }
                  uint64_t v15 = a1;
                  if (v11
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v67.__end_ - (char *)v67.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    unint64_t v46 = v67.__end_ - v67.__begin_;
                    if (v46 <= 2) {
                      unint64_t v46 = 2;
                    }
                    std::vector<unsigned int>::pointer v47 = v67.__begin_ + 1;
                    unsigned int v48 = *v67.__begin_;
                    unint64_t v49 = v46 - 1;
                    while (1)
                    {
                      unsigned int v51 = *v47++;
                      unsigned int v50 = v51;
                      if (v51 == v48) {
                        break;
                      }
                      unsigned int v48 = v50;
                      if (!--v49) {
                        goto LABEL_101;
                      }
                    }
                    unint64_t v73 = v73 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v14)
                    {
LABEL_112:
                      if (v16 >= 1) {
                        unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      float v58 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v17);
                      *(float *)&uint64_t v68 = v58;
                      int v75 = 2139095040;
                      if (v58 == INFINITY)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)a1 + 40))(a1, v17, INFINITY, v58) != 1)unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
                      }
                        }
                      else
                      {
                        *(float *)&uint64_t v68 = v58;
                        int v75 = 0;
                        if (v58 != 0.0) {
                          unint64_t v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        }
                        ++v16;
                      }
                      if (v63) {
                        (*(void (**)(uint64_t))(*(void *)v63 + 32))(v63);
                      }
                      else {
                        ++v65;
                      }
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_101:
                    if (!v14) {
                      goto LABEL_112;
                    }
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    unint64_t v52 = v66.__end_ - v66.__begin_;
                    if (v52 <= 2) {
                      unint64_t v52 = 2;
                    }
                    std::vector<unsigned int>::pointer v53 = v66.__begin_ + 1;
                    unsigned int v54 = *v66.__begin_;
                    unint64_t v55 = v52 - 1;
                    while (1)
                    {
                      unsigned int v57 = *v53++;
                      unsigned int v56 = v57;
                      if (v57 == v54) {
                        break;
                      }
                      unsigned int v54 = v56;
                      if (!--v55) {
                        goto LABEL_112;
                      }
                    }
                    unint64_t v73 = v73 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_112;
                }
                if (v68)
                {
                  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v68 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v72 >= v70)
              {
                goto LABEL_92;
              }
              uint64_t v20 = v69 + 16 * v72;
LABEL_29:
              int v21 = *(_DWORD *)v20;
              int v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
              {
                unint64_t v73 = v73 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                int v22 = *(_DWORD *)(v20 + 4);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (!v22) {
                    goto LABEL_39;
                  }
                  goto LABEL_35;
                }
                unint64_t v23 = v73;
              }
              else
              {
                unint64_t v23 = v73 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              unint64_t v73 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (!v22)
              {
LABEL_39:
                unint64_t v73 = v73 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
                if (v19) {
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
LABEL_35:
              if (v19) {
                goto LABEL_44;
              }
LABEL_40:
              if (v21 < (int)v8) {
                unint64_t v73 = v73 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              }
              if (v22 < (int)a2) {
                unint64_t v73 = v73 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
              }
LABEL_44:
              int v75 = 0;
              float v24 = *(float *)(v20 + 8);
              int v75 = LODWORD(v24);
              int v74 = 0;
              if (v24 != 0.0)
              {
                int v75 = LODWORD(v24);
                int v74 = 2139095040;
                if (v24 != INFINITY) {
                  unint64_t v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                }
              }
              int v25 = *(_DWORD *)(v20 + 12);
              if (v25 <= (int)v17) {
                unint64_t v73 = v73 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              }
              if (v25 != v17 + 1) {
                unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              LODWORD(v_Block_object_dispose(&STACK[0x708], 8) = *(_DWORD *)v20;
              LODWORD(a2) = *(_DWORD *)(v20 + 4);
              if (v11)
              {
                std::vector<unsigned int>::pointer end = v67.__end_;
                if (v67.__end_ >= v67.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer begin = v67.__begin_;
                  int64_t v29 = v67.__end_ - v67.__begin_;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62) {
                    goto LABEL_135;
                  }
                  int64_t v31 = (char *)v67.__end_cap_.__value_ - (char *)v67.__begin_;
                  if (((char *)v67.__end_cap_.__value_ - (char *)v67.__begin_) >> 1 > v30) {
                    unint64_t v30 = v31 >> 1;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    char v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67.__end_cap_, v32);
                    std::vector<unsigned int>::pointer begin = v67.__begin_;
                    std::vector<unsigned int>::pointer end = v67.__end_;
                  }
                  else
                  {
                    char v33 = 0;
                  }
                  uint64_t v34 = (unsigned int *)&v33[4 * v29];
                  *uint64_t v34 = *(_DWORD *)v20;
                  unint64_t v27 = v34 + 1;
                  while (end != begin)
                  {
                    unsigned int v35 = *--end;
                    *--uint64_t v34 = v35;
                  }
                  v67.__begin_ = v34;
                  v67.__end_ = v27;
                  v67.__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *v67.__end_ = v8;
                  unint64_t v27 = end + 1;
                }
                v67.__end_ = v27;
              }
              if (v14)
              {
                std::vector<unsigned int>::pointer v36 = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer v38 = v66.__begin_;
                  int64_t v39 = v66.__end_ - v66.__begin_;
                  unint64_t v40 = v39 + 1;
                  if ((unint64_t)(v39 + 1) >> 62) {
LABEL_135:
                  }
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  int64_t v41 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v40) {
                    unint64_t v40 = v41 >> 1;
                  }
                  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v42 = v40;
                  }
                  if (v42)
                  {
                    int v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v42);
                    std::vector<unsigned int>::pointer v38 = v66.__begin_;
                    std::vector<unsigned int>::pointer v36 = v66.__end_;
                  }
                  else
                  {
                    int v43 = 0;
                  }
                  unint64_t v44 = (unsigned int *)&v43[4 * v39];
                  *unint64_t v44 = *(_DWORD *)(v20 + 4);
                  int v37 = v44 + 1;
                  while (v36 != v38)
                  {
                    unsigned int v45 = *--v36;
                    *--unint64_t v44 = v45;
                  }
                  v66.__begin_ = v44;
                  v66.__end_ = v37;
                  v66.__end_cap_.__value_ = (unsigned int *)&v43[4 * v42];
                  if (v38) {
                    operator delete(v38);
                  }
                }
                else
                {
                  *v66.__end_ = *(_DWORD *)(v20 + 4);
                  int v37 = v36 + 1;
                }
                v66.__end_ = v37;
              }
              if (v68)
              {
                (*(void (**)(uint64_t))(*(void *)v68 + 40))(v68);
                char v19 = 0;
              }
              else
              {
                char v19 = 0;
                ++v72;
              }
            }
          }
LABEL_17:
          uint64_t v17 = v65;
          goto LABEL_18;
        }
        if (v63) {
          (*(void (**)(void))(*(void *)v63 + 8))();
        }
      }
      else if ((int)v65 < v64)
      {
        goto LABEL_17;
      }
      int v59 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
      a3 = v61;
      if (v59 != -1 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      if (v67.__begin_)
      {
        v67.__end_ = v67.__begin_;
        operator delete(v67.__begin_);
      }
      unint64_t v8 = v73;
    }
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1B1B713C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1B71D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + _Block_object_dispose(&STACK[0x708], 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + _Block_object_dispose(&STACK[0x708], 8) = 0;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
    **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinishState(uint64_t a1, int a2, int a3)
{
  if ((*(float (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32)) == INFINITY)
  {
    unint64_t v6 = a2;
  }
  else
  {
    unint64_t v6 = a2;
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v6) != *(_DWORD *)(v7 + 4 * v6)) {
    goto LABEL_17;
  }
  char v8 = 0;
  uint64_t v9 = *(void **)(a1 + 80);
  uint64_t v10 = v9[1];
  uint64_t v11 = **(void **)(a1 + 16);
  uint64_t v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    unint64_t v13 = *v12--;
    v8 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while (v13 != a2);
  uint64_t v14 = *(void **)a1;
  uint64_t v15 = **(void **)(a1 + 72);
  for (unint64_t i = (int *)(v10 - 4); ; --i)
  {
    unint64_t v17 = *i;
    if (v14) {
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    }
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = 1 << v17;
    if ((v8 & 1) == 0) {
      break;
    }
    *(void *)(v11 + 8 * v18) |= v19;
    *(void *)(v15 + 8 * v18) &= ~v19;
    if (v17 == a2)
    {
      v9[1] = i;
      goto LABEL_16;
    }
LABEL_14:
    ;
  }
  *(void *)(v15 + 8 * v18) &= ~v19;
  if (v17 != a2) {
    goto LABEL_14;
  }
  v9[1] = i;
  **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_16:
  ++*(_DWORD *)(a1 + 48);
LABEL_17:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v7 + 4 * v6);
    if (v21 < *(_DWORD *)(v7 + 4 * a3)) {
      *(_DWORD *)(v7 + 4 * a3) = v21;
    }
  }
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36CC0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36CC0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36CC0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1B721A8(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37C78;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1B722C0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37C78;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      unsigned int v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      std::vector<unsigned int>::pointer v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      unsigned int v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unsigned int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unsigned int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  std::vector<unsigned int>::pointer v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  int64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1B72708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v24);
  if (v24 || (a4 & 1) != 0)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
    uint64_t v12 = a5;
    if (!a4) {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11 + v12;
    if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
    {
      if (*(void *)a1) {
        free(*(void **)a1);
      }
      uint64_t v23 = 0x4000;
      if (v13 > 0x4000) {
        uint64_t v23 = v13;
      }
      *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v23;
      uint64_t v15 = malloc_type_malloc(16 * v23, 0x1000040451B5BE8uLL);
      *(void *)a1 = v15;
      *(void *)(a1 + 16) = v15;
      BOOL v14 = v15;
    }
    else
    {
      BOOL v14 = *(_OWORD **)(a1 + 16);
      uint64_t v15 = *(_OWORD **)a1;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = &v14[v13];
    uint64_t v16 = v24;
    uint64_t v17 = v25;
    unint64_t v19 = v26;
    uint64_t v18 = v27;
    if (v27) {
      ++*v27;
    }
    unint64_t v20 = 0;
    if (!v16) {
      goto LABEL_15;
    }
    while (1)
    {
      int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
      uint64_t v22 = *v16;
      if (v21) {
        break;
      }
      *uint64_t v15 = *(_OWORD *)(*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
      (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      while (1)
      {
        ++v15;
        if (v16) {
          break;
        }
LABEL_15:
        if (v20 >= v19)
        {
          if (v18) {
            --*v18;
          }
          return;
        }
        *uint64_t v15 = *(_OWORD *)(v17 + 16 * v20++);
      }
    }
    (*(void (**)(uint64_t *))(v22 + 8))(v16);
  }
  else
  {
    uint64_t v10 = v25 + 16 * v26;
    *(void *)(a1 + 16) = v25;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  }
}

void sub_1B1B729A0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v35 = 0u;
  long long v36 = 0u;
  *(_OWORD *)unint64_t v33 = 0u;
  *(_OWORD *)uint64_t v34 = 0u;
  uint64_t v6 = -1;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = -1;
  uint64_t v37 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v38 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v38 = (int)fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v41;
    if (v41 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t v10 = v9 | 3;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v10, (uint64_t)v32);
  uint64_t v30 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v11 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = (v11 >> 3);
    do
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v13);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 24);
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        unint64_t v17 = v16 >> 4;
        if (v17 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v17;
        }
        unint64_t v19 = (_DWORD *)(v15 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v19;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v19[1];
          std::ostream::write();
          v19 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    unint64_t v20 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    int v21 = (void *)fst::cerr(v20);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v23 = *(char *)(a3 + 23);
    if (v23 >= 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = *(void *)a3;
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v25 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v38 == v12)
    {
      uint64_t updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v28 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    int64_t v29 = (void *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  uint64_t v38 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v32, v30);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_30:
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[1]);
  }
  if (SHIBYTE(v34[0]) < 0) {
    operator delete(v33[0]);
  }
  return updated;
}

void sub_1B1B72E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      unint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      int64_t v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B1B734B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type()
{
  {
    operator new();
  }
  return fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type(void)::type;
}

void sub_1B1B735A4(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B1B738F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::SetFinal(void *a1, int a2, float a3)
{
  uint64_t v5 = *(float **)(a1[8] + 8 * a2);
  float v6 = *v5;
  *uint64_t v5 = a3;
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t result = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v7, v6, a3);
  a1[1] = a1[1] & 4 | result;
  return result;
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 32);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 24)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (_DWORD *)(v6 - 16);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(v9, a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v32, v5, &__x);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v32.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v32.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(void **)(v11 + 8 * v12));
      }
      else
      {
        v32.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      uint64_t v18 = *(void *)(v16 + 24);
      uint64_t v17 = *(void *)(v16 + 32);
      int64x2_t v19 = *(int64x2_t *)(v16 + 8);
      uint64_t v20 = v17 - v18;
      if (v17 == v18)
      {
        int64x2_t v30 = *(int64x2_t *)(v16 + 8);
        uint64_t v26 = 0;
        uint64_t v27 = v20 >> 4;
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v26 = 0;
        uint64_t v22 = *(void *)(v16 + 24);
        do
        {
          int v23 = v32.__begin_[*(int *)(v22 + 12)];
          if (v23 == -1)
          {
            v24.i64[0] = *(void *)v22;
            v24.i64[1] = HIDWORD(*(void *)v22);
            int64x2_t v19 = vaddq_s64(v19, vceqzq_s64(v24));
          }
          else
          {
            *(_DWORD *)(v22 + 12) = v23;
            if (v21 != v26)
            {
              *(_OWORD *)(v18 + 16 * v26) = *(_OWORD *)v22;
              uint64_t v14 = *v4;
            }
            ++v26;
          }
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          ++v21;
          uint64_t v25 = *(void *)(v16 + 32) - *(void *)(v16 + 24);
          v22 += 16;
        }
        while (v21 < v25 >> 4);
        int64x2_t v30 = v19;
        uint64_t v27 = v25 >> 4;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs((void *)v16, v27 - v26);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + _Block_object_dispose(&STACK[0x708], 8) = v30;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v28 = *(int *)(a1 + 88);
  if (v28 == -1)
  {
    int64_t v29 = v32.__begin_;
    if (!v32.__begin_) {
      return;
    }
  }
  else
  {
    int64_t v29 = v32.__begin_;
    *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = v32.__begin_[v28];
  }
  v32.__end_ = v29;
  operator delete(v29);
}

void sub_1B1B73C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result[4];
    uint64_t v3 = -16 * a2;
    unint64_t v4 = (_DWORD *)(v2 - 16);
    std::vector<int>::size_type v5 = (_DWORD *)(v2 - 16);
    do
    {
      int v6 = *v5;
      v5 -= 4;
      if (!v6) {
        --result[1];
      }
      if (!v4[1]) {
        --result[2];
      }
      unint64_t v4 = v5;
      --a2;
    }
    while (a2);
    result[4] = v2 + v3;
  }
  return result;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 32)
                                                            - *(void *)(*(void *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24) + 16 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::Flags_()
{
  return 15;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = v4[3];
  uint64_t v7 = (int *)(v6 + 16 * v5);
  int v8 = *v7;
  int v9 = v7[1];
  if (v8 != v9) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v8)
  {
    if (!v9)
    {
      uint64_t v10 = *(unint64_t **)(a1 + 16);
      unint64_t v11 = *v10;
LABEL_8:
      *uint64_t v10 = v11 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    uint64_t v10 = *(unint64_t **)(a1 + 16);
    unint64_t v12 = *v10;
    *v10 &= ~0x1000000uLL;
    if (!v9)
    {
      unint64_t v11 = v12 & 0xFFFFFFFFFEBFFFFFLL;
      *uint64_t v10 = v11;
      goto LABEL_8;
    }
  }
  if (*(float *)(v6 + 16 * v5 + 8) != INFINITY && *(float *)(v6 + 16 * v5 + 8) != 0.0) {
    **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  uint64_t v13 = 0x30FC30007;
  BOOL v14 = a2->n128_u32[0] == v8 && a2->n128_u32[1] == v9;
  if (v14 && a2->n128_u32[3] == *(_DWORD *)(v6 + 16 * v5 + 12)) {
    uint64_t v13 = 0x3FFFFFFF0007;
  }
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetArc(v4, a2, v5);
  unsigned __int32 v15 = a2->n128_u32[0];
  unsigned __int32 v16 = a2->n128_u32[1];
  if (a2->n128_u32[0] != v16) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v15)
  {
    if (!v16)
    {
      uint64_t v17 = *(unint64_t **)(a1 + 16);
      unint64_t v18 = *v17;
LABEL_26:
      *uint64_t v17 = v18 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    uint64_t v17 = *(unint64_t **)(a1 + 16);
    unint64_t v19 = *v17 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *uint64_t v17 = v19;
    if (!v16)
    {
      unint64_t v18 = v19 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *uint64_t v17 = v18;
      goto LABEL_26;
    }
  }
  if (a2->n128_f32[2] != INFINITY && a2->n128_f32[2] != 0.0) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(void **)(a1 + 16) &= v13;
}

__n128 fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetArc(void *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v3 = (__n128 *)(a1[3] + 16 * a3);
  if (!v3->n128_u32[0]) {
    --a1[1];
  }
  if (!v3->n128_u32[1]) {
    --a1[2];
  }
  if (!a2->n128_u32[0]) {
    ++a1[1];
  }
  if (!a2->n128_u32[1]) {
    ++a1[2];
  }
  __n128 result = *a2;
  *uint64_t v3 = *a2;
  return result;
}

void std::vector<std::pair<int,fst::TropicalWeightTpl<float>>>::push_back[abi:ne180100](void **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v14 = &v13[8 * v9];
    unsigned __int32 v15 = &v13[8 * v12];
    *(void *)BOOL v14 = *a2;
    int v8 = v14 + 8;
    uint64_t v17 = (char *)*a1;
    unsigned __int32 v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      unsigned __int32 v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    int v8 = v7 + 1;
  }
  a1[1] = v8;
}

void fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = 0;
  v1[0] = 0;
  v1[1] = v4;
  v1[2] = v3;
  v1[3] = &v2;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (uint64_t)v1);
}

void sub_1B1B742F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(void **)(v11 - 112);
  if (v13) {
    operator delete(v13);
  }
  BOOL v14 = *(void **)(v11 - 88);
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(int *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (int *)(result + 4 * (v4 >> 1));
    uint64_t v9 = (int *)(a2 - 4);
    __n128 result = fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a3, *v8, *(_DWORD *)(a2 - 4));
    if (result)
    {
      int v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (int *)(v6 + 4 * v7);
        __n128 result = fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a3, *v8, v10);
        uint64_t v9 = v11;
      }
      while ((result & 1) != 0);
      int *v11 = v10;
    }
  }
  return result;
}

uint64_t fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v4 = **a1;
  unint64_t v5 = *(int *)(v4 + 8 * a2);
  int v6 = *((_DWORD *)a1 + 4);
  float v7 = 0.0;
  float v8 = 0.0;
  if (v5 != v6)
  {
    uint64_t v9 = *a1[1];
    if (v5 >= (a1[1][1] - v9) >> 2) {
      float v8 = INFINITY;
    }
    else {
      float v8 = *(float *)(v9 + 4 * v5);
    }
  }
  unint64_t v10 = *(int *)(v4 + 8 * a3);
  if (v10 != v6)
  {
    uint64_t v11 = *a1[1];
    if (v10 >= (a1[1][1] - v11) >> 2) {
      float v7 = INFINITY;
    }
    else {
      float v7 = *(float *)(v11 + 4 * v10);
    }
  }
  float v12 = NAN;
  if (v8 != -INFINITY)
  {
    float v13 = *(float *)(v4 + 8 * a2 + 4);
    float v12 = NAN;
    if (v13 != -INFINITY)
    {
      float v12 = INFINITY;
      BOOL v14 = v13 == INFINITY || v8 == INFINITY;
      float v15 = v8 + v13;
      if (!v14) {
        float v12 = v15;
      }
    }
  }
  float v28 = v12;
  float v16 = NAN;
  if (v7 != -INFINITY)
  {
    float v17 = *(float *)(v4 + 8 * a3 + 4);
    float v16 = NAN;
    if (v17 != -INFINITY)
    {
      float v16 = INFINITY;
      BOOL v18 = v17 == INFINITY || v7 == INFINITY;
      float v19 = v7 + v17;
      if (!v18) {
        float v16 = v19;
      }
    }
  }
  float v27 = v16;
  uint64_t v20 = (uint64_t)(a1 + 3);
  if (v5 != v6 || v10 == v6)
  {
    LODWORD(result) = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v20, &v27, &v28);
    int v23 = result;
    BOOL v24 = v5 != v6 && v10 == v6;
    if (v24) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = result;
    }
    if (v24 && v23)
    {
      float v25 = *((float *)a1 + 5);
      return v28 > (float)(v25 + v27) || v27 > (float)(v25 + v28);
    }
  }
  else if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v20, &v27, &v28))
  {
    return 1;
  }
  else
  {
    float v26 = *((float *)a1 + 5);
    return v28 <= (float)(v26 + v27) && v27 <= (float)(v26 + v28);
  }
  return result;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A3B0C8;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    uint64_t v4 = (void *)fst::cerr(v3);
    unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1[1] + 8) |= 4uLL;
  }
  operator new();
}

void sub_1B1B74824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ImplToFst(v18);
  _Unwind_Resume(a1);
}

_DWORD *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetImpl(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    ++*(_DWORD *)(a2 + 56);
  }
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    int v6 = result[14] - 1;
    result[14] = v6;
    if (!v6) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = a2;
  return result;
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A447C8;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~DeterminizeFst(void *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(*(uint64_t **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    char v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1B74B24(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitStateIterator()
{
}

void sub_1B1B74C18(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1B1B74E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1B75050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~DeterminizeFstImplBase(void *a1)
{
  *a1 = &unk_1F0A3F318;
  uint64_t v2 = a1[17];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_1B1B75224(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Expand(void *a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = (uint64_t *)v9;
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  uint64_t v4 = v8;
  if (v8 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, v4 + 5);
      unint64_t v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          unint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (uint64_t *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != (uint64_t *)v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<int>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1B1B75300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result != -1) {
    operator new();
  }
  return result;
}

float fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v2 = **(float ***)(*(void *)(*(void *)(a1 + 184) + 88) + 8 * a2);
  if (!v2) {
    return INFINITY;
  }
  float v4 = INFINITY;
  do
  {
    (*(void (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), *((unsigned int *)v2 + 2));
    float v6 = v2[3];
    float v7 = NAN;
    if (v6 != -INFINITY && v5 != -INFINITY)
    {
      float v7 = INFINITY;
      BOOL v8 = v5 == INFINITY || v6 == INFINITY;
      float v9 = v6 + v5;
      if (!v8) {
        float v7 = v9;
      }
    }
    if (v4 >= v7) {
      float v10 = v7;
    }
    else {
      float v10 = v4;
    }
    if (v7 == -INFINITY || v4 == -INFINITY) {
      float v4 = NAN;
    }
    else {
      float v4 = v10;
    }
    if (v4 >= -INFINITY && v4 <= -INFINITY) {
      *(void *)(a1 + 8) |= 4uLL;
    }
    uint64_t v2 = *(float **)v2;
  }
  while (v2);
  return v4;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FB58;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38B30;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FB58;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38B30;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_1B1B75614(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  float v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorCacheStore(void *a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1B1B756E8(_Unwind_Exception *a1)
{
  float v4 = v3;
  std::__list_imp<char *>::clear(v2);
  float v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38B30;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    int v3 = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  float v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl((uint64_t)a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorCacheStore(void *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = a1;
  *(void *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (void *)(a1 + 8), (void *)(a1 + 16));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(void *)(a1 + 96) = 0;
  if (a2) {
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  }
  return a1;
}

void sub_1B1B75834(_Unwind_Exception *a1)
{
  float v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 8_Block_object_dispose(&STACK[0x708], 8) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1B758A0(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  *a1 = &unk_1F0A3DD20;
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  uint64_t v3 = a1[23];
  if (v3)
  {
    uint64_t v4 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1B3EA8670](v4, 0x10E0C400200E20DLL);
  }
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~DeterminizeFstImplBase(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(uint64_t a1)
{
  uint64_t v4 = a1 + 88;
  uint64_t v2 = *(void **)(a1 + 88);
  uint64_t v3 = *(void *)(v4 + 8);
  if ((int)((unint64_t)(v3 - (void)v2) >> 3) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      float v6 = (void **)v2[v5];
      if (v6)
      {
        float v7 = *v6;
        if (*v6)
        {
          do
          {
            BOOL v8 = (void *)*v7;
            operator delete(v7);
            float v7 = v8;
          }
          while (v8);
        }
        void *v6 = 0;
        MEMORY[0x1B3EA8670](v6, 0x1020C405F07FB98);
        uint64_t v2 = *(void **)(a1 + 88);
        uint64_t v3 = *(void *)(a1 + 96);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (void)v2) >> 3));
  }
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 32);
  return a1;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1B75BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_1B1B75D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void sub_1B1B75EF8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      MutableState = 0;
    }
    else {
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        BOOL v8 = operator new(0x38uLL);
        fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          float v9 = operator new(0x18uLL);
          v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)float v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + _Block_object_dispose(&STACK[0x708], 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        BOOL v8 = 0;
      }
      float v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          BOOL v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          BOOL v18 = 0;
        }
        float v19 = &v18[8 * v14];
        *(void *)float v19 = v8;
        float v13 = v19 + 8;
        unint64_t v21 = (char *)a1[1];
        uint64_t v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          uint64_t v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *float v12 = v8;
        float v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(const void **)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>((void *)(a1 + 24), v4, v5, (v5 - (uint64_t)v4) >> 4);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = *(unsigned int *)(a2 + 48);
  return a1;
}

void *std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1B76200(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x708], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(void *a1, int a2, uint64_t **a3)
{
  uint64_t v5 = **(float ***)(*(void *)(a1[23] + 88) + 8 * a2);
  if (!v5) {
    goto LABEL_24;
  }
  do
  {
    uint64_t v6 = *((unsigned int *)v5 + 2);
    uint64_t v7 = a1[17];
    unint64_t v22 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 136))(v7, v6, v20);
    while (1)
    {
      if (!v20[0])
      {
        if (v22 >= v20[2]) {
          goto LABEL_21;
        }
LABEL_8:
        uint64_t v8 = v20[1] + 16 * v22;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)v20[0] + 24))(v20[0])) {
        break;
      }
      if (!v20[0]) {
        goto LABEL_8;
      }
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v20[0] + 32))();
LABEL_9:
      float v9 = v5[3];
      float v10 = NAN;
      if (v9 != -INFINITY)
      {
        float v11 = *(float *)(v8 + 8);
        float v10 = NAN;
        if (v11 != -INFINITY)
        {
          float v10 = INFINITY;
          BOOL v12 = v11 == INFINITY || v9 == INFINITY;
          float v13 = v9 + v11;
          if (!v12) {
            float v10 = v13;
          }
        }
      }
      LODWORD(v19) = *(_DWORD *)(v8 + 12);
      *((float *)&v19 + 1) = v10;
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FilterArc(a1[22], (_DWORD *)v8, (uint64_t)(v5 + 2), &v19, a3);
      if (v20[0]) {
        (*(void (**)(void))(*(void *)v20[0] + 40))(v20[0]);
      }
      else {
        ++v22;
      }
    }
    if (v20[0])
    {
      (*(void (**)(void))(*(void *)v20[0] + 8))();
      goto LABEL_23;
    }
LABEL_21:
    if (v21) {
      --*v21;
    }
LABEL_23:
    uint64_t v5 = *(float **)v5;
  }
  while (v5);
LABEL_24:
  uint64_t v16 = *a3;
  uint64_t v14 = a3 + 1;
  uint64_t v15 = v16;
  if (v16 != (uint64_t *)v14)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v15 + 5));
      unint64_t v17 = (uint64_t *)v15[1];
      if (v17)
      {
        do
        {
          BOOL v18 = v17;
          unint64_t v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          BOOL v18 = (uint64_t *)v15[2];
          BOOL v12 = *v18 == (void)v15;
          uint64_t v15 = v18;
        }
        while (!v12);
      }
      uint64_t v15 = v18;
    }
    while (v18 != (uint64_t *)v14);
  }
}

void sub_1B1B76470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  LODWORD(v7) = *a3;
  *(void *)((char *)&v7 + 4) = v5;
  HIDWORD(v7) = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, (float **)a3[1]);
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v7);
}

uint64_t fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  BOOL v12 = a2;
  uint64_t v6 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v12);
  if (*((_DWORD *)v6 + 10) == -1) {
    operator new();
  }
  long long v7 = v6[6];
  uint64_t v8 = *v7;
  float v9 = operator new(0x10uLL);
  uint64_t v10 = *a4;
  *float v9 = v8;
  v9[1] = v10;
  *long long v7 = (uint64_t)v9;
  return 1;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t ***)(a2 + 8);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  uint64_t v5 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v6 = *v4;
  do
  {
    float v7 = *(float *)(a2 + 4);
    int v8 = 2143289344;
    if (v7 != -INFINITY)
    {
      float v9 = *((float *)v6 + 3);
      int v8 = 2143289344;
      if (v9 != -INFINITY)
      {
        if (v7 >= v9) {
          int v8 = *((_DWORD *)v6 + 3);
        }
        else {
          int v8 = *(_DWORD *)(a2 + 4);
        }
      }
    }
    *(_DWORD *)(a2 + 4) = v8;
    if (v5 == v6 || *((_DWORD *)v6 + 2) != *((_DWORD *)v5 + 2))
    {
      BOOL v12 = (uint64_t *)*v6;
      uint64_t v5 = v6;
      goto LABEL_21;
    }
    float v10 = *((float *)v5 + 3);
    if (v10 == -INFINITY || (float v11 = *((float *)v6 + 3), v11 >= -INFINITY) && v11 <= -INFINITY)
    {
      *((_DWORD *)v5 + 3) = 2143289344;
    }
    else
    {
      if (v10 >= v11) {
        float v10 = *((float *)v6 + 3);
      }
      *((float *)v5 + 3) = v10;
      if (v10 < -INFINITY || v10 > -INFINITY) {
        goto LABEL_20;
      }
    }
    *(void *)(a1 + 8) |= 4uLL;
LABEL_20:
    BOOL v12 = (uint64_t *)*v6;
    float v13 = (void *)*v5;
    *uint64_t v5 = *(void *)*v5;
    operator delete(v13);
LABEL_21:
    uint64_t v6 = v12;
  }
  while (v12);
  for (unint64_t i = *v4; i; unint64_t i = (uint64_t *)*i)
  {
    float v15 = *((float *)i + 3);
    float v16 = NAN;
    if (v15 != -INFINITY)
    {
      if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        float v16 = INFINITY;
        if (v15 != INFINITY) {
          float v16 = v15 - *(float *)(a2 + 4);
        }
      }
      else
      {
        float v16 = NAN;
      }
    }
    *((float *)i + 3) = v16;
    if ((LODWORD(v16) & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
      float v16 = *(float *)(a1 + 144) * floorf((float)(v16 / *(float *)(a1 + 144)) + 0.5);
    }
    *((float *)i + 3) = v16;
  }
}

uint64_t **std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  float v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        float v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        float v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        float v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    float v9 = a1 + 1;
LABEL_10:
    float v11 = operator new(0x38uLL);
    void v11[8] = **a4;
    *((void *)v11 + 5) = 0x7F800000FFFFFFFFLL;
    *((void *)v11 + 6) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, float **a2)
{
  uint64_t State = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::FindState(*(void **)(a1 + 184), (void **)a2);
  uint64_t v5 = State;
  if (*(void *)(a1 + 152))
  {
    uint64_t v6 = *(void ***)(a1 + 160);
    if ((int)State >= (unint64_t)(((unsigned char *)v6[1] - (unsigned char *)*v6) >> 2))
    {
      float v7 = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2);
      float v8 = v7;
      unint64_t v9 = (unint64_t)v6[2];
      int v10 = (float *)v6[1];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = ((char *)v10 - (unsigned char *)*v6) >> 2;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v9 - (void)*v6;
        uint64_t v14 = v13 >> 1;
        if (v13 >> 1 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          float v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v6 + 2), v15);
        }
        else {
          float v16 = 0;
        }
        unint64_t v17 = (float *)&v16[4 * v12];
        BOOL v18 = &v16[4 * v15];
        *unint64_t v17 = v8;
        float v11 = v17 + 1;
        uint64_t v20 = (char *)*v6;
        uint64_t v19 = (char *)v6[1];
        if (v19 != *v6)
        {
          do
          {
            int v21 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v17-- - 1) = v21;
          }
          while (v19 != v20);
          uint64_t v19 = (char *)*v6;
        }
        uint64_t *v6 = v17;
        v6[1] = v11;
        void v6[2] = v18;
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *int v10 = v7;
        float v11 = v10 + 1;
      }
      v6[1] = v11;
    }
  }
  return v5;
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::FindState(void *a1, void **a2)
{
  float v8 = a2;
  uint64_t v2 = (a1[12] - a1[11]) >> 3;
  uint64_t Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v8, 1);
  if (Id != v2)
  {
    uint64_t v4 = v8;
    if (v8)
    {
      uint64_t v5 = *v8;
      if (*v8)
      {
        do
        {
          uint64_t v6 = (void *)*v5;
          operator delete(v5);
          uint64_t v5 = v6;
        }
        while (v6);
      }
      *uint64_t v4 = 0;
      MEMORY[0x1B3EA8670](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

float fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(uint64_t a1, float **a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return INFINITY;
  }
  uint64_t v3 = **(void **)(a1 + 152);
  float result = INFINITY;
  do
  {
    unint64_t v5 = *((int *)v2 + 2);
    if ((*(void *)(*(void *)(a1 + 152) + 8) - v3) >> 2 <= v5) {
      float v6 = INFINITY;
    }
    else {
      float v6 = *(float *)(v3 + 4 * v5);
    }
    float v7 = v2[3];
    float v8 = NAN;
    if (v7 != -INFINITY && v6 != -INFINITY)
    {
      float v8 = INFINITY;
      BOOL v9 = v7 == INFINITY || v6 == INFINITY;
      float v10 = v6 + v7;
      if (!v9) {
        float v8 = v10;
      }
    }
    if (result >= v8) {
      float v11 = v8;
    }
    else {
      float v11 = result;
    }
    BOOL v13 = v8 == -INFINITY || result == -INFINITY;
    float result = NAN;
    if (!v13) {
      float result = v11;
    }
    uint64_t v2 = *(float **)v2;
  }
  while (v2);
  return result;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(void *a1, void *a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  float v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7) {
    return *((unsigned int *)v7 + 4);
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[10];
  float v10 = (void *)a1[11];
  uint64_t v11 = ((uint64_t)v10 - v9) >> 3;
  unsigned int v23 = v11;
  unint64_t v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v12 - v9;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v15 = v11 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    }
    else {
      unint64_t v17 = 0;
    }
    BOOL v18 = &v17[8 * v11];
    uint64_t v19 = &v17[8 * v16];
    *(void *)BOOL v18 = *a2;
    BOOL v13 = v18 + 8;
    int v21 = (char *)a1[10];
    uint64_t v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *float v10 = *a2;
    BOOL v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  unint64_t v4 = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()(a1 + 4, *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  float v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    unint64_t v12 = a1 + 6;
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v12, *((_DWORD *)v11 + 4), *a2))return v11; {
      }
        }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()(uint64_t *a1, int a2)
{
  if (a2 < -1) {
    return 0;
  }
  uint64_t v2 = *a1;
  if (a2 == -1) {
    uint64_t v3 = *(uint64_t ****)(v2 + 104);
  }
  else {
    uint64_t v3 = (uint64_t ***)(*(void *)(v2 + 80) + 8 * a2);
  }
  int8x8_t v5 = *v3;
  for (unint64_t result = *((char *)v5 + 8);
        ;
        result ^= (2 * result) ^ (32 * *((int *)v5 + 2)) ^ ((unint64_t)*((int *)v5 + 2) >> 59) ^ *((unsigned int *)v5 + 3))
  {
    int8x8_t v5 = (uint64_t **)*v5;
    if (!v5) {
      break;
    }
  }
  return result;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1) {
    return a2 == a3;
  }
  uint64_t v3 = *a1;
  if (a2 == -1) {
    unint64_t v4 = *(uint64_t **)(v3 + 104);
  }
  else {
    unint64_t v4 = (uint64_t *)(*(void *)(v3 + 80) + 8 * a2);
  }
  uint64_t v6 = *v4;
  if (a3 == -1) {
    uint8x8_t v7 = *(uint64_t ***)(v3 + 104);
  }
  else {
    uint8x8_t v7 = (uint64_t **)(*(void *)(v3 + 80) + 8 * a3);
  }
  if (*((unsigned __int8 *)*v7 + 8) == *(unsigned __int8 *)(v6 + 8)) {
    return std::operator==[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(*v7, (uint64_t *)v6);
  }
  else {
    return 0;
  }
}

uint64_t std::operator==[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t *a1, uint64_t *a2)
{
  while (1)
  {
    a1 = (uint64_t *)*a1;
    a2 = (uint64_t *)*a2;
    if (!a1 || a2 == 0) {
      break;
    }
    if (*((_DWORD *)a1 + 2) != *((_DWORD *)a2 + 2) || *((float *)a1 + 3) != *((float *)a2 + 3)) {
      return 0;
    }
  }
  return (a1 != 0) ^ (a2 == 0);
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v7 = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()((uint64_t *)(a1 + 32), *a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2))return i; {
        }
          }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x18uLL);
  *(void *)unint64_t i = 0;
  *((void *)i + 1) = v8;
  *((_DWORD *)i + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 40);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)unint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *(void *)unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v23 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1B770B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

float fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    float v4 = (*(float (**)(uint64_t *, uint64_t))(*a1 + 64))(a1, a2);
    Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(a1[15], a2);
    *(float *)Mutableuint64_t State = v4;
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  uint64_t v6 = a1[15];
  if (*(_DWORD *)(v6 + 76) == a2) {
    uint64_t v7 = v6 + 80;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 8) + 8 * ((int)a2 + 1);
  }
  return **(float **)v7;
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeterminizeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_1F0A3B0C8;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_1B1B77494(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ArcIterator(&v20, *(void *)(a1 + 8), v6);
    unint64_t v7 = v21;
    uint64_t v8 = *((void *)v20 + 3);
    uint64_t v9 = *((void *)v20 + 4) - v8;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      uint64_t v11 = v9 >> 4;
      int v12 = *(_DWORD *)(v10 + 68);
      unint64_t v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        int v15 = *v13;
        v13 += 4;
        int v14 = v15;
        if (v12 <= v15)
        {
          int v12 = v14 + 1;
          *(_DWORD *)(v10 + 6_Block_object_dispose(&STACK[0x708], 8) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      unint64_t v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v16 = *(_DWORD *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(v17 + 68);
    --*((_DWORD *)v20 + 13);
    BOOL v4 = v16 >= v18;
    if (v16 < v18) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v17);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1B77610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1B776B8(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A420E0;
  int v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void TGrammar::TGrammar(TGrammar *this, const TLocaleInfo *a2)
{
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 7) = 0;
  TAllocator::TAllocator((TGrammar *)((char *)this + 72), 2048);
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + _Block_object_dispose(&STACK[0x708], 8) = 0;
  *(unsigned char *)this = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 1--*(_DWORD *)(a9 + 52) = 0u;
  operator new();
}

void sub_1B1B778A4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v5, 0x60C40CE5A77A8);
  uint64_t v10 = *(void **)(v4 + 144);
  if (v10)
  {
    *(void *)(v4 + 1--*(_DWORD *)(a9 + 52) = v10;
    operator delete(v10);
  }
  if (*v8) {
    operator delete(*v8);
  }
  TAllocator::clear(v3);
  std::__tree<int>::destroy(v2, *v7);
  std::__tree<int>::destroy(v1, *v6);
  _Unwind_Resume(a1);
}

void *TGrammar::addNonTerminal(uint64_t a1, __int32 *a2, int a3)
{
  int v15 = a2;
  uint64_t v5 = (uint64_t **)(a1 + 40);
  uint64_t v6 = std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a1 + 40, (const __int32 **)&v15);
  if (a1 + 48 == v6)
  {
    size_t v8 = wcslen(v15);
    if ((v8 + 1) >> 62) {
      uint64_t v9 = -1;
    }
    else {
      uint64_t v9 = 4 * (v8 + 1);
    }
    uint64_t v10 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 72), v9);
    int v14 = v10;
    wcscpy(v10, v15);
    unint64_t v7 = (void *)TAllocator::allocate((TAllocator *)(a1 + 72), 40);
    uint64_t v11 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v11 + 1;
    v7[2] = v10;
    void v7[3] = v11;
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[4] = 0;
    int v16 = (const __int32 **)&v14;
    std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__emplace_unique_key_args<wchar_t const*,std::piecewise_construct_t const&,std::tuple<wchar_t const* const&>,std::tuple<>>(v5, (const __int32 **)&v14, (uint64_t)&std::piecewise_construct, (uint64_t **)&v16)[5] = (uint64_t)v7;
  }
  else
  {
    unint64_t v7 = *(void **)(v6 + 40);
  }
  uint64_t v12 = 1;
  if (!a3) {
    uint64_t v12 = 2;
  }
  v7[1] |= v12;
  return v7;
}

void TGrammar::~TGrammar(TGrammar *this)
{
  uint64_t v2 = (TRegExp *)*((void *)this + 14);
  if (v2)
  {
    TRegExp::~TRegExp(v2);
    MEMORY[0x1B3EA8670]();
  }
  int v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 15);
  if (v4) {
    operator delete(v4);
  }
  TAllocator::clear((TGrammar *)((char *)this + 72));
  std::__tree<int>::destroy((uint64_t)this + 40, *((void **)this + 6));
  std::__tree<int>::destroy((uint64_t)this + 16, *((void **)this + 3));
}

uint64_t TGrammar::computeDerivationForSymbol(uint64_t result, void *a2, void *a3)
{
  unint64_t v3 = a2[3];
  unint64_t v4 = v3 >> 6;
  uint64_t v5 = 1 << v3;
  uint64_t v6 = *(void *)(*a3 + 8 * v4);
  if ((v5 & v6) == 0)
  {
    uint64_t v7 = result;
    *(void *)(*a3 + 8 * v4) = v6 | v5;
    uint64_t v8 = a2[3];
    uint64_t v9 = *(void *)(result + 64) * v8;
    *(void *)(*(void *)(result + 120) + (((unint64_t)(v9 + v8) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v9 + v8);
    uint64_t v10 = (void *)*a2;
    if (*a2)
    {
      do
      {
        uint64_t v12 = *(void *)(v10[2] + 8 * v10[1] - 8);
        *(void *)(*(void *)(v7 + 120)
                  + (((unint64_t)(*(void *)(v12 + 24) + v9) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (*(unsigned char *)(v12 + 24) + v9);
        unint64_t result = TGrammar::computeDerivationForSymbol(v7, v12, a3);
        unint64_t v13 = *(void *)(v7 + 64);
        if (v13)
        {
          unint64_t v14 = 0;
          uint64_t v15 = v13 * *(void *)(v12 + 24);
          uint64_t v16 = *(void *)(v7 + 120);
          do
          {
            if (((*(void *)(v16 + (((v15 + v14) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v15
                                                                                    + v14)) & 1) != 0)
            {
              *(void *)(v16 + (((v9 + v14) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v9
                                                                                     + v14);
              unint64_t v13 = *(void *)(v7 + 64);
            }
            ++v14;
          }
          while (v14 < v13);
        }
        uint64_t v10 = (void *)v10[4];
      }
      while (v10);
    }
  }
  return result;
}

void TGrammar::finalize(TGrammar *this)
{
  std::vector<BOOL>::resize((uint64_t)this + 120, *((void *)this + 8) * *((void *)this + 8), 0);
  std::vector<BOOL>::vector(__p, *((void *)this + 8));
  uint64_t v2 = (TGrammar *)*((void *)this + 5);
  if (v2 != (TGrammar *)((char *)this + 48))
  {
    do
    {
      TGrammar::computeDerivationForSymbol((uint64_t)this, *((void **)v2 + 5), __p);
      unint64_t v3 = (TGrammar *)*((void *)v2 + 1);
      if (v3)
      {
        do
        {
          unint64_t v4 = v3;
          unint64_t v3 = *(TGrammar **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          unint64_t v4 = (TGrammar *)*((void *)v2 + 2);
          BOOL v5 = *(void *)v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != (TGrammar *)((char *)this + 48));
  }
  std::__tree<int>::destroy((uint64_t)this + 16, *((void **)this + 3));
  *((void *)this + 2) = (char *)this + 24;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  TRegExp::doneAdding(*((TRegExp **)this + 14));
  *(unsigned char *)this = 1;
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_1B1B77CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      unint64_t v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve(&v21, v12);
      unint64_t v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      unint64_t v23 = v21;
      int v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      uint64_t v17 = v19;
      LODWORD(v1_Block_object_dispose(&STACK[0x708], 8) = v20;
      uint64_t v15 = *(char **)a1;
      *(void *)a1 = v21;
      unint64_t v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      uint64_t v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        unint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        unint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_1B1B77E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TGrammar::addTerminal(uint64_t *a1, __int32 *a2)
{
  float v25 = a2;
  unint64_t v3 = (uint64_t **)(a1 + 2);
  uint64_t v4 = std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>((uint64_t)(a1 + 2), (const __int32 **)&v25);
  if (a1 + 3 != (uint64_t *)v4) {
    return *(void *)(v4 + 40);
  }
  unint64_t v6 = (char **)(a1 + 18);
  TRegExp::add(a1[14], v25, (a1[19] - a1[18]) >> 3);
  size_t v7 = wcslen(v25);
  if ((v7 + 1) >> 62) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = 4 * (v7 + 1);
  }
  int v24 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 9), v8);
  wcscpy(v24, v25);
  uint64_t v5 = TAllocator::allocate((TAllocator *)(a1 + 9), 40);
  uint64_t v9 = (a1[19] - (uint64_t)*v6) >> 3;
  *(void *)(v5 + 16) = v24;
  *(void *)(v5 + ++*(_DWORD *)(result + 24) = v9;
  *(_OWORD *)uint64_t v5 = xmmword_1B2561C30;
  *(void *)(v5 + 32) = 0;
  float v26 = &v24;
  std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__emplace_unique_key_args<wchar_t const*,std::piecewise_construct_t const&,std::tuple<wchar_t const* const&>,std::tuple<>>(v3, (const __int32 **)&v24, (uint64_t)&std::piecewise_construct, (uint64_t **)&v26)[5] = v5;
  uint64_t v10 = (uint64_t *)a1[19];
  unint64_t v11 = a1[20];
  if ((unint64_t)v10 >= v11)
  {
    uint64_t v13 = ((char *)v10 - *v6) >> 3;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v11 - (void)*v6;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 20), v16);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = (uint64_t *)&v17[8 * v13];
    unint64_t v19 = &v17[8 * v16];
    *uint64_t v18 = v5;
    unint64_t v12 = v18 + 1;
    unint64_t v21 = (char *)a1[18];
    int v20 = (char *)a1[19];
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *--uint64_t v18 = v22;
      }
      while (v20 != v21);
      int v20 = *v6;
    }
    a1[18] = (uint64_t)v18;
    a1[19] = (uint64_t)v12;
    a1[20] = (uint64_t)v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *uint64_t v10 = v5;
    unint64_t v12 = v10 + 1;
  }
  a1[19] = (uint64_t)v12;
  return v5;
}

void *TGrammar::addRule(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5, size_t a6)
{
  size_t v11 = a6 + 1;
  unint64_t v12 = (TAllocator *)(a1 + 72);
  uint64_t v13 = (unsigned __int8 *)TAllocator::allocate((TAllocator *)(a1 + 72), a6 + 1);
  uint64_t v14 = v13;
  if (a6) {
    memmove(v13, a5, a6);
  }
  v14[a6] = 0;
  if (v11 >> 61) {
    uint64_t v15 = -1;
  }
  else {
    uint64_t v15 = 8 * v11;
  }
  unint64_t v16 = (void *)TAllocator::allocate(v12, v15);
  uint64_t v17 = v16;
  if (a6) {
    memmove(v16, a4, 8 * a6);
  }
  v17[a6] = a3;
  unint64_t result = (void *)TAllocator::allocate(v12, 48);
  result[2] = v17;
  result[3] = v14;
  *unint64_t result = a2;
  result[1] = v11;
  unint64_t v19 = (void **)(v17 - 1);
  result[4] = 0;
  result[5] = 0;
  do
  {
    int v20 = *v14++;
    ++v19;
  }
  while (v20);
  unint64_t v21 = *v19;
  result[4] = *v21;
  *unint64_t v21 = result;
  return result;
}

BOOL TGrammar::getTerminals(uint64_t a1, unsigned int *a2, char **a3)
{
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  std::vector<TRegExpMatch>::resize((uint64_t)&v22, 0);
  BOOL v21 = TRegExp::match(*(void **)(a1 + 112), a2, 3, (uint64_t)&v22);
  unint64_t v6 = v23;
  if (v23 != v22)
  {
    unint64_t v7 = 0;
    uint64_t v8 = a3 + 2;
    uint64_t v9 = a3[1];
    unint64_t v6 = v22;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 144) + 8 * v6[3 * v7 + 2]);
      if ((unint64_t)v9 >= *v8)
      {
        uint64_t v11 = (v9 - *a3) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = *v8 - (void)*a3;
        uint64_t v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v14);
        }
        else {
          uint64_t v15 = 0;
        }
        unint64_t v16 = &v15[8 * v11];
        *(void *)unint64_t v16 = v10;
        uint64_t v9 = v16 + 8;
        uint64_t v18 = *a3;
        uint64_t v17 = a3[1];
        if (v17 != *a3)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          uint64_t v17 = *a3;
        }
        *a3 = v16;
        a3[1] = v9;
        a3[2] = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)uint64_t v9 = v10;
        v9 += 8;
      }
      a3[1] = v9;
      ++v7;
      unint64_t v6 = v22;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * (v23 - v22));
  }
  if (v6)
  {
    unint64_t v23 = v6;
    operator delete(v6);
  }
  return v21;
}

void sub_1B1B782A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<TRegExpMatch>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<TRegExpMatch>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = *(void *)a1 + 24 * a2;
  }
}

uint64_t std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(uint64_t a1, const __int32 **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = wcscmp(*(const __int32 **)(v3 + 32), *a2);
    unint64_t v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      unint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || wcscmp(*a2, *(const __int32 **)(v5 + 32)) < 0) {
    return v2;
  }
  return v5;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    unint64_t v16 = *(unint64_t **)a5;
  }
  else
  {
    uint64_t v9 = __src;
    int __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      void *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      int __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + _Block_object_dispose(&STACK[0x708], 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      int __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    unint64_t v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      unint64_t *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + _Block_object_dispose(&STACK[0x708], 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + _Block_object_dispose(&STACK[0x708], 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

uint64_t *std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__emplace_unique_key_args<wchar_t const*,std::piecewise_construct_t const&,std::tuple<wchar_t const* const&>,std::tuple<>>(uint64_t **a1, const __int32 **a2, uint64_t a3, uint64_t **a4)
{
  int v6 = std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__find_equal<wchar_t const*>((uint64_t)a1, &v10, a2);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = **a4;
    void v7[5] = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__find_equal<wchar_t const*>(uint64_t a1, void *a2, const __int32 **a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        if ((wcscmp(*a3, (const __int32 *)v4[4]) & 0x80000000) == 0) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((wcscmp((const __int32 *)v7[4], *a3) & 0x80000000) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      unint64_t v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::vector<TRegExpMatch>::__append(void **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v14 = &v12[24 * v8];
    uint64_t v15 = &v12[24 * v11];
    size_t v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    uint64_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - ++*(_DWORD *)(result + 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void sub_1B1B78820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1B7895C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1B78BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1B79408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a49);

  sdapi::SdapiUtil::LocaleInfo::~LocaleInfo((void **)&STACK[0x6E8]);
  std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::destroy(v55 - 128, *(void **)(v55 - 120));

  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::LmeDataFactory,char const*>()
{
}

void sub_1B1B796C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  *(void *)(v20 - 40) = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (a18 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1B3EA8670](v18, 0x10F3C406D89AE2DLL);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<quasar::LmeDataFactory>::operator=[abi:ne180100]<quasar::LmeDataFactory,std::default_delete<quasar::LmeDataFactory>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<quasar::LmeDataFactory>::shared_ptr[abi:ne180100]<quasar::LmeDataFactory,std::default_delete<quasar::LmeDataFactory>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_1B1B79918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B1B7A4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40)
{
  if (*(char *)(v42 - 233) < 0) {
    operator delete(*(void **)(v42 - 256));
  }
  MEMORY[0x1B3EA8670](v40, 0x1093C402D7449D9);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a40);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&STACK[0x740]);

  _Unwind_Resume(a1);
}

void sub_1B1B7A8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>>::operator=[abi:ne180100]<quasar::GlobalLRUCache<std::string,std::vector<std::string>>,std::default_delete<quasar::GlobalLRUCache<std::string,std::vector<std::string>>>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>>::shared_ptr[abi:ne180100]<quasar::GlobalLRUCache<std::string,std::vector<std::string>>,std::default_delete<quasar::GlobalLRUCache<std::string,std::vector<std::string>>>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_1B1B7B444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a21 = &a24;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a24 = &a36;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a55) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a55);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a56, (void *)a57);
  a56 = (uint64_t)&a59;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  if (a72 < 0) {
    operator delete(a71);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a73);
  }

  _Unwind_Resume(a1);
}

BOOL quasar::LmeDataFactory::isContactTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const void **)a2;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  size_t v5 = *(void *)(a2 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 1895);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 1880);
  }
  if (v6 == v7)
  {
    if (v8 >= 0) {
      unint64_t v9 = (unsigned __int8 *)(a1 + 1872);
    }
    else {
      unint64_t v9 = *(unsigned __int8 **)(a1 + 1872);
    }
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(*v2, v9, v5)) {
        return 1;
      }
    }
    else
    {
      if (!v4) {
        return 1;
      }
      unint64_t v10 = v2;
      uint64_t v11 = v4;
      while (*(unsigned __int8 *)v10 == *v9)
      {
        unint64_t v10 = (const void **)((char *)v10 + 1);
        ++v9;
        if (!--v11) {
          return 1;
        }
      }
    }
  }
  char v12 = *(unsigned char *)(a1 + 1919);
  if (v12 < 0)
  {
    if (!*(void *)(a1 + 1904)) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(a1 + 1919))
  {
    return 0;
  }
  if (v12 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a1 + 1919);
  }
  else {
    uint64_t v13 = *(void *)(a1 + 1904);
  }
  if (v6 != v13) {
    return 0;
  }
  if (v12 >= 0) {
    uint64_t v14 = (unsigned __int8 *)(a1 + 1896);
  }
  else {
    uint64_t v14 = *(unsigned __int8 **)(a1 + 1896);
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*v2, v14, v5) == 0;
  }
  if (!v4) {
    return 1;
  }
  uint64_t v15 = v4 - 1;
  do
  {
    int v17 = *(unsigned __int8 *)v2;
    uint64_t v2 = (const void **)((char *)v2 + 1);
    int v16 = v17;
    int v19 = *v14++;
    int v18 = v19;
    BOOL v21 = v15-- != 0;
    BOOL result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

void sub_1B1B7B998(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40E7284A48);
  _Unwind_Resume(a1);
}

void sub_1B1B7BA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B1B7BB50(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B1B7BD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

void sub_1B1B7BE58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1B7BFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B1B7C800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a52) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a52);
  }
  _Unwind_Resume(a1);
}

void sub_1B1B7CB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1B1B7D1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v52);

  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  return std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((void *)(a1 + 48), (void *)(a2 + 48));
}

void *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](void *a1, void *a2)
{
  a1[16] = MEMORY[0x1E4FBA4A8] + 16;
  uint64_t v3 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *a1 = v5;
  *(void *)((char *)a1 + *(void *)(v5 - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = v4;
  a1[1] = a2[1];
  a2[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  uint64_t v7 = (std::ios_base *)((char *)a2 + *(void *)(*a2 - 24));
  std::ios_base::move(v6, v7);
  v6[1].__vftable = v7[1].__vftable;
  v7[1].__vftable = 0;
  v6[1].__fmtflags_ = v7[1].__fmtflags_;
  uint64_t v8 = v3[5];
  uint64_t v9 = v3[4];
  a1[2] = v9;
  *(void *)((char *)a1 + *(void *)(v9 - 24) + 16) = v8;
  uint64_t v10 = v3[1];
  *a1 = v10;
  *(void *)((char *)a1 + *(void *)(v10 - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = v3[6];
  *a1 = MEMORY[0x1E4FBA488] + 24;
  a1[16] = MEMORY[0x1E4FBA488] + 104;
  a1[2] = MEMORY[0x1E4FBA488] + 64;
  *(void *)((char *)a1 + *(void *)(*a1 - 24) + 40) = std::stringbuf::basic_stringbuf();
  return a1;
}

void sub_1B1B7D5A4(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](v1);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1E4FBA408];
  uint64_t v2 = *MEMORY[0x1E4FBA408];
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = *MEMORY[0x1E4FBA408];
  uint64_t v3 = *(void *)(v1 + 72);
  *(void *)(a1 + 48 + *(void *)(v2 - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = *(void *)(v1 + 64);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  JUMPOUT(0x1B3EA8520);
}

void __copy_helper_block_ea8_48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 2, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&a1[2].__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1B1B7D7F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 48);
    operator delete(v2);
  }
}

void sub_1B1B7DA80(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 73) < 0) {
    operator delete(*(void **)(v2 - 96));
  }
  uint64_t v4 = *(void *)(v2 - 72);
  *(void *)(v2 - 72) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  _Unwind_Resume(a1);
}

void sub_1B1B7DDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a52);

  _Unwind_Resume(a1);
}

void sub_1B1B7DFD0(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v1);
  _Unwind_Resume(a1);
}

void sub_1B1B7E184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1B1B7E3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  _Unwind_Resume(a1);
}

void sub_1B1B7E5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy((uint64_t)&a9, a10);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a23);

  _Unwind_Resume(a1);
}

void sub_1B1B7E7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v34 - 72, *(char **)(v34 - 64));

  _Unwind_Resume(a1);
}

void sub_1B1B7F524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  if (*(char *)(v62 - 201) < 0) {
    operator delete(*(void **)(v62 - 224));
  }
  if (*(char *)(v62 - 169) < 0) {
    operator delete(*(void **)(v62 - 192));
  }
  if (*(char *)(v62 - 137) < 0) {
    operator delete(*(void **)(v62 - 160));
  }
  a61 = (void *)(v62 - 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  _Unwind_Resume(a1);
}

void quasar::LmeDataFactoryBase::Word::~Word(quasar::LmeDataFactoryBase::Word *this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void sub_1B1B7FB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)(v45 - 160));
  if (*(char *)(v45 - 57) < 0) {
    operator delete(*(void **)(v45 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_1B1B7FCB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B1B7FEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B1B80850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy((uint64_t)&__p, (void *)a22);
  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(v23 - 136, *(void **)(v23 - 128));

  _Unwind_Resume(a1);
}

void sub_1B1B80E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a16);

  _Unwind_Resume(a1);
}

void sub_1B1B811DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_1B1B814EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1B81764(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)va);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v7 - 176);
  uint64_t v10 = __cxa_begin_catch(a1);
  uint64_t v11 = (void *)MEMORY[0x1E4F1CA00];
  uint64_t v12 = *MEMORY[0x1E4F1C3B8];
  if (a2 == 2)
  {
    (*(void (**)(void *))(*(void *)v10 + 16))(v10);
    [v11 raise:v12 format:@"Quasar internal C++ exception: %s"];
  }
  else
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Quasar internal unknown exception"];
  }
  __cxa_end_catch();
  JUMPOUT(0x1B1B81700);
}

void sub_1B1B8189C(_Unwind_Exception *a1)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_1B1B82064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    if (a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    }

    uint64_t v23 = (EARLogger *)__cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v24 = EARLogger::QuasarOSLogger(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        -[_EARUserProfileContainer initWithPath:userId:error:]();
      }
    }
    else
    {
      uint64_t v24 = EARLogger::QuasarOSLogger(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        -[_EARUserProfileContainer initWithPath:userId:error:]();
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x1B1B81B44);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1B823D4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1B1B824E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *sdapi::SdapiUtil::LocaleInfo::LocaleInfo(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 12);
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((void *)a2 + 9);
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v6;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v7 = a2[5];
    this[4].__r_.__value_.__r.__words[0] = *((void *)a2 + 12);
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v7;
  }
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 104);
    this[5].__r_.__value_.__r.__words[0] = *((void *)a2 + 15);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v8;
  }
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 128), *((const std::string::value_type **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v9 = a2[8];
    this[6].__r_.__value_.__r.__words[0] = *((void *)a2 + 18);
    *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v9;
  }
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), *((const std::string::value_type **)a2 + 19), *((void *)a2 + 20));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 152);
    this[7].__r_.__value_.__r.__words[0] = *((void *)a2 + 21);
    *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v10;
  }
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 176), *((const std::string::value_type **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v11 = a2[11];
    this[8].__r_.__value_.__r.__words[0] = *((void *)a2 + 24);
    *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = v11;
  }
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((void *)a2 + 26));
  }
  else
  {
    long long v12 = *(long long *)((char *)a2 + 200);
    this[9].__r_.__value_.__r.__words[0] = *((void *)a2 + 27);
    *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = v12;
  }
  if (*((char *)a2 + 247) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 224), *((const std::string::value_type **)a2 + 28), *((void *)a2 + 29));
  }
  else
  {
    long long v13 = a2[14];
    this[10].__r_.__value_.__r.__words[0] = *((void *)a2 + 30);
    *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = v13;
  }
  uint64_t v14 = (std::string *)((char *)this + 248);
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v15 = *(long long *)((char *)a2 + 248);
    this[11].__r_.__value_.__r.__words[0] = *((void *)a2 + 33);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  this[11].__r_.__value_.__s.__data_[8] = *((unsigned char *)a2 + 272);
  return this;
}

void sub_1B1B827FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 + 247) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 223) < 0) {
    operator delete(*v18);
  }
  if (*(char *)(v10 + 199) < 0) {
    operator delete(*v17);
  }
  if (*(char *)(v10 + 175) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v10 + 151) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v10 + 127) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v10 + 103) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v10 + 79) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1B828EC()
{
}

void sdapi::SdapiUtil::LocaleInfo::~LocaleInfo(void **this)
{
  if (*((char *)this + 271) < 0) {
    operator delete(this[31]);
  }
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__init_with_size[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word>*,std::vector<quasar::LmeDataFactoryBase::Word>*>(this + 1, *((long long ***)a2 + 3), *((long long ***)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_1B1B82A40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__init_with_size[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word>*,std::vector<quasar::LmeDataFactoryBase::Word>*>(std::string *result, long long **a2, long long **a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    BOOL result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::vector<quasar::LmeDataFactoryBase::Word>*,std::vector<quasar::LmeDataFactoryBase::Word>*,std::vector<quasar::LmeDataFactoryBase::Word>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1B82AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + _Block_object_dispose(&STACK[0x708], 8) = v10;
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::vector<quasar::LmeDataFactoryBase::Word>*,std::vector<quasar::LmeDataFactoryBase::Word>*,std::vector<quasar::LmeDataFactoryBase::Word>*>(uint64_t a1, long long **a2, long long **a3, std::string *a4)
{
  long long v4 = a4;
  uint64_t v10 = a4;
  long long v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(v4, *v6, v6[1], 0xCCCCCCCCCCCCCCCDLL * (v6[1] - *v6));
      long long v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::vector<quasar::LmeDataFactoryBase::Word>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1B82B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::vector<quasar::LmeDataFactoryBase::Word>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::vector<quasar::LmeDataFactoryBase::Word>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::vector<quasar::LmeDataFactoryBase::Word>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::vector<quasar::LmePackedWord>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::vector<std::vector<quasar::LmePackedWord>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    long long v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        long long v6 = v4;
        std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,long long>,std::__tree_node<std::__value_type<std::string,long long>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  long long v5 = result;
  if (result[2])
  {
    long long v6 = *result;
    long long v7 = result[1];
    *BOOL result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      long long v8 = (uint64_t *)v6[1];
    }
    else {
      long long v8 = v6;
    }
    long long v15 = result;
    int v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      int v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        char v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v8[7] = v9[7];
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            int v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          long long v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              long long v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              char v9 = a2;
            }
            while (!v12);
          }
          long long v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          char v9 = a2;
        }
        while (!v12);
      }
    }
    BOOL result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      BOOL result = (uint64_t **)std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__emplace_multi<std::pair<std::string const,long long> const&>(v5, (uint64_t)(a2 + 4));
      long long v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1B1B82EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const void **std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__emplace_multi<std::pair<std::string const,long long> const&>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__construct_node<std::pair<std::string const,long long> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_1B1B82F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__construct_node<std::pair<std::string const,long long> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x708], 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  long long v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v6 + 7) = *(void *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1B82FD4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<quasar::LmeDataFactory>::shared_ptr[abi:ne180100]<quasar::LmeDataFactory,std::default_delete<quasar::LmeDataFactory>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *BOOL result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<quasar::LmeDataFactory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::LmeDataFactory  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::LmeDataFactory  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,sdapi::SdapiUtil::LocaleInfo>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,sdapi::SdapiUtil::LocaleInfo>,0>(uint64_t a1)
{
  sdapi::SdapiUtil::LocaleInfo::~LocaleInfo((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  long long v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    long long v7 = operator new(0x150uLL);
    v12[1] = a1 + 1;
    char v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    *char v9 = 0;
    *(_OWORD *)((char *)v7 + 72) = 0u;
    *(_OWORD *)((char *)v7 + 8_Block_object_dispose(&STACK[0x708], 8) = 0u;
    *(_OWORD *)((char *)v7 + 104) = 0u;
    *(_OWORD *)((char *)v7 + 120) = 0u;
    *(_OWORD *)((char *)v7 + 136) = 0u;
    *(_OWORD *)((char *)v7 + 1--*(_DWORD *)(a9 + 52) = 0u;
    *(_OWORD *)((char *)v7 + 16_Block_object_dispose(&STACK[0x708], 8) = 0u;
    *(_OWORD *)((char *)v7 + 184) = 0u;
    *(_OWORD *)((char *)v7 + 200) = 0u;
    *(_OWORD *)((char *)v7 + 216) = 0u;
    *(_OWORD *)((char *)v7 + 232) = 0u;
    *(_OWORD *)((char *)v7 + 24_Block_object_dispose(&STACK[0x708], 8) = 0u;
    *(_OWORD *)((char *)v7 + 264) = 0u;
    *(_OWORD *)((char *)v7 + 280) = 0u;
    *(_OWORD *)((char *)v7 + 56) = 0u;
    *((void *)v7 + 41) = 0;
    *(_OWORD *)((char *)v7 + 296) = 0u;
    *(_OWORD *)((char *)v7 + 312) = 0u;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,sdapi::SdapiUtil::LocaleInfo>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *uint64_t v17 = 0;
  v17[1] = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  float v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    void *v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1B1B835C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>>::shared_ptr[abi:ne180100]<quasar::GlobalLRUCache<std::string,std::vector<std::string>>,std::default_delete<quasar::GlobalLRUCache<std::string,std::vector<std::string>>>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<quasar::GlobalLRUCache<std::string,std::vector<std::string>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::GlobalLRUCache<std::string,std::vector<std::string>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::GlobalLRUCache<std::string,std::vector<std::string>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<quasar::PersonalizationRecipe>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 55) < 0) {
      operator delete(*(void **)(a2 + 32));
    }
    std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::destroy(a2 + 8, *(void **)(a2 + 16));
    JUMPOUT(0x1B3EA8670);
  }
}

void std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::PersonalizationRecipe::Category>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::PersonalizationRecipe::Category>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x708], 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

char *utf8::find_invalid<std::__wrap_iter<char const*>>(char *result, char *a2)
{
  unint64_t v4 = result;
  if (result != a2)
  {
    do
    {
      int v3 = utf8::internal::validate_next<std::__wrap_iter<char const*>>(&v4, a2, 0);
      uint64_t result = v4;
    }
    while (!v3 && v4 != a2);
  }
  return result;
}

uint64_t utf8::internal::validate_next<std::__wrap_iter<char const*>>(char **a1, char *a2, unsigned int *a3)
{
  uint64_t v5 = *a1;
  unsigned int v13 = 0;
  unsigned int v6 = *v5;
  if (*v5 < 0)
  {
    if ((v6 & 0xE0) == 0xC0)
    {
      if (v5 == a2 || (*a1 = v5 + 1, v5 + 1 == a2))
      {
        uint64_t result = 1;
        goto LABEL_37;
      }
      char v10 = v5[1];
      if ((v10 & 0xC0) != 0x80)
      {
        uint64_t result = 3;
        goto LABEL_37;
      }
      int v11 = v10 & 0x3F | ((v6 & 0x1F) << 6);
      uint64_t v8 = 2;
      unsigned int v6 = v11;
    }
    else
    {
      if ((v6 & 0xF0) == 0xE0)
      {
        uint64_t result = utf8::internal::get_sequence_3<std::__wrap_iter<char const*>>(a1, a2, (int *)&v13);
        uint64_t v8 = 3;
        if (result) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((v6 & 0xF8) != 0xF0) {
          return 2;
        }
        uint64_t result = utf8::internal::get_sequence_4<std::__wrap_iter<char const*>>(a1, a2, (int *)&v13);
        uint64_t v8 = 4;
        if (result) {
          goto LABEL_37;
        }
      }
      unsigned int v6 = v13;
    }
  }
  else
  {
    uint64_t result = 1;
    if (v5 == a2) {
      goto LABEL_37;
    }
    uint64_t v8 = 1;
  }
  if (HIWORD(v6) > 0x10u || (v6 & 0xFFFFF800) == 55296)
  {
    uint64_t result = 5;
  }
  else
  {
    if (v6 > 0x7F)
    {
      if (v6 > 0x7FF)
      {
        if (HIWORD(v6)) {
          BOOL v12 = 1;
        }
        else {
          BOOL v12 = v8 == 3;
        }
        if (v12) {
          goto LABEL_17;
        }
      }
      else if (v8 == 2)
      {
        goto LABEL_17;
      }
    }
    else if (v8 == 1)
    {
LABEL_17:
      if (a3) {
        *a3 = v6;
      }
      uint64_t result = 0;
      uint64_t v5 = *a1 + 1;
      goto LABEL_37;
    }
    uint64_t result = 4;
  }
LABEL_37:
  *a1 = v5;
  return result;
}

uint64_t utf8::internal::get_sequence_3<std::__wrap_iter<char const*>>(char **a1, char *a2, int *a3)
{
  int v3 = *a1;
  if (*a1 == a2) {
    return 1;
  }
  char v4 = *v3;
  *a1 = v3 + 1;
  if (v3 + 1 == a2) {
    return 1;
  }
  char v5 = v3[1];
  if ((v5 & 0xC0) != 0x80) {
    return 3;
  }
  unsigned int v6 = v3 + 2;
  *a1 = v6;
  if (v6 == a2) {
    return 1;
  }
  char v7 = *v6;
  if ((v7 & 0xC0) != 0x80) {
    return 3;
  }
  uint64_t result = 0;
  if (a3) {
    *a3 = ((v4 & 0xF) << 12) | ((v5 & 0x3F) << 6) | v7 & 0x3F;
  }
  return result;
}

uint64_t utf8::internal::get_sequence_4<std::__wrap_iter<char const*>>(char **a1, char *a2, int *a3)
{
  int v3 = *a1;
  if (*a1 == a2) {
    return 1;
  }
  char v4 = *v3;
  *a1 = v3 + 1;
  if (v3 + 1 == a2) {
    return 1;
  }
  char v5 = v3[1];
  if ((v5 & 0xC0) != 0x80) {
    return 3;
  }
  *a1 = v3 + 2;
  if (v3 + 2 == a2) {
    return 1;
  }
  char v6 = v3[2];
  if ((v6 & 0xC0) != 0x80) {
    return 3;
  }
  char v7 = v3 + 3;
  *a1 = v7;
  if (v7 == a2) {
    return 1;
  }
  char v8 = *v7;
  if ((v8 & 0xC0) != 0x80) {
    return 3;
  }
  uint64_t result = 0;
  if (a3) {
    *a3 = ((v4 & 7) << 18) | ((v5 & 0x3F) << 12) | ((v6 & 0x3F) << 6) | v8 & 0x3F;
  }
  return result;
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,std::string &,unsigned long,std::set<std::string> &>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v12 = 0x333333333333333;
  }
  else {
    unint64_t v12 = v7;
  }
  float v20 = a1 + 2;
  if (v12) {
    unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  }
  else {
    unsigned int v13 = 0;
  }
  unint64_t v16 = v13;
  uint64_t v17 = &v13[80 * v6];
  long long v19 = &v13[80 * v12];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,std::string &,unsigned long,std::set<std::string> &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  uint64_t v18 = v17 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v16);
  return v14;
}

void sub_1B1B83CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,std::string &,unsigned long,std::set<std::string> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v11 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  quasar::LmeDataFactoryBase::Word::Word(a2, &v11, &__p, *a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B83D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,std::string&,unsigned long,std::set<std::string> &>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v12 = 0x333333333333333;
  }
  else {
    unint64_t v12 = v7;
  }
  float v20 = a1 + 2;
  if (v12) {
    unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  }
  else {
    unsigned int v13 = 0;
  }
  unint64_t v16 = v13;
  uint64_t v17 = &v13[80 * v6];
  long long v19 = &v13[80 * v12];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string&,unsigned long,std::set<std::string> &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  uint64_t v18 = v17 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v16);
  return v14;
}

void sub_1B1B83ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string&,unsigned long,std::set<std::string> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v11 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  quasar::LmeDataFactoryBase::Word::Word(a2, &v11, &__p, *a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B83FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,std::string &,int &,quasar::LmeDataFactoryBase::PronSet &>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v12 = 0x333333333333333;
  }
  else {
    unint64_t v12 = v7;
  }
  float v20 = a1 + 2;
  if (v12) {
    unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  }
  else {
    unsigned int v13 = 0;
  }
  unint64_t v16 = v13;
  uint64_t v17 = &v13[80 * v6];
  long long v19 = &v13[80 * v12];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,std::string &,int &,quasar::LmeDataFactoryBase::PronSet &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  uint64_t v18 = v17 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v16);
  return v14;
}

void sub_1B1B84100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,std::string &,int &,quasar::LmeDataFactoryBase::PronSet &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v11 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  quasar::LmeDataFactoryBase::Word::Word(a2, &v11, &__p, *a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B841D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
}

void std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(a1, *(void *)a2);
    std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(a1, *((void *)a2 + 1));
    char v4 = (void **)(a2 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,long long>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  char v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__construct_node<std::pair<std::string const,long long> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void _ZNSt3__115allocate_sharedB8ne180100IN6quasar7LmeDataENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  unint64_t v0 = operator new(0x1A8uLL);
  _ZNSt3__120__shared_ptr_emplaceIN6quasar7LmeDataENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v0);
}

void sub_1B1B8437C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_emplaceIN6quasar7LmeDataENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62320;
  quasar::LmeData::LmeData((quasar::LmeData *)(a1 + 3));
}

void sub_1B1B843DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LmeData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LmeData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::LmeData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void quasar::LmeData::LmeData(quasar::LmeData *this)
{
  *(void *)this = &unk_1F0A590D0;
  *((void *)this + 2) = &unk_1F0A52688;
  fst::SymbolTable::SymbolTable((quasar::LmeData *)((char *)this + 24));
}

void sub_1B1B845BC(_Unwind_Exception *a1)
{
  quasar::WordPronCache::~WordPronCache(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,fst::SymbolTable,quasar::TextEncoding,void>@<X0>(const SymbolTable *a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0xA8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<fst::SymbolTable,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1B84620(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<fst::SymbolTable,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(void *a1, const SymbolTable *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60678;
  quasar::QsrTextSymbolTable::QsrTextSymbolTable((quasar::QsrTextSymbolTable *)(a1 + 3), a2, *a3);
  return a1;
}

void sub_1B1B84680(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

quasar::QsrTextSymbolTable *quasar::QsrTextSymbolTable::QsrTextSymbolTable(quasar::QsrTextSymbolTable *this, const SymbolTable *a2, int a3)
{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  unint64_t v6 = operator new(0x28uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1F0A5E1F0;
  impl = a2->impl_;
  void v6[3] = &unk_1F0A382C8;
  v6[4] = impl;
  ++*((_DWORD *)impl + 42);
  *((void *)this + 12) = v6 + 3;
  *((void *)this + 13) = v6;
  *((_DWORD *)this + 2_Block_object_dispose(&STACK[0x708], 8) = a3;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 15) = 0;
  return this;
}

uint64_t *std::map<std::string,int>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1B84780(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    char v4 = a2;
    char v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      unint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          unint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          char v4 = (const void **)v8;
        }
        while (!v9);
      }
      char v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::map<std::string,std::map<std::string,int>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::map<std::string,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,int>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,int>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1B84864(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::map<std::string,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,int>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,int>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    char v4 = a2;
    char v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,int>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      unint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          unint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          char v4 = (const void **)v8;
        }
        while (!v9);
      }
      char v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,int>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::__construct_node<std::pair<std::string const,std::map<std::string,int>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::__construct_node<std::pair<std::string const,std::map<std::string,int>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x708], 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::map<std::string,int>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1B849F4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::map<std::string,int>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<std::string,int>::map[abi:ne180100]((uint64_t *)&this[1], (const void ***)a2 + 3);
  return this;
}

void sub_1B1B84A68(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,std::string const&,int const&>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v10 = 0x333333333333333;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v14 = v11;
  long long v15 = &v11[80 * v5];
  uint64_t v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,int const&>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  unint64_t v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1B1B84B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,int const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v9 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  quasar::LmeDataFactoryBase::Word::Word(a2, &v9, &__p, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1B1B84C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  unint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *unint64_t v7 = 0;
    v7[1] = 0;
  }
}

uint64_t __Block_byref_object_copy__335(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__336(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 48);
}

void ___ZN10EARHelpers24DictionaryToUnorderedMapINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_Z57___EARUserProfileConfig_initWithConfiguration_overrides__E3__0S8_EENS1_13unordered_mapIT_T0_NS1_4hashISA_EENS1_8equal_toISA_EENS5_INS1_4pairIKSA_SB_EEEEEEP12NSDictionaryT1_T2__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  uint64_t v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "ear_toString");
  }
  else
  {
    v14[0] = 0;
    v14[1] = 0;
    uint64_t v15 = 0;
  }

  id v9 = v6;
  uint64_t v10 = v9;
  if (v9) {
    objc_msgSend(v9, "ear_toString");
  }
  else {
    memset(&__p, 0, sizeof(__p));
  }

  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8) + 48;
  unint64_t v16 = v14;
  unint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (unsigned __int8 *)v14, (uint64_t)&std::piecewise_construct, (long long **)&v16);
  std::string::operator=((std::string *)(v12 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_1B1B84E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_1B1B84EF4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<std::ifstream,std::allocator<std::ifstream>,std::string,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x258uLL);
  uint64_t result = std::__shared_ptr_emplace<std::ifstream>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<std::ifstream>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1B84F54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::ifstream>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<std::ifstream>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62860;
  std::ifstream::basic_ifstream(a1 + 3);
  return a1;
}

void sub_1B1B84FB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<std::ifstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *_ZNSt3__115allocate_sharedB8ne180100INS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x130uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceINS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1B8509C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceINS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62898;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void sub_1B1B850F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::vector<kaldi::Matrix<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<kaldi::Matrix<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 40 * a2;
    while (v3 != v7)
      uint64_t v3 = kaldi::Matrix<float>::~Matrix(v3 - 40);
    a1[1] = v7;
  }
}

void std::vector<kaldi::Vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<kaldi::Vector<float>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<kaldi::Vector<float>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1 + 24 * a2);
  }
}

void std::vector<kaldi::Matrix<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 40 * a2;
      uint64_t v14 = 40 * a2;
      do
      {
        kaldi::Matrix<float>::Matrix(v7);
        v7 += 40;
        v14 -= 40;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v22 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = (uint64_t)&v12[40 * v8];
    v19[0] = v12;
    v19[1] = v15;
    uint64_t v20 = v15;
    float v21 = &v12[40 * v11];
    uint64_t v16 = 5 * a2;
    unint64_t v17 = v15 + 40 * a2;
    uint64_t v18 = 8 * v16;
    do
    {
      kaldi::Matrix<float>::Matrix(v15);
      v15 += 40;
      v18 -= 40;
    }
    while (v18);
    uint64_t v20 = v17;
    std::vector<kaldi::Matrix<float>>::__swap_out_circular_buffer(a1, v19);
    std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)v19);
  }
}

void sub_1B1B853B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::Matrix<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 40;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 40;
    kaldi::Matrix<float>::Matrix(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    kaldi::Matrix<float>::~Matrix(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<kaldi::Vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    unint64_t v17 = &v16[v14];
    std::vector<kaldi::Vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B1B85694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::Vector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>,std::reverse_iterator<kaldi::Vector<float>*>,std::reverse_iterator<kaldi::Vector<float>*>>((uint64_t)(a1 + 2), a1[1], (const void **)a1[1], *a1, (const void **)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>,std::reverse_iterator<kaldi::Vector<float>*>,std::reverse_iterator<kaldi::Vector<float>*>>(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4, const void **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      uint64_t v10 = v7 - 24;
      *(void *)(v10 + 16) = 0;
      kaldi::Vector<float>::Resize((void **)v10, *((unsigned int *)v9 - 4), 1);
      v9 -= 3;
      kaldi::VectorBase<float>::CopyFromVec(v10, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 24;
      *((void *)&v16 + 1) -= 24;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B1B857E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<kaldi::Vector<float>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<std::reverse_iterator<kaldi::Vector<float>*>>,std::reverse_iterator<std::reverse_iterator<kaldi::Vector<float>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<kaldi::Vector<float>>,std::reverse_iterator<std::reverse_iterator<kaldi::Vector<float>*>>,std::reverse_iterator<std::reverse_iterator<kaldi::Vector<float>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(void *)(a2 + 32); result != *(void *)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    kaldi::Vector<float>::Destroy(result);
    uint64_t result = *(void *)(a2 + 32) + 24;
  }
  return result;
}

uint64_t std::__split_buffer<kaldi::Vector<float>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<kaldi::Vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    *(void *)(a1 + 16) = v4 - 24;
    kaldi::Vector<float>::Destroy(v4 - 24);
  }
}

void std::vector<std::vector<std::pair<int,float>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::pair<int,float>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        unint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x1E4FBA490] + 64;
  a1[15] = MEMORY[0x1E4FBA490] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = v8;
  a1[1] = 0;
  uint64_t v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x1E4FBA490] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100](v7, a2, a3 | 8);
  return a1;
}

void sub_1B1B85B78(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA410];
  uint64_t v3 = *MEMORY[0x1E4FBA410];
  *(void *)a1 = *MEMORY[0x1E4FBA410];
  *(void *)(a1 + *(void *)(v3 - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1B3EA8520](a1 + 120);
  return a1;
}

void std::vector<std::pair<int,kaldi::Vector<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      std::vector<std::pair<int,kaldi::Vector<float>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1 + 32 * a2);
    }
  }
  else
  {
    std::vector<std::pair<int,kaldi::Vector<float>>>::__append(a1, a2 - v2);
  }
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_1B1B85D50(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = 0;
  unint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    unint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    unint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        unint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = v4;
      }
      if (v5) {
        *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = (char *)v4 + v5;
      }
    }
  }
}

void std::vector<std::vector<std::pair<int,float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<std::pair<int,float>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B1B85FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<int,float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,float>>>,std::reverse_iterator<std::vector<std::pair<int,float>>*>,std::reverse_iterator<std::vector<std::pair<int,float>>*>,std::reverse_iterator<std::vector<std::pair<int,float>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,float>>>,std::reverse_iterator<std::vector<std::pair<int,float>>*>,std::reverse_iterator<std::vector<std::pair<int,float>>*>,std::reverse_iterator<std::vector<std::pair<int,float>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - _Block_object_dispose(&STACK[0x708], 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - _Block_object_dispose(&STACK[0x708], 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,float>>>,std::reverse_iterator<std::vector<std::pair<int,float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,float>>>,std::reverse_iterator<std::vector<std::pair<int,float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

char *std::vector<std::vector<std::pair<int,float>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<int,float>> const&>(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>((char *)v3, *a2, a2[1], a2[1] - *a2);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v3 + 24;
  return result;
}

void sub_1B1B86190(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x708], 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<int,float>>>::__push_back_slow_path<std::vector<std::pair<int,float>> const&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(v11, *a2, a2[1], a2[1] - *a2);
  v15 += 24;
  std::vector<std::vector<std::pair<int,float>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1B8629C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1B86308(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x708], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<int,kaldi::Vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<std::pair<int,kaldi::Vector<float>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<int,kaldi::Vector<float>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 32)
  {
    uint64_t v5 = i - 24;
    kaldi::Vector<float>::Destroy(v5);
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = a2;
}

uint64_t std::vector<std::pair<int,kaldi::Vector<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = v7 + 32 * a2;
      do
      {
        *(_DWORD *)uint64_t v7 = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + ++*(_DWORD *)(result + 24) = 0;
        *(void *)(v7 + _Block_object_dispose(&STACK[0x708], 8) = 0;
        v7 += 32;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    v17[4] = result;
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v12);
    }
    else {
      long long v13 = 0;
    }
    uint64_t v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    uint64_t v16 = &v15[32 * a2];
    do
    {
      *(_DWORD *)uint64_t v15 = 0;
      *((void *)v15 + 2) = 0;
      *((void *)v15 + 3) = 0;
      *((void *)v15 + 1) = 0;
      v15 += 32;
    }
    while (v15 != v16);
    v17[2] = v16;
    std::vector<std::pair<int,kaldi::Vector<float>>>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<std::pair<int,kaldi::Vector<float>>>::~__split_buffer((uint64_t)v17);
  }
  return result;
}

void sub_1B1B864D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<int,kaldi::Vector<float>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,kaldi::Vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  void v15[2] = &v18;
  char v16 = 0;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = a3;
    do
    {
      int v11 = *(_DWORD *)(v10 - 32);
      v10 -= 32;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      uint64_t v12 = v7 - 24;
      *(_DWORD *)(v12 - _Block_object_dispose(&STACK[0x708], 8) = v11;
      *(void *)(v12 + _Block_object_dispose(&STACK[0x708], 8) = 0;
      *(void *)(v12 + 16) = 0;
      kaldi::Vector<float>::Resize((void **)v12, *(unsigned int *)(v10 + 16), 1);
      kaldi::VectorBase<float>::CopyFromVec(v12, (const void **)(v9 - 24));
      uint64_t v7 = *((void *)&v18 + 1) - 32;
      *((void *)&v18 + 1) -= 32;
      uint64_t v9 = v10;
    }
    while (v10 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_1B1B8662C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<int,kaldi::Vector<float>>>,std::reverse_iterator<std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<int,kaldi::Vector<float>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    kaldi::Vector<float>::Destroy(i + 8);
    uint64_t i = *(void *)(a2 + 32) + 32;
  }
}

uint64_t std::__split_buffer<std::pair<int,kaldi::Vector<float>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<int,kaldi::Vector<float>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    *(void *)(a1 + 16) = v4 - 32;
    kaldi::Vector<float>::Destroy(v4 - 24);
  }
}

uint64_t *std::vector<std::pair<int,float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,float> const*>,std::__wrap_iter<std::pair<int,float> const*>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *(uint64_t **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = a2 - v13;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v41 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    std::vector<int> v32 = &v18[8 * v15];
    std::string __p = v18;
    long long v38 = v32;
    uint64_t v40 = &v18[8 * v17];
    uint64_t v33 = 8 * a5;
    uint64_t v34 = &v32[8 * a5];
    do
    {
      uint64_t v35 = *v7++;
      *(void *)std::vector<int> v32 = v35;
      v32 += 8;
      v33 -= 8;
    }
    while (v33);
    long long v39 = v34;
    uint64_t v5 = std::vector<std::pair<int,int>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v5);
    if (v39 != v38) {
      v39 += (v38 - v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = (uint64_t)(v12 - (void)a2) >> 3;
  if (v19 >= a5)
  {
    uint64_t v20 = &a3[a5];
    float v21 = *(void **)(v9 - 8);
LABEL_18:
    size_t v25 = &a2[a5];
    float v26 = &v21[-a5];
    unint64_t v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      unint64_t v27 = v21;
      do
      {
        uint64_t v28 = *v26++;
        *v27++ = v28;
      }
      while ((unint64_t)v26 < v12);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v27;
    if (v21 != v25)
    {
      int64_t v29 = (_DWORD *)v21 - 1;
      uint64_t v30 = v21 - v25;
      do
      {
        *(v29 - 1) = a2[v30 - 1];
        _DWORD *v29 = HIDWORD(a2[v30 - 1]);
        v29 -= 2;
        --v30;
      }
      while (v30 * 8);
    }
    if (v20 != a3)
    {
      char v31 = a2;
      do
      {
        *(_DWORD *)char v31 = *(_DWORD *)v7;
        *((_DWORD *)v31++ + 1) = *((_DWORD *)v7++ + 1);
      }
      while (v7 != v20);
    }
    return v5;
  }
  uint64_t v20 = &a3[v19];
  float v21 = *(void **)(v9 - 8);
  if (v20 != a4)
  {
    uint64_t v22 = v20;
    unint64_t v23 = *(void **)(v9 - 8);
    do
    {
      uint64_t v24 = *v22++;
      *v23++ = v24;
      ++v21;
    }
    while (v22 != a4);
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v21;
  if ((uint64_t)(v12 - (void)a2) >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_1B1B869D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<int,float>>::erase(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = *(char **)(a1 + 8);
    uint64_t v4 = a2;
    if (a3 != v3)
    {
      uint64_t v5 = 8 * ((a3 - a2) >> 3);
      uint64_t v4 = a2;
      do
      {
        *(_DWORD *)uint64_t v4 = *(_DWORD *)&v4[v5];
        *((_DWORD *)v4 + 1) = *(_DWORD *)&v4[v5 + 4];
        v4 += 8;
      }
      while (&v4[v5] != v3);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v4;
  }
  return a2;
}

void std::__introsort<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *,false>(int *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(int *result, int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        char v5 = v2;
        int v6 = v4[2];
        int v7 = *v4;
        if (v6 < *v4)
        {
          int v8 = v4[3];
          uint64_t v9 = v3;
          while (1)
          {
            uint64_t v10 = (char *)result + v9;
            *((_DWORD *)v10 + 2) = v7;
            *((_DWORD *)v10 + 3) = *(int *)((char *)result + v9 + 4);
            if (!v9) {
              break;
            }
            int v7 = *((_DWORD *)v10 - 2);
            v9 -= 8;
            if (v6 >= v7)
            {
              uint64_t v11 = (int *)((char *)result + v9 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v11 = result;
LABEL_10:
          int *v11 = v6;
          v11[1] = v8;
        }
        uint64_t v2 = v5 + 2;
        v3 += 8;
        uint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(int *result, int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = result + 3;
      do
      {
        uint64_t v4 = v2;
        int v5 = result[2];
        int v6 = *result;
        if (v5 < *result)
        {
          int v7 = result[3];
          int v8 = v3;
          do
          {
            uint64_t v9 = v8;
            *(v8 - 1) = v6;
            int v10 = *(v8 - 2);
            v8 -= 2;
            *uint64_t v9 = v10;
            int v6 = *(v9 - 5);
          }
          while (v5 < v6);
          *(v8 - 1) = v5;
          *int v8 = v7;
        }
        uint64_t v2 = v4 + 2;
        v3 += 2;
        uint64_t result = v4;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(int *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a1;
  int v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      int v6 = a1[1];
      a1[1] = a3[1];
      a3[1] = v6;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    int v10 = a1[1];
    a1[1] = a2[1];
    a2[1] = v10;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    a2[1] = a3[1];
    a3[1] = v10;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    int v7 = a2[1];
    a2[1] = a3[1];
    a3[1] = v7;
    int v8 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v8;
    int v9 = a1[1];
    a1[1] = a2[1];
    a2[1] = v9;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::CompareFirstMemberOfPair<int,float> &>(int *a1, int *a2)
{
  int v2 = *a1;
  if (*a1 >= *(a2 - 2))
  {
    int v5 = a1 + 2;
    do
    {
      int v3 = v5;
      if (v5 >= a2) {
        break;
      }
      v5 += 2;
    }
    while (v2 >= *v3);
  }
  else
  {
    int v3 = a1;
    do
    {
      int v4 = v3[2];
      v3 += 2;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      int v6 = *(a2 - 2);
      a2 -= 2;
    }
    while (v2 < v6);
  }
  int v7 = a1[1];
  if (v3 < a2)
  {
    int v8 = *v3;
    int v9 = *a2;
    do
    {
      *int v3 = v9;
      *a2 = v8;
      int v10 = v3[1];
      v3[1] = a2[1];
      a2[1] = v10;
      do
      {
        int v11 = v3[2];
        v3 += 2;
        int v8 = v11;
      }
      while (v2 >= v11);
      do
      {
        int v12 = *(a2 - 2);
        a2 -= 2;
        int v9 = v12;
      }
      while (v2 < v12);
    }
    while (v3 < a2);
  }
  if (v3 - 2 != a1)
  {
    *a1 = *(v3 - 2);
    a1[1] = *(v3 - 1);
  }
  *(v3 - 2) = v2;
  *(v3 - 1) = v7;
  return v3;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::CompareFirstMemberOfPair<int,float> &>(int *a1, int *a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  int v4 = a1[1];
  do
  {
    int v5 = a1[v2 + 2];
    v2 += 2;
  }
  while (v5 < v3);
  int v6 = &a1[v2];
  if (v2 == 2)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      int v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
    {
      int v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= v3);
  }
  if (v6 >= a2)
  {
    int v10 = &a1[v2];
  }
  else
  {
    int v9 = *a2;
    int v10 = &a1[v2];
    int v11 = a2;
    do
    {
      *int v10 = v9;
      int *v11 = v5;
      int v12 = v10[1];
      v10[1] = v11[1];
      v11[1] = v12;
      do
      {
        int v13 = v10[2];
        v10 += 2;
        int v5 = v13;
      }
      while (v13 < v3);
      do
      {
        int v14 = *(v11 - 2);
        v11 -= 2;
        int v9 = v14;
      }
      while (v14 >= v3);
    }
    while (v10 < v11);
  }
  if (v10 - 2 != a1)
  {
    *a1 = *(v10 - 2);
    a1[1] = *(v10 - 1);
  }
  *(v10 - 2) = v3;
  *(v10 - 1) = v4;
  return v10 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(uint64_t a1, float *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *((_DWORD *)a2 - 2);
      int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *((_DWORD *)a2 - 2) = v7;
        int v8 = *(_DWORD *)(a1 + 4);
        *(float *)(a1 + 4) = *(a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((int *)a1, (int *)(a1 + 8), (int *)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(a1, a1 + 8, a1 + 16, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(a1, a1 + 8, a1 + 16, (float *)(a1 + 24), a2 - 2);
      return 1;
    default:
      int v9 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((int *)a1, (int *)(a1 + 8), (int *)(a1 + 16));
      int v10 = (float *)(a1 + 24);
      if ((float *)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    int v13 = *(_DWORD *)v10;
    int v14 = *(_DWORD *)v9;
    if (*(_DWORD *)v10 < *(_DWORD *)v9)
    {
      int v15 = *((_DWORD *)v10 + 1);
      uint64_t v16 = v11;
      while (1)
      {
        unint64_t v17 = (_DWORD *)(a1 + v16);
        v17[6] = v14;
        v17[7] = *(_DWORD *)(a1 + v16 + 20);
        if (v16 == -16) {
          break;
        }
        int v14 = v17[2];
        v16 -= 8;
        if (v13 >= v14)
        {
          int v18 = (_DWORD *)(a1 + v16 + 24);
          goto LABEL_12;
        }
      }
      int v18 = (_DWORD *)a1;
LABEL_12:
      *int v18 = v13;
      v18[1] = v15;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    int v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((int *)a1, (int *)a2, (int *)a3);
  int v9 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    *(float *)a3 = *a4;
    *(_DWORD *)a4 = v9;
    float result = *(float *)(a3 + 4);
    *(float *)(a3 + 4) = a4[1];
    a4[1] = result;
    int v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v10;
      float result = *(float *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(float *)(a3 + 4) = result;
      int v11 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v11;
        float result = *(float *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
        *(float *)(a2 + 4) = result;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  float result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(a1, a2, a3, a4);
  float v11 = *a4;
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    *a4 = *a5;
    *a5 = v11;
    float result = a4[1];
    a4[1] = a5[1];
    a5[1] = result;
    int v12 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      *(float *)a3 = *a4;
      *(_DWORD *)a4 = v12;
      float result = *(float *)(a3 + 4);
      *(float *)(a3 + 4) = a4[1];
      a4[1] = result;
      int v13 = *(_DWORD *)a2;
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v13;
        float result = *(float *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        *(float *)(a3 + 4) = result;
        int v14 = *(_DWORD *)a1;
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v14;
          float result = *(float *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
          *(float *)(a2 + 4) = result;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *,std::pair<int,float> *>(char *a1, char *a2, char *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        int v15 = *(_DWORD *)v14;
        if (*(_DWORD *)v14 < *(_DWORD *)a1)
        {
          *(_DWORD *)int v14 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v15;
          int v16 = *((_DWORD *)v14 + 1);
          *((_DWORD *)v14 + 1) = *((_DWORD *)a1 + 1);
          *((_DWORD *)a1 + 1) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v17 = (unint64_t)v8 >> 3;
      int v18 = a2 - 8;
      do
      {
        int v19 = *(_DWORD *)a1;
        int v20 = *((_DWORD *)a1 + 1);
        char v21 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(a1, a4, v17);
        if (v18 == v21)
        {
          *(_DWORD *)char v21 = v19;
          *((_DWORD *)v21 + 1) = v20;
        }
        else
        {
          *(_DWORD *)char v21 = *(_DWORD *)v18;
          *((_DWORD *)v21 + 1) = *((_DWORD *)v18 + 1);
          *(_DWORD *)int v18 = v19;
          *((_DWORD *)v18 + 1) = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)a1, (uint64_t)(v21 + 8), a4, (v21 + 8 - a1) >> 3);
        }
        v18 -= 8;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (_DWORD *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        int v10 = *v8;
      }
      else
      {
        int v10 = *v8;
        int v11 = v8[2];
        if (*v8 <= v11) {
          int v10 = v8[2];
        }
        if (*v8 < v11)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      int v12 = *a4;
      if (v10 >= *a4)
      {
        int v13 = a4[1];
        do
        {
          int v14 = a4;
          a4 = v8;
          *int v14 = v10;
          v14[1] = v8[1];
          if (v5 < v7) {
            break;
          }
          uint64_t v15 = (2 * v7) | 1;
          uint64_t v8 = (_DWORD *)(result + 8 * v15);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            int v10 = *v8;
            uint64_t v7 = v15;
          }
          else
          {
            int v10 = *v8;
            int v16 = v8[2];
            if (*v8 <= v16) {
              int v10 = v8[2];
            }
            if (*v8 >= v16) {
              uint64_t v7 = v15;
            }
            else {
              v8 += 2;
            }
          }
        }
        while (v10 >= v12);
        *a4 = v12;
        a4[1] = v13;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = &a1[2 * v3 + 2];
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v3 = 2 * v3 + 2;
    if (v3 >= a3)
    {
      int v8 = *v6;
      uint64_t v3 = v7;
    }
    else
    {
      int v8 = *v6;
      int v9 = v6[2];
      if (*v6 <= v9) {
        int v8 = v6[2];
      }
      if (*v6 >= v9) {
        uint64_t v3 = v7;
      }
      else {
        v6 += 2;
      }
    }
    *a1 = v8;
    a1[1] = v6[1];
    a1 = v6;
  }
  while (v3 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (_DWORD *)(result + 8 * (v4 >> 1));
    uint64_t v7 = (_DWORD *)(a2 - 8);
    int v8 = *(_DWORD *)(a2 - 8);
    int v9 = *v6;
    if (*v6 < v8)
    {
      int v10 = *(_DWORD *)(a2 - 4);
      do
      {
        int v11 = v7;
        uint64_t v7 = v6;
        _DWORD *v11 = v9;
        v11[1] = v6[1];
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (_DWORD *)(result + 8 * v5);
        int v9 = *v6;
      }
      while (*v6 < v8);
      *uint64_t v7 = v8;
      v7[1] = v10;
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    int v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 2_Block_object_dispose(&STACK[0x708], 8) = **a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void TClitics::TClitics(TClitics *this, TLexicon *a2, TTokenizerParamManager *a3)
{
  *(void *)this = &unk_1F0A348F0;
  *((void *)this + 1) = 0;
  uint64_t v6 = (char *)this + 16;
  *((void *)this + 2) = &unk_1F0A348F0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + _Block_object_dispose(&STACK[0x708], 8) = 0;
  uint64_t v7 = (TClitics *)((char *)this + 72);
  TRegExp::TRegExp((void *)this + 9, (uint64_t)a2 + 224);
  *((void *)this + 4) = a2;
  *((void *)this + 5) = a3;
  *((void *)this + 1) = 2;
  (*(void (**)(TClitics *))(*(void *)this + 16))(this);
  *((void *)this + 3) = 6;
  (*(void (**)(char *))(*((void *)this + 2) + 16))(v6);
  int v8 = (__int32 *)TStringParam::get((TTokenizerParamManager *)((char *)a3 + 7984));
  if (v8)
  {
    if (*v8)
    {
      TRegExp::add((uint64_t)v7, v8, 0);
      TRegExp::doneAdding(v7);
    }
  }
}

void sub_1B1B87A20(_Unwind_Exception *a1)
{
  TRegExp::~TRegExp(v2);
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

char *TStringParam::get(TStringParam *this)
{
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(this);
  uint64_t v3 = (char *)this + 24 * TParam::getValidConfig(this, ActiveConfigHandle);
  float result = v3 + 152;
  if (v3[175] < 0) {
    return *(char **)result;
  }
  return result;
}

void TClitics::~TClitics(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
}

BOOL TClitics::isValidRoot(TClitics *this, const TWord *a2)
{
  if (!*((void *)this + 11)) {
    return 0;
  }
  uint64_t v6 = (unsigned int *)v8;
  long long v7 = xmmword_1B25607E0;
  char v9 = 1;
  TWord::getCategoryTag((uint64_t)a2, &v6);
  if (*((void *)&v7 + 1) >= (unint64_t)v7)
  {
    if (v9)
    {
      int v10 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v6, *((unint64_t *)&v7 + 1), &v10, 1uLL);
      uint64_t v3 = v6;
      --*((void *)&v7 + 1);
    }
    else
    {
      uint64_t v3 = v6;
      if ((void)v7) {
        v6[(void)v7 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v3 = v6;
    v6[*((void *)&v7 + 1)] = 0;
  }
  BOOL v4 = TRegExp::match((void *)this + 9, v3, 0);
  if (v9 && v6 != (unsigned int *)v8 && v6) {
    MEMORY[0x1B3EA8630]();
  }
  return v4;
}

void sub_1B1B87BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (LOBYTE(STACK[0x420])) {
    TClitics::isValidRoot((uint64_t *)va, v2);
  }
  _Unwind_Resume(a1);
}

void TClitics::addWords(TClitics *this, char **a2, TGraph *a3, TSegmenter *a4)
{
  unint64_t v5 = (TVertex *)a2;
  uint64_t Segment = TSegmenter::getSegment(a4, a2[2]);
  if (Segment)
  {
    uint64_t v8 = Segment;
    if (*(_DWORD *)(Segment + 24) == 1)
    {
      size_t v89 = wcslen(*(const __int32 **)Segment);
      if (v89 >= 4)
      {
        uint64_t OutEdge = TVertex::getOutEdge((uint64_t)v5);
        uint64_t Vertex = TGraph::getVertex(a3, *(const char **)(v8 + 8));
        if (Vertex) {
          BOOL v11 = OutEdge == 0;
        }
        else {
          BOOL v11 = 1;
        }
        if (!v11)
        {
LABEL_112:
          if (*(void *)(OutEdge + 24) == Vertex && (*(unsigned char *)(OutEdge + 64) & 0x35) == 0) {
            return;
          }
          while (1)
          {
            uint64_t OutEdge = *(void *)(OutEdge + 8);
            if (!OutEdge) {
              break;
            }
            if (!*(unsigned char *)(OutEdge + 32)) {
              goto LABEL_112;
            }
          }
        }
        size_t v12 = *((void *)this + 3);
        if (v12 + 2 > v89) {
          size_t v12 = v89 - 2;
        }
        uint64_t v116 = 0;
        uint64_t v117 = 6;
        float v114 = 0;
        unsigned __int32 v115 = 0;
        unint64_t v111 = 0;
        uint64_t v112 = 0;
        uint64_t v113 = 0;
        unint64_t v90 = *((void *)this + 1);
        unint64_t v88 = v12 + 1;
        if (v90 < v12 + 1)
        {
          uint64_t v92 = v8;
          unint64_t v94 = a3;
          unint64_t v95 = this;
          uint64_t v87 = v5;
          while (1)
          {
            std::vector<TLexiconMatch>::resize((uint64_t)&v114, 0);
            int v13 = *(int **)v92;
            uint64_t v15 = (void *)*((void *)this + 4);
            uint64_t v14 = *((void *)this + 5);
            uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v14 + 16456));
            size_t v17 = *(int *)(v14 + 4 * TParam::getValidConfig((TParam *)(v14 + 16456), ActiveConfigHandle) + 16616);
            uint64_t v18 = *((void *)this + 5);
            uint64_t v19 = TParam::getActiveConfigHandle((TParam *)(v18 + 16104));
            uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v18 + 16104), v19);
            TLexicon::findHeadClonesCollated(v15, (unsigned int *)&v13[v89 - v90], &v117, 1uLL, v17, *(int *)(v18 + 4 * ValidConfig + 16264), (void **)&v114);
            if (v114 == v115) {
              goto LABEL_107;
            }
            uint64_t v107 = (int *)v109;
            long long v108 = xmmword_1B25607E0;
            char v110 = 1;
            char v21 = *(int **)v92;
            TBuffer<wchar_t>::resize((uint64_t)&v107, 0);
            TBuffer<wchar_t>::insert((uint64_t)&v107, 0, v21, v89 - v90);
            uint64_t v22 = *((void *)this + 5);
            uint64_t v23 = TParam::getActiveConfigHandle((TParam *)(v22 + 7736));
            if (!*(unsigned char *)(v22 + TParam::getValidConfig((TParam *)(v22 + 7736), v23) + 7888)) {
              goto LABEL_24;
            }
            if ((respellRoot((uint64_t)&v107, *(int **)v92) & 1) == 0) {
              goto LABEL_23;
            }
            uint64_t v24 = *((void *)this + 4);
            if (*((void *)&v108 + 1) >= (unint64_t)v108)
            {
              if (v110)
              {
                LODWORD(v104) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), (int *)&v104, 1uLL);
                int v25 = v107;
                --*((void *)&v108 + 1);
              }
              else
              {
                int v25 = v107;
                if ((void)v108) {
                  v107[(void)v108 - 1] = 0;
                }
              }
            }
            else
            {
              int v25 = v107;
              v107[*((void *)&v108 + 1)] = 0;
            }
            if (TLexicon::checkName(v24, v25, 1, 0xFFFFFFFFFFFFFFFFLL))
            {
LABEL_23:
              int v26 = 7;
            }
            else
            {
LABEL_24:
              std::vector<TLexiconMatch>::resize((uint64_t)&v111, 0);
              unint64_t v27 = (void *)*((void *)this + 4);
              if (*((void *)&v108 + 1) >= (unint64_t)v108)
              {
                if (v110)
                {
                  LODWORD(v104) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), (int *)&v104, 1uLL);
                  uint64_t v28 = v107;
                  --*((void *)&v108 + 1);
                }
                else
                {
                  uint64_t v28 = v107;
                  if ((void)v108) {
                    v107[(void)v108 - 1] = 0;
                  }
                }
              }
              else
              {
                uint64_t v28 = v107;
                v107[*((void *)&v108 + 1)] = 0;
              }
              int64_t v29 = TStringParam::get((TStringParam *)(*((void *)this + 5) + 10736));
              uint64_t v30 = *((void *)this + 5);
              uint64_t v31 = TParam::getActiveConfigHandle((TParam *)(v30 + 16456));
              size_t v32 = *(int *)(v30 + 4 * TParam::getValidConfig((TParam *)(v30 + 16456), v31) + 16616);
              uint64_t v33 = *((void *)this + 5);
              uint64_t v34 = TParam::getActiveConfigHandle((TParam *)(v33 + 16104));
              uint64_t v35 = TParam::getValidConfig((TParam *)(v33 + 16104), v34);
              TLexicon::findHeadClonesCollated(v27, v28, v29, v32, *(int *)(v33 + 4 * v35 + 16264), (void **)&v111);
              uint64_t v36 = *((void *)this + 5);
              uint64_t v37 = TParam::getActiveConfigHandle((TParam *)(v36 + 12856));
              if (!*(unsigned char *)(v36 + TParam::getValidConfig((TParam *)(v36 + 12856), v37) + 13008))
              {
                unint64_t v70 = v111;
                if (v112 != v111)
                {
                  uint64_t v71 = 0;
                  unint64_t v72 = 0;
                  unint64_t v73 = 0;
                  do
                  {
                    if (TClitics::isValidRoot(this, *(const TWord **)&v70[v71]))
                    {
                      if (!v73) {
                        unint64_t v73 = (uint64_t *)TGraph::addVertex(a3, 0);
                      }
                      uint64_t v74 = *(void *)&v111[v71];
                      LODWORD(v104) = 1;
                      *(void *)int v105 = v74;
                      *(_OWORD *)&v105[8] = *(_OWORD *)&v111[v71 + 16];
                      TGraph::addEdge(a3, (uint64_t)v5, v73, (uint64_t)&v104);
                    }
                    ++v72;
                    unint64_t v70 = v111;
                    v71 += 32;
                  }
                  while (v72 < (v112 - v111) >> 5);
                  if (v73)
                  {
                    uint64_t v75 = TGraph::addVertex(a3, *(char **)(v92 + 8));
                    uint64_t v76 = v114;
                    if (v115 != v114)
                    {
                      uint64_t v77 = (uint64_t *)v75;
                      uint64_t v78 = 0;
                      unint64_t v79 = 0;
                      do
                      {
                        unint64_t v80 = &v76[v78];
                        uint64_t v81 = *(void *)v80;
                        LODWORD(v104) = 1;
                        *(void *)int v105 = v81;
                        *(_OWORD *)&v105[8] = *((_OWORD *)v80 + 1);
                        TGraph::addEdge(a3, (uint64_t)v73, v77, (uint64_t)&v104);
                        ++v79;
                        uint64_t v76 = v114;
                        v78 += 32;
                      }
                      while (v79 < (v115 - v114) >> 5);
                    }
                  }
                }
                goto LABEL_100;
              }
              uint64_t v38 = *((void *)this + 5);
              uint64_t v39 = TParam::getActiveConfigHandle((TParam *)(v38 + 12608));
              if (*(unsigned char *)(v38 + TParam::getValidConfig((TParam *)(v38 + 12608), v39) + 12760))
              {
                float v104 = (int *)&v105[16];
                *(_OWORD *)int v105 = xmmword_1B25607E0;
                char v106 = 1;
                unint64_t v100 = v102;
                long long v101 = xmmword_1B25607E0;
                char v103 = 1;
                uint64_t v40 = v111;
                if (v112 == v111) {
                  goto LABEL_78;
                }
                uint64_t v41 = 0;
                do
                {
                  uint64_t v91 = v41;
                  uint64_t v42 = 32 * v41;
                  if (TClitics::isValidRoot(this, *(const TWord **)&v40[32 * v41]))
                  {
                    TWord::getWrittenForm(*(__int32 ***)&v111[v42], (uint64_t)&v107);
                    uint64_t v43 = v114;
                    if (v115 != v114)
                    {
                      uint64_t v44 = 0;
                      unint64_t v45 = 0;
                      do
                      {
                        TWord::getWrittenForm(*(__int32 ***)&v43[v44], (uint64_t)&v100);
                        TBuffer<wchar_t>::operator=((uint64_t)&v104, (uint64_t)&v107);
                        TBuffer<wchar_t>::operator+=((uint64_t)&v104, (uint64_t)&v100);
                        uint64_t v46 = *((void *)this + 5);
                        uint64_t v47 = TParam::getActiveConfigHandle((TParam *)(v46 + 7736));
                        if (!*(unsigned char *)(v46 + TParam::getValidConfig((TParam *)(v46 + 7736), v47) + 7888)) {
                          goto LABEL_45;
                        }
                        if (*((void *)&v108 + 1) >= (unint64_t)v108)
                        {
                          if (v110)
                          {
                            int v96 = 0;
                            TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), &v96, 1uLL);
                            unsigned int v48 = v107;
                            --*((void *)&v108 + 1);
                          }
                          else
                          {
                            unsigned int v48 = v107;
                            if ((void)v108) {
                              v107[(void)v108 - 1] = 0;
                            }
                          }
                        }
                        else
                        {
                          unsigned int v48 = v107;
                          v107[*((void *)&v108 + 1)] = 0;
                        }
                        if (respellRoot((uint64_t)&v104, v48))
                        {
LABEL_45:
                          uint64_t v49 = *((void *)this + 4);
                          if (*(void *)&v105[8] >= *(void *)v105)
                          {
                            if (v106)
                            {
                              int v96 = 0;
                              TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                              uint64_t v50 = v104;
                              --*(void *)&v105[8];
                            }
                            else
                            {
                              uint64_t v50 = v104;
                              if (*(void *)v105) {
                                v104[*(void *)v105 - 1] = 0;
                              }
                            }
                          }
                          else
                          {
                            uint64_t v50 = v104;
                            v104[*(void *)&v105[8]] = 0;
                          }
                          if (!TLexicon::checkName(v49, v50, 0, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            unsigned int v51 = (void *)*((void *)this + 4);
                            if (*(void *)&v105[8] >= *(void *)v105)
                            {
                              uint64_t v53 = v92;
                              if (v106)
                              {
                                int v96 = 0;
                                TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                                uint64_t v52 = v104;
                                --*(void *)&v105[8];
                              }
                              else
                              {
                                uint64_t v52 = v104;
                                if (*(void *)v105) {
                                  v104[*(void *)v105 - 1] = 0;
                                }
                              }
                            }
                            else
                            {
                              uint64_t v52 = v104;
                              v104[*(void *)&v105[8]] = 0;
                              uint64_t v53 = v92;
                            }
                            uint64_t HeadClone = TLexicon::findHeadClone(v51, v52);
                            if (HeadClone)
                            {
                              int v55 = 1;
                            }
                            else
                            {
                              unsigned int v56 = (TAllocator *)*((void *)this + 4);
                              if (*(void *)&v105[8] >= *(void *)v105)
                              {
                                if (v106)
                                {
                                  int v96 = 0;
                                  TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                                  unsigned int v57 = v104;
                                  --*(void *)&v105[8];
                                }
                                else
                                {
                                  unsigned int v57 = v104;
                                  if (*(void *)v105) {
                                    v104[*(void *)v105 - 1] = 0;
                                  }
                                }
                              }
                              else
                              {
                                unsigned int v57 = v104;
                                v104[*(void *)&v105[8]] = 0;
                              }
                              uint64_t HeadClone = (uint64_t)TLexicon::addTempWord(v56, v57, 0, 0, 0);
                              int v55 = 4;
                            }
                            int v93 = v55;
                            float v58 = (uint64_t *)TGraph::addVertex(v94, *(char **)(v53 + 8));
                            uint64_t v59 = *((void *)this + 4);
                            unint64_t v60 = *(const __int32 **)v53;
                            if (*(void *)&v105[8] >= *(void *)v105)
                            {
                              if (v106)
                              {
                                int v96 = 0;
                                TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                                int v61 = (unsigned int *)v104;
                                --*(void *)&v105[8];
                              }
                              else
                              {
                                int v61 = (unsigned int *)v104;
                                if (*(void *)v105) {
                                  v104[*(void *)v105 - 1] = 0;
                                }
                              }
                            }
                            else
                            {
                              int v61 = (unsigned int *)v104;
                              v104[*(void *)&v105[8]] = 0;
                            }
                            uint64_t v62 = *((void *)v95 + 5);
                            uint64_t v63 = TParam::getActiveConfigHandle((TParam *)(v62 + 16456));
                            size_t v64 = *(int *)(v62 + 4 * TParam::getValidConfig((TParam *)(v62 + 16456), v63) + 16616);
                            uint64_t v65 = *((void *)v95 + 5);
                            uint64_t v66 = TParam::getActiveConfigHandle((TParam *)(v65 + 16104));
                            uint64_t v67 = TParam::getValidConfig((TParam *)(v65 + 16104), v66);
                            uint64_t Score = TLexicon::makeScore(v59, v60, v61, v64, *(int *)(v65 + 4 * v67 + 16264));
                            int v96 = v93;
                            uint64_t v97 = HeadClone;
                            uint64_t v98 = Score;
                            uint64_t v99 = v69;
                            TGraph::addEdge(v94, *((void *)v94 + 8), v58, (uint64_t)&v96);
                            this = v95;
                          }
                        }
                        ++v45;
                        uint64_t v43 = v114;
                        v44 += 32;
                      }
                      while (v45 < (v115 - v114) >> 5);
                    }
                  }
                  uint64_t v41 = v91 + 1;
                  uint64_t v40 = v111;
                }
                while (v91 + 1 < (unint64_t)((v112 - v111) >> 5));
                a3 = v94;
                unint64_t v5 = v87;
                if (v103)
                {
LABEL_78:
                  if (v100 != v102 && v100) {
                    MEMORY[0x1B3EA8630]();
                  }
                }
                if (v106 && v104 != (int *)&v105[16] && v104) {
                  MEMORY[0x1B3EA8630]();
                }
LABEL_100:
                int v26 = 0;
                goto LABEL_101;
              }
              unint64_t v82 = v111;
              if (v112 == v111) {
                goto LABEL_100;
              }
              uint64_t v83 = 0;
              unint64_t v84 = 0;
              while (!TClitics::isValidRoot(this, *(const TWord **)&v82[v83]))
              {
                ++v84;
                unint64_t v82 = v111;
                v83 += 32;
                if (v84 >= (v112 - v111) >> 5) {
                  goto LABEL_100;
                }
              }
              uint64_t v85 = TLexicon::findHeadClone(*((void **)this + 4), *(__int32 **)v92);
              if (!v85) {
                uint64_t v85 = (uint64_t)TLexicon::addTempWord(*((TAllocator **)this + 4), *(int **)v92, 0, 0, 0);
              }
              uint64_t v86 = (uint64_t *)TGraph::addVertex(a3, *(char **)(v92 + 8));
              LODWORD(v104) = 4;
              *(void *)int v105 = v85;
              *(void *)&v105[8] = 0;
              v105[16] = 0;
              TGraph::addEdge(a3, *((void *)a3 + 8), v86, (uint64_t)&v104);
              int v26 = 5;
            }
LABEL_101:
            if (v110 && v107 != (int *)v109 && v107) {
              MEMORY[0x1B3EA8630]();
            }
            if (v26 != 7 && v26)
            {
LABEL_117:
              if (v111)
              {
                uint64_t v112 = v111;
                operator delete(v111);
              }
              break;
            }
LABEL_107:
            if (++v90 >= v88) {
              goto LABEL_117;
            }
          }
        }
        if (v114)
        {
          unsigned __int32 v115 = v114;
          operator delete(v114);
        }
      }
    }
  }
}

void sub_1B1B886EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (LOBYTE(STACK[0xCF8]))
  {
    if (STACK[0x8E0] != a15 && STACK[0x8E0] != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  uint64_t v18 = *(void **)(v15 - 144);
  if (v18)
  {
    *(void *)(v15 - 136) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(v15 - 120);
  if (v19)
  {
    *(void *)(v15 - 112) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void std::vector<TLexiconMatch>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<TLexiconMatch>::__append((void **)a1, a2 - v2);
  }
}

uint64_t TBuffer<wchar_t>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4)
  {
    if (*(unsigned char *)(a2 + 1048))
    {
      int v8 = 0;
      TBuffer<wchar_t>::insert(a2, v5, &v8, 1uLL);
      unint64_t v5 = *(void *)(a2 + 16) - 1;
      *(void *)(a2 + 16) = v5;
      uint64_t v6 = *(int **)a2;
    }
    else
    {
      uint64_t v6 = *(int **)a2;
      if (v4) {
        v6[v4 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v6 = *(int **)a2;
    *(_DWORD *)(*(void *)a2 + 4 * v5) = 0;
  }
  TBuffer<wchar_t>::resize(a1, 0);
  TBuffer<wchar_t>::insert(a1, 0, v6, v5);
  return a1;
}

uint64_t TBuffer<wchar_t>::operator+=(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= v5)
  {
    if (*(unsigned char *)(a2 + 1048))
    {
      int v8 = 0;
      TBuffer<wchar_t>::insert(a2, v4, &v8, 1uLL);
      unint64_t v4 = *(void *)(a2 + 16) - 1;
      *(void *)(a2 + 16) = v4;
      uint64_t v6 = *(int **)a2;
    }
    else
    {
      uint64_t v6 = *(int **)a2;
      if (v5) {
        v6[v5 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v6 = *(int **)a2;
    *(_DWORD *)(*(void *)a2 + 4 * v4) = 0;
  }
  TBuffer<wchar_t>::insert(a1, *(void *)(a1 + 16), v6, v4);
  return a1;
}

void std::vector<TLexiconMatch>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(void **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = 32 * a2;
      uint64_t v15 = &v7[4 * a2];
      do
      {
        *long long v7 = 0;
        v7[1] = 0;
        *((unsigned char *)v7 + ++*(_DWORD *)(result + 24) = 0;
        v7[2] = 0;
        v7 += 4;
        v14 -= 32;
      }
      while (v14);
      long long v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    int v16 = &v13[32 * v10];
    size_t v17 = &v16[32 * a2];
    uint64_t v18 = 32 * a2;
    uint64_t v19 = v16;
    do
    {
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = 0;
      unsigned char v19[24] = 0;
      *((void *)v19 + 2) = 0;
      v19 += 32;
      v18 -= 32;
    }
    while (v18);
    int v20 = &v13[32 * v12];
    uint64_t v22 = (char *)*a1;
    char v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        long long v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v16 - 1) = v23;
        v16 -= 32;
        v21 -= 32;
      }
      while (v21 != v22);
      char v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
    {
      operator delete(v21);
    }
  }
}

uint64_t quasar::languageIdForLocale(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(void *)(a1 + 8)) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(a1 + 23))
  {
    return 0;
  }
  uint64_t v2 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(quasar::languageIdForLocale(std::string const&)::idMap, (const void **)a1);
  if (quasar::languageIdForLocale(std::string const&)::idMap + 8 != v2) {
    return *(unsigned int *)(v2 + 56);
  }
  if (quasar::gLogLevel >= 2)
  {
    memset(v8, 0, 272);
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Unknown locale specified in configuration: ", 43);
    int v5 = *(char *)(a1 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (const void *)a1;
    }
    else {
      uint64_t v6 = *(const void **)a1;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v8);
  }
  return 0;
}

void sub_1B1B894C0(_Unwind_Exception *a1)
{
  uint64_t v4 = 2368;
  while (1)
  {
    if (*(char *)(v2 + v4 - 9) < 0) {
      operator delete(*(void **)(v2 + v4 - 32));
    }
    v4 -= 32;
    if (!v4)
    {
      MEMORY[0x1B3EA8670](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string,NLLanguageID>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1B1B896F8(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void quasar::NotchDetector2::NotchDetector2(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5, int a6, float a7, float a8, float a9, float a10)
{
  *(void *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0x43FA000043340000;
  *(_OWORD *)(a1 + 32) = xmmword_1B2561FA0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 1182400512;
  *(_OWORD *)(a1 + 72) = 0u;
  int v20 = (uint64_t *)(a1 + 72);
  *(unsigned char *)(a1 + 64) = 1;
  uint64_t v39 = (char **)(a1 + 96);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 136) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 120), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 144), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  *(_OWORD *)(a1 + 176) = 0u;
  *(float *)(a1 + 16_Block_object_dispose(&STACK[0x708], 8) = a10;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 24) = a6;
  *(float *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = a9;
  float v21 = log2f((float)a3);
  int v22 = (int)ldexpf(1.0, (int)v21);
  if (v22 >= 0) {
    int v23 = v22;
  }
  else {
    int v23 = v22 + 1;
  }
  int v24 = v23 >> 1;
  *(_DWORD *)(a1 + 32) = v22;
  *(_DWORD *)(a1 + 36) = v24;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = v24 + 1;
  float v25 = *(float *)(a1 + 48) * 0.5;
  float v26 = (float)(v24 + 1);
  float v27 = floorf((float)(a8 / v25) * v26);
  float v28 = floorf((float)(a7 / v25) * v26);
  *(float *)(a1 + ++*(_DWORD *)(result + 24) = v27;
  *(float *)(a1 + 2_Block_object_dispose(&STACK[0x708], 8) = v28;
  if (a6) {
    printf("notchWidth %d, antiNotch %d, mR %d, mK %d, mN %d \n", (int)v27, (int)v28, v24, v24 + 1, a4);
  }
  unint64_t v29 = (a2[1] - *a2) >> 2;
  LODWORD(__p[0]) = 0;
  std::vector<float>::assign((char **)a1, v29, __p);
  uint64_t v31 = *a2;
  uint64_t v30 = a2[1];
  if (v30 != *a2)
  {
    unint64_t v32 = 0;
    do
    {
      float v33 = floorf((float)(*(float *)(v31 + 4 * v32) / (float)(*(float *)(a1 + 48) * 0.5)) * (float)*(int *)(a1 + 44))
          + -1.0;
      *(float *)(*(void *)a1 + 4 * v32) = v33;
      if (a6)
      {
        printf("notchVec[%d]=%d \n", v32, (int)v33);
        uint64_t v31 = *a2;
        uint64_t v30 = a2[1];
      }
      ++v32;
    }
    while (v32 < (v30 - v31) >> 2);
  }
  unint64_t v34 = *(int *)(a1 + 32);
  LODWORD(__p[0]) = 0;
  uint64_t v35 = std::vector<float>::assign(v39, v34, __p);
  quasar::NotchDetector2::magicWindow(v36, (uint64_t)v35, v39, *(_DWORD *)(a1 + 32));
  unint64_t v37 = *(int *)(a1 + 40);
  unint64_t v38 = 2 * *(int *)(a1 + 32);
  int v40 = 0;
  std::vector<float>::vector(__p, v38, &v40);
  std::vector<std::vector<float>>::assign(v20, v37, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  operator new();
}

void sub_1B1B89A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, uint64_t a17, void *__p, uint64_t a19)
{
  float v25 = *a15;
  if (*a15)
  {
    *(void *)(v19 + 20_Block_object_dispose(&STACK[0x708], 8) = v25;
    operator delete(v25);
  }
  float v26 = *v23;
  if (*v23)
  {
    *(void *)(v19 + 184) = v26;
    operator delete(v26);
  }
  float v27 = *v22;
  if (*v22)
  {
    *(void *)(v19 + 1--*(_DWORD *)(a9 + 52) = v27;
    operator delete(v27);
  }
  float v28 = *v21;
  if (*v21)
  {
    *(void *)(v19 + 12_Block_object_dispose(&STACK[0x708], 8) = v28;
    operator delete(v28);
  }
  unint64_t v29 = *a16;
  if (*a16)
  {
    *(void *)(v19 + 104) = v29;
    operator delete(v29);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::unique_ptr<kaldi::SplitRadixComplexFft<float>>::reset[abi:ne180100](v20, 0);
  uint64_t v30 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + _Block_object_dispose(&STACK[0x708], 8) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

void sub_1B1B89AF8()
{
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  float result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    int v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 2;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 2;
    }
    if (v15)
    {
      int v16 = result;
      do
      {
        *(_DWORD *)int v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      size_t v17 = &v13[4 * (a2 - v14)];
      uint64_t v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)int v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v6 >> 1;
    if (v6 >> 1 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    float result = std::vector<int>::__vallocate[abi:ne180100](a1, v9);
    uint64_t v10 = a1[1];
    uint64_t v11 = &v10[4 * a2];
    uint64_t v12 = 4 * a2;
    do
    {
      *(_DWORD *)uint64_t v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

uint64x2_t quasar::NotchDetector2::magicWindow(uint64x2_t result, uint64_t a2, void *a3, int a4)
{
  if (a4 >= 1)
  {
    *(float *)result.i32 = (float)a4;
    float32x4_t v44 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.i8, 0);
    uint64x2_t v45 = (uint64x2_t)vdupq_n_s64((unint64_t)a4 - 1);
    uint64_t v4 = (a4 + 3) & 0x1FFFFFFFCLL;
    uint64x2_t v5 = (uint64x2_t)xmmword_1B2561FB0;
    float result = (uint64x2_t)xmmword_1B255FA20;
    int32x4_t v6 = (int32x4_t)xmmword_1B2561FC0;
    uint64_t v7 = (_DWORD *)(*a3 + 8);
    __asm { FMOV            V1.4S, #4.0 }
    float32x4_t v43 = _Q1;
    __asm { FMOV            V1.4S, #1.0 }
    float32x4_t v54 = _Q1;
    __asm { FMOV            V4.4S, #3.0 }
    float64x2_t v41 = (float64x2_t)vdupq_n_s64(0x3FF459A5D6E6692DuLL);
    float32x4_t v42 = _Q4;
    int64x2_t v39 = vdupq_n_s64(4uLL);
    float32x4_t v40 = (float32x4_t)vdupq_n_s32(0x3FC90FDBu);
    do
    {
      int64x2_t v52 = (int64x2_t)result;
      int64x2_t v53 = (int64x2_t)v5;
      int8x16_t v15 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v45, result), (int32x4_t)vcgeq_u64(v45, v5));
      int32x4_t v51 = v6;
      float32x4_t v16 = vdivq_f32(vmulq_f32(vcvtq_f32_s32(v6), v43), v44);
      int8x16_t v17 = (int8x16_t)vcgtq_f32(v54, v16);
      v18.i64[0] = 0x4000000040000000;
      v18.i64[1] = 0x4000000040000000;
      int8x16_t v19 = (int8x16_t)vcgtq_f32(v18, v16);
      int8x16_t v20 = (int8x16_t)vcgtq_f32(v42, v16);
      v21.i64[0] = 0xC0000000C0000000;
      v21.i64[1] = 0xC0000000C0000000;
      int8x16_t v50 = vandq_s8(v15, v17);
      int8x16_t v22 = vbicq_s8(v15, v17);
      int32x4_t v23 = (int32x4_t)vandq_s8(v22, v19);
      int8x16_t v24 = vbicq_s8(v22, v19);
      int8x16_t v48 = (int8x16_t)v23;
      int32x4_t v49 = (int32x4_t)vandq_s8(v24, v20);
      int32x4_t v25 = (int32x4_t)vbicq_s8(v24, v20);
      float32x4_t v26 = (float32x4_t)vbslq_s8((int8x16_t)v25, (int8x16_t)vsubq_f32(v43, v16), vbslq_s8((int8x16_t)v49, (int8x16_t)vaddq_f32(v16, v21), vbslq_s8((int8x16_t)v23, (int8x16_t)vsubq_f32(v18, v16), (int8x16_t)v16)));
      int8x16_t v46 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorn_s8((int8x8_t)vmovn_s32(v25), vorr_s8((int8x8_t)vmovn_s32(v49), (int8x8_t)vmovn_s32(v23)))), 0x1FuLL));
      int8x16_t v47 = (int8x16_t)v25;
      float32x4_t v58 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v26.f32), v41)), vmulq_f64(vcvt_hight_f64_f32(v26), v41)), v40);
      float v55 = cosf(v58.f32[1]);
      v27.f32[0] = cosf(v58.f32[0]);
      v27.f32[1] = v55;
      float32x4_t v56 = v27;
      float v28 = cosf(v58.f32[2]);
      float32x4_t v29 = v56;
      v29.f32[2] = v28;
      float32x4_t v57 = v29;
      float v30 = cosf(v58.f32[3]);
      float32x4_t v31 = v57;
      v31.f32[3] = v30;
      v32.i64[0] = 0x3F0000003F000000;
      v32.i64[1] = 0x3F0000003F000000;
      v33.i64[0] = 0xBF000000BF000000;
      v33.i64[1] = 0xBF000000BF000000;
      float32x4_t v34 = vmlaq_f32(v32, v33, v31);
      float32x4_t v35 = vmulq_f32(v34, v34);
      float32x4_t v36 = vsqrtq_f32((float32x4_t)vbslq_s8(v46, (int8x16_t)v35, (int8x16_t)vsubq_f32(v54, v35)));
      int16x4_t v37 = vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8(v47, vorrq_s8(v50, v48)), (int8x16_t)v49));
      if (v37.i8[0]) {
        *(v7 - 2) = v36.i32[0];
      }
      if (v37.i8[2]) {
        *(v7 - 1) = v36.i32[1];
      }
      if (v37.i8[4]) {
        *uint64_t v7 = v36.i32[2];
      }
      if (v37.i8[6]) {
        v7[1] = v36.i32[3];
      }
      uint64x2_t v5 = (uint64x2_t)vaddq_s64(v53, v39);
      float result = (uint64x2_t)vaddq_s64(v52, v39);
      v38.i64[0] = 0x400000004;
      v38.i64[1] = 0x400000004;
      int32x4_t v6 = vaddq_s32(v51, v38);
      v7 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

void std::vector<std::vector<float>>::assign(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  int32x4_t v6 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a2)
  {
    unint64_t v13 = (a1[1] - (uint64_t)v6) / 24;
    if (v13 >= a2) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = (a1[1] - (uint64_t)v6) / 24;
    }
    for (; v14; --v14)
    {
      if (v6 != (char *)a3) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v6, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      }
      v6 += 24;
    }
    if (a2 <= v13)
    {
      uint64_t v18 = a1[1];
      uint64_t v19 = *a1 + 24 * a2;
      if (v18 != v19)
      {
        uint64_t v20 = a1[1];
        do
        {
          int8x16_t v22 = *(void **)(v20 - 24);
          v20 -= 24;
          float32x4_t v21 = v22;
          if (v22)
          {
            *(void *)(v18 - 16) = v21;
            operator delete(v21);
          }
          uint64_t v18 = v20;
        }
        while (v20 != v19);
      }
      a1[1] = v19;
    }
    else
    {
      int8x16_t v15 = (void *)a1[1];
      float32x4_t v16 = &v15[3 * (a2 - v13)];
      uint64_t v17 = -24 * v13 + 24 * a2;
      do
      {
        *int8x16_t v15 = 0;
        v15[1] = 0;
        void v15[2] = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v15, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v15 += 3;
        v17 -= 24;
      }
      while (v17);
      a1[1] = (uint64_t)v16;
    }
  }
  else
  {
    std::vector<std::vector<int>>::__vdeallocate(a1);
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v7 <= a2) {
      unint64_t v7 = a2;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v8 = v7;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v8);
    unint64_t v9 = (void *)a1[1];
    uint64_t v10 = 3 * a2;
    uint64_t v11 = &v9[3 * a2];
    uint64_t v12 = 8 * v10;
    do
    {
      *unint64_t v9 = 0;
      v9[1] = 0;
      void v9[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v9 += 3;
      v12 -= 24;
    }
    while (v12);
    a1[1] = (uint64_t)v11;
  }
}

void sub_1B1B8A064(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x708], 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<int>::assign(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __u)
{
  uint64_t value = (uint64_t)this->__end_cap_.__value_;
  std::vector<int>::pointer begin = this->__begin_;
  if (__n <= (value - (uint64_t)begin) >> 2)
  {
    std::vector<int>::pointer end = this->__end_;
    std::vector<int>::size_type v14 = end - begin;
    if (v14 >= __n) {
      std::vector<int>::size_type v15 = __n;
    }
    else {
      std::vector<int>::size_type v15 = end - begin;
    }
    if (v15)
    {
      float32x4_t v16 = begin;
      do
      {
        *v16++ = *__u;
        --v15;
      }
      while (v15);
    }
    if (__n <= v14)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      uint64_t v17 = &end[__n - v14];
      std::vector<int>::size_type v18 = 4 * __n - 4 * v14;
      do
      {
        *end++ = *__u;
        v18 -= 4;
      }
      while (v18);
      this->__end_ = v17;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      uint64_t value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    std::vector<int>::size_type v8 = value >> 1;
    if (value >> 1 <= __n) {
      std::vector<int>::size_type v8 = __n;
    }
    if ((unint64_t)value >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    std::vector<int>::__vallocate[abi:ne180100](this, v9);
    std::vector<int>::pointer v10 = this->__end_;
    uint64_t v11 = &v10[__n];
    std::vector<int>::size_type v12 = 4 * __n;
    do
    {
      *v10++ = *__u;
      v12 -= 4;
    }
    while (v12);
    this->__end_ = v11;
  }
}

void quasar::NotchDetector2::computePsd(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 44);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(unsigned int *)(a1 + 40);
    unint64_t v7 = *a2;
    uint64_t v8 = **a2;
    do
    {
      if ((int)v6 < 1)
      {
        float v10 = 0.0;
      }
      else
      {
        uint64_t v9 = *(_DWORD *)(a1 + 32) + (int)v5;
        float v10 = 0.0;
        uint64_t v11 = v6;
        std::vector<int>::size_type v12 = v7;
        do
        {
          uint64_t v13 = *v12;
          v12 += 3;
          float v14 = (float)(*(float *)(v13 + 4 * v9) * *(float *)(v13 + 4 * v9))
              + (float)(*(float *)(v13 + 4 * v5) * *(float *)(v13 + 4 * v5));
          *(float *)(v13 + 4 * v5) = v14;
          float v15 = v14 + 1.0e-16;
          float v10 = v10 + (float)(log10f(v15) * 10.0);
          --v11;
        }
        while (v11);
      }
      *(float *)(v8 + 4 * v5++) = v10 / (float)(int)v6;
    }
    while (v5 != v4);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    float32x4_t v16 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.psd.txt");
    quasar::NotchDetector2::dumpVec1d((uint64_t)v16, (uint64_t)__p, *a2);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B1B8A2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::NotchDetector2::dumpVec1d(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v11[19] = *MEMORY[0x1E4F143B8];
  std::ofstream::basic_ofstream(&v9);
  uint64_t v5 = *a3;
  for (uint64_t i = a3[1]; v5 != i; v5 += 4)
  {
    uint64_t v6 = (void *)std::ostream::operator<<();
    char v8 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v8, 1);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v10[*(void *)(v9 - 24) - 8], *(_DWORD *)&v10[*(void *)(v9 - 24) + 24] | 4);
  }
  uint64_t v9 = *MEMORY[0x1E4FBA400];
  *(void *)&v10[*(void *)(v9 - 24) - 8] = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1B3EA7CF0](v10);
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](v11);
}

void sub_1B1B8A460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

BOOL quasar::NotchDetector2::notchDetected(quasar::NotchDetector2 *this, const float *a2, float a3, int a4, float *a5)
{
  float v6 = ceilf(*((float *)this + 12) * a3) + -1.0;
  if (v6 < 0.0) {
    float v6 = 0.0;
  }
  int v7 = (int)v6;
  int v8 = *((_DWORD *)this + 10);
  if (*((_DWORD *)this + 8) + (v8 - 1) * *((_DWORD *)this + 9) + (int)v6 <= a4)
  {
    if (v8 >= 1)
    {
      uint64_t v12 = 0;
      do
      {
        memcpy(*(void **)(*((void *)this + 9) + 24 * v12), &a2[v7 + *((_DWORD *)this + 9) * (int)v12], 4 * *((int *)this + 8));
        uint64_t v13 = *((int *)this + 8);
        uint64_t v14 = *((void *)this + 9);
        if ((int)v13 <= 0)
        {
          uint64_t v17 = *(float **)(v14 + 24 * v12);
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v16 = *((void *)this + 12);
          uint64_t v17 = *(float **)(v14 + 24 * v12);
          uint64_t v13 = *((unsigned int *)this + 8);
          do
          {
            v17[v15] = (float)(*(float *)(v16 + v15 * 4) * v17[v15]) * 0.000030518;
            v17[v13 + v15++] = 0.0;
          }
          while (v13 != v15);
        }
        kaldi::SplitRadixComplexFft<float>::Compute(*((void *)this + 7), v17, &v17[v13], *((unsigned __int8 *)this + 64));
        ++v12;
      }
      while (v12 < *((int *)this + 10));
    }
    if (*((unsigned char *)this + 224))
    {
      char v18 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.fft.txt");
      quasar::NotchDetector2::dumpVec2d((uint64_t)v18, (uint64_t)__p, (void *)this + 9);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    quasar::NotchDetector2::computePsd((uint64_t)this, (uint64_t **)this + 9);
    quasar::NotchDetector2::computeFeatures(this);
    uint64_t v19 = (float *)*((void *)this + 18);
    uint64_t v20 = *((void *)this + 19) - (void)v19;
    if (v20)
    {
      unint64_t v21 = v20 >> 2;
      int8x16_t v22 = (float *)*((void *)this + 15);
      if (v21 <= 1) {
        unint64_t v21 = 1;
      }
      float v23 = 0.0;
      do
      {
        float v24 = *v19++;
        float v25 = v24;
        float v26 = *v22++;
        float v23 = v23 + (float)(v25 * v26);
        --v21;
      }
      while (v21);
    }
    else
    {
      float v23 = 0.0;
    }
    *a5 = v23;
    return v23 > *((float *)this + 42);
  }
  else
  {
    BOOL result = 0;
    *a5 = -10000.0;
  }
  return result;
}

void sub_1B1B8A668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::NotchDetector2::dumpVec2d(uint64_t a1, uint64_t a2, void *a3)
{
  v14[19] = *MEMORY[0x1E4F143B8];
  std::ofstream::basic_ofstream(&v12);
  if ((int)(-1431655765 * ((uint64_t)(a3[1] - *a3) >> 3)) >= 1)
  {
    uint64_t v4 = 0;
    unint64_t v5 = *(void *)(*a3 + 8) - *(void *)*a3;
    unint64_t v6 = v5 >> 2;
    uint64_t v7 = -1431655765 * ((uint64_t)(a3[1] - *a3) >> 3);
    uint64_t v8 = v5 & 0x3FFFFFFFCLL;
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v9 = 0;
        do
        {
          std::ostream::operator<<();
          char v11 = 10;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)&v11, 1);
          v9 += 4;
        }
        while (v8 != v9);
      }
      ++v4;
    }
    while (v4 != v7);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v13[*(void *)(v12 - 24) - 8], *(_DWORD *)&v13[*(void *)(v12 - 24) + 24] | 4);
  }
  uint64_t v12 = *MEMORY[0x1E4FBA400];
  *(void *)&v13[*(void *)(v12 - 24) - 8] = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1B3EA7CF0](v13);
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](v14);
}

void sub_1B1B8A884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void quasar::NotchDetector2::computeFeatures(quasar::NotchDetector2 *this)
{
  uint64_t v3 = (char *)this + 144;
  uint64_t v2 = *((void *)this + 18);
  uint64_t v4 = *(void *)this;
  unint64_t v5 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2;
  unint64_t v6 = ((*((void *)this + 19) - v2) >> 2) / v5;
  if (*((void *)this + 1) == *(void *)this)
  {
    if ((int)v6 != (uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 2) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v7 = 0;
  uint64_t v8 = (_DWORD *)*((void *)this + 22);
  uint64_t v9 = (_DWORD *)*((void *)this + 23);
  unint64_t v10 = v9 - v8;
  if (v10 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = v9 - v8;
  }
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  do
  {
    float v12 = *(float *)(v4 + 4 * v7);
    float v13 = *((float *)this + 7);
    *uint64_t v8 = (int)(float)(v12 - v13);
    v8[1] = (int)v12;
    v8[2] = (int)(float)(v12 + v13);
    if (v9 != v8)
    {
      uint64_t v14 = 0;
      unint64_t v15 = v10 * v7;
      uint64_t v16 = *((void *)this + 25);
      do
      {
        *(_DWORD *)(v16 + 4 * (v15 + v1snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = 0;
        float v17 = (float)(int)v8[v14];
        float v18 = *((float *)this + 6);
        int v19 = (int)(float)(v17 - v18);
        float v20 = v18 + v17;
        if ((int)v20 >= v19)
        {
          int v21 = (int)v20 - v19 + 1;
          float v22 = (float)v21;
          float v23 = (float *)(**((void **)this + 9) + 4 * v19);
          float v24 = 0.0;
          do
          {
            float v25 = *v23++;
            float v24 = v24 + (float)(v25 / v22);
            *(float *)(v16 + 4 * (v15 + v1snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = v24;
            --v21;
          }
          while (v21);
        }
        ++v14;
      }
      while (v14 != v11);
    }
    ++v7;
  }
  while (v7 != v5);
  if ((int)v6 == v10)
  {
LABEL_19:
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v3, *((char **)this + 25), *((void *)this + 26), (uint64_t)(*((void *)this + 26) - *((void *)this + 25)) >> 2);
    goto LABEL_20;
  }
  uint64_t v26 = 0;
  float32x4_t v27 = (float *)(*((void *)this + 25) + 4);
  uint64_t v28 = 4 * v10;
  do
  {
    float32x4_t v29 = (float *)(v2 + 4 * v26 * (int)v6);
    float *v29 = *(v27 - 1) - *v27;
    v29[1] = v27[1] - *v27;
    ++v26;
    float32x4_t v27 = (float *)((char *)v27 + v28);
    --v5;
  }
  while (v5);
LABEL_20:
  if (*((unsigned char *)this + 224))
  {
    float v30 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.feats.txt");
    quasar::NotchDetector2::dumpVec1d((uint64_t)v30, (uint64_t)__p, (uint64_t *)v3);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B1B8AA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<kaldi::SplitRadixComplexFft<float>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft();
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t quasar::OnlineLASLmRescoringBeamSearchDecoder::OnlineLASLmRescoringBeamSearchDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A58A70;
  *(_OWORD *)(v3 + 44_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(void *)(v3 + 512) = 0;
  *(_WORD *)(v3 + 520) = 257;
  *(void *)(v3 + 5++*(_DWORD *)(result + 24) = 0x8000001F4;
  *(void *)(v3 + 532) = 0;
  *(_DWORD *)(v3 + 540) = 32;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 544), "");
  *(unsigned char *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 56_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(a1 + 6++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 68_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(unsigned char *)(a1 + 704) = 1;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 720) = 100000000;
  *(_OWORD *)(a1 + 72_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_DWORD *)(a1 + 80_Block_object_dispose(&STACK[0x708], 8) = 1065353216;
  *(_OWORD *)(a1 + 816) = 0u;
  uint64_t v4 = (char *)operator new(0xA8uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F0A60678;
  *((void *)v4 + 19) = 0;
  *((void *)v4 + 20) = 0;
  *((void *)v4 + 1_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 8_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + ++*(_DWORD *)(result + 24) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(void *)(a1 + 832) = v4 + 24;
  *(void *)(a1 + 840) = v4;
  *(unsigned char *)(a1 + 57) = 0;
  *(_OWORD *)(a1 + 92_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 84_Block_object_dispose(&STACK[0x708], 8) = 0u;
  return a1;
}

void sub_1B1B8AC4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)(v2 + 824), 0);
  uint64_t v7 = *(void *)(v2 + 816);
  *(void *)(v2 + 816) = 0;
  if (v7) {
    quasar::OnlineLASLmRescoringBeamSearchDecoder::OnlineLASLmRescoringBeamSearchDecoder(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v2 + 800);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 784);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  unint64_t v10 = *(std::__shared_weak_count **)(v2 + 768);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v2 + 752);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  float v12 = *(std::__shared_weak_count **)(v2 + 736);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  float v13 = *(std::__shared_weak_count **)(v2 + 696);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(v2 + 680);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (*(char *)(v2 + 671) < 0) {
    operator delete(*(void **)(v2 + 648));
  }
  if (*(char *)(v2 + 647) < 0) {
    operator delete(*v5);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 591) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 567) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 519) < 0) {
    operator delete(*(void **)(v2 + 496));
  }
  if (*(char *)(v2 + 495) < 0) {
    operator delete(*(void **)(v2 + 472));
  }
  if (*(char *)(v2 + 471) < 0) {
    operator delete(*(void **)(v2 + 448));
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v2);
  _Unwind_Resume(a1);
}

void quasar::OnlineLASLmRescoringBeamSearchDecoder::~OnlineLASLmRescoringBeamSearchDecoder(quasar::OnlineLASLmRescoringBeamSearchDecoder *this)
{
  *(void *)this = &unk_1F0A58A70;
  if (*((char *)this + 959) < 0) {
    operator delete(*((void **)this + 117));
  }
  if (*((char *)this + 935) < 0) {
    operator delete(*((void **)this + 114));
  }
  if (*((char *)this + 911) < 0) {
    operator delete(*((void **)this + 111));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 110);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 871) < 0) {
    operator delete(*((void **)this + 106));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 105);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)this + 103, 0);
  uint64_t v4 = *((void *)this + 102);
  *((void *)this + 102) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 96);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 94);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 92);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 87);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 85);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (*((char *)this + 671) < 0) {
    operator delete(*((void **)this + 81));
  }
  if (*((char *)this + 647) < 0) {
    operator delete(*((void **)this + 78));
  }
  float v12 = (void **)((char *)this + 592);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  if (*((char *)this + 591) < 0) {
    operator delete(*((void **)this + 71));
  }
  if (*((char *)this + 567) < 0) {
    operator delete(*((void **)this + 68));
  }
  if (*((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  quasar::Decoder::~Decoder(this);
}

{
  uint64_t vars8;

  quasar::OnlineLASLmRescoringBeamSearchDecoder::~OnlineLASLmRescoringBeamSearchDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineLASLmRescoringBeamSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "online-las-lm-rescoring-beam-search");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 208, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  kaldi::BeamSearchDecoderOptions::Register((uint64_t)(this + 65), (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[104], a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS encoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 59), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS decoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 62), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "batch size");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 540, (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "substring-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Substring delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 68), (uint64_t)v4, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Token delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 71), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiters");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of token delimiters");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 74), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "split-tokens-by-character");
  std::string::basic_string[abi:ne180100]<0>(v4, "split tokens by character");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 77), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lexicon-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Lexicon FST (to be used for re-tokenization)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 78), (uint64_t)v4, 1, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "subword-sym-table-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Subword symbol table");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 106), (uint64_t)v4, 1, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lm-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LM FST (to be used for re-tokenization)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 81), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lm-scale");
  std::string::basic_string[abi:ne180100]<0>(v4, "Scaling factor to use for LM weights");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 101), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "subword-oov-symbol");
  std::string::basic_string[abi:ne180100]<0>(v4, "The subword OOV token symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 111), (uint64_t)v4, 1, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "word-oov-symbol");
  std::string::basic_string[abi:ne180100]<0>(v4, "The word-level OOV token symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 114), (uint64_t)v4, 1, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "word-boundary-symbol");
  std::string::basic_string[abi:ne180100]<0>(v4, "The word boundary subword token symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 117), (uint64_t)v4, 1, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mapping-cache-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Cache size to use for lazy FST mapping operations");
  quasar::SystemConfig::Register<long long>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 90), (uint64_t)v4, 0, 208, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1B8B69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::BeamSearchDecoderOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "remove-eos");
  std::string::basic_string[abi:ne180100]<0>(__p, "remove EOS labels from output");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "remove-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "remove silence labels from output");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-steps");
  std::string::basic_string[abi:ne180100]<0>(__p, "maximum number of decoder steps");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "beam width (must match the model)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "length-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "length penalty");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "coverage-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "coverage penalty");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1B8BA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<long long>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  quasar::SystemConfig::Register(a1, a2, a3);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  int v21 = __p;
  unint64_t v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v15[7] = v20;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  int v21 = __p;
  uint64_t v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5) {
      return;
    }
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  float v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (long long **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1B8BC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLASLmRescoringBeamSearchDecoder::finishInit(quasar::OnlineLASLmRescoringBeamSearchDecoder *this)
{
  if (*((char *)this + 471) < 0)
  {
    if (*((void *)this + 57)) {
LABEL_3:
    }
      operator new();
  }
  else if (*((unsigned char *)this + 471))
  {
    goto LABEL_3;
  }
  if (*((char *)this + 495) < 0)
  {
    if (!*((void *)this + 60)) {
      goto LABEL_13;
    }
  }
  else if (!*((unsigned char *)this + 495))
  {
LABEL_13:
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v4 = 0u;
    long long v5 = 0u;
    long long v2 = 0u;
    long long v3 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (*((char *)this + 519) < 0)
  {
    if (!*((void *)this + 63)) {
      goto LABEL_13;
    }
  }
  else if (!*((unsigned char *)this + 519))
  {
    goto LABEL_13;
  }
  operator new();
}

void sub_1B1B8C524(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t fst::SymbolTable::ReadText(uint64_t a1)
{
  v14[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v12);
  if (!*(_DWORD *)&v13[*(void *)(v12[0] - 24) + 16]) {
    fst::SymbolTable::ReadText();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  long long v2 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
  long long v3 = (void *)fst::cerr(v2);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"SymbolTable::ReadText: Can't open file ", 39);
  int v5 = *(char *)(a1 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)a1;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  v12[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v12 + *(void *)(v12[0] - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v13);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v14);
  return 0;
}

void sub_1B1B8C704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
}

float quasar::OnlineLASLmRescoringBeamSearchDecoder::preProcessPath(uint64_t a1, void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a2 + 24))(a2);
  if (v4 != -1)
  {
    uint64_t v6 = v4;
    uint64_t v7 = 0xFFFFFFFFLL;
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*a2 + 32))(&v50, a2, v6);
      LODWORD(__p[0]) = HIDWORD(v50);
      LODWORD(v33) = v50;
      LODWORD(v30) = 2139095040;
      LODWORD(v++*(_DWORD *)(result + 24) = 2139095040;
      float result = *(float *)&v50;
      if (*(float *)&v50 != INFINITY) {
        break;
      }
      float result = *(float *)__p;
      if (*(float *)__p != *(float *)&v24) {
        break;
      }
      if ((*(uint64_t (**)(void *, uint64_t, float))(*a2 + 40))(a2, v6, *(float *)__p) != 1
        && quasar::gLogLevel >= 1)
      {
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Invalid path FST. State ", 24);
        long long v9 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" has ", 5);
        (*(void (**)(void *, uint64_t))(*a2 + 40))(a2, v6);
        char v10 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" arcs", 5);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v33);
      }
      *(void *)&long long v33 = &unk_1F0A3E8A0;
      *((void *)&v34 + 1) = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)a2);
      uint64_t v11 = a2[1];
      *((void *)&v33 + 1) = *(void *)(*(void *)(v11 + 64) + 8 * (int)v6);
      *(void *)&long long v34 = v11 + 8;
      uint64_t v12 = *(void *)(*((void *)&v33 + 1) + 24) + 20 * *((void *)&v34 + 1);
      uint64_t v30 = *(void *)v12;
      float v13 = *(float *)(v12 + 8);
      float v14 = *(float *)(v12 + 12);
      unsigned int v32 = *(_DWORD *)(v12 + 16);
      LODWORD(v31) = 0;
      *((float *)&v31 + 1) = v13 + v14;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::SetValue((uint64_t)&v33, (uint64_t)&v30);
      LODWORD(__p[0]) = *(_DWORD *)(a1 + 976);
      HIDWORD(__p[0]) = __p[0];
      __p[1] = 0;
      int v28 = v6;
      (*(void (**)(void *, uint64_t, void **))(*a2 + 208))(a2, v6, __p);
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 872) + 88))(__p);
      uint64_t v15 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)(a1 + 592), *(void *)(a1 + 600), (unsigned __int8 **)__p);
      uint64_t v16 = *(void *)(a1 + 600);
      (*(void (**)(unint64_t *__return_ptr, void *, void))(*a2 + 32))(&v24, a2, v32);
      float v53 = *((float *)&v24 + 1);
      int v54 = v24;
      int v52 = 2139095040;
      float v51 = INFINITY;
      BOOL v17 = *(float *)&v24 != INFINITY || v53 != v51;
      BOOL v18 = !quasar::isAscii((uint64_t *)__p);
      if (v15 != v16) {
        BOOL v18 = 1;
      }
      if (v18 || v17)
      {
        if (v7 != -1)
        {
          unint64_t v24 = __PAIR64__(*(void *)(a1 + 960), v30);
          uint64_t v25 = v31;
          int v26 = v32;
          (*(void (**)(void *, uint64_t, unint64_t *))(*a2 + 208))(a2, v7, &v24);
          uint64_t v7 = 0xFFFFFFFFLL;
        }
      }
      else
      {
        isAsciuint64_t i = quasar::isAscii((uint64_t *)__p);
        if (v30) {
          BOOL v20 = isAscii;
        }
        else {
          BOOL v20 = 0;
        }
        if (v20)
        {
          uint64_t v21 = (*(uint64_t (**)(void *))(*a2 + 200))(a2);
          uint64_t v22 = v21;
          if (v7 == -1) {
            uint64_t v23 = v6;
          }
          else {
            uint64_t v23 = v7;
          }
          unint64_t v24 = v30;
          uint64_t v25 = v31;
          int v26 = v21;
          (*(void (**)(void *, uint64_t, unint64_t *))(*a2 + 208))(a2, v23, &v24);
          uint64_t v7 = v22;
        }
      }
      uint64_t v6 = v32;
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return result;
}

void sub_1B1B8CBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::operator!=<float>(float *a1, float *a2)
{
  return *a1 != *a2 || a1[1] != a2[1];
}

void quasar::OnlineLASLmRescoringBeamSearchDecoder::composeNbestLatticePathsWithFst(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a3 + 224))(a3);
  uint64_t v7 = 0;
  long long v8 = 0;
  uint64_t v9 = 0;
  fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2, (uint64_t *)&v7);
  int v5 = v7;
  if (v7 != v8)
  {
    quasar::OnlineLASLmRescoringBeamSearchDecoder::preProcessPath(a1, v7);
    fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)v5);
    fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase((uint64_t)v5, *(void *)(a1 + 760));
  }
  uint64_t v6 = (void **)&v7;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_1B1B8CE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20)
{
  a18 = (void **)&a20;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

uint64_t fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    uint64_t v6 = v4 - 16;
    uint64_t v7 = (void (***)(void))(v4 - 16);
    long long v8 = (void (***)(void))(v4 - 16);
    do
    {
      uint64_t v9 = *v8;
      v8 -= 2;
      (*v9)(v7);
      v6 -= 16;
      BOOL v10 = v7 == (void (***)(void))v5;
      uint64_t v7 = v8;
    }
    while (!v10);
  }
  a2[1] = v5;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result == -1) {
    return result;
  }
  uint64_t v12 = result;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, result);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(v39, a1, v12);
  LODWORD(v32[0]) = HIDWORD(v39[0]);
  LODWORD(v34) = v39[0];
  int v45 = 2139095040;
  float v44 = INFINITY;
  if (*(float *)v39 == INFINITY)
  {
    float v14 = v44;
    if (*(float *)v32 == v44) {
      unint64_t v15 = v13;
    }
    else {
      unint64_t v15 = v13 + 1;
    }
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::reserve(a2, v15);
    if (*(float *)v32 == v14) {
      goto LABEL_13;
    }
  }
  else
  {
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::reserve(a2, v13 + 1);
  }
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
  uint64_t v16 = (*(uint64_t (**)(void))(*(void *)(a2[1] - 16) + 200))();
  uint64_t v17 = a2[1];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v42, a1, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)(v17 - 16) + 184))(v17 - 16, v16, &v42);
LABEL_13:
  unint64_t v41 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v12, v39);
  while (1)
  {
    uint64_t result = v39[0];
    if (v39[0]) {
      break;
    }
    if (v41 >= v39[2]) {
      goto LABEL_40;
    }
LABEL_18:
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
    uint64_t v18 = a2[1];
    if (v39[0]) {
      uint64_t v19 = (*(uint64_t (**)(void))(*(void *)v39[0] + 32))(v39[0]);
    }
    else {
      uint64_t v19 = v39[1] + 20 * v41;
    }
    uint64_t v21 = *(void *)(v18 - 16);
    uint64_t v20 = v18 - 16;
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(v21 + 200))(v20);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 176))(v20, v22);
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 200))(v20);
    uint64_t v24 = *(void *)(v19 + 8);
    uint64_t v34 = *(void *)v19;
    uint64_t v35 = v24;
    int v36 = v23;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v20 + 208))(v20, v22, &v34);
    uint64_t v25 = *(unsigned int *)(v19 + 16);
    while ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v25))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v34, a1, v25);
      int v45 = HIDWORD(v34);
      LODWORD(v32[0]) = v34;
      float v44 = INFINITY;
      int v43 = 2139095040;
      v26.n128_u32[0] = v34;
      if (*(float *)&v34 == INFINITY) {
        v26.n128_u32[0] = v43;
      }
      uint64_t v38 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, __n128))(*(void *)a1 + 136))(a1, v25, &v34, v26);
      if (v34) {
        uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 32))(v34);
      }
      else {
        uint64_t v27 = v35 + 20 * v38;
      }
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 200))(v20);
      uint64_t v29 = *(void *)(v27 + 8);
      v32[0] = *(void *)v27;
      v32[1] = v29;
      int v33 = v28;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v20 + 208))(v20, v23, v32);
      uint64_t v25 = *(unsigned int *)(v27 + 16);
      if (v34)
      {
        (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
      }
      else if (v37)
      {
        --*v37;
      }
      uint64_t v23 = v28;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v34, a1, v25);
    int v45 = HIDWORD(v34);
    LODWORD(v32[0]) = v34;
    float v44 = INFINITY;
    int v43 = 2139095040;
    v30.n128_u32[0] = v34;
    if (*(float *)&v34 == INFINITY) {
      v30.n128_u32[0] = v43;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))(*(void *)a1 + 32))(&v31, a1, v25, v30);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v20 + 184))(v20, v23, &v31);
    if (v39[0]) {
      (*(void (**)(void))(*(void *)v39[0] + 40))(v39[0]);
    }
    else {
      ++v41;
    }
  }
  if (!(*(unsigned int (**)(void))(*(void *)v39[0] + 24))(v39[0])) {
    goto LABEL_18;
  }
  uint64_t result = v39[0];
  if (v39[0]) {
    return (*(uint64_t (**)(void))(*(void *)v39[0] + 8))(v39[0]);
  }
LABEL_40:
  if (v40) {
    --*v40;
  }
  return result;
}

void sub_1B1B8D5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_DWORD *a22)
{
  if (a19)
  {
    (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  }
  else if (a22)
  {
    --*a22;
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1)
{
  v1[0] = a1;
  v1[1] = (uint64_t)&v4;
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1B8D700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)v1, a1);
}

void sub_1B1B8D7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  uint64_t v9 = *(void **)(v7 - 104);
  if (v9)
  {
    *(void *)(v7 - 96) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineLASLmRescoringBeamSearchDecoder::runImpl(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*a3 + 472));
  uint64_t v6 = *(uint64_t **)(*a3 + 472);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 840);
  uint64_t v34 = *(void *)(a1 + 832);
  uint64_t v35 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SymbolTableList::addSymbolTable(v6, &v34, 0, -1);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  kaldi::quasar::OnlineLASDecodable::OnlineLASDecodable((uint64_t)v33, *(void *)(a1 + 816), *a2, *(_DWORD *)(a1 + 540));
  memset(&v32, 0, sizeof(v32));
  kaldi::BeamSearchDecoder::InitDecoding(*(kaldi::BeamSearchDecoder **)(a1 + 824));
  while (1)
  {
    BOOL v8 = kaldi::BeamSearchDecoder::Finished(*(kaldi::BeamSearchDecoder **)(a1 + 824));
    uint64_t v9 = *(kaldi::BeamSearchDecoder **)(a1 + 824);
    if (v8) {
      break;
    }
    if ((int)kaldi::BeamSearchDecoder::AdvanceDecoding(v9, (uint64_t)v33, 1u) >= 1) {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
    }
  }
  kaldi::BeamSearchDecoder::FinalizeDecoding(v9);
  (*(void (**)(void))(**(void **)(a1 + 816) + 72))(*(void *)(a1 + 816));
  signed int v10 = kaldi::quasar::OnlineLASDecodable::FrameOffset((kaldi::quasar::OnlineLASDecodable *)v33);
  for (i = *a3; ; signed int v10 = *(_DWORD *)(i + 576) + 1)
  {
    *(_DWORD *)(i + 576) = v10;
    BOOL IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)*a2, v10, 1);
    uint64_t i = *a3;
    if (!IsValidFrame) {
      break;
    }
  }
  *(_WORD *)(i + 580) = 257;
  BOOL v13 = kaldi::BeamSearchDecoder::ReachedFinal(*(kaldi::BeamSearchDecoder **)(a1 + 824), -1);
  char v14 = quasar::gLogLevel < 4 || v13;
  if ((v14 & 1) == 0)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Decoder did not reach end-state, outputting partial traceback.", 62);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
}

void sub_1B1B8E664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a41);
  if (*(char *)(v42 - 233) < 0) {
    operator delete(*(void **)(v42 - 256));
  }
  if (v41) {
    operator delete(v41);
  }
  kaldi::quasar::OnlineLASDecodable::~OnlineLASDecodable((kaldi::quasar::OnlineLASDecodable *)(v42 - 232));
  _Unwind_Resume(a1);
}

__n128 std::accumulate[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>@<Q0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1 != a2)
  {
    uint64_t v7 = a1;
    do
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a3, v7, (uint64_t)&v9);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v9;
      *(void *)(a3 + 16) = v10;
      v7 += 3;
    }
    while (v7 != a2);
  }
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(void *)(a4 + 16) = *(void *)(a3 + 16);
  *(void *)(a3 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  return result;
}

void quasar::formatWordResults(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X4>, unsigned __int8 *a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t *a8@<X8>)
{
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::vector<std::string>>::vector(&v92, 1uLL, (long long **)&__p);
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
  size_t v89 = 0;
  unint64_t v90 = 0;
  unint64_t v91 = 0;
  if (a2[1] == *a2) {
    goto LABEL_97;
  }
  uint64_t v76 = a8;
  unint64_t v13 = 0;
  do
  {
    unint64_t v14 = v13 >> 6;
    if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*a5, a5[1], (unsigned __int8 **)(*a1 + 24 * v13)) != a5[1])
    {
      uint64_t v15 = 1 << v13;
      goto LABEL_27;
    }
    uint64_t v15 = 1 << v13;
    if ((*(void *)(*a3 + 8 * v14) & (1 << v13)) == 0)
    {
      uint64_t v16 = *a1 + 24 * v13;
      uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) == 0) {
        uint64_t v18 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        uint64_t v18 = *(void *)(v16 + 8);
      }
      uint64_t v19 = a6[23];
      int v20 = (char)v19;
      if ((v19 & 0x80u) != 0) {
        uint64_t v19 = *((void *)a6 + 1);
      }
      if (v18 == v19)
      {
        if (v20 >= 0) {
          long long v21 = a6;
        }
        else {
          long long v21 = *(unsigned __int8 **)a6;
        }
        if ((v17 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v16, v21, *(void *)(v16 + 8)))
          {
LABEL_26:
            memset(&__p, 0, sizeof(__p));
            std::vector<std::vector<std::string>>::push_back[abi:ne180100](&v92, (uint64_t)&__p);
            v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
            goto LABEL_27;
          }
        }
        else
        {
          if (!*(unsigned char *)(v16 + 23)) {
            goto LABEL_26;
          }
          long long v22 = (unsigned __int8 *)(*a1 + 24 * v13);
          while (*v22 == *v21)
          {
            ++v22;
            ++v21;
            if (!--v17) {
              goto LABEL_26;
            }
          }
        }
      }
      uint64_t v23 = v93;
      long long v24 = (uint64_t *)(v93 - 24);
      unint64_t v25 = *(void *)(v93 - 16);
      if (v25 >= *(void *)(v93 - 8))
      {
        uint64_t v26 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v24, (long long *)v16);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v24, (long long *)v16);
        uint64_t v26 = v25 + 24;
      }
      *(void *)(v23 - 16) = v26;
    }
LABEL_27:
    if ((*(void *)(*a4 + 8 * v14) & v15) == 0)
    {
      uint64_t v27 = *a2 + 24 * v13;
      long long v28 = v90;
      if ((unint64_t)v90 >= v91)
      {
        long long v30 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v89, (long long *)v27);
      }
      else
      {
        if (*(char *)(v27 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v90, *(const std::string::value_type **)v27, *(void *)(v27 + 8));
        }
        else
        {
          long long v29 = *(_OWORD *)v27;
          v90->__r_.__value_.__r.__words[2] = *(void *)(v27 + 16);
          *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
        }
        long long v30 = v28 + 1;
      }
      unint64_t v90 = v30;
    }
    ++v13;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v13);
  long long v31 = v89;
  if (v90 != v89)
  {
    unint64_t v32 = 0;
    uint64_t v75 = (uint64_t)(v76 + 2);
    std::string::size_type v73 = *MEMORY[0x1E4FBA408];
    std::string::size_type v70 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    std::string::size_type v71 = *(void *)(MEMORY[0x1E4FBA408] + 64);
    do
    {
      int v33 = &v31[v32];
      uint64_t v34 = HIBYTE(v33->__r_.__value_.__r.__words[2]);
      if ((v34 & 0x80u) == 0) {
        std::string::size_type size = HIBYTE(v33->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v33->__r_.__value_.__l.__size_;
      }
      uint64_t v36 = a7[23];
      int v37 = (char)v36;
      if ((v36 & 0x80u) != 0) {
        uint64_t v36 = *((void *)a7 + 1);
      }
      if (size != v36) {
        goto LABEL_54;
      }
      if (v37 >= 0) {
        uint64_t v38 = a7;
      }
      else {
        uint64_t v38 = *(unsigned __int8 **)a7;
      }
      if ((v34 & 0x80) != 0)
      {
        if (memcmp(v33->__r_.__value_.__l.__data_, v38, v33->__r_.__value_.__l.__size_)) {
          goto LABEL_54;
        }
      }
      else if (*((unsigned char *)&v33->__r_.__value_.__s + 23))
      {
        long long v39 = v33;
        while (v39->__r_.__value_.__s.__data_[0] == *v38)
        {
          long long v39 = (std::string *)((char *)v39 + 1);
          ++v38;
          if (!--v34) {
            goto LABEL_66;
          }
        }
LABEL_54:
        std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string&,std::vector<std::string>&,0>(&__p, (long long *)v33, (long long **)(v92 + 24 * v32));
        unint64_t v40 = v76[1];
        unint64_t v41 = v76[2];
        if (v40 >= v41)
        {
          unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v76) >> 4);
          unint64_t v45 = v44 + 1;
          if (v44 + 1 > 0x555555555555555) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *v76) >> 4);
          if (2 * v46 > v45) {
            unint64_t v45 = 2 * v46;
          }
          if (v46 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v47 = 0x555555555555555;
          }
          else {
            unint64_t v47 = v45;
          }
          *((void *)&v81 + 1) = v76 + 2;
          long long v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v75, v47);
          std::string::size_type v49 = (std::string::size_type)&v48[48 * v44];
          v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
          v80.__r_.__value_.__l.__size_ = v49;
          *(void *)&long long v81 = &v48[48 * v50];
          long long v51 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v49 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v49 = v51;
          memset(&__p, 0, sizeof(__p));
          *(void *)(v49 + ++*(_DWORD *)(result + 24) = 0;
          *(void *)(v49 + 32) = 0;
          *(void *)(v49 + 40) = 0;
          *(_OWORD *)(v49 + ++*(_DWORD *)(result + 24) = v84;
          *(void *)(v49 + 40) = v85;
          long long v84 = 0uLL;
          uint64_t v85 = 0;
          v80.__r_.__value_.__r.__words[2] = v49 + 48;
          std::vector<std::pair<std::string,std::vector<std::string>>>::__swap_out_circular_buffer(v76, &v80);
          uint64_t v43 = v76[1];
          std::__split_buffer<std::pair<std::string,std::vector<std::string>>>::~__split_buffer((void **)&v80.__r_.__value_.__l.__data_);
        }
        else
        {
          long long v42 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v40 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(void *)(v40 + ++*(_DWORD *)(result + 24) = 0;
          *(_OWORD *)unint64_t v40 = v42;
          memset(&__p, 0, sizeof(__p));
          *(void *)(v40 + 32) = 0;
          *(void *)(v40 + 40) = 0;
          *(_OWORD *)(v40 + ++*(_DWORD *)(result + 24) = v84;
          *(void *)(v40 + 40) = v85;
          long long v84 = 0uLL;
          uint64_t v85 = 0;
          uint64_t v43 = v40 + 48;
        }
        v76[1] = v43;
        v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_96;
      }
LABEL_66:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      int v52 = (long long **)(v92 + 24 * v32);
      float v53 = *v52;
      int v54 = v52[1];
      while (v53 != v54)
      {
        if (*((char *)v53 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)v53, *((void *)v53 + 1));
        }
        else
        {
          long long v55 = *v53;
          v80.__r_.__value_.__r.__words[2] = *((void *)v53 + 2);
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v55;
        }
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float32x4_t v56 = &v80;
        }
        else {
          float32x4_t v56 = (std::string *)v80.__r_.__value_.__r.__words[0];
        }
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v57 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v57 = v80.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)v56, v57);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        float v53 = (long long *)((char *)v53 + 24);
      }
      std::stringbuf::str();
      std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string,std::vector<std::string>&,0>((uint64_t)&v80, &v78, (long long **)(v92 + 24 * v32));
      unint64_t v58 = v76[1];
      unint64_t v59 = v76[2];
      if (v58 >= v59)
      {
        unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *v76) >> 4);
        unint64_t v63 = v62 + 1;
        if (v62 + 1 > 0x555555555555555) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59 - *v76) >> 4);
        if (2 * v64 > v63) {
          unint64_t v63 = 2 * v64;
        }
        if (v64 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v65 = 0x555555555555555;
        }
        else {
          unint64_t v65 = v63;
        }
        v94[4] = v76 + 2;
        uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v75, v65);
        uint64_t v67 = &v66[48 * v62];
        v94[0] = v66;
        v94[1] = v67;
        v94[3] = &v66[48 * v68];
        long long v69 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
        *((void *)v67 + 2) = *((void *)&v80.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v67 = v69;
        memset(&v80, 0, sizeof(v80));
        *((void *)v67 + 3) = 0;
        *((void *)v67 + 4) = 0;
        *((void *)v67 + 5) = 0;
        *(_OWORD *)(v67 + ++*(_DWORD *)(result + 24) = v81;
        *((void *)v67 + 5) = v82;
        long long v81 = 0uLL;
        uint64_t v82 = 0;
        v94[2] = v67 + 48;
        std::vector<std::pair<std::string,std::vector<std::string>>>::__swap_out_circular_buffer(v76, v94);
        uint64_t v61 = v76[1];
        std::__split_buffer<std::pair<std::string,std::vector<std::string>>>::~__split_buffer(v94);
      }
      else
      {
        long long v60 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
        *(void *)(v58 + 16) = *((void *)&v80.__r_.__value_.__l + 2);
        *(void *)(v58 + ++*(_DWORD *)(result + 24) = 0;
        *(_OWORD *)unint64_t v58 = v60;
        memset(&v80, 0, sizeof(v80));
        *(void *)(v58 + 32) = 0;
        *(void *)(v58 + 40) = 0;
        *(_OWORD *)(v58 + ++*(_DWORD *)(result + 24) = v81;
        *(void *)(v58 + 40) = v82;
        long long v81 = 0uLL;
        uint64_t v82 = 0;
        uint64_t v61 = v58 + 48;
      }
      v76[1] = v61;
      v94[0] = &v81;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if (v79 < 0) {
        operator delete((void *)v78);
      }
      __p.__r_.__value_.__r.__words[0] = v73;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v73 - 2snprintf(ctsBuffer, 0x64uLL, "%lu", *((void *)this + 4)) = v71;
      __p.__r_.__value_.__r.__words[2] = v70;
      *(void *)&long long v84 = MEMORY[0x1E4FBA470] + 16;
      if (v87 < 0) {
        operator delete(v86);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1B3EA8520](&v88);
LABEL_96:
      ++v32;
      long long v31 = v89;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v90 - (char *)v89) >> 3) > v32);
  }
LABEL_97:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B1B8F194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  a22 = &a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a32 = v32 - 176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a32 = v32 - 152;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a32 = a14;
  std::vector<std::pair<std::string,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::string>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x708], 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v16[2] = v14 + 24;
    std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v16);
    BOOL v8 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::vector<std::string>>::~__split_buffer(v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x708], 8) = 0;
    *(void *)(a2 + 16) = 0;
    BOOL v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1B8F3C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void fst::SymbolTable::ReadText()
{
}

void *fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43D68;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Start(*(void *)(a1 + 8));
}

double fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final(*(uint64_t **)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

double fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*a1 + 72))(&v12, a1, a2);
    uint64_t v6 = v12;
    Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(a1[15], a2);
    *(void *)Mutableuint64_t State = v6;
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  uint64_t v8 = a1[15];
  if (*(_DWORD *)(v8 + 76) == a2) {
    unint64_t v9 = (double **)(v8 + 80);
  }
  else {
    unint64_t v9 = (double **)(*(void *)(v8 + 8) + 8 * ((int)a2 + 1));
  }
  unint64_t v10 = *v9;
  double result = *v10;
  *a3 = *(void *)v10;
  return result;
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::GetMutableState(a1, a2);
  uint64_t v4 = MutableState;
  if (*(unsigned char *)(a1 + 88))
  {
    int v5 = *((_DWORD *)MutableState + 12);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 12) = v5 | 4;
      unint64_t v6 = *((void *)MutableState + 4) - *((void *)MutableState + 3) + *(void *)(a1 + 112) + 56;
      *(void *)(a1 + 112) = v6;
      *(unsigned char *)(a1 + 104) = 1;
      if (v6 > *(void *)(a1 + 96)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2) {
    return *(char **)(a1 + 80);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 76) = a2;
      Mutableuint64_t State = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 80) = MutableState;
      *((_DWORD *)MutableState + 12) |= 4u;
      std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve((uint64_t *)MutableState + 3, 0x80uLL);
      return *(char **)(a1 + 80);
    }
    int v5 = *(int32x2_t **)(a1 + 80);
    if (!v5[6].i32[1])
    {
      *(_DWORD *)(a1 + 76) = a2;
      *int v5 = vdup_n_s32(0x7F800000u);
      void v5[6] = 0;
      v5[1] = 0;
      void v5[2] = 0;
      v5[4] = v5[3];
      double result = *(char **)(a1 + 80);
      *((_DWORD *)result + 12) |= 4u;
      return result;
    }
    v5[6].i32[0] &= ~4u;
    *(unsigned char *)(a1 + 72) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      unint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache std::string::size_type size = ", 15);
      unint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      unint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 76);
      }
      Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 13))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = *((_DWORD *)MutableState + 12);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = *((void *)MutableState + 4) - *((void *)MutableState + 3) + 56;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 56);
            continue;
          }
        }
        else
        {
          int v22 = *((_DWORD *)MutableState + 12);
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *((_DWORD *)MutableState + 12) &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 112) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 96);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        uint64_t v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        long long v28 = (void *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      long long v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      long long v30 = (void *)fst::cerr(v29);
      long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      uint64_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      int v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache std::string::size_type size = ", 15);
      uint64_t v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      uint64_t v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      uint64_t v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_1B1B8FCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    uint64_t v13 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v13);
  }
  else
  {
    uint64_t v8 = *(char **)(v6 + 8 * a2);
    if (v8) {
      return v8;
    }
  }
  uint64_t v8 = (char *)operator new(0x38uLL);
  *(int32x2_t *)uint64_t v8 = vdup_n_s32(0x7F800000u);
  *(_OWORD *)(v8 + _Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(v8 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(void *)(*(void *)(a1 + 8) + 8 * v4) = v8;
  if (*(unsigned char *)a1)
  {
    unint64_t v9 = operator new(0x18uLL);
    v9[4] = a2;
    uint64_t v11 = *(void *)(a1 + 32);
    unint64_t v10 = (void *)(a1 + 32);
    *(void *)unint64_t v9 = v11;
    *((void *)v9 + 1) = v10;
    *(void *)(v11 + _Block_object_dispose(&STACK[0x708], 8) = v9;
    *unint64_t v10 = v9;
    ++v10[2];
  }
  return v8;
}

unint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 2);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

std::string *std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string&,std::vector<std::string>&,0>(std::string *this, long long *a2, long long **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return this;
}

void sub_1B1B90010(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string,std::vector<std::string>&,0>(uint64_t a1, long long *a2, long long **a3)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 32) = 0;
  long long v5 = (std::string *)(a1 + 24);
  v5->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v5, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return a1;
}

void sub_1B1B9008C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

kaldi::BeamSearchDecoder *std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100](kaldi::BeamSearchDecoder **a1, kaldi::BeamSearchDecoder *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::BeamSearchDecoder::~BeamSearchDecoder(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void kaldi::BeamSearchDecoder::~BeamSearchDecoder(kaldi::BeamSearchDecoder *this)
{
  uint64_t v2 = (void *)*((void *)this + 29);
  if (v2)
  {
    *((void *)this + 30) = v2;
    operator delete(v2);
  }
  unint64_t v10 = (void **)((char *)this + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v10);
  int v3 = (void *)*((void *)this + 23);
  if (v3)
  {
    *((void *)this + ++*(_DWORD *)(result + 24) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 20);
  if (v4)
  {
    *((void *)this + 21) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)this + 17);
  if (v5)
  {
    *((void *)this + 1_Block_object_dispose(&STACK[0x708], 8) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 14);
  if (v6)
  {
    *((void *)this + 15) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 11);
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 8);
  if (v8)
  {
    *((void *)this + 9) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 5);
  if (v9)
  {
    *((void *)this + 6) = v9;
    operator delete(v9);
  }
}

void std::__shared_ptr_emplace<fst::StdToLatticeMapper<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::StdToLatticeMapper<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E308;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,void>()
{
  unint64_t v0 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,0>(v0);
}

void sub_1B1B9028C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E618;
  fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::ArcMapFst();
}

void sub_1B1B902E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E618;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::ArcMapFst()
{
}

void sub_1B1B90420(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::~ArcMapFst(void *a1)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(*(void *)(a1 + 8));
}

double fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final@<D0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Final(*(void *)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Copy()
{
}

void sub_1B1B90604(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::InitStateIterator()
{
}

void sub_1B1B90694(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B1B9076C(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Init(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 120))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v3);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if (result == -1)
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 0x3FFFFFFF0004, 0);
    *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(a1 + 8) & 4 | result;
    if (*(_DWORD *)(a1 + 156) == 2) {
      *(_DWORD *)(a1 + 160) = 0;
    }
  }
  return result;
}

void sub_1B1B908E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD18;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38C48;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FD18;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38C48;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_1B1B90AB0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  long long v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38C48;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    uint64_t v3 = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  long long v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::~ArcMapFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A38858;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3) {
      MEMORY[0x1B3EA8670](v3, 0xC400A2AC0F1);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl((void *)a1);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A41620;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
      int v3 = *(_DWORD *)(a1 + 160);
      if (v3 != -1 && v3 <= v2) {
        int v5 = v2 + 1;
      }
      else {
        int v5 = v2;
      }
      if (v5 >= *(_DWORD *)(a1 + 164)) {
        *(_DWORD *)(a1 + 164) = v5 + 1;
      }
      *(_DWORD *)(a1 + 64) = v5;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v5) {
        *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = v5 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

double fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Final@<D0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2))goto LABEL_23; {
  int v6 = *(_DWORD *)(a1 + 156);
  }
  if (v6 != 1)
  {
    if (v6 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2) {
        float v7 = 0.0;
      }
      else {
        float v7 = INFINITY;
      }
      Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      *(float *)Mutableuint64_t State = v7;
      goto LABEL_22;
    }
    uint64_t v10 = *(void *)(a1 + 136);
    int v9 = *(_DWORD *)(a1 + 160);
LABEL_12:
    BOOL v12 = v9 != -1 && v9 <= a2;
    float v13 = (*(float (**)(uint64_t, void))(*(void *)v10 + 32))(v10, (a2 - v12));
    if (v13 == INFINITY) {
      float v7 = v13;
    }
    else {
      float v7 = 0.0;
    }
    Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    *(float *)Mutableuint64_t State = v13;
    goto LABEL_22;
  }
  int v9 = *(_DWORD *)(a1 + 160);
  if (v9 != a2)
  {
    uint64_t v10 = *(void *)(a1 + 136);
    goto LABEL_12;
  }
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  *(_DWORD *)Mutableuint64_t State = 0;
  float v7 = 0.0;
LABEL_22:
  *((float *)MutableState + 1) = v7;
  *((_DWORD *)MutableState + 12) |= 9u;
LABEL_23:
  uint64_t v14 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v14 + 76) == a2) {
    uint64_t v15 = (double **)(v14 + 80);
  }
  else {
    uint64_t v15 = (double **)(*(void *)(v14 + 8) + 8 * (a2 + 1));
  }
  unint64_t v16 = *v15;
  double result = *v16;
  *a3 = *(void *)v16;
  return result;
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 2);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Expand(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 136);
  BOOL v7 = v4 != -1 && v4 <= a2;
  unint64_t v35 = 0;
  (*(void (**)(uint64_t, void, uint64_t *))(*(void *)v5 + 136))(v5, (a2 - v7), &v31);
  while (1)
  {
    if (!v31)
    {
      if (v35 >= v33) {
        goto LABEL_33;
      }
      goto LABEL_17;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v31 + 24))(v31)) {
      break;
    }
    if (v31)
    {
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v31 + 32))();
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v8 = v32 + 16 * v35;
LABEL_18:
    uint64_t v9 = *(void *)v8;
    float v10 = *(float *)(v8 + 8);
    int v11 = *(_DWORD *)(v8 + 12);
    int v12 = *(_DWORD *)(a1 + 160);
    if (v12 != -1 && v12 <= v11) {
      ++v11;
    }
    if (v11 >= *(_DWORD *)(a1 + 164)) {
      *(_DWORD *)(a1 + 164) = v11 + 1;
    }
    float v38 = v10;
    float v37 = INFINITY;
    if (v10 == INFINITY) {
      float v14 = v10;
    }
    else {
      float v14 = 0.0;
    }
    uint64_t v27 = v9;
    float v28 = v10;
    float v29 = v14;
    int v30 = v11;
    Mutableuint64_t State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::PushArc(MutableState, (uint64_t)&v27);
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 40))(v31);
    }
    else {
      ++v35;
    }
  }
  if (v31)
  {
    (*(void (**)(void))(*(void *)v31 + 8))();
    goto LABEL_35;
  }
LABEL_33:
  if (v34) {
    --*v34;
  }
LABEL_35:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Final(a1, a2, &v31), v38 = *((float *)&v31 + 1), LODWORD(v27) = v31, v37 = INFINITY, float v36 = INFINITY, *(float *)&v31 == INFINITY)&& v38 == v36)
  {
    int v16 = *(_DWORD *)(a1 + 156);
    if (v16 == 2)
    {
      int v20 = *(_DWORD *)(a1 + 160);
      BOOL v22 = v20 != -1 && v20 <= a2;
      float v23 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v22));
      *(float *)&uint64_t v31 = v23;
      LODWORD(v27) = 2139095040;
      float v24 = 0.0;
      if (v23 == INFINITY) {
        float v24 = v23;
      }
      *(float *)&uint64_t v31 = v23;
      *(float *)&uint64_t v27 = v24;
      float v38 = INFINITY;
      float v37 = INFINITY;
      if (v23 != INFINITY || *(float *)&v27 != v37)
      {
        int v25 = *(_DWORD *)(a1 + 160);
        uint64_t v31 = 0;
        unint64_t v32 = __PAIR64__(LODWORD(v24), LODWORD(v23));
        LODWORD(v33) = v25;
        BOOL v26 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::PushArc(v26, (uint64_t)&v31);
      }
    }
    else if (v16 == 1)
    {
      int v17 = *(_DWORD *)(a1 + 160);
      BOOL v19 = v17 != -1 && v17 <= a2;
      LODWORD(v31) = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v19));
      LODWORD(v27) = 2139095040;
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1B9135C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(uint64_t a1, int a2)
{
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = *((void *)MutableState + 3);
  uint64_t v6 = *((void *)MutableState + 4) - v5;
  if (v6)
  {
    unint64_t v7 = v6 / 20;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    uint64_t v9 = (int *)(v5 + 16);
    do
    {
      int v11 = *v9;
      v9 += 5;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 12) |= 0xAu;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 48) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 32) - *(void *)(a2 + 24) + *(void *)(a1 + 112);
      *(void *)(a1 + 112) = v4;
      if (v4 > *(void *)(a1 + 96))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GC(a1, (char *)a2, 0, 0.666);
      }
    }
  }
}

void *fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = result[4] - v1;
  if (v2)
  {
    unint64_t v3 = v2 / 20;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    unint64_t v4 = (_DWORD *)(v1 + 4);
    do
    {
      if (!*(v4 - 1)) {
        ++result[1];
      }
      if (!*v4) {
        ++result[2];
      }
      v4 += 5;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[4];
  if (v3 >= a1[5])
  {
    uint64_t result = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 3, a2);
  }
  else
  {
    *(void *)unint64_t v3 = *(void *)a2;
    *(void *)(v3 + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(a2 + 8);
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(a2 + 16);
    uint64_t result = v3 + 20;
  }
  a1[4] = result;
  return result;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A41620;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1B91700(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1B917D0(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1B1B9193C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      Mutableuint64_t State = 0;
    }
    else {
      Mutableuint64_t State = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        int v8 = operator new(0x38uLL);
        fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          uint64_t v9 = operator new(0x18uLL);
          v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)uint64_t v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + _Block_object_dispose(&STACK[0x708], 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        int v8 = 0;
      }
      int v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          int v18 = 0;
        }
        BOOL v19 = &v18[8 * v14];
        *(void *)BOOL v19 = v8;
        float v13 = v19 + 8;
        unint64_t v21 = (char *)a1[1];
        int v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          int v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *int v12 = v8;
        float v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*>>((char *)(a1 + 24), v4, v5, 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 2));
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x708], 8) = *(unsigned int *)(a2 + 48);
  return a1;
}

char *std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*>>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(void *)uint64_t v7 = *(void *)a2;
      *(void *)(v7 + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(a2 + 8);
      *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
      v7 += 20;
      a2 += 20;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1B91C60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x708], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A39EC8;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1B1B91D14(_Unwind_Exception *exception_object)
{
  if (*v1) {
    fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::StateIterator(*v1);
  }
  _Unwind_Resume(exception_object);
}

float fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::CheckSuperfinal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v1 + 156) == 1 && !*(unsigned char *)(a1 + 44))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3)) {
        return result;
      }
      uint64_t v1 = *(void *)(a1 + 8);
    }
    else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
    {
      return result;
    }
    (*(void (**)(void, void))(**(void **)(v1 + 136) + 32))(*(void *)(v1 + 136), *(unsigned int *)(a1 + 40));
    return INFINITY;
  }
  return result;
}

void *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39EC8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39EC8;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::Done(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
      return *(unsigned char *)(a1 + 44) == 0;
    }
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(unsigned char *)(a1 + 44) == 0;
  }
  return 0;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::Next(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2) & 1) == 0)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
LABEL_7:
        fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::CheckSuperfinal(a1);
        return;
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 44)) {
    *(unsigned char *)(a1 + 44) = 0;
  }
}

float fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  else {
    *(_DWORD *)(a1 + 32) = 0;
  }
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 120);
  if (*(_DWORD *)(v3 + 76) == a2) {
    uint64_t v4 = (uint64_t *)(v3 + 80);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 8) + 8 * (a2 + 1));
  }
  uint64_t v5 = *v4;
  int v8 = *(_DWORD *)(v5 + 52);
  unint64_t v6 = (_DWORD *)(v5 + 52);
  int v7 = v8;
  uint64_t v9 = *(void *)(v6 - 7);
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v6 - 5) - v9) >> 2);
  if (*(void *)(v6 - 5) == v9) {
    uint64_t v9 = 0;
  }
  *a3 = 0;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v6;
  _DWORD *v6 = v7 + 1;
  return result;
}

void std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1B921F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<fst::SymbolTable *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,fst::SymbolTable>,std::allocator<fst::SymbolTable>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<fst::SymbolTable *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,fst::SymbolTable>,std::allocator<fst::SymbolTable>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::SymbolTable *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,fst::SymbolTable>,std::allocator<fst::SymbolTable>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<fst::ArcScaleMapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ArcScaleMapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcScaleMapper&,void>()
{
  unint64_t v0 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcScaleMapper&,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>,0>(v0);
}

void sub_1B1B9238C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcScaleMapper&,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E650;
  fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::ArcMapFst();
}

void sub_1B1B923E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::ArcMapFst()
{
}

void sub_1B1B92528(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::~ArcMapFst(void *a1)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Copy()
{
}

void sub_1B1B9270C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::InitStateIterator()
{
}

void sub_1B1B9279C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B1B9288C(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Init(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 120))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v3);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if (result == -1)
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 0x3FFFFFFF0004, 0);
    *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = *(void *)(a1 + 8) & 4 | result;
    if (*(_DWORD *)(a1 + 156) == 2) {
      *(_DWORD *)(a1 + 160) = 0;
    }
  }
  return result;
}

void sub_1B1B92A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void sub_1B1B92C0C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  uint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorCacheStore(void *a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1B1B92CA4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  std::__list_imp<char *>::clear(v2);
  unint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::~ArcMapFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A38938;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3) {
      MEMORY[0x1B3EA8670](v3, 0x1000C4052888210);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((void *)a1);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A418E0;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
      int v3 = *(_DWORD *)(a1 + 160);
      if (v3 != -1 && v3 <= v2) {
        int v5 = v2 + 1;
      }
      else {
        int v5 = v2;
      }
      if (v5 >= *(_DWORD *)(a1 + 164)) {
        *(_DWORD *)(a1 + 164) = v5 + 1;
      }
      *(_DWORD *)(a1 + 64) = v5;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v5) {
        *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x708], 8) = v5 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

float fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Final(uint64_t a1, int a2)
{
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2))goto LABEL_20; {
  int v4 = *(_DWORD *)(a1 + 156);
  }
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2) {
        float v5 = 0.0;
      }
      else {
        float v5 = INFINITY;
      }
LABEL_18:
      Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      *(float *)Mutableuint64_t State = v5;
      goto LABEL_19;
    }
    uint64_t v8 = *(void *)(a1 + 136);
    uint64_t v9 = *(float **)(a1 + 144);
    int v6 = *(_DWORD *)(a1 + 160);
LABEL_11:
    BOOL v11 = v6 != -1 && v6 <= a2;
    float v5 = *v9 * (*(float (**)(uint64_t, void))(*(void *)v8 + 32))(v8, (a2 - v11));
    goto LABEL_18;
  }
  int v6 = *(_DWORD *)(a1 + 160);
  if (v6 != a2)
  {
    uint64_t v8 = *(void *)(a1 + 136);
    uint64_t v9 = *(float **)(a1 + 144);
    goto LABEL_11;
  }
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  *(_DWORD *)Mutableuint64_t State = 0;
LABEL_19:
  *((_DWORD *)MutableState + 12) |= 9u;
LABEL_20:
  uint64_t v12 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v12 + 76) == a2) {
    uint64_t v13 = v12 + 80;
  }
  else {
    uint64_t v13 = *(void *)(v12 + 8) + 8 * (a2 + 1);
  }
  return **(float **)v13;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Expand(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 136);
  BOOL v7 = v4 != -1 && v4 <= a2;
  unint64_t v31 = 0;
  (*(void (**)(uint64_t, void, long long *))(*(void *)v5 + 136))(v5, (a2 - v7), &v28);
  while (1)
  {
    if (!(void)v28)
    {
      if (v31 >= v29) {
        goto LABEL_31;
      }
      goto LABEL_17;
    }
    if ((*(unsigned int (**)(void))(*(void *)v28 + 24))(v28)) {
      break;
    }
    if ((void)v28)
    {
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v28 + 32))();
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v8 = *((void *)&v28 + 1) + 16 * v31;
LABEL_18:
    uint64_t v9 = *(void *)v8;
    float v10 = *(float *)(v8 + 8);
    LODWORD(v11) = *(_DWORD *)(v8 + 12);
    int v12 = *(_DWORD *)(a1 + 160);
    if (v12 != -1 && v12 <= (int)v11) {
      uint64_t v11 = (v11 + 1);
    }
    else {
      uint64_t v11 = v11;
    }
    if ((int)v11 >= *(_DWORD *)(a1 + 164)) {
      *(_DWORD *)(a1 + 164) = v11 + 1;
    }
    unint64_t v14 = COERCE_UNSIGNED_INT(v10 * **(float **)(a1 + 144)) | (unint64_t)(v11 << 32);
    *(void *)&long long v27 = v9;
    *((void *)&v27 + 1) = v14;
    Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v27);
    if ((void)v28) {
      (*(void (**)(void))(*(void *)v28 + 40))(v28);
    }
    else {
      ++v31;
    }
  }
  if ((void)v28)
  {
    (*(void (**)(void))(*(void *)v28 + 8))();
    goto LABEL_33;
  }
LABEL_31:
  if (v30) {
    --*v30;
  }
LABEL_33:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (LODWORD(v2_Block_object_dispose(&STACK[0x708], 8) = fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Final(a1, a2), LODWORD(v27) = 2139095040, *(float *)&v28 == INFINITY))
  {
    int v16 = *(_DWORD *)(a1 + 156);
    if (v16 == 2)
    {
      int v21 = *(_DWORD *)(a1 + 160);
      BOOL v23 = v21 != -1 && v21 <= a2;
      int v20 = *(float **)(a1 + 144);
      float v24 = *v20
          * (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v23));
      *(float *)&long long v28 = v24;
      LODWORD(v27) = 2139095040;
      if (v24 != INFINITY)
      {
        unsigned int v25 = *(_DWORD *)(a1 + 160);
        *(void *)&long long v28 = 0;
        *((void *)&v28 + 1) = __PAIR64__(v25, LODWORD(v24));
        BOOL v26 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v26, &v28);
      }
    }
    else if (v16 == 1)
    {
      int v17 = *(_DWORD *)(a1 + 160);
      BOOL v19 = v17 != -1 && v17 <= a2;
      (*(void (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v19));
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1B93380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A418E0;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1B93530(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1B93610(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A39FC8;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x708], 8) = v3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1B1B936BC(_Unwind_Exception *exception_object)
{
  if (*v1) {
    fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::StateIterator(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    uint64_t v2 = result;
    if (!*(unsigned char *)(result + 44))
    {
      uint64_t result = *(void *)(result + 16);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
        if (result) {
          return result;
        }
        uint64_t v1 = *(void *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      uint64_t v3 = *(uint64_t (**)(void))(**(void **)(v1 + 136) + 32);
      return v3();
    }
  }
  return result;
}

void *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39FC8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39FC8;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::Next(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 40);
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if ((result & 1) == 0)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
LABEL_7:
        return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 44)) {
    *(unsigned char *)(a1 + 44) = 0;
  }
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  else {
    *(_DWORD *)(a1 + 32) = 0;
  }
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::CheckSuperfinal(a1);
}